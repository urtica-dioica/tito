5a594cb23883c7a42195df78dd5a3e3d
"use strict";

/* istanbul ignore next */
function cov_2iil37rkhm() {
  var path = "/home/kim/tito/server/src/controllers/redis/redisController.ts";
  var hash = "863024e9cea78f01f67e7616fbf0ba1a03bf8196";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/redis/redisController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 59
        }
      },
      "4": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 67
        }
      },
      "5": {
        start: {
          line: 8,
          column: 26
        },
        end: {
          line: 8,
          column: 75
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 63
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "8": {
        start: {
          line: 16,
          column: 27
        },
        end: {
          line: 16,
          column: 74
        }
      },
      "9": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "10": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 72
        }
      },
      "11": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "12": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "13": {
        start: {
          line: 40,
          column: 46
        },
        end: {
          line: 43,
          column: 14
        }
      },
      "14": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "15": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 72
        }
      },
      "16": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 63,
          column: 15
        }
      },
      "17": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "18": {
        start: {
          line: 71,
          column: 38
        },
        end: {
          line: 71,
          column: 47
        }
      },
      "19": {
        start: {
          line: 72,
          column: 25
        },
        end: {
          line: 72,
          column: 75
        }
      },
      "20": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 82,
          column: 15
        }
      },
      "21": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 71
        }
      },
      "22": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "23": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "24": {
        start: {
          line: 98,
          column: 28
        },
        end: {
          line: 98,
          column: 38
        }
      },
      "25": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "26": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 104,
          column: 19
        }
      },
      "27": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 23
        }
      },
      "28": {
        start: {
          line: 107,
          column: 26
        },
        end: {
          line: 107,
          column: 73
        }
      },
      "29": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "30": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 113,
          column: 19
        }
      },
      "31": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 23
        }
      },
      "32": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "33": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 72
        }
      },
      "34": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 132,
          column: 15
        }
      },
      "35": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "36": {
        start: {
          line: 140,
          column: 28
        },
        end: {
          line: 140,
          column: 38
        }
      },
      "37": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "38": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 146,
          column: 19
        }
      },
      "39": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 23
        }
      },
      "40": {
        start: {
          line: 149,
          column: 35
        },
        end: {
          line: 149,
          column: 43
        }
      },
      "41": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 157,
          column: 13
        }
      },
      "42": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 155,
          column: 19
        }
      },
      "43": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 23
        }
      },
      "44": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 72
        }
      },
      "45": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 167,
          column: 15
        }
      },
      "46": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 72
        }
      },
      "47": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 175,
          column: 15
        }
      },
      "48": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "49": {
        start: {
          line: 183,
          column: 28
        },
        end: {
          line: 183,
          column: 38
        }
      },
      "50": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "51": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 189,
          column: 19
        }
      },
      "52": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 23
        }
      },
      "53": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 63
        }
      },
      "54": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 200,
          column: 15
        }
      },
      "55": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 73
        }
      },
      "56": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "57": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "58": {
        start: {
          line: 216,
          column: 32
        },
        end: {
          line: 216,
          column: 41
        }
      },
      "59": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "60": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 70
        }
      },
      "61": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 63
        }
      },
      "62": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 230,
          column: 15
        }
      },
      "63": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 68
        }
      },
      "64": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 238,
          column: 15
        }
      },
      "65": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "66": {
        start: {
          line: 246,
          column: 31
        },
        end: {
          line: 246,
          column: 41
        }
      },
      "67": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "68": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 252,
          column: 19
        }
      },
      "69": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 23
        }
      },
      "70": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 75
        }
      },
      "71": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 263,
          column: 15
        }
      },
      "72": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 78
        }
      },
      "73": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 271,
          column: 15
        }
      },
      "74": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "75": {
        start: {
          line: 279,
          column: 37
        },
        end: {
          line: 279,
          column: 47
        }
      },
      "76": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "77": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 285,
          column: 19
        }
      },
      "78": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 23
        }
      },
      "79": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 87
        }
      },
      "80": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 296,
          column: 15
        }
      },
      "81": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 84
        }
      },
      "82": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 304,
          column: 15
        }
      },
      "83": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "84": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 71
        }
      },
      "85": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 319,
          column: 15
        }
      },
      "86": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 80
        }
      },
      "87": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 327,
          column: 15
        }
      },
      "88": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 367,
          column: 9
        }
      },
      "89": {
        start: {
          line: 335,
          column: 31
        },
        end: {
          line: 335,
          column: 71
        }
      },
      "90": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 358,
          column: 13
        }
      },
      "91": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 345,
          column: 19
        }
      },
      "92": {
        start: {
          line: 348,
          column: 16
        },
        end: {
          line: 357,
          column: 19
        }
      },
      "93": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 75
        }
      },
      "94": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 366,
          column: 15
        }
      },
      "95": {
        start: {
          line: 370,
          column: 0
        },
        end: {
          line: 370,
          column: 42
        }
      },
      "96": {
        start: {
          line: 371,
          column: 0
        },
        end: {
          line: 371,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 31
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 30
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 28
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 69
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 34
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 96
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 34
          },
          end: {
            line: 177,
            column: 5
          }
        },
        line: 138
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        loc: {
          start: {
            line: 181,
            column: 35
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 181
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 31
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 214
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 40
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 244
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 277,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        },
        loc: {
          start: {
            line: 277,
            column: 46
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 277
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 43
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 310
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 333,
            column: 4
          },
          end: {
            line: 333,
            column: 5
          }
        },
        loc: {
          start: {
            line: 333,
            column: 36
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 333
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 71,
            column: 20
          },
          end: {
            line: 71,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 71,
            column: 30
          },
          end: {
            line: 71,
            column: 33
          }
        }],
        line: 71
      },
      "4": {
        loc: {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "5": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "6": {
        loc: {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "7": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "8": {
        loc: {
          start: {
            line: 164,
            column: 25
          },
          end: {
            line: 164,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 25
          },
          end: {
            line: 164,
            column: 28
          }
        }, {
          start: {
            line: 164,
            column: 32
          },
          end: {
            line: 164,
            column: 43
          }
        }],
        line: 164
      },
      "9": {
        loc: {
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "10": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        }, {
          start: {
            line: 220,
            column: 17
          },
          end: {
            line: 222,
            column: 13
          }
        }],
        line: 217
      },
      "11": {
        loc: {
          start: {
            line: 227,
            column: 29
          },
          end: {
            line: 227,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 29
          },
          end: {
            line: 227,
            column: 36
          }
        }, {
          start: {
            line: 227,
            column: 40
          },
          end: {
            line: 227,
            column: 45
          }
        }],
        line: 227
      },
      "12": {
        loc: {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "13": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 287,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 287,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "14": {
        loc: {
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        }, {
          start: {
            line: 347,
            column: 17
          },
          end: {
            line: 358,
            column: 13
          }
        }],
        line: 336
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/redis/redisController.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/redis/redisController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { redisService } from '../../services/redis/redisService';\nimport { cacheUtils } from '../../middleware/redis/cacheMiddleware';\nimport logger from '../../utils/logger';\n\nexport class RedisController {\n  /**\n   * Get Redis health status\n   */\n  async getHealth(_req: Request, res: Response): Promise<void> {\n    try {\n      const health = await redisService.healthCheck();\n      \n      res.json({\n        success: true,\n        message: 'Redis health check completed',\n        data: {\n          redis: health,\n          timestamp: new Date().toISOString()\n        }\n      });\n    } catch (error) {\n      logger.error('Redis health check failed:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Redis health check failed',\n        error: 'REDIS_HEALTH_CHECK_FAILED'\n      });\n    }\n  }\n\n  /**\n   * Get Redis statistics\n   */\n  async getStats(_req: Request, res: Response): Promise<void> {\n    try {\n      const [cacheStats, memoryUsage] = await Promise.all([\n        cacheUtils.getCacheStats(),\n        redisService.getMemoryUsage()\n      ]);\n\n      res.json({\n        success: true,\n        message: 'Redis statistics retrieved',\n        data: {\n          cache: cacheStats,\n          memory: memoryUsage,\n          connection: {\n            status: redisService.getConnectionStatus(),\n            timestamp: new Date().toISOString()\n          }\n        }\n      });\n    } catch (error) {\n      logger.error('Failed to get Redis stats:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get Redis statistics',\n        error: 'REDIS_STATS_FAILED'\n      });\n    }\n  }\n\n  /**\n   * Get cache keys by pattern\n   */\n  async getKeys(req: Request, res: Response): Promise<void> {\n    try {\n      const { pattern = '*' } = req.query;\n      const keys = await redisService.getKeys(pattern as string);\n\n      res.json({\n        success: true,\n        message: 'Cache keys retrieved',\n        data: {\n          pattern: pattern as string,\n          count: keys.length,\n          keys: keys.slice(0, 100), // Limit to first 100 keys\n          total: keys.length\n        }\n      });\n    } catch (error) {\n      logger.error('Failed to get cache keys:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get cache keys',\n        error: 'REDIS_KEYS_FAILED'\n      });\n    }\n  }\n\n  /**\n   * Get specific cache value\n   */\n  async getCacheValue(req: Request, res: Response): Promise<void> {\n    try {\n      const { key } = req.params;\n      if (!key) {\n        res.status(400).json({\n          success: false,\n          message: 'Cache key is required',\n          error: 'KEY_REQUIRED'\n        });\n        return;\n      }\n      const value = await redisService.getCache(key);\n\n      if (value === null) {\n        res.status(404).json({\n          success: false,\n          message: 'Cache key not found',\n          error: 'CACHE_KEY_NOT_FOUND'\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Cache value retrieved',\n        data: {\n          key,\n          value,\n          timestamp: new Date().toISOString()\n        }\n      });\n    } catch (error) {\n      logger.error('Failed to get cache value:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get cache value',\n        error: 'REDIS_GET_FAILED'\n      });\n    }\n  }\n\n  /**\n   * Set cache value\n   */\n  async setCacheValue(req: Request, res: Response): Promise<void> {\n    try {\n      const { key } = req.params;\n      if (!key) {\n        res.status(400).json({\n          success: false,\n          message: 'Cache key is required',\n          error: 'KEY_REQUIRED'\n        });\n        return;\n      }\n      const { value, ttl } = req.body;\n\n      if (value === undefined) {\n        res.status(400).json({\n          success: false,\n          message: 'Value is required',\n          error: 'VALUE_REQUIRED'\n        });\n        return;\n      }\n\n      await redisService.setCache(key, value, ttl);\n\n      res.json({\n        success: true,\n        message: 'Cache value set successfully',\n        data: {\n          key,\n          ttl: ttl || 'no expiry',\n          timestamp: new Date().toISOString()\n        }\n      });\n    } catch (error) {\n      logger.error('Failed to set cache value:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to set cache value',\n        error: 'REDIS_SET_FAILED'\n      });\n    }\n  }\n\n  /**\n   * Delete cache key\n   */\n  async deleteCacheKey(req: Request, res: Response): Promise<void> {\n    try {\n      const { key } = req.params;\n      if (!key) {\n        res.status(400).json({\n          success: false,\n          message: 'Cache key is required',\n          error: 'KEY_REQUIRED'\n        });\n        return;\n      }\n      await redisService.deleteCache(key);\n\n      res.json({\n        success: true,\n        message: 'Cache key deleted successfully',\n        data: {\n          key,\n          timestamp: new Date().toISOString()\n        }\n      });\n    } catch (error) {\n      logger.error('Failed to delete cache key:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete cache key',\n        error: 'REDIS_DELETE_FAILED'\n      });\n    }\n  }\n\n  /**\n   * Clear cache by pattern\n   */\n  async clearCache(req: Request, res: Response): Promise<void> {\n    try {\n      const { pattern } = req.query;\n      \n      if (pattern) {\n        await redisService.clearCache(pattern as string);\n      } else {\n        await redisService.clearCache();\n      }\n\n      res.json({\n        success: true,\n        message: 'Cache cleared successfully',\n        data: {\n          pattern: pattern || 'all',\n          timestamp: new Date().toISOString()\n        }\n      });\n    } catch (error) {\n      logger.error('Failed to clear cache:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to clear cache',\n        error: 'REDIS_CLEAR_FAILED'\n      });\n    }\n  }\n\n  /**\n   * Invalidate user cache\n   */\n  async invalidateUserCache(req: Request, res: Response): Promise<void> {\n    try {\n      const { userId } = req.params;\n      if (!userId) {\n        res.status(400).json({\n          success: false,\n          message: 'User ID is required',\n          error: 'USER_ID_REQUIRED'\n        });\n        return;\n      }\n      await cacheUtils.invalidateUserCache(userId);\n\n      res.json({\n        success: true,\n        message: 'User cache invalidated successfully',\n        data: {\n          userId,\n          timestamp: new Date().toISOString()\n        }\n      });\n    } catch (error) {\n      logger.error('Failed to invalidate user cache:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to invalidate user cache',\n        error: 'REDIS_INVALIDATE_USER_FAILED'\n      });\n    }\n  }\n\n  /**\n   * Invalidate department cache\n   */\n  async invalidateDepartmentCache(req: Request, res: Response): Promise<void> {\n    try {\n      const { departmentId } = req.params;\n      if (!departmentId) {\n        res.status(400).json({\n          success: false,\n          message: 'Department ID is required',\n          error: 'DEPARTMENT_ID_REQUIRED'\n        });\n        return;\n      }\n      await cacheUtils.invalidateDepartmentCache(departmentId);\n\n      res.json({\n        success: true,\n        message: 'Department cache invalidated successfully',\n        data: {\n          departmentId,\n          timestamp: new Date().toISOString()\n        }\n      });\n    } catch (error) {\n      logger.error('Failed to invalidate department cache:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to invalidate department cache',\n        error: 'REDIS_INVALIDATE_DEPT_FAILED'\n      });\n    }\n  }\n\n  /**\n   * Invalidate system cache\n   */\n  async invalidateSystemCache(_req: Request, res: Response): Promise<void> {\n    try {\n      await cacheUtils.invalidateSystemCache();\n\n      res.json({\n        success: true,\n        message: 'System cache invalidated successfully',\n        data: {\n          timestamp: new Date().toISOString()\n        }\n      });\n    } catch (error) {\n      logger.error('Failed to invalidate system cache:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to invalidate system cache',\n        error: 'REDIS_INVALIDATE_SYSTEM_FAILED'\n      });\n    }\n  }\n\n  /**\n   * Test Redis connection\n   */\n  async testConnection(_req: Request, res: Response): Promise<void> {\n    try {\n      const pingResult = await redisService.ping();\n      \n      if (pingResult === 'PONG') {\n        res.json({\n          success: true,\n          message: 'Redis connection test successful',\n          data: {\n            ping: pingResult,\n            status: 'connected',\n            timestamp: new Date().toISOString()\n          }\n        });\n      } else {\n        res.status(500).json({\n          success: false,\n          message: 'Redis connection test failed',\n          error: 'REDIS_PING_FAILED',\n          data: {\n            ping: pingResult,\n            status: 'unexpected_response',\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n    } catch (error) {\n      logger.error('Redis connection test failed:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Redis connection test failed',\n        error: 'REDIS_CONNECTION_TEST_FAILED'\n      });\n    }\n  }\n}\n\nexport const redisController = new RedisController(); "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "863024e9cea78f01f67e7616fbf0ba1a03bf8196"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2iil37rkhm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2iil37rkhm();
var __importDefault =
/* istanbul ignore next */
(cov_2iil37rkhm().s[0]++,
/* istanbul ignore next */
(cov_2iil37rkhm().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2iil37rkhm().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2iil37rkhm().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2iil37rkhm().f[0]++;
  cov_2iil37rkhm().s[1]++;
  return /* istanbul ignore next */(cov_2iil37rkhm().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2iil37rkhm().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2iil37rkhm().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2iil37rkhm().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2iil37rkhm().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2iil37rkhm().s[3]++;
exports.redisController = exports.RedisController = void 0;
const redisService_1 =
/* istanbul ignore next */
(cov_2iil37rkhm().s[4]++, require("../../services/redis/redisService"));
const cacheMiddleware_1 =
/* istanbul ignore next */
(cov_2iil37rkhm().s[5]++, require("../../middleware/redis/cacheMiddleware"));
const logger_1 =
/* istanbul ignore next */
(cov_2iil37rkhm().s[6]++, __importDefault(require("../../utils/logger")));
class RedisController {
  /**
   * Get Redis health status
   */
  async getHealth(_req, res) {
    /* istanbul ignore next */
    cov_2iil37rkhm().f[1]++;
    cov_2iil37rkhm().s[7]++;
    try {
      const health =
      /* istanbul ignore next */
      (cov_2iil37rkhm().s[8]++, await redisService_1.redisService.healthCheck());
      /* istanbul ignore next */
      cov_2iil37rkhm().s[9]++;
      res.json({
        success: true,
        message: 'Redis health check completed',
        data: {
          redis: health,
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2iil37rkhm().s[10]++;
      logger_1.default.error('Redis health check failed:', error);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[11]++;
      res.status(500).json({
        success: false,
        message: 'Redis health check failed',
        error: 'REDIS_HEALTH_CHECK_FAILED'
      });
    }
  }
  /**
   * Get Redis statistics
   */
  async getStats(_req, res) {
    /* istanbul ignore next */
    cov_2iil37rkhm().f[2]++;
    cov_2iil37rkhm().s[12]++;
    try {
      const [cacheStats, memoryUsage] =
      /* istanbul ignore next */
      (cov_2iil37rkhm().s[13]++, await Promise.all([cacheMiddleware_1.cacheUtils.getCacheStats(), redisService_1.redisService.getMemoryUsage()]));
      /* istanbul ignore next */
      cov_2iil37rkhm().s[14]++;
      res.json({
        success: true,
        message: 'Redis statistics retrieved',
        data: {
          cache: cacheStats,
          memory: memoryUsage,
          connection: {
            status: redisService_1.redisService.getConnectionStatus(),
            timestamp: new Date().toISOString()
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2iil37rkhm().s[15]++;
      logger_1.default.error('Failed to get Redis stats:', error);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[16]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get Redis statistics',
        error: 'REDIS_STATS_FAILED'
      });
    }
  }
  /**
   * Get cache keys by pattern
   */
  async getKeys(req, res) {
    /* istanbul ignore next */
    cov_2iil37rkhm().f[3]++;
    cov_2iil37rkhm().s[17]++;
    try {
      const {
        pattern =
        /* istanbul ignore next */
        (cov_2iil37rkhm().b[3][0]++, '*')
      } =
      /* istanbul ignore next */
      (cov_2iil37rkhm().s[18]++, req.query);
      const keys =
      /* istanbul ignore next */
      (cov_2iil37rkhm().s[19]++, await redisService_1.redisService.getKeys(pattern));
      /* istanbul ignore next */
      cov_2iil37rkhm().s[20]++;
      res.json({
        success: true,
        message: 'Cache keys retrieved',
        data: {
          pattern: pattern,
          count: keys.length,
          keys: keys.slice(0, 100),
          // Limit to first 100 keys
          total: keys.length
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2iil37rkhm().s[21]++;
      logger_1.default.error('Failed to get cache keys:', error);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[22]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get cache keys',
        error: 'REDIS_KEYS_FAILED'
      });
    }
  }
  /**
   * Get specific cache value
   */
  async getCacheValue(req, res) {
    /* istanbul ignore next */
    cov_2iil37rkhm().f[4]++;
    cov_2iil37rkhm().s[23]++;
    try {
      const {
        key
      } =
      /* istanbul ignore next */
      (cov_2iil37rkhm().s[24]++, req.params);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[25]++;
      if (!key) {
        /* istanbul ignore next */
        cov_2iil37rkhm().b[4][0]++;
        cov_2iil37rkhm().s[26]++;
        res.status(400).json({
          success: false,
          message: 'Cache key is required',
          error: 'KEY_REQUIRED'
        });
        /* istanbul ignore next */
        cov_2iil37rkhm().s[27]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2iil37rkhm().b[4][1]++;
      }
      const value =
      /* istanbul ignore next */
      (cov_2iil37rkhm().s[28]++, await redisService_1.redisService.getCache(key));
      /* istanbul ignore next */
      cov_2iil37rkhm().s[29]++;
      if (value === null) {
        /* istanbul ignore next */
        cov_2iil37rkhm().b[5][0]++;
        cov_2iil37rkhm().s[30]++;
        res.status(404).json({
          success: false,
          message: 'Cache key not found',
          error: 'CACHE_KEY_NOT_FOUND'
        });
        /* istanbul ignore next */
        cov_2iil37rkhm().s[31]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2iil37rkhm().b[5][1]++;
      }
      cov_2iil37rkhm().s[32]++;
      res.json({
        success: true,
        message: 'Cache value retrieved',
        data: {
          key,
          value,
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2iil37rkhm().s[33]++;
      logger_1.default.error('Failed to get cache value:', error);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[34]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get cache value',
        error: 'REDIS_GET_FAILED'
      });
    }
  }
  /**
   * Set cache value
   */
  async setCacheValue(req, res) {
    /* istanbul ignore next */
    cov_2iil37rkhm().f[5]++;
    cov_2iil37rkhm().s[35]++;
    try {
      const {
        key
      } =
      /* istanbul ignore next */
      (cov_2iil37rkhm().s[36]++, req.params);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[37]++;
      if (!key) {
        /* istanbul ignore next */
        cov_2iil37rkhm().b[6][0]++;
        cov_2iil37rkhm().s[38]++;
        res.status(400).json({
          success: false,
          message: 'Cache key is required',
          error: 'KEY_REQUIRED'
        });
        /* istanbul ignore next */
        cov_2iil37rkhm().s[39]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2iil37rkhm().b[6][1]++;
      }
      const {
        value,
        ttl
      } =
      /* istanbul ignore next */
      (cov_2iil37rkhm().s[40]++, req.body);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[41]++;
      if (value === undefined) {
        /* istanbul ignore next */
        cov_2iil37rkhm().b[7][0]++;
        cov_2iil37rkhm().s[42]++;
        res.status(400).json({
          success: false,
          message: 'Value is required',
          error: 'VALUE_REQUIRED'
        });
        /* istanbul ignore next */
        cov_2iil37rkhm().s[43]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2iil37rkhm().b[7][1]++;
      }
      cov_2iil37rkhm().s[44]++;
      await redisService_1.redisService.setCache(key, value, ttl);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[45]++;
      res.json({
        success: true,
        message: 'Cache value set successfully',
        data: {
          key,
          ttl:
          /* istanbul ignore next */
          (cov_2iil37rkhm().b[8][0]++, ttl) ||
          /* istanbul ignore next */
          (cov_2iil37rkhm().b[8][1]++, 'no expiry'),
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2iil37rkhm().s[46]++;
      logger_1.default.error('Failed to set cache value:', error);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[47]++;
      res.status(500).json({
        success: false,
        message: 'Failed to set cache value',
        error: 'REDIS_SET_FAILED'
      });
    }
  }
  /**
   * Delete cache key
   */
  async deleteCacheKey(req, res) {
    /* istanbul ignore next */
    cov_2iil37rkhm().f[6]++;
    cov_2iil37rkhm().s[48]++;
    try {
      const {
        key
      } =
      /* istanbul ignore next */
      (cov_2iil37rkhm().s[49]++, req.params);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[50]++;
      if (!key) {
        /* istanbul ignore next */
        cov_2iil37rkhm().b[9][0]++;
        cov_2iil37rkhm().s[51]++;
        res.status(400).json({
          success: false,
          message: 'Cache key is required',
          error: 'KEY_REQUIRED'
        });
        /* istanbul ignore next */
        cov_2iil37rkhm().s[52]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2iil37rkhm().b[9][1]++;
      }
      cov_2iil37rkhm().s[53]++;
      await redisService_1.redisService.deleteCache(key);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[54]++;
      res.json({
        success: true,
        message: 'Cache key deleted successfully',
        data: {
          key,
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2iil37rkhm().s[55]++;
      logger_1.default.error('Failed to delete cache key:', error);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[56]++;
      res.status(500).json({
        success: false,
        message: 'Failed to delete cache key',
        error: 'REDIS_DELETE_FAILED'
      });
    }
  }
  /**
   * Clear cache by pattern
   */
  async clearCache(req, res) {
    /* istanbul ignore next */
    cov_2iil37rkhm().f[7]++;
    cov_2iil37rkhm().s[57]++;
    try {
      const {
        pattern
      } =
      /* istanbul ignore next */
      (cov_2iil37rkhm().s[58]++, req.query);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[59]++;
      if (pattern) {
        /* istanbul ignore next */
        cov_2iil37rkhm().b[10][0]++;
        cov_2iil37rkhm().s[60]++;
        await redisService_1.redisService.clearCache(pattern);
      } else {
        /* istanbul ignore next */
        cov_2iil37rkhm().b[10][1]++;
        cov_2iil37rkhm().s[61]++;
        await redisService_1.redisService.clearCache();
      }
      /* istanbul ignore next */
      cov_2iil37rkhm().s[62]++;
      res.json({
        success: true,
        message: 'Cache cleared successfully',
        data: {
          pattern:
          /* istanbul ignore next */
          (cov_2iil37rkhm().b[11][0]++, pattern) ||
          /* istanbul ignore next */
          (cov_2iil37rkhm().b[11][1]++, 'all'),
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2iil37rkhm().s[63]++;
      logger_1.default.error('Failed to clear cache:', error);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[64]++;
      res.status(500).json({
        success: false,
        message: 'Failed to clear cache',
        error: 'REDIS_CLEAR_FAILED'
      });
    }
  }
  /**
   * Invalidate user cache
   */
  async invalidateUserCache(req, res) {
    /* istanbul ignore next */
    cov_2iil37rkhm().f[8]++;
    cov_2iil37rkhm().s[65]++;
    try {
      const {
        userId
      } =
      /* istanbul ignore next */
      (cov_2iil37rkhm().s[66]++, req.params);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[67]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_2iil37rkhm().b[12][0]++;
        cov_2iil37rkhm().s[68]++;
        res.status(400).json({
          success: false,
          message: 'User ID is required',
          error: 'USER_ID_REQUIRED'
        });
        /* istanbul ignore next */
        cov_2iil37rkhm().s[69]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2iil37rkhm().b[12][1]++;
      }
      cov_2iil37rkhm().s[70]++;
      await cacheMiddleware_1.cacheUtils.invalidateUserCache(userId);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[71]++;
      res.json({
        success: true,
        message: 'User cache invalidated successfully',
        data: {
          userId,
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2iil37rkhm().s[72]++;
      logger_1.default.error('Failed to invalidate user cache:', error);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[73]++;
      res.status(500).json({
        success: false,
        message: 'Failed to invalidate user cache',
        error: 'REDIS_INVALIDATE_USER_FAILED'
      });
    }
  }
  /**
   * Invalidate department cache
   */
  async invalidateDepartmentCache(req, res) {
    /* istanbul ignore next */
    cov_2iil37rkhm().f[9]++;
    cov_2iil37rkhm().s[74]++;
    try {
      const {
        departmentId
      } =
      /* istanbul ignore next */
      (cov_2iil37rkhm().s[75]++, req.params);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[76]++;
      if (!departmentId) {
        /* istanbul ignore next */
        cov_2iil37rkhm().b[13][0]++;
        cov_2iil37rkhm().s[77]++;
        res.status(400).json({
          success: false,
          message: 'Department ID is required',
          error: 'DEPARTMENT_ID_REQUIRED'
        });
        /* istanbul ignore next */
        cov_2iil37rkhm().s[78]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2iil37rkhm().b[13][1]++;
      }
      cov_2iil37rkhm().s[79]++;
      await cacheMiddleware_1.cacheUtils.invalidateDepartmentCache(departmentId);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[80]++;
      res.json({
        success: true,
        message: 'Department cache invalidated successfully',
        data: {
          departmentId,
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2iil37rkhm().s[81]++;
      logger_1.default.error('Failed to invalidate department cache:', error);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[82]++;
      res.status(500).json({
        success: false,
        message: 'Failed to invalidate department cache',
        error: 'REDIS_INVALIDATE_DEPT_FAILED'
      });
    }
  }
  /**
   * Invalidate system cache
   */
  async invalidateSystemCache(_req, res) {
    /* istanbul ignore next */
    cov_2iil37rkhm().f[10]++;
    cov_2iil37rkhm().s[83]++;
    try {
      /* istanbul ignore next */
      cov_2iil37rkhm().s[84]++;
      await cacheMiddleware_1.cacheUtils.invalidateSystemCache();
      /* istanbul ignore next */
      cov_2iil37rkhm().s[85]++;
      res.json({
        success: true,
        message: 'System cache invalidated successfully',
        data: {
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2iil37rkhm().s[86]++;
      logger_1.default.error('Failed to invalidate system cache:', error);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[87]++;
      res.status(500).json({
        success: false,
        message: 'Failed to invalidate system cache',
        error: 'REDIS_INVALIDATE_SYSTEM_FAILED'
      });
    }
  }
  /**
   * Test Redis connection
   */
  async testConnection(_req, res) {
    /* istanbul ignore next */
    cov_2iil37rkhm().f[11]++;
    cov_2iil37rkhm().s[88]++;
    try {
      const pingResult =
      /* istanbul ignore next */
      (cov_2iil37rkhm().s[89]++, await redisService_1.redisService.ping());
      /* istanbul ignore next */
      cov_2iil37rkhm().s[90]++;
      if (pingResult === 'PONG') {
        /* istanbul ignore next */
        cov_2iil37rkhm().b[14][0]++;
        cov_2iil37rkhm().s[91]++;
        res.json({
          success: true,
          message: 'Redis connection test successful',
          data: {
            ping: pingResult,
            status: 'connected',
            timestamp: new Date().toISOString()
          }
        });
      } else {
        /* istanbul ignore next */
        cov_2iil37rkhm().b[14][1]++;
        cov_2iil37rkhm().s[92]++;
        res.status(500).json({
          success: false,
          message: 'Redis connection test failed',
          error: 'REDIS_PING_FAILED',
          data: {
            ping: pingResult,
            status: 'unexpected_response',
            timestamp: new Date().toISOString()
          }
        });
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2iil37rkhm().s[93]++;
      logger_1.default.error('Redis connection test failed:', error);
      /* istanbul ignore next */
      cov_2iil37rkhm().s[94]++;
      res.status(500).json({
        success: false,
        message: 'Redis connection test failed',
        error: 'REDIS_CONNECTION_TEST_FAILED'
      });
    }
  }
}
/* istanbul ignore next */
cov_2iil37rkhm().s[95]++;
exports.RedisController = RedisController;
/* istanbul ignore next */
cov_2iil37rkhm().s[96]++;
exports.redisController = new RedisController();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,