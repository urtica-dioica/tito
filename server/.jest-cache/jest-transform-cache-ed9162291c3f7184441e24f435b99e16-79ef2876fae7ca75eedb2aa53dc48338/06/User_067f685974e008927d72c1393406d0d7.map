{"version":3,"names":["bcryptjs_1","cov_2kmpc8l1r3","s","__importDefault","require","database_1","environment_1","roles_1","UserModel","constructor","f","pool","getPool","createUser","userData","email","password","first_name","last_name","role","isValidRole","b","Error","password_hash","default","hash","config","security","bcryptRounds","query","values","result","user","rows","_","userWithoutPassword","error","message","includes","findById","id","length","findByEmail","findByEmailWithoutPassword","updateUser","updateData","fields","paramCount","undefined","push","is_active","Date","join","updatePassword","newPassword","rowCount","deleteUser","listAllUsers","listUsersByRole","userExists","verifyPassword","compare","getUserCountByRole","parseInt","count","getTotalUserCount","exports","userModel"],"sources":["/home/kim/tito/server/src/models/auth/User.ts"],"sourcesContent":["import { Pool } from 'pg';\nimport bcrypt from 'bcryptjs';\nimport { getPool } from '../../config/database';\nimport { config } from '../../config/environment';\nimport { UserRole, isValidRole } from '../../utils/constants/roles';\n\nexport interface User {\n  id: string;\n  email: string;\n  password_hash: string;\n  first_name: string;\n  last_name: string;\n  role: UserRole;\n  is_active: boolean;\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface CreateUserData {\n  email: string;\n  password: string;\n  first_name: string;\n  last_name: string;\n  role: UserRole;\n}\n\nexport interface UpdateUserData {\n  email?: string;\n  first_name?: string;\n  last_name?: string;\n  role?: UserRole;\n  is_active?: boolean;\n}\n\nexport interface UserWithPassword extends Omit<User, 'password_hash'> {\n  password_hash: string;\n}\n\nexport interface UserWithoutPassword extends Omit<User, 'password_hash'> {\n  password_hash?: never;\n}\n\nexport class UserModel {\n  private pool: Pool;\n\n  constructor() {\n    this.pool = getPool();\n  }\n\n  /**\n   * Create a new user\n   */\n  async createUser(userData: CreateUserData): Promise<UserWithoutPassword> {\n    const { email, password, first_name, last_name, role } = userData;\n\n    // Validate role\n    if (!isValidRole(role)) {\n      throw new Error(`Invalid role: ${role}`);\n    }\n\n    // Hash password\n    const password_hash = await bcrypt.hash(password, config.security.bcryptRounds);\n\n    const query = `\n      INSERT INTO users (email, password_hash, first_name, last_name, role)\n      VALUES ($1, $2, $3, $4, $5)\n      RETURNING id, email, password_hash, first_name, last_name, role, is_active, created_at, updated_at\n    `;\n\n    const values = [email, password_hash, first_name, last_name, role];\n\n    try {\n      const result = await this.pool.query(query, values);\n      const user = result.rows[0];\n      \n      // Remove password_hash from response\n      const { password_hash: _, ...userWithoutPassword } = user;\n      return userWithoutPassword;\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('duplicate key')) {\n        throw new Error('User with this email already exists');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Find user by ID\n   */\n  async findById(id: string): Promise<UserWithoutPassword | null> {\n    const query = `\n      SELECT id, email, password_hash, first_name, last_name, role, is_active, created_at, updated_at\n      FROM users\n      WHERE id = $1\n    `;\n\n    try {\n      const result = await this.pool.query(query, [id]);\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      const user = result.rows[0];\n      const { password_hash: _, ...userWithoutPassword } = user;\n      return userWithoutPassword;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Find user by email\n   */\n  async findByEmail(email: string): Promise<UserWithPassword | null> {\n    const query = `\n      SELECT id, email, password_hash, first_name, last_name, role, is_active, created_at, updated_at\n      FROM users\n      WHERE email = $1\n    `;\n\n    try {\n      const result = await this.pool.query(query, [email]);\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      return result.rows[0];\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Find user by email (without password)\n   */\n  async findByEmailWithoutPassword(email: string): Promise<UserWithoutPassword | null> {\n    const query = `\n      SELECT id, email, first_name, last_name, role, is_active, created_at, updated_at\n      FROM users\n      WHERE email = $1\n    `;\n\n    try {\n      const result = await this.pool.query(query, [email]);\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      return result.rows[0];\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update user\n   */\n  async updateUser(id: string, updateData: UpdateUserData): Promise<UserWithoutPassword | null> {\n    const fields: string[] = [];\n    const values: any[] = [];\n    let paramCount = 1;\n\n    // Build dynamic query\n    if (updateData.email !== undefined) {\n      fields.push(`email = $${paramCount++}`);\n      values.push(updateData.email);\n    }\n    if (updateData.first_name !== undefined) {\n      fields.push(`first_name = $${paramCount++}`);\n      values.push(updateData.first_name);\n    }\n    if (updateData.last_name !== undefined) {\n      fields.push(`last_name = $${paramCount++}`);\n      values.push(updateData.last_name);\n    }\n    if (updateData.role !== undefined) {\n      if (!isValidRole(updateData.role)) {\n        throw new Error(`Invalid role: ${updateData.role}`);\n      }\n      fields.push(`role = $${paramCount++}`);\n      values.push(updateData.role);\n    }\n    if (updateData.is_active !== undefined) {\n      fields.push(`is_active = $${paramCount++}`);\n      values.push(updateData.is_active);\n    }\n\n    if (fields.length === 0) {\n      return this.findById(id);\n    }\n\n    // Add updated_at timestamp\n    fields.push(`updated_at = $${paramCount++}`);\n    values.push(new Date());\n\n    // Add user ID\n    values.push(id);\n\n    const query = `\n      UPDATE users\n      SET ${fields.join(', ')}\n      WHERE id = $${paramCount}\n      RETURNING id, email, first_name, last_name, role, is_active, created_at, updated_at\n    `;\n\n    try {\n      const result = await this.pool.query(query, values);\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      return result.rows[0];\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('duplicate key')) {\n        throw new Error('User with this email already exists');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Update user password\n   */\n  async updatePassword(id: string, newPassword: string): Promise<boolean> {\n    const password_hash = await bcrypt.hash(newPassword, config.security.bcryptRounds);\n    \n    const query = `\n      UPDATE users\n      SET password_hash = $1, updated_at = $2\n      WHERE id = $3\n    `;\n\n    try {\n      const result = await this.pool.query(query, [password_hash, new Date(), id]);\n      return result.rowCount ? result.rowCount > 0 : false;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Delete user\n   */\n  async deleteUser(id: string): Promise<boolean> {\n    const query = 'DELETE FROM users WHERE id = $1';\n    \n    try {\n      const result = await this.pool.query(query, [id]);\n      return result.rowCount ? result.rowCount > 0 : false;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * List all users (for HR admin)\n   */\n  async listAllUsers(): Promise<UserWithoutPassword[]> {\n    const query = `\n      SELECT id, email, first_name, last_name, role, is_active, created_at, updated_at\n      FROM users\n      ORDER BY created_at DESC\n    `;\n\n    try {\n      const result = await this.pool.query(query);\n      return result.rows;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * List users by role\n   */\n  async listUsersByRole(role: UserRole): Promise<UserWithoutPassword[]> {\n    const query = `\n      SELECT id, email, first_name, last_name, role, is_active, created_at, updated_at\n      FROM users\n      WHERE role = $1\n      ORDER BY created_at DESC\n    `;\n\n    try {\n      const result = await this.pool.query(query, [role]);\n      return result.rows;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Check if user exists\n   */\n  async userExists(email: string): Promise<boolean> {\n    const query = 'SELECT 1 FROM users WHERE email = $1';\n    \n    try {\n      const result = await this.pool.query(query, [email]);\n      return result.rows.length > 0;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Verify password\n   */\n  async verifyPassword(email: string, password: string): Promise<boolean> {\n    const user = await this.findByEmail(email);\n    if (!user) {\n      return false;\n    }\n\n    return bcrypt.compare(password, user.password_hash);\n  }\n\n  /**\n   * Get user count by role\n   */\n  async getUserCountByRole(role: UserRole): Promise<number> {\n    const query = 'SELECT COUNT(*) FROM users WHERE role = $1';\n    \n    try {\n      const result = await this.pool.query(query, [role]);\n      return parseInt(result.rows[0].count);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get total user count\n   */\n  async getTotalUserCount(): Promise<number> {\n    const query = 'SELECT COUNT(*) FROM users';\n    \n    try {\n      const result = await this.pool.query(query);\n      return parseInt(result.rows[0].count);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const userModel = new UserModel(); "],"mappingscAAA,GAAAC,CAAA,OAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,UAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAC,CAAA,OAAAE,OAAA;AACA,MAAAE,aAAA;AAAA;AAAA,CAAAL,cAAA,GAAAC,CAAA,OAAAE,OAAA;AACA,MAAAG,OAAA;AAAA;AAAA,CAAAN,cAAA,GAAAC,CAAA,OAAAE,OAAA;AAsCA,MAAaI,SAAS;EAGpBC,YAAA;IAAA;IAAAR,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAC,CAAA;IACE,IAAI,CAACS,IAAI,GAAG,IAAAN,UAAA,CAAAO,OAAO,GAAE;EACvB;EAEA;;;EAGA,MAAMC,UAAUA,CAACC,QAAwB;IAAA;IAAAb,cAAA,GAAAS,CAAA;IACvC,MAAM;MAAEK,KAAK;MAAEC,QAAQ;MAAEC,UAAU;MAAEC,SAAS;MAAEC;IAAI,CAAE;IAAA;IAAA,CAAAlB,cAAA,GAAAC,CAAA,OAAGY,QAAQ;IAEjE;IAAA;IAAAb,cAAA,GAAAC,CAAA;IACA,IAAI,CAAC,IAAAK,OAAA,CAAAa,WAAW,EAACD,IAAI,CAAC,EAAE;MAAA;MAAAlB,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAC,CAAA;MACtB,MAAM,IAAIoB,KAAK,CAAC,iBAAiBH,IAAI,EAAE,CAAC;IAC1C,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAAoB,CAAA;IAAA;IAED;IACA,MAAME,aAAa;IAAA;IAAA,CAAAtB,cAAA,GAAAC,CAAA,QAAG,MAAMF,UAAA,CAAAwB,OAAM,CAACC,IAAI,CAACT,QAAQ,EAAEV,aAAA,CAAAoB,MAAM,CAACC,QAAQ,CAACC,YAAY,CAAC;IAE/E,MAAMC,KAAK;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,QAAG;;;;KAIb;IAED,MAAM4B,MAAM;IAAA;IAAA,CAAA7B,cAAA,GAAAC,CAAA,QAAG,CAACa,KAAK,EAAEQ,aAAa,EAAEN,UAAU,EAAEC,SAAS,EAAEC,IAAI,CAAC;IAAC;IAAAlB,cAAA,GAAAC,CAAA;IAEnE,IAAI;MACF,MAAM6B,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACS,IAAI,CAACkB,KAAK,CAACA,KAAK,EAAEC,MAAM,CAAC;MACnD,MAAME,IAAI;MAAA;MAAA,CAAA/B,cAAA,GAAAC,CAAA,QAAG6B,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;MAE3B;MACA,MAAM;QAAEV,aAAa,EAAEW,CAAC;QAAE,GAAGC;MAAmB,CAAE;MAAA;MAAA,CAAAlC,cAAA,GAAAC,CAAA,QAAG8B,IAAI;MAAC;MAAA/B,cAAA,GAAAC,CAAA;MAC1D,OAAOiC,mBAAmB;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACd;MAAI;MAAA,CAAAD,cAAA,GAAAoB,CAAA,UAAAe,KAAK,YAAYd,KAAK;MAAA;MAAA,CAAArB,cAAA,GAAAoB,CAAA,UAAIe,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,eAAe,CAAC,GAAE;QAAA;QAAArC,cAAA,GAAAoB,CAAA;QAAApB,cAAA,GAAAC,CAAA;QACrE,MAAM,IAAIoB,KAAK,CAAC,qCAAqC,CAAC;MACxD,CAAC;MAAA;MAAA;QAAArB,cAAA,GAAAoB,CAAA;MAAA;MAAApB,cAAA,GAAAC,CAAA;MACD,MAAMkC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMG,QAAQA,CAACC,EAAU;IAAA;IAAAvC,cAAA,GAAAS,CAAA;IACvB,MAAMmB,KAAK;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,QAAG;;;;KAIb;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAEF,IAAI;MACF,MAAM6B,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACS,IAAI,CAACkB,KAAK,CAACA,KAAK,EAAE,CAACW,EAAE,CAAC,CAAC;MAAC;MAAAvC,cAAA,GAAAC,CAAA;MAClD,IAAI6B,MAAM,CAACE,IAAI,CAACQ,MAAM,KAAK,CAAC,EAAE;QAAA;QAAAxC,cAAA,GAAAoB,CAAA;QAAApB,cAAA,GAAAC,CAAA;QAC5B,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAD,cAAA,GAAAoB,CAAA;MAAA;MAED,MAAMW,IAAI;MAAA;MAAA,CAAA/B,cAAA,GAAAC,CAAA,QAAG6B,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;MAC3B,MAAM;QAAEV,aAAa,EAAEW,CAAC;QAAE,GAAGC;MAAmB,CAAE;MAAA;MAAA,CAAAlC,cAAA,GAAAC,CAAA,QAAG8B,IAAI;MAAC;MAAA/B,cAAA,GAAAC,CAAA;MAC1D,OAAOiC,mBAAmB;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACd,MAAMkC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMM,WAAWA,CAAC3B,KAAa;IAAA;IAAAd,cAAA,GAAAS,CAAA;IAC7B,MAAMmB,KAAK;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,QAAG;;;;KAIb;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAEF,IAAI;MACF,MAAM6B,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACS,IAAI,CAACkB,KAAK,CAACA,KAAK,EAAE,CAACd,KAAK,CAAC,CAAC;MAAC;MAAAd,cAAA,GAAAC,CAAA;MACrD,IAAI6B,MAAM,CAACE,IAAI,CAACQ,MAAM,KAAK,CAAC,EAAE;QAAA;QAAAxC,cAAA,GAAAoB,CAAA;QAAApB,cAAA,GAAAC,CAAA;QAC5B,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAD,cAAA,GAAAoB,CAAA;MAAA;MAAApB,cAAA,GAAAC,CAAA;MAED,OAAO6B,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOG,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACd,MAAMkC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMO,0BAA0BA,CAAC5B,KAAa;IAAA;IAAAd,cAAA,GAAAS,CAAA;IAC5C,MAAMmB,KAAK;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,QAAG;;;;KAIb;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAEF,IAAI;MACF,MAAM6B,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACS,IAAI,CAACkB,KAAK,CAACA,KAAK,EAAE,CAACd,KAAK,CAAC,CAAC;MAAC;MAAAd,cAAA,GAAAC,CAAA;MACrD,IAAI6B,MAAM,CAACE,IAAI,CAACQ,MAAM,KAAK,CAAC,EAAE;QAAA;QAAAxC,cAAA,GAAAoB,CAAA;QAAApB,cAAA,GAAAC,CAAA;QAC5B,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAD,cAAA,GAAAoB,CAAA;MAAA;MAAApB,cAAA,GAAAC,CAAA;MAED,OAAO6B,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOG,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACd,MAAMkC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMQ,UAAUA,CAACJ,EAAU,EAAEK,UAA0B;IAAA;IAAA5C,cAAA,GAAAS,CAAA;IACrD,MAAMoC,MAAM;IAAA;IAAA,CAAA7C,cAAA,GAAAC,CAAA,QAAa,EAAE;IAC3B,MAAM4B,MAAM;IAAA;IAAA,CAAA7B,cAAA,GAAAC,CAAA,QAAU,EAAE;IACxB,IAAI6C,UAAU;IAAA;IAAA,CAAA9C,cAAA,GAAAC,CAAA,QAAG,CAAC;IAElB;IAAA;IAAAD,cAAA,GAAAC,CAAA;IACA,IAAI2C,UAAU,CAAC9B,KAAK,KAAKiC,SAAS,EAAE;MAAA;MAAA/C,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAC,CAAA;MAClC4C,MAAM,CAACG,IAAI,CAAC,YAAYF,UAAU,EAAE,EAAE,CAAC;MAAC;MAAA9C,cAAA,GAAAC,CAAA;MACxC4B,MAAM,CAACmB,IAAI,CAACJ,UAAU,CAAC9B,KAAK,CAAC;IAC/B,CAAC;IAAA;IAAA;MAAAd,cAAA,GAAAoB,CAAA;IAAA;IAAApB,cAAA,GAAAC,CAAA;IACD,IAAI2C,UAAU,CAAC5B,UAAU,KAAK+B,SAAS,EAAE;MAAA;MAAA/C,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAC,CAAA;MACvC4C,MAAM,CAACG,IAAI,CAAC,iBAAiBF,UAAU,EAAE,EAAE,CAAC;MAAC;MAAA9C,cAAA,GAAAC,CAAA;MAC7C4B,MAAM,CAACmB,IAAI,CAACJ,UAAU,CAAC5B,UAAU,CAAC;IACpC,CAAC;IAAA;IAAA;MAAAhB,cAAA,GAAAoB,CAAA;IAAA;IAAApB,cAAA,GAAAC,CAAA;IACD,IAAI2C,UAAU,CAAC3B,SAAS,KAAK8B,SAAS,EAAE;MAAA;MAAA/C,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAC,CAAA;MACtC4C,MAAM,CAACG,IAAI,CAAC,gBAAgBF,UAAU,EAAE,EAAE,CAAC;MAAC;MAAA9C,cAAA,GAAAC,CAAA;MAC5C4B,MAAM,CAACmB,IAAI,CAACJ,UAAU,CAAC3B,SAAS,CAAC;IACnC,CAAC;IAAA;IAAA;MAAAjB,cAAA,GAAAoB,CAAA;IAAA;IAAApB,cAAA,GAAAC,CAAA;IACD,IAAI2C,UAAU,CAAC1B,IAAI,KAAK6B,SAAS,EAAE;MAAA;MAAA/C,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAC,CAAA;MACjC,IAAI,CAAC,IAAAK,OAAA,CAAAa,WAAW,EAACyB,UAAU,CAAC1B,IAAI,CAAC,EAAE;QAAA;QAAAlB,cAAA,GAAAoB,CAAA;QAAApB,cAAA,GAAAC,CAAA;QACjC,MAAM,IAAIoB,KAAK,CAAC,iBAAiBuB,UAAU,CAAC1B,IAAI,EAAE,CAAC;MACrD,CAAC;MAAA;MAAA;QAAAlB,cAAA,GAAAoB,CAAA;MAAA;MAAApB,cAAA,GAAAC,CAAA;MACD4C,MAAM,CAACG,IAAI,CAAC,WAAWF,UAAU,EAAE,EAAE,CAAC;MAAC;MAAA9C,cAAA,GAAAC,CAAA;MACvC4B,MAAM,CAACmB,IAAI,CAACJ,UAAU,CAAC1B,IAAI,CAAC;IAC9B,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAAoB,CAAA;IAAA;IAAApB,cAAA,GAAAC,CAAA;IACD,IAAI2C,UAAU,CAACK,SAAS,KAAKF,SAAS,EAAE;MAAA;MAAA/C,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAC,CAAA;MACtC4C,MAAM,CAACG,IAAI,CAAC,gBAAgBF,UAAU,EAAE,EAAE,CAAC;MAAC;MAAA9C,cAAA,GAAAC,CAAA;MAC5C4B,MAAM,CAACmB,IAAI,CAACJ,UAAU,CAACK,SAAS,CAAC;IACnC,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAAoB,CAAA;IAAA;IAAApB,cAAA,GAAAC,CAAA;IAED,IAAI4C,MAAM,CAACL,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAxC,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAC,CAAA;MACvB,OAAO,IAAI,CAACqC,QAAQ,CAACC,EAAE,CAAC;IAC1B,CAAC;IAAA;IAAA;MAAAvC,cAAA,GAAAoB,CAAA;IAAA;IAED;IAAApB,cAAA,GAAAC,CAAA;IACA4C,MAAM,CAACG,IAAI,CAAC,iBAAiBF,UAAU,EAAE,EAAE,CAAC;IAAC;IAAA9C,cAAA,GAAAC,CAAA;IAC7C4B,MAAM,CAACmB,IAAI,CAAC,IAAIE,IAAI,EAAE,CAAC;IAEvB;IAAA;IAAAlD,cAAA,GAAAC,CAAA;IACA4B,MAAM,CAACmB,IAAI,CAACT,EAAE,CAAC;IAEf,MAAMX,KAAK;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,QAAG;;YAEN4C,MAAM,CAACM,IAAI,CAAC,IAAI,CAAC;oBACTL,UAAU;;KAEzB;IAAC;IAAA9C,cAAA,GAAAC,CAAA;IAEF,IAAI;MACF,MAAM6B,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACS,IAAI,CAACkB,KAAK,CAACA,KAAK,EAAEC,MAAM,CAAC;MAAC;MAAA7B,cAAA,GAAAC,CAAA;MACpD,IAAI6B,MAAM,CAACE,IAAI,CAACQ,MAAM,KAAK,CAAC,EAAE;QAAA;QAAAxC,cAAA,GAAAoB,CAAA;QAAApB,cAAA,GAAAC,CAAA;QAC5B,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAD,cAAA,GAAAoB,CAAA;MAAA;MAAApB,cAAA,GAAAC,CAAA;MAED,OAAO6B,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOG,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACd;MAAI;MAAA,CAAAD,cAAA,GAAAoB,CAAA,WAAAe,KAAK,YAAYd,KAAK;MAAA;MAAA,CAAArB,cAAA,GAAAoB,CAAA,WAAIe,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,eAAe,CAAC,GAAE;QAAA;QAAArC,cAAA,GAAAoB,CAAA;QAAApB,cAAA,GAAAC,CAAA;QACrE,MAAM,IAAIoB,KAAK,CAAC,qCAAqC,CAAC;MACxD,CAAC;MAAA;MAAA;QAAArB,cAAA,GAAAoB,CAAA;MAAA;MAAApB,cAAA,GAAAC,CAAA;MACD,MAAMkC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMiB,cAAcA,CAACb,EAAU,EAAEc,WAAmB;IAAA;IAAArD,cAAA,GAAAS,CAAA;IAClD,MAAMa,aAAa;IAAA;IAAA,CAAAtB,cAAA,GAAAC,CAAA,QAAG,MAAMF,UAAA,CAAAwB,OAAM,CAACC,IAAI,CAAC6B,WAAW,EAAEhD,aAAA,CAAAoB,MAAM,CAACC,QAAQ,CAACC,YAAY,CAAC;IAElF,MAAMC,KAAK;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,QAAG;;;;KAIb;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAEF,IAAI;MACF,MAAM6B,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACS,IAAI,CAACkB,KAAK,CAACA,KAAK,EAAE,CAACN,aAAa,EAAE,IAAI4B,IAAI,EAAE,EAAEX,EAAE,CAAC,CAAC;MAAC;MAAAvC,cAAA,GAAAC,CAAA;MAC7E,OAAO6B,MAAM,CAACwB,QAAQ;MAAA;MAAA,CAAAtD,cAAA,GAAAoB,CAAA,WAAGU,MAAM,CAACwB,QAAQ,GAAG,CAAC;MAAA;MAAA,CAAAtD,cAAA,GAAAoB,CAAA,WAAG,KAAK;IACtD,CAAC,CAAC,OAAOe,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACd,MAAMkC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMoB,UAAUA,CAAChB,EAAU;IAAA;IAAAvC,cAAA,GAAAS,CAAA;IACzB,MAAMmB,KAAK;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,QAAG,iCAAiC;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAEhD,IAAI;MACF,MAAM6B,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACS,IAAI,CAACkB,KAAK,CAACA,KAAK,EAAE,CAACW,EAAE,CAAC,CAAC;MAAC;MAAAvC,cAAA,GAAAC,CAAA;MAClD,OAAO6B,MAAM,CAACwB,QAAQ;MAAA;MAAA,CAAAtD,cAAA,GAAAoB,CAAA,WAAGU,MAAM,CAACwB,QAAQ,GAAG,CAAC;MAAA;MAAA,CAAAtD,cAAA,GAAAoB,CAAA,WAAG,KAAK;IACtD,CAAC,CAAC,OAAOe,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACd,MAAMkC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMqB,YAAYA,CAAA;IAAA;IAAAxD,cAAA,GAAAS,CAAA;IAChB,MAAMmB,KAAK;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,QAAG;;;;KAIb;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAEF,IAAI;MACF,MAAM6B,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACS,IAAI,CAACkB,KAAK,CAACA,KAAK,CAAC;MAAC;MAAA5B,cAAA,GAAAC,CAAA;MAC5C,OAAO6B,MAAM,CAACE,IAAI;IACpB,CAAC,CAAC,OAAOG,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACd,MAAMkC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMsB,eAAeA,CAACvC,IAAc;IAAA;IAAAlB,cAAA,GAAAS,CAAA;IAClC,MAAMmB,KAAK;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,QAAG;;;;;KAKb;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAEF,IAAI;MACF,MAAM6B,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI,CAACS,IAAI,CAACkB,KAAK,CAACA,KAAK,EAAE,CAACV,IAAI,CAAC,CAAC;MAAC;MAAAlB,cAAA,GAAAC,CAAA;MACpD,OAAO6B,MAAM,CAACE,IAAI;IACpB,CAAC,CAAC,OAAOG,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACd,MAAMkC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMuB,UAAUA,CAAC5C,KAAa;IAAA;IAAAd,cAAA,GAAAS,CAAA;IAC5B,MAAMmB,KAAK;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,SAAG,sCAAsC;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAErD,IAAI;MACF,MAAM6B,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,SAAG,MAAM,IAAI,CAACS,IAAI,CAACkB,KAAK,CAACA,KAAK,EAAE,CAACd,KAAK,CAAC,CAAC;MAAC;MAAAd,cAAA,GAAAC,CAAA;MACrD,OAAO6B,MAAM,CAACE,IAAI,CAACQ,MAAM,GAAG,CAAC;IAC/B,CAAC,CAAC,OAAOL,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACd,MAAMkC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMwB,cAAcA,CAAC7C,KAAa,EAAEC,QAAgB;IAAA;IAAAf,cAAA,GAAAS,CAAA;IAClD,MAAMsB,IAAI;IAAA;IAAA,CAAA/B,cAAA,GAAAC,CAAA,SAAG,MAAM,IAAI,CAACwC,WAAW,CAAC3B,KAAK,CAAC;IAAC;IAAAd,cAAA,GAAAC,CAAA;IAC3C,IAAI,CAAC8B,IAAI,EAAE;MAAA;MAAA/B,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAC,CAAA;MACT,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAAD,cAAA,GAAAoB,CAAA;IAAA;IAAApB,cAAA,GAAAC,CAAA;IAED,OAAOF,UAAA,CAAAwB,OAAM,CAACqC,OAAO,CAAC7C,QAAQ,EAAEgB,IAAI,CAACT,aAAa,CAAC;EACrD;EAEA;;;EAGA,MAAMuC,kBAAkBA,CAAC3C,IAAc;IAAA;IAAAlB,cAAA,GAAAS,CAAA;IACrC,MAAMmB,KAAK;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,SAAG,4CAA4C;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAE3D,IAAI;MACF,MAAM6B,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,SAAG,MAAM,IAAI,CAACS,IAAI,CAACkB,KAAK,CAACA,KAAK,EAAE,CAACV,IAAI,CAAC,CAAC;MAAC;MAAAlB,cAAA,GAAAC,CAAA;MACpD,OAAO6D,QAAQ,CAAChC,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC+B,KAAK,CAAC;IACvC,CAAC,CAAC,OAAO5B,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACd,MAAMkC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAM6B,iBAAiBA,CAAA;IAAA;IAAAhE,cAAA,GAAAS,CAAA;IACrB,MAAMmB,KAAK;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,SAAG,4BAA4B;IAAC;IAAAD,cAAA,GAAAC,CAAA;IAE3C,IAAI;MACF,MAAM6B,MAAM;MAAA;MAAA,CAAA9B,cAAA,GAAAC,CAAA,SAAG,MAAM,IAAI,CAACS,IAAI,CAACkB,KAAK,CAACA,KAAK,CAAC;MAAC;MAAA5B,cAAA,GAAAC,CAAA;MAC5C,OAAO6D,QAAQ,CAAChC,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC+B,KAAK,CAAC;IACvC,CAAC,CAAC,OAAO5B,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MACd,MAAMkC,KAAK;IACb;EACF;;AACD;AAAAnC,cAAA,GAAAC,CAAA;AA9SDgE,OAAA,CAAA1D,SAAA,GAAAA,SAAA;AAgTA;AAAA;AAAAP,cAAA,GAAAC,CAAA;AACagE,OAAA,CAAAC,SAAS,GAAG,IAAI3D,SAAS,EAAE","ignoreList":[]}