687c0f430e8c2bf9551566364870d459
"use strict";

/* istanbul ignore next */
function cov_14oev6t39t() {
  var path = "/home/kim/tito/server/src/controllers/hr/hrRequestController.ts";
  var hash = "a1eb9077714c445fd4c113cd74a2556bd1e744d0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/hr/hrRequestController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 67
        }
      },
      "4": {
        start: {
          line: 7,
          column: 27
        },
        end: {
          line: 7,
          column: 72
        }
      },
      "5": {
        start: {
          line: 8,
          column: 18
        },
        end: {
          line: 8,
          column: 54
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 63
        }
      },
      "7": {
        start: {
          line: 15,
          column: 26
        },
        end: {
          line: 15,
          column: 58
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "9": {
        start: {
          line: 17,
          column: 81
        },
        end: {
          line: 17,
          column: 90
        }
      },
      "10": {
        start: {
          line: 18,
          column: 29
        },
        end: {
          line: 25,
          column: 14
        }
      },
      "11": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 30,
          column: 15
        }
      },
      "12": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "13": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 43,
          column: 15
        }
      },
      "14": {
        start: {
          line: 50,
          column: 26
        },
        end: {
          line: 50,
          column: 58
        }
      },
      "15": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "16": {
        start: {
          line: 52,
          column: 26
        },
        end: {
          line: 52,
          column: 85
        }
      },
      "17": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 57,
          column: 15
        }
      },
      "18": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 63,
          column: 15
        }
      },
      "19": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "20": {
        start: {
          line: 76,
          column: 26
        },
        end: {
          line: 76,
          column: 58
        }
      },
      "21": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "22": {
        start: {
          line: 78,
          column: 27
        },
        end: {
          line: 78,
          column: 37
        }
      },
      "23": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "24": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 84,
          column: 19
        }
      },
      "25": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 23
        }
      },
      "26": {
        start: {
          line: 87,
          column: 28
        },
        end: {
          line: 87,
          column: 88
        }
      },
      "27": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 95,
          column: 13
        }
      },
      "28": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 93,
          column: 19
        }
      },
      "29": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 23
        }
      },
      "30": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 100,
          column: 15
        }
      },
      "31": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 107,
          column: 15
        }
      },
      "32": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 113,
          column: 15
        }
      },
      "33": {
        start: {
          line: 117,
          column: 0
        },
        end: {
          line: 117,
          column: 50
        }
      },
      "34": {
        start: {
          line: 118,
          column: 0
        },
        end: {
          line: 118,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 33
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 36
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 49
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 35
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 75
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 56
          },
          end: {
            line: 17,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 17,
            column: 63
          },
          end: {
            line: 17,
            column: 64
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 17,
            column: 66
          },
          end: {
            line: 17,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 17,
            column: 74
          },
          end: {
            line: 17,
            column: 76
          }
        }],
        line: 17
      },
      "5": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "6": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 95,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 95,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/hr/hrRequestController.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/hr/hrRequestController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { hrRequestService } from '../../services/hr/hrRequestService';\nimport { getRequestId } from '../../utils/types/express';\nimport logger from '../../utils/logger';\n\nexport class HrRequestController {\n  /**\n   * List all employee requests with filtering and pagination\n   */\n  async listRequests(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const {\n        type,\n        status,\n        departmentId,\n        search,\n        page = 1,\n        limit = 50\n      } = req.query;\n\n      const requests = await hrRequestService.getAllRequests({\n        type: type as string,\n        status: status as 'pending' | 'approved' | 'rejected',\n        departmentId: departmentId as string,\n        search: search as string,\n        page: Number(page),\n        limit: Number(limit)\n      });\n\n      res.json({\n        success: true,\n        data: requests,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error listing HR requests', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to fetch requests',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get request statistics\n   */\n  async getRequestStats(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const stats = await hrRequestService.getRequestStats();\n\n      res.json({\n        success: true,\n        data: stats,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting request stats', { \n        error: (error as Error).message, \n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to fetch request statistics',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get request details by ID\n   */\n  async getRequestById(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Request ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const request = await hrRequestService.getRequestById(id);\n\n      if (!request) {\n        res.status(404).json({\n          success: false,\n          message: 'Request not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        data: request,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting request by ID', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to fetch request details',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n}\n\nexport const hrRequestController = new HrRequestController();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a1eb9077714c445fd4c113cd74a2556bd1e744d0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_14oev6t39t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_14oev6t39t();
var __importDefault =
/* istanbul ignore next */
(cov_14oev6t39t().s[0]++,
/* istanbul ignore next */
(cov_14oev6t39t().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_14oev6t39t().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_14oev6t39t().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_14oev6t39t().f[0]++;
  cov_14oev6t39t().s[1]++;
  return /* istanbul ignore next */(cov_14oev6t39t().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_14oev6t39t().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_14oev6t39t().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_14oev6t39t().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_14oev6t39t().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_14oev6t39t().s[3]++;
exports.hrRequestController = exports.HrRequestController = void 0;
const hrRequestService_1 =
/* istanbul ignore next */
(cov_14oev6t39t().s[4]++, require("../../services/hr/hrRequestService"));
const express_1 =
/* istanbul ignore next */
(cov_14oev6t39t().s[5]++, require("../../utils/types/express"));
const logger_1 =
/* istanbul ignore next */
(cov_14oev6t39t().s[6]++, __importDefault(require("../../utils/logger")));
class HrRequestController {
  /**
   * List all employee requests with filtering and pagination
   */
  async listRequests(req, res) {
    /* istanbul ignore next */
    cov_14oev6t39t().f[1]++;
    const requestId =
    /* istanbul ignore next */
    (cov_14oev6t39t().s[7]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_14oev6t39t().s[8]++;
    try {
      const {
        type,
        status,
        departmentId,
        search,
        page =
        /* istanbul ignore next */
        (cov_14oev6t39t().b[3][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_14oev6t39t().b[4][0]++, 50)
      } =
      /* istanbul ignore next */
      (cov_14oev6t39t().s[9]++, req.query);
      const requests =
      /* istanbul ignore next */
      (cov_14oev6t39t().s[10]++, await hrRequestService_1.hrRequestService.getAllRequests({
        type: type,
        status: status,
        departmentId: departmentId,
        search: search,
        page: Number(page),
        limit: Number(limit)
      }));
      /* istanbul ignore next */
      cov_14oev6t39t().s[11]++;
      res.json({
        success: true,
        data: requests,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_14oev6t39t().s[12]++;
      logger_1.default.error('Error listing HR requests', {
        error: error.message,
        requestId,
        query: req.query
      });
      /* istanbul ignore next */
      cov_14oev6t39t().s[13]++;
      res.status(500).json({
        success: false,
        message: 'Failed to fetch requests',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Get request statistics
   */
  async getRequestStats(req, res) {
    /* istanbul ignore next */
    cov_14oev6t39t().f[2]++;
    const requestId =
    /* istanbul ignore next */
    (cov_14oev6t39t().s[14]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_14oev6t39t().s[15]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_14oev6t39t().s[16]++, await hrRequestService_1.hrRequestService.getRequestStats());
      /* istanbul ignore next */
      cov_14oev6t39t().s[17]++;
      res.json({
        success: true,
        data: stats,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_14oev6t39t().s[18]++;
      logger_1.default.error('Error getting request stats', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_14oev6t39t().s[19]++;
      res.status(500).json({
        success: false,
        message: 'Failed to fetch request statistics',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Get request details by ID
   */
  async getRequestById(req, res) {
    /* istanbul ignore next */
    cov_14oev6t39t().f[3]++;
    const requestId =
    /* istanbul ignore next */
    (cov_14oev6t39t().s[20]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_14oev6t39t().s[21]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_14oev6t39t().s[22]++, req.params);
      /* istanbul ignore next */
      cov_14oev6t39t().s[23]++;
      if (!id) {
        /* istanbul ignore next */
        cov_14oev6t39t().b[5][0]++;
        cov_14oev6t39t().s[24]++;
        res.status(400).json({
          success: false,
          message: 'Request ID is required',
          requestId
        });
        /* istanbul ignore next */
        cov_14oev6t39t().s[25]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_14oev6t39t().b[5][1]++;
      }
      const request =
      /* istanbul ignore next */
      (cov_14oev6t39t().s[26]++, await hrRequestService_1.hrRequestService.getRequestById(id));
      /* istanbul ignore next */
      cov_14oev6t39t().s[27]++;
      if (!request) {
        /* istanbul ignore next */
        cov_14oev6t39t().b[6][0]++;
        cov_14oev6t39t().s[28]++;
        res.status(404).json({
          success: false,
          message: 'Request not found',
          requestId
        });
        /* istanbul ignore next */
        cov_14oev6t39t().s[29]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_14oev6t39t().b[6][1]++;
      }
      cov_14oev6t39t().s[30]++;
      res.json({
        success: true,
        data: request,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_14oev6t39t().s[31]++;
      logger_1.default.error('Error getting request by ID', {
        error: error.message,
        requestId,
        params: req.params
      });
      /* istanbul ignore next */
      cov_14oev6t39t().s[32]++;
      res.status(500).json({
        success: false,
        message: 'Failed to fetch request details',
        error: error.message,
        requestId
      });
    }
  }
}
/* istanbul ignore next */
cov_14oev6t39t().s[33]++;
exports.HrRequestController = HrRequestController;
/* istanbul ignore next */
cov_14oev6t39t().s[34]++;
exports.hrRequestController = new HrRequestController();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTRvZXY2dDM5dCIsImFjdHVhbENvdmVyYWdlIiwiaHJSZXF1ZXN0U2VydmljZV8xIiwicyIsInJlcXVpcmUiLCJleHByZXNzXzEiLCJsb2dnZXJfMSIsIl9faW1wb3J0RGVmYXVsdCIsIkhyUmVxdWVzdENvbnRyb2xsZXIiLCJsaXN0UmVxdWVzdHMiLCJyZXEiLCJyZXMiLCJmIiwicmVxdWVzdElkIiwiZ2V0UmVxdWVzdElkIiwidHlwZSIsInN0YXR1cyIsImRlcGFydG1lbnRJZCIsInNlYXJjaCIsInBhZ2UiLCJiIiwibGltaXQiLCJxdWVyeSIsInJlcXVlc3RzIiwiaHJSZXF1ZXN0U2VydmljZSIsImdldEFsbFJlcXVlc3RzIiwiTnVtYmVyIiwianNvbiIsInN1Y2Nlc3MiLCJkYXRhIiwiZXJyb3IiLCJkZWZhdWx0IiwibWVzc2FnZSIsImdldFJlcXVlc3RTdGF0cyIsInN0YXRzIiwiZ2V0UmVxdWVzdEJ5SWQiLCJpZCIsInBhcmFtcyIsInJlcXVlc3QiLCJleHBvcnRzIiwiaHJSZXF1ZXN0Q29udHJvbGxlciJdLCJzb3VyY2VzIjpbIi9ob21lL2tpbS90aXRvL3NlcnZlci9zcmMvY29udHJvbGxlcnMvaHIvaHJSZXF1ZXN0Q29udHJvbGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgaHJSZXF1ZXN0U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2hyL2hyUmVxdWVzdFNlcnZpY2UnO1xuaW1wb3J0IHsgZ2V0UmVxdWVzdElkIH0gZnJvbSAnLi4vLi4vdXRpbHMvdHlwZXMvZXhwcmVzcyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uLy4uL3V0aWxzL2xvZ2dlcic7XG5cbmV4cG9ydCBjbGFzcyBIclJlcXVlc3RDb250cm9sbGVyIHtcbiAgLyoqXG4gICAqIExpc3QgYWxsIGVtcGxveWVlIHJlcXVlc3RzIHdpdGggZmlsdGVyaW5nIGFuZCBwYWdpbmF0aW9uXG4gICAqL1xuICBhc3luYyBsaXN0UmVxdWVzdHMocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgcmVxdWVzdElkID0gZ2V0UmVxdWVzdElkKHJlcSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgdHlwZSxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBkZXBhcnRtZW50SWQsXG4gICAgICAgIHNlYXJjaCxcbiAgICAgICAgcGFnZSA9IDEsXG4gICAgICAgIGxpbWl0ID0gNTBcbiAgICAgIH0gPSByZXEucXVlcnk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3RzID0gYXdhaXQgaHJSZXF1ZXN0U2VydmljZS5nZXRBbGxSZXF1ZXN0cyh7XG4gICAgICAgIHR5cGU6IHR5cGUgYXMgc3RyaW5nLFxuICAgICAgICBzdGF0dXM6IHN0YXR1cyBhcyAncGVuZGluZycgfCAnYXBwcm92ZWQnIHwgJ3JlamVjdGVkJyxcbiAgICAgICAgZGVwYXJ0bWVudElkOiBkZXBhcnRtZW50SWQgYXMgc3RyaW5nLFxuICAgICAgICBzZWFyY2g6IHNlYXJjaCBhcyBzdHJpbmcsXG4gICAgICAgIHBhZ2U6IE51bWJlcihwYWdlKSxcbiAgICAgICAgbGltaXQ6IE51bWJlcihsaW1pdClcbiAgICAgIH0pO1xuXG4gICAgICByZXMuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHJlcXVlc3RzLFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIGxpc3RpbmcgSFIgcmVxdWVzdHMnLCB7IFxuICAgICAgICBlcnJvcjogKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlLCBcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICBxdWVyeTogcmVxLnF1ZXJ5XG4gICAgICB9KTtcblxuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCByZXF1ZXN0cycsXG4gICAgICAgIGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UsXG4gICAgICAgIHJlcXVlc3RJZFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCByZXF1ZXN0IHN0YXRpc3RpY3NcbiAgICovXG4gIGFzeW5jIGdldFJlcXVlc3RTdGF0cyhyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCByZXF1ZXN0SWQgPSBnZXRSZXF1ZXN0SWQocmVxKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3RhdHMgPSBhd2FpdCBoclJlcXVlc3RTZXJ2aWNlLmdldFJlcXVlc3RTdGF0cygpO1xuXG4gICAgICByZXMuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHN0YXRzLFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIGdldHRpbmcgcmVxdWVzdCBzdGF0cycsIHsgXG4gICAgICAgIGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UsIFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuXG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGZldGNoIHJlcXVlc3Qgc3RhdGlzdGljcycsXG4gICAgICAgIGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UsXG4gICAgICAgIHJlcXVlc3RJZFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCByZXF1ZXN0IGRldGFpbHMgYnkgSURcbiAgICovXG4gIGFzeW5jIGdldFJlcXVlc3RCeUlkKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHJlcXVlc3RJZCA9IGdldFJlcXVlc3RJZChyZXEpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuXG4gICAgICBpZiAoIWlkKSB7XG4gICAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBtZXNzYWdlOiAnUmVxdWVzdCBJRCBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgcmVxdWVzdElkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBhd2FpdCBoclJlcXVlc3RTZXJ2aWNlLmdldFJlcXVlc3RCeUlkKGlkKTtcblxuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBtZXNzYWdlOiAnUmVxdWVzdCBub3QgZm91bmQnLFxuICAgICAgICAgIHJlcXVlc3RJZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXMuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHJlcXVlc3QsXG4gICAgICAgIHJlcXVlc3RJZFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgZ2V0dGluZyByZXF1ZXN0IGJ5IElEJywgeyBcbiAgICAgICAgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSwgXG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgcGFyYW1zOiByZXEucGFyYW1zXG4gICAgICB9KTtcblxuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCByZXF1ZXN0IGRldGFpbHMnLFxuICAgICAgICBlcnJvcjogKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlLFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgaHJSZXF1ZXN0Q29udHJvbGxlciA9IG5ldyBIclJlcXVlc3RDb250cm9sbGVyKCk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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