85c9d03884f47865c81bbcc895adc964
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("joi"));
const validate_1 = require("../../../src/middleware/validation/validate");
describe('Validation Middleware', () => {
    let mockRequest;
    let mockResponse;
    let mockNext;
    beforeEach(() => {
        jest.clearAllMocks();
        // Mock request object
        mockRequest = {
            body: {},
            query: {},
            params: {},
            path: '/api/test',
            requestId: 'test-request-123'
        };
        // Mock response object
        mockResponse = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn().mockReturnThis()
        };
        // Mock next function
        mockNext = jest.fn();
    });
    describe('validate', () => {
        const userSchema = joi_1.default.object({
            email: joi_1.default.string().email().required(),
            firstName: joi_1.default.string().min(2).max(50).required(),
            lastName: joi_1.default.string().min(2).max(50).required(),
            role: joi_1.default.string().valid('hr', 'department_head', 'employee').required()
        });
        it('should validate body successfully', () => {
            // Arrange
            mockRequest.body = {
                email: 'test@example.com',
                firstName: 'John',
                lastName: 'Doe',
                role: 'employee'
            };
            const validateMiddleware = (0, validate_1.validate)(userSchema, 'body');
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
            expect(mockResponse.json).not.toHaveBeenCalled();
            expect(mockRequest.body).toEqual({
                email: 'test@example.com',
                firstName: 'John',
                lastName: 'Doe',
                role: 'employee'
            });
        });
        it('should validate query parameters successfully', () => {
            // Arrange
            const querySchema = joi_1.default.object({
                page: joi_1.default.number().integer().min(1).required(),
                limit: joi_1.default.number().integer().min(1).max(100).required()
            });
            mockRequest.query = {
                page: '1',
                limit: '10'
            };
            const validateMiddleware = (0, validate_1.validate)(querySchema, 'query');
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
            expect(mockResponse.json).not.toHaveBeenCalled();
            expect(mockRequest.query).toEqual({
                page: 1,
                limit: 10
            });
        });
        it('should validate params successfully', () => {
            // Arrange
            const paramsSchema = joi_1.default.object({
                id: joi_1.default.string().uuid().required()
            });
            mockRequest.params = {
                id: '123e4567-e89b-12d3-a456-426614174000'
            };
            const validateMiddleware = (0, validate_1.validate)(paramsSchema, 'params');
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
            expect(mockResponse.json).not.toHaveBeenCalled();
        });
        it('should return 400 for invalid body data', () => {
            // Arrange
            mockRequest.body = {
                email: 'invalid-email',
                firstName: 'J', // Too short
                lastName: 'Doe',
                role: 'invalid-role'
            };
            const validateMiddleware = (0, validate_1.validate)(userSchema, 'body');
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Validation failed',
                error: 'VALIDATION_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123',
                path: '/api/test',
                details: expect.arrayContaining([
                    expect.objectContaining({
                        field: 'email',
                        message: expect.stringContaining('valid email'),
                        type: 'string.email'
                    }),
                    expect.objectContaining({
                        field: 'firstName',
                        message: expect.stringContaining('length must be at least 2'),
                        type: 'string.min'
                    }),
                    expect.objectContaining({
                        field: 'role',
                        message: expect.stringContaining('must be one of'),
                        type: 'any.only'
                    })
                ])
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should return 400 for missing required fields', () => {
            // Arrange
            mockRequest.body = {
                email: 'test@example.com'
                // Missing firstName, lastName, role
            };
            const validateMiddleware = (0, validate_1.validate)(userSchema, 'body');
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Validation failed',
                error: 'VALIDATION_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123',
                path: '/api/test',
                details: expect.arrayContaining([
                    expect.objectContaining({
                        field: 'firstName',
                        message: expect.stringContaining('required'),
                        type: 'any.required'
                    }),
                    expect.objectContaining({
                        field: 'lastName',
                        message: expect.stringContaining('required'),
                        type: 'any.required'
                    }),
                    expect.objectContaining({
                        field: 'role',
                        message: expect.stringContaining('required'),
                        type: 'any.required'
                    })
                ])
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should strip unknown fields', () => {
            // Arrange
            mockRequest.body = {
                email: 'test@example.com',
                firstName: 'John',
                lastName: 'Doe',
                role: 'employee',
                unknownField: 'should be removed',
                anotherUnknown: 'also removed'
            };
            const validateMiddleware = (0, validate_1.validate)(userSchema, 'body');
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockRequest.body).toEqual({
                email: 'test@example.com',
                firstName: 'John',
                lastName: 'Doe',
                role: 'employee'
            });
            expect(mockRequest.body).not.toHaveProperty('unknownField');
            expect(mockRequest.body).not.toHaveProperty('anotherUnknown');
        });
        it('should handle validation errors gracefully', () => {
            // Arrange
            const invalidSchema = joi_1.default.object({
                test: joi_1.default.string().custom(() => {
                    throw new Error('Custom validation error');
                })
            });
            mockRequest.body = { test: 'value' };
            const validateMiddleware = (0, validate_1.validate)(invalidSchema, 'body');
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(500);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Validation processing failed',
                error: 'VALIDATION_PROCESSING_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123',
                path: '/api/test'
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should handle missing requestId gracefully', () => {
            // Arrange
            mockRequest.requestId = undefined;
            mockRequest.body = {
                email: 'invalid-email'
            };
            const validateMiddleware = (0, validate_1.validate)(userSchema, 'body');
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Validation failed',
                error: 'VALIDATION_ERROR',
                timestamp: expect.any(String),
                requestId: 'unknown',
                path: '/api/test',
                details: expect.any(Array)
            });
        });
    });
    describe('validateBody', () => {
        it('should validate body using validateBody helper', () => {
            // Arrange
            const schema = joi_1.default.object({
                name: joi_1.default.string().required()
            });
            mockRequest.body = { name: 'Test' };
            const validateMiddleware = (0, validate_1.validateBody)(schema);
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
        });
    });
    describe('validateQuery', () => {
        it('should validate query using validateQuery helper', () => {
            // Arrange
            const schema = joi_1.default.object({
                page: joi_1.default.number().integer().min(1).required()
            });
            mockRequest.query = { page: '1' };
            const validateMiddleware = (0, validate_1.validateQuery)(schema);
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
            expect(mockRequest.query).toEqual({ page: 1 });
        });
    });
    describe('validateParams', () => {
        it('should validate params using validateParams helper', () => {
            // Arrange
            const schema = joi_1.default.object({
                id: joi_1.default.string().required()
            });
            mockRequest.params = { id: '123' };
            const validateMiddleware = (0, validate_1.validateParams)(schema);
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
        });
    });
    describe('validateMultiple', () => {
        it('should validate multiple schemas successfully', () => {
            // Arrange
            const bodySchema = joi_1.default.object({
                name: joi_1.default.string().required()
            });
            const querySchema = joi_1.default.object({
                page: joi_1.default.number().integer().min(1).required()
            });
            const paramsSchema = joi_1.default.object({
                id: joi_1.default.string().required()
            });
            mockRequest.body = { name: 'Test' };
            mockRequest.query = { page: '1' };
            mockRequest.params = { id: '123' };
            const validateMiddleware = (0, validate_1.validateMultiple)({
                body: bodySchema,
                query: querySchema,
                params: paramsSchema
            });
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
            expect(mockRequest.body).toEqual({ name: 'Test' });
            expect(mockRequest.query).toEqual({ page: 1 });
            expect(mockRequest.params).toEqual({ id: '123' });
        });
        it('should return 400 for invalid body in multiple validation', () => {
            // Arrange
            const bodySchema = joi_1.default.object({
                name: joi_1.default.string().required()
            });
            const querySchema = joi_1.default.object({
                page: joi_1.default.number().integer().min(1).required()
            });
            mockRequest.body = {}; // Missing name
            mockRequest.query = { page: '1' };
            const validateMiddleware = (0, validate_1.validateMultiple)({
                body: bodySchema,
                query: querySchema
            });
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Body validation failed',
                error: 'BODY_VALIDATION_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123',
                path: '/api/test',
                details: expect.arrayContaining([
                    expect.objectContaining({
                        field: 'body.name',
                        message: expect.stringContaining('required'),
                        type: 'any.required'
                    })
                ])
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should return 400 for invalid query in multiple validation', () => {
            // Arrange
            const bodySchema = joi_1.default.object({
                name: joi_1.default.string().required()
            });
            const querySchema = joi_1.default.object({
                page: joi_1.default.number().integer().min(1).required()
            });
            mockRequest.body = { name: 'Test' };
            mockRequest.query = { page: 'invalid' }; // Invalid page
            const validateMiddleware = (0, validate_1.validateMultiple)({
                body: bodySchema,
                query: querySchema
            });
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Query validation failed',
                error: 'QUERY_VALIDATION_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123',
                path: '/api/test',
                details: expect.arrayContaining([
                    expect.objectContaining({
                        field: 'query.page',
                        message: expect.stringContaining('must be a number'),
                        type: 'number.base'
                    })
                ])
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should return 400 for invalid params in multiple validation', () => {
            // Arrange
            const bodySchema = joi_1.default.object({
                name: joi_1.default.string().required()
            });
            const paramsSchema = joi_1.default.object({
                id: joi_1.default.string().required()
            });
            mockRequest.body = { name: 'Test' };
            mockRequest.params = {}; // Missing id
            const validateMiddleware = (0, validate_1.validateMultiple)({
                body: bodySchema,
                params: paramsSchema
            });
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Params validation failed',
                error: 'PARAMS_VALIDATION_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123',
                path: '/api/test',
                details: expect.arrayContaining([
                    expect.objectContaining({
                        field: 'params.id',
                        message: expect.stringContaining('required'),
                        type: 'any.required'
                    })
                ])
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should handle validation errors in multiple validation', () => {
            // Arrange
            const invalidSchema = joi_1.default.object({
                test: joi_1.default.string().custom(() => {
                    throw new Error('Custom validation error');
                })
            });
            mockRequest.body = { test: 'value' };
            const validateMiddleware = (0, validate_1.validateMultiple)({
                body: invalidSchema
            });
            // Act
            validateMiddleware(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(500);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Validation processing failed',
                error: 'VALIDATION_PROCESSING_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123',
                path: '/api/test'
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,