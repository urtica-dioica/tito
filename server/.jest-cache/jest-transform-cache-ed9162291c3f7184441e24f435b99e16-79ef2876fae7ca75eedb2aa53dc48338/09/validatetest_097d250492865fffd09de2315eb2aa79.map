{"file":"/home/kim/tito/server/tests/unit/middleware/validate.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/unit/middleware/validate.test.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport Joi from 'joi';\nimport { \n  validate, \n  validateBody, \n  validateQuery, \n  validateParams, \n  validateMultiple \n} from '../../../src/middleware/validation/validate';\n\ndescribe('Validation Middleware', () => {\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockNext: NextFunction;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Mock request object\n    mockRequest = {\n      body: {},\n      query: {},\n      params: {},\n      path: '/api/test',\n      requestId: 'test-request-123'\n    };\n\n    // Mock response object\n    mockResponse = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis()\n    };\n\n    // Mock next function\n    mockNext = jest.fn();\n  });\n\n  describe('validate', () => {\n    const userSchema = Joi.object({\n      email: Joi.string().email().required(),\n      firstName: Joi.string().min(2).max(50).required(),\n      lastName: Joi.string().min(2).max(50).required(),\n      role: Joi.string().valid('hr', 'department_head', 'employee').required()\n    });\n\n    it('should validate body successfully', () => {\n      // Arrange\n      mockRequest.body = {\n        email: 'test@example.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        role: 'employee'\n      };\n      const validateMiddleware = validate(userSchema, 'body');\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n      expect(mockResponse.json).not.toHaveBeenCalled();\n      expect(mockRequest.body).toEqual({\n        email: 'test@example.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        role: 'employee'\n      });\n    });\n\n    it('should validate query parameters successfully', () => {\n      // Arrange\n      const querySchema = Joi.object({\n        page: Joi.number().integer().min(1).required(),\n        limit: Joi.number().integer().min(1).max(100).required()\n      });\n      mockRequest.query = {\n        page: '1',\n        limit: '10'\n      };\n      const validateMiddleware = validate(querySchema, 'query');\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n      expect(mockResponse.json).not.toHaveBeenCalled();\n      expect(mockRequest.query).toEqual({\n        page: 1,\n        limit: 10\n      });\n    });\n\n    it('should validate params successfully', () => {\n      // Arrange\n      const paramsSchema = Joi.object({\n        id: Joi.string().uuid().required()\n      });\n      mockRequest.params = {\n        id: '123e4567-e89b-12d3-a456-426614174000'\n      };\n      const validateMiddleware = validate(paramsSchema, 'params');\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n      expect(mockResponse.json).not.toHaveBeenCalled();\n    });\n\n    it('should return 400 for invalid body data', () => {\n      // Arrange\n      mockRequest.body = {\n        email: 'invalid-email',\n        firstName: 'J', // Too short\n        lastName: 'Doe',\n        role: 'invalid-role'\n      };\n      const validateMiddleware = validate(userSchema, 'body');\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Validation failed',\n        error: 'VALIDATION_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123',\n        path: '/api/test',\n        details: expect.arrayContaining([\n          expect.objectContaining({\n            field: 'email',\n            message: expect.stringContaining('valid email'),\n            type: 'string.email'\n          }),\n          expect.objectContaining({\n            field: 'firstName',\n            message: expect.stringContaining('length must be at least 2'),\n            type: 'string.min'\n          }),\n          expect.objectContaining({\n            field: 'role',\n            message: expect.stringContaining('must be one of'),\n            type: 'any.only'\n          })\n        ])\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should return 400 for missing required fields', () => {\n      // Arrange\n      mockRequest.body = {\n        email: 'test@example.com'\n        // Missing firstName, lastName, role\n      };\n      const validateMiddleware = validate(userSchema, 'body');\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Validation failed',\n        error: 'VALIDATION_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123',\n        path: '/api/test',\n        details: expect.arrayContaining([\n          expect.objectContaining({\n            field: 'firstName',\n            message: expect.stringContaining('required'),\n            type: 'any.required'\n          }),\n          expect.objectContaining({\n            field: 'lastName',\n            message: expect.stringContaining('required'),\n            type: 'any.required'\n          }),\n          expect.objectContaining({\n            field: 'role',\n            message: expect.stringContaining('required'),\n            type: 'any.required'\n          })\n        ])\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should strip unknown fields', () => {\n      // Arrange\n      mockRequest.body = {\n        email: 'test@example.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        role: 'employee',\n        unknownField: 'should be removed',\n        anotherUnknown: 'also removed'\n      };\n      const validateMiddleware = validate(userSchema, 'body');\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockRequest.body).toEqual({\n        email: 'test@example.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        role: 'employee'\n      });\n      expect(mockRequest.body).not.toHaveProperty('unknownField');\n      expect(mockRequest.body).not.toHaveProperty('anotherUnknown');\n    });\n\n    it('should handle validation errors gracefully', () => {\n      // Arrange\n      const invalidSchema = Joi.object({\n        test: Joi.string().custom(() => {\n          throw new Error('Custom validation error');\n        })\n      });\n      mockRequest.body = { test: 'value' };\n      const validateMiddleware = validate(invalidSchema, 'body');\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Validation processing failed',\n        error: 'VALIDATION_PROCESSING_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123',\n        path: '/api/test'\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should handle missing requestId gracefully', () => {\n      // Arrange\n      mockRequest.requestId = undefined;\n      mockRequest.body = {\n        email: 'invalid-email'\n      };\n      const validateMiddleware = validate(userSchema, 'body');\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Validation failed',\n        error: 'VALIDATION_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'unknown',\n        path: '/api/test',\n        details: expect.any(Array)\n      });\n    });\n  });\n\n  describe('validateBody', () => {\n    it('should validate body using validateBody helper', () => {\n      // Arrange\n      const schema = Joi.object({\n        name: Joi.string().required()\n      });\n      mockRequest.body = { name: 'Test' };\n      const validateMiddleware = validateBody(schema);\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('validateQuery', () => {\n    it('should validate query using validateQuery helper', () => {\n      // Arrange\n      const schema = Joi.object({\n        page: Joi.number().integer().min(1).required()\n      });\n      mockRequest.query = { page: '1' };\n      const validateMiddleware = validateQuery(schema);\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n      expect(mockRequest.query).toEqual({ page: 1 });\n    });\n  });\n\n  describe('validateParams', () => {\n    it('should validate params using validateParams helper', () => {\n      // Arrange\n      const schema = Joi.object({\n        id: Joi.string().required()\n      });\n      mockRequest.params = { id: '123' };\n      const validateMiddleware = validateParams(schema);\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('validateMultiple', () => {\n    it('should validate multiple schemas successfully', () => {\n      // Arrange\n      const bodySchema = Joi.object({\n        name: Joi.string().required()\n      });\n      const querySchema = Joi.object({\n        page: Joi.number().integer().min(1).required()\n      });\n      const paramsSchema = Joi.object({\n        id: Joi.string().required()\n      });\n\n      mockRequest.body = { name: 'Test' };\n      mockRequest.query = { page: '1' };\n      mockRequest.params = { id: '123' };\n\n      const validateMiddleware = validateMultiple({\n        body: bodySchema,\n        query: querySchema,\n        params: paramsSchema\n      });\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n      expect(mockRequest.body).toEqual({ name: 'Test' });\n      expect(mockRequest.query).toEqual({ page: 1 });\n      expect(mockRequest.params).toEqual({ id: '123' });\n    });\n\n    it('should return 400 for invalid body in multiple validation', () => {\n      // Arrange\n      const bodySchema = Joi.object({\n        name: Joi.string().required()\n      });\n      const querySchema = Joi.object({\n        page: Joi.number().integer().min(1).required()\n      });\n\n      mockRequest.body = {}; // Missing name\n      mockRequest.query = { page: '1' };\n\n      const validateMiddleware = validateMultiple({\n        body: bodySchema,\n        query: querySchema\n      });\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Body validation failed',\n        error: 'BODY_VALIDATION_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123',\n        path: '/api/test',\n        details: expect.arrayContaining([\n          expect.objectContaining({\n            field: 'body.name',\n            message: expect.stringContaining('required'),\n            type: 'any.required'\n          })\n        ])\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should return 400 for invalid query in multiple validation', () => {\n      // Arrange\n      const bodySchema = Joi.object({\n        name: Joi.string().required()\n      });\n      const querySchema = Joi.object({\n        page: Joi.number().integer().min(1).required()\n      });\n\n      mockRequest.body = { name: 'Test' };\n      mockRequest.query = { page: 'invalid' }; // Invalid page\n\n      const validateMiddleware = validateMultiple({\n        body: bodySchema,\n        query: querySchema\n      });\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Query validation failed',\n        error: 'QUERY_VALIDATION_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123',\n        path: '/api/test',\n        details: expect.arrayContaining([\n          expect.objectContaining({\n            field: 'query.page',\n            message: expect.stringContaining('must be a number'),\n            type: 'number.base'\n          })\n        ])\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should return 400 for invalid params in multiple validation', () => {\n      // Arrange\n      const bodySchema = Joi.object({\n        name: Joi.string().required()\n      });\n      const paramsSchema = Joi.object({\n        id: Joi.string().required()\n      });\n\n      mockRequest.body = { name: 'Test' };\n      mockRequest.params = {}; // Missing id\n\n      const validateMiddleware = validateMultiple({\n        body: bodySchema,\n        params: paramsSchema\n      });\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Params validation failed',\n        error: 'PARAMS_VALIDATION_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123',\n        path: '/api/test',\n        details: expect.arrayContaining([\n          expect.objectContaining({\n            field: 'params.id',\n            message: expect.stringContaining('required'),\n            type: 'any.required'\n          })\n        ])\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should handle validation errors in multiple validation', () => {\n      // Arrange\n      const invalidSchema = Joi.object({\n        test: Joi.string().custom(() => {\n          throw new Error('Custom validation error');\n        })\n      });\n\n      mockRequest.body = { test: 'value' };\n\n      const validateMiddleware = validateMultiple({\n        body: invalidSchema\n      });\n\n      // Act\n      validateMiddleware(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Validation processing failed',\n        error: 'VALIDATION_PROCESSING_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123',\n        path: '/api/test'\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}