e7ca5e7a060e783ac09bdd870d9e3e45
"use strict";

/* istanbul ignore next */
function cov_rawm0g82() {
  var path = "/home/kim/tito/server/src/services/hr/hrRequestService.ts";
  var hash = "c8bf2518a2256fa246227518d826909fc999ff52";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/hr/hrRequestService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 61
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "7": {
        start: {
          line: 15,
          column: 81
        },
        end: {
          line: 15,
          column: 87
        }
      },
      "8": {
        start: {
          line: 16,
          column: 27
        },
        end: {
          line: 16,
          column: 45
        }
      },
      "9": {
        start: {
          line: 18,
          column: 36
        },
        end: {
          line: 18,
          column: 38
        }
      },
      "10": {
        start: {
          line: 19,
          column: 32
        },
        end: {
          line: 19,
          column: 34
        }
      },
      "11": {
        start: {
          line: 20,
          column: 29
        },
        end: {
          line: 20,
          column: 30
        }
      },
      "12": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 25,
          column: 13
        }
      },
      "13": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 65
        }
      },
      "14": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 39
        }
      },
      "15": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 29
        }
      },
      "16": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 30,
          column: 13
        }
      },
      "17": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 67
        }
      },
      "18": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 41
        }
      },
      "19": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 29
        }
      },
      "20": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 35,
          column: 13
        }
      },
      "21": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 62
        }
      },
      "22": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 47
        }
      },
      "23": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 29
        }
      },
      "24": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "25": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 150
        }
      },
      "26": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 48
        }
      },
      "27": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 29
        }
      },
      "28": {
        start: {
          line: 41,
          column: 32
        },
        end: {
          line: 41,
          column: 106
        }
      },
      "29": {
        start: {
          line: 43,
          column: 31
        },
        end: {
          line: 134,
          column: 7
        }
      },
      "30": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 44
        }
      },
      "31": {
        start: {
          line: 137,
          column: 31
        },
        end: {
          line: 194,
          column: 7
        }
      },
      "32": {
        start: {
          line: 195,
          column: 50
        },
        end: {
          line: 198,
          column: 14
        }
      },
      "33": {
        start: {
          line: 199,
          column: 29
        },
        end: {
          line: 211,
          column: 15
        }
      },
      "34": {
        start: {
          line: 199,
          column: 61
        },
        end: {
          line: 211,
          column: 13
        }
      },
      "35": {
        start: {
          line: 212,
          column: 26
        },
        end: {
          line: 212,
          column: 61
        }
      },
      "36": {
        start: {
          line: 213,
          column: 31
        },
        end: {
          line: 213,
          column: 55
        }
      },
      "37": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 220,
          column: 15
        }
      },
      "38": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 227,
          column: 14
        }
      },
      "39": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 233,
          column: 15
        }
      },
      "40": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 24
        }
      },
      "41": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "42": {
        start: {
          line: 242,
          column: 31
        },
        end: {
          line: 256,
          column: 7
        }
      },
      "43": {
        start: {
          line: 257,
          column: 32
        },
        end: {
          line: 271,
          column: 7
        }
      },
      "44": {
        start: {
          line: 272,
          column: 48
        },
        end: {
          line: 275,
          column: 14
        }
      },
      "45": {
        start: {
          line: 276,
          column: 26
        },
        end: {
          line: 276,
          column: 45
        }
      },
      "46": {
        start: {
          line: 277,
          column: 27
        },
        end: {
          line: 280,
          column: 15
        }
      },
      "47": {
        start: {
          line: 277,
          column: 57
        },
        end: {
          line: 280,
          column: 13
        }
      },
      "48": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 287,
          column: 14
        }
      },
      "49": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 292,
          column: 15
        }
      },
      "50": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 24
        }
      },
      "51": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 431,
          column: 9
        }
      },
      "52": {
        start: {
          line: 302,
          column: 28
        },
        end: {
          line: 403,
          column: 13
        }
      },
      "53": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 422,
          column: 13
        }
      },
      "54": {
        start: {
          line: 405,
          column: 31
        },
        end: {
          line: 405,
          column: 81
        }
      },
      "55": {
        start: {
          line: 406,
          column: 16
        },
        end: {
          line: 421,
          column: 17
        }
      },
      "56": {
        start: {
          line: 407,
          column: 32
        },
        end: {
          line: 407,
          column: 46
        }
      },
      "57": {
        start: {
          line: 408,
          column: 20
        },
        end: {
          line: 420,
          column: 22
        }
      },
      "58": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 24
        }
      },
      "59": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 429,
          column: 15
        }
      },
      "60": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 430,
          column: 24
        }
      },
      "61": {
        start: {
          line: 434,
          column: 0
        },
        end: {
          line: 434,
          column: 44
        }
      },
      "62": {
        start: {
          line: 435,
          column: 0
        },
        end: {
          line: 435,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 38
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 199,
            column: 53
          },
          end: {
            line: 199,
            column: 54
          }
        },
        loc: {
          start: {
            line: 199,
            column: 61
          },
          end: {
            line: 211,
            column: 13
          }
        },
        line: 199
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 28
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 240
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 277,
            column: 49
          },
          end: {
            line: 277,
            column: 50
          }
        },
        loc: {
          start: {
            line: 277,
            column: 57
          },
          end: {
            line: 280,
            column: 13
          }
        },
        line: 277
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 29
          },
          end: {
            line: 432,
            column: 5
          }
        },
        line: 299
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 13,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 36
          }
        }],
        line: 13
      },
      "4": {
        loc: {
          start: {
            line: 15,
            column: 56
          },
          end: {
            line: 15,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 63
          },
          end: {
            line: 15,
            column: 64
          }
        }],
        line: 15
      },
      "5": {
        loc: {
          start: {
            line: 15,
            column: 66
          },
          end: {
            line: 15,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 74
          },
          end: {
            line: 15,
            column: 76
          }
        }],
        line: 15
      },
      "6": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "7": {
        loc: {
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "8": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "9": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "10": {
        loc: {
          start: {
            line: 41,
            column: 32
          },
          end: {
            line: 41,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 61
          },
          end: {
            line: 41,
            column: 101
          }
        }, {
          start: {
            line: 41,
            column: 104
          },
          end: {
            line: 41,
            column: 106
          }
        }],
        line: 41
      },
      "11": {
        loc: {
          start: {
            line: 406,
            column: 16
          },
          end: {
            line: 421,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 16
          },
          end: {
            line: 421,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 406
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/hr/hrRequestService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/services/hr/hrRequestService.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface UnifiedRequest {\n  id: string;\n  type: 'time_correction' | 'overtime' | 'leave';\n  employeeId: string;\n  employeeName: string;\n  departmentName: string;\n  status: 'pending' | 'approved' | 'rejected';\n  submittedAt: string;\n  approverName?: string;\n  approvedAt?: string;\n  details: any;\n  requestTable: string; // Track which table this came from\n}\n\nexport interface RequestListParams {\n  type?: string;\n  status?: 'pending' | 'approved' | 'rejected';\n  departmentId?: string;\n  search?: string;\n  page?: number;\n  limit?: number;\n}\n\nexport interface RequestStats {\n  total: number;\n  pending: number;\n  approved: number;\n  rejected: number;\n  byType: Array<{\n    type: string;\n    count: number;\n  }>;\n}\n\nexport class HrRequestService {\n  /**\n   * Get all requests from all tables (time corrections, overtime, leaves)\n   */\n  async getAllRequests(params: RequestListParams = {}): Promise<{\n    requests: UnifiedRequest[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    try {\n      const {\n        type,\n        status,\n        departmentId,\n        search,\n        page = 1,\n        limit = 50\n      } = params;\n\n      const offset = (page - 1) * limit;\n      \n      // Build WHERE conditions\n      const whereConditions: string[] = [];\n      const queryParams: any[] = [];\n      let paramIndex = 1;\n\n      if (type) {\n        whereConditions.push(`ar.type = $${paramIndex}`);\n        queryParams.push(type);\n        paramIndex++;\n      }\n\n      if (status) {\n        whereConditions.push(`ar.status = $${paramIndex}`);\n        queryParams.push(status);\n        paramIndex++;\n      }\n\n      if (departmentId) {\n        whereConditions.push(`d.id = $${paramIndex}`);\n        queryParams.push(departmentId);\n        paramIndex++;\n      }\n\n      if (search) {\n        whereConditions.push(`(u.first_name ILIKE $${paramIndex} OR u.last_name ILIKE $${paramIndex} OR e.employee_id ILIKE $${paramIndex})`);\n        queryParams.push(`%${search}%`);\n        paramIndex++;\n      }\n\n      const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n      // Union query to get all requests from all tables\n      const unionQuery = `\n        WITH all_requests AS (\n          -- Time Correction Requests\n          SELECT \n            tc.id,\n            'time_correction' as type,\n            tc.employee_id as employee_id,\n            CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n            d.name as department_name,\n            tc.status::text as status,\n            tc.created_at as submitted_at,\n            approver.first_name || ' ' || approver.last_name as approver_name,\n            tc.approved_at,\n            jsonb_build_object(\n              'date', tc.correction_date,\n              'requestedClockIn', tc.requested_clock_in,\n              'requestedClockOut', tc.requested_clock_out,\n              'reason', tc.reason,\n              'comments', tc.comments\n            ) as details,\n            'time_correction_requests' as request_table\n          FROM time_correction_requests tc\n          JOIN employees e ON tc.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          JOIN departments d ON e.department_id = d.id\n          LEFT JOIN users approver ON tc.approver_id = approver.id\n          \n          UNION ALL\n          \n          -- Overtime Requests\n          SELECT \n            ot.id,\n            'overtime' as type,\n            ot.employee_id as employee_id,\n            CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n            d.name as department_name,\n            ot.status::text as status,\n            ot.created_at as submitted_at,\n            approver.first_name || ' ' || approver.last_name as approver_name,\n            ot.approved_at,\n            jsonb_build_object(\n              'date', ot.overtime_date,\n              'startTime', ot.start_time,\n              'endTime', ot.end_time,\n              'hours', ot.requested_hours,\n              'reason', ot.reason,\n              'comments', ot.comments\n            ) as details,\n            'overtime_requests' as request_table\n          FROM overtime_requests ot\n          JOIN employees e ON ot.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          JOIN departments d ON e.department_id = d.id\n          LEFT JOIN users approver ON ot.approver_id = approver.id\n          \n          UNION ALL\n          \n          -- Leave Requests\n          SELECT \n            lr.id,\n            'leave' as type,\n            lr.employee_id as employee_id,\n            CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n            d.name as department_name,\n            lr.status::text as status,\n            lr.created_at as submitted_at,\n            approver.first_name || ' ' || approver.last_name as approver_name,\n            NULL as approved_at,\n            jsonb_build_object(\n              'leaveType', lr.leave_type,\n              'startDate', lr.start_date,\n              'endDate', lr.end_date,\n              'totalDays', (lr.end_date - lr.start_date + 1)\n            ) as details,\n            'leaves' as request_table\n          FROM leaves lr\n          JOIN employees e ON lr.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          JOIN departments d ON e.department_id = d.id\n          LEFT JOIN users approver ON lr.approver_id = approver.id\n        )\n        SELECT \n          ar.*,\n          e.employee_id as employee_display_id\n        FROM all_requests ar\n        JOIN employees e ON ar.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        JOIN departments d ON e.department_id = d.id\n        ${whereClause}\n        ORDER BY ar.submitted_at DESC\n        LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n      `;\n\n      queryParams.push(limit, offset);\n\n      // Count query\n      const countQuery = `\n        WITH all_requests AS (\n          -- Time Correction Requests\n          SELECT \n            tc.id,\n            'time_correction' as type,\n            tc.employee_id as employee_id,\n            CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n            d.name as department_name,\n            tc.status::text as status,\n            tc.created_at as submitted_at,\n            'time_correction_requests' as request_table\n          FROM time_correction_requests tc\n          JOIN employees e ON tc.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          JOIN departments d ON e.department_id = d.id\n          \n          UNION ALL\n          \n          -- Overtime Requests\n          SELECT \n            ot.id,\n            'overtime' as type,\n            ot.employee_id as employee_id,\n            CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n            d.name as department_name,\n            ot.status::text as status,\n            ot.created_at as submitted_at,\n            'overtime_requests' as request_table\n          FROM overtime_requests ot\n          JOIN employees e ON ot.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          JOIN departments d ON e.department_id = d.id\n          \n          UNION ALL\n          \n          -- Leave Requests\n          SELECT \n            lr.id,\n            'leave' as type,\n            lr.employee_id as employee_id,\n            CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n            d.name as department_name,\n            lr.status::text as status,\n            lr.created_at as submitted_at,\n            'leaves' as request_table\n          FROM leaves lr\n          JOIN employees e ON lr.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          JOIN departments d ON e.department_id = d.id\n        )\n        SELECT COUNT(*) as total\n        FROM all_requests ar\n        JOIN employees e ON ar.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        JOIN departments d ON e.department_id = d.id\n        ${whereClause}\n      `;\n\n      const [requestsResult, countResult] = await Promise.all([\n        getPool().query(unionQuery, queryParams),\n        getPool().query(countQuery, queryParams.slice(0, -2)) // Remove limit and offset for count\n      ]);\n\n      const requests = requestsResult.rows.map(row => ({\n        id: row.id,\n        type: row.type,\n        employeeId: row.employee_display_id,\n        employeeName: row.employee_name,\n        departmentName: row.department_name,\n        status: row.status,\n        submittedAt: row.submitted_at,\n        approverName: row.approver_name,\n        approvedAt: row.approved_at,\n        details: row.details,\n        requestTable: row.request_table\n      }));\n\n      const total = parseInt(countResult.rows[0].total);\n      const totalPages = Math.ceil(total / limit);\n\n      logger.info('Retrieved HR requests', {\n        total,\n        returned: requests.length,\n        page,\n        limit,\n        filters: { type, status, departmentId, search }\n      });\n\n      return {\n        requests,\n        total,\n        page,\n        limit,\n        totalPages\n      };\n    } catch (error) {\n      logger.error('Error getting all HR requests', { \n        error: (error as Error).message,\n        params\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get request statistics\n   */\n  async getRequestStats(): Promise<RequestStats> {\n    try {\n      const statsQuery = `\n        WITH all_requests AS (\n          SELECT 'time_correction' as type, status::text as status FROM time_correction_requests\n          UNION ALL\n          SELECT 'overtime' as type, status::text as status FROM overtime_requests\n          UNION ALL\n          SELECT 'leave' as type, status::text as status FROM leaves\n        )\n        SELECT \n          COUNT(*) as total,\n          COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending,\n          COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved,\n          COUNT(CASE WHEN status = 'rejected' THEN 1 END) as rejected\n        FROM all_requests\n      `;\n\n      const byTypeQuery = `\n        WITH all_requests AS (\n          SELECT 'time_correction' as type FROM time_correction_requests\n          UNION ALL\n          SELECT 'overtime' as type FROM overtime_requests\n          UNION ALL\n          SELECT 'leave' as type FROM leaves\n        )\n        SELECT \n          type,\n          COUNT(*) as count\n        FROM all_requests\n        GROUP BY type\n        ORDER BY count DESC\n      `;\n\n      const [statsResult, byTypeResult] = await Promise.all([\n        getPool().query(statsQuery),\n        getPool().query(byTypeQuery)\n      ]);\n\n      const stats = statsResult.rows[0];\n      const byType = byTypeResult.rows.map(row => ({\n        type: row.type,\n        count: parseInt(row.count)\n      }));\n\n      return {\n        total: parseInt(stats.total),\n        pending: parseInt(stats.pending),\n        approved: parseInt(stats.approved),\n        rejected: parseInt(stats.rejected),\n        byType\n      };\n    } catch (error) {\n      logger.error('Error getting request stats', { \n        error: (error as Error).message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get request by ID from any table\n   */\n  async getRequestById(id: string): Promise<UnifiedRequest | null> {\n    try {\n      // Try to find the request in any of the tables\n      const queries = [\n        // Time correction\n        {\n          table: 'time_correction_requests',\n          type: 'time_correction',\n          query: `\n            SELECT \n              tc.id,\n              'time_correction' as type,\n              tc.employee_id as employee_id,\n              CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n              d.name as department_name,\n              tc.status::text as status,\n              tc.created_at as submitted_at,\n              approver.first_name || ' ' || approver.last_name as approver_name,\n              tc.approved_at,\n              jsonb_build_object(\n                'date', tc.correction_date,\n                'originalClockIn', tc.original_clock_in,\n                'originalClockOut', tc.original_clock_out,\n                'correctedClockIn', tc.corrected_clock_in,\n                'correctedClockOut', tc.corrected_clock_out,\n                'reason', tc.reason,\n                'justification', tc.justification\n              ) as details,\n              'time_correction_requests' as request_table,\n              e.employee_id as employee_display_id\n            FROM time_correction_requests tc\n            JOIN employees e ON tc.employee_id = e.id\n            JOIN users u ON e.user_id = u.id\n            JOIN departments d ON e.department_id = d.id\n            LEFT JOIN users approver ON tc.approver_id = approver.id\n            WHERE tc.id = $1\n          `\n        },\n        // Overtime\n        {\n          table: 'overtime_requests',\n          type: 'overtime',\n          query: `\n            SELECT \n              ot.id,\n              'overtime' as type,\n              ot.employee_id as employee_id,\n              CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n              d.name as department_name,\n              ot.status::text as status,\n              ot.created_at as submitted_at,\n              approver.first_name || ' ' || approver.last_name as approver_name,\n              ot.approved_at,\n              jsonb_build_object(\n                'date', ot.overtime_date,\n                'startTime', ot.start_time,\n                'endTime', ot.end_time,\n                'hours', ot.hours,\n                'reason', ot.reason,\n                'justification', ot.justification\n              ) as details,\n              'overtime_requests' as request_table,\n              e.employee_id as employee_display_id\n            FROM overtime_requests ot\n            JOIN employees e ON ot.employee_id = e.id\n            JOIN users u ON e.user_id = u.id\n            JOIN departments d ON e.department_id = d.id\n            LEFT JOIN users approver ON ot.approver_id = approver.id\n            WHERE ot.id = $1\n          `\n        },\n        // Leave\n        {\n          table: 'leaves',\n          type: 'leave',\n          query: `\n            SELECT \n              lr.id,\n              'leave' as type,\n              lr.employee_id as employee_id,\n              CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n              d.name as department_name,\n              lr.status::text as status,\n              lr.created_at as submitted_at,\n              approver.first_name || ' ' || approver.last_name as approver_name,\n              NULL as approved_at,\n              jsonb_build_object(\n                'leaveType', lr.leave_type,\n                'startDate', lr.start_date,\n                'endDate', lr.end_date,\n                'days', lr.days,\n                'reason', lr.reason,\n                'justification', lr.justification\n              ) as details,\n              'leaves' as request_table,\n              e.employee_id as employee_display_id\n            FROM leaves lr\n            JOIN employees e ON lr.employee_id = e.id\n            JOIN users u ON e.user_id = u.id\n            JOIN departments d ON e.department_id = d.id\n            LEFT JOIN users approver ON lr.approver_id = approver.id\n            WHERE lr.id = $1\n          `\n        }\n      ];\n\n      for (const { query } of queries) {\n        const result = await getPool().query(query, [id]);\n        if (result.rows.length > 0) {\n          const row = result.rows[0];\n          return {\n            id: row.id,\n            type: row.type,\n            employeeId: row.employee_display_id,\n            employeeName: row.employee_name,\n            departmentName: row.department_name,\n            status: row.status,\n            submittedAt: row.submitted_at,\n            approverName: row.approver_name,\n            approvedAt: row.approved_at,\n            details: row.details,\n            requestTable: row.request_table\n          };\n        }\n      }\n\n      return null;\n    } catch (error) {\n      logger.error('Error getting request by ID', { \n        error: (error as Error).message,\n        id\n      });\n      throw error;\n    }\n  }\n}\n\nexport const hrRequestService = new HrRequestService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c8bf2518a2256fa246227518d826909fc999ff52"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_rawm0g82 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_rawm0g82();
var __importDefault =
/* istanbul ignore next */
(cov_rawm0g82().s[0]++,
/* istanbul ignore next */
(cov_rawm0g82().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_rawm0g82().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_rawm0g82().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_rawm0g82().f[0]++;
  cov_rawm0g82().s[1]++;
  return /* istanbul ignore next */(cov_rawm0g82().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_rawm0g82().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_rawm0g82().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_rawm0g82().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_rawm0g82().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_rawm0g82().s[3]++;
exports.hrRequestService = exports.HrRequestService = void 0;
const database_1 =
/* istanbul ignore next */
(cov_rawm0g82().s[4]++, require("../../config/database"));
const logger_1 =
/* istanbul ignore next */
(cov_rawm0g82().s[5]++, __importDefault(require("../../utils/logger")));
class HrRequestService {
  /**
   * Get all requests from all tables (time corrections, overtime, leaves)
   */
  async getAllRequests(params =
  /* istanbul ignore next */
  (cov_rawm0g82().b[3][0]++, {})) {
    /* istanbul ignore next */
    cov_rawm0g82().f[1]++;
    cov_rawm0g82().s[6]++;
    try {
      const {
        type,
        status,
        departmentId,
        search,
        page =
        /* istanbul ignore next */
        (cov_rawm0g82().b[4][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_rawm0g82().b[5][0]++, 50)
      } =
      /* istanbul ignore next */
      (cov_rawm0g82().s[7]++, params);
      const offset =
      /* istanbul ignore next */
      (cov_rawm0g82().s[8]++, (page - 1) * limit);
      // Build WHERE conditions
      const whereConditions =
      /* istanbul ignore next */
      (cov_rawm0g82().s[9]++, []);
      const queryParams =
      /* istanbul ignore next */
      (cov_rawm0g82().s[10]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_rawm0g82().s[11]++, 1);
      /* istanbul ignore next */
      cov_rawm0g82().s[12]++;
      if (type) {
        /* istanbul ignore next */
        cov_rawm0g82().b[6][0]++;
        cov_rawm0g82().s[13]++;
        whereConditions.push(`ar.type = $${paramIndex}`);
        /* istanbul ignore next */
        cov_rawm0g82().s[14]++;
        queryParams.push(type);
        /* istanbul ignore next */
        cov_rawm0g82().s[15]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_rawm0g82().b[6][1]++;
      }
      cov_rawm0g82().s[16]++;
      if (status) {
        /* istanbul ignore next */
        cov_rawm0g82().b[7][0]++;
        cov_rawm0g82().s[17]++;
        whereConditions.push(`ar.status = $${paramIndex}`);
        /* istanbul ignore next */
        cov_rawm0g82().s[18]++;
        queryParams.push(status);
        /* istanbul ignore next */
        cov_rawm0g82().s[19]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_rawm0g82().b[7][1]++;
      }
      cov_rawm0g82().s[20]++;
      if (departmentId) {
        /* istanbul ignore next */
        cov_rawm0g82().b[8][0]++;
        cov_rawm0g82().s[21]++;
        whereConditions.push(`d.id = $${paramIndex}`);
        /* istanbul ignore next */
        cov_rawm0g82().s[22]++;
        queryParams.push(departmentId);
        /* istanbul ignore next */
        cov_rawm0g82().s[23]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_rawm0g82().b[8][1]++;
      }
      cov_rawm0g82().s[24]++;
      if (search) {
        /* istanbul ignore next */
        cov_rawm0g82().b[9][0]++;
        cov_rawm0g82().s[25]++;
        whereConditions.push(`(u.first_name ILIKE $${paramIndex} OR u.last_name ILIKE $${paramIndex} OR e.employee_id ILIKE $${paramIndex})`);
        /* istanbul ignore next */
        cov_rawm0g82().s[26]++;
        queryParams.push(`%${search}%`);
        /* istanbul ignore next */
        cov_rawm0g82().s[27]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_rawm0g82().b[9][1]++;
      }
      const whereClause =
      /* istanbul ignore next */
      (cov_rawm0g82().s[28]++, whereConditions.length > 0 ?
      /* istanbul ignore next */
      (cov_rawm0g82().b[10][0]++, `WHERE ${whereConditions.join(' AND ')}`) :
      /* istanbul ignore next */
      (cov_rawm0g82().b[10][1]++, ''));
      // Union query to get all requests from all tables
      const unionQuery =
      /* istanbul ignore next */
      (cov_rawm0g82().s[29]++, `
        WITH all_requests AS (
          -- Time Correction Requests
          SELECT 
            tc.id,
            'time_correction' as type,
            tc.employee_id as employee_id,
            CONCAT(u.first_name, ' ', u.last_name) as employee_name,
            d.name as department_name,
            tc.status::text as status,
            tc.created_at as submitted_at,
            approver.first_name || ' ' || approver.last_name as approver_name,
            tc.approved_at,
            jsonb_build_object(
              'date', tc.correction_date,
              'requestedClockIn', tc.requested_clock_in,
              'requestedClockOut', tc.requested_clock_out,
              'reason', tc.reason,
              'comments', tc.comments
            ) as details,
            'time_correction_requests' as request_table
          FROM time_correction_requests tc
          JOIN employees e ON tc.employee_id = e.id
          JOIN users u ON e.user_id = u.id
          JOIN departments d ON e.department_id = d.id
          LEFT JOIN users approver ON tc.approver_id = approver.id
          
          UNION ALL
          
          -- Overtime Requests
          SELECT 
            ot.id,
            'overtime' as type,
            ot.employee_id as employee_id,
            CONCAT(u.first_name, ' ', u.last_name) as employee_name,
            d.name as department_name,
            ot.status::text as status,
            ot.created_at as submitted_at,
            approver.first_name || ' ' || approver.last_name as approver_name,
            ot.approved_at,
            jsonb_build_object(
              'date', ot.overtime_date,
              'startTime', ot.start_time,
              'endTime', ot.end_time,
              'hours', ot.requested_hours,
              'reason', ot.reason,
              'comments', ot.comments
            ) as details,
            'overtime_requests' as request_table
          FROM overtime_requests ot
          JOIN employees e ON ot.employee_id = e.id
          JOIN users u ON e.user_id = u.id
          JOIN departments d ON e.department_id = d.id
          LEFT JOIN users approver ON ot.approver_id = approver.id
          
          UNION ALL
          
          -- Leave Requests
          SELECT 
            lr.id,
            'leave' as type,
            lr.employee_id as employee_id,
            CONCAT(u.first_name, ' ', u.last_name) as employee_name,
            d.name as department_name,
            lr.status::text as status,
            lr.created_at as submitted_at,
            approver.first_name || ' ' || approver.last_name as approver_name,
            NULL as approved_at,
            jsonb_build_object(
              'leaveType', lr.leave_type,
              'startDate', lr.start_date,
              'endDate', lr.end_date,
              'totalDays', (lr.end_date - lr.start_date + 1)
            ) as details,
            'leaves' as request_table
          FROM leaves lr
          JOIN employees e ON lr.employee_id = e.id
          JOIN users u ON e.user_id = u.id
          JOIN departments d ON e.department_id = d.id
          LEFT JOIN users approver ON lr.approver_id = approver.id
        )
        SELECT 
          ar.*,
          e.employee_id as employee_display_id
        FROM all_requests ar
        JOIN employees e ON ar.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        JOIN departments d ON e.department_id = d.id
        ${whereClause}
        ORDER BY ar.submitted_at DESC
        LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
      `);
      /* istanbul ignore next */
      cov_rawm0g82().s[30]++;
      queryParams.push(limit, offset);
      // Count query
      const countQuery =
      /* istanbul ignore next */
      (cov_rawm0g82().s[31]++, `
        WITH all_requests AS (
          -- Time Correction Requests
          SELECT 
            tc.id,
            'time_correction' as type,
            tc.employee_id as employee_id,
            CONCAT(u.first_name, ' ', u.last_name) as employee_name,
            d.name as department_name,
            tc.status::text as status,
            tc.created_at as submitted_at,
            'time_correction_requests' as request_table
          FROM time_correction_requests tc
          JOIN employees e ON tc.employee_id = e.id
          JOIN users u ON e.user_id = u.id
          JOIN departments d ON e.department_id = d.id
          
          UNION ALL
          
          -- Overtime Requests
          SELECT 
            ot.id,
            'overtime' as type,
            ot.employee_id as employee_id,
            CONCAT(u.first_name, ' ', u.last_name) as employee_name,
            d.name as department_name,
            ot.status::text as status,
            ot.created_at as submitted_at,
            'overtime_requests' as request_table
          FROM overtime_requests ot
          JOIN employees e ON ot.employee_id = e.id
          JOIN users u ON e.user_id = u.id
          JOIN departments d ON e.department_id = d.id
          
          UNION ALL
          
          -- Leave Requests
          SELECT 
            lr.id,
            'leave' as type,
            lr.employee_id as employee_id,
            CONCAT(u.first_name, ' ', u.last_name) as employee_name,
            d.name as department_name,
            lr.status::text as status,
            lr.created_at as submitted_at,
            'leaves' as request_table
          FROM leaves lr
          JOIN employees e ON lr.employee_id = e.id
          JOIN users u ON e.user_id = u.id
          JOIN departments d ON e.department_id = d.id
        )
        SELECT COUNT(*) as total
        FROM all_requests ar
        JOIN employees e ON ar.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        JOIN departments d ON e.department_id = d.id
        ${whereClause}
      `);
      const [requestsResult, countResult] =
      /* istanbul ignore next */
      (cov_rawm0g82().s[32]++, await Promise.all([(0, database_1.getPool)().query(unionQuery, queryParams), (0, database_1.getPool)().query(countQuery, queryParams.slice(0, -2)) // Remove limit and offset for count
      ]));
      const requests =
      /* istanbul ignore next */
      (cov_rawm0g82().s[33]++, requestsResult.rows.map(row => {
        /* istanbul ignore next */
        cov_rawm0g82().f[2]++;
        cov_rawm0g82().s[34]++;
        return {
          id: row.id,
          type: row.type,
          employeeId: row.employee_display_id,
          employeeName: row.employee_name,
          departmentName: row.department_name,
          status: row.status,
          submittedAt: row.submitted_at,
          approverName: row.approver_name,
          approvedAt: row.approved_at,
          details: row.details,
          requestTable: row.request_table
        };
      }));
      const total =
      /* istanbul ignore next */
      (cov_rawm0g82().s[35]++, parseInt(countResult.rows[0].total));
      const totalPages =
      /* istanbul ignore next */
      (cov_rawm0g82().s[36]++, Math.ceil(total / limit));
      /* istanbul ignore next */
      cov_rawm0g82().s[37]++;
      logger_1.default.info('Retrieved HR requests', {
        total,
        returned: requests.length,
        page,
        limit,
        filters: {
          type,
          status,
          departmentId,
          search
        }
      });
      /* istanbul ignore next */
      cov_rawm0g82().s[38]++;
      return {
        requests,
        total,
        page,
        limit,
        totalPages
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_rawm0g82().s[39]++;
      logger_1.default.error('Error getting all HR requests', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_rawm0g82().s[40]++;
      throw error;
    }
  }
  /**
   * Get request statistics
   */
  async getRequestStats() {
    /* istanbul ignore next */
    cov_rawm0g82().f[3]++;
    cov_rawm0g82().s[41]++;
    try {
      const statsQuery =
      /* istanbul ignore next */
      (cov_rawm0g82().s[42]++, `
        WITH all_requests AS (
          SELECT 'time_correction' as type, status::text as status FROM time_correction_requests
          UNION ALL
          SELECT 'overtime' as type, status::text as status FROM overtime_requests
          UNION ALL
          SELECT 'leave' as type, status::text as status FROM leaves
        )
        SELECT 
          COUNT(*) as total,
          COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending,
          COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved,
          COUNT(CASE WHEN status = 'rejected' THEN 1 END) as rejected
        FROM all_requests
      `);
      const byTypeQuery =
      /* istanbul ignore next */
      (cov_rawm0g82().s[43]++, `
        WITH all_requests AS (
          SELECT 'time_correction' as type FROM time_correction_requests
          UNION ALL
          SELECT 'overtime' as type FROM overtime_requests
          UNION ALL
          SELECT 'leave' as type FROM leaves
        )
        SELECT 
          type,
          COUNT(*) as count
        FROM all_requests
        GROUP BY type
        ORDER BY count DESC
      `);
      const [statsResult, byTypeResult] =
      /* istanbul ignore next */
      (cov_rawm0g82().s[44]++, await Promise.all([(0, database_1.getPool)().query(statsQuery), (0, database_1.getPool)().query(byTypeQuery)]));
      const stats =
      /* istanbul ignore next */
      (cov_rawm0g82().s[45]++, statsResult.rows[0]);
      const byType =
      /* istanbul ignore next */
      (cov_rawm0g82().s[46]++, byTypeResult.rows.map(row => {
        /* istanbul ignore next */
        cov_rawm0g82().f[4]++;
        cov_rawm0g82().s[47]++;
        return {
          type: row.type,
          count: parseInt(row.count)
        };
      }));
      /* istanbul ignore next */
      cov_rawm0g82().s[48]++;
      return {
        total: parseInt(stats.total),
        pending: parseInt(stats.pending),
        approved: parseInt(stats.approved),
        rejected: parseInt(stats.rejected),
        byType
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_rawm0g82().s[49]++;
      logger_1.default.error('Error getting request stats', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_rawm0g82().s[50]++;
      throw error;
    }
  }
  /**
   * Get request by ID from any table
   */
  async getRequestById(id) {
    /* istanbul ignore next */
    cov_rawm0g82().f[5]++;
    cov_rawm0g82().s[51]++;
    try {
      // Try to find the request in any of the tables
      const queries =
      /* istanbul ignore next */
      (cov_rawm0g82().s[52]++, [
      // Time correction
      {
        table: 'time_correction_requests',
        type: 'time_correction',
        query: `
            SELECT 
              tc.id,
              'time_correction' as type,
              tc.employee_id as employee_id,
              CONCAT(u.first_name, ' ', u.last_name) as employee_name,
              d.name as department_name,
              tc.status::text as status,
              tc.created_at as submitted_at,
              approver.first_name || ' ' || approver.last_name as approver_name,
              tc.approved_at,
              jsonb_build_object(
                'date', tc.correction_date,
                'originalClockIn', tc.original_clock_in,
                'originalClockOut', tc.original_clock_out,
                'correctedClockIn', tc.corrected_clock_in,
                'correctedClockOut', tc.corrected_clock_out,
                'reason', tc.reason,
                'justification', tc.justification
              ) as details,
              'time_correction_requests' as request_table,
              e.employee_id as employee_display_id
            FROM time_correction_requests tc
            JOIN employees e ON tc.employee_id = e.id
            JOIN users u ON e.user_id = u.id
            JOIN departments d ON e.department_id = d.id
            LEFT JOIN users approver ON tc.approver_id = approver.id
            WHERE tc.id = $1
          `
      },
      // Overtime
      {
        table: 'overtime_requests',
        type: 'overtime',
        query: `
            SELECT 
              ot.id,
              'overtime' as type,
              ot.employee_id as employee_id,
              CONCAT(u.first_name, ' ', u.last_name) as employee_name,
              d.name as department_name,
              ot.status::text as status,
              ot.created_at as submitted_at,
              approver.first_name || ' ' || approver.last_name as approver_name,
              ot.approved_at,
              jsonb_build_object(
                'date', ot.overtime_date,
                'startTime', ot.start_time,
                'endTime', ot.end_time,
                'hours', ot.hours,
                'reason', ot.reason,
                'justification', ot.justification
              ) as details,
              'overtime_requests' as request_table,
              e.employee_id as employee_display_id
            FROM overtime_requests ot
            JOIN employees e ON ot.employee_id = e.id
            JOIN users u ON e.user_id = u.id
            JOIN departments d ON e.department_id = d.id
            LEFT JOIN users approver ON ot.approver_id = approver.id
            WHERE ot.id = $1
          `
      },
      // Leave
      {
        table: 'leaves',
        type: 'leave',
        query: `
            SELECT 
              lr.id,
              'leave' as type,
              lr.employee_id as employee_id,
              CONCAT(u.first_name, ' ', u.last_name) as employee_name,
              d.name as department_name,
              lr.status::text as status,
              lr.created_at as submitted_at,
              approver.first_name || ' ' || approver.last_name as approver_name,
              NULL as approved_at,
              jsonb_build_object(
                'leaveType', lr.leave_type,
                'startDate', lr.start_date,
                'endDate', lr.end_date,
                'days', lr.days,
                'reason', lr.reason,
                'justification', lr.justification
              ) as details,
              'leaves' as request_table,
              e.employee_id as employee_display_id
            FROM leaves lr
            JOIN employees e ON lr.employee_id = e.id
            JOIN users u ON e.user_id = u.id
            JOIN departments d ON e.department_id = d.id
            LEFT JOIN users approver ON lr.approver_id = approver.id
            WHERE lr.id = $1
          `
      }]);
      /* istanbul ignore next */
      cov_rawm0g82().s[53]++;
      for (const {
        query
      } of queries) {
        const result =
        /* istanbul ignore next */
        (cov_rawm0g82().s[54]++, await (0, database_1.getPool)().query(query, [id]));
        /* istanbul ignore next */
        cov_rawm0g82().s[55]++;
        if (result.rows.length > 0) {
          /* istanbul ignore next */
          cov_rawm0g82().b[11][0]++;
          const row =
          /* istanbul ignore next */
          (cov_rawm0g82().s[56]++, result.rows[0]);
          /* istanbul ignore next */
          cov_rawm0g82().s[57]++;
          return {
            id: row.id,
            type: row.type,
            employeeId: row.employee_display_id,
            employeeName: row.employee_name,
            departmentName: row.department_name,
            status: row.status,
            submittedAt: row.submitted_at,
            approverName: row.approver_name,
            approvedAt: row.approved_at,
            details: row.details,
            requestTable: row.request_table
          };
        } else
        /* istanbul ignore next */
        {
          cov_rawm0g82().b[11][1]++;
        }
      }
      /* istanbul ignore next */
      cov_rawm0g82().s[58]++;
      return null;
    } catch (error) {
      /* istanbul ignore next */
      cov_rawm0g82().s[59]++;
      logger_1.default.error('Error getting request by ID', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_rawm0g82().s[60]++;
      throw error;
    }
  }
}
/* istanbul ignore next */
cov_rawm0g82().s[61]++;
exports.HrRequestService = HrRequestService;
/* istanbul ignore next */
cov_rawm0g82().s[62]++;
exports.hrRequestService = new HrRequestService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,