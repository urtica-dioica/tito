{"version":3,"names":["cov_rawm0g82","actualCoverage","database_1","s","require","logger_1","__importDefault","HrRequestService","getAllRequests","params","b","f","type","status","departmentId","search","page","limit","offset","whereConditions","queryParams","paramIndex","push","whereClause","length","join","unionQuery","countQuery","requestsResult","countResult","Promise","all","getPool","query","slice","requests","rows","map","row","id","employeeId","employee_display_id","employeeName","employee_name","departmentName","department_name","submittedAt","submitted_at","approverName","approver_name","approvedAt","approved_at","details","requestTable","request_table","total","parseInt","totalPages","Math","ceil","default","info","returned","filters","error","message","getRequestStats","statsQuery","byTypeQuery","statsResult","byTypeResult","stats","byType","count","pending","approved","rejected","getRequestById","queries","table","result","exports","hrRequestService"],"sources":["/home/kim/tito/server/src/services/hr/hrRequestService.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface UnifiedRequest {\n  id: string;\n  type: 'time_correction' | 'overtime' | 'leave';\n  employeeId: string;\n  employeeName: string;\n  departmentName: string;\n  status: 'pending' | 'approved' | 'rejected';\n  submittedAt: string;\n  approverName?: string;\n  approvedAt?: string;\n  details: any;\n  requestTable: string; // Track which table this came from\n}\n\nexport interface RequestListParams {\n  type?: string;\n  status?: 'pending' | 'approved' | 'rejected';\n  departmentId?: string;\n  search?: string;\n  page?: number;\n  limit?: number;\n}\n\nexport interface RequestStats {\n  total: number;\n  pending: number;\n  approved: number;\n  rejected: number;\n  byType: Array<{\n    type: string;\n    count: number;\n  }>;\n}\n\nexport class HrRequestService {\n  /**\n   * Get all requests from all tables (time corrections, overtime, leaves)\n   */\n  async getAllRequests(params: RequestListParams = {}): Promise<{\n    requests: UnifiedRequest[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    try {\n      const {\n        type,\n        status,\n        departmentId,\n        search,\n        page = 1,\n        limit = 50\n      } = params;\n\n      const offset = (page - 1) * limit;\n      \n      // Build WHERE conditions\n      const whereConditions: string[] = [];\n      const queryParams: any[] = [];\n      let paramIndex = 1;\n\n      if (type) {\n        whereConditions.push(`ar.type = $${paramIndex}`);\n        queryParams.push(type);\n        paramIndex++;\n      }\n\n      if (status) {\n        whereConditions.push(`ar.status = $${paramIndex}`);\n        queryParams.push(status);\n        paramIndex++;\n      }\n\n      if (departmentId) {\n        whereConditions.push(`d.id = $${paramIndex}`);\n        queryParams.push(departmentId);\n        paramIndex++;\n      }\n\n      if (search) {\n        whereConditions.push(`(u.first_name ILIKE $${paramIndex} OR u.last_name ILIKE $${paramIndex} OR e.employee_id ILIKE $${paramIndex})`);\n        queryParams.push(`%${search}%`);\n        paramIndex++;\n      }\n\n      const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n      // Union query to get all requests from all tables\n      const unionQuery = `\n        WITH all_requests AS (\n          -- Time Correction Requests\n          SELECT \n            tc.id,\n            'time_correction' as type,\n            tc.employee_id as employee_id,\n            CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n            d.name as department_name,\n            tc.status::text as status,\n            tc.created_at as submitted_at,\n            approver.first_name || ' ' || approver.last_name as approver_name,\n            tc.approved_at,\n            jsonb_build_object(\n              'date', tc.correction_date,\n              'requestedClockIn', tc.requested_clock_in,\n              'requestedClockOut', tc.requested_clock_out,\n              'reason', tc.reason,\n              'comments', tc.comments\n            ) as details,\n            'time_correction_requests' as request_table\n          FROM time_correction_requests tc\n          JOIN employees e ON tc.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          JOIN departments d ON e.department_id = d.id\n          LEFT JOIN users approver ON tc.approver_id = approver.id\n          \n          UNION ALL\n          \n          -- Overtime Requests\n          SELECT \n            ot.id,\n            'overtime' as type,\n            ot.employee_id as employee_id,\n            CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n            d.name as department_name,\n            ot.status::text as status,\n            ot.created_at as submitted_at,\n            approver.first_name || ' ' || approver.last_name as approver_name,\n            ot.approved_at,\n            jsonb_build_object(\n              'date', ot.overtime_date,\n              'startTime', ot.start_time,\n              'endTime', ot.end_time,\n              'hours', ot.requested_hours,\n              'reason', ot.reason,\n              'comments', ot.comments\n            ) as details,\n            'overtime_requests' as request_table\n          FROM overtime_requests ot\n          JOIN employees e ON ot.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          JOIN departments d ON e.department_id = d.id\n          LEFT JOIN users approver ON ot.approver_id = approver.id\n          \n          UNION ALL\n          \n          -- Leave Requests\n          SELECT \n            lr.id,\n            'leave' as type,\n            lr.employee_id as employee_id,\n            CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n            d.name as department_name,\n            lr.status::text as status,\n            lr.created_at as submitted_at,\n            approver.first_name || ' ' || approver.last_name as approver_name,\n            NULL as approved_at,\n            jsonb_build_object(\n              'leaveType', lr.leave_type,\n              'startDate', lr.start_date,\n              'endDate', lr.end_date,\n              'totalDays', (lr.end_date - lr.start_date + 1)\n            ) as details,\n            'leaves' as request_table\n          FROM leaves lr\n          JOIN employees e ON lr.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          JOIN departments d ON e.department_id = d.id\n          LEFT JOIN users approver ON lr.approver_id = approver.id\n        )\n        SELECT \n          ar.*,\n          e.employee_id as employee_display_id\n        FROM all_requests ar\n        JOIN employees e ON ar.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        JOIN departments d ON e.department_id = d.id\n        ${whereClause}\n        ORDER BY ar.submitted_at DESC\n        LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n      `;\n\n      queryParams.push(limit, offset);\n\n      // Count query\n      const countQuery = `\n        WITH all_requests AS (\n          -- Time Correction Requests\n          SELECT \n            tc.id,\n            'time_correction' as type,\n            tc.employee_id as employee_id,\n            CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n            d.name as department_name,\n            tc.status::text as status,\n            tc.created_at as submitted_at,\n            'time_correction_requests' as request_table\n          FROM time_correction_requests tc\n          JOIN employees e ON tc.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          JOIN departments d ON e.department_id = d.id\n          \n          UNION ALL\n          \n          -- Overtime Requests\n          SELECT \n            ot.id,\n            'overtime' as type,\n            ot.employee_id as employee_id,\n            CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n            d.name as department_name,\n            ot.status::text as status,\n            ot.created_at as submitted_at,\n            'overtime_requests' as request_table\n          FROM overtime_requests ot\n          JOIN employees e ON ot.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          JOIN departments d ON e.department_id = d.id\n          \n          UNION ALL\n          \n          -- Leave Requests\n          SELECT \n            lr.id,\n            'leave' as type,\n            lr.employee_id as employee_id,\n            CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n            d.name as department_name,\n            lr.status::text as status,\n            lr.created_at as submitted_at,\n            'leaves' as request_table\n          FROM leaves lr\n          JOIN employees e ON lr.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          JOIN departments d ON e.department_id = d.id\n        )\n        SELECT COUNT(*) as total\n        FROM all_requests ar\n        JOIN employees e ON ar.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        JOIN departments d ON e.department_id = d.id\n        ${whereClause}\n      `;\n\n      const [requestsResult, countResult] = await Promise.all([\n        getPool().query(unionQuery, queryParams),\n        getPool().query(countQuery, queryParams.slice(0, -2)) // Remove limit and offset for count\n      ]);\n\n      const requests = requestsResult.rows.map(row => ({\n        id: row.id,\n        type: row.type,\n        employeeId: row.employee_display_id,\n        employeeName: row.employee_name,\n        departmentName: row.department_name,\n        status: row.status,\n        submittedAt: row.submitted_at,\n        approverName: row.approver_name,\n        approvedAt: row.approved_at,\n        details: row.details,\n        requestTable: row.request_table\n      }));\n\n      const total = parseInt(countResult.rows[0].total);\n      const totalPages = Math.ceil(total / limit);\n\n      logger.info('Retrieved HR requests', {\n        total,\n        returned: requests.length,\n        page,\n        limit,\n        filters: { type, status, departmentId, search }\n      });\n\n      return {\n        requests,\n        total,\n        page,\n        limit,\n        totalPages\n      };\n    } catch (error) {\n      logger.error('Error getting all HR requests', { \n        error: (error as Error).message,\n        params\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get request statistics\n   */\n  async getRequestStats(): Promise<RequestStats> {\n    try {\n      const statsQuery = `\n        WITH all_requests AS (\n          SELECT 'time_correction' as type, status::text as status FROM time_correction_requests\n          UNION ALL\n          SELECT 'overtime' as type, status::text as status FROM overtime_requests\n          UNION ALL\n          SELECT 'leave' as type, status::text as status FROM leaves\n        )\n        SELECT \n          COUNT(*) as total,\n          COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending,\n          COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved,\n          COUNT(CASE WHEN status = 'rejected' THEN 1 END) as rejected\n        FROM all_requests\n      `;\n\n      const byTypeQuery = `\n        WITH all_requests AS (\n          SELECT 'time_correction' as type FROM time_correction_requests\n          UNION ALL\n          SELECT 'overtime' as type FROM overtime_requests\n          UNION ALL\n          SELECT 'leave' as type FROM leaves\n        )\n        SELECT \n          type,\n          COUNT(*) as count\n        FROM all_requests\n        GROUP BY type\n        ORDER BY count DESC\n      `;\n\n      const [statsResult, byTypeResult] = await Promise.all([\n        getPool().query(statsQuery),\n        getPool().query(byTypeQuery)\n      ]);\n\n      const stats = statsResult.rows[0];\n      const byType = byTypeResult.rows.map(row => ({\n        type: row.type,\n        count: parseInt(row.count)\n      }));\n\n      return {\n        total: parseInt(stats.total),\n        pending: parseInt(stats.pending),\n        approved: parseInt(stats.approved),\n        rejected: parseInt(stats.rejected),\n        byType\n      };\n    } catch (error) {\n      logger.error('Error getting request stats', { \n        error: (error as Error).message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get request by ID from any table\n   */\n  async getRequestById(id: string): Promise<UnifiedRequest | null> {\n    try {\n      // Try to find the request in any of the tables\n      const queries = [\n        // Time correction\n        {\n          table: 'time_correction_requests',\n          type: 'time_correction',\n          query: `\n            SELECT \n              tc.id,\n              'time_correction' as type,\n              tc.employee_id as employee_id,\n              CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n              d.name as department_name,\n              tc.status::text as status,\n              tc.created_at as submitted_at,\n              approver.first_name || ' ' || approver.last_name as approver_name,\n              tc.approved_at,\n              jsonb_build_object(\n                'date', tc.correction_date,\n                'originalClockIn', tc.original_clock_in,\n                'originalClockOut', tc.original_clock_out,\n                'correctedClockIn', tc.corrected_clock_in,\n                'correctedClockOut', tc.corrected_clock_out,\n                'reason', tc.reason,\n                'justification', tc.justification\n              ) as details,\n              'time_correction_requests' as request_table,\n              e.employee_id as employee_display_id\n            FROM time_correction_requests tc\n            JOIN employees e ON tc.employee_id = e.id\n            JOIN users u ON e.user_id = u.id\n            JOIN departments d ON e.department_id = d.id\n            LEFT JOIN users approver ON tc.approver_id = approver.id\n            WHERE tc.id = $1\n          `\n        },\n        // Overtime\n        {\n          table: 'overtime_requests',\n          type: 'overtime',\n          query: `\n            SELECT \n              ot.id,\n              'overtime' as type,\n              ot.employee_id as employee_id,\n              CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n              d.name as department_name,\n              ot.status::text as status,\n              ot.created_at as submitted_at,\n              approver.first_name || ' ' || approver.last_name as approver_name,\n              ot.approved_at,\n              jsonb_build_object(\n                'date', ot.overtime_date,\n                'startTime', ot.start_time,\n                'endTime', ot.end_time,\n                'hours', ot.hours,\n                'reason', ot.reason,\n                'justification', ot.justification\n              ) as details,\n              'overtime_requests' as request_table,\n              e.employee_id as employee_display_id\n            FROM overtime_requests ot\n            JOIN employees e ON ot.employee_id = e.id\n            JOIN users u ON e.user_id = u.id\n            JOIN departments d ON e.department_id = d.id\n            LEFT JOIN users approver ON ot.approver_id = approver.id\n            WHERE ot.id = $1\n          `\n        },\n        // Leave\n        {\n          table: 'leaves',\n          type: 'leave',\n          query: `\n            SELECT \n              lr.id,\n              'leave' as type,\n              lr.employee_id as employee_id,\n              CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n              d.name as department_name,\n              lr.status::text as status,\n              lr.created_at as submitted_at,\n              approver.first_name || ' ' || approver.last_name as approver_name,\n              NULL as approved_at,\n              jsonb_build_object(\n                'leaveType', lr.leave_type,\n                'startDate', lr.start_date,\n                'endDate', lr.end_date,\n                'days', lr.days,\n                'reason', lr.reason,\n                'justification', lr.justification\n              ) as details,\n              'leaves' as request_table,\n              e.employee_id as employee_display_id\n            FROM leaves lr\n            JOIN employees e ON lr.employee_id = e.id\n            JOIN users u ON e.user_id = u.id\n            JOIN departments d ON e.department_id = d.id\n            LEFT JOIN users approver ON lr.approver_id = approver.id\n            WHERE lr.id = $1\n          `\n        }\n      ];\n\n      for (const { query } of queries) {\n        const result = await getPool().query(query, [id]);\n        if (result.rows.length > 0) {\n          const row = result.rows[0];\n          return {\n            id: row.id,\n            type: row.type,\n            employeeId: row.employee_display_id,\n            employeeName: row.employee_name,\n            departmentName: row.department_name,\n            status: row.status,\n            submittedAt: row.submitted_at,\n            approverName: row.approver_name,\n            approvedAt: row.approved_at,\n            details: row.details,\n            requestTable: row.request_table\n          };\n        }\n      }\n\n      return null;\n    } catch (error) {\n      logger.error('Error getting request by ID', { \n        error: (error as Error).message,\n        id\n      });\n      throw error;\n    }\n  }\n}\n\nexport const hrRequestService = new HrRequestService();\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}