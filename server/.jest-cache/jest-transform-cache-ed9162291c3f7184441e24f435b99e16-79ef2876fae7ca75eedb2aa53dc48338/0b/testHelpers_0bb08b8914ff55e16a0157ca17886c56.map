{"file":"/home/kim/tito/server/tests/utils/testHelpers.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/utils/testHelpers.ts"],"sourcesContent":["import { Pool } from 'pg';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport { config } from '../../src/config/environment';\n\nexport interface TestUser {\n  id: string;\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  isActive: boolean;\n}\n\nexport interface TestDepartment {\n  id: string;\n  name: string;\n  description: string;\n  departmentHeadUserId?: string;\n  isActive: boolean;\n}\n\nexport interface TestEmployee {\n  id: string;\n  userId: string;\n  employeeId: string;\n  departmentId: string;\n  position: string;\n  employmentType: string;\n  hireDate: string;\n  baseSalary: number;\n  status: string;\n}\n\nexport class TestHelpers {\n  constructor(private dbPool: Pool) {}\n\n  // User management\n  async createTestUser(userData: Partial<TestUser> = {}): Promise<TestUser> {\n    const timestamp = Date.now();\n    const randomId = Math.random().toString(36).substring(7);\n    const defaultUser: TestUser = {\n      id: '',\n      email: `test-${timestamp}-${randomId}@example.com`,\n      password: 'password123',\n      firstName: `Test${timestamp}`,\n      lastName: `User${randomId}`,\n      role: 'employee',\n      isActive: true,\n      ...userData\n    };\n\n    const hashedPassword = await bcrypt.hash(defaultUser.password, 10);\n    \n    const query = `\n      INSERT INTO users (email, password_hash, first_name, last_name, role, is_active)\n      VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING id, email, first_name, last_name, role, is_active\n    `;\n    \n    const values = [\n      defaultUser.email,\n      hashedPassword,\n      defaultUser.firstName,\n      defaultUser.lastName,\n      defaultUser.role,\n      defaultUser.isActive\n    ];\n\n    const result = await this.dbPool.query(query, values);\n    const user = result.rows[0];\n    \n    return {\n      id: user.id,\n      email: user.email,\n      password: defaultUser.password, // Return plain password for testing\n      firstName: user.first_name,\n      lastName: user.last_name,\n      role: user.role,\n      isActive: user.is_active\n    };\n  }\n\n  async createTestDepartment(departmentData: Partial<TestDepartment> = {}): Promise<TestDepartment> {\n    const timestamp = Date.now();\n    const randomId = Math.random().toString(36).substring(7);\n    const defaultDepartment: TestDepartment = {\n      id: '',\n      name: `Test Department ${timestamp}-${randomId}`,\n      description: `Test department description ${timestamp}`,\n      isActive: true,\n      ...departmentData\n    };\n\n    const query = `\n      INSERT INTO departments (name, description, department_head_user_id, is_active)\n      VALUES ($1, $2, $3, $4)\n      RETURNING id, name, description, department_head_user_id, is_active\n    `;\n    \n    const values = [\n      defaultDepartment.name,\n      defaultDepartment.description,\n      defaultDepartment.departmentHeadUserId || null,\n      defaultDepartment.isActive\n    ];\n\n    const result = await this.dbPool.query(query, values);\n    const department = result.rows[0];\n    \n    return {\n      id: department.id,\n      name: department.name,\n      description: department.description,\n      departmentHeadUserId: department.department_head_user_id,\n      isActive: department.is_active\n    };\n  }\n\n  async createTestEmployee(employeeData: Partial<TestEmployee> = {}): Promise<TestEmployee> {\n    // Create user if not provided\n    const user = await this.createTestUser(employeeData.userId ? { id: employeeData.userId } : {});\n    \n    // Create department if not provided\n    const department = await this.createTestDepartment(employeeData.departmentId ? { id: employeeData.departmentId } : {});\n\n    const defaultEmployee: TestEmployee = {\n      id: '',\n      userId: user.id,\n      employeeId: 'EMP001',\n      departmentId: department.id,\n      position: 'Software Developer',\n      employmentType: 'regular',\n      hireDate: '2025-01-01',\n      baseSalary: 50000,\n      status: 'active',\n      ...employeeData\n    };\n\n    const query = `\n      INSERT INTO employees (user_id, employee_id, department_id, position, employment_type, hire_date, base_salary, status)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n      RETURNING id, user_id, employee_id, department_id, position, employment_type, hire_date, base_salary, status\n    `;\n    \n    const values = [\n      defaultEmployee.userId,\n      defaultEmployee.employeeId,\n      defaultEmployee.departmentId,\n      defaultEmployee.position,\n      defaultEmployee.employmentType,\n      defaultEmployee.hireDate,\n      defaultEmployee.baseSalary,\n      defaultEmployee.status\n    ];\n\n    const result = await this.dbPool.query(query, values);\n    const employee = result.rows[0];\n    \n    return {\n      id: employee.id,\n      userId: employee.user_id,\n      employeeId: employee.employee_id,\n      departmentId: employee.department_id,\n      position: employee.position,\n      employmentType: employee.employment_type,\n      hireDate: employee.hire_date,\n      baseSalary: employee.base_salary,\n      status: employee.status\n    };\n  }\n\n  // JWT token generation\n  generateAccessToken(user: TestUser): string {\n    return jwt.sign(\n      { \n        userId: user.id, \n        email: user.email, \n        role: user.role,\n        tokenVersion: 1\n      },\n      config.jwt.secret,\n      { \n        expiresIn: '15m',\n        issuer: 'tito-hr-system',\n        audience: 'tito-hr-users'\n      }\n    );\n  }\n\n  generateRefreshToken(user: TestUser): string {\n    return jwt.sign(\n      { \n        userId: user.id, \n        tokenVersion: 1\n      },\n      config.jwt.secret,\n      { \n        expiresIn: '7d',\n        issuer: 'tito-hr-system',\n        audience: 'tito-hr-refresh'\n      }\n    );\n  }\n\n  // Database queries\n  async getUserById(id: string): Promise<any> {\n    const query = 'SELECT * FROM users WHERE id = $1';\n    const result = await this.dbPool.query(query, [id]);\n    return result.rows[0];\n  }\n\n  async getDepartmentById(id: string): Promise<any> {\n    const query = 'SELECT * FROM departments WHERE id = $1';\n    const result = await this.dbPool.query(query, [id]);\n    return result.rows[0];\n  }\n\n  async getEmployeeById(id: string): Promise<any> {\n    const query = 'SELECT * FROM employees WHERE id = $1';\n    const result = await this.dbPool.query(query, [id]);\n    return result.rows[0];\n  }\n\n  // Cleanup helpers\n  async deleteUser(id: string): Promise<void> {\n    await this.dbPool.query('DELETE FROM users WHERE id = $1', [id]);\n  }\n\n  async deleteDepartment(id: string): Promise<void> {\n    await this.dbPool.query('DELETE FROM departments WHERE id = $1', [id]);\n  }\n\n  async deleteEmployee(id: string): Promise<void> {\n    await this.dbPool.query('DELETE FROM employees WHERE id = $1', [id]);\n  }\n\n  async cleanupTestData(): Promise<void> {\n    // Clean up all test data in the correct order (respecting foreign key constraints)\n    await this.dbPool.query('DELETE FROM employees');\n    await this.dbPool.query('DELETE FROM users');\n    await this.dbPool.query('DELETE FROM departments');\n  }\n}"],"version":3}