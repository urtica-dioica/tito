d2a4db0fcb1e1b500cfc6ac4015531d1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabasePerformanceTest = exports.PerformanceBenchmark = exports.LoadTestRunner = void 0;
const axios = {
    create: () => ({
        get: jest.fn(),
        post: jest.fn(),
        put: jest.fn(),
        delete: jest.fn(),
        patch: jest.fn(),
        interceptors: {
            request: { use: jest.fn() },
            response: { use: jest.fn() }
        }
    })
};
const perf_hooks_1 = require("perf_hooks");
class LoadTestRunner {
    constructor(config) {
        this.results = [];
        this.config = config;
        this.axiosInstance = axios.create({
            baseURL: config.baseURL,
            timeout: config.timeout,
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'LoadTestRunner/1.0'
            }
        });
    }
    /**
     * Run a load test with a specific request function
     */
    async runLoadTest(requestFunction, testName) {
        console.log(`üöÄ Starting load test: ${testName}`);
        console.log(`üìä Configuration: ${this.config.concurrentUsers} users, ${this.config.requestsPerUser} requests each`);
        this.results = [];
        const startTime = perf_hooks_1.performance.now();
        // Create user groups
        const userGroups = this.createUserGroups();
        // Run load test
        await this.executeLoadTest(userGroups, requestFunction);
        const endTime = perf_hooks_1.performance.now();
        const duration = endTime - startTime;
        // Calculate results
        const result = this.calculateResults(startTime, endTime, duration);
        console.log(`‚úÖ Load test completed: ${testName}`);
        console.log(`üìà Results: ${result.successfulRequests}/${result.totalRequests} successful (${(result.errorRate * 100).toFixed(2)}% error rate)`);
        console.log(`‚è±Ô∏è  Average response time: ${result.averageResponseTime.toFixed(2)}ms`);
        console.log(`üöÄ Requests per second: ${result.requestsPerSecond.toFixed(2)}`);
        return result;
    }
    /**
     * Create user groups for concurrent execution
     */
    createUserGroups() {
        const userGroups = [];
        for (let i = 0; i < this.config.concurrentUsers; i++) {
            userGroups.push(async () => {
                // Ramp up delay
                const rampUpDelay = (i / this.config.concurrentUsers) * this.config.rampUpTime;
                if (rampUpDelay > 0) {
                    await this.sleep(rampUpDelay);
                }
                // Execute requests for this user
                for (let j = 0; j < this.config.requestsPerUser; j++) {
                    await this.executeRequest();
                    // Add delay between requests if needed
                    if (j < this.config.requestsPerUser - 1) {
                        await this.sleep(100); // 100ms between requests
                    }
                }
            });
        }
        return userGroups;
    }
    /**
     * Execute the load test with all user groups
     */
    async executeLoadTest(userGroups, requestFunction) {
        // Store the request function for use in executeRequest
        this.requestFunction = requestFunction;
        // Execute all user groups concurrently
        await Promise.all(userGroups.map(userGroup => userGroup()));
    }
    /**
     * Execute a single request and record metrics
     */
    async executeRequest() {
        const startTime = perf_hooks_1.performance.now();
        let endTime;
        let success = false;
        let statusCode;
        let error;
        try {
            const response = await this.requestFunction(this.axiosInstance);
            endTime = perf_hooks_1.performance.now();
            success = true;
            statusCode = response.status;
        }
        catch (err) {
            endTime = perf_hooks_1.performance.now();
            success = false;
            statusCode = err.response?.status;
            error = err.message || 'Unknown error';
        }
        const responseTime = endTime - startTime;
        this.results.push({
            startTime,
            endTime,
            responseTime,
            success,
            statusCode,
            error
        });
    }
    /**
     * Calculate test results from metrics
     */
    calculateResults(startTime, endTime, duration) {
        const totalRequests = this.results.length;
        const successfulRequests = this.results.filter(r => r.success).length;
        const failedRequests = totalRequests - successfulRequests;
        const responseTimes = this.results.map(r => r.responseTime).sort((a, b) => a - b);
        const averageResponseTime = responseTimes.reduce((sum, time) => sum + time, 0) / totalRequests;
        const minResponseTime = responseTimes[0] || 0;
        const maxResponseTime = responseTimes[responseTimes.length - 1] || 0;
        const p95ResponseTime = this.percentile(responseTimes, 95);
        const p99ResponseTime = this.percentile(responseTimes, 99);
        const requestsPerSecond = totalRequests / (duration / 1000);
        const errorRate = failedRequests / totalRequests;
        // Calculate error breakdown
        const errorMap = new Map();
        this.results
            .filter(r => !r.success)
            .forEach(r => {
            const errorKey = r.error || `HTTP ${r.statusCode}`;
            errorMap.set(errorKey, (errorMap.get(errorKey) || 0) + 1);
        });
        const errors = Array.from(errorMap.entries()).map(([error, count]) => ({
            error,
            count,
            percentage: (count / totalRequests) * 100
        }));
        return {
            totalRequests,
            successfulRequests,
            failedRequests,
            averageResponseTime,
            minResponseTime,
            maxResponseTime,
            p95ResponseTime,
            p99ResponseTime,
            requestsPerSecond,
            errorRate,
            startTime,
            endTime,
            duration,
            errors
        };
    }
    /**
     * Calculate percentile from sorted array
     */
    percentile(sortedArray, percentile) {
        const index = (percentile / 100) * (sortedArray.length - 1);
        const lower = Math.floor(index);
        const upper = Math.ceil(index);
        const weight = index % 1;
        if (upper >= sortedArray.length) {
            return sortedArray[sortedArray.length - 1];
        }
        return sortedArray[lower] * (1 - weight) + sortedArray[upper] * weight;
    }
    /**
     * Sleep utility function
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    /**
     * Generate a detailed report
     */
    generateReport(result, testName) {
        const report = `
üìä LOAD TEST REPORT: ${testName}
=====================================

üìà SUMMARY
----------
Total Requests: ${result.totalRequests}
Successful: ${result.successfulRequests} (${((result.successfulRequests / result.totalRequests) * 100).toFixed(2)}%)
Failed: ${result.failedRequests} (${(result.errorRate * 100).toFixed(2)}%)
Duration: ${(result.duration / 1000).toFixed(2)}s
Requests/Second: ${result.requestsPerSecond.toFixed(2)}

‚è±Ô∏è  RESPONSE TIMES
------------------
Average: ${result.averageResponseTime.toFixed(2)}ms
Minimum: ${result.minResponseTime.toFixed(2)}ms
Maximum: ${result.maxResponseTime.toFixed(2)}ms
95th Percentile: ${result.p95ResponseTime.toFixed(2)}ms
99th Percentile: ${result.p99ResponseTime.toFixed(2)}ms

‚ùå ERRORS
---------
${result.errors.length > 0 ? result.errors.map(e => `${e.error}: ${e.count} (${e.percentage.toFixed(2)}%)`).join('\n') : 'No errors'}

üéØ PERFORMANCE TARGETS
----------------------
‚úÖ Response Time < 2000ms: ${result.averageResponseTime < 2000 ? 'PASS' : 'FAIL'}
‚úÖ Error Rate < 1%: ${result.errorRate < 0.01 ? 'PASS' : 'FAIL'}
‚úÖ RPS > 10: ${result.requestsPerSecond > 10 ? 'PASS' : 'FAIL'}
`;
        return report;
    }
}
exports.LoadTestRunner = LoadTestRunner;
/**
 * Performance benchmarking utility
 */
class PerformanceBenchmark {
    constructor() {
        this.results = new Map();
    }
    /**
     * Measure execution time of a function
     */
    async measure(name, fn) {
        const startTime = perf_hooks_1.performance.now();
        const result = await fn();
        const endTime = perf_hooks_1.performance.now();
        const duration = endTime - startTime;
        if (!this.results.has(name)) {
            this.results.set(name, []);
        }
        this.results.get(name).push(duration);
        return result;
    }
    /**
     * Get benchmark results
     */
    getResults() {
        const benchmarkResults = new Map();
        for (const [name, times] of this.results.entries()) {
            const sorted = times.sort((a, b) => a - b);
            benchmarkResults.set(name, {
                average: times.reduce((sum, time) => sum + time, 0) / times.length,
                min: sorted[0],
                max: sorted[sorted.length - 1],
                count: times.length
            });
        }
        return benchmarkResults;
    }
    /**
     * Generate benchmark report
     */
    generateReport() {
        const results = this.getResults();
        let report = '\nüèÅ PERFORMANCE BENCHMARK REPORT\n================================\n\n';
        for (const [name, stats] of results.entries()) {
            report += `üìä ${name}\n`;
            report += `   Average: ${stats.average.toFixed(2)}ms\n`;
            report += `   Min: ${stats.min.toFixed(2)}ms\n`;
            report += `   Max: ${stats.max.toFixed(2)}ms\n`;
            report += `   Samples: ${stats.count}\n\n`;
        }
        return report;
    }
}
exports.PerformanceBenchmark = PerformanceBenchmark;
/**
 * Database performance testing utility
 */
class DatabasePerformanceTest {
    constructor(pool) {
        this.pool = pool;
    }
    /**
     * Test query performance
     */
    async testQueryPerformance(query, params = [], iterations = 100) {
        const times = [];
        for (let i = 0; i < iterations; i++) {
            const startTime = perf_hooks_1.performance.now();
            await this.pool.query(query, params);
            const endTime = perf_hooks_1.performance.now();
            times.push(endTime - startTime);
        }
        const sorted = times.sort((a, b) => a - b);
        return {
            averageTime: times.reduce((sum, time) => sum + time, 0) / times.length,
            minTime: sorted[0],
            maxTime: sorted[sorted.length - 1],
            totalTime: times.reduce((sum, time) => sum + time, 0)
        };
    }
    /**
     * Test concurrent query performance
     */
    async testConcurrentQueryPerformance(query, params = [], concurrentQueries = 10, iterations = 10) {
        const times = [];
        for (let i = 0; i < iterations; i++) {
            const startTime = perf_hooks_1.performance.now();
            // Execute concurrent queries
            const promises = Array(concurrentQueries).fill(null).map(() => this.pool.query(query, params));
            await Promise.all(promises);
            const endTime = perf_hooks_1.performance.now();
            times.push(endTime - startTime);
        }
        const sorted = times.sort((a, b) => a - b);
        const averageTime = times.reduce((sum, time) => sum + time, 0) / times.length;
        const totalTime = times.reduce((sum, time) => sum + time, 0);
        const queriesPerSecond = (concurrentQueries * iterations) / (totalTime / 1000);
        return {
            averageTime,
            minTime: sorted[0],
            maxTime: sorted[sorted.length - 1],
            totalTime,
            queriesPerSecond
        };
    }
}
exports.DatabasePerformanceTest = DatabasePerformanceTest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,