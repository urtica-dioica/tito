{"file":"/home/kim/tito/server/tests/performance/loadTestUtils.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/performance/loadTestUtils.ts"],"sourcesContent":["// Mock axios for testing\ninterface AxiosInstance {\n  get: jest.Mock;\n  post: jest.Mock;\n  put: jest.Mock;\n  delete: jest.Mock;\n  patch: jest.Mock;\n  interceptors: {\n    request: { use: jest.Mock };\n    response: { use: jest.Mock };\n  };\n}\n\ninterface AxiosResponse {\n  status: number;\n  data: any;\n}\n\nconst axios = {\n  create: () => ({\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n    patch: jest.fn(),\n    interceptors: {\n      request: { use: jest.fn() },\n      response: { use: jest.fn() }\n    }\n  })\n};\nimport { performance } from 'perf_hooks';\n\nexport interface LoadTestConfig {\n  baseURL: string;\n  concurrentUsers: number;\n  requestsPerUser: number;\n  rampUpTime: number; // milliseconds\n  testDuration: number; // milliseconds\n  timeout: number; // milliseconds\n}\n\nexport interface LoadTestResult {\n  totalRequests: number;\n  successfulRequests: number;\n  failedRequests: number;\n  averageResponseTime: number;\n  minResponseTime: number;\n  maxResponseTime: number;\n  p95ResponseTime: number;\n  p99ResponseTime: number;\n  requestsPerSecond: number;\n  errorRate: number;\n  startTime: number;\n  endTime: number;\n  duration: number;\n  errors: Array<{\n    error: string;\n    count: number;\n    percentage: number;\n  }>;\n}\n\nexport interface RequestMetrics {\n  startTime: number;\n  endTime: number;\n  responseTime: number;\n  success: boolean;\n  statusCode?: number;\n  error?: string;\n}\n\nexport class LoadTestRunner {\n  private axiosInstance: AxiosInstance;\n  private config: LoadTestConfig;\n  private results: RequestMetrics[] = [];\n\n  constructor(config: LoadTestConfig) {\n    this.config = config;\n    this.axiosInstance = (axios as any).create({\n      baseURL: config.baseURL,\n      timeout: config.timeout,\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': 'LoadTestRunner/1.0'\n      }\n    });\n  }\n\n  /**\n   * Run a load test with a specific request function\n   */\n  async runLoadTest(\n    requestFunction: (axios: AxiosInstance) => Promise<AxiosResponse>,\n    testName: string\n  ): Promise<LoadTestResult> {\n    console.log(`🚀 Starting load test: ${testName}`);\n    console.log(`📊 Configuration: ${this.config.concurrentUsers} users, ${this.config.requestsPerUser} requests each`);\n    \n    this.results = [];\n    const startTime = performance.now();\n\n    // Create user groups\n    const userGroups = this.createUserGroups();\n    \n    // Run load test\n    await this.executeLoadTest(userGroups, requestFunction);\n    \n    const endTime = performance.now();\n    const duration = endTime - startTime;\n\n    // Calculate results\n    const result = this.calculateResults(startTime, endTime, duration);\n    \n    console.log(`✅ Load test completed: ${testName}`);\n    console.log(`📈 Results: ${result.successfulRequests}/${result.totalRequests} successful (${(result.errorRate * 100).toFixed(2)}% error rate)`);\n    console.log(`⏱️  Average response time: ${result.averageResponseTime.toFixed(2)}ms`);\n    console.log(`🚀 Requests per second: ${result.requestsPerSecond.toFixed(2)}`);\n    \n    return result;\n  }\n\n  /**\n   * Create user groups for concurrent execution\n   */\n  private createUserGroups(): Array<() => Promise<void>> {\n    const userGroups: Array<() => Promise<void>> = [];\n    \n    for (let i = 0; i < this.config.concurrentUsers; i++) {\n      userGroups.push(async () => {\n        // Ramp up delay\n        const rampUpDelay = (i / this.config.concurrentUsers) * this.config.rampUpTime;\n        if (rampUpDelay > 0) {\n          await this.sleep(rampUpDelay);\n        }\n        \n        // Execute requests for this user\n        for (let j = 0; j < this.config.requestsPerUser; j++) {\n          await this.executeRequest();\n          \n          // Add delay between requests if needed\n          if (j < this.config.requestsPerUser - 1) {\n            await this.sleep(100); // 100ms between requests\n          }\n        }\n      });\n    }\n    \n    return userGroups;\n  }\n\n  /**\n   * Execute the load test with all user groups\n   */\n  private async executeLoadTest(\n    userGroups: Array<() => Promise<void>>,\n    requestFunction: (axios: AxiosInstance) => Promise<AxiosResponse>\n  ): Promise<void> {\n    // Store the request function for use in executeRequest\n    (this as any).requestFunction = requestFunction;\n    \n    // Execute all user groups concurrently\n    await Promise.all(userGroups.map(userGroup => userGroup()));\n  }\n\n  /**\n   * Execute a single request and record metrics\n   */\n  private async executeRequest(): Promise<void> {\n    const startTime = performance.now();\n    let endTime: number;\n    let success = false;\n    let statusCode: number | undefined;\n    let error: string | undefined;\n\n    try {\n      const response = await (this as any).requestFunction(this.axiosInstance);\n      endTime = performance.now();\n      success = true;\n      statusCode = response.status;\n    } catch (err: any) {\n      endTime = performance.now();\n      success = false;\n      statusCode = err.response?.status;\n      error = err.message || 'Unknown error';\n    }\n\n    const responseTime = endTime - startTime;\n\n    this.results.push({\n      startTime,\n      endTime,\n      responseTime,\n      success,\n      statusCode,\n      error\n    });\n  }\n\n  /**\n   * Calculate test results from metrics\n   */\n  private calculateResults(startTime: number, endTime: number, duration: number): LoadTestResult {\n    const totalRequests = this.results.length;\n    const successfulRequests = this.results.filter(r => r.success).length;\n    const failedRequests = totalRequests - successfulRequests;\n    \n    const responseTimes = this.results.map(r => r.responseTime).sort((a, b) => a - b);\n    const averageResponseTime = responseTimes.reduce((sum, time) => sum + time, 0) / totalRequests;\n    const minResponseTime = responseTimes[0] || 0;\n    const maxResponseTime = responseTimes[responseTimes.length - 1] || 0;\n    const p95ResponseTime = this.percentile(responseTimes, 95);\n    const p99ResponseTime = this.percentile(responseTimes, 99);\n    \n    const requestsPerSecond = totalRequests / (duration / 1000);\n    const errorRate = failedRequests / totalRequests;\n    \n    // Calculate error breakdown\n    const errorMap = new Map<string, number>();\n    this.results\n      .filter(r => !r.success)\n      .forEach(r => {\n        const errorKey = r.error || `HTTP ${r.statusCode}`;\n        errorMap.set(errorKey, (errorMap.get(errorKey) || 0) + 1);\n      });\n    \n    const errors = Array.from(errorMap.entries()).map(([error, count]) => ({\n      error,\n      count,\n      percentage: (count / totalRequests) * 100\n    }));\n\n    return {\n      totalRequests,\n      successfulRequests,\n      failedRequests,\n      averageResponseTime,\n      minResponseTime,\n      maxResponseTime,\n      p95ResponseTime,\n      p99ResponseTime,\n      requestsPerSecond,\n      errorRate,\n      startTime,\n      endTime,\n      duration,\n      errors\n    };\n  }\n\n  /**\n   * Calculate percentile from sorted array\n   */\n  private percentile(sortedArray: number[], percentile: number): number {\n    const index = (percentile / 100) * (sortedArray.length - 1);\n    const lower = Math.floor(index);\n    const upper = Math.ceil(index);\n    const weight = index % 1;\n    \n    if (upper >= sortedArray.length) {\n      return sortedArray[sortedArray.length - 1];\n    }\n    \n    return sortedArray[lower] * (1 - weight) + sortedArray[upper] * weight;\n  }\n\n  /**\n   * Sleep utility function\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Generate a detailed report\n   */\n  generateReport(result: LoadTestResult, testName: string): string {\n    const report = `\n📊 LOAD TEST REPORT: ${testName}\n=====================================\n\n📈 SUMMARY\n----------\nTotal Requests: ${result.totalRequests}\nSuccessful: ${result.successfulRequests} (${((result.successfulRequests / result.totalRequests) * 100).toFixed(2)}%)\nFailed: ${result.failedRequests} (${(result.errorRate * 100).toFixed(2)}%)\nDuration: ${(result.duration / 1000).toFixed(2)}s\nRequests/Second: ${result.requestsPerSecond.toFixed(2)}\n\n⏱️  RESPONSE TIMES\n------------------\nAverage: ${result.averageResponseTime.toFixed(2)}ms\nMinimum: ${result.minResponseTime.toFixed(2)}ms\nMaximum: ${result.maxResponseTime.toFixed(2)}ms\n95th Percentile: ${result.p95ResponseTime.toFixed(2)}ms\n99th Percentile: ${result.p99ResponseTime.toFixed(2)}ms\n\n❌ ERRORS\n---------\n${result.errors.length > 0 ? result.errors.map(e => `${e.error}: ${e.count} (${e.percentage.toFixed(2)}%)`).join('\\n') : 'No errors'}\n\n🎯 PERFORMANCE TARGETS\n----------------------\n✅ Response Time < 2000ms: ${result.averageResponseTime < 2000 ? 'PASS' : 'FAIL'}\n✅ Error Rate < 1%: ${result.errorRate < 0.01 ? 'PASS' : 'FAIL'}\n✅ RPS > 10: ${result.requestsPerSecond > 10 ? 'PASS' : 'FAIL'}\n`;\n\n    return report;\n  }\n}\n\n/**\n * Performance benchmarking utility\n */\nexport class PerformanceBenchmark {\n  private results: Map<string, number[]> = new Map();\n\n  /**\n   * Measure execution time of a function\n   */\n  async measure<T>(name: string, fn: () => Promise<T>): Promise<T> {\n    const startTime = performance.now();\n    const result = await fn();\n    const endTime = performance.now();\n    const duration = endTime - startTime;\n\n    if (!this.results.has(name)) {\n      this.results.set(name, []);\n    }\n    this.results.get(name)!.push(duration);\n\n    return result;\n  }\n\n  /**\n   * Get benchmark results\n   */\n  getResults(): Map<string, { average: number; min: number; max: number; count: number }> {\n    const benchmarkResults = new Map();\n    \n    for (const [name, times] of this.results.entries()) {\n      const sorted = times.sort((a, b) => a - b);\n      benchmarkResults.set(name, {\n        average: times.reduce((sum, time) => sum + time, 0) / times.length,\n        min: sorted[0],\n        max: sorted[sorted.length - 1],\n        count: times.length\n      });\n    }\n    \n    return benchmarkResults;\n  }\n\n  /**\n   * Generate benchmark report\n   */\n  generateReport(): string {\n    const results = this.getResults();\n    let report = '\\n🏁 PERFORMANCE BENCHMARK REPORT\\n================================\\n\\n';\n    \n    for (const [name, stats] of results.entries()) {\n      report += `📊 ${name}\\n`;\n      report += `   Average: ${stats.average.toFixed(2)}ms\\n`;\n      report += `   Min: ${stats.min.toFixed(2)}ms\\n`;\n      report += `   Max: ${stats.max.toFixed(2)}ms\\n`;\n      report += `   Samples: ${stats.count}\\n\\n`;\n    }\n    \n    return report;\n  }\n}\n\n/**\n * Database performance testing utility\n */\nexport class DatabasePerformanceTest {\n  private pool: any;\n\n  constructor(pool: any) {\n    this.pool = pool;\n  }\n\n  /**\n   * Test query performance\n   */\n  async testQueryPerformance(query: string, params: any[] = [], iterations: number = 100): Promise<{\n    averageTime: number;\n    minTime: number;\n    maxTime: number;\n    totalTime: number;\n  }> {\n    const times: number[] = [];\n\n    for (let i = 0; i < iterations; i++) {\n      const startTime = performance.now();\n      await this.pool.query(query, params);\n      const endTime = performance.now();\n      times.push(endTime - startTime);\n    }\n\n    const sorted = times.sort((a, b) => a - b);\n    return {\n      averageTime: times.reduce((sum, time) => sum + time, 0) / times.length,\n      minTime: sorted[0],\n      maxTime: sorted[sorted.length - 1],\n      totalTime: times.reduce((sum, time) => sum + time, 0)\n    };\n  }\n\n  /**\n   * Test concurrent query performance\n   */\n  async testConcurrentQueryPerformance(\n    query: string, \n    params: any[] = [], \n    concurrentQueries: number = 10,\n    iterations: number = 10\n  ): Promise<{\n    averageTime: number;\n    minTime: number;\n    maxTime: number;\n    totalTime: number;\n    queriesPerSecond: number;\n  }> {\n    const times: number[] = [];\n\n    for (let i = 0; i < iterations; i++) {\n      const startTime = performance.now();\n      \n      // Execute concurrent queries\n      const promises = Array(concurrentQueries).fill(null).map(() => \n        this.pool.query(query, params)\n      );\n      \n      await Promise.all(promises);\n      const endTime = performance.now();\n      times.push(endTime - startTime);\n    }\n\n    const sorted = times.sort((a, b) => a - b);\n    const averageTime = times.reduce((sum, time) => sum + time, 0) / times.length;\n    const totalTime = times.reduce((sum, time) => sum + time, 0);\n    const queriesPerSecond = (concurrentQueries * iterations) / (totalTime / 1000);\n\n    return {\n      averageTime,\n      minTime: sorted[0],\n      maxTime: sorted[sorted.length - 1],\n      totalTime,\n      queriesPerSecond\n    };\n  }\n}\n"],"version":3}