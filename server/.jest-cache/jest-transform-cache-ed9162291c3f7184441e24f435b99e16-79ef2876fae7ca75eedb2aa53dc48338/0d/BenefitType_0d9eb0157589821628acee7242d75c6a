e52d8831a1ba44d1f27621ea45bbcc8e
"use strict";

/* istanbul ignore next */
function cov_2ibpf5i7ap() {
  var path = "/home/kim/tito/server/src/models/payroll/BenefitType.ts";
  var hash = "c788b19cc45eaea4a658ef29aaf66a10113059d9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/models/payroll/BenefitType.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "6": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 46
        }
      },
      "7": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 14,
          column: 48
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "9": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 20,
          column: 7
        }
      },
      "10": {
        start: {
          line: 21,
          column: 27
        },
        end: {
          line: 26,
          column: 13
        }
      },
      "11": {
        start: {
          line: 27,
          column: 27
        },
        end: {
          line: 27,
          column: 60
        }
      },
      "12": {
        start: {
          line: 28,
          column: 27
        },
        end: {
          line: 28,
          column: 41
        }
      },
      "13": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "14": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 26
        }
      },
      "15": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 98
        }
      },
      "16": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 24
        }
      },
      "17": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 29
        }
      },
      "18": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 48
        }
      },
      "19": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "20": {
        start: {
          line: 46,
          column: 26
        },
        end: {
          line: 46,
          column: 69
        }
      },
      "21": {
        start: {
          line: 47,
          column: 27
        },
        end: {
          line: 47,
          column: 58
        }
      },
      "22": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 42
        }
      },
      "23": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 101
        }
      },
      "24": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 24
        }
      },
      "25": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 29
        }
      },
      "26": {
        start: {
          line: 59,
          column: 23
        },
        end: {
          line: 59,
          column: 48
        }
      },
      "27": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "28": {
        start: {
          line: 61,
          column: 26
        },
        end: {
          line: 61,
          column: 71
        }
      },
      "29": {
        start: {
          line: 62,
          column: 27
        },
        end: {
          line: 62,
          column: 60
        }
      },
      "30": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 42
        }
      },
      "31": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 105
        }
      },
      "32": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 24
        }
      },
      "33": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 29
        }
      },
      "34": {
        start: {
          line: 74,
          column: 23
        },
        end: {
          line: 74,
          column: 48
        }
      },
      "35": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "36": {
        start: {
          line: 76,
          column: 26
        },
        end: {
          line: 80,
          column: 7
        }
      },
      "37": {
        start: {
          line: 81,
          column: 27
        },
        end: {
          line: 81,
          column: 52
        }
      },
      "38": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 31
        }
      },
      "39": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 99
        }
      },
      "40": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 24
        }
      },
      "41": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 29
        }
      },
      "42": {
        start: {
          line: 93,
          column: 23
        },
        end: {
          line: 93,
          column: 48
        }
      },
      "43": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "44": {
        start: {
          line: 95,
          column: 56
        },
        end: {
          line: 95,
          column: 62
        }
      },
      "45": {
        start: {
          line: 96,
          column: 27
        },
        end: {
          line: 96,
          column: 45
        }
      },
      "46": {
        start: {
          line: 97,
          column: 30
        },
        end: {
          line: 97,
          column: 32
        }
      },
      "47": {
        start: {
          line: 98,
          column: 31
        },
        end: {
          line: 98,
          column: 33
        }
      },
      "48": {
        start: {
          line: 99,
          column: 27
        },
        end: {
          line: 99,
          column: 29
        }
      },
      "49": {
        start: {
          line: 100,
          column: 29
        },
        end: {
          line: 100,
          column: 30
        }
      },
      "50": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 104,
          column: 13
        }
      },
      "51": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 64
        }
      },
      "52": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 39
        }
      },
      "53": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "54": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 66
        }
      },
      "55": {
        start: {
          line: 109,
          column: 31
        },
        end: {
          line: 109,
          column: 82
        }
      },
      "56": {
        start: {
          line: 110,
          column: 32
        },
        end: {
          line: 110,
          column: 70
        }
      },
      "57": {
        start: {
          line: 111,
          column: 26
        },
        end: {
          line: 111,
          column: 61
        }
      },
      "58": {
        start: {
          line: 113,
          column: 26
        },
        end: {
          line: 118,
          column: 7
        }
      },
      "59": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 39
        }
      },
      "60": {
        start: {
          line: 120,
          column: 27
        },
        end: {
          line: 120,
          column: 60
        }
      },
      "61": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 124,
          column: 14
        }
      },
      "62": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 100
        }
      },
      "63": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 24
        }
      },
      "64": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 29
        }
      },
      "65": {
        start: {
          line: 135,
          column: 23
        },
        end: {
          line: 135,
          column: 48
        }
      },
      "66": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "67": {
        start: {
          line: 137,
          column: 27
        },
        end: {
          line: 137,
          column: 29
        }
      },
      "68": {
        start: {
          line: 138,
          column: 27
        },
        end: {
          line: 138,
          column: 29
        }
      },
      "69": {
        start: {
          line: 139,
          column: 29
        },
        end: {
          line: 139,
          column: 30
        }
      },
      "70": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 143,
          column: 13
        }
      },
      "71": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 55
        }
      },
      "72": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 142,
          column: 39
        }
      },
      "73": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "74": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 62
        }
      },
      "75": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 46
        }
      },
      "76": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "77": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 57
        }
      },
      "78": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 41
        }
      },
      "79": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 155,
          column: 13
        }
      },
      "80": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 60
        }
      },
      "81": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 154,
          column: 44
        }
      },
      "82": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "83": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 47
        }
      },
      "84": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 58
        }
      },
      "85": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 28
        }
      },
      "86": {
        start: {
          line: 161,
          column: 26
        },
        end: {
          line: 166,
          column: 7
        }
      },
      "87": {
        start: {
          line: 167,
          column: 27
        },
        end: {
          line: 167,
          column: 60
        }
      },
      "88": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "89": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 28
        }
      },
      "90": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 91
        }
      },
      "91": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 34
        }
      },
      "92": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 102
        }
      },
      "93": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 24
        }
      },
      "94": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 29
        }
      },
      "95": {
        start: {
          line: 183,
          column: 23
        },
        end: {
          line: 183,
          column: 48
        }
      },
      "96": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "97": {
        start: {
          line: 186,
          column: 31
        },
        end: {
          line: 186,
          column: 98
        }
      },
      "98": {
        start: {
          line: 187,
          column: 32
        },
        end: {
          line: 187,
          column: 68
        }
      },
      "99": {
        start: {
          line: 188,
          column: 31
        },
        end: {
          line: 188,
          column: 66
        }
      },
      "100": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "101": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 102
        }
      },
      "102": {
        start: {
          line: 192,
          column: 26
        },
        end: {
          line: 192,
          column: 67
        }
      },
      "103": {
        start: {
          line: 193,
          column: 27
        },
        end: {
          line: 193,
          column: 58
        }
      },
      "104": {
        start: {
          line: 194,
          column: 28
        },
        end: {
          line: 194,
          column: 54
        }
      },
      "105": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "106": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 80
        }
      },
      "107": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 27
        }
      },
      "108": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 96
        }
      },
      "109": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 24
        }
      },
      "110": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 29
        }
      },
      "111": {
        start: {
          line: 209,
          column: 23
        },
        end: {
          line: 209,
          column: 48
        }
      },
      "112": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 221,
          column: 9
        }
      },
      "113": {
        start: {
          line: 211,
          column: 26
        },
        end: {
          line: 211,
          column: 62
        }
      },
      "114": {
        start: {
          line: 212,
          column: 27
        },
        end: {
          line: 212,
          column: 52
        }
      },
      "115": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 50
        }
      },
      "116": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 93
        }
      },
      "117": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 24
        }
      },
      "118": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 29
        }
      },
      "119": {
        start: {
          line: 224,
          column: 0
        },
        end: {
          line: 224,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 23
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 13
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 23
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 43
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 27
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 58
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 23
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 73
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 31
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 92
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 27
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 134
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 21
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 182
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 18
          },
          end: {
            line: 222,
            column: 5
          }
        },
        line: 208
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 23,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 23,
            column: 32
          }
        }, {
          start: {
            line: 23,
            column: 36
          },
          end: {
            line: 23,
            column: 40
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 25,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 25,
            column: 30
          }
        }, {
          start: {
            line: 25,
            column: 34
          },
          end: {
            line: 25,
            column: 38
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 48,
            column: 19
          },
          end: {
            line: 48,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 19
          },
          end: {
            line: 48,
            column: 33
          }
        }, {
          start: {
            line: 48,
            column: 37
          },
          end: {
            line: 48,
            column: 41
          }
        }],
        line: 48
      },
      "6": {
        loc: {
          start: {
            line: 63,
            column: 19
          },
          end: {
            line: 63,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 19
          },
          end: {
            line: 63,
            column: 33
          }
        }, {
          start: {
            line: 63,
            column: 37
          },
          end: {
            line: 63,
            column: 41
          }
        }],
        line: 63
      },
      "7": {
        loc: {
          start: {
            line: 92,
            column: 18
          },
          end: {
            line: 92,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 92,
            column: 27
          },
          end: {
            line: 92,
            column: 29
          }
        }],
        line: 92
      },
      "8": {
        loc: {
          start: {
            line: 95,
            column: 20
          },
          end: {
            line: 95,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 95,
            column: 27
          },
          end: {
            line: 95,
            column: 28
          }
        }],
        line: 95
      },
      "9": {
        loc: {
          start: {
            line: 95,
            column: 30
          },
          end: {
            line: 95,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 95,
            column: 38
          },
          end: {
            line: 95,
            column: 40
          }
        }],
        line: 95
      },
      "10": {
        loc: {
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "11": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "12": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "13": {
        loc: {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "14": {
        loc: {
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "15": {
        loc: {
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 155,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 155,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "16": {
        loc: {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "17": {
        loc: {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "18": {
        loc: {
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "19": {
        loc: {
          start: {
            line: 194,
            column: 29
          },
          end: {
            line: 194,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 194,
            column: 29
          },
          end: {
            line: 194,
            column: 44
          }
        }, {
          start: {
            line: 194,
            column: 48
          },
          end: {
            line: 194,
            column: 49
          }
        }],
        line: 194
      },
      "20": {
        loc: {
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/models/payroll/BenefitType.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/models/payroll/BenefitType.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface BenefitType {\n  id: string;\n  name: string;\n  description?: string;\n  amount: number;\n  is_active: boolean;\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface CreateBenefitTypeData {\n  name: string;\n  description?: string;\n  amount: number;\n  is_active?: boolean;\n}\n\nexport interface UpdateBenefitTypeData {\n  name?: string;\n  description?: string;\n  amount?: number;\n  is_active?: boolean;\n}\n\nexport interface BenefitTypeListParams {\n  is_active?: boolean;\n  page?: number;\n  limit?: number;\n}\n\nclass BenefitTypeModel {\n  private pool = getPool();\n\n  async create(data: CreateBenefitTypeData): Promise<BenefitType> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        INSERT INTO benefit_types (name, description, amount, is_active)\n        VALUES ($1, $2, $3, $4)\n        RETURNING *\n      `;\n      const values = [\n        data.name,\n        data.description || null,\n        data.amount,\n        data.is_active ?? true\n      ];\n      \n      const result = await client.query(query, values);\n      const record = result.rows[0];\n      \n      logger.info('Benefit type created', { \n        recordId: record.id, \n        name: record.name\n      });\n      return record;\n    } catch (error) {\n      logger.error('Error creating benefit type', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findById(id: string): Promise<BenefitType | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT * FROM benefit_types WHERE id = $1';\n      const result = await client.query(query, [id]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding benefit type by ID', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findByName(name: string): Promise<BenefitType | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT * FROM benefit_types WHERE name = $1';\n      const result = await client.query(query, [name]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding benefit type by name', { error: (error as Error).message, name });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findActive(): Promise<BenefitType[]> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT * FROM benefit_types \n        WHERE is_active = true \n        ORDER BY name ASC\n      `;\n      const result = await client.query(query);\n      return result.rows;\n    } catch (error) {\n      logger.error('Error finding active benefit types', { error: (error as Error).message });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findAll(params: BenefitTypeListParams = {}): Promise<{ records: BenefitType[]; total: number }> {\n    const client = await this.pool.connect();\n    try {\n      const { page = 1, limit = 10, is_active } = params;\n      const offset = (page - 1) * limit;\n      \n      let whereClause = '';\n      const conditions: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (is_active !== undefined) {\n        conditions.push(`is_active = $${paramIndex++}`);\n        values.push(is_active);\n      }\n\n      if (conditions.length > 0) {\n        whereClause = `WHERE ${conditions.join(' AND ')}`;\n      }\n\n      // Get total count\n      const countQuery = `SELECT COUNT(*) FROM benefit_types ${whereClause}`;\n      const countResult = await client.query(countQuery, values);\n      const total = parseInt(countResult.rows[0].count);\n\n      // Get records\n      const query = `\n        SELECT * FROM benefit_types \n        ${whereClause}\n        ORDER BY name ASC\n        LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n      `;\n      values.push(limit, offset);\n      \n      const result = await client.query(query, values);\n      \n      return {\n        records: result.rows,\n        total\n      };\n    } catch (error) {\n      logger.error('Error finding benefit types', { error: (error as Error).message, params });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async update(id: string, data: UpdateBenefitTypeData): Promise<BenefitType | null> {\n    const client = await this.pool.connect();\n    try {\n      const fields: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (data.name !== undefined) {\n        fields.push(`name = $${paramIndex++}`);\n        values.push(data.name);\n      }\n\n      if (data.description !== undefined) {\n        fields.push(`description = $${paramIndex++}`);\n        values.push(data.description);\n      }\n\n      if (data.amount !== undefined) {\n        fields.push(`amount = $${paramIndex++}`);\n        values.push(data.amount);\n      }\n\n      if (data.is_active !== undefined) {\n        fields.push(`is_active = $${paramIndex++}`);\n        values.push(data.is_active);\n      }\n\n      if (fields.length === 0) {\n        return await this.findById(id);\n      }\n\n      fields.push(`updated_at = CURRENT_TIMESTAMP`);\n      values.push(id);\n\n      const query = `\n        UPDATE benefit_types \n        SET ${fields.join(', ')}\n        WHERE id = $${paramIndex}\n        RETURNING *\n      `;\n\n      const result = await client.query(query, values);\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      logger.info('Benefit type updated', { recordId: id, updates: data });\n      return result.rows[0];\n    } catch (error) {\n      logger.error('Error updating benefit type', { error: (error as Error).message, id, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async delete(id: string): Promise<boolean> {\n    const client = await this.pool.connect();\n    try {\n      // Check if benefit type is being used by any employee benefits\n      const checkQuery = 'SELECT COUNT(*) FROM employee_benefits WHERE benefit_type_id = $1';\n      const checkResult = await client.query(checkQuery, [id]);\n      const usageCount = parseInt(checkResult.rows[0].count);\n\n      if (usageCount > 0) {\n        throw new Error('Cannot delete benefit type that is being used by employee benefits');\n      }\n\n      const query = 'DELETE FROM benefit_types WHERE id = $1';\n      const result = await client.query(query, [id]);\n      \n      const deleted = (result.rowCount || 0) > 0;\n      if (deleted) {\n        logger.info('Benefit type deleted', { recordId: id });\n      }\n      \n      return deleted;\n    } catch (error) {\n      logger.error('Error deleting benefit type', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async count(): Promise<number> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT COUNT(*) FROM benefit_types';\n      const result = await client.query(query);\n      return parseInt(result.rows[0].count);\n    } catch (error) {\n      logger.error('Error counting benefit types', { error: (error as Error).message });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n}\n\nexport const benefitTypeModel = new BenefitTypeModel();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c788b19cc45eaea4a658ef29aaf66a10113059d9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ibpf5i7ap = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ibpf5i7ap();
var __importDefault =
/* istanbul ignore next */
(cov_2ibpf5i7ap().s[0]++,
/* istanbul ignore next */
(cov_2ibpf5i7ap().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2ibpf5i7ap().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2ibpf5i7ap().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2ibpf5i7ap().f[0]++;
  cov_2ibpf5i7ap().s[1]++;
  return /* istanbul ignore next */(cov_2ibpf5i7ap().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2ibpf5i7ap().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2ibpf5i7ap().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2ibpf5i7ap().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2ibpf5i7ap().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2ibpf5i7ap().s[3]++;
exports.benefitTypeModel = void 0;
const database_1 =
/* istanbul ignore next */
(cov_2ibpf5i7ap().s[4]++, require("../../config/database"));
const logger_1 =
/* istanbul ignore next */
(cov_2ibpf5i7ap().s[5]++, __importDefault(require("../../utils/logger")));
class BenefitTypeModel {
  constructor() {
    /* istanbul ignore next */
    cov_2ibpf5i7ap().f[1]++;
    cov_2ibpf5i7ap().s[6]++;
    this.pool = (0, database_1.getPool)();
  }
  async create(data) {
    /* istanbul ignore next */
    cov_2ibpf5i7ap().f[2]++;
    const client =
    /* istanbul ignore next */
    (cov_2ibpf5i7ap().s[7]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2ibpf5i7ap().s[8]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[9]++, `
        INSERT INTO benefit_types (name, description, amount, is_active)
        VALUES ($1, $2, $3, $4)
        RETURNING *
      `);
      const values =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[10]++, [data.name,
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().b[3][0]++, data.description) ||
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().b[3][1]++, null), data.amount,
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().b[4][0]++, data.is_active) ??
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().b[4][1]++, true)]);
      const result =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[11]++, await client.query(query, values));
      const record =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[12]++, result.rows[0]);
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[13]++;
      logger_1.default.info('Benefit type created', {
        recordId: record.id,
        name: record.name
      });
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[14]++;
      return record;
    } catch (error) {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[15]++;
      logger_1.default.error('Error creating benefit type', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[16]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[17]++;
      client.release();
    }
  }
  async findById(id) {
    /* istanbul ignore next */
    cov_2ibpf5i7ap().f[3]++;
    const client =
    /* istanbul ignore next */
    (cov_2ibpf5i7ap().s[18]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2ibpf5i7ap().s[19]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[20]++, 'SELECT * FROM benefit_types WHERE id = $1');
      const result =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[21]++, await client.query(query, [id]));
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[22]++;
      return /* istanbul ignore next */(cov_2ibpf5i7ap().b[5][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().b[5][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[23]++;
      logger_1.default.error('Error finding benefit type by ID', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[24]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[25]++;
      client.release();
    }
  }
  async findByName(name) {
    /* istanbul ignore next */
    cov_2ibpf5i7ap().f[4]++;
    const client =
    /* istanbul ignore next */
    (cov_2ibpf5i7ap().s[26]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2ibpf5i7ap().s[27]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[28]++, 'SELECT * FROM benefit_types WHERE name = $1');
      const result =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[29]++, await client.query(query, [name]));
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[30]++;
      return /* istanbul ignore next */(cov_2ibpf5i7ap().b[6][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().b[6][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[31]++;
      logger_1.default.error('Error finding benefit type by name', {
        error: error.message,
        name
      });
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[32]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[33]++;
      client.release();
    }
  }
  async findActive() {
    /* istanbul ignore next */
    cov_2ibpf5i7ap().f[5]++;
    const client =
    /* istanbul ignore next */
    (cov_2ibpf5i7ap().s[34]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2ibpf5i7ap().s[35]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[36]++, `
        SELECT * FROM benefit_types 
        WHERE is_active = true 
        ORDER BY name ASC
      `);
      const result =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[37]++, await client.query(query));
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[38]++;
      return result.rows;
    } catch (error) {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[39]++;
      logger_1.default.error('Error finding active benefit types', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[40]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[41]++;
      client.release();
    }
  }
  async findAll(params =
  /* istanbul ignore next */
  (cov_2ibpf5i7ap().b[7][0]++, {})) {
    /* istanbul ignore next */
    cov_2ibpf5i7ap().f[6]++;
    const client =
    /* istanbul ignore next */
    (cov_2ibpf5i7ap().s[42]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2ibpf5i7ap().s[43]++;
    try {
      const {
        page =
        /* istanbul ignore next */
        (cov_2ibpf5i7ap().b[8][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_2ibpf5i7ap().b[9][0]++, 10),
        is_active
      } =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[44]++, params);
      const offset =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[45]++, (page - 1) * limit);
      let whereClause =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[46]++, '');
      const conditions =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[47]++, []);
      const values =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[48]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[49]++, 1);
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[50]++;
      if (is_active !== undefined) {
        /* istanbul ignore next */
        cov_2ibpf5i7ap().b[10][0]++;
        cov_2ibpf5i7ap().s[51]++;
        conditions.push(`is_active = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_2ibpf5i7ap().s[52]++;
        values.push(is_active);
      } else
      /* istanbul ignore next */
      {
        cov_2ibpf5i7ap().b[10][1]++;
      }
      cov_2ibpf5i7ap().s[53]++;
      if (conditions.length > 0) {
        /* istanbul ignore next */
        cov_2ibpf5i7ap().b[11][0]++;
        cov_2ibpf5i7ap().s[54]++;
        whereClause = `WHERE ${conditions.join(' AND ')}`;
      } else
      /* istanbul ignore next */
      {
        cov_2ibpf5i7ap().b[11][1]++;
      }
      // Get total count
      const countQuery =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[55]++, `SELECT COUNT(*) FROM benefit_types ${whereClause}`);
      const countResult =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[56]++, await client.query(countQuery, values));
      const total =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[57]++, parseInt(countResult.rows[0].count));
      // Get records
      const query =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[58]++, `
        SELECT * FROM benefit_types 
        ${whereClause}
        ORDER BY name ASC
        LIMIT $${paramIndex++} OFFSET $${paramIndex++}
      `);
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[59]++;
      values.push(limit, offset);
      const result =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[60]++, await client.query(query, values));
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[61]++;
      return {
        records: result.rows,
        total
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[62]++;
      logger_1.default.error('Error finding benefit types', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[63]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[64]++;
      client.release();
    }
  }
  async update(id, data) {
    /* istanbul ignore next */
    cov_2ibpf5i7ap().f[7]++;
    const client =
    /* istanbul ignore next */
    (cov_2ibpf5i7ap().s[65]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2ibpf5i7ap().s[66]++;
    try {
      const fields =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[67]++, []);
      const values =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[68]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[69]++, 1);
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[70]++;
      if (data.name !== undefined) {
        /* istanbul ignore next */
        cov_2ibpf5i7ap().b[12][0]++;
        cov_2ibpf5i7ap().s[71]++;
        fields.push(`name = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_2ibpf5i7ap().s[72]++;
        values.push(data.name);
      } else
      /* istanbul ignore next */
      {
        cov_2ibpf5i7ap().b[12][1]++;
      }
      cov_2ibpf5i7ap().s[73]++;
      if (data.description !== undefined) {
        /* istanbul ignore next */
        cov_2ibpf5i7ap().b[13][0]++;
        cov_2ibpf5i7ap().s[74]++;
        fields.push(`description = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_2ibpf5i7ap().s[75]++;
        values.push(data.description);
      } else
      /* istanbul ignore next */
      {
        cov_2ibpf5i7ap().b[13][1]++;
      }
      cov_2ibpf5i7ap().s[76]++;
      if (data.amount !== undefined) {
        /* istanbul ignore next */
        cov_2ibpf5i7ap().b[14][0]++;
        cov_2ibpf5i7ap().s[77]++;
        fields.push(`amount = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_2ibpf5i7ap().s[78]++;
        values.push(data.amount);
      } else
      /* istanbul ignore next */
      {
        cov_2ibpf5i7ap().b[14][1]++;
      }
      cov_2ibpf5i7ap().s[79]++;
      if (data.is_active !== undefined) {
        /* istanbul ignore next */
        cov_2ibpf5i7ap().b[15][0]++;
        cov_2ibpf5i7ap().s[80]++;
        fields.push(`is_active = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_2ibpf5i7ap().s[81]++;
        values.push(data.is_active);
      } else
      /* istanbul ignore next */
      {
        cov_2ibpf5i7ap().b[15][1]++;
      }
      cov_2ibpf5i7ap().s[82]++;
      if (fields.length === 0) {
        /* istanbul ignore next */
        cov_2ibpf5i7ap().b[16][0]++;
        cov_2ibpf5i7ap().s[83]++;
        return await this.findById(id);
      } else
      /* istanbul ignore next */
      {
        cov_2ibpf5i7ap().b[16][1]++;
      }
      cov_2ibpf5i7ap().s[84]++;
      fields.push(`updated_at = CURRENT_TIMESTAMP`);
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[85]++;
      values.push(id);
      const query =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[86]++, `
        UPDATE benefit_types 
        SET ${fields.join(', ')}
        WHERE id = $${paramIndex}
        RETURNING *
      `);
      const result =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[87]++, await client.query(query, values));
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[88]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_2ibpf5i7ap().b[17][0]++;
        cov_2ibpf5i7ap().s[89]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2ibpf5i7ap().b[17][1]++;
      }
      cov_2ibpf5i7ap().s[90]++;
      logger_1.default.info('Benefit type updated', {
        recordId: id,
        updates: data
      });
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[91]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[92]++;
      logger_1.default.error('Error updating benefit type', {
        error: error.message,
        id,
        data
      });
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[93]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[94]++;
      client.release();
    }
  }
  async delete(id) {
    /* istanbul ignore next */
    cov_2ibpf5i7ap().f[8]++;
    const client =
    /* istanbul ignore next */
    (cov_2ibpf5i7ap().s[95]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2ibpf5i7ap().s[96]++;
    try {
      // Check if benefit type is being used by any employee benefits
      const checkQuery =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[97]++, 'SELECT COUNT(*) FROM employee_benefits WHERE benefit_type_id = $1');
      const checkResult =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[98]++, await client.query(checkQuery, [id]));
      const usageCount =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[99]++, parseInt(checkResult.rows[0].count));
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[100]++;
      if (usageCount > 0) {
        /* istanbul ignore next */
        cov_2ibpf5i7ap().b[18][0]++;
        cov_2ibpf5i7ap().s[101]++;
        throw new Error('Cannot delete benefit type that is being used by employee benefits');
      } else
      /* istanbul ignore next */
      {
        cov_2ibpf5i7ap().b[18][1]++;
      }
      const query =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[102]++, 'DELETE FROM benefit_types WHERE id = $1');
      const result =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[103]++, await client.query(query, [id]));
      const deleted =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[104]++, (
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().b[19][0]++, result.rowCount) ||
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().b[19][1]++, 0)) > 0);
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[105]++;
      if (deleted) {
        /* istanbul ignore next */
        cov_2ibpf5i7ap().b[20][0]++;
        cov_2ibpf5i7ap().s[106]++;
        logger_1.default.info('Benefit type deleted', {
          recordId: id
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ibpf5i7ap().b[20][1]++;
      }
      cov_2ibpf5i7ap().s[107]++;
      return deleted;
    } catch (error) {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[108]++;
      logger_1.default.error('Error deleting benefit type', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[109]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[110]++;
      client.release();
    }
  }
  async count() {
    /* istanbul ignore next */
    cov_2ibpf5i7ap().f[9]++;
    const client =
    /* istanbul ignore next */
    (cov_2ibpf5i7ap().s[111]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2ibpf5i7ap().s[112]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[113]++, 'SELECT COUNT(*) FROM benefit_types');
      const result =
      /* istanbul ignore next */
      (cov_2ibpf5i7ap().s[114]++, await client.query(query));
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[115]++;
      return parseInt(result.rows[0].count);
    } catch (error) {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[116]++;
      logger_1.default.error('Error counting benefit types', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[117]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2ibpf5i7ap().s[118]++;
      client.release();
    }
  }
}
/* istanbul ignore next */
cov_2ibpf5i7ap().s[119]++;
exports.benefitTypeModel = new BenefitTypeModel();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,