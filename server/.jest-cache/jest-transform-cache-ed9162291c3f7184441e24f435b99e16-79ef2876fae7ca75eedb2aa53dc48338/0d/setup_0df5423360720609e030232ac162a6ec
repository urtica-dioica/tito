3fb22591ba74c1bc1c4e9e830c563e7a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.testRedisClient = exports.testDbPool = void 0;
exports.initializeTestConnections = initializeTestConnections;
exports.setupTestDatabase = setupTestDatabase;
exports.setupTestRedis = setupTestRedis;
exports.cleanupTestDatabase = cleanupTestDatabase;
exports.cleanupTestRedis = cleanupTestRedis;
// Test environment setup
process.env.NODE_ENV = 'test';
process.env.DATABASE_URL = process.env.TEST_DATABASE_URL || 'postgresql://postgres:password@localhost:5432/tito_hr_test';
process.env.REDIS_URL = process.env.TEST_REDIS_URL || 'redis://localhost:6379/1';
process.env.JWT_SECRET = 'test-jwt-secret-key';
process.env.JWT_REFRESH_SECRET = 'test-refresh-secret-key';
process.env.JWT_EXPIRES_IN = '15m';
process.env.JWT_REFRESH_EXPIRES_IN = '7d';
process.env.PORT = '3001';
// Mock Redis service for tests
const mockRedisService_1 = require("./utils/mockRedisService");
// Global test database connection (only for tests that need it)
let testDbPool = null;
exports.testDbPool = testDbPool;
let testRedisClient = null;
exports.testRedisClient = testRedisClient;
// Initialize connections for integration tests
async function initializeTestConnections() {
    if (!testDbPool) {
        exports.testDbPool = testDbPool = await setupTestDatabase();
    }
    if (!testRedisClient) {
        exports.testRedisClient = testRedisClient = await setupTestRedis();
    }
    return { testDbPool, testRedisClient };
}
// Only setup database connections for tests that actually need them
async function setupTestDatabase() {
    if (testDbPool)
        return testDbPool;
    const { Pool } = await Promise.resolve().then(() => __importStar(require('pg')));
    exports.testDbPool = testDbPool = new Pool({
        connectionString: process.env.DATABASE_URL,
        max: 5,
        idleTimeoutMillis: 30000,
        connectionTimeoutMillis: 2000,
    });
    return testDbPool;
}
async function setupTestRedis() {
    if (testRedisClient)
        return testRedisClient;
    // Use mock Redis service for tests
    exports.testRedisClient = testRedisClient = mockRedisService_1.mockRedisService;
    await testRedisClient.connect();
    return testRedisClient;
}
async function cleanupTestDatabase() {
    if (!testDbPool)
        return;
    try {
        const client = await testDbPool.connect();
        try {
            // Disable foreign key checks temporarily
            await client.query('SET session_replication_role = replica;');
            // Clean all tables in reverse dependency order
            const tables = [
                'payroll_approvals',
                'payroll_deductions',
                'payroll_records',
                'payroll_periods',
                'deduction_types',
                'leave_balances',
                'leaves',
                'overtime_requests',
                'time_correction_requests',
                'attendance_sessions',
                'attendance_records',
                'id_cards',
                'system_settings',
                'employees',
                'departments',
                'users'
            ];
            for (const table of tables) {
                await client.query(`DELETE FROM ${table}`);
            }
            // Reset sequences
            await client.query('ALTER SEQUENCE users_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE departments_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE employees_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE attendance_records_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE attendance_sessions_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE time_correction_requests_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE overtime_requests_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE leaves_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE leave_balances_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE payroll_periods_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE payroll_records_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE payroll_deductions_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE deduction_types_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE payroll_approvals_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE system_settings_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE id_cards_id_seq RESTART WITH 1');
            // Re-enable foreign key checks
            await client.query('SET session_replication_role = DEFAULT;');
        }
        finally {
            client.release();
        }
    }
    catch (error) {
        console.warn('Database cleanup failed (this is expected if database is not available):', error.message);
    }
}
async function cleanupTestRedis() {
    if (!testRedisClient)
        return;
    try {
        await testRedisClient.flushDb();
    }
    catch (error) {
        console.warn('Redis cleanup failed:', error.message);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LHdEQUF3RCxDQUFDLENBQUM7WUFDN0UsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLHNEQUFzRCxDQUFDLENBQUM7WUFDM0UsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7WUFFcEUsK0JBQStCO1lBQy9CLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1FBQ2hFLENBQUM7Z0JBQVMsQ0FBQztZQUNULE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQixDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLDBFQUEwRSxFQUFHLEtBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNySCxDQUFDO0FBQ0gsQ0FBQztBQUVNLEtBQUssVUFBVSxnQkFBZ0I7SUFDcEMsSUFBSSxDQUFDLGVBQWU7UUFBRSxPQUFPO0lBRTdCLElBQUksQ0FBQztRQUNILE1BQU0sZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRyxLQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEUsQ0FBQztBQUNILENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUva2ltL3RpdG8vc2VydmVyL3Rlc3RzL3NldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRlc3QgZW52aXJvbm1lbnQgc2V0dXBcbnByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xucHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMID0gcHJvY2Vzcy5lbnYuVEVTVF9EQVRBQkFTRV9VUkwgfHwgJ3Bvc3RncmVzcWw6Ly9wb3N0Z3JlczpwYXNzd29yZEBsb2NhbGhvc3Q6NTQzMi90aXRvX2hyX3Rlc3QnO1xucHJvY2Vzcy5lbnYuUkVESVNfVVJMID0gcHJvY2Vzcy5lbnYuVEVTVF9SRURJU19VUkwgfHwgJ3JlZGlzOi8vbG9jYWxob3N0OjYzNzkvMSc7XG5wcm9jZXNzLmVudi5KV1RfU0VDUkVUID0gJ3Rlc3Qtand0LXNlY3JldC1rZXknO1xucHJvY2Vzcy5lbnYuSldUX1JFRlJFU0hfU0VDUkVUID0gJ3Rlc3QtcmVmcmVzaC1zZWNyZXQta2V5JztcbnByb2Nlc3MuZW52LkpXVF9FWFBJUkVTX0lOID0gJzE1bSc7XG5wcm9jZXNzLmVudi5KV1RfUkVGUkVTSF9FWFBJUkVTX0lOID0gJzdkJztcbnByb2Nlc3MuZW52LlBPUlQgPSAnMzAwMSc7XG5cbi8vIE1vY2sgUmVkaXMgc2VydmljZSBmb3IgdGVzdHNcbmltcG9ydCB7IG1vY2tSZWRpc1NlcnZpY2UgfSBmcm9tICcuL3V0aWxzL21vY2tSZWRpc1NlcnZpY2UnO1xuXG4vLyBHbG9iYWwgdGVzdCBkYXRhYmFzZSBjb25uZWN0aW9uIChvbmx5IGZvciB0ZXN0cyB0aGF0IG5lZWQgaXQpXG5sZXQgdGVzdERiUG9vbDogYW55ID0gbnVsbDtcbmxldCB0ZXN0UmVkaXNDbGllbnQ6IGFueSA9IG51bGw7XG5cbi8vIEluaXRpYWxpemUgY29ubmVjdGlvbnMgZm9yIGludGVncmF0aW9uIHRlc3RzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZVRlc3RDb25uZWN0aW9ucygpIHtcbiAgaWYgKCF0ZXN0RGJQb29sKSB7XG4gICAgdGVzdERiUG9vbCA9IGF3YWl0IHNldHVwVGVzdERhdGFiYXNlKCk7XG4gIH1cbiAgaWYgKCF0ZXN0UmVkaXNDbGllbnQpIHtcbiAgICB0ZXN0UmVkaXNDbGllbnQgPSBhd2FpdCBzZXR1cFRlc3RSZWRpcygpO1xuICB9XG4gIHJldHVybiB7IHRlc3REYlBvb2wsIHRlc3RSZWRpc0NsaWVudCB9O1xufVxuXG4vLyBPbmx5IHNldHVwIGRhdGFiYXNlIGNvbm5lY3Rpb25zIGZvciB0ZXN0cyB0aGF0IGFjdHVhbGx5IG5lZWQgdGhlbVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldHVwVGVzdERhdGFiYXNlKCkge1xuICBpZiAodGVzdERiUG9vbCkgcmV0dXJuIHRlc3REYlBvb2w7XG4gIFxuICBjb25zdCB7IFBvb2wgfSA9IGF3YWl0IGltcG9ydCgncGcnKTtcbiAgdGVzdERiUG9vbCA9IG5ldyBQb29sKHtcbiAgICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwsXG4gICAgbWF4OiA1LFxuICAgIGlkbGVUaW1lb3V0TWlsbGlzOiAzMDAwMCxcbiAgICBjb25uZWN0aW9uVGltZW91dE1pbGxpczogMjAwMCxcbiAgfSk7XG4gIFxuICByZXR1cm4gdGVzdERiUG9vbDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldHVwVGVzdFJlZGlzKCkge1xuICBpZiAodGVzdFJlZGlzQ2xpZW50KSByZXR1cm4gdGVzdFJlZGlzQ2xpZW50O1xuICBcbiAgLy8gVXNlIG1vY2sgUmVkaXMgc2VydmljZSBmb3IgdGVzdHNcbiAgdGVzdFJlZGlzQ2xpZW50ID0gbW9ja1JlZGlzU2VydmljZTtcbiAgYXdhaXQgdGVzdFJlZGlzQ2xpZW50LmNvbm5lY3QoKTtcbiAgcmV0dXJuIHRlc3RSZWRpc0NsaWVudDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsZWFudXBUZXN0RGF0YWJhc2UoKSB7XG4gIGlmICghdGVzdERiUG9vbCkgcmV0dXJuO1xuICBcbiAgdHJ5IHtcbiAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0ZXN0RGJQb29sLmNvbm5lY3QoKTtcbiAgICB0cnkge1xuICAgICAgLy8gRGlzYWJsZSBmb3JlaWduIGtleSBjaGVja3MgdGVtcG9yYXJpbHlcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnU0VUIHNlc3Npb25fcmVwbGljYXRpb25fcm9sZSA9IHJlcGxpY2E7Jyk7XG4gICAgICBcbiAgICAgIC8vIENsZWFuIGFsbCB0YWJsZXMgaW4gcmV2ZXJzZSBkZXBlbmRlbmN5IG9yZGVyXG4gICAgICBjb25zdCB0YWJsZXMgPSBbXG4gICAgICAgICdwYXlyb2xsX2FwcHJvdmFscycsXG4gICAgICAgICdwYXlyb2xsX2RlZHVjdGlvbnMnLCBcbiAgICAgICAgJ3BheXJvbGxfcmVjb3JkcycsXG4gICAgICAgICdwYXlyb2xsX3BlcmlvZHMnLFxuICAgICAgICAnZGVkdWN0aW9uX3R5cGVzJyxcbiAgICAgICAgJ2xlYXZlX2JhbGFuY2VzJyxcbiAgICAgICAgJ2xlYXZlcycsXG4gICAgICAgICdvdmVydGltZV9yZXF1ZXN0cycsXG4gICAgICAgICd0aW1lX2NvcnJlY3Rpb25fcmVxdWVzdHMnLFxuICAgICAgICAnYXR0ZW5kYW5jZV9zZXNzaW9ucycsXG4gICAgICAgICdhdHRlbmRhbmNlX3JlY29yZHMnLFxuICAgICAgICAnaWRfY2FyZHMnLFxuICAgICAgICAnc3lzdGVtX3NldHRpbmdzJyxcbiAgICAgICAgJ2VtcGxveWVlcycsXG4gICAgICAgICdkZXBhcnRtZW50cycsXG4gICAgICAgICd1c2VycydcbiAgICAgIF07XG5cbiAgICAgIGZvciAoY29uc3QgdGFibGUgb2YgdGFibGVzKSB7XG4gICAgICAgIGF3YWl0IGNsaWVudC5xdWVyeShgREVMRVRFIEZST00gJHt0YWJsZX1gKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVzZXQgc2VxdWVuY2VzXG4gICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0FMVEVSIFNFUVVFTkNFIHVzZXJzX2lkX3NlcSBSRVNUQVJUIFdJVEggMScpO1xuICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdBTFRFUiBTRVFVRU5DRSBkZXBhcnRtZW50c19pZF9zZXEgUkVTVEFSVCBXSVRIIDEnKTtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQUxURVIgU0VRVUVOQ0UgZW1wbG95ZWVzX2lkX3NlcSBSRVNUQVJUIFdJVEggMScpO1xuICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdBTFRFUiBTRVFVRU5DRSBhdHRlbmRhbmNlX3JlY29yZHNfaWRfc2VxIFJFU1RBUlQgV0lUSCAxJyk7XG4gICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0FMVEVSIFNFUVVFTkNFIGF0dGVuZGFuY2Vfc2Vzc2lvbnNfaWRfc2VxIFJFU1RBUlQgV0lUSCAxJyk7XG4gICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0FMVEVSIFNFUVVFTkNFIHRpbWVfY29ycmVjdGlvbl9yZXF1ZXN0c19pZF9zZXEgUkVTVEFSVCBXSVRIIDEnKTtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQUxURVIgU0VRVUVOQ0Ugb3ZlcnRpbWVfcmVxdWVzdHNfaWRfc2VxIFJFU1RBUlQgV0lUSCAxJyk7XG4gICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0FMVEVSIFNFUVVFTkNFIGxlYXZlc19pZF9zZXEgUkVTVEFSVCBXSVRIIDEnKTtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQUxURVIgU0VRVUVOQ0UgbGVhdmVfYmFsYW5jZXNfaWRfc2VxIFJFU1RBUlQgV0lUSCAxJyk7XG4gICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0FMVEVSIFNFUVVFTkNFIHBheXJvbGxfcGVyaW9kc19pZF9zZXEgUkVTVEFSVCBXSVRIIDEnKTtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQUxURVIgU0VRVUVOQ0UgcGF5cm9sbF9yZWNvcmRzX2lkX3NlcSBSRVNUQVJUIFdJVEggMScpO1xuICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdBTFRFUiBTRVFVRU5DRSBwYXlyb2xsX2RlZHVjdGlvbnNfaWRfc2VxIFJFU1RBUlQgV0lUSCAxJyk7XG4gICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0FMVEVSIFNFUVVFTkNFIGRlZHVjdGlvbl90eXBlc19pZF9zZXEgUkVTVEFSVCBXSVRIIDEnKTtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQUxURVIgU0VRVUVOQ0UgcGF5cm9sbF9hcHByb3ZhbHNfaWRfc2VxIFJFU1RBUlQgV0lUSCAxJyk7XG4gICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0FMVEVSIFNFUVVFTkNFIHN5c3RlbV9zZXR0aW5nc19pZF9zZXEgUkVTVEFSVCBXSVRIIDEnKTtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQUxURVIgU0VRVUVOQ0UgaWRfY2FyZHNfaWRfc2VxIFJFU1RBUlQgV0lUSCAxJyk7XG5cbiAgICAgIC8vIFJlLWVuYWJsZSBmb3JlaWduIGtleSBjaGVja3NcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnU0VUIHNlc3Npb25fcmVwbGljYXRpb25fcm9sZSA9IERFRkFVTFQ7Jyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGNsaWVudC5yZWxlYXNlKCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUud2FybignRGF0YWJhc2UgY2xlYW51cCBmYWlsZWQgKHRoaXMgaXMgZXhwZWN0ZWQgaWYgZGF0YWJhc2UgaXMgbm90IGF2YWlsYWJsZSk6JywgKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xlYW51cFRlc3RSZWRpcygpIHtcbiAgaWYgKCF0ZXN0UmVkaXNDbGllbnQpIHJldHVybjtcbiAgXG4gIHRyeSB7XG4gICAgYXdhaXQgdGVzdFJlZGlzQ2xpZW50LmZsdXNoRGIoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLndhcm4oJ1JlZGlzIGNsZWFudXAgZmFpbGVkOicsIChlcnJvciBhcyBFcnJvcikubWVzc2FnZSk7XG4gIH1cbn1cblxuLy8gRXhwb3J0IHRlc3QgdXRpbGl0aWVzXG5leHBvcnQgeyB0ZXN0RGJQb29sLCB0ZXN0UmVkaXNDbGllbnQgfTsiXSwidmVyc2lvbiI6M30=