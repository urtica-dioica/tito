{"version":3,"names":["cov_2bunwi6kft","actualCoverage","s","XSS_PATTERNS","containsXss","input","f","some","pattern","test","checkObjectForXss","obj","b","hasXss","field","value","Array","isArray","i","length","result","key","Object","entries","sanitizeString","replace","sanitizeObject","map","item","sanitized","preventXss","req","res","next","body","bodyCheck","status","json","success","message","error","timestamp","Date","toISOString","requestId","path","details","type","substring","query","queryCheck","params","paramsCheck","headers","headersCheck","console","exports","preventXssWithSanitization","preventXssWithLogging","startTime","now","warn","ip","userAgent","get","method","duration","info","createWhitelistXssPrevention","allowedPatterns","checkInput"],"sources":["/home/kim/tito/server/src/middleware/security/xssProtection.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { ErrorResponse } from '../../utils/types/express';\n\n/**\n * XSS attack patterns\n */\nconst XSS_PATTERNS = [\n  // Basic XSS patterns\n  /<script[^>]*>.*?<\\/script>/gi,\n  /<script[^>]*>/gi,\n  /javascript:/gi,\n  /vbscript:/gi,\n  /onload\\s*=/gi,\n  /onerror\\s*=/gi,\n  /onclick\\s*=/gi,\n  /onmouseover\\s*=/gi,\n  /onfocus\\s*=/gi,\n  /onblur\\s*=/gi,\n  /onchange\\s*=/gi,\n  /onsubmit\\s*=/gi,\n  /onreset\\s*=/gi,\n  /onselect\\s*=/gi,\n  /onunload\\s*=/gi,\n  /onabort\\s*=/gi,\n  /onbeforeunload\\s*=/gi,\n  /onhashchange\\s*=/gi,\n  /onmessage\\s*=/gi,\n  /onoffline\\s*=/gi,\n  /ononline\\s*=/gi,\n  /onpagehide\\s*=/gi,\n  /onpageshow\\s*=/gi,\n  /onpopstate\\s*=/gi,\n  /onresize\\s*=/gi,\n  /onstorage\\s*=/gi,\n  \n  // Event handlers with spaces\n  /on\\s+[a-zA-Z]+\\s*=/gi,\n  \n  // CSS expressions\n  /expression\\s*\\(/gi,\n  /url\\s*\\(/gi,\n  \n  // Data URIs\n  /data:\\s*text\\/html/gi,\n  /data:\\s*text\\/javascript/gi,\n  /data:\\s*application\\/javascript/gi,\n  \n  // Encoded XSS\n  /&#x?[0-9a-f]+;?/gi,\n  /&#[0-9]+;?/gi,\n  \n  // Unicode XSS\n  /\\u003Cscript/gi,\n  /\\u003C/gi,\n  /\\u003E/gi,\n  \n  // Base64 encoded\n  /base64/gi,\n  \n  // Meta refresh\n  /<meta[^>]*http-equiv\\s*=\\s*[\"']?refresh[\"']?[^>]*>/gi,\n  \n  // Object and embed tags\n  /<object[^>]*>/gi,\n  /<embed[^>]*>/gi,\n  /<applet[^>]*>/gi,\n  \n  // Iframe\n  /<iframe[^>]*>/gi,\n  \n  // Form action\n  /<form[^>]*action\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Input value\n  /<input[^>]*value\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Anchor href\n  /<a[^>]*href\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Image src\n  /<img[^>]*src\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Style attribute\n  /style\\s*=\\s*[\"'][^\"']*expression\\s*\\(/gi,\n  /style\\s*=\\s*[\"'][^\"']*javascript:/gi,\n  \n  // Background attribute\n  /background\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Dynsrc attribute\n  /dynsrc\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Lowsrc attribute\n  /lowsrc\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Mocha attribute\n  /mocha\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Protocol handlers\n  /mocha:/gi,\n  /livescript:/gi,\n  /vbscript:/gi,\n  /javascript:/gi,\n  \n  // Encoded protocols\n  /&#x6A;&#x61;&#x76;&#x61;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;/gi,\n  /&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;/gi,\n  \n  // Mixed case\n  /<ScRiPt/gi,\n  /<sCrIpT/gi,\n  /JaVaScRiPt/gi,\n  \n  // Null bytes\n  /\\x00/gi,\n  \n  // CRLF injection\n  /\\r\\n/gi,\n  /\\r/gi,\n  /\\n/gi,\n  \n  // HTML entities\n  /&lt;script/gi,\n  /&gt;/gi,\n  \n  // URL encoded\n  /%3Cscript/gi,\n  /%3E/gi,\n  /%3C/gi,\n  \n  // Double encoded\n  /%253Cscript/gi,\n  /%253E/gi,\n  \n  // UTF-7\n  /\\+ADw-script\\+AD4-/gi,\n  \n  // CSS import\n  /@import/gi,\n  \n  // CSS url\n  /url\\s*\\(\\s*[\"']?javascript:/gi,\n  \n  // CSS expression\n  /expression\\s*\\(/gi,\n  \n  // CSS behavior\n  /behavior\\s*:\\s*url/gi,\n  \n  // CSS binding\n  /-moz-binding/gi,\n  \n  // CSS import with url\n  /@import\\s+url\\s*\\(\\s*[\"']?javascript:/gi\n];\n\n/**\n * Check if a string contains XSS patterns\n */\nfunction containsXss(input: string): boolean {\n  return XSS_PATTERNS.some(pattern => pattern.test(input));\n}\n\n/**\n * Recursively check object for XSS\n */\nfunction checkObjectForXss(obj: any): { hasXss: boolean; field: string; value: string } {\n  if (typeof obj === 'string') {\n    if (containsXss(obj)) {\n      return { hasXss: true, field: 'string_value', value: obj };\n    }\n  } else if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      const result = checkObjectForXss(obj[i]);\n      if (result.hasXss) {\n        return { hasXss: true, field: `array[${i}]`, value: result.value };\n      }\n    }\n  } else if (obj !== null && typeof obj === 'object') {\n    for (const [key, value] of Object.entries(obj)) {\n      const result = checkObjectForXss(value);\n      if (result.hasXss) {\n        return { hasXss: true, field: key, value: result.value };\n      }\n    }\n  }\n  \n  return { hasXss: false, field: '', value: '' };\n}\n\n/**\n * Sanitize string to prevent XSS\n */\nfunction sanitizeString(input: string): string {\n  return input\n    // Remove script tags\n    .replace(/<script[^>]*>.*?<\\/script>/gi, '')\n    .replace(/<script[^>]*>/gi, '')\n    \n    // Remove event handlers\n    .replace(/\\bon[a-zA-Z]+\\s*=\\s*[\"'][^\"']*[\"']/gi, '')\n    .replace(/\\bon[a-zA-Z]+\\s*=\\s*[^>\\s]+/gi, '')\n    \n    // Remove javascript: protocol\n    .replace(/javascript:/gi, '')\n    .replace(/vbscript:/gi, '')\n    .replace(/mocha:/gi, '')\n    .replace(/livescript:/gi, '')\n    \n    // Remove CSS expressions\n    .replace(/expression\\s*\\(/gi, '')\n    \n    // Remove data URIs\n    .replace(/data:\\s*text\\/html/gi, '')\n    .replace(/data:\\s*text\\/javascript/gi, '')\n    .replace(/data:\\s*application\\/javascript/gi, '')\n    \n    // Remove dangerous attributes\n    .replace(/\\s+(on[a-zA-Z]+|javascript|vbscript|expression|background|dynsrc|lowsrc|mocha)\\s*=\\s*[\"'][^\"']*[\"']/gi, '')\n    \n    // Remove dangerous tags\n    .replace(/<(object|embed|applet|iframe)[^>]*>/gi, '')\n    \n    // Encode HTML entities\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;');\n}\n\n/**\n * Recursively sanitize object values\n */\nfunction sanitizeObject(obj: any): any {\n  if (typeof obj === 'string') {\n    return sanitizeString(obj);\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeObject(item));\n  }\n\n  if (obj !== null && typeof obj === 'object') {\n    const sanitized: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[key] = sanitizeObject(value);\n    }\n    return sanitized;\n  }\n\n  return obj;\n}\n\n/**\n * Basic XSS protection middleware\n */\nexport const preventXss = (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n  try {\n    // Check request body\n    if (req.body) {\n      const bodyCheck = checkObjectForXss(req.body);\n      if (bodyCheck.hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in request body',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: bodyCheck.field,\n            type: 'body',\n            value: bodyCheck.value.substring(0, 100) // Limit value length in response\n          }\n        });\n        return;\n      }\n    }\n\n    // Check query parameters\n    if (req.query) {\n      const queryCheck = checkObjectForXss(req.query);\n      if (queryCheck.hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in query parameters',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: queryCheck.field,\n            type: 'query',\n            value: queryCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    // Check path parameters\n    if (req.params) {\n      const paramsCheck = checkObjectForXss(req.params);\n      if (paramsCheck.hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in path parameters',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: paramsCheck.field,\n            type: 'params',\n            value: paramsCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    // Check headers\n    if (req.headers) {\n      const headersCheck = checkObjectForXss(req.headers);\n      if (headersCheck.hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in headers',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: headersCheck.field,\n            type: 'headers',\n            value: headersCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    next();\n  } catch (error) {\n    console.error('XSS prevention error:', error);\n    \n    // If prevention fails, block the request for safety\n    res.status(500).json({\n      success: false,\n      message: 'Security check failed - request blocked',\n      error: 'SECURITY_CHECK_FAILED',\n      timestamp: new Date().toISOString(),\n      requestId: req.requestId || 'unknown',\n      path: req.path\n    });\n    return;\n  }\n};\n\n/**\n * XSS protection with automatic sanitization\n */\nexport const preventXssWithSanitization = (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n  try {\n    // Sanitize request body\n    if (req.body) {\n      req.body = sanitizeObject(req.body);\n    }\n\n    // Sanitize query parameters\n    if (req.query) {\n      req.query = sanitizeObject(req.query);\n    }\n\n    // Sanitize path parameters\n    if (req.params) {\n      req.params = sanitizeObject(req.params);\n    }\n\n    // Note: Headers are typically not sanitized as they're controlled by the client\n\n    next();\n  } catch (error) {\n    console.error('XSS sanitization error:', error);\n    \n    res.status(500).json({\n      success: false,\n      message: 'Security sanitization failed - request blocked',\n      error: 'SECURITY_SANITIZATION_FAILED',\n      timestamp: new Date().toISOString(),\n      requestId: req.requestId || 'unknown',\n      path: req.path\n    });\n    return;\n  }\n};\n\n/**\n * Enhanced XSS protection with logging\n */\nexport const preventXssWithLogging = (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n  const startTime = Date.now();\n  \n  try {\n    // Check request body\n    if (req.body) {\n      const bodyCheck = checkObjectForXss(req.body);\n      if (bodyCheck.hasXss) {\n        // Log the attempt\n        console.warn(`XSS attack attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          field: bodyCheck.field,\n          value: bodyCheck.value.substring(0, 200), // Limit in logs too\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in request body',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: bodyCheck.field,\n            type: 'body',\n            value: bodyCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    // Check query parameters\n    if (req.query) {\n      const queryCheck = checkObjectForXss(req.query);\n      if (queryCheck.hasXss) {\n        console.warn(`XSS attack attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          field: queryCheck.field,\n          value: queryCheck.value.substring(0, 200),\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in query parameters',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: queryCheck.field,\n            type: 'query',\n            value: queryCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    // Check path parameters\n    if (req.params) {\n      const paramsCheck = checkObjectForXss(req.params);\n      if (paramsCheck.hasXss) {\n        console.warn(`XSS attack attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          field: paramsCheck.field,\n          value: paramsCheck.value.substring(0, 200),\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in path parameters',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: paramsCheck.field,\n            type: 'params',\n            value: paramsCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    // Check headers\n    if (req.headers) {\n      const headersCheck = checkObjectForXss(req.headers);\n      if (headersCheck.hasXss) {\n        console.warn(`XSS attack attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          field: headersCheck.field,\n          value: headersCheck.value.substring(0, 200),\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in headers',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: headersCheck.field,\n            type: 'headers',\n            value: headersCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    // Log successful security check\n    const duration = Date.now() - startTime;\n    if (duration > 100) { // Log slow security checks\n      console.info(`XSS security check completed in ${duration}ms:`, {\n        timestamp: new Date().toISOString(),\n        ip: req.ip,\n        path: req.path,\n        method: req.method,\n        duration,\n        requestId: req.requestId || 'unknown'\n      });\n    }\n\n    next();\n  } catch (error) {\n    console.error('XSS prevention error:', error);\n    \n    // Log the error\n    console.error(`XSS security check failed:`, {\n      timestamp: new Date().toISOString(),\n      ip: req.ip,\n      path: req.path,\n      method: req.method,\n      error: (error as Error).message,\n      requestId: req.requestId || 'unknown'\n    });\n\n    // Block the request for safety\n    res.status(500).json({\n      success: false,\n      message: 'Security check failed - request blocked',\n      error: 'SECURITY_CHECK_FAILED',\n      timestamp: new Date().toISOString(),\n      requestId: req.requestId || 'unknown',\n      path: req.path\n    });\n    return;\n  }\n};\n\n/**\n * Whitelist-based XSS prevention\n */\nexport const createWhitelistXssPrevention = (allowedPatterns: RegExp[]) => {\n  return (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n    try {\n      const checkInput = (input: any): { hasXss: boolean; field: string; value: string } => {\n        if (typeof input === 'string') {\n          // Check against blacklist patterns\n          if (XSS_PATTERNS.some(pattern => pattern.test(input))) {\n            // Check if it matches any whitelist patterns\n            if (!allowedPatterns.some(pattern => pattern.test(input))) {\n              return { hasXss: true, field: 'string_value', value: input };\n            }\n          }\n        } else if (Array.isArray(input)) {\n          for (let i = 0; i < input.length; i++) {\n            const result = checkInput(input[i]);\n            if (result.hasXss) {\n              return { hasXss: true, field: `array[${i}]`, value: result.value };\n            }\n          }\n        } else if (input !== null && typeof input === 'object') {\n          for (const [key, value] of Object.entries(input)) {\n            const result = checkInput(value);\n            if (result.hasXss) {\n              return { hasXss: true, field: key, value: result.value };\n            }\n          }\n        }\n        \n        return { hasXss: false, field: '', value: '' };\n      };\n\n      // Check all request data\n      if (req.body && checkInput(req.body).hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n\n      if (req.query && checkInput(req.query).hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n\n      if (req.params && checkInput(req.params).hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n\n      next();\n    } catch (error) {\n      console.error('Whitelist XSS prevention error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Security check failed - request blocked',\n        error: 'SECURITY_CHECK_FAILED',\n        timestamp: new Date().toISOString(),\n        path: req.path\n      });\n      return;\n    }\n  };\n}; "],"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","ignoreList":[]}