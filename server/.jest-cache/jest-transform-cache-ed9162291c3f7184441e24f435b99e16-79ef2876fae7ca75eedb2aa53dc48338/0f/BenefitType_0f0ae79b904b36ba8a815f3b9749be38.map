{"version":3,"names":["cov_2ibpf5i7ap","actualCoverage","database_1","s","require","logger_1","__importDefault","BenefitTypeModel","constructor","f","pool","getPool","create","data","client","connect","query","values","name","b","description","amount","is_active","result","record","rows","default","info","recordId","id","error","message","release","findById","findByName","findActive","findAll","params","page","limit","offset","whereClause","conditions","paramIndex","undefined","push","length","join","countQuery","countResult","total","parseInt","count","records","update","fields","updates","delete","checkQuery","checkResult","usageCount","Error","deleted","rowCount","exports","benefitTypeModel"],"sources":["/home/kim/tito/server/src/models/payroll/BenefitType.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface BenefitType {\n  id: string;\n  name: string;\n  description?: string;\n  amount: number;\n  is_active: boolean;\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface CreateBenefitTypeData {\n  name: string;\n  description?: string;\n  amount: number;\n  is_active?: boolean;\n}\n\nexport interface UpdateBenefitTypeData {\n  name?: string;\n  description?: string;\n  amount?: number;\n  is_active?: boolean;\n}\n\nexport interface BenefitTypeListParams {\n  is_active?: boolean;\n  page?: number;\n  limit?: number;\n}\n\nclass BenefitTypeModel {\n  private pool = getPool();\n\n  async create(data: CreateBenefitTypeData): Promise<BenefitType> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        INSERT INTO benefit_types (name, description, amount, is_active)\n        VALUES ($1, $2, $3, $4)\n        RETURNING *\n      `;\n      const values = [\n        data.name,\n        data.description || null,\n        data.amount,\n        data.is_active ?? true\n      ];\n      \n      const result = await client.query(query, values);\n      const record = result.rows[0];\n      \n      logger.info('Benefit type created', { \n        recordId: record.id, \n        name: record.name\n      });\n      return record;\n    } catch (error) {\n      logger.error('Error creating benefit type', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findById(id: string): Promise<BenefitType | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT * FROM benefit_types WHERE id = $1';\n      const result = await client.query(query, [id]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding benefit type by ID', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findByName(name: string): Promise<BenefitType | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT * FROM benefit_types WHERE name = $1';\n      const result = await client.query(query, [name]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding benefit type by name', { error: (error as Error).message, name });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findActive(): Promise<BenefitType[]> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT * FROM benefit_types \n        WHERE is_active = true \n        ORDER BY name ASC\n      `;\n      const result = await client.query(query);\n      return result.rows;\n    } catch (error) {\n      logger.error('Error finding active benefit types', { error: (error as Error).message });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findAll(params: BenefitTypeListParams = {}): Promise<{ records: BenefitType[]; total: number }> {\n    const client = await this.pool.connect();\n    try {\n      const { page = 1, limit = 10, is_active } = params;\n      const offset = (page - 1) * limit;\n      \n      let whereClause = '';\n      const conditions: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (is_active !== undefined) {\n        conditions.push(`is_active = $${paramIndex++}`);\n        values.push(is_active);\n      }\n\n      if (conditions.length > 0) {\n        whereClause = `WHERE ${conditions.join(' AND ')}`;\n      }\n\n      // Get total count\n      const countQuery = `SELECT COUNT(*) FROM benefit_types ${whereClause}`;\n      const countResult = await client.query(countQuery, values);\n      const total = parseInt(countResult.rows[0].count);\n\n      // Get records\n      const query = `\n        SELECT * FROM benefit_types \n        ${whereClause}\n        ORDER BY name ASC\n        LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n      `;\n      values.push(limit, offset);\n      \n      const result = await client.query(query, values);\n      \n      return {\n        records: result.rows,\n        total\n      };\n    } catch (error) {\n      logger.error('Error finding benefit types', { error: (error as Error).message, params });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async update(id: string, data: UpdateBenefitTypeData): Promise<BenefitType | null> {\n    const client = await this.pool.connect();\n    try {\n      const fields: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (data.name !== undefined) {\n        fields.push(`name = $${paramIndex++}`);\n        values.push(data.name);\n      }\n\n      if (data.description !== undefined) {\n        fields.push(`description = $${paramIndex++}`);\n        values.push(data.description);\n      }\n\n      if (data.amount !== undefined) {\n        fields.push(`amount = $${paramIndex++}`);\n        values.push(data.amount);\n      }\n\n      if (data.is_active !== undefined) {\n        fields.push(`is_active = $${paramIndex++}`);\n        values.push(data.is_active);\n      }\n\n      if (fields.length === 0) {\n        return await this.findById(id);\n      }\n\n      fields.push(`updated_at = CURRENT_TIMESTAMP`);\n      values.push(id);\n\n      const query = `\n        UPDATE benefit_types \n        SET ${fields.join(', ')}\n        WHERE id = $${paramIndex}\n        RETURNING *\n      `;\n\n      const result = await client.query(query, values);\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      logger.info('Benefit type updated', { recordId: id, updates: data });\n      return result.rows[0];\n    } catch (error) {\n      logger.error('Error updating benefit type', { error: (error as Error).message, id, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async delete(id: string): Promise<boolean> {\n    const client = await this.pool.connect();\n    try {\n      // Check if benefit type is being used by any employee benefits\n      const checkQuery = 'SELECT COUNT(*) FROM employee_benefits WHERE benefit_type_id = $1';\n      const checkResult = await client.query(checkQuery, [id]);\n      const usageCount = parseInt(checkResult.rows[0].count);\n\n      if (usageCount > 0) {\n        throw new Error('Cannot delete benefit type that is being used by employee benefits');\n      }\n\n      const query = 'DELETE FROM benefit_types WHERE id = $1';\n      const result = await client.query(query, [id]);\n      \n      const deleted = (result.rowCount || 0) > 0;\n      if (deleted) {\n        logger.info('Benefit type deleted', { recordId: id });\n      }\n      \n      return deleted;\n    } catch (error) {\n      logger.error('Error deleting benefit type', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async count(): Promise<number> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT COUNT(*) FROM benefit_types';\n      const result = await client.query(query);\n      return parseInt(result.rows[0].count);\n    } catch (error) {\n      logger.error('Error counting benefit types', { error: (error as Error).message });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n}\n\nexport const benefitTypeModel = new BenefitTypeModel();\n"],"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","ignoreList":[]}