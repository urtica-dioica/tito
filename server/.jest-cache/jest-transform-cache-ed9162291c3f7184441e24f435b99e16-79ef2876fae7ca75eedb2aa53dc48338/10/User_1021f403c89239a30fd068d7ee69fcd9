4e985a3c3d8500a3a345af3dfd12a413
"use strict";

/* istanbul ignore next */
function cov_2kmpc8l1r3() {
  var path = "/home/kim/tito/server/src/models/auth/User.ts";
  var hash = "ad9825e0debf79314c9364fca4583928830b4b46";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/models/auth/User.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 47
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 55
        }
      },
      "5": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 51
        }
      },
      "6": {
        start: {
          line: 9,
          column: 22
        },
        end: {
          line: 9,
          column: 57
        }
      },
      "7": {
        start: {
          line: 10,
          column: 16
        },
        end: {
          line: 10,
          column: 54
        }
      },
      "8": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 46
        }
      },
      "9": {
        start: {
          line: 19,
          column: 65
        },
        end: {
          line: 19,
          column: 73
        }
      },
      "10": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "11": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 53
        }
      },
      "12": {
        start: {
          line: 25,
          column: 30
        },
        end: {
          line: 25,
          column: 113
        }
      },
      "13": {
        start: {
          line: 26,
          column: 22
        },
        end: {
          line: 30,
          column: 5
        }
      },
      "14": {
        start: {
          line: 31,
          column: 23
        },
        end: {
          line: 31,
          column: 74
        }
      },
      "15": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "16": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 33,
          column: 63
        }
      },
      "17": {
        start: {
          line: 34,
          column: 25
        },
        end: {
          line: 34,
          column: 39
        }
      },
      "18": {
        start: {
          line: 36,
          column: 65
        },
        end: {
          line: 36,
          column: 69
        }
      },
      "19": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 39
        }
      },
      "20": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "21": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 71
        }
      },
      "22": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 24
        }
      },
      "23": {
        start: {
          line: 50,
          column: 22
        },
        end: {
          line: 54,
          column: 5
        }
      },
      "24": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "25": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 56,
          column: 61
        }
      },
      "26": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "27": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 28
        }
      },
      "28": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 60,
          column: 39
        }
      },
      "29": {
        start: {
          line: 61,
          column: 65
        },
        end: {
          line: 61,
          column: 69
        }
      },
      "30": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 39
        }
      },
      "31": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 24
        }
      },
      "32": {
        start: {
          line: 72,
          column: 22
        },
        end: {
          line: 76,
          column: 5
        }
      },
      "33": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "34": {
        start: {
          line: 78,
          column: 27
        },
        end: {
          line: 78,
          column: 64
        }
      },
      "35": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "36": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 28
        }
      },
      "37": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 34
        }
      },
      "38": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 24
        }
      },
      "39": {
        start: {
          line: 92,
          column: 22
        },
        end: {
          line: 96,
          column: 5
        }
      },
      "40": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "41": {
        start: {
          line: 98,
          column: 27
        },
        end: {
          line: 98,
          column: 64
        }
      },
      "42": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "43": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 28
        }
      },
      "44": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 34
        }
      },
      "45": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 24
        }
      },
      "46": {
        start: {
          line: 112,
          column: 23
        },
        end: {
          line: 112,
          column: 25
        }
      },
      "47": {
        start: {
          line: 113,
          column: 23
        },
        end: {
          line: 113,
          column: 25
        }
      },
      "48": {
        start: {
          line: 114,
          column: 25
        },
        end: {
          line: 114,
          column: 26
        }
      },
      "49": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "50": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 52
        }
      },
      "51": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 42
        }
      },
      "52": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "53": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 57
        }
      },
      "54": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 47
        }
      },
      "55": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "56": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 56
        }
      },
      "57": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 46
        }
      },
      "58": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "59": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "60": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 68
        }
      },
      "61": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 51
        }
      },
      "62": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 41
        }
      },
      "63": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "64": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 56
        }
      },
      "65": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 46
        }
      },
      "66": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "67": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 37
        }
      },
      "68": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 53
        }
      },
      "69": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 32
        }
      },
      "70": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 24
        }
      },
      "71": {
        start: {
          line: 147,
          column: 22
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "72": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "73": {
        start: {
          line: 154,
          column: 27
        },
        end: {
          line: 154,
          column: 63
        }
      },
      "74": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 157,
          column: 13
        }
      },
      "75": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 28
        }
      },
      "76": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 34
        }
      },
      "77": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "78": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 71
        }
      },
      "79": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 24
        }
      },
      "80": {
        start: {
          line: 171,
          column: 30
        },
        end: {
          line: 171,
          column: 116
        }
      },
      "81": {
        start: {
          line: 172,
          column: 22
        },
        end: {
          line: 176,
          column: 5
        }
      },
      "82": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "83": {
        start: {
          line: 178,
          column: 27
        },
        end: {
          line: 178,
          column: 88
        }
      },
      "84": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 65
        }
      },
      "85": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 24
        }
      },
      "86": {
        start: {
          line: 189,
          column: 22
        },
        end: {
          line: 189,
          column: 55
        }
      },
      "87": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "88": {
        start: {
          line: 191,
          column: 27
        },
        end: {
          line: 191,
          column: 61
        }
      },
      "89": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 65
        }
      },
      "90": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 24
        }
      },
      "91": {
        start: {
          line: 202,
          column: 22
        },
        end: {
          line: 206,
          column: 5
        }
      },
      "92": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "93": {
        start: {
          line: 208,
          column: 27
        },
        end: {
          line: 208,
          column: 55
        }
      },
      "94": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 31
        }
      },
      "95": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 24
        }
      },
      "96": {
        start: {
          line: 219,
          column: 22
        },
        end: {
          line: 224,
          column: 5
        }
      },
      "97": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "98": {
        start: {
          line: 226,
          column: 27
        },
        end: {
          line: 226,
          column: 63
        }
      },
      "99": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 31
        }
      },
      "100": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 24
        }
      },
      "101": {
        start: {
          line: 237,
          column: 22
        },
        end: {
          line: 237,
          column: 60
        }
      },
      "102": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "103": {
        start: {
          line: 239,
          column: 27
        },
        end: {
          line: 239,
          column: 64
        }
      },
      "104": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 42
        }
      },
      "105": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 24
        }
      },
      "106": {
        start: {
          line: 250,
          column: 21
        },
        end: {
          line: 250,
          column: 50
        }
      },
      "107": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "108": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 25
        }
      },
      "109": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 72
        }
      },
      "110": {
        start: {
          line: 260,
          column: 22
        },
        end: {
          line: 260,
          column: 66
        }
      },
      "111": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 267,
          column: 9
        }
      },
      "112": {
        start: {
          line: 262,
          column: 27
        },
        end: {
          line: 262,
          column: 63
        }
      },
      "113": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 50
        }
      },
      "114": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 24
        }
      },
      "115": {
        start: {
          line: 273,
          column: 22
        },
        end: {
          line: 273,
          column: 50
        }
      },
      "116": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "117": {
        start: {
          line: 275,
          column: 27
        },
        end: {
          line: 275,
          column: 55
        }
      },
      "118": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 50
        }
      },
      "119": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 24
        }
      },
      "120": {
        start: {
          line: 283,
          column: 0
        },
        end: {
          line: 283,
          column: 30
        }
      },
      "121": {
        start: {
          line: 285,
          column: 0
        },
        end: {
          line: 285,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 23
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 49
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 29
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 71
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 44
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 91
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 37
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 42
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 170
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 25
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 188
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 25
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 201
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 32
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 218
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 236,
            column: 4
          },
          end: {
            line: 236,
            column: 5
          }
        },
        loc: {
          start: {
            line: 236,
            column: 28
          },
          end: {
            line: 245,
            column: 5
          }
        },
        line: 236
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        loc: {
          start: {
            line: 249,
            column: 42
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 249
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        loc: {
          start: {
            line: 259,
            column: 35
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 259
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        loc: {
          start: {
            line: 272,
            column: 30
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 272
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "4": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "5": {
        loc: {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 38
          }
        }, {
          start: {
            line: 40,
            column: 42
          },
          end: {
            line: 40,
            column: 81
          }
        }],
        line: 40
      },
      "6": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "7": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "8": {
        loc: {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "9": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "10": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "11": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "12": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "13": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "14": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "15": {
        loc: {
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "16": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "17": {
        loc: {
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "18": {
        loc: {
          start: {
            line: 161,
            column: 16
          },
          end: {
            line: 161,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 16
          },
          end: {
            line: 161,
            column: 38
          }
        }, {
          start: {
            line: 161,
            column: 42
          },
          end: {
            line: 161,
            column: 81
          }
        }],
        line: 161
      },
      "19": {
        loc: {
          start: {
            line: 179,
            column: 19
          },
          end: {
            line: 179,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 179,
            column: 37
          },
          end: {
            line: 179,
            column: 56
          }
        }, {
          start: {
            line: 179,
            column: 59
          },
          end: {
            line: 179,
            column: 64
          }
        }],
        line: 179
      },
      "20": {
        loc: {
          start: {
            line: 192,
            column: 19
          },
          end: {
            line: 192,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 37
          },
          end: {
            line: 192,
            column: 56
          }
        }, {
          start: {
            line: 192,
            column: 59
          },
          end: {
            line: 192,
            column: 64
          }
        }],
        line: 192
      },
      "21": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/models/auth/User.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/models/auth/User.ts"],
      sourcesContent: ["import { Pool } from 'pg';\nimport bcrypt from 'bcryptjs';\nimport { getPool } from '../../config/database';\nimport { config } from '../../config/environment';\nimport { UserRole, isValidRole } from '../../utils/constants/roles';\n\nexport interface User {\n  id: string;\n  email: string;\n  password_hash: string;\n  first_name: string;\n  last_name: string;\n  role: UserRole;\n  is_active: boolean;\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface CreateUserData {\n  email: string;\n  password: string;\n  first_name: string;\n  last_name: string;\n  role: UserRole;\n}\n\nexport interface UpdateUserData {\n  email?: string;\n  first_name?: string;\n  last_name?: string;\n  role?: UserRole;\n  is_active?: boolean;\n}\n\nexport interface UserWithPassword extends Omit<User, 'password_hash'> {\n  password_hash: string;\n}\n\nexport interface UserWithoutPassword extends Omit<User, 'password_hash'> {\n  password_hash?: never;\n}\n\nexport class UserModel {\n  private pool: Pool;\n\n  constructor() {\n    this.pool = getPool();\n  }\n\n  /**\n   * Create a new user\n   */\n  async createUser(userData: CreateUserData): Promise<UserWithoutPassword> {\n    const { email, password, first_name, last_name, role } = userData;\n\n    // Validate role\n    if (!isValidRole(role)) {\n      throw new Error(`Invalid role: ${role}`);\n    }\n\n    // Hash password\n    const password_hash = await bcrypt.hash(password, config.security.bcryptRounds);\n\n    const query = `\n      INSERT INTO users (email, password_hash, first_name, last_name, role)\n      VALUES ($1, $2, $3, $4, $5)\n      RETURNING id, email, password_hash, first_name, last_name, role, is_active, created_at, updated_at\n    `;\n\n    const values = [email, password_hash, first_name, last_name, role];\n\n    try {\n      const result = await this.pool.query(query, values);\n      const user = result.rows[0];\n      \n      // Remove password_hash from response\n      const { password_hash: _, ...userWithoutPassword } = user;\n      return userWithoutPassword;\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('duplicate key')) {\n        throw new Error('User with this email already exists');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Find user by ID\n   */\n  async findById(id: string): Promise<UserWithoutPassword | null> {\n    const query = `\n      SELECT id, email, password_hash, first_name, last_name, role, is_active, created_at, updated_at\n      FROM users\n      WHERE id = $1\n    `;\n\n    try {\n      const result = await this.pool.query(query, [id]);\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      const user = result.rows[0];\n      const { password_hash: _, ...userWithoutPassword } = user;\n      return userWithoutPassword;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Find user by email\n   */\n  async findByEmail(email: string): Promise<UserWithPassword | null> {\n    const query = `\n      SELECT id, email, password_hash, first_name, last_name, role, is_active, created_at, updated_at\n      FROM users\n      WHERE email = $1\n    `;\n\n    try {\n      const result = await this.pool.query(query, [email]);\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      return result.rows[0];\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Find user by email (without password)\n   */\n  async findByEmailWithoutPassword(email: string): Promise<UserWithoutPassword | null> {\n    const query = `\n      SELECT id, email, first_name, last_name, role, is_active, created_at, updated_at\n      FROM users\n      WHERE email = $1\n    `;\n\n    try {\n      const result = await this.pool.query(query, [email]);\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      return result.rows[0];\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update user\n   */\n  async updateUser(id: string, updateData: UpdateUserData): Promise<UserWithoutPassword | null> {\n    const fields: string[] = [];\n    const values: any[] = [];\n    let paramCount = 1;\n\n    // Build dynamic query\n    if (updateData.email !== undefined) {\n      fields.push(`email = $${paramCount++}`);\n      values.push(updateData.email);\n    }\n    if (updateData.first_name !== undefined) {\n      fields.push(`first_name = $${paramCount++}`);\n      values.push(updateData.first_name);\n    }\n    if (updateData.last_name !== undefined) {\n      fields.push(`last_name = $${paramCount++}`);\n      values.push(updateData.last_name);\n    }\n    if (updateData.role !== undefined) {\n      if (!isValidRole(updateData.role)) {\n        throw new Error(`Invalid role: ${updateData.role}`);\n      }\n      fields.push(`role = $${paramCount++}`);\n      values.push(updateData.role);\n    }\n    if (updateData.is_active !== undefined) {\n      fields.push(`is_active = $${paramCount++}`);\n      values.push(updateData.is_active);\n    }\n\n    if (fields.length === 0) {\n      return this.findById(id);\n    }\n\n    // Add updated_at timestamp\n    fields.push(`updated_at = $${paramCount++}`);\n    values.push(new Date());\n\n    // Add user ID\n    values.push(id);\n\n    const query = `\n      UPDATE users\n      SET ${fields.join(', ')}\n      WHERE id = $${paramCount}\n      RETURNING id, email, first_name, last_name, role, is_active, created_at, updated_at\n    `;\n\n    try {\n      const result = await this.pool.query(query, values);\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      return result.rows[0];\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('duplicate key')) {\n        throw new Error('User with this email already exists');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Update user password\n   */\n  async updatePassword(id: string, newPassword: string): Promise<boolean> {\n    const password_hash = await bcrypt.hash(newPassword, config.security.bcryptRounds);\n    \n    const query = `\n      UPDATE users\n      SET password_hash = $1, updated_at = $2\n      WHERE id = $3\n    `;\n\n    try {\n      const result = await this.pool.query(query, [password_hash, new Date(), id]);\n      return result.rowCount ? result.rowCount > 0 : false;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Delete user\n   */\n  async deleteUser(id: string): Promise<boolean> {\n    const query = 'DELETE FROM users WHERE id = $1';\n    \n    try {\n      const result = await this.pool.query(query, [id]);\n      return result.rowCount ? result.rowCount > 0 : false;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * List all users (for HR admin)\n   */\n  async listAllUsers(): Promise<UserWithoutPassword[]> {\n    const query = `\n      SELECT id, email, first_name, last_name, role, is_active, created_at, updated_at\n      FROM users\n      ORDER BY created_at DESC\n    `;\n\n    try {\n      const result = await this.pool.query(query);\n      return result.rows;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * List users by role\n   */\n  async listUsersByRole(role: UserRole): Promise<UserWithoutPassword[]> {\n    const query = `\n      SELECT id, email, first_name, last_name, role, is_active, created_at, updated_at\n      FROM users\n      WHERE role = $1\n      ORDER BY created_at DESC\n    `;\n\n    try {\n      const result = await this.pool.query(query, [role]);\n      return result.rows;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Check if user exists\n   */\n  async userExists(email: string): Promise<boolean> {\n    const query = 'SELECT 1 FROM users WHERE email = $1';\n    \n    try {\n      const result = await this.pool.query(query, [email]);\n      return result.rows.length > 0;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Verify password\n   */\n  async verifyPassword(email: string, password: string): Promise<boolean> {\n    const user = await this.findByEmail(email);\n    if (!user) {\n      return false;\n    }\n\n    return bcrypt.compare(password, user.password_hash);\n  }\n\n  /**\n   * Get user count by role\n   */\n  async getUserCountByRole(role: UserRole): Promise<number> {\n    const query = 'SELECT COUNT(*) FROM users WHERE role = $1';\n    \n    try {\n      const result = await this.pool.query(query, [role]);\n      return parseInt(result.rows[0].count);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get total user count\n   */\n  async getTotalUserCount(): Promise<number> {\n    const query = 'SELECT COUNT(*) FROM users';\n    \n    try {\n      const result = await this.pool.query(query);\n      return parseInt(result.rows[0].count);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const userModel = new UserModel(); "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ad9825e0debf79314c9364fca4583928830b4b46"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2kmpc8l1r3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2kmpc8l1r3();
var __importDefault =
/* istanbul ignore next */
(cov_2kmpc8l1r3().s[0]++,
/* istanbul ignore next */
(cov_2kmpc8l1r3().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2kmpc8l1r3().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2kmpc8l1r3().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2kmpc8l1r3().f[0]++;
  cov_2kmpc8l1r3().s[1]++;
  return /* istanbul ignore next */(cov_2kmpc8l1r3().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2kmpc8l1r3().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2kmpc8l1r3().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2kmpc8l1r3().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2kmpc8l1r3().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2kmpc8l1r3().s[3]++;
exports.userModel = exports.UserModel = void 0;
const bcryptjs_1 =
/* istanbul ignore next */
(cov_2kmpc8l1r3().s[4]++, __importDefault(require("bcryptjs")));
const database_1 =
/* istanbul ignore next */
(cov_2kmpc8l1r3().s[5]++, require("../../config/database"));
const environment_1 =
/* istanbul ignore next */
(cov_2kmpc8l1r3().s[6]++, require("../../config/environment"));
const roles_1 =
/* istanbul ignore next */
(cov_2kmpc8l1r3().s[7]++, require("../../utils/constants/roles"));
class UserModel {
  constructor() {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[1]++;
    cov_2kmpc8l1r3().s[8]++;
    this.pool = (0, database_1.getPool)();
  }
  /**
   * Create a new user
   */
  async createUser(userData) {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[2]++;
    const {
      email,
      password,
      first_name,
      last_name,
      role
    } =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[9]++, userData);
    // Validate role
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[10]++;
    if (!(0, roles_1.isValidRole)(role)) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().b[3][0]++;
      cov_2kmpc8l1r3().s[11]++;
      throw new Error(`Invalid role: ${role}`);
    } else
    /* istanbul ignore next */
    {
      cov_2kmpc8l1r3().b[3][1]++;
    }
    // Hash password
    const password_hash =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[12]++, await bcryptjs_1.default.hash(password, environment_1.config.security.bcryptRounds));
    const query =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[13]++, `
      INSERT INTO users (email, password_hash, first_name, last_name, role)
      VALUES ($1, $2, $3, $4, $5)
      RETURNING id, email, password_hash, first_name, last_name, role, is_active, created_at, updated_at
    `);
    const values =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[14]++, [email, password_hash, first_name, last_name, role]);
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[15]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[16]++, await this.pool.query(query, values));
      const user =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[17]++, result.rows[0]);
      // Remove password_hash from response
      const {
        password_hash: _,
        ...userWithoutPassword
      } =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[18]++, user);
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[19]++;
      return userWithoutPassword;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[20]++;
      if (
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().b[5][0]++, error instanceof Error) &&
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().b[5][1]++, error.message.includes('duplicate key'))) {
        /* istanbul ignore next */
        cov_2kmpc8l1r3().b[4][0]++;
        cov_2kmpc8l1r3().s[21]++;
        throw new Error('User with this email already exists');
      } else
      /* istanbul ignore next */
      {
        cov_2kmpc8l1r3().b[4][1]++;
      }
      cov_2kmpc8l1r3().s[22]++;
      throw error;
    }
  }
  /**
   * Find user by ID
   */
  async findById(id) {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[3]++;
    const query =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[23]++, `
      SELECT id, email, password_hash, first_name, last_name, role, is_active, created_at, updated_at
      FROM users
      WHERE id = $1
    `);
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[24]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[25]++, await this.pool.query(query, [id]));
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[26]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_2kmpc8l1r3().b[6][0]++;
        cov_2kmpc8l1r3().s[27]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2kmpc8l1r3().b[6][1]++;
      }
      const user =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[28]++, result.rows[0]);
      const {
        password_hash: _,
        ...userWithoutPassword
      } =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[29]++, user);
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[30]++;
      return userWithoutPassword;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[31]++;
      throw error;
    }
  }
  /**
   * Find user by email
   */
  async findByEmail(email) {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[4]++;
    const query =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[32]++, `
      SELECT id, email, password_hash, first_name, last_name, role, is_active, created_at, updated_at
      FROM users
      WHERE email = $1
    `);
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[33]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[34]++, await this.pool.query(query, [email]));
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[35]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_2kmpc8l1r3().b[7][0]++;
        cov_2kmpc8l1r3().s[36]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2kmpc8l1r3().b[7][1]++;
      }
      cov_2kmpc8l1r3().s[37]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[38]++;
      throw error;
    }
  }
  /**
   * Find user by email (without password)
   */
  async findByEmailWithoutPassword(email) {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[5]++;
    const query =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[39]++, `
      SELECT id, email, first_name, last_name, role, is_active, created_at, updated_at
      FROM users
      WHERE email = $1
    `);
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[40]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[41]++, await this.pool.query(query, [email]));
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[42]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_2kmpc8l1r3().b[8][0]++;
        cov_2kmpc8l1r3().s[43]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2kmpc8l1r3().b[8][1]++;
      }
      cov_2kmpc8l1r3().s[44]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[45]++;
      throw error;
    }
  }
  /**
   * Update user
   */
  async updateUser(id, updateData) {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[6]++;
    const fields =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[46]++, []);
    const values =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[47]++, []);
    let paramCount =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[48]++, 1);
    // Build dynamic query
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[49]++;
    if (updateData.email !== undefined) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().b[9][0]++;
      cov_2kmpc8l1r3().s[50]++;
      fields.push(`email = $${paramCount++}`);
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[51]++;
      values.push(updateData.email);
    } else
    /* istanbul ignore next */
    {
      cov_2kmpc8l1r3().b[9][1]++;
    }
    cov_2kmpc8l1r3().s[52]++;
    if (updateData.first_name !== undefined) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().b[10][0]++;
      cov_2kmpc8l1r3().s[53]++;
      fields.push(`first_name = $${paramCount++}`);
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[54]++;
      values.push(updateData.first_name);
    } else
    /* istanbul ignore next */
    {
      cov_2kmpc8l1r3().b[10][1]++;
    }
    cov_2kmpc8l1r3().s[55]++;
    if (updateData.last_name !== undefined) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().b[11][0]++;
      cov_2kmpc8l1r3().s[56]++;
      fields.push(`last_name = $${paramCount++}`);
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[57]++;
      values.push(updateData.last_name);
    } else
    /* istanbul ignore next */
    {
      cov_2kmpc8l1r3().b[11][1]++;
    }
    cov_2kmpc8l1r3().s[58]++;
    if (updateData.role !== undefined) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().b[12][0]++;
      cov_2kmpc8l1r3().s[59]++;
      if (!(0, roles_1.isValidRole)(updateData.role)) {
        /* istanbul ignore next */
        cov_2kmpc8l1r3().b[13][0]++;
        cov_2kmpc8l1r3().s[60]++;
        throw new Error(`Invalid role: ${updateData.role}`);
      } else
      /* istanbul ignore next */
      {
        cov_2kmpc8l1r3().b[13][1]++;
      }
      cov_2kmpc8l1r3().s[61]++;
      fields.push(`role = $${paramCount++}`);
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[62]++;
      values.push(updateData.role);
    } else
    /* istanbul ignore next */
    {
      cov_2kmpc8l1r3().b[12][1]++;
    }
    cov_2kmpc8l1r3().s[63]++;
    if (updateData.is_active !== undefined) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().b[14][0]++;
      cov_2kmpc8l1r3().s[64]++;
      fields.push(`is_active = $${paramCount++}`);
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[65]++;
      values.push(updateData.is_active);
    } else
    /* istanbul ignore next */
    {
      cov_2kmpc8l1r3().b[14][1]++;
    }
    cov_2kmpc8l1r3().s[66]++;
    if (fields.length === 0) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().b[15][0]++;
      cov_2kmpc8l1r3().s[67]++;
      return this.findById(id);
    } else
    /* istanbul ignore next */
    {
      cov_2kmpc8l1r3().b[15][1]++;
    }
    // Add updated_at timestamp
    cov_2kmpc8l1r3().s[68]++;
    fields.push(`updated_at = $${paramCount++}`);
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[69]++;
    values.push(new Date());
    // Add user ID
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[70]++;
    values.push(id);
    const query =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[71]++, `
      UPDATE users
      SET ${fields.join(', ')}
      WHERE id = $${paramCount}
      RETURNING id, email, first_name, last_name, role, is_active, created_at, updated_at
    `);
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[72]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[73]++, await this.pool.query(query, values));
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[74]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_2kmpc8l1r3().b[16][0]++;
        cov_2kmpc8l1r3().s[75]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2kmpc8l1r3().b[16][1]++;
      }
      cov_2kmpc8l1r3().s[76]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[77]++;
      if (
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().b[18][0]++, error instanceof Error) &&
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().b[18][1]++, error.message.includes('duplicate key'))) {
        /* istanbul ignore next */
        cov_2kmpc8l1r3().b[17][0]++;
        cov_2kmpc8l1r3().s[78]++;
        throw new Error('User with this email already exists');
      } else
      /* istanbul ignore next */
      {
        cov_2kmpc8l1r3().b[17][1]++;
      }
      cov_2kmpc8l1r3().s[79]++;
      throw error;
    }
  }
  /**
   * Update user password
   */
  async updatePassword(id, newPassword) {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[7]++;
    const password_hash =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[80]++, await bcryptjs_1.default.hash(newPassword, environment_1.config.security.bcryptRounds));
    const query =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[81]++, `
      UPDATE users
      SET password_hash = $1, updated_at = $2
      WHERE id = $3
    `);
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[82]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[83]++, await this.pool.query(query, [password_hash, new Date(), id]));
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[84]++;
      return result.rowCount ?
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().b[19][0]++, result.rowCount > 0) :
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().b[19][1]++, false);
    } catch (error) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[85]++;
      throw error;
    }
  }
  /**
   * Delete user
   */
  async deleteUser(id) {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[8]++;
    const query =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[86]++, 'DELETE FROM users WHERE id = $1');
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[87]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[88]++, await this.pool.query(query, [id]));
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[89]++;
      return result.rowCount ?
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().b[20][0]++, result.rowCount > 0) :
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().b[20][1]++, false);
    } catch (error) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[90]++;
      throw error;
    }
  }
  /**
   * List all users (for HR admin)
   */
  async listAllUsers() {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[9]++;
    const query =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[91]++, `
      SELECT id, email, first_name, last_name, role, is_active, created_at, updated_at
      FROM users
      ORDER BY created_at DESC
    `);
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[92]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[93]++, await this.pool.query(query));
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[94]++;
      return result.rows;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[95]++;
      throw error;
    }
  }
  /**
   * List users by role
   */
  async listUsersByRole(role) {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[10]++;
    const query =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[96]++, `
      SELECT id, email, first_name, last_name, role, is_active, created_at, updated_at
      FROM users
      WHERE role = $1
      ORDER BY created_at DESC
    `);
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[97]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[98]++, await this.pool.query(query, [role]));
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[99]++;
      return result.rows;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[100]++;
      throw error;
    }
  }
  /**
   * Check if user exists
   */
  async userExists(email) {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[11]++;
    const query =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[101]++, 'SELECT 1 FROM users WHERE email = $1');
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[102]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[103]++, await this.pool.query(query, [email]));
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[104]++;
      return result.rows.length > 0;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[105]++;
      throw error;
    }
  }
  /**
   * Verify password
   */
  async verifyPassword(email, password) {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[12]++;
    const user =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[106]++, await this.findByEmail(email));
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[107]++;
    if (!user) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().b[21][0]++;
      cov_2kmpc8l1r3().s[108]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2kmpc8l1r3().b[21][1]++;
    }
    cov_2kmpc8l1r3().s[109]++;
    return bcryptjs_1.default.compare(password, user.password_hash);
  }
  /**
   * Get user count by role
   */
  async getUserCountByRole(role) {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[13]++;
    const query =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[110]++, 'SELECT COUNT(*) FROM users WHERE role = $1');
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[111]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[112]++, await this.pool.query(query, [role]));
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[113]++;
      return parseInt(result.rows[0].count);
    } catch (error) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[114]++;
      throw error;
    }
  }
  /**
   * Get total user count
   */
  async getTotalUserCount() {
    /* istanbul ignore next */
    cov_2kmpc8l1r3().f[14]++;
    const query =
    /* istanbul ignore next */
    (cov_2kmpc8l1r3().s[115]++, 'SELECT COUNT(*) FROM users');
    /* istanbul ignore next */
    cov_2kmpc8l1r3().s[116]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kmpc8l1r3().s[117]++, await this.pool.query(query));
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[118]++;
      return parseInt(result.rows[0].count);
    } catch (error) {
      /* istanbul ignore next */
      cov_2kmpc8l1r3().s[119]++;
      throw error;
    }
  }
}
/* istanbul ignore next */
cov_2kmpc8l1r3().s[120]++;
exports.UserModel = UserModel;
// Export singleton instance
/* istanbul ignore next */
cov_2kmpc8l1r3().s[121]++;
exports.userModel = new UserModel();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiY3J5cHRqc18xIiwiY292XzJrbXBjOGwxcjMiLCJzIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsImRhdGFiYXNlXzEiLCJlbnZpcm9ubWVudF8xIiwicm9sZXNfMSIsIlVzZXJNb2RlbCIsImNvbnN0cnVjdG9yIiwiZiIsInBvb2wiLCJnZXRQb29sIiwiY3JlYXRlVXNlciIsInVzZXJEYXRhIiwiZW1haWwiLCJwYXNzd29yZCIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJyb2xlIiwiaXNWYWxpZFJvbGUiLCJiIiwiRXJyb3IiLCJwYXNzd29yZF9oYXNoIiwiZGVmYXVsdCIsImhhc2giLCJjb25maWciLCJzZWN1cml0eSIsImJjcnlwdFJvdW5kcyIsInF1ZXJ5IiwidmFsdWVzIiwicmVzdWx0IiwidXNlciIsInJvd3MiLCJfIiwidXNlcldpdGhvdXRQYXNzd29yZCIsImVycm9yIiwibWVzc2FnZSIsImluY2x1ZGVzIiwiZmluZEJ5SWQiLCJpZCIsImxlbmd0aCIsImZpbmRCeUVtYWlsIiwiZmluZEJ5RW1haWxXaXRob3V0UGFzc3dvcmQiLCJ1cGRhdGVVc2VyIiwidXBkYXRlRGF0YSIsImZpZWxkcyIsInBhcmFtQ291bnQiLCJ1bmRlZmluZWQiLCJwdXNoIiwiaXNfYWN0aXZlIiwiRGF0ZSIsImpvaW4iLCJ1cGRhdGVQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwicm93Q291bnQiLCJkZWxldGVVc2VyIiwibGlzdEFsbFVzZXJzIiwibGlzdFVzZXJzQnlSb2xlIiwidXNlckV4aXN0cyIsInZlcmlmeVBhc3N3b3JkIiwiY29tcGFyZSIsImdldFVzZXJDb3VudEJ5Um9sZSIsInBhcnNlSW50IiwiY291bnQiLCJnZXRUb3RhbFVzZXJDb3VudCIsImV4cG9ydHMiLCJ1c2VyTW9kZWwiXSwic291cmNlcyI6WyIvaG9tZS9raW0vdGl0by9zZXJ2ZXIvc3JjL21vZGVscy9hdXRoL1VzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9vbCB9IGZyb20gJ3BnJztcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0anMnO1xuaW1wb3J0IHsgZ2V0UG9vbCB9IGZyb20gJy4uLy4uL2NvbmZpZy9kYXRhYmFzZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcvZW52aXJvbm1lbnQnO1xuaW1wb3J0IHsgVXNlclJvbGUsIGlzVmFsaWRSb2xlIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29uc3RhbnRzL3JvbGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBVc2VyIHtcbiAgaWQ6IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbiAgcGFzc3dvcmRfaGFzaDogc3RyaW5nO1xuICBmaXJzdF9uYW1lOiBzdHJpbmc7XG4gIGxhc3RfbmFtZTogc3RyaW5nO1xuICByb2xlOiBVc2VyUm9sZTtcbiAgaXNfYWN0aXZlOiBib29sZWFuO1xuICBjcmVhdGVkX2F0OiBEYXRlO1xuICB1cGRhdGVkX2F0OiBEYXRlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZVVzZXJEYXRhIHtcbiAgZW1haWw6IHN0cmluZztcbiAgcGFzc3dvcmQ6IHN0cmluZztcbiAgZmlyc3RfbmFtZTogc3RyaW5nO1xuICBsYXN0X25hbWU6IHN0cmluZztcbiAgcm9sZTogVXNlclJvbGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlVXNlckRhdGEge1xuICBlbWFpbD86IHN0cmluZztcbiAgZmlyc3RfbmFtZT86IHN0cmluZztcbiAgbGFzdF9uYW1lPzogc3RyaW5nO1xuICByb2xlPzogVXNlclJvbGU7XG4gIGlzX2FjdGl2ZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlcldpdGhQYXNzd29yZCBleHRlbmRzIE9taXQ8VXNlciwgJ3Bhc3N3b3JkX2hhc2gnPiB7XG4gIHBhc3N3b3JkX2hhc2g6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VyV2l0aG91dFBhc3N3b3JkIGV4dGVuZHMgT21pdDxVc2VyLCAncGFzc3dvcmRfaGFzaCc+IHtcbiAgcGFzc3dvcmRfaGFzaD86IG5ldmVyO1xufVxuXG5leHBvcnQgY2xhc3MgVXNlck1vZGVsIHtcbiAgcHJpdmF0ZSBwb29sOiBQb29sO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucG9vbCA9IGdldFBvb2woKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgdXNlclxuICAgKi9cbiAgYXN5bmMgY3JlYXRlVXNlcih1c2VyRGF0YTogQ3JlYXRlVXNlckRhdGEpOiBQcm9taXNlPFVzZXJXaXRob3V0UGFzc3dvcmQ+IHtcbiAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCwgZmlyc3RfbmFtZSwgbGFzdF9uYW1lLCByb2xlIH0gPSB1c2VyRGF0YTtcblxuICAgIC8vIFZhbGlkYXRlIHJvbGVcbiAgICBpZiAoIWlzVmFsaWRSb2xlKHJvbGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcm9sZTogJHtyb2xlfWApO1xuICAgIH1cblxuICAgIC8vIEhhc2ggcGFzc3dvcmRcbiAgICBjb25zdCBwYXNzd29yZF9oYXNoID0gYXdhaXQgYmNyeXB0Lmhhc2gocGFzc3dvcmQsIGNvbmZpZy5zZWN1cml0eS5iY3J5cHRSb3VuZHMpO1xuXG4gICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICBJTlNFUlQgSU5UTyB1c2VycyAoZW1haWwsIHBhc3N3b3JkX2hhc2gsIGZpcnN0X25hbWUsIGxhc3RfbmFtZSwgcm9sZSlcbiAgICAgIFZBTFVFUyAoJDEsICQyLCAkMywgJDQsICQ1KVxuICAgICAgUkVUVVJOSU5HIGlkLCBlbWFpbCwgcGFzc3dvcmRfaGFzaCwgZmlyc3RfbmFtZSwgbGFzdF9uYW1lLCByb2xlLCBpc19hY3RpdmUsIGNyZWF0ZWRfYXQsIHVwZGF0ZWRfYXRcbiAgICBgO1xuXG4gICAgY29uc3QgdmFsdWVzID0gW2VtYWlsLCBwYXNzd29yZF9oYXNoLCBmaXJzdF9uYW1lLCBsYXN0X25hbWUsIHJvbGVdO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucG9vbC5xdWVyeShxdWVyeSwgdmFsdWVzKTtcbiAgICAgIGNvbnN0IHVzZXIgPSByZXN1bHQucm93c1swXTtcbiAgICAgIFxuICAgICAgLy8gUmVtb3ZlIHBhc3N3b3JkX2hhc2ggZnJvbSByZXNwb25zZVxuICAgICAgY29uc3QgeyBwYXNzd29yZF9oYXNoOiBfLCAuLi51c2VyV2l0aG91dFBhc3N3b3JkIH0gPSB1c2VyO1xuICAgICAgcmV0dXJuIHVzZXJXaXRob3V0UGFzc3dvcmQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ2R1cGxpY2F0ZSBrZXknKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzJyk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmluZCB1c2VyIGJ5IElEXG4gICAqL1xuICBhc3luYyBmaW5kQnlJZChpZDogc3RyaW5nKTogUHJvbWlzZTxVc2VyV2l0aG91dFBhc3N3b3JkIHwgbnVsbD4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgU0VMRUNUIGlkLCBlbWFpbCwgcGFzc3dvcmRfaGFzaCwgZmlyc3RfbmFtZSwgbGFzdF9uYW1lLCByb2xlLCBpc19hY3RpdmUsIGNyZWF0ZWRfYXQsIHVwZGF0ZWRfYXRcbiAgICAgIEZST00gdXNlcnNcbiAgICAgIFdIRVJFIGlkID0gJDFcbiAgICBgO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucG9vbC5xdWVyeShxdWVyeSwgW2lkXSk7XG4gICAgICBpZiAocmVzdWx0LnJvd3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB1c2VyID0gcmVzdWx0LnJvd3NbMF07XG4gICAgICBjb25zdCB7IHBhc3N3b3JkX2hhc2g6IF8sIC4uLnVzZXJXaXRob3V0UGFzc3dvcmQgfSA9IHVzZXI7XG4gICAgICByZXR1cm4gdXNlcldpdGhvdXRQYXNzd29yZDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgdXNlciBieSBlbWFpbFxuICAgKi9cbiAgYXN5bmMgZmluZEJ5RW1haWwoZW1haWw6IHN0cmluZyk6IFByb21pc2U8VXNlcldpdGhQYXNzd29yZCB8IG51bGw+IHtcbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgIFNFTEVDVCBpZCwgZW1haWwsIHBhc3N3b3JkX2hhc2gsIGZpcnN0X25hbWUsIGxhc3RfbmFtZSwgcm9sZSwgaXNfYWN0aXZlLCBjcmVhdGVkX2F0LCB1cGRhdGVkX2F0XG4gICAgICBGUk9NIHVzZXJzXG4gICAgICBXSEVSRSBlbWFpbCA9ICQxXG4gICAgYDtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBvb2wucXVlcnkocXVlcnksIFtlbWFpbF0pO1xuICAgICAgaWYgKHJlc3VsdC5yb3dzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdC5yb3dzWzBdO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmluZCB1c2VyIGJ5IGVtYWlsICh3aXRob3V0IHBhc3N3b3JkKVxuICAgKi9cbiAgYXN5bmMgZmluZEJ5RW1haWxXaXRob3V0UGFzc3dvcmQoZW1haWw6IHN0cmluZyk6IFByb21pc2U8VXNlcldpdGhvdXRQYXNzd29yZCB8IG51bGw+IHtcbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgIFNFTEVDVCBpZCwgZW1haWwsIGZpcnN0X25hbWUsIGxhc3RfbmFtZSwgcm9sZSwgaXNfYWN0aXZlLCBjcmVhdGVkX2F0LCB1cGRhdGVkX2F0XG4gICAgICBGUk9NIHVzZXJzXG4gICAgICBXSEVSRSBlbWFpbCA9ICQxXG4gICAgYDtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBvb2wucXVlcnkocXVlcnksIFtlbWFpbF0pO1xuICAgICAgaWYgKHJlc3VsdC5yb3dzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdC5yb3dzWzBdO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHVzZXJcbiAgICovXG4gIGFzeW5jIHVwZGF0ZVVzZXIoaWQ6IHN0cmluZywgdXBkYXRlRGF0YTogVXBkYXRlVXNlckRhdGEpOiBQcm9taXNlPFVzZXJXaXRob3V0UGFzc3dvcmQgfCBudWxsPiB7XG4gICAgY29uc3QgZmllbGRzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IHZhbHVlczogYW55W10gPSBbXTtcbiAgICBsZXQgcGFyYW1Db3VudCA9IDE7XG5cbiAgICAvLyBCdWlsZCBkeW5hbWljIHF1ZXJ5XG4gICAgaWYgKHVwZGF0ZURhdGEuZW1haWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZmllbGRzLnB1c2goYGVtYWlsID0gJCR7cGFyYW1Db3VudCsrfWApO1xuICAgICAgdmFsdWVzLnB1c2godXBkYXRlRGF0YS5lbWFpbCk7XG4gICAgfVxuICAgIGlmICh1cGRhdGVEYXRhLmZpcnN0X25hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZmllbGRzLnB1c2goYGZpcnN0X25hbWUgPSAkJHtwYXJhbUNvdW50Kyt9YCk7XG4gICAgICB2YWx1ZXMucHVzaCh1cGRhdGVEYXRhLmZpcnN0X25hbWUpO1xuICAgIH1cbiAgICBpZiAodXBkYXRlRGF0YS5sYXN0X25hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZmllbGRzLnB1c2goYGxhc3RfbmFtZSA9ICQke3BhcmFtQ291bnQrK31gKTtcbiAgICAgIHZhbHVlcy5wdXNoKHVwZGF0ZURhdGEubGFzdF9uYW1lKTtcbiAgICB9XG4gICAgaWYgKHVwZGF0ZURhdGEucm9sZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIWlzVmFsaWRSb2xlKHVwZGF0ZURhdGEucm9sZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJvbGU6ICR7dXBkYXRlRGF0YS5yb2xlfWApO1xuICAgICAgfVxuICAgICAgZmllbGRzLnB1c2goYHJvbGUgPSAkJHtwYXJhbUNvdW50Kyt9YCk7XG4gICAgICB2YWx1ZXMucHVzaCh1cGRhdGVEYXRhLnJvbGUpO1xuICAgIH1cbiAgICBpZiAodXBkYXRlRGF0YS5pc19hY3RpdmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZmllbGRzLnB1c2goYGlzX2FjdGl2ZSA9ICQke3BhcmFtQ291bnQrK31gKTtcbiAgICAgIHZhbHVlcy5wdXNoKHVwZGF0ZURhdGEuaXNfYWN0aXZlKTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmluZEJ5SWQoaWQpO1xuICAgIH1cblxuICAgIC8vIEFkZCB1cGRhdGVkX2F0IHRpbWVzdGFtcFxuICAgIGZpZWxkcy5wdXNoKGB1cGRhdGVkX2F0ID0gJCR7cGFyYW1Db3VudCsrfWApO1xuICAgIHZhbHVlcy5wdXNoKG5ldyBEYXRlKCkpO1xuXG4gICAgLy8gQWRkIHVzZXIgSURcbiAgICB2YWx1ZXMucHVzaChpZCk7XG5cbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgIFVQREFURSB1c2Vyc1xuICAgICAgU0VUICR7ZmllbGRzLmpvaW4oJywgJyl9XG4gICAgICBXSEVSRSBpZCA9ICQke3BhcmFtQ291bnR9XG4gICAgICBSRVRVUk5JTkcgaWQsIGVtYWlsLCBmaXJzdF9uYW1lLCBsYXN0X25hbWUsIHJvbGUsIGlzX2FjdGl2ZSwgY3JlYXRlZF9hdCwgdXBkYXRlZF9hdFxuICAgIGA7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wb29sLnF1ZXJ5KHF1ZXJ5LCB2YWx1ZXMpO1xuICAgICAgaWYgKHJlc3VsdC5yb3dzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdC5yb3dzWzBdO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdkdXBsaWNhdGUga2V5JykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cycpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB1c2VyIHBhc3N3b3JkXG4gICAqL1xuICBhc3luYyB1cGRhdGVQYXNzd29yZChpZDogc3RyaW5nLCBuZXdQYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgcGFzc3dvcmRfaGFzaCA9IGF3YWl0IGJjcnlwdC5oYXNoKG5ld1Bhc3N3b3JkLCBjb25maWcuc2VjdXJpdHkuYmNyeXB0Um91bmRzKTtcbiAgICBcbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgIFVQREFURSB1c2Vyc1xuICAgICAgU0VUIHBhc3N3b3JkX2hhc2ggPSAkMSwgdXBkYXRlZF9hdCA9ICQyXG4gICAgICBXSEVSRSBpZCA9ICQzXG4gICAgYDtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBvb2wucXVlcnkocXVlcnksIFtwYXNzd29yZF9oYXNoLCBuZXcgRGF0ZSgpLCBpZF0pO1xuICAgICAgcmV0dXJuIHJlc3VsdC5yb3dDb3VudCA/IHJlc3VsdC5yb3dDb3VudCA+IDAgOiBmYWxzZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSB1c2VyXG4gICAqL1xuICBhc3luYyBkZWxldGVVc2VyKGlkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBxdWVyeSA9ICdERUxFVEUgRlJPTSB1c2VycyBXSEVSRSBpZCA9ICQxJztcbiAgICBcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wb29sLnF1ZXJ5KHF1ZXJ5LCBbaWRdKTtcbiAgICAgIHJldHVybiByZXN1bHQucm93Q291bnQgPyByZXN1bHQucm93Q291bnQgPiAwIDogZmFsc2U7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IGFsbCB1c2VycyAoZm9yIEhSIGFkbWluKVxuICAgKi9cbiAgYXN5bmMgbGlzdEFsbFVzZXJzKCk6IFByb21pc2U8VXNlcldpdGhvdXRQYXNzd29yZFtdPiB7XG4gICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICBTRUxFQ1QgaWQsIGVtYWlsLCBmaXJzdF9uYW1lLCBsYXN0X25hbWUsIHJvbGUsIGlzX2FjdGl2ZSwgY3JlYXRlZF9hdCwgdXBkYXRlZF9hdFxuICAgICAgRlJPTSB1c2Vyc1xuICAgICAgT1JERVIgQlkgY3JlYXRlZF9hdCBERVNDXG4gICAgYDtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBvb2wucXVlcnkocXVlcnkpO1xuICAgICAgcmV0dXJuIHJlc3VsdC5yb3dzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTGlzdCB1c2VycyBieSByb2xlXG4gICAqL1xuICBhc3luYyBsaXN0VXNlcnNCeVJvbGUocm9sZTogVXNlclJvbGUpOiBQcm9taXNlPFVzZXJXaXRob3V0UGFzc3dvcmRbXT4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgU0VMRUNUIGlkLCBlbWFpbCwgZmlyc3RfbmFtZSwgbGFzdF9uYW1lLCByb2xlLCBpc19hY3RpdmUsIGNyZWF0ZWRfYXQsIHVwZGF0ZWRfYXRcbiAgICAgIEZST00gdXNlcnNcbiAgICAgIFdIRVJFIHJvbGUgPSAkMVxuICAgICAgT1JERVIgQlkgY3JlYXRlZF9hdCBERVNDXG4gICAgYDtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBvb2wucXVlcnkocXVlcnksIFtyb2xlXSk7XG4gICAgICByZXR1cm4gcmVzdWx0LnJvd3M7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB1c2VyIGV4aXN0c1xuICAgKi9cbiAgYXN5bmMgdXNlckV4aXN0cyhlbWFpbDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgcXVlcnkgPSAnU0VMRUNUIDEgRlJPTSB1c2VycyBXSEVSRSBlbWFpbCA9ICQxJztcbiAgICBcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wb29sLnF1ZXJ5KHF1ZXJ5LCBbZW1haWxdKTtcbiAgICAgIHJldHVybiByZXN1bHQucm93cy5sZW5ndGggPiAwO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZ5IHBhc3N3b3JkXG4gICAqL1xuICBhc3luYyB2ZXJpZnlQYXNzd29yZChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHRoaXMuZmluZEJ5RW1haWwoZW1haWwpO1xuICAgIGlmICghdXNlcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBiY3J5cHQuY29tcGFyZShwYXNzd29yZCwgdXNlci5wYXNzd29yZF9oYXNoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdXNlciBjb3VudCBieSByb2xlXG4gICAqL1xuICBhc3luYyBnZXRVc2VyQ291bnRCeVJvbGUocm9sZTogVXNlclJvbGUpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0gJ1NFTEVDVCBDT1VOVCgqKSBGUk9NIHVzZXJzIFdIRVJFIHJvbGUgPSAkMSc7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucG9vbC5xdWVyeShxdWVyeSwgW3JvbGVdKTtcbiAgICAgIHJldHVybiBwYXJzZUludChyZXN1bHQucm93c1swXS5jb3VudCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdG90YWwgdXNlciBjb3VudFxuICAgKi9cbiAgYXN5bmMgZ2V0VG90YWxVc2VyQ291bnQoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCBxdWVyeSA9ICdTRUxFQ1QgQ09VTlQoKikgRlJPTSB1c2Vycyc7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucG9vbC5xdWVyeShxdWVyeSk7XG4gICAgICByZXR1cm4gcGFyc2VJbnQocmVzdWx0LnJvd3NbMF0uY291bnQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbn1cblxuLy8gRXhwb3J0IHNpbmdsZXRvbiBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IHVzZXJNb2RlbCA9IG5ldyBVc2VyTW9kZWwoKTsgIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsTUFBQUEsVUFBQTtBQUFBO0FBQUEsQ0FBQUMsY0FBQSxHQUFBQyxDQUFBLE9BQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUNBLE1BQUFDLFVBQUE7QUFBQTtBQUFBLENBQUFKLGNBQUEsR0FBQUMsQ0FBQSxPQUFBRSxPQUFBO0FBQ0EsTUFBQUUsYUFBQTtBQUFBO0FBQUEsQ0FBQUwsY0FBQSxHQUFBQyxDQUFBLE9BQUFFLE9BQUE7QUFDQSxNQUFBRyxP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