{"version":3,"names":["cov_1m5gz5pe6i","actualCoverage","s","jwt_1","require","authService_1","getRequestId","req","f","b","requestId","authenticate","res","next","method","token","extractTokenFromHeader","headers","authorization","status","json","success","message","error","timestamp","Date","toISOString","result","authService","validateToken","user","data","exports","authenticateOptional","_res","requireAuth","getCurrentUser","requireRole","requiredRole","role","requireAnyRole","allowedRoles","includes"],"sources":["/home/kim/tito/server/src/middleware/auth/authenticate.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { extractTokenFromHeader } from '../../config/jwt';\nimport { authService } from '../../services/auth/authService';\nimport { ApiResponse } from '../../utils/types/express';\n\n/**\n * Helper function to get request ID safely\n */\nconst getRequestId = (req: Request): string => {\n  return req.requestId || 'unknown';\n};\n\n/**\n * Authenticate middleware - validates JWT token and sets user info\n */\nexport const authenticate = async (\n  req: Request,\n  res: Response<ApiResponse>,\n  next: NextFunction\n): Promise<void> => {\n  try {\n    // Handle CORS preflight requests\n    if (req.method === 'OPTIONS') {\n      next();\n      return;\n    }\n\n    // NOTE: Development authentication bypass removed for security\n    // All requests must use proper JWT authentication\n\n    const token = extractTokenFromHeader(req.headers.authorization);\n    \n    if (!token) {\n      res.status(401).json({\n        success: false,\n        message: 'Access token required',\n        error: 'MISSING_TOKEN',\n        timestamp: new Date().toISOString(),\n        requestId: getRequestId(req)\n      });\n      return;\n    }\n\n    const result = await authService.validateToken(token);\n    \n    if (!result.success) {\n      res.status(401).json({\n        success: false,\n        message: result.message,\n        error: result.error || 'INVALID_TOKEN',\n        timestamp: new Date().toISOString(),\n        requestId: getRequestId(req)\n      });\n      return;\n    }\n\n    // Set user info in request\n    req.user = result.data?.user;\n    next();\n  } catch (error) {\n    res.status(401).json({\n      success: false,\n      message: 'Authentication failed',\n      error: 'AUTHENTICATION_FAILED',\n      timestamp: new Date().toISOString(),\n      requestId: getRequestId(req)\n    });\n  }\n};\n\n/**\n * Optional authentication middleware - sets user info if token is valid\n */\nexport const authenticateOptional = async (\n  req: Request,\n  _res: Response,\n  next: NextFunction\n): Promise<void> => {\n  try {\n    const token = extractTokenFromHeader(req.headers.authorization);\n    \n    if (token) {\n      const result = await authService.validateToken(token);\n      if (result.success) {\n        req.user = result.data?.user;\n      }\n    }\n    \n    next();\n  } catch (error) {\n    // Continue without authentication\n    next();\n  }\n};\n\n/**\n * Require authentication - ensures user is logged in\n */\nexport const requireAuth = (\n  req: Request,\n  res: Response<ApiResponse>,\n  next: NextFunction\n): void => {\n  if (!req.user) {\n    res.status(401).json({\n      success: false,\n      message: 'Authentication required',\n      error: 'AUTHENTICATION_REQUIRED',\n      timestamp: new Date().toISOString(),\n      requestId: getRequestId(req)\n    });\n    return;\n  }\n  next();\n};\n\n/**\n * Get current user from request\n */\nexport const getCurrentUser = (req: Request) => {\n  return req.user;\n};\n\n/**\n * Require specific role\n */\nexport const requireRole = (requiredRole: string) => {\n  return (req: Request, res: Response<ApiResponse>, next: NextFunction): void => {\n    if (!req.user) {\n      res.status(401).json({\n        success: false,\n        message: 'Authentication required',\n        error: 'AUTHENTICATION_REQUIRED',\n        timestamp: new Date().toISOString(),\n        requestId: getRequestId(req)\n      });\n      return;\n    }\n\n    if (req.user.role !== requiredRole) {\n      res.status(403).json({\n        success: false,\n        message: 'Insufficient permissions',\n        error: 'INSUFFICIENT_PERMISSIONS',\n        timestamp: new Date().toISOString(),\n        requestId: getRequestId(req)\n      });\n      return;\n    }\n\n    next();\n  };\n};\n\n/**\n * Require any of the specified roles\n */\nexport const requireAnyRole = (allowedRoles: string[]) => {\n  return (req: Request, res: Response<ApiResponse>, next: NextFunction): void => {\n    if (!req.user) {\n      res.status(401).json({\n        success: false,\n        message: 'Authentication required',\n        error: 'AUTHENTICATION_REQUIRED',\n        timestamp: new Date().toISOString(),\n        requestId: getRequestId(req)\n      });\n      return;\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      res.status(403).json({\n        success: false,\n        message: 'Insufficient permissions',\n        error: 'INSUFFICIENT_PERMISSIONS',\n        timestamp: new Date().toISOString(),\n        requestId: getRequestId(req)\n      });\n      return;\n    }\n\n    next();\n  };\n}; "],"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","ignoreList":[]}