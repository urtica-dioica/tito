{"file":"/home/kim/tito/server/src/config/database.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/src/config/database.ts"],"sourcesContent":["import { Pool, PoolConfig } from 'pg';\nimport { config } from './environment';\n\n// Database connection configuration\nconst dbConfig: PoolConfig = process.env.DATABASE_URL ? {\n  connectionString: process.env.DATABASE_URL,\n  max: config.database.maxConnections,\n  idleTimeoutMillis: config.database.idleTimeoutMillis,\n  connectionTimeoutMillis: config.database.connectionTimeoutMillis,\n  // Additional connection options\n  allowExitOnIdle: false,\n  query_timeout: 60000,\n  statement_timeout: 60000,\n} : {\n  host: config.database.host,\n  port: config.database.port,\n  database: config.database.name,\n  user: config.database.user,\n  password: config.database.password,\n  ssl: config.database.ssl ? { rejectUnauthorized: false } : false,\n  max: config.database.maxConnections,\n  idleTimeoutMillis: config.database.idleTimeoutMillis,\n  connectionTimeoutMillis: config.database.connectionTimeoutMillis,\n  // Additional connection options\n  allowExitOnIdle: false,\n  query_timeout: 60000,\n  statement_timeout: 60000,\n};\n\n// Create the connection pool\nexport const pool = new Pool(dbConfig);\n\n// Handle pool events\npool.on('connect', () => {\n  console.log('New client connected to PostgreSQL');\n});\n\npool.on('error', (err) => {\n  console.error('Unexpected error on idle client', err);\n  process.exit(-1);\n});\n\npool.on('remove', () => {\n  console.log('Client removed from pool');\n});\n\n// Test database connection\nexport const testConnection = async (): Promise<boolean> => {\n  try {\n    const client = await pool.connect();\n    const result = await client.query('SELECT NOW()');\n    client.release();\n    console.log('Database connection successful:', result.rows[0].now);\n    return true;\n  } catch (error) {\n    console.error('Database connection failed:', error);\n    return false;\n  }\n};\n\n// Close database pool\nexport const closePool = async (): Promise<void> => {\n  try {\n    await pool.end();\n    console.log('Database pool closed successfully');\n  } catch (error) {\n    console.error('Error closing database pool:', error);\n  }\n};\n\n// Get database pool instance\nexport const getPool = (): Pool => pool;\n\n// Health check for database\nexport const healthCheck = async (): Promise<{ status: string; timestamp: string; responseTime: number }> => {\n  const start = Date.now();\n  try {\n    const client = await pool.connect();\n    await client.query('SELECT 1');\n    client.release();\n    const responseTime = Date.now() - start;\n    \n    return {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      responseTime,\n    };\n  } catch (error) {\n    const responseTime = Date.now() - start;\n    return {\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      responseTime,\n    };\n  }\n}; "],"version":3}