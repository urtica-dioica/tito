{"version":3,"names":["cov_10o5jfi1yy","actualCoverage","redisService_1","s","require","redis_1","logger_1","__importDefault","createRedisRateLimit","config","f","req","res","next","isRedisAvailable","b","default","warn","key","keyGenerator","ip","path","currentCount","redisService","incrementRateLimit","Math","ceil","windowMs","maxRequests","resetTime","retryAfter","set","toString","statusCode","message","status","json","success","error","rateLimit","limit","remaining","reset","max","exports","createUserRateLimit","userId","user","createDepartmentRateLimit","departmentId","params","rateLimitConfigs","auth","api","department","upload","getRateLimitInfo","count","getRateLimit","resetRateLimit","deleteCache"],"sources":["/home/kim/tito/server/src/middleware/redis/rateLimitMiddleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { redisService } from '../../services/redis/redisService';\nimport { isRedisAvailable } from '../../config/redis';\nimport logger from '../../utils/logger';\n\nexport interface RateLimitConfig {\n  windowMs: number;        // Time window in milliseconds\n  maxRequests: number;     // Maximum requests per window\n  keyGenerator?: (req: Request) => string; // Custom key generator\n  skipSuccessfulRequests?: boolean; // Skip counting successful requests\n  skipFailedRequests?: boolean;     // Skip counting failed requests\n  message?: string;        // Custom error message\n  statusCode?: number;     // Custom status code\n}\n\nexport interface RateLimitInfo {\n  limit: number;\n  remaining: number;\n  reset: number;\n  retryAfter: number;\n}\n\n/**\n * Redis-based rate limiting middleware\n */\nexport const createRedisRateLimit = (config: RateLimitConfig) => {\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // Skip rate limiting if Redis is not available (e.g., in test environment)\n      if (!isRedisAvailable()) {\n        logger.warn('Redis not available, skipping rate limiting');\n        return next();\n      }\n\n      // Generate rate limit key\n      const key = config.keyGenerator ? \n        config.keyGenerator(req) : \n        `rate_limit:${req.ip || 'unknown'}:${req.path}`;\n\n      // Check if rate limit is exceeded\n      const currentCount = await redisService.incrementRateLimit(key, Math.ceil(config.windowMs / 1000));\n      \n      if (currentCount > config.maxRequests) {\n        // Rate limit exceeded\n        const resetTime = Math.ceil(config.windowMs / 1000);\n        const retryAfter = resetTime;\n        \n        // Set rate limit headers\n        res.set({\n          'X-RateLimit-Limit': config.maxRequests.toString(),\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': resetTime.toString(),\n          'Retry-After': retryAfter.toString()\n        });\n\n        const statusCode = config.statusCode || 429;\n        const message = config.message || 'Too many requests, please try again later.';\n\n        res.status(statusCode).json({\n          success: false,\n          message,\n          error: 'RATE_LIMIT_EXCEEDED',\n          rateLimit: {\n            limit: config.maxRequests,\n            remaining: 0,\n            reset: resetTime,\n            retryAfter\n          }\n        });\n        return;\n      }\n\n      // Rate limit not exceeded, set headers\n      const remaining = Math.max(0, config.maxRequests - currentCount);\n      const resetTime = Math.ceil(config.windowMs / 1000);\n\n      res.set({\n        'X-RateLimit-Limit': config.maxRequests.toString(),\n        'X-RateLimit-Remaining': remaining.toString(),\n        'X-RateLimit-Reset': resetTime.toString()\n      });\n\n      // Continue to next middleware\n      next();\n    } catch (error) {\n      logger.error('Rate limiting error:', error);\n      // On Redis error, allow request to proceed\n      next();\n    }\n  };\n};\n\n/**\n * User-specific rate limiting (based on user ID)\n */\nexport const createUserRateLimit = (config: RateLimitConfig) => {\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // Get user ID from request (assuming it's set by auth middleware)\n      const userId = (req as any).user?.userId || req.ip || 'unknown';\n      const key = `rate_limit:user:${userId}:${req.path}`;\n\n      const currentCount = await redisService.incrementRateLimit(key, Math.ceil(config.windowMs / 1000));\n      \n      if (currentCount > config.maxRequests) {\n        const resetTime = Math.ceil(config.windowMs / 1000);\n        const retryAfter = resetTime;\n        \n        res.set({\n          'X-RateLimit-Limit': config.maxRequests.toString(),\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': resetTime.toString(),\n          'Retry-After': retryAfter.toString()\n        });\n\n        res.status(429).json({\n          success: false,\n          message: 'User rate limit exceeded',\n          error: 'USER_RATE_LIMIT_EXCEEDED',\n          rateLimit: {\n            limit: config.maxRequests,\n            remaining: 0,\n            reset: resetTime,\n            retryAfter\n          }\n        });\n        return;\n      }\n\n      const remaining = Math.max(0, config.maxRequests - currentCount);\n      const resetTime = Math.ceil(config.windowMs / 1000);\n\n      res.set({\n        'X-RateLimit-Limit': config.maxRequests.toString(),\n        'X-RateLimit-Remaining': remaining.toString(),\n        'X-RateLimit-Reset': resetTime.toString()\n      });\n\n      next();\n    } catch (error) {\n      logger.error('User rate limiting error:', error);\n      next();\n    }\n  };\n};\n\n/**\n * Department-specific rate limiting\n */\nexport const createDepartmentRateLimit = (config: RateLimitConfig) => {\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // Get department ID from request\n      const departmentId = (req as any).user?.['departmentId'] || req.params['departmentId'] || 'unknown';\n      const key = `rate_limit:dept:${departmentId}:${req.path}`;\n\n      const currentCount = await redisService.incrementRateLimit(key, Math.ceil(config.windowMs / 1000));\n      \n      if (currentCount > config.maxRequests) {\n        const resetTime = Math.ceil(config.windowMs / 1000);\n        const retryAfter = resetTime;\n        \n        res.set({\n          'X-RateLimit-Limit': config.maxRequests.toString(),\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': resetTime.toString(),\n          'Retry-After': retryAfter.toString()\n        });\n\n        res.status(429).json({\n          success: false,\n          message: 'Department rate limit exceeded',\n          error: 'DEPARTMENT_RATE_LIMIT_EXCEEDED',\n          rateLimit: {\n            limit: config.maxRequests,\n            remaining: 0,\n            reset: resetTime,\n            retryAfter\n          }\n        });\n        return;\n      }\n\n      const remaining = Math.max(0, config.maxRequests - currentCount);\n      const resetTime = Math.ceil(config.windowMs / 1000);\n\n      res.set({\n        'X-RateLimit-Limit': config.maxRequests.toString(),\n        'X-RateLimit-Remaining': remaining.toString(),\n        'X-RateLimit-Reset': resetTime.toString()\n      });\n\n      next();\n    } catch (error) {\n      logger.error('Department rate limiting error:', error);\n      next();\n    }\n  };\n};\n\n/**\n * Predefined rate limit configurations\n */\nexport const rateLimitConfigs = {\n  // Strict rate limiting for authentication endpoints\n  auth: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 5,\n    message: 'Too many authentication attempts, please try again later.'\n  },\n\n  // Standard rate limiting for API endpoints\n  api: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 100,\n    message: 'API rate limit exceeded, please try again later.'\n  },\n\n  // User-specific rate limiting\n  user: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 50,\n    message: 'User rate limit exceeded, please try again later.'\n  },\n\n  // Department-specific rate limiting\n  department: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 200,\n    message: 'Department rate limit exceeded, please try again later.'\n  },\n\n  // File upload rate limiting\n  upload: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 10,\n    message: 'Upload rate limit exceeded, please try again later.'\n  }\n};\n\n/**\n * Get rate limit information for a key\n */\nexport const getRateLimitInfo = async (key: string): Promise<RateLimitInfo | null> => {\n  try {\n    const count = await redisService.getRateLimit(key);\n    if (count === null) return null;\n\n    // This is a simplified version - in production you'd want to store the limit and window\n    const limit = 100; // Default limit\n    const remaining = Math.max(0, limit - count);\n    const reset = 60; // Default 60 seconds\n    const retryAfter = count >= limit ? reset : 0;\n\n    return { limit, remaining, reset, retryAfter };\n  } catch (error) {\n    logger.error('Failed to get rate limit info:', error);\n    return null;\n  }\n};\n\n/**\n * Reset rate limit for a key\n */\nexport const resetRateLimit = async (key: string): Promise<void> => {\n  try {\n    await redisService.deleteCache(key);\n  } catch (error) {\n    logger.error('Failed to reset rate limit:', error);\n  }\n}; "],"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","ignoreList":[]}