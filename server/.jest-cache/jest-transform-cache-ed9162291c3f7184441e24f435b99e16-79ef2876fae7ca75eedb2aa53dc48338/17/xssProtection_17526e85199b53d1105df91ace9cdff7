1c3e240125b110bf65da5a4fa82bbb51
"use strict";

/* istanbul ignore next */
function cov_2bunwi6kft() {
  var path = "/home/kim/tito/server/src/middleware/security/xssProtection.ts";
  var hash = "086fb66e5422d09085a3a067fea2fd28a4336877";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/middleware/security/xssProtection.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 136
        }
      },
      "2": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 122,
          column: 1
        }
      },
      "3": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 127,
          column: 61
        }
      },
      "4": {
        start: {
          line: 127,
          column: 40
        },
        end: {
          line: 127,
          column: 59
        }
      },
      "5": {
        start: {
          line: 133,
          column: 4
        },
        end: {
          line: 153,
          column: 5
        }
      },
      "6": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "7": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 71
        }
      },
      "8": {
        start: {
          line: 138,
          column: 9
        },
        end: {
          line: 153,
          column: 5
        }
      },
      "9": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "10": {
        start: {
          line: 139,
          column: 21
        },
        end: {
          line: 139,
          column: 22
        }
      },
      "11": {
        start: {
          line: 140,
          column: 27
        },
        end: {
          line: 140,
          column: 52
        }
      },
      "12": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 143,
          column: 13
        }
      },
      "13": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 142,
          column: 83
        }
      },
      "14": {
        start: {
          line: 146,
          column: 9
        },
        end: {
          line: 153,
          column: 5
        }
      },
      "15": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "16": {
        start: {
          line: 148,
          column: 27
        },
        end: {
          line: 148,
          column: 51
        }
      },
      "17": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "18": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 73
        }
      },
      "19": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 154,
          column: 51
        }
      },
      "20": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 188,
          column: 34
        }
      },
      "21": {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 196,
          column: 5
        }
      },
      "22": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 35
        }
      },
      "23": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 199,
          column: 5
        }
      },
      "24": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 53
        }
      },
      "25": {
        start: {
          line: 198,
          column: 31
        },
        end: {
          line: 198,
          column: 51
        }
      },
      "26": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 206,
          column: 5
        }
      },
      "27": {
        start: {
          line: 201,
          column: 26
        },
        end: {
          line: 201,
          column: 28
        }
      },
      "28": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "29": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 51
        }
      },
      "30": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 25
        }
      },
      "31": {
        start: {
          line: 207,
          column: 4
        },
        end: {
          line: 207,
          column: 15
        }
      },
      "32": {
        start: {
          line: 212,
          column: 19
        },
        end: {
          line: 309,
          column: 1
        }
      },
      "33": {
        start: {
          line: 213,
          column: 4
        },
        end: {
          line: 308,
          column: 5
        }
      },
      "34": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 233,
          column: 9
        }
      },
      "35": {
        start: {
          line: 216,
          column: 30
        },
        end: {
          line: 216,
          column: 57
        }
      },
      "36": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "37": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 230,
          column: 19
        }
      },
      "38": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 23
        }
      },
      "39": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "40": {
        start: {
          line: 236,
          column: 31
        },
        end: {
          line: 236,
          column: 59
        }
      },
      "41": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "42": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 250,
          column: 19
        }
      },
      "43": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 23
        }
      },
      "44": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "45": {
        start: {
          line: 256,
          column: 32
        },
        end: {
          line: 256,
          column: 61
        }
      },
      "46": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 272,
          column: 13
        }
      },
      "47": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 270,
          column: 19
        }
      },
      "48": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 23
        }
      },
      "49": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "50": {
        start: {
          line: 276,
          column: 33
        },
        end: {
          line: 276,
          column: 63
        }
      },
      "51": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 292,
          column: 13
        }
      },
      "52": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 290,
          column: 19
        }
      },
      "53": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 23
        }
      },
      "54": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 15
        }
      },
      "55": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 54
        }
      },
      "56": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 306,
          column: 11
        }
      },
      "57": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 307,
          column: 15
        }
      },
      "58": {
        start: {
          line: 310,
          column: 0
        },
        end: {
          line: 310,
          column: 32
        }
      },
      "59": {
        start: {
          line: 314,
          column: 35
        },
        end: {
          line: 343,
          column: 1
        }
      },
      "60": {
        start: {
          line: 315,
          column: 4
        },
        end: {
          line: 342,
          column: 5
        }
      },
      "61": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "62": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 48
        }
      },
      "63": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 323,
          column: 9
        }
      },
      "64": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 50
        }
      },
      "65": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 327,
          column: 9
        }
      },
      "66": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 52
        }
      },
      "67": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 15
        }
      },
      "68": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 332,
          column: 56
        }
      },
      "69": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 340,
          column: 11
        }
      },
      "70": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 15
        }
      },
      "71": {
        start: {
          line: 344,
          column: 0
        },
        end: {
          line: 344,
          column: 64
        }
      },
      "72": {
        start: {
          line: 348,
          column: 30
        },
        end: {
          line: 508,
          column: 1
        }
      },
      "73": {
        start: {
          line: 349,
          column: 22
        },
        end: {
          line: 349,
          column: 32
        }
      },
      "74": {
        start: {
          line: 350,
          column: 4
        },
        end: {
          line: 507,
          column: 5
        }
      },
      "75": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 381,
          column: 9
        }
      },
      "76": {
        start: {
          line: 353,
          column: 30
        },
        end: {
          line: 353,
          column: 57
        }
      },
      "77": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 380,
          column: 13
        }
      },
      "78": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 365,
          column: 19
        }
      },
      "79": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 378,
          column: 19
        }
      },
      "80": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 379,
          column: 23
        }
      },
      "81": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "82": {
        start: {
          line: 384,
          column: 31
        },
        end: {
          line: 384,
          column: 59
        }
      },
      "83": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 410,
          column: 13
        }
      },
      "84": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 395,
          column: 19
        }
      },
      "85": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 408,
          column: 19
        }
      },
      "86": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 409,
          column: 23
        }
      },
      "87": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 441,
          column: 9
        }
      },
      "88": {
        start: {
          line: 414,
          column: 32
        },
        end: {
          line: 414,
          column: 61
        }
      },
      "89": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 440,
          column: 13
        }
      },
      "90": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 425,
          column: 19
        }
      },
      "91": {
        start: {
          line: 426,
          column: 16
        },
        end: {
          line: 438,
          column: 19
        }
      },
      "92": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 439,
          column: 23
        }
      },
      "93": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 471,
          column: 9
        }
      },
      "94": {
        start: {
          line: 444,
          column: 33
        },
        end: {
          line: 444,
          column: 63
        }
      },
      "95": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 470,
          column: 13
        }
      },
      "96": {
        start: {
          line: 446,
          column: 16
        },
        end: {
          line: 455,
          column: 19
        }
      },
      "97": {
        start: {
          line: 456,
          column: 16
        },
        end: {
          line: 468,
          column: 19
        }
      },
      "98": {
        start: {
          line: 469,
          column: 16
        },
        end: {
          line: 469,
          column: 23
        }
      },
      "99": {
        start: {
          line: 473,
          column: 25
        },
        end: {
          line: 473,
          column: 47
        }
      },
      "100": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 483,
          column: 9
        }
      },
      "101": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 482,
          column: 15
        }
      },
      "102": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 484,
          column: 15
        }
      },
      "103": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 487,
          column: 54
        }
      },
      "104": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 496,
          column: 11
        }
      },
      "105": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 505,
          column: 11
        }
      },
      "106": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 506,
          column: 15
        }
      },
      "107": {
        start: {
          line: 509,
          column: 0
        },
        end: {
          line: 509,
          column: 54
        }
      },
      "108": {
        start: {
          line: 513,
          column: 37
        },
        end: {
          line: 592,
          column: 1
        }
      },
      "109": {
        start: {
          line: 514,
          column: 4
        },
        end: {
          line: 591,
          column: 6
        }
      },
      "110": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 590,
          column: 9
        }
      },
      "111": {
        start: {
          line: 516,
          column: 31
        },
        end: {
          line: 543,
          column: 13
        }
      },
      "112": {
        start: {
          line: 517,
          column: 16
        },
        end: {
          line: 541,
          column: 17
        }
      },
      "113": {
        start: {
          line: 519,
          column: 20
        },
        end: {
          line: 524,
          column: 21
        }
      },
      "114": {
        start: {
          line: 519,
          column: 53
        },
        end: {
          line: 519,
          column: 72
        }
      },
      "115": {
        start: {
          line: 521,
          column: 24
        },
        end: {
          line: 523,
          column: 25
        }
      },
      "116": {
        start: {
          line: 521,
          column: 61
        },
        end: {
          line: 521,
          column: 80
        }
      },
      "117": {
        start: {
          line: 522,
          column: 28
        },
        end: {
          line: 522,
          column: 89
        }
      },
      "118": {
        start: {
          line: 526,
          column: 21
        },
        end: {
          line: 541,
          column: 17
        }
      },
      "119": {
        start: {
          line: 527,
          column: 20
        },
        end: {
          line: 532,
          column: 21
        }
      },
      "120": {
        start: {
          line: 527,
          column: 33
        },
        end: {
          line: 527,
          column: 34
        }
      },
      "121": {
        start: {
          line: 528,
          column: 39
        },
        end: {
          line: 528,
          column: 59
        }
      },
      "122": {
        start: {
          line: 529,
          column: 24
        },
        end: {
          line: 531,
          column: 25
        }
      },
      "123": {
        start: {
          line: 530,
          column: 28
        },
        end: {
          line: 530,
          column: 95
        }
      },
      "124": {
        start: {
          line: 534,
          column: 21
        },
        end: {
          line: 541,
          column: 17
        }
      },
      "125": {
        start: {
          line: 535,
          column: 20
        },
        end: {
          line: 540,
          column: 21
        }
      },
      "126": {
        start: {
          line: 536,
          column: 39
        },
        end: {
          line: 536,
          column: 56
        }
      },
      "127": {
        start: {
          line: 537,
          column: 24
        },
        end: {
          line: 539,
          column: 25
        }
      },
      "128": {
        start: {
          line: 538,
          column: 28
        },
        end: {
          line: 538,
          column: 85
        }
      },
      "129": {
        start: {
          line: 542,
          column: 16
        },
        end: {
          line: 542,
          column: 63
        }
      },
      "130": {
        start: {
          line: 545,
          column: 12
        },
        end: {
          line: 555,
          column: 13
        }
      },
      "131": {
        start: {
          line: 546,
          column: 16
        },
        end: {
          line: 553,
          column: 19
        }
      },
      "132": {
        start: {
          line: 554,
          column: 16
        },
        end: {
          line: 554,
          column: 23
        }
      },
      "133": {
        start: {
          line: 556,
          column: 12
        },
        end: {
          line: 566,
          column: 13
        }
      },
      "134": {
        start: {
          line: 557,
          column: 16
        },
        end: {
          line: 564,
          column: 19
        }
      },
      "135": {
        start: {
          line: 565,
          column: 16
        },
        end: {
          line: 565,
          column: 23
        }
      },
      "136": {
        start: {
          line: 567,
          column: 12
        },
        end: {
          line: 577,
          column: 13
        }
      },
      "137": {
        start: {
          line: 568,
          column: 16
        },
        end: {
          line: 575,
          column: 19
        }
      },
      "138": {
        start: {
          line: 576,
          column: 16
        },
        end: {
          line: 576,
          column: 23
        }
      },
      "139": {
        start: {
          line: 578,
          column: 12
        },
        end: {
          line: 578,
          column: 19
        }
      },
      "140": {
        start: {
          line: 581,
          column: 12
        },
        end: {
          line: 581,
          column: 68
        }
      },
      "141": {
        start: {
          line: 582,
          column: 12
        },
        end: {
          line: 588,
          column: 15
        }
      },
      "142": {
        start: {
          line: 589,
          column: 12
        },
        end: {
          line: 589,
          column: 19
        }
      },
      "143": {
        start: {
          line: 593,
          column: 0
        },
        end: {
          line: 593,
          column: 68
        }
      }
    },
    fnMap: {
      "0": {
        name: "containsXss",
        decl: {
          start: {
            line: 126,
            column: 9
          },
          end: {
            line: 126,
            column: 20
          }
        },
        loc: {
          start: {
            line: 126,
            column: 28
          },
          end: {
            line: 128,
            column: 1
          }
        },
        line: 126
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 127,
            column: 29
          },
          end: {
            line: 127,
            column: 30
          }
        },
        loc: {
          start: {
            line: 127,
            column: 40
          },
          end: {
            line: 127,
            column: 59
          }
        },
        line: 127
      },
      "2": {
        name: "checkObjectForXss",
        decl: {
          start: {
            line: 132,
            column: 9
          },
          end: {
            line: 132,
            column: 26
          }
        },
        loc: {
          start: {
            line: 132,
            column: 32
          },
          end: {
            line: 155,
            column: 1
          }
        },
        line: 132
      },
      "3": {
        name: "sanitizeString",
        decl: {
          start: {
            line: 159,
            column: 9
          },
          end: {
            line: 159,
            column: 23
          }
        },
        loc: {
          start: {
            line: 159,
            column: 31
          },
          end: {
            line: 189,
            column: 1
          }
        },
        line: 159
      },
      "4": {
        name: "sanitizeObject",
        decl: {
          start: {
            line: 193,
            column: 9
          },
          end: {
            line: 193,
            column: 23
          }
        },
        loc: {
          start: {
            line: 193,
            column: 29
          },
          end: {
            line: 208,
            column: 1
          }
        },
        line: 193
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 198,
            column: 23
          },
          end: {
            line: 198,
            column: 24
          }
        },
        loc: {
          start: {
            line: 198,
            column: 31
          },
          end: {
            line: 198,
            column: 51
          }
        },
        line: 198
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 212,
            column: 19
          },
          end: {
            line: 212,
            column: 20
          }
        },
        loc: {
          start: {
            line: 212,
            column: 39
          },
          end: {
            line: 309,
            column: 1
          }
        },
        line: 212
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 314,
            column: 35
          },
          end: {
            line: 314,
            column: 36
          }
        },
        loc: {
          start: {
            line: 314,
            column: 55
          },
          end: {
            line: 343,
            column: 1
          }
        },
        line: 314
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 348,
            column: 30
          },
          end: {
            line: 348,
            column: 31
          }
        },
        loc: {
          start: {
            line: 348,
            column: 50
          },
          end: {
            line: 508,
            column: 1
          }
        },
        line: 348
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 513,
            column: 37
          },
          end: {
            line: 513,
            column: 38
          }
        },
        loc: {
          start: {
            line: 513,
            column: 58
          },
          end: {
            line: 592,
            column: 1
          }
        },
        line: 513
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 514,
            column: 11
          },
          end: {
            line: 514,
            column: 12
          }
        },
        loc: {
          start: {
            line: 514,
            column: 31
          },
          end: {
            line: 591,
            column: 5
          }
        },
        line: 514
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 516,
            column: 31
          },
          end: {
            line: 516,
            column: 32
          }
        },
        loc: {
          start: {
            line: 516,
            column: 42
          },
          end: {
            line: 543,
            column: 13
          }
        },
        line: 516
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 519,
            column: 42
          },
          end: {
            line: 519,
            column: 43
          }
        },
        loc: {
          start: {
            line: 519,
            column: 53
          },
          end: {
            line: 519,
            column: 72
          }
        },
        line: 519
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 521,
            column: 50
          },
          end: {
            line: 521,
            column: 51
          }
        },
        loc: {
          start: {
            line: 521,
            column: 61
          },
          end: {
            line: 521,
            column: 80
          }
        },
        line: 521
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        }, {
          start: {
            line: 138,
            column: 9
          },
          end: {
            line: 153,
            column: 5
          }
        }],
        line: 133
      },
      "1": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "2": {
        loc: {
          start: {
            line: 138,
            column: 9
          },
          end: {
            line: 153,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 9
          },
          end: {
            line: 153,
            column: 5
          }
        }, {
          start: {
            line: 146,
            column: 9
          },
          end: {
            line: 153,
            column: 5
          }
        }],
        line: 138
      },
      "3": {
        loc: {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "4": {
        loc: {
          start: {
            line: 146,
            column: 9
          },
          end: {
            line: 153,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 9
          },
          end: {
            line: 153,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "5": {
        loc: {
          start: {
            line: 146,
            column: 13
          },
          end: {
            line: 146,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 13
          },
          end: {
            line: 146,
            column: 25
          }
        }, {
          start: {
            line: 146,
            column: 29
          },
          end: {
            line: 146,
            column: 52
          }
        }],
        line: 146
      },
      "6": {
        loc: {
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "7": {
        loc: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "8": {
        loc: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "9": {
        loc: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "10": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 200,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 200,
            column: 20
          }
        }, {
          start: {
            line: 200,
            column: 24
          },
          end: {
            line: 200,
            column: 47
          }
        }],
        line: 200
      },
      "11": {
        loc: {
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 233,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 233,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "12": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "13": {
        loc: {
          start: {
            line: 223,
            column: 31
          },
          end: {
            line: 223,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 31
          },
          end: {
            line: 223,
            column: 44
          }
        }, {
          start: {
            line: 223,
            column: 48
          },
          end: {
            line: 223,
            column: 57
          }
        }],
        line: 223
      },
      "14": {
        loc: {
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "15": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "16": {
        loc: {
          start: {
            line: 243,
            column: 31
          },
          end: {
            line: 243,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 31
          },
          end: {
            line: 243,
            column: 44
          }
        }, {
          start: {
            line: 243,
            column: 48
          },
          end: {
            line: 243,
            column: 57
          }
        }],
        line: 243
      },
      "17": {
        loc: {
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "18": {
        loc: {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "19": {
        loc: {
          start: {
            line: 263,
            column: 31
          },
          end: {
            line: 263,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 31
          },
          end: {
            line: 263,
            column: 44
          }
        }, {
          start: {
            line: 263,
            column: 48
          },
          end: {
            line: 263,
            column: 57
          }
        }],
        line: 263
      },
      "20": {
        loc: {
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "21": {
        loc: {
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "22": {
        loc: {
          start: {
            line: 283,
            column: 31
          },
          end: {
            line: 283,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 31
          },
          end: {
            line: 283,
            column: 44
          }
        }, {
          start: {
            line: 283,
            column: 48
          },
          end: {
            line: 283,
            column: 57
          }
        }],
        line: 283
      },
      "23": {
        loc: {
          start: {
            line: 304,
            column: 23
          },
          end: {
            line: 304,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 304,
            column: 23
          },
          end: {
            line: 304,
            column: 36
          }
        }, {
          start: {
            line: 304,
            column: 40
          },
          end: {
            line: 304,
            column: 49
          }
        }],
        line: 304
      },
      "24": {
        loc: {
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "25": {
        loc: {
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "26": {
        loc: {
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "27": {
        loc: {
          start: {
            line: 338,
            column: 23
          },
          end: {
            line: 338,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 23
          },
          end: {
            line: 338,
            column: 36
          }
        }, {
          start: {
            line: 338,
            column: 40
          },
          end: {
            line: 338,
            column: 49
          }
        }],
        line: 338
      },
      "28": {
        loc: {
          start: {
            line: 352,
            column: 8
          },
          end: {
            line: 381,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 352,
            column: 8
          },
          end: {
            line: 381,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 352
      },
      "29": {
        loc: {
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 380,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 380,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      },
      "30": {
        loc: {
          start: {
            line: 364,
            column: 31
          },
          end: {
            line: 364,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 364,
            column: 31
          },
          end: {
            line: 364,
            column: 44
          }
        }, {
          start: {
            line: 364,
            column: 48
          },
          end: {
            line: 364,
            column: 57
          }
        }],
        line: 364
      },
      "31": {
        loc: {
          start: {
            line: 371,
            column: 31
          },
          end: {
            line: 371,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 371,
            column: 31
          },
          end: {
            line: 371,
            column: 44
          }
        }, {
          start: {
            line: 371,
            column: 48
          },
          end: {
            line: 371,
            column: 57
          }
        }],
        line: 371
      },
      "32": {
        loc: {
          start: {
            line: 383,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 383,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 383
      },
      "33": {
        loc: {
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 410,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 410,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 385
      },
      "34": {
        loc: {
          start: {
            line: 394,
            column: 31
          },
          end: {
            line: 394,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 394,
            column: 31
          },
          end: {
            line: 394,
            column: 44
          }
        }, {
          start: {
            line: 394,
            column: 48
          },
          end: {
            line: 394,
            column: 57
          }
        }],
        line: 394
      },
      "35": {
        loc: {
          start: {
            line: 401,
            column: 31
          },
          end: {
            line: 401,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 401,
            column: 31
          },
          end: {
            line: 401,
            column: 44
          }
        }, {
          start: {
            line: 401,
            column: 48
          },
          end: {
            line: 401,
            column: 57
          }
        }],
        line: 401
      },
      "36": {
        loc: {
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 441,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 441,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "37": {
        loc: {
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 440,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 440,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "38": {
        loc: {
          start: {
            line: 424,
            column: 31
          },
          end: {
            line: 424,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 424,
            column: 31
          },
          end: {
            line: 424,
            column: 44
          }
        }, {
          start: {
            line: 424,
            column: 48
          },
          end: {
            line: 424,
            column: 57
          }
        }],
        line: 424
      },
      "39": {
        loc: {
          start: {
            line: 431,
            column: 31
          },
          end: {
            line: 431,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 431,
            column: 31
          },
          end: {
            line: 431,
            column: 44
          }
        }, {
          start: {
            line: 431,
            column: 48
          },
          end: {
            line: 431,
            column: 57
          }
        }],
        line: 431
      },
      "40": {
        loc: {
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 471,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 471,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 443
      },
      "41": {
        loc: {
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 470,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 470,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "42": {
        loc: {
          start: {
            line: 454,
            column: 31
          },
          end: {
            line: 454,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 454,
            column: 31
          },
          end: {
            line: 454,
            column: 44
          }
        }, {
          start: {
            line: 454,
            column: 48
          },
          end: {
            line: 454,
            column: 57
          }
        }],
        line: 454
      },
      "43": {
        loc: {
          start: {
            line: 461,
            column: 31
          },
          end: {
            line: 461,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 461,
            column: 31
          },
          end: {
            line: 461,
            column: 44
          }
        }, {
          start: {
            line: 461,
            column: 48
          },
          end: {
            line: 461,
            column: 57
          }
        }],
        line: 461
      },
      "44": {
        loc: {
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 483,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 483,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "45": {
        loc: {
          start: {
            line: 481,
            column: 27
          },
          end: {
            line: 481,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 481,
            column: 27
          },
          end: {
            line: 481,
            column: 40
          }
        }, {
          start: {
            line: 481,
            column: 44
          },
          end: {
            line: 481,
            column: 53
          }
        }],
        line: 481
      },
      "46": {
        loc: {
          start: {
            line: 495,
            column: 23
          },
          end: {
            line: 495,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 495,
            column: 23
          },
          end: {
            line: 495,
            column: 36
          }
        }, {
          start: {
            line: 495,
            column: 40
          },
          end: {
            line: 495,
            column: 49
          }
        }],
        line: 495
      },
      "47": {
        loc: {
          start: {
            line: 503,
            column: 23
          },
          end: {
            line: 503,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 503,
            column: 23
          },
          end: {
            line: 503,
            column: 36
          }
        }, {
          start: {
            line: 503,
            column: 40
          },
          end: {
            line: 503,
            column: 49
          }
        }],
        line: 503
      },
      "48": {
        loc: {
          start: {
            line: 517,
            column: 16
          },
          end: {
            line: 541,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 517,
            column: 16
          },
          end: {
            line: 541,
            column: 17
          }
        }, {
          start: {
            line: 526,
            column: 21
          },
          end: {
            line: 541,
            column: 17
          }
        }],
        line: 517
      },
      "49": {
        loc: {
          start: {
            line: 519,
            column: 20
          },
          end: {
            line: 524,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 519,
            column: 20
          },
          end: {
            line: 524,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 519
      },
      "50": {
        loc: {
          start: {
            line: 521,
            column: 24
          },
          end: {
            line: 523,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 521,
            column: 24
          },
          end: {
            line: 523,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 521
      },
      "51": {
        loc: {
          start: {
            line: 526,
            column: 21
          },
          end: {
            line: 541,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 526,
            column: 21
          },
          end: {
            line: 541,
            column: 17
          }
        }, {
          start: {
            line: 534,
            column: 21
          },
          end: {
            line: 541,
            column: 17
          }
        }],
        line: 526
      },
      "52": {
        loc: {
          start: {
            line: 529,
            column: 24
          },
          end: {
            line: 531,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 529,
            column: 24
          },
          end: {
            line: 531,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 529
      },
      "53": {
        loc: {
          start: {
            line: 534,
            column: 21
          },
          end: {
            line: 541,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 534,
            column: 21
          },
          end: {
            line: 541,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 534
      },
      "54": {
        loc: {
          start: {
            line: 534,
            column: 25
          },
          end: {
            line: 534,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 534,
            column: 25
          },
          end: {
            line: 534,
            column: 39
          }
        }, {
          start: {
            line: 534,
            column: 43
          },
          end: {
            line: 534,
            column: 68
          }
        }],
        line: 534
      },
      "55": {
        loc: {
          start: {
            line: 537,
            column: 24
          },
          end: {
            line: 539,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 537,
            column: 24
          },
          end: {
            line: 539,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 537
      },
      "56": {
        loc: {
          start: {
            line: 545,
            column: 12
          },
          end: {
            line: 555,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 545,
            column: 12
          },
          end: {
            line: 555,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 545
      },
      "57": {
        loc: {
          start: {
            line: 545,
            column: 16
          },
          end: {
            line: 545,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 545,
            column: 16
          },
          end: {
            line: 545,
            column: 24
          }
        }, {
          start: {
            line: 545,
            column: 28
          },
          end: {
            line: 545,
            column: 55
          }
        }],
        line: 545
      },
      "58": {
        loc: {
          start: {
            line: 551,
            column: 31
          },
          end: {
            line: 551,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 551,
            column: 31
          },
          end: {
            line: 551,
            column: 44
          }
        }, {
          start: {
            line: 551,
            column: 48
          },
          end: {
            line: 551,
            column: 57
          }
        }],
        line: 551
      },
      "59": {
        loc: {
          start: {
            line: 556,
            column: 12
          },
          end: {
            line: 566,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 556,
            column: 12
          },
          end: {
            line: 566,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 556
      },
      "60": {
        loc: {
          start: {
            line: 556,
            column: 16
          },
          end: {
            line: 556,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 556,
            column: 16
          },
          end: {
            line: 556,
            column: 25
          }
        }, {
          start: {
            line: 556,
            column: 29
          },
          end: {
            line: 556,
            column: 57
          }
        }],
        line: 556
      },
      "61": {
        loc: {
          start: {
            line: 562,
            column: 31
          },
          end: {
            line: 562,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 562,
            column: 31
          },
          end: {
            line: 562,
            column: 44
          }
        }, {
          start: {
            line: 562,
            column: 48
          },
          end: {
            line: 562,
            column: 57
          }
        }],
        line: 562
      },
      "62": {
        loc: {
          start: {
            line: 567,
            column: 12
          },
          end: {
            line: 577,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 567,
            column: 12
          },
          end: {
            line: 577,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 567
      },
      "63": {
        loc: {
          start: {
            line: 567,
            column: 16
          },
          end: {
            line: 567,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 567,
            column: 16
          },
          end: {
            line: 567,
            column: 26
          }
        }, {
          start: {
            line: 567,
            column: 30
          },
          end: {
            line: 567,
            column: 59
          }
        }],
        line: 567
      },
      "64": {
        loc: {
          start: {
            line: 573,
            column: 31
          },
          end: {
            line: 573,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 573,
            column: 31
          },
          end: {
            line: 573,
            column: 44
          }
        }, {
          start: {
            line: 573,
            column: 48
          },
          end: {
            line: 573,
            column: 57
          }
        }],
        line: 573
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/middleware/security/xssProtection.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/middleware/security/xssProtection.ts"],
      sourcesContent: ["import { Request, Response, NextFunction } from 'express';\nimport { ErrorResponse } from '../../utils/types/express';\n\n/**\n * XSS attack patterns\n */\nconst XSS_PATTERNS = [\n  // Basic XSS patterns\n  /<script[^>]*>.*?<\\/script>/gi,\n  /<script[^>]*>/gi,\n  /javascript:/gi,\n  /vbscript:/gi,\n  /onload\\s*=/gi,\n  /onerror\\s*=/gi,\n  /onclick\\s*=/gi,\n  /onmouseover\\s*=/gi,\n  /onfocus\\s*=/gi,\n  /onblur\\s*=/gi,\n  /onchange\\s*=/gi,\n  /onsubmit\\s*=/gi,\n  /onreset\\s*=/gi,\n  /onselect\\s*=/gi,\n  /onunload\\s*=/gi,\n  /onabort\\s*=/gi,\n  /onbeforeunload\\s*=/gi,\n  /onhashchange\\s*=/gi,\n  /onmessage\\s*=/gi,\n  /onoffline\\s*=/gi,\n  /ononline\\s*=/gi,\n  /onpagehide\\s*=/gi,\n  /onpageshow\\s*=/gi,\n  /onpopstate\\s*=/gi,\n  /onresize\\s*=/gi,\n  /onstorage\\s*=/gi,\n  \n  // Event handlers with spaces\n  /on\\s+[a-zA-Z]+\\s*=/gi,\n  \n  // CSS expressions\n  /expression\\s*\\(/gi,\n  /url\\s*\\(/gi,\n  \n  // Data URIs\n  /data:\\s*text\\/html/gi,\n  /data:\\s*text\\/javascript/gi,\n  /data:\\s*application\\/javascript/gi,\n  \n  // Encoded XSS\n  /&#x?[0-9a-f]+;?/gi,\n  /&#[0-9]+;?/gi,\n  \n  // Unicode XSS\n  /\\u003Cscript/gi,\n  /\\u003C/gi,\n  /\\u003E/gi,\n  \n  // Base64 encoded\n  /base64/gi,\n  \n  // Meta refresh\n  /<meta[^>]*http-equiv\\s*=\\s*[\"']?refresh[\"']?[^>]*>/gi,\n  \n  // Object and embed tags\n  /<object[^>]*>/gi,\n  /<embed[^>]*>/gi,\n  /<applet[^>]*>/gi,\n  \n  // Iframe\n  /<iframe[^>]*>/gi,\n  \n  // Form action\n  /<form[^>]*action\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Input value\n  /<input[^>]*value\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Anchor href\n  /<a[^>]*href\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Image src\n  /<img[^>]*src\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Style attribute\n  /style\\s*=\\s*[\"'][^\"']*expression\\s*\\(/gi,\n  /style\\s*=\\s*[\"'][^\"']*javascript:/gi,\n  \n  // Background attribute\n  /background\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Dynsrc attribute\n  /dynsrc\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Lowsrc attribute\n  /lowsrc\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Mocha attribute\n  /mocha\\s*=\\s*[\"']?javascript:/gi,\n  \n  // Protocol handlers\n  /mocha:/gi,\n  /livescript:/gi,\n  /vbscript:/gi,\n  /javascript:/gi,\n  \n  // Encoded protocols\n  /&#x6A;&#x61;&#x76;&#x61;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;/gi,\n  /&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;/gi,\n  \n  // Mixed case\n  /<ScRiPt/gi,\n  /<sCrIpT/gi,\n  /JaVaScRiPt/gi,\n  \n  // Null bytes\n  /\\x00/gi,\n  \n  // CRLF injection\n  /\\r\\n/gi,\n  /\\r/gi,\n  /\\n/gi,\n  \n  // HTML entities\n  /&lt;script/gi,\n  /&gt;/gi,\n  \n  // URL encoded\n  /%3Cscript/gi,\n  /%3E/gi,\n  /%3C/gi,\n  \n  // Double encoded\n  /%253Cscript/gi,\n  /%253E/gi,\n  \n  // UTF-7\n  /\\+ADw-script\\+AD4-/gi,\n  \n  // CSS import\n  /@import/gi,\n  \n  // CSS url\n  /url\\s*\\(\\s*[\"']?javascript:/gi,\n  \n  // CSS expression\n  /expression\\s*\\(/gi,\n  \n  // CSS behavior\n  /behavior\\s*:\\s*url/gi,\n  \n  // CSS binding\n  /-moz-binding/gi,\n  \n  // CSS import with url\n  /@import\\s+url\\s*\\(\\s*[\"']?javascript:/gi\n];\n\n/**\n * Check if a string contains XSS patterns\n */\nfunction containsXss(input: string): boolean {\n  return XSS_PATTERNS.some(pattern => pattern.test(input));\n}\n\n/**\n * Recursively check object for XSS\n */\nfunction checkObjectForXss(obj: any): { hasXss: boolean; field: string; value: string } {\n  if (typeof obj === 'string') {\n    if (containsXss(obj)) {\n      return { hasXss: true, field: 'string_value', value: obj };\n    }\n  } else if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      const result = checkObjectForXss(obj[i]);\n      if (result.hasXss) {\n        return { hasXss: true, field: `array[${i}]`, value: result.value };\n      }\n    }\n  } else if (obj !== null && typeof obj === 'object') {\n    for (const [key, value] of Object.entries(obj)) {\n      const result = checkObjectForXss(value);\n      if (result.hasXss) {\n        return { hasXss: true, field: key, value: result.value };\n      }\n    }\n  }\n  \n  return { hasXss: false, field: '', value: '' };\n}\n\n/**\n * Sanitize string to prevent XSS\n */\nfunction sanitizeString(input: string): string {\n  return input\n    // Remove script tags\n    .replace(/<script[^>]*>.*?<\\/script>/gi, '')\n    .replace(/<script[^>]*>/gi, '')\n    \n    // Remove event handlers\n    .replace(/\\bon[a-zA-Z]+\\s*=\\s*[\"'][^\"']*[\"']/gi, '')\n    .replace(/\\bon[a-zA-Z]+\\s*=\\s*[^>\\s]+/gi, '')\n    \n    // Remove javascript: protocol\n    .replace(/javascript:/gi, '')\n    .replace(/vbscript:/gi, '')\n    .replace(/mocha:/gi, '')\n    .replace(/livescript:/gi, '')\n    \n    // Remove CSS expressions\n    .replace(/expression\\s*\\(/gi, '')\n    \n    // Remove data URIs\n    .replace(/data:\\s*text\\/html/gi, '')\n    .replace(/data:\\s*text\\/javascript/gi, '')\n    .replace(/data:\\s*application\\/javascript/gi, '')\n    \n    // Remove dangerous attributes\n    .replace(/\\s+(on[a-zA-Z]+|javascript|vbscript|expression|background|dynsrc|lowsrc|mocha)\\s*=\\s*[\"'][^\"']*[\"']/gi, '')\n    \n    // Remove dangerous tags\n    .replace(/<(object|embed|applet|iframe)[^>]*>/gi, '')\n    \n    // Encode HTML entities\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;');\n}\n\n/**\n * Recursively sanitize object values\n */\nfunction sanitizeObject(obj: any): any {\n  if (typeof obj === 'string') {\n    return sanitizeString(obj);\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeObject(item));\n  }\n\n  if (obj !== null && typeof obj === 'object') {\n    const sanitized: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[key] = sanitizeObject(value);\n    }\n    return sanitized;\n  }\n\n  return obj;\n}\n\n/**\n * Basic XSS protection middleware\n */\nexport const preventXss = (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n  try {\n    // Check request body\n    if (req.body) {\n      const bodyCheck = checkObjectForXss(req.body);\n      if (bodyCheck.hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in request body',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: bodyCheck.field,\n            type: 'body',\n            value: bodyCheck.value.substring(0, 100) // Limit value length in response\n          }\n        });\n        return;\n      }\n    }\n\n    // Check query parameters\n    if (req.query) {\n      const queryCheck = checkObjectForXss(req.query);\n      if (queryCheck.hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in query parameters',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: queryCheck.field,\n            type: 'query',\n            value: queryCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    // Check path parameters\n    if (req.params) {\n      const paramsCheck = checkObjectForXss(req.params);\n      if (paramsCheck.hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in path parameters',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: paramsCheck.field,\n            type: 'params',\n            value: paramsCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    // Check headers\n    if (req.headers) {\n      const headersCheck = checkObjectForXss(req.headers);\n      if (headersCheck.hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in headers',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: headersCheck.field,\n            type: 'headers',\n            value: headersCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    next();\n  } catch (error) {\n    console.error('XSS prevention error:', error);\n    \n    // If prevention fails, block the request for safety\n    res.status(500).json({\n      success: false,\n      message: 'Security check failed - request blocked',\n      error: 'SECURITY_CHECK_FAILED',\n      timestamp: new Date().toISOString(),\n      requestId: req.requestId || 'unknown',\n      path: req.path\n    });\n    return;\n  }\n};\n\n/**\n * XSS protection with automatic sanitization\n */\nexport const preventXssWithSanitization = (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n  try {\n    // Sanitize request body\n    if (req.body) {\n      req.body = sanitizeObject(req.body);\n    }\n\n    // Sanitize query parameters\n    if (req.query) {\n      req.query = sanitizeObject(req.query);\n    }\n\n    // Sanitize path parameters\n    if (req.params) {\n      req.params = sanitizeObject(req.params);\n    }\n\n    // Note: Headers are typically not sanitized as they're controlled by the client\n\n    next();\n  } catch (error) {\n    console.error('XSS sanitization error:', error);\n    \n    res.status(500).json({\n      success: false,\n      message: 'Security sanitization failed - request blocked',\n      error: 'SECURITY_SANITIZATION_FAILED',\n      timestamp: new Date().toISOString(),\n      requestId: req.requestId || 'unknown',\n      path: req.path\n    });\n    return;\n  }\n};\n\n/**\n * Enhanced XSS protection with logging\n */\nexport const preventXssWithLogging = (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n  const startTime = Date.now();\n  \n  try {\n    // Check request body\n    if (req.body) {\n      const bodyCheck = checkObjectForXss(req.body);\n      if (bodyCheck.hasXss) {\n        // Log the attempt\n        console.warn(`XSS attack attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          field: bodyCheck.field,\n          value: bodyCheck.value.substring(0, 200), // Limit in logs too\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in request body',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: bodyCheck.field,\n            type: 'body',\n            value: bodyCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    // Check query parameters\n    if (req.query) {\n      const queryCheck = checkObjectForXss(req.query);\n      if (queryCheck.hasXss) {\n        console.warn(`XSS attack attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          field: queryCheck.field,\n          value: queryCheck.value.substring(0, 200),\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in query parameters',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: queryCheck.field,\n            type: 'query',\n            value: queryCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    // Check path parameters\n    if (req.params) {\n      const paramsCheck = checkObjectForXss(req.params);\n      if (paramsCheck.hasXss) {\n        console.warn(`XSS attack attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          field: paramsCheck.field,\n          value: paramsCheck.value.substring(0, 200),\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in path parameters',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: paramsCheck.field,\n            type: 'params',\n            value: paramsCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    // Check headers\n    if (req.headers) {\n      const headersCheck = checkObjectForXss(req.headers);\n      if (headersCheck.hasXss) {\n        console.warn(`XSS attack attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          field: headersCheck.field,\n          value: headersCheck.value.substring(0, 200),\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected in headers',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: headersCheck.field,\n            type: 'headers',\n            value: headersCheck.value.substring(0, 100)\n          }\n        });\n        return;\n      }\n    }\n\n    // Log successful security check\n    const duration = Date.now() - startTime;\n    if (duration > 100) { // Log slow security checks\n      console.info(`XSS security check completed in ${duration}ms:`, {\n        timestamp: new Date().toISOString(),\n        ip: req.ip,\n        path: req.path,\n        method: req.method,\n        duration,\n        requestId: req.requestId || 'unknown'\n      });\n    }\n\n    next();\n  } catch (error) {\n    console.error('XSS prevention error:', error);\n    \n    // Log the error\n    console.error(`XSS security check failed:`, {\n      timestamp: new Date().toISOString(),\n      ip: req.ip,\n      path: req.path,\n      method: req.method,\n      error: (error as Error).message,\n      requestId: req.requestId || 'unknown'\n    });\n\n    // Block the request for safety\n    res.status(500).json({\n      success: false,\n      message: 'Security check failed - request blocked',\n      error: 'SECURITY_CHECK_FAILED',\n      timestamp: new Date().toISOString(),\n      requestId: req.requestId || 'unknown',\n      path: req.path\n    });\n    return;\n  }\n};\n\n/**\n * Whitelist-based XSS prevention\n */\nexport const createWhitelistXssPrevention = (allowedPatterns: RegExp[]) => {\n  return (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n    try {\n      const checkInput = (input: any): { hasXss: boolean; field: string; value: string } => {\n        if (typeof input === 'string') {\n          // Check against blacklist patterns\n          if (XSS_PATTERNS.some(pattern => pattern.test(input))) {\n            // Check if it matches any whitelist patterns\n            if (!allowedPatterns.some(pattern => pattern.test(input))) {\n              return { hasXss: true, field: 'string_value', value: input };\n            }\n          }\n        } else if (Array.isArray(input)) {\n          for (let i = 0; i < input.length; i++) {\n            const result = checkInput(input[i]);\n            if (result.hasXss) {\n              return { hasXss: true, field: `array[${i}]`, value: result.value };\n            }\n          }\n        } else if (input !== null && typeof input === 'object') {\n          for (const [key, value] of Object.entries(input)) {\n            const result = checkInput(value);\n            if (result.hasXss) {\n              return { hasXss: true, field: key, value: result.value };\n            }\n          }\n        }\n        \n        return { hasXss: false, field: '', value: '' };\n      };\n\n      // Check all request data\n      if (req.body && checkInput(req.body).hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n\n      if (req.query && checkInput(req.query).hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n\n      if (req.params && checkInput(req.params).hasXss) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential XSS attack detected',\n          error: 'XSS_ATTACK_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n\n      next();\n    } catch (error) {\n      console.error('Whitelist XSS prevention error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Security check failed - request blocked',\n        error: 'SECURITY_CHECK_FAILED',\n        timestamp: new Date().toISOString(),\n        path: req.path\n      });\n      return;\n    }\n  };\n}; "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "086fb66e5422d09085a3a067fea2fd28a4336877"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2bunwi6kft = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2bunwi6kft();
cov_2bunwi6kft().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2bunwi6kft().s[1]++;
exports.createWhitelistXssPrevention = exports.preventXssWithLogging = exports.preventXssWithSanitization = exports.preventXss = void 0;
/**
 * XSS attack patterns
 */
const XSS_PATTERNS =
/* istanbul ignore next */
(cov_2bunwi6kft().s[2]++, [
// Basic XSS patterns
/<script[^>]*>.*?<\/script>/gi, /<script[^>]*>/gi, /javascript:/gi, /vbscript:/gi, /onload\s*=/gi, /onerror\s*=/gi, /onclick\s*=/gi, /onmouseover\s*=/gi, /onfocus\s*=/gi, /onblur\s*=/gi, /onchange\s*=/gi, /onsubmit\s*=/gi, /onreset\s*=/gi, /onselect\s*=/gi, /onunload\s*=/gi, /onabort\s*=/gi, /onbeforeunload\s*=/gi, /onhashchange\s*=/gi, /onmessage\s*=/gi, /onoffline\s*=/gi, /ononline\s*=/gi, /onpagehide\s*=/gi, /onpageshow\s*=/gi, /onpopstate\s*=/gi, /onresize\s*=/gi, /onstorage\s*=/gi,
// Event handlers with spaces
/on\s+[a-zA-Z]+\s*=/gi,
// CSS expressions
/expression\s*\(/gi, /url\s*\(/gi,
// Data URIs
/data:\s*text\/html/gi, /data:\s*text\/javascript/gi, /data:\s*application\/javascript/gi,
// Encoded XSS
/&#x?[0-9a-f]+;?/gi, /&#[0-9]+;?/gi,
// Unicode XSS
/\u003Cscript/gi, /\u003C/gi, /\u003E/gi,
// Base64 encoded
/base64/gi,
// Meta refresh
/<meta[^>]*http-equiv\s*=\s*["']?refresh["']?[^>]*>/gi,
// Object and embed tags
/<object[^>]*>/gi, /<embed[^>]*>/gi, /<applet[^>]*>/gi,
// Iframe
/<iframe[^>]*>/gi,
// Form action
/<form[^>]*action\s*=\s*["']?javascript:/gi,
// Input value
/<input[^>]*value\s*=\s*["']?javascript:/gi,
// Anchor href
/<a[^>]*href\s*=\s*["']?javascript:/gi,
// Image src
/<img[^>]*src\s*=\s*["']?javascript:/gi,
// Style attribute
/style\s*=\s*["'][^"']*expression\s*\(/gi, /style\s*=\s*["'][^"']*javascript:/gi,
// Background attribute
/background\s*=\s*["']?javascript:/gi,
// Dynsrc attribute
/dynsrc\s*=\s*["']?javascript:/gi,
// Lowsrc attribute
/lowsrc\s*=\s*["']?javascript:/gi,
// Mocha attribute
/mocha\s*=\s*["']?javascript:/gi,
// Protocol handlers
/mocha:/gi, /livescript:/gi, /vbscript:/gi, /javascript:/gi,
// Encoded protocols
/&#x6A;&#x61;&#x76;&#x61;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;/gi, /&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;/gi,
// Mixed case
/<ScRiPt/gi, /<sCrIpT/gi, /JaVaScRiPt/gi,
// Null bytes
/\x00/gi,
// CRLF injection
/\r\n/gi, /\r/gi, /\n/gi,
// HTML entities
/&lt;script/gi, /&gt;/gi,
// URL encoded
/%3Cscript/gi, /%3E/gi, /%3C/gi,
// Double encoded
/%253Cscript/gi, /%253E/gi,
// UTF-7
/\+ADw-script\+AD4-/gi,
// CSS import
/@import/gi,
// CSS url
/url\s*\(\s*["']?javascript:/gi,
// CSS expression
/expression\s*\(/gi,
// CSS behavior
/behavior\s*:\s*url/gi,
// CSS binding
/-moz-binding/gi,
// CSS import with url
/@import\s+url\s*\(\s*["']?javascript:/gi]);
/**
 * Check if a string contains XSS patterns
 */
function containsXss(input) {
  /* istanbul ignore next */
  cov_2bunwi6kft().f[0]++;
  cov_2bunwi6kft().s[3]++;
  return XSS_PATTERNS.some(pattern => {
    /* istanbul ignore next */
    cov_2bunwi6kft().f[1]++;
    cov_2bunwi6kft().s[4]++;
    return pattern.test(input);
  });
}
/**
 * Recursively check object for XSS
 */
function checkObjectForXss(obj) {
  /* istanbul ignore next */
  cov_2bunwi6kft().f[2]++;
  cov_2bunwi6kft().s[5]++;
  if (typeof obj === 'string') {
    /* istanbul ignore next */
    cov_2bunwi6kft().b[0][0]++;
    cov_2bunwi6kft().s[6]++;
    if (containsXss(obj)) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[1][0]++;
      cov_2bunwi6kft().s[7]++;
      return {
        hasXss: true,
        field: 'string_value',
        value: obj
      };
    } else
    /* istanbul ignore next */
    {
      cov_2bunwi6kft().b[1][1]++;
    }
  } else {
    /* istanbul ignore next */
    cov_2bunwi6kft().b[0][1]++;
    cov_2bunwi6kft().s[8]++;
    if (Array.isArray(obj)) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[2][0]++;
      cov_2bunwi6kft().s[9]++;
      for (let i =
      /* istanbul ignore next */
      (cov_2bunwi6kft().s[10]++, 0); i < obj.length; i++) {
        const result =
        /* istanbul ignore next */
        (cov_2bunwi6kft().s[11]++, checkObjectForXss(obj[i]));
        /* istanbul ignore next */
        cov_2bunwi6kft().s[12]++;
        if (result.hasXss) {
          /* istanbul ignore next */
          cov_2bunwi6kft().b[3][0]++;
          cov_2bunwi6kft().s[13]++;
          return {
            hasXss: true,
            field: `array[${i}]`,
            value: result.value
          };
        } else
        /* istanbul ignore next */
        {
          cov_2bunwi6kft().b[3][1]++;
        }
      }
    } else {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[2][1]++;
      cov_2bunwi6kft().s[14]++;
      if (
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[5][0]++, obj !== null) &&
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[5][1]++, typeof obj === 'object')) {
        /* istanbul ignore next */
        cov_2bunwi6kft().b[4][0]++;
        cov_2bunwi6kft().s[15]++;
        for (const [key, value] of Object.entries(obj)) {
          const result =
          /* istanbul ignore next */
          (cov_2bunwi6kft().s[16]++, checkObjectForXss(value));
          /* istanbul ignore next */
          cov_2bunwi6kft().s[17]++;
          if (result.hasXss) {
            /* istanbul ignore next */
            cov_2bunwi6kft().b[6][0]++;
            cov_2bunwi6kft().s[18]++;
            return {
              hasXss: true,
              field: key,
              value: result.value
            };
          } else
          /* istanbul ignore next */
          {
            cov_2bunwi6kft().b[6][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_2bunwi6kft().b[4][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_2bunwi6kft().s[19]++;
  return {
    hasXss: false,
    field: '',
    value: ''
  };
}
/**
 * Sanitize string to prevent XSS
 */
function sanitizeString(input) {
  /* istanbul ignore next */
  cov_2bunwi6kft().f[3]++;
  cov_2bunwi6kft().s[20]++;
  return input
  // Remove script tags
  .replace(/<script[^>]*>.*?<\/script>/gi, '').replace(/<script[^>]*>/gi, '')
  // Remove event handlers
  .replace(/\bon[a-zA-Z]+\s*=\s*["'][^"']*["']/gi, '').replace(/\bon[a-zA-Z]+\s*=\s*[^>\s]+/gi, '')
  // Remove javascript: protocol
  .replace(/javascript:/gi, '').replace(/vbscript:/gi, '').replace(/mocha:/gi, '').replace(/livescript:/gi, '')
  // Remove CSS expressions
  .replace(/expression\s*\(/gi, '')
  // Remove data URIs
  .replace(/data:\s*text\/html/gi, '').replace(/data:\s*text\/javascript/gi, '').replace(/data:\s*application\/javascript/gi, '')
  // Remove dangerous attributes
  .replace(/\s+(on[a-zA-Z]+|javascript|vbscript|expression|background|dynsrc|lowsrc|mocha)\s*=\s*["'][^"']*["']/gi, '')
  // Remove dangerous tags
  .replace(/<(object|embed|applet|iframe)[^>]*>/gi, '')
  // Encode HTML entities
  .replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g, '&#x2F;');
}
/**
 * Recursively sanitize object values
 */
function sanitizeObject(obj) {
  /* istanbul ignore next */
  cov_2bunwi6kft().f[4]++;
  cov_2bunwi6kft().s[21]++;
  if (typeof obj === 'string') {
    /* istanbul ignore next */
    cov_2bunwi6kft().b[7][0]++;
    cov_2bunwi6kft().s[22]++;
    return sanitizeString(obj);
  } else
  /* istanbul ignore next */
  {
    cov_2bunwi6kft().b[7][1]++;
  }
  cov_2bunwi6kft().s[23]++;
  if (Array.isArray(obj)) {
    /* istanbul ignore next */
    cov_2bunwi6kft().b[8][0]++;
    cov_2bunwi6kft().s[24]++;
    return obj.map(item => {
      /* istanbul ignore next */
      cov_2bunwi6kft().f[5]++;
      cov_2bunwi6kft().s[25]++;
      return sanitizeObject(item);
    });
  } else
  /* istanbul ignore next */
  {
    cov_2bunwi6kft().b[8][1]++;
  }
  cov_2bunwi6kft().s[26]++;
  if (
  /* istanbul ignore next */
  (cov_2bunwi6kft().b[10][0]++, obj !== null) &&
  /* istanbul ignore next */
  (cov_2bunwi6kft().b[10][1]++, typeof obj === 'object')) {
    /* istanbul ignore next */
    cov_2bunwi6kft().b[9][0]++;
    const sanitized =
    /* istanbul ignore next */
    (cov_2bunwi6kft().s[27]++, {});
    /* istanbul ignore next */
    cov_2bunwi6kft().s[28]++;
    for (const [key, value] of Object.entries(obj)) {
      /* istanbul ignore next */
      cov_2bunwi6kft().s[29]++;
      sanitized[key] = sanitizeObject(value);
    }
    /* istanbul ignore next */
    cov_2bunwi6kft().s[30]++;
    return sanitized;
  } else
  /* istanbul ignore next */
  {
    cov_2bunwi6kft().b[9][1]++;
  }
  cov_2bunwi6kft().s[31]++;
  return obj;
}
/**
 * Basic XSS protection middleware
 */
/* istanbul ignore next */
cov_2bunwi6kft().s[32]++;
const preventXss = (req, res, next) => {
  /* istanbul ignore next */
  cov_2bunwi6kft().f[6]++;
  cov_2bunwi6kft().s[33]++;
  try {
    /* istanbul ignore next */
    cov_2bunwi6kft().s[34]++;
    // Check request body
    if (req.body) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[11][0]++;
      const bodyCheck =
      /* istanbul ignore next */
      (cov_2bunwi6kft().s[35]++, checkObjectForXss(req.body));
      /* istanbul ignore next */
      cov_2bunwi6kft().s[36]++;
      if (bodyCheck.hasXss) {
        /* istanbul ignore next */
        cov_2bunwi6kft().b[12][0]++;
        cov_2bunwi6kft().s[37]++;
        res.status(400).json({
          success: false,
          message: 'Potential XSS attack detected in request body',
          error: 'XSS_ATTACK_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[13][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[13][1]++, 'unknown'),
          path: req.path,
          details: {
            field: bodyCheck.field,
            type: 'body',
            value: bodyCheck.value.substring(0, 100) // Limit value length in response
          }
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[38]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2bunwi6kft().b[12][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2bunwi6kft().b[11][1]++;
    }
    // Check query parameters
    cov_2bunwi6kft().s[39]++;
    if (req.query) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[14][0]++;
      const queryCheck =
      /* istanbul ignore next */
      (cov_2bunwi6kft().s[40]++, checkObjectForXss(req.query));
      /* istanbul ignore next */
      cov_2bunwi6kft().s[41]++;
      if (queryCheck.hasXss) {
        /* istanbul ignore next */
        cov_2bunwi6kft().b[15][0]++;
        cov_2bunwi6kft().s[42]++;
        res.status(400).json({
          success: false,
          message: 'Potential XSS attack detected in query parameters',
          error: 'XSS_ATTACK_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[16][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[16][1]++, 'unknown'),
          path: req.path,
          details: {
            field: queryCheck.field,
            type: 'query',
            value: queryCheck.value.substring(0, 100)
          }
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[43]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2bunwi6kft().b[15][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2bunwi6kft().b[14][1]++;
    }
    // Check path parameters
    cov_2bunwi6kft().s[44]++;
    if (req.params) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[17][0]++;
      const paramsCheck =
      /* istanbul ignore next */
      (cov_2bunwi6kft().s[45]++, checkObjectForXss(req.params));
      /* istanbul ignore next */
      cov_2bunwi6kft().s[46]++;
      if (paramsCheck.hasXss) {
        /* istanbul ignore next */
        cov_2bunwi6kft().b[18][0]++;
        cov_2bunwi6kft().s[47]++;
        res.status(400).json({
          success: false,
          message: 'Potential XSS attack detected in path parameters',
          error: 'XSS_ATTACK_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[19][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[19][1]++, 'unknown'),
          path: req.path,
          details: {
            field: paramsCheck.field,
            type: 'params',
            value: paramsCheck.value.substring(0, 100)
          }
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[48]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2bunwi6kft().b[18][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2bunwi6kft().b[17][1]++;
    }
    // Check headers
    cov_2bunwi6kft().s[49]++;
    if (req.headers) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[20][0]++;
      const headersCheck =
      /* istanbul ignore next */
      (cov_2bunwi6kft().s[50]++, checkObjectForXss(req.headers));
      /* istanbul ignore next */
      cov_2bunwi6kft().s[51]++;
      if (headersCheck.hasXss) {
        /* istanbul ignore next */
        cov_2bunwi6kft().b[21][0]++;
        cov_2bunwi6kft().s[52]++;
        res.status(400).json({
          success: false,
          message: 'Potential XSS attack detected in headers',
          error: 'XSS_ATTACK_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[22][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[22][1]++, 'unknown'),
          path: req.path,
          details: {
            field: headersCheck.field,
            type: 'headers',
            value: headersCheck.value.substring(0, 100)
          }
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[53]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2bunwi6kft().b[21][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2bunwi6kft().b[20][1]++;
    }
    cov_2bunwi6kft().s[54]++;
    next();
  } catch (error) {
    /* istanbul ignore next */
    cov_2bunwi6kft().s[55]++;
    console.error('XSS prevention error:', error);
    // If prevention fails, block the request for safety
    /* istanbul ignore next */
    cov_2bunwi6kft().s[56]++;
    res.status(500).json({
      success: false,
      message: 'Security check failed - request blocked',
      error: 'SECURITY_CHECK_FAILED',
      timestamp: new Date().toISOString(),
      requestId:
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[23][0]++, req.requestId) ||
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[23][1]++, 'unknown'),
      path: req.path
    });
    /* istanbul ignore next */
    cov_2bunwi6kft().s[57]++;
    return;
  }
};
/* istanbul ignore next */
cov_2bunwi6kft().s[58]++;
exports.preventXss = preventXss;
/**
 * XSS protection with automatic sanitization
 */
/* istanbul ignore next */
cov_2bunwi6kft().s[59]++;
const preventXssWithSanitization = (req, res, next) => {
  /* istanbul ignore next */
  cov_2bunwi6kft().f[7]++;
  cov_2bunwi6kft().s[60]++;
  try {
    /* istanbul ignore next */
    cov_2bunwi6kft().s[61]++;
    // Sanitize request body
    if (req.body) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[24][0]++;
      cov_2bunwi6kft().s[62]++;
      req.body = sanitizeObject(req.body);
    } else
    /* istanbul ignore next */
    {
      cov_2bunwi6kft().b[24][1]++;
    }
    // Sanitize query parameters
    cov_2bunwi6kft().s[63]++;
    if (req.query) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[25][0]++;
      cov_2bunwi6kft().s[64]++;
      req.query = sanitizeObject(req.query);
    } else
    /* istanbul ignore next */
    {
      cov_2bunwi6kft().b[25][1]++;
    }
    // Sanitize path parameters
    cov_2bunwi6kft().s[65]++;
    if (req.params) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[26][0]++;
      cov_2bunwi6kft().s[66]++;
      req.params = sanitizeObject(req.params);
    } else
    /* istanbul ignore next */
    {
      cov_2bunwi6kft().b[26][1]++;
    }
    // Note: Headers are typically not sanitized as they're controlled by the client
    cov_2bunwi6kft().s[67]++;
    next();
  } catch (error) {
    /* istanbul ignore next */
    cov_2bunwi6kft().s[68]++;
    console.error('XSS sanitization error:', error);
    /* istanbul ignore next */
    cov_2bunwi6kft().s[69]++;
    res.status(500).json({
      success: false,
      message: 'Security sanitization failed - request blocked',
      error: 'SECURITY_SANITIZATION_FAILED',
      timestamp: new Date().toISOString(),
      requestId:
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[27][0]++, req.requestId) ||
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[27][1]++, 'unknown'),
      path: req.path
    });
    /* istanbul ignore next */
    cov_2bunwi6kft().s[70]++;
    return;
  }
};
/* istanbul ignore next */
cov_2bunwi6kft().s[71]++;
exports.preventXssWithSanitization = preventXssWithSanitization;
/**
 * Enhanced XSS protection with logging
 */
/* istanbul ignore next */
cov_2bunwi6kft().s[72]++;
const preventXssWithLogging = (req, res, next) => {
  /* istanbul ignore next */
  cov_2bunwi6kft().f[8]++;
  const startTime =
  /* istanbul ignore next */
  (cov_2bunwi6kft().s[73]++, Date.now());
  /* istanbul ignore next */
  cov_2bunwi6kft().s[74]++;
  try {
    /* istanbul ignore next */
    cov_2bunwi6kft().s[75]++;
    // Check request body
    if (req.body) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[28][0]++;
      const bodyCheck =
      /* istanbul ignore next */
      (cov_2bunwi6kft().s[76]++, checkObjectForXss(req.body));
      /* istanbul ignore next */
      cov_2bunwi6kft().s[77]++;
      if (bodyCheck.hasXss) {
        /* istanbul ignore next */
        cov_2bunwi6kft().b[29][0]++;
        cov_2bunwi6kft().s[78]++;
        // Log the attempt
        console.warn(`XSS attack attempt detected:`, {
          timestamp: new Date().toISOString(),
          ip: req.ip,
          userAgent: req.get('User-Agent'),
          path: req.path,
          method: req.method,
          field: bodyCheck.field,
          value: bodyCheck.value.substring(0, 200),
          // Limit in logs too
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[30][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[30][1]++, 'unknown')
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[79]++;
        res.status(400).json({
          success: false,
          message: 'Potential XSS attack detected in request body',
          error: 'XSS_ATTACK_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[31][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[31][1]++, 'unknown'),
          path: req.path,
          details: {
            field: bodyCheck.field,
            type: 'body',
            value: bodyCheck.value.substring(0, 100)
          }
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[80]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2bunwi6kft().b[29][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2bunwi6kft().b[28][1]++;
    }
    // Check query parameters
    cov_2bunwi6kft().s[81]++;
    if (req.query) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[32][0]++;
      const queryCheck =
      /* istanbul ignore next */
      (cov_2bunwi6kft().s[82]++, checkObjectForXss(req.query));
      /* istanbul ignore next */
      cov_2bunwi6kft().s[83]++;
      if (queryCheck.hasXss) {
        /* istanbul ignore next */
        cov_2bunwi6kft().b[33][0]++;
        cov_2bunwi6kft().s[84]++;
        console.warn(`XSS attack attempt detected:`, {
          timestamp: new Date().toISOString(),
          ip: req.ip,
          userAgent: req.get('User-Agent'),
          path: req.path,
          method: req.method,
          field: queryCheck.field,
          value: queryCheck.value.substring(0, 200),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[34][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[34][1]++, 'unknown')
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[85]++;
        res.status(400).json({
          success: false,
          message: 'Potential XSS attack detected in query parameters',
          error: 'XSS_ATTACK_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[35][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[35][1]++, 'unknown'),
          path: req.path,
          details: {
            field: queryCheck.field,
            type: 'query',
            value: queryCheck.value.substring(0, 100)
          }
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[86]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2bunwi6kft().b[33][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2bunwi6kft().b[32][1]++;
    }
    // Check path parameters
    cov_2bunwi6kft().s[87]++;
    if (req.params) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[36][0]++;
      const paramsCheck =
      /* istanbul ignore next */
      (cov_2bunwi6kft().s[88]++, checkObjectForXss(req.params));
      /* istanbul ignore next */
      cov_2bunwi6kft().s[89]++;
      if (paramsCheck.hasXss) {
        /* istanbul ignore next */
        cov_2bunwi6kft().b[37][0]++;
        cov_2bunwi6kft().s[90]++;
        console.warn(`XSS attack attempt detected:`, {
          timestamp: new Date().toISOString(),
          ip: req.ip,
          userAgent: req.get('User-Agent'),
          path: req.path,
          method: req.method,
          field: paramsCheck.field,
          value: paramsCheck.value.substring(0, 200),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[38][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[38][1]++, 'unknown')
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[91]++;
        res.status(400).json({
          success: false,
          message: 'Potential XSS attack detected in path parameters',
          error: 'XSS_ATTACK_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[39][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[39][1]++, 'unknown'),
          path: req.path,
          details: {
            field: paramsCheck.field,
            type: 'params',
            value: paramsCheck.value.substring(0, 100)
          }
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[92]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2bunwi6kft().b[37][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2bunwi6kft().b[36][1]++;
    }
    // Check headers
    cov_2bunwi6kft().s[93]++;
    if (req.headers) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[40][0]++;
      const headersCheck =
      /* istanbul ignore next */
      (cov_2bunwi6kft().s[94]++, checkObjectForXss(req.headers));
      /* istanbul ignore next */
      cov_2bunwi6kft().s[95]++;
      if (headersCheck.hasXss) {
        /* istanbul ignore next */
        cov_2bunwi6kft().b[41][0]++;
        cov_2bunwi6kft().s[96]++;
        console.warn(`XSS attack attempt detected:`, {
          timestamp: new Date().toISOString(),
          ip: req.ip,
          userAgent: req.get('User-Agent'),
          path: req.path,
          method: req.method,
          field: headersCheck.field,
          value: headersCheck.value.substring(0, 200),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[42][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[42][1]++, 'unknown')
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[97]++;
        res.status(400).json({
          success: false,
          message: 'Potential XSS attack detected in headers',
          error: 'XSS_ATTACK_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[43][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[43][1]++, 'unknown'),
          path: req.path,
          details: {
            field: headersCheck.field,
            type: 'headers',
            value: headersCheck.value.substring(0, 100)
          }
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[98]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2bunwi6kft().b[41][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2bunwi6kft().b[40][1]++;
    }
    // Log successful security check
    const duration =
    /* istanbul ignore next */
    (cov_2bunwi6kft().s[99]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_2bunwi6kft().s[100]++;
    if (duration > 100) {
      /* istanbul ignore next */
      cov_2bunwi6kft().b[44][0]++;
      cov_2bunwi6kft().s[101]++;
      // Log slow security checks
      console.info(`XSS security check completed in ${duration}ms:`, {
        timestamp: new Date().toISOString(),
        ip: req.ip,
        path: req.path,
        method: req.method,
        duration,
        requestId:
        /* istanbul ignore next */
        (cov_2bunwi6kft().b[45][0]++, req.requestId) ||
        /* istanbul ignore next */
        (cov_2bunwi6kft().b[45][1]++, 'unknown')
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bunwi6kft().b[44][1]++;
    }
    cov_2bunwi6kft().s[102]++;
    next();
  } catch (error) {
    /* istanbul ignore next */
    cov_2bunwi6kft().s[103]++;
    console.error('XSS prevention error:', error);
    // Log the error
    /* istanbul ignore next */
    cov_2bunwi6kft().s[104]++;
    console.error(`XSS security check failed:`, {
      timestamp: new Date().toISOString(),
      ip: req.ip,
      path: req.path,
      method: req.method,
      error: error.message,
      requestId:
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[46][0]++, req.requestId) ||
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[46][1]++, 'unknown')
    });
    // Block the request for safety
    /* istanbul ignore next */
    cov_2bunwi6kft().s[105]++;
    res.status(500).json({
      success: false,
      message: 'Security check failed - request blocked',
      error: 'SECURITY_CHECK_FAILED',
      timestamp: new Date().toISOString(),
      requestId:
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[47][0]++, req.requestId) ||
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[47][1]++, 'unknown'),
      path: req.path
    });
    /* istanbul ignore next */
    cov_2bunwi6kft().s[106]++;
    return;
  }
};
/* istanbul ignore next */
cov_2bunwi6kft().s[107]++;
exports.preventXssWithLogging = preventXssWithLogging;
/**
 * Whitelist-based XSS prevention
 */
/* istanbul ignore next */
cov_2bunwi6kft().s[108]++;
const createWhitelistXssPrevention = allowedPatterns => {
  /* istanbul ignore next */
  cov_2bunwi6kft().f[9]++;
  cov_2bunwi6kft().s[109]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_2bunwi6kft().f[10]++;
    cov_2bunwi6kft().s[110]++;
    try {
      /* istanbul ignore next */
      cov_2bunwi6kft().s[111]++;
      const checkInput = input => {
        /* istanbul ignore next */
        cov_2bunwi6kft().f[11]++;
        cov_2bunwi6kft().s[112]++;
        if (typeof input === 'string') {
          /* istanbul ignore next */
          cov_2bunwi6kft().b[48][0]++;
          cov_2bunwi6kft().s[113]++;
          // Check against blacklist patterns
          if (XSS_PATTERNS.some(pattern => {
            /* istanbul ignore next */
            cov_2bunwi6kft().f[12]++;
            cov_2bunwi6kft().s[114]++;
            return pattern.test(input);
          })) {
            /* istanbul ignore next */
            cov_2bunwi6kft().b[49][0]++;
            cov_2bunwi6kft().s[115]++;
            // Check if it matches any whitelist patterns
            if (!allowedPatterns.some(pattern => {
              /* istanbul ignore next */
              cov_2bunwi6kft().f[13]++;
              cov_2bunwi6kft().s[116]++;
              return pattern.test(input);
            })) {
              /* istanbul ignore next */
              cov_2bunwi6kft().b[50][0]++;
              cov_2bunwi6kft().s[117]++;
              return {
                hasXss: true,
                field: 'string_value',
                value: input
              };
            } else
            /* istanbul ignore next */
            {
              cov_2bunwi6kft().b[50][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_2bunwi6kft().b[49][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_2bunwi6kft().b[48][1]++;
          cov_2bunwi6kft().s[118]++;
          if (Array.isArray(input)) {
            /* istanbul ignore next */
            cov_2bunwi6kft().b[51][0]++;
            cov_2bunwi6kft().s[119]++;
            for (let i =
            /* istanbul ignore next */
            (cov_2bunwi6kft().s[120]++, 0); i < input.length; i++) {
              const result =
              /* istanbul ignore next */
              (cov_2bunwi6kft().s[121]++, checkInput(input[i]));
              /* istanbul ignore next */
              cov_2bunwi6kft().s[122]++;
              if (result.hasXss) {
                /* istanbul ignore next */
                cov_2bunwi6kft().b[52][0]++;
                cov_2bunwi6kft().s[123]++;
                return {
                  hasXss: true,
                  field: `array[${i}]`,
                  value: result.value
                };
              } else
              /* istanbul ignore next */
              {
                cov_2bunwi6kft().b[52][1]++;
              }
            }
          } else {
            /* istanbul ignore next */
            cov_2bunwi6kft().b[51][1]++;
            cov_2bunwi6kft().s[124]++;
            if (
            /* istanbul ignore next */
            (cov_2bunwi6kft().b[54][0]++, input !== null) &&
            /* istanbul ignore next */
            (cov_2bunwi6kft().b[54][1]++, typeof input === 'object')) {
              /* istanbul ignore next */
              cov_2bunwi6kft().b[53][0]++;
              cov_2bunwi6kft().s[125]++;
              for (const [key, value] of Object.entries(input)) {
                const result =
                /* istanbul ignore next */
                (cov_2bunwi6kft().s[126]++, checkInput(value));
                /* istanbul ignore next */
                cov_2bunwi6kft().s[127]++;
                if (result.hasXss) {
                  /* istanbul ignore next */
                  cov_2bunwi6kft().b[55][0]++;
                  cov_2bunwi6kft().s[128]++;
                  return {
                    hasXss: true,
                    field: key,
                    value: result.value
                  };
                } else
                /* istanbul ignore next */
                {
                  cov_2bunwi6kft().b[55][1]++;
                }
              }
            } else
            /* istanbul ignore next */
            {
              cov_2bunwi6kft().b[53][1]++;
            }
          }
        }
        /* istanbul ignore next */
        cov_2bunwi6kft().s[129]++;
        return {
          hasXss: false,
          field: '',
          value: ''
        };
      };
      // Check all request data
      /* istanbul ignore next */
      cov_2bunwi6kft().s[130]++;
      if (
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[57][0]++, req.body) &&
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[57][1]++, checkInput(req.body).hasXss)) {
        /* istanbul ignore next */
        cov_2bunwi6kft().b[56][0]++;
        cov_2bunwi6kft().s[131]++;
        res.status(400).json({
          success: false,
          message: 'Potential XSS attack detected',
          error: 'XSS_ATTACK_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[58][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[58][1]++, 'unknown'),
          path: req.path
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[132]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2bunwi6kft().b[56][1]++;
      }
      cov_2bunwi6kft().s[133]++;
      if (
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[60][0]++, req.query) &&
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[60][1]++, checkInput(req.query).hasXss)) {
        /* istanbul ignore next */
        cov_2bunwi6kft().b[59][0]++;
        cov_2bunwi6kft().s[134]++;
        res.status(400).json({
          success: false,
          message: 'Potential XSS attack detected',
          error: 'XSS_ATTACK_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[61][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[61][1]++, 'unknown'),
          path: req.path
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[135]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2bunwi6kft().b[59][1]++;
      }
      cov_2bunwi6kft().s[136]++;
      if (
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[63][0]++, req.params) &&
      /* istanbul ignore next */
      (cov_2bunwi6kft().b[63][1]++, checkInput(req.params).hasXss)) {
        /* istanbul ignore next */
        cov_2bunwi6kft().b[62][0]++;
        cov_2bunwi6kft().s[137]++;
        res.status(400).json({
          success: false,
          message: 'Potential XSS attack detected',
          error: 'XSS_ATTACK_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[64][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2bunwi6kft().b[64][1]++, 'unknown'),
          path: req.path
        });
        /* istanbul ignore next */
        cov_2bunwi6kft().s[138]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2bunwi6kft().b[62][1]++;
      }
      cov_2bunwi6kft().s[139]++;
      next();
    } catch (error) {
      /* istanbul ignore next */
      cov_2bunwi6kft().s[140]++;
      console.error('Whitelist XSS prevention error:', error);
      /* istanbul ignore next */
      cov_2bunwi6kft().s[141]++;
      res.status(500).json({
        success: false,
        message: 'Security check failed - request blocked',
        error: 'SECURITY_CHECK_FAILED',
        timestamp: new Date().toISOString(),
        path: req.path
      });
      /* istanbul ignore next */
      cov_2bunwi6kft().s[142]++;
      return;
    }
  };
};
/* istanbul ignore next */
cov_2bunwi6kft().s[143]++;
exports.createWhitelistXssPrevention = createWhitelistXssPrevention;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,