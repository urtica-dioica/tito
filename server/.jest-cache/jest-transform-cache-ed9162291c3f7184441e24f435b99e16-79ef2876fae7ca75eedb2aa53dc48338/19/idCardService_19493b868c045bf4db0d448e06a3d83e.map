{"version":3,"names":["cov_1fyfkzyuto","actualCoverage","database_1","s","require","logger_1","__importDefault","crypto_1","qrcode_1","IdCardService","createIdCard","data","f","pool","getPool","client","connect","query","employeeQuery","employeeResult","employeeId","rows","length","b","Error","employee","existingCardQuery","existingCard","expiryYears","getDefaultExpiryYears","qrCodeData","generateQrCodeData","qrCodeHash","default","createHash","update","digest","expiryDate","Date","setFullYear","getFullYear","createQuery","result","issuedBy","idCard","completeIdCard","getIdCardWithDetails","id","info","employee_id","idCardId","error","message","release","listIdCards","params","page","limit","search","departmentId","isActive","isExpired","sortBy","sortOrder","offset","whereConditions","queryParams","paramIndex","push","undefined","whereClause","join","countQuery","countResult","total","parseInt","dataQuery","toUpperCase","idCards","totalPages","Math","ceil","deactivateIdCard","employeeCode","generateDepartmentIdCards","employeesQuery","employeesResult","employees","success","failed","errors","getIdCardStats","deptQuery","statsResult","deptResult","Promise","all","stats","byDepartment","active","expired","expiringSoon","expiring_soon","getQrCodeData","row","qrCodeImage","toDataURL","width","margin","color","dark","light","Buffer","from","toString","timestamp","now","company","department","department_name","JSON","stringify","setting_value","warn","exports"],"sources":["/home/kim/tito/server/src/services/hr/idCardService.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\nimport crypto from 'crypto';\nimport QRCode from 'qrcode';\n\nexport interface IdCard {\n  id: string;\n  employeeId: string;\n  employeeCode: string;\n  employeeName: string;\n  departmentName: string | null;\n  qrCodeHash: string;\n  isActive: boolean;\n  expiryDate: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface CreateIdCardData {\n  employeeId: string;\n  expiryYears?: number;\n  issuedBy?: string; // User ID of who is issuing the card\n}\n\nexport interface IdCardListParams {\n  page?: number | undefined;\n  limit?: number | undefined;\n  search?: string | undefined;\n  departmentId?: string | undefined;\n  isActive?: boolean | undefined;\n  isExpired?: boolean | undefined;\n  sortBy?: string | undefined;\n  sortOrder?: 'asc' | 'desc' | undefined;\n}\n\nexport class IdCardService {\n  /**\n   * Create ID card for employee\n   */\n  async createIdCard(data: CreateIdCardData): Promise<IdCard> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get employee information\n      const employeeQuery = `\n        SELECT \n          e.id,\n          e.employee_id,\n          e.user_id,\n          u.first_name,\n          u.last_name,\n          d.name as department_name\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        WHERE e.id = $1 AND e.status = 'active'\n      `;\n\n      const employeeResult = await client.query(employeeQuery, [data.employeeId]);\n      if (employeeResult.rows.length === 0) {\n        throw new Error('Employee not found or inactive');\n      }\n\n      const employee = employeeResult.rows[0];\n\n      // Check if employee already has an active ID card\n      const existingCardQuery = `\n        SELECT id FROM id_cards \n        WHERE employee_id = $1 AND is_active = true\n      `;\n      const existingCard = await client.query(existingCardQuery, [data.employeeId]);\n      if (existingCard.rows.length > 0) {\n        throw new Error('Employee already has an active ID card');\n      }\n\n\n      // Get default expiry years from system settings\n      const expiryYears = data.expiryYears || await this.getDefaultExpiryYears();\n\n      // Generate QR code data\n      const qrCodeData = this.generateQrCodeData(employee);\n      const qrCodeHash = crypto.createHash('sha256').update(qrCodeData).digest('hex');\n\n      // Calculate expiry date\n      const expiryDate = new Date();\n      expiryDate.setFullYear(expiryDate.getFullYear() + expiryYears);\n\n      // Create ID card\n      const createQuery = `\n        INSERT INTO id_cards (\n          employee_id, \n          qr_code_hash,\n          qr_code_data,\n          is_active, \n          expiry_date,\n          issued_by\n        )\n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING \n          id,\n          employee_id as \"employeeId\",\n          qr_code_hash as \"qrCodeHash\",\n          is_active as \"isActive\",\n          expiry_date as \"expiryDate\",\n          created_at as \"createdAt\",\n          updated_at as \"updatedAt\"\n      `;\n\n      const result = await client.query(createQuery, [\n        data.employeeId,\n        qrCodeHash,\n        qrCodeData,\n        true,\n        expiryDate,\n        data.issuedBy || data.employeeId // Use provided issuedBy or fallback to employee ID\n      ]);\n\n      await client.query('COMMIT');\n\n      const idCard = result.rows[0];\n\n      // Get complete ID card data\n      const completeIdCard = await this.getIdCardWithDetails(idCard.id);\n\n      logger.info(`ID card created successfully for employee: ${employee.employee_id}`, {\n        idCardId: idCard.id,\n        employeeId: data.employeeId,\n        expiryDate\n      });\n\n      return completeIdCard;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to create ID card', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get ID card with complete details\n   */\n  async getIdCardWithDetails(idCardId: string): Promise<IdCard> {\n    const query = `\n      SELECT \n        ic.id,\n        ic.employee_id as \"employeeId\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\",\n        ic.qr_code_hash as \"qrCodeHash\",\n        ic.is_active as \"isActive\",\n        ic.expiry_date as \"expiryDate\",\n        ic.created_at as \"createdAt\",\n        ic.updated_at as \"updatedAt\"\n      FROM id_cards ic\n      JOIN employees e ON ic.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE ic.id = $1\n    `;\n\n    const result = await getPool().query(query, [idCardId]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('ID card not found');\n    }\n\n    return result.rows[0];\n  }\n\n  /**\n   * List ID cards with filtering and pagination\n   */\n  async listIdCards(params: IdCardListParams = {}): Promise<{\n    idCards: IdCard[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      search,\n      departmentId,\n      isActive,\n      isExpired,\n      sortBy = 'created_at',\n      sortOrder = 'desc'\n    } = params;\n\n    const offset = (page - 1) * limit;\n\n    // Build WHERE clause\n    const whereConditions: string[] = [];\n    const queryParams: any[] = [];\n    let paramIndex = 1;\n\n    if (search) {\n      whereConditions.push(`(\n        e.employee_id ILIKE $${paramIndex} OR \n        u.first_name ILIKE $${paramIndex} OR \n        u.last_name ILIKE $${paramIndex} OR \n        d.name ILIKE $${paramIndex}\n      )`);\n      queryParams.push(`%${search}%`);\n      paramIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`e.department_id = $${paramIndex}`);\n      queryParams.push(departmentId);\n      paramIndex++;\n    }\n\n    if (isActive !== undefined) {\n      whereConditions.push(`ic.is_active = $${paramIndex}`);\n      queryParams.push(isActive);\n      paramIndex++;\n    }\n\n    if (isExpired !== undefined) {\n      if (isExpired) {\n        whereConditions.push(`ic.expiry_date < CURRENT_DATE`);\n      } else {\n        whereConditions.push(`ic.expiry_date >= CURRENT_DATE`);\n      }\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM id_cards ic\n      JOIN employees e ON ic.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n    `;\n\n    const countResult = await getPool().query(countQuery, queryParams);\n    const total = parseInt(countResult.rows[0].total);\n\n    // Data query\n    const dataQuery = `\n      SELECT \n        ic.id,\n        ic.employee_id as \"employeeId\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\",\n        ic.qr_code_hash as \"qrCodeHash\",\n        ic.is_active as \"isActive\",\n        ic.expiry_date as \"expiryDate\",\n        ic.created_at as \"createdAt\",\n        ic.updated_at as \"updatedAt\"\n      FROM id_cards ic\n      JOIN employees e ON ic.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n      ORDER BY ic.${sortBy} ${sortOrder.toUpperCase()}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    queryParams.push(limit, offset);\n    const result = await getPool().query(dataQuery, queryParams);\n\n    return {\n      idCards: result.rows,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  /**\n   * Deactivate ID card\n   */\n  async deactivateIdCard(idCardId: string): Promise<void> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if ID card exists\n      const existingCard = await this.getIdCardWithDetails(idCardId);\n      if (!existingCard) {\n        throw new Error('ID card not found');\n      }\n\n      // Deactivate ID card\n      const query = `\n        UPDATE id_cards \n        SET is_active = false, updated_at = CURRENT_TIMESTAMP\n        WHERE id = $1\n      `;\n\n      await client.query(query, [idCardId]);\n\n      await client.query('COMMIT');\n\n      logger.info(`ID card deactivated successfully: ${existingCard.employeeCode}`, {\n        idCardId,\n        employeeId: existingCard.employeeId\n      });\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to deactivate ID card', { error: (error as Error).message, idCardId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Generate ID cards for all employees in a department\n   */\n  async generateDepartmentIdCards(departmentId: string): Promise<{\n    success: number;\n    failed: number;\n    errors: Array<{ employeeId: string; error: string }>;\n  }> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get all active employees in department\n      const employeesQuery = `\n        SELECT e.id, e.employee_id\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        WHERE e.department_id = $1 AND e.status = 'active' AND u.is_active = true\n      `;\n\n      const employeesResult = await client.query(employeesQuery, [departmentId]);\n      const employees = employeesResult.rows;\n\n      let success = 0;\n      let failed = 0;\n      const errors: Array<{ employeeId: string; error: string }> = [];\n\n      for (const employee of employees) {\n        try {\n          // Check if employee already has active ID card\n          const existingCardQuery = `\n            SELECT id FROM id_cards \n            WHERE employee_id = $1 AND is_active = true\n          `;\n          const existingCard = await client.query(existingCardQuery, [employee.id]);\n          \n          if (existingCard.rows.length === 0) {\n            // Create ID card\n            await this.createIdCard({\n              employeeId: employee.id\n            });\n            success++;\n          } else {\n            errors.push({\n              employeeId: employee.employee_id,\n              error: 'Employee already has an active ID card'\n            });\n            failed++;\n          }\n        } catch (error) {\n          errors.push({\n            employeeId: employee.employee_id,\n            error: (error as Error).message\n          });\n          failed++;\n        }\n      }\n\n      await client.query('COMMIT');\n\n      logger.info(`Department ID cards generation completed`, {\n        departmentId,\n        success,\n        failed,\n        total: employees.length\n      });\n\n      return { success, failed, errors };\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to generate department ID cards', { error: (error as Error).message, departmentId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get ID card statistics\n   */\n  async getIdCardStats(): Promise<{\n    total: number;\n    active: number;\n    expired: number;\n    expiringSoon: number;\n    byDepartment: Array<{ departmentName: string; count: number }>;\n  }> {\n    const query = `\n      SELECT \n        COUNT(*) as total,\n        COUNT(*) FILTER (WHERE is_active = true) as active,\n        COUNT(*) FILTER (WHERE expiry_date < CURRENT_DATE) as expired,\n        COUNT(*) FILTER (WHERE expiry_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days') as expiring_soon\n      FROM id_cards\n    `;\n\n    const deptQuery = `\n      SELECT \n        COALESCE(d.name, 'Unassigned') as department_name,\n        COUNT(*) as count\n      FROM id_cards ic\n      JOIN employees e ON ic.employee_id = e.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE ic.is_active = true\n      GROUP BY d.name\n      ORDER BY count DESC\n    `;\n\n    const [statsResult, deptResult] = await Promise.all([\n      getPool().query(query),\n      getPool().query(deptQuery)\n    ]);\n\n    const stats = statsResult.rows[0];\n    const byDepartment = deptResult.rows;\n\n    return {\n      total: parseInt(stats.total),\n      active: parseInt(stats.active),\n      expired: parseInt(stats.expired),\n      expiringSoon: parseInt(stats.expiring_soon),\n      byDepartment\n    };\n  }\n\n  /**\n   * Get QR code data for ID card\n   */\n  async getQrCodeData(idCardId: string): Promise<{\n    qrCodeData: string;\n    qrCodeImage: string;\n  }> {\n    const query = `\n      SELECT \n        ic.qr_code_data as \"qrCodeData\",\n        ic.qr_code_hash as \"qrCodeHash\"\n      FROM id_cards ic\n      WHERE ic.id = $1 AND ic.is_active = true\n    `;\n\n    const result = await getPool().query(query, [idCardId]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('ID card not found or inactive');\n    }\n\n    const row = result.rows[0];\n    \n    try {\n      // Generate actual QR code image from the stored data\n      const qrCodeImage = await QRCode.toDataURL(row.qrCodeData, {\n        width: 256,\n        margin: 2,\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF'\n        }\n      });\n      \n      return {\n        qrCodeData: row.qrCodeData,\n        qrCodeImage: qrCodeImage\n      };\n    } catch (error) {\n      logger.error('Failed to generate QR code image', { error: (error as Error).message, idCardId });\n      \n      // Fallback to placeholder if QR generation fails\n      return {\n        qrCodeData: row.qrCodeData,\n        qrCodeImage: `data:image/svg+xml;base64,${Buffer.from(`\n          <svg width=\"200\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n            <rect width=\"200\" height=\"200\" fill=\"white\" stroke=\"#ccc\" stroke-width=\"2\"/>\n            <text x=\"100\" y=\"100\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"12\" fill=\"#666\">\n              QR Code Error\n            </text>\n          </svg>\n        `).toString('base64')}`\n      };\n    }\n  }\n\n  /**\n   * Generate QR code data for employee\n   */\n  private generateQrCodeData(employee: any): string {\n    const timestamp = Date.now();\n    const data = {\n      company: 'TITO_HR_SYSTEM',\n      employeeId: employee.employee_id,\n      department: employee.department_name || 'UNASSIGNED',\n      timestamp: timestamp.toString()\n    };\n\n    return JSON.stringify(data);\n  }\n\n  /**\n   * Get default expiry years from system settings\n   */\n  private async getDefaultExpiryYears(): Promise<number> {\n    try {\n      const query = `\n        SELECT setting_value \n        FROM system_settings \n        WHERE setting_key = 'qr_code_expiry_years' AND is_active = true\n      `;\n      \n      const result = await getPool().query(query);\n      return result.rows.length > 0 ? parseInt(result.rows[0].setting_value) : 2;\n    } catch (error) {\n      logger.warn('Failed to get default expiry years from system settings, using default value', { error: (error as Error).message });\n      return 2; // Default to 2 years\n    }\n  }\n}"],"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","ignoreList":[]}