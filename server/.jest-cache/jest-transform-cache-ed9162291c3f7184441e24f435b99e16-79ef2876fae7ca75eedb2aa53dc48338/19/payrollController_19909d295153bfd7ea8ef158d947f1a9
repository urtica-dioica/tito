df11460f0c6c4949a3bfc7942c409806
"use strict";

/* istanbul ignore next */
function cov_hzsouck27() {
  var path = "/home/kim/tito/server/src/controllers/payroll/payrollController.ts";
  var hash = "66d402944afdaf63880ea33f56115cd61f29c694";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/payroll/payrollController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 22
        },
        end: {
          line: 37,
          column: 1
        }
      },
      "36": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 62
        }
      },
      "37": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 38,
          column: 62
        }
      },
      "38": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 63
        }
      },
      "39": {
        start: {
          line: 40,
          column: 25
        },
        end: {
          line: 40,
          column: 73
        }
      },
      "40": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 41,
          column: 81
        }
      },
      "41": {
        start: {
          line: 42,
          column: 18
        },
        end: {
          line: 42,
          column: 54
        }
      },
      "42": {
        start: {
          line: 43,
          column: 17
        },
        end: {
          line: 43,
          column: 63
        }
      },
      "43": {
        start: {
          line: 51,
          column: 26
        },
        end: {
          line: 51,
          column: 58
        }
      },
      "44": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "45": {
        start: {
          line: 53,
          column: 66
        },
        end: {
          line: 53,
          column: 74
        }
      },
      "46": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "47": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 59,
          column: 19
        }
      },
      "48": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 23
        }
      },
      "49": {
        start: {
          line: 62,
          column: 34
        },
        end: {
          line: 67,
          column: 14
        }
      },
      "50": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 73,
          column: 15
        }
      },
      "51": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "52": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 86,
          column: 15
        }
      },
      "53": {
        start: {
          line: 95,
          column: 26
        },
        end: {
          line: 95,
          column: 58
        }
      },
      "54": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "55": {
        start: {
          line: 97,
          column: 64
        },
        end: {
          line: 97,
          column: 73
        }
      },
      "56": {
        start: {
          line: 98,
          column: 27
        },
        end: {
          line: 104,
          column: 13
        }
      },
      "57": {
        start: {
          line: 105,
          column: 27
        },
        end: {
          line: 105,
          column: 90
        }
      },
      "58": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 117,
          column: 15
        }
      },
      "59": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "60": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 130,
          column: 15
        }
      },
      "61": {
        start: {
          line: 139,
          column: 26
        },
        end: {
          line: 139,
          column: 58
        }
      },
      "62": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "63": {
        start: {
          line: 141,
          column: 27
        },
        end: {
          line: 141,
          column: 37
        }
      },
      "64": {
        start: {
          line: 142,
          column: 34
        },
        end: {
          line: 142,
          column: 92
        }
      },
      "65": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "66": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 148,
          column: 19
        }
      },
      "67": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 23
        }
      },
      "68": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 156,
          column: 15
        }
      },
      "69": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 163,
          column: 15
        }
      },
      "70": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 169,
          column: 15
        }
      },
      "71": {
        start: {
          line: 178,
          column: 26
        },
        end: {
          line: 178,
          column: 58
        }
      },
      "72": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "73": {
        start: {
          line: 180,
          column: 27
        },
        end: {
          line: 180,
          column: 37
        }
      },
      "74": {
        start: {
          line: 181,
          column: 31
        },
        end: {
          line: 181,
          column: 39
        }
      },
      "75": {
        start: {
          line: 182,
          column: 34
        },
        end: {
          line: 182,
          column: 107
        }
      },
      "76": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 190,
          column: 13
        }
      },
      "77": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 188,
          column: 19
        }
      },
      "78": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 23
        }
      },
      "79": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "80": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 204,
          column: 15
        }
      },
      "81": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 210,
          column: 15
        }
      },
      "82": {
        start: {
          line: 219,
          column: 26
        },
        end: {
          line: 219,
          column: 58
        }
      },
      "83": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "84": {
        start: {
          line: 221,
          column: 27
        },
        end: {
          line: 221,
          column: 37
        }
      },
      "85": {
        start: {
          line: 222,
          column: 28
        },
        end: {
          line: 222,
          column: 89
        }
      },
      "86": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 230,
          column: 13
        }
      },
      "87": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 228,
          column: 19
        }
      },
      "88": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 23
        }
      },
      "89": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 235,
          column: 15
        }
      },
      "90": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 242,
          column: 15
        }
      },
      "91": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 248,
          column: 15
        }
      },
      "92": {
        start: {
          line: 257,
          column: 26
        },
        end: {
          line: 257,
          column: 58
        }
      },
      "93": {
        start: {
          line: 258,
          column: 23
        },
        end: {
          line: 258,
          column: 33
        }
      },
      "94": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "95": {
        start: {
          line: 260,
          column: 37
        },
        end: {
          line: 260,
          column: 46
        }
      },
      "96": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 100
        }
      },
      "97": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 277,
          column: 13
        }
      },
      "98": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 266,
          column: 105
        }
      },
      "99": {
        start: {
          line: 270,
          column: 42
        },
        end: {
          line: 270,
          column: 123
        }
      },
      "100": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 78
        }
      },
      "101": {
        start: {
          line: 271,
          column: 62
        },
        end: {
          line: 271,
          column: 76
        }
      },
      "102": {
        start: {
          line: 273,
          column: 51
        },
        end: {
          line: 273,
          column: 157
        }
      },
      "103": {
        start: {
          line: 273,
          column: 86
        },
        end: {
          line: 273,
          column: 156
        }
      },
      "104": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 81
        }
      },
      "105": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 109
        }
      },
      "106": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 287,
          column: 15
        }
      },
      "107": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 294,
          column: 15
        }
      },
      "108": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 305,
          column: 13
        }
      },
      "109": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 297,
          column: 99
        }
      },
      "110": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 304,
          column: 19
        }
      },
      "111": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 311,
          column: 15
        }
      },
      "112": {
        start: {
          line: 320,
          column: 26
        },
        end: {
          line: 320,
          column: 58
        }
      },
      "113": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 343,
          column: 9
        }
      },
      "114": {
        start: {
          line: 322,
          column: 27
        },
        end: {
          line: 322,
          column: 37
        }
      },
      "115": {
        start: {
          line: 323,
          column: 28
        },
        end: {
          line: 323,
          column: 87
        }
      },
      "116": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 329,
          column: 15
        }
      },
      "117": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 336,
          column: 15
        }
      },
      "118": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 342,
          column: 15
        }
      },
      "119": {
        start: {
          line: 351,
          column: 26
        },
        end: {
          line: 351,
          column: 58
        }
      },
      "120": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 387,
          column: 9
        }
      },
      "121": {
        start: {
          line: 353,
          column: 76
        },
        end: {
          line: 353,
          column: 85
        }
      },
      "122": {
        start: {
          line: 354,
          column: 27
        },
        end: {
          line: 360,
          column: 13
        }
      },
      "123": {
        start: {
          line: 361,
          column: 27
        },
        end: {
          line: 361,
          column: 90
        }
      },
      "124": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 373,
          column: 15
        }
      },
      "125": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 380,
          column: 15
        }
      },
      "126": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 386,
          column: 15
        }
      },
      "127": {
        start: {
          line: 395,
          column: 26
        },
        end: {
          line: 395,
          column: 58
        }
      },
      "128": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 426,
          column: 9
        }
      },
      "129": {
        start: {
          line: 397,
          column: 27
        },
        end: {
          line: 397,
          column: 37
        }
      },
      "130": {
        start: {
          line: 398,
          column: 27
        },
        end: {
          line: 398,
          column: 85
        }
      },
      "131": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 406,
          column: 13
        }
      },
      "132": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 404,
          column: 19
        }
      },
      "133": {
        start: {
          line: 405,
          column: 16
        },
        end: {
          line: 405,
          column: 23
        }
      },
      "134": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 412,
          column: 15
        }
      },
      "135": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 419,
          column: 15
        }
      },
      "136": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 425,
          column: 15
        }
      },
      "137": {
        start: {
          line: 434,
          column: 26
        },
        end: {
          line: 434,
          column: 58
        }
      },
      "138": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 467,
          column: 9
        }
      },
      "139": {
        start: {
          line: 436,
          column: 27
        },
        end: {
          line: 436,
          column: 37
        }
      },
      "140": {
        start: {
          line: 437,
          column: 31
        },
        end: {
          line: 437,
          column: 39
        }
      },
      "141": {
        start: {
          line: 438,
          column: 27
        },
        end: {
          line: 438,
          column: 100
        }
      },
      "142": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 446,
          column: 13
        }
      },
      "143": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 444,
          column: 19
        }
      },
      "144": {
        start: {
          line: 445,
          column: 16
        },
        end: {
          line: 445,
          column: 23
        }
      },
      "145": {
        start: {
          line: 447,
          column: 12
        },
        end: {
          line: 452,
          column: 15
        }
      },
      "146": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 460,
          column: 15
        }
      },
      "147": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 466,
          column: 15
        }
      },
      "148": {
        start: {
          line: 475,
          column: 26
        },
        end: {
          line: 475,
          column: 58
        }
      },
      "149": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 515,
          column: 9
        }
      },
      "150": {
        start: {
          line: 477,
          column: 27
        },
        end: {
          line: 477,
          column: 37
        }
      },
      "151": {
        start: {
          line: 478,
          column: 31
        },
        end: {
          line: 478,
          column: 47
        }
      },
      "152": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 486,
          column: 13
        }
      },
      "153": {
        start: {
          line: 480,
          column: 16
        },
        end: {
          line: 484,
          column: 19
        }
      },
      "154": {
        start: {
          line: 485,
          column: 16
        },
        end: {
          line: 485,
          column: 23
        }
      },
      "155": {
        start: {
          line: 487,
          column: 27
        },
        end: {
          line: 487,
          column: 101
        }
      },
      "156": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 495,
          column: 13
        }
      },
      "157": {
        start: {
          line: 489,
          column: 16
        },
        end: {
          line: 493,
          column: 19
        }
      },
      "158": {
        start: {
          line: 494,
          column: 16
        },
        end: {
          line: 494,
          column: 23
        }
      },
      "159": {
        start: {
          line: 496,
          column: 12
        },
        end: {
          line: 501,
          column: 15
        }
      },
      "160": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 508,
          column: 15
        }
      },
      "161": {
        start: {
          line: 509,
          column: 12
        },
        end: {
          line: 514,
          column: 15
        }
      },
      "162": {
        start: {
          line: 523,
          column: 26
        },
        end: {
          line: 523,
          column: 58
        }
      },
      "163": {
        start: {
          line: 524,
          column: 8
        },
        end: {
          line: 556,
          column: 9
        }
      },
      "164": {
        start: {
          line: 525,
          column: 27
        },
        end: {
          line: 525,
          column: 37
        }
      },
      "165": {
        start: {
          line: 526,
          column: 31
        },
        end: {
          line: 526,
          column: 39
        }
      },
      "166": {
        start: {
          line: 527,
          column: 12
        },
        end: {
          line: 534,
          column: 13
        }
      },
      "167": {
        start: {
          line: 528,
          column: 16
        },
        end: {
          line: 532,
          column: 19
        }
      },
      "168": {
        start: {
          line: 533,
          column: 16
        },
        end: {
          line: 533,
          column: 23
        }
      },
      "169": {
        start: {
          line: 535,
          column: 34
        },
        end: {
          line: 535,
          column: 109
        }
      },
      "170": {
        start: {
          line: 536,
          column: 12
        },
        end: {
          line: 541,
          column: 15
        }
      },
      "171": {
        start: {
          line: 544,
          column: 12
        },
        end: {
          line: 549,
          column: 15
        }
      },
      "172": {
        start: {
          line: 550,
          column: 12
        },
        end: {
          line: 555,
          column: 15
        }
      },
      "173": {
        start: {
          line: 562,
          column: 26
        },
        end: {
          line: 562,
          column: 58
        }
      },
      "174": {
        start: {
          line: 563,
          column: 8
        },
        end: {
          line: 584,
          column: 9
        }
      },
      "175": {
        start: {
          line: 564,
          column: 27
        },
        end: {
          line: 564,
          column: 37
        }
      },
      "176": {
        start: {
          line: 565,
          column: 36
        },
        end: {
          line: 565,
          column: 99
        }
      },
      "177": {
        start: {
          line: 566,
          column: 12
        },
        end: {
          line: 571,
          column: 15
        }
      },
      "178": {
        start: {
          line: 574,
          column: 12
        },
        end: {
          line: 578,
          column: 15
        }
      },
      "179": {
        start: {
          line: 579,
          column: 12
        },
        end: {
          line: 583,
          column: 15
        }
      },
      "180": {
        start: {
          line: 590,
          column: 26
        },
        end: {
          line: 590,
          column: 58
        }
      },
      "181": {
        start: {
          line: 591,
          column: 8
        },
        end: {
          line: 616,
          column: 9
        }
      },
      "182": {
        start: {
          line: 592,
          column: 58
        },
        end: {
          line: 592,
          column: 66
        }
      },
      "183": {
        start: {
          line: 593,
          column: 27
        },
        end: {
          line: 597,
          column: 14
        }
      },
      "184": {
        start: {
          line: 598,
          column: 12
        },
        end: {
          line: 603,
          column: 15
        }
      },
      "185": {
        start: {
          line: 606,
          column: 12
        },
        end: {
          line: 610,
          column: 15
        }
      },
      "186": {
        start: {
          line: 611,
          column: 12
        },
        end: {
          line: 615,
          column: 15
        }
      },
      "187": {
        start: {
          line: 624,
          column: 26
        },
        end: {
          line: 624,
          column: 58
        }
      },
      "188": {
        start: {
          line: 625,
          column: 8
        },
        end: {
          line: 660,
          column: 9
        }
      },
      "189": {
        start: {
          line: 626,
          column: 27
        },
        end: {
          line: 626,
          column: 37
        }
      },
      "190": {
        start: {
          line: 627,
          column: 45
        },
        end: {
          line: 627,
          column: 53
        }
      },
      "191": {
        start: {
          line: 628,
          column: 12
        },
        end: {
          line: 635,
          column: 13
        }
      },
      "192": {
        start: {
          line: 629,
          column: 16
        },
        end: {
          line: 633,
          column: 19
        }
      },
      "193": {
        start: {
          line: 634,
          column: 16
        },
        end: {
          line: 634,
          column: 23
        }
      },
      "194": {
        start: {
          line: 636,
          column: 35
        },
        end: {
          line: 636,
          column: 129
        }
      },
      "195": {
        start: {
          line: 637,
          column: 12
        },
        end: {
          line: 645,
          column: 15
        }
      },
      "196": {
        start: {
          line: 648,
          column: 12
        },
        end: {
          line: 653,
          column: 15
        }
      },
      "197": {
        start: {
          line: 654,
          column: 12
        },
        end: {
          line: 659,
          column: 15
        }
      },
      "198": {
        start: {
          line: 668,
          column: 26
        },
        end: {
          line: 668,
          column: 58
        }
      },
      "199": {
        start: {
          line: 669,
          column: 8
        },
        end: {
          line: 705,
          column: 9
        }
      },
      "200": {
        start: {
          line: 670,
          column: 27
        },
        end: {
          line: 670,
          column: 37
        }
      },
      "201": {
        start: {
          line: 671,
          column: 37
        },
        end: {
          line: 671,
          column: 46
        }
      },
      "202": {
        start: {
          line: 673,
          column: 12
        },
        end: {
          line: 673,
          column: 100
        }
      },
      "203": {
        start: {
          line: 675,
          column: 28
        },
        end: {
          line: 675,
          column: 107
        }
      },
      "204": {
        start: {
          line: 677,
          column: 47
        },
        end: {
          line: 677,
          column: 153
        }
      },
      "205": {
        start: {
          line: 677,
          column: 82
        },
        end: {
          line: 677,
          column: 152
        }
      },
      "206": {
        start: {
          line: 678,
          column: 12
        },
        end: {
          line: 678,
          column: 77
        }
      },
      "207": {
        start: {
          line: 680,
          column: 12
        },
        end: {
          line: 680,
          column: 105
        }
      },
      "208": {
        start: {
          line: 681,
          column: 12
        },
        end: {
          line: 690,
          column: 15
        }
      },
      "209": {
        start: {
          line: 693,
          column: 12
        },
        end: {
          line: 698,
          column: 15
        }
      },
      "210": {
        start: {
          line: 699,
          column: 12
        },
        end: {
          line: 704,
          column: 15
        }
      },
      "211": {
        start: {
          line: 713,
          column: 26
        },
        end: {
          line: 713,
          column: 58
        }
      },
      "212": {
        start: {
          line: 714,
          column: 8
        },
        end: {
          line: 744,
          column: 9
        }
      },
      "213": {
        start: {
          line: 715,
          column: 27
        },
        end: {
          line: 715,
          column: 37
        }
      },
      "214": {
        start: {
          line: 716,
          column: 27
        },
        end: {
          line: 716,
          column: 86
        }
      },
      "215": {
        start: {
          line: 717,
          column: 12
        },
        end: {
          line: 724,
          column: 13
        }
      },
      "216": {
        start: {
          line: 718,
          column: 16
        },
        end: {
          line: 722,
          column: 19
        }
      },
      "217": {
        start: {
          line: 723,
          column: 16
        },
        end: {
          line: 723,
          column: 23
        }
      },
      "218": {
        start: {
          line: 725,
          column: 12
        },
        end: {
          line: 730,
          column: 15
        }
      },
      "219": {
        start: {
          line: 733,
          column: 12
        },
        end: {
          line: 737,
          column: 15
        }
      },
      "220": {
        start: {
          line: 738,
          column: 12
        },
        end: {
          line: 743,
          column: 15
        }
      },
      "221": {
        start: {
          line: 752,
          column: 26
        },
        end: {
          line: 752,
          column: 58
        }
      },
      "222": {
        start: {
          line: 753,
          column: 8
        },
        end: {
          line: 782,
          column: 9
        }
      },
      "223": {
        start: {
          line: 754,
          column: 66
        },
        end: {
          line: 754,
          column: 75
        }
      },
      "224": {
        start: {
          line: 755,
          column: 27
        },
        end: {
          line: 758,
          column: 13
        }
      },
      "225": {
        start: {
          line: 759,
          column: 27
        },
        end: {
          line: 759,
          column: 101
        }
      },
      "226": {
        start: {
          line: 760,
          column: 12
        },
        end: {
          line: 769,
          column: 13
        }
      },
      "227": {
        start: {
          line: 761,
          column: 16
        },
        end: {
          line: 761,
          column: 58
        }
      },
      "228": {
        start: {
          line: 762,
          column: 16
        },
        end: {
          line: 762,
          column: 141
        }
      },
      "229": {
        start: {
          line: 763,
          column: 16
        },
        end: {
          line: 763,
          column: 33
        }
      },
      "230": {
        start: {
          line: 766,
          column: 16
        },
        end: {
          line: 766,
          column: 65
        }
      },
      "231": {
        start: {
          line: 767,
          column: 16
        },
        end: {
          line: 767,
          column: 141
        }
      },
      "232": {
        start: {
          line: 768,
          column: 16
        },
        end: {
          line: 768,
          column: 33
        }
      },
      "233": {
        start: {
          line: 772,
          column: 12
        },
        end: {
          line: 775,
          column: 15
        }
      },
      "234": {
        start: {
          line: 776,
          column: 12
        },
        end: {
          line: 781,
          column: 15
        }
      },
      "235": {
        start: {
          line: 790,
          column: 26
        },
        end: {
          line: 790,
          column: 58
        }
      },
      "236": {
        start: {
          line: 791,
          column: 8
        },
        end: {
          line: 811,
          column: 9
        }
      },
      "237": {
        start: {
          line: 792,
          column: 26
        },
        end: {
          line: 792,
          column: 81
        }
      },
      "238": {
        start: {
          line: 793,
          column: 12
        },
        end: {
          line: 798,
          column: 15
        }
      },
      "239": {
        start: {
          line: 801,
          column: 12
        },
        end: {
          line: 804,
          column: 15
        }
      },
      "240": {
        start: {
          line: 805,
          column: 12
        },
        end: {
          line: 810,
          column: 15
        }
      },
      "241": {
        start: {
          line: 815,
          column: 26
        },
        end: {
          line: 815,
          column: 58
        }
      },
      "242": {
        start: {
          line: 816,
          column: 8
        },
        end: {
          line: 837,
          column: 9
        }
      },
      "243": {
        start: {
          line: 817,
          column: 34
        },
        end: {
          line: 817,
          column: 101
        }
      },
      "244": {
        start: {
          line: 818,
          column: 12
        },
        end: {
          line: 823,
          column: 15
        }
      },
      "245": {
        start: {
          line: 826,
          column: 12
        },
        end: {
          line: 830,
          column: 15
        }
      },
      "246": {
        start: {
          line: 831,
          column: 12
        },
        end: {
          line: 836,
          column: 15
        }
      },
      "247": {
        start: {
          line: 840,
          column: 26
        },
        end: {
          line: 840,
          column: 58
        }
      },
      "248": {
        start: {
          line: 841,
          column: 8
        },
        end: {
          line: 862,
          column: 9
        }
      },
      "249": {
        start: {
          line: 842,
          column: 27
        },
        end: {
          line: 842,
          column: 93
        }
      },
      "250": {
        start: {
          line: 843,
          column: 12
        },
        end: {
          line: 848,
          column: 15
        }
      },
      "251": {
        start: {
          line: 851,
          column: 12
        },
        end: {
          line: 855,
          column: 15
        }
      },
      "252": {
        start: {
          line: 856,
          column: 12
        },
        end: {
          line: 861,
          column: 15
        }
      },
      "253": {
        start: {
          line: 865,
          column: 26
        },
        end: {
          line: 865,
          column: 58
        }
      },
      "254": {
        start: {
          line: 866,
          column: 8
        },
        end: {
          line: 897,
          column: 9
        }
      },
      "255": {
        start: {
          line: 867,
          column: 27
        },
        end: {
          line: 867,
          column: 37
        }
      },
      "256": {
        start: {
          line: 868,
          column: 34
        },
        end: {
          line: 868,
          column: 105
        }
      },
      "257": {
        start: {
          line: 869,
          column: 12
        },
        end: {
          line: 876,
          column: 13
        }
      },
      "258": {
        start: {
          line: 870,
          column: 16
        },
        end: {
          line: 874,
          column: 19
        }
      },
      "259": {
        start: {
          line: 875,
          column: 16
        },
        end: {
          line: 875,
          column: 23
        }
      },
      "260": {
        start: {
          line: 877,
          column: 12
        },
        end: {
          line: 882,
          column: 15
        }
      },
      "261": {
        start: {
          line: 885,
          column: 12
        },
        end: {
          line: 890,
          column: 15
        }
      },
      "262": {
        start: {
          line: 891,
          column: 12
        },
        end: {
          line: 896,
          column: 15
        }
      },
      "263": {
        start: {
          line: 900,
          column: 26
        },
        end: {
          line: 900,
          column: 58
        }
      },
      "264": {
        start: {
          line: 901,
          column: 8
        },
        end: {
          line: 930,
          column: 9
        }
      },
      "265": {
        start: {
          line: 902,
          column: 27
        },
        end: {
          line: 902,
          column: 37
        }
      },
      "266": {
        start: {
          line: 903,
          column: 28
        },
        end: {
          line: 903,
          column: 89
        }
      },
      "267": {
        start: {
          line: 904,
          column: 12
        },
        end: {
          line: 911,
          column: 13
        }
      },
      "268": {
        start: {
          line: 905,
          column: 16
        },
        end: {
          line: 909,
          column: 19
        }
      },
      "269": {
        start: {
          line: 910,
          column: 16
        },
        end: {
          line: 910,
          column: 23
        }
      },
      "270": {
        start: {
          line: 912,
          column: 12
        },
        end: {
          line: 916,
          column: 15
        }
      },
      "271": {
        start: {
          line: 919,
          column: 12
        },
        end: {
          line: 923,
          column: 15
        }
      },
      "272": {
        start: {
          line: 924,
          column: 12
        },
        end: {
          line: 929,
          column: 15
        }
      },
      "273": {
        start: {
          line: 934,
          column: 26
        },
        end: {
          line: 934,
          column: 58
        }
      },
      "274": {
        start: {
          line: 935,
          column: 8
        },
        end: {
          line: 956,
          column: 9
        }
      },
      "275": {
        start: {
          line: 936,
          column: 32
        },
        end: {
          line: 936,
          column: 97
        }
      },
      "276": {
        start: {
          line: 937,
          column: 12
        },
        end: {
          line: 942,
          column: 15
        }
      },
      "277": {
        start: {
          line: 945,
          column: 12
        },
        end: {
          line: 949,
          column: 15
        }
      },
      "278": {
        start: {
          line: 950,
          column: 12
        },
        end: {
          line: 955,
          column: 15
        }
      },
      "279": {
        start: {
          line: 959,
          column: 26
        },
        end: {
          line: 959,
          column: 58
        }
      },
      "280": {
        start: {
          line: 960,
          column: 8
        },
        end: {
          line: 981,
          column: 9
        }
      },
      "281": {
        start: {
          line: 961,
          column: 27
        },
        end: {
          line: 961,
          column: 91
        }
      },
      "282": {
        start: {
          line: 962,
          column: 12
        },
        end: {
          line: 967,
          column: 15
        }
      },
      "283": {
        start: {
          line: 970,
          column: 12
        },
        end: {
          line: 974,
          column: 15
        }
      },
      "284": {
        start: {
          line: 975,
          column: 12
        },
        end: {
          line: 980,
          column: 15
        }
      },
      "285": {
        start: {
          line: 984,
          column: 26
        },
        end: {
          line: 984,
          column: 58
        }
      },
      "286": {
        start: {
          line: 985,
          column: 8
        },
        end: {
          line: 1017,
          column: 9
        }
      },
      "287": {
        start: {
          line: 986,
          column: 27
        },
        end: {
          line: 986,
          column: 37
        }
      },
      "288": {
        start: {
          line: 987,
          column: 31
        },
        end: {
          line: 987,
          column: 39
        }
      },
      "289": {
        start: {
          line: 988,
          column: 32
        },
        end: {
          line: 988,
          column: 103
        }
      },
      "290": {
        start: {
          line: 989,
          column: 12
        },
        end: {
          line: 996,
          column: 13
        }
      },
      "291": {
        start: {
          line: 990,
          column: 16
        },
        end: {
          line: 994,
          column: 19
        }
      },
      "292": {
        start: {
          line: 995,
          column: 16
        },
        end: {
          line: 995,
          column: 23
        }
      },
      "293": {
        start: {
          line: 997,
          column: 12
        },
        end: {
          line: 1002,
          column: 15
        }
      },
      "294": {
        start: {
          line: 1005,
          column: 12
        },
        end: {
          line: 1010,
          column: 15
        }
      },
      "295": {
        start: {
          line: 1011,
          column: 12
        },
        end: {
          line: 1016,
          column: 15
        }
      },
      "296": {
        start: {
          line: 1020,
          column: 26
        },
        end: {
          line: 1020,
          column: 58
        }
      },
      "297": {
        start: {
          line: 1021,
          column: 8
        },
        end: {
          line: 1050,
          column: 9
        }
      },
      "298": {
        start: {
          line: 1022,
          column: 27
        },
        end: {
          line: 1022,
          column: 37
        }
      },
      "299": {
        start: {
          line: 1023,
          column: 28
        },
        end: {
          line: 1023,
          column: 87
        }
      },
      "300": {
        start: {
          line: 1024,
          column: 12
        },
        end: {
          line: 1031,
          column: 13
        }
      },
      "301": {
        start: {
          line: 1025,
          column: 16
        },
        end: {
          line: 1029,
          column: 19
        }
      },
      "302": {
        start: {
          line: 1030,
          column: 16
        },
        end: {
          line: 1030,
          column: 23
        }
      },
      "303": {
        start: {
          line: 1032,
          column: 12
        },
        end: {
          line: 1036,
          column: 15
        }
      },
      "304": {
        start: {
          line: 1039,
          column: 12
        },
        end: {
          line: 1043,
          column: 15
        }
      },
      "305": {
        start: {
          line: 1044,
          column: 12
        },
        end: {
          line: 1049,
          column: 15
        }
      },
      "306": {
        start: {
          line: 1054,
          column: 26
        },
        end: {
          line: 1054,
          column: 58
        }
      },
      "307": {
        start: {
          line: 1055,
          column: 8
        },
        end: {
          line: 1076,
          column: 9
        }
      },
      "308": {
        start: {
          line: 1056,
          column: 27
        },
        end: {
          line: 1056,
          column: 104
        }
      },
      "309": {
        start: {
          line: 1057,
          column: 12
        },
        end: {
          line: 1062,
          column: 15
        }
      },
      "310": {
        start: {
          line: 1065,
          column: 12
        },
        end: {
          line: 1069,
          column: 15
        }
      },
      "311": {
        start: {
          line: 1070,
          column: 12
        },
        end: {
          line: 1075,
          column: 15
        }
      },
      "312": {
        start: {
          line: 1079,
          column: 26
        },
        end: {
          line: 1079,
          column: 58
        }
      },
      "313": {
        start: {
          line: 1080,
          column: 8
        },
        end: {
          line: 1101,
          column: 9
        }
      },
      "314": {
        start: {
          line: 1081,
          column: 28
        },
        end: {
          line: 1081,
          column: 106
        }
      },
      "315": {
        start: {
          line: 1082,
          column: 12
        },
        end: {
          line: 1087,
          column: 15
        }
      },
      "316": {
        start: {
          line: 1090,
          column: 12
        },
        end: {
          line: 1094,
          column: 15
        }
      },
      "317": {
        start: {
          line: 1095,
          column: 12
        },
        end: {
          line: 1100,
          column: 15
        }
      },
      "318": {
        start: {
          line: 1105,
          column: 26
        },
        end: {
          line: 1105,
          column: 58
        }
      },
      "319": {
        start: {
          line: 1106,
          column: 8
        },
        end: {
          line: 1140,
          column: 9
        }
      },
      "320": {
        start: {
          line: 1108,
          column: 28
        },
        end: {
          line: 1108,
          column: 36
        }
      },
      "321": {
        start: {
          line: 1109,
          column: 12
        },
        end: {
          line: 1116,
          column: 13
        }
      },
      "322": {
        start: {
          line: 1110,
          column: 16
        },
        end: {
          line: 1114,
          column: 19
        }
      },
      "323": {
        start: {
          line: 1115,
          column: 16
        },
        end: {
          line: 1115,
          column: 23
        }
      },
      "324": {
        start: {
          line: 1117,
          column: 27
        },
        end: {
          line: 1117,
          column: 105
        }
      },
      "325": {
        start: {
          line: 1118,
          column: 12
        },
        end: {
          line: 1127,
          column: 15
        }
      },
      "326": {
        start: {
          line: 1130,
          column: 12
        },
        end: {
          line: 1133,
          column: 15
        }
      },
      "327": {
        start: {
          line: 1134,
          column: 12
        },
        end: {
          line: 1139,
          column: 15
        }
      },
      "328": {
        start: {
          line: 1144,
          column: 26
        },
        end: {
          line: 1144,
          column: 58
        }
      },
      "329": {
        start: {
          line: 1145,
          column: 8
        },
        end: {
          line: 1182,
          column: 9
        }
      },
      "330": {
        start: {
          line: 1146,
          column: 27
        },
        end: {
          line: 1146,
          column: 37
        }
      },
      "331": {
        start: {
          line: 1147,
          column: 12
        },
        end: {
          line: 1154,
          column: 13
        }
      },
      "332": {
        start: {
          line: 1148,
          column: 16
        },
        end: {
          line: 1152,
          column: 19
        }
      },
      "333": {
        start: {
          line: 1153,
          column: 16
        },
        end: {
          line: 1153,
          column: 23
        }
      },
      "334": {
        start: {
          line: 1155,
          column: 28
        },
        end: {
          line: 1155,
          column: 100
        }
      },
      "335": {
        start: {
          line: 1156,
          column: 12
        },
        end: {
          line: 1163,
          column: 13
        }
      },
      "336": {
        start: {
          line: 1157,
          column: 16
        },
        end: {
          line: 1161,
          column: 19
        }
      },
      "337": {
        start: {
          line: 1162,
          column: 16
        },
        end: {
          line: 1162,
          column: 23
        }
      },
      "338": {
        start: {
          line: 1164,
          column: 12
        },
        end: {
          line: 1168,
          column: 15
        }
      },
      "339": {
        start: {
          line: 1171,
          column: 12
        },
        end: {
          line: 1175,
          column: 15
        }
      },
      "340": {
        start: {
          line: 1176,
          column: 12
        },
        end: {
          line: 1181,
          column: 15
        }
      },
      "341": {
        start: {
          line: 1186,
          column: 26
        },
        end: {
          line: 1186,
          column: 58
        }
      },
      "342": {
        start: {
          line: 1187,
          column: 8
        },
        end: {
          line: 1221,
          column: 9
        }
      },
      "343": {
        start: {
          line: 1189,
          column: 28
        },
        end: {
          line: 1189,
          column: 36
        }
      },
      "344": {
        start: {
          line: 1190,
          column: 12
        },
        end: {
          line: 1197,
          column: 13
        }
      },
      "345": {
        start: {
          line: 1191,
          column: 16
        },
        end: {
          line: 1195,
          column: 19
        }
      },
      "346": {
        start: {
          line: 1196,
          column: 16
        },
        end: {
          line: 1196,
          column: 23
        }
      },
      "347": {
        start: {
          line: 1198,
          column: 27
        },
        end: {
          line: 1198,
          column: 96
        }
      },
      "348": {
        start: {
          line: 1199,
          column: 12
        },
        end: {
          line: 1208,
          column: 15
        }
      },
      "349": {
        start: {
          line: 1211,
          column: 12
        },
        end: {
          line: 1214,
          column: 15
        }
      },
      "350": {
        start: {
          line: 1215,
          column: 12
        },
        end: {
          line: 1220,
          column: 15
        }
      },
      "351": {
        start: {
          line: 1225,
          column: 26
        },
        end: {
          line: 1225,
          column: 58
        }
      },
      "352": {
        start: {
          line: 1226,
          column: 8
        },
        end: {
          line: 1247,
          column: 9
        }
      },
      "353": {
        start: {
          line: 1227,
          column: 27
        },
        end: {
          line: 1227,
          column: 95
        }
      },
      "354": {
        start: {
          line: 1228,
          column: 12
        },
        end: {
          line: 1233,
          column: 15
        }
      },
      "355": {
        start: {
          line: 1236,
          column: 12
        },
        end: {
          line: 1240,
          column: 15
        }
      },
      "356": {
        start: {
          line: 1241,
          column: 12
        },
        end: {
          line: 1246,
          column: 15
        }
      },
      "357": {
        start: {
          line: 1250,
          column: 26
        },
        end: {
          line: 1250,
          column: 58
        }
      },
      "358": {
        start: {
          line: 1251,
          column: 8
        },
        end: {
          line: 1272,
          column: 9
        }
      },
      "359": {
        start: {
          line: 1252,
          column: 28
        },
        end: {
          line: 1252,
          column: 97
        }
      },
      "360": {
        start: {
          line: 1253,
          column: 12
        },
        end: {
          line: 1258,
          column: 15
        }
      },
      "361": {
        start: {
          line: 1261,
          column: 12
        },
        end: {
          line: 1265,
          column: 15
        }
      },
      "362": {
        start: {
          line: 1266,
          column: 12
        },
        end: {
          line: 1271,
          column: 15
        }
      },
      "363": {
        start: {
          line: 1275,
          column: 26
        },
        end: {
          line: 1275,
          column: 58
        }
      },
      "364": {
        start: {
          line: 1276,
          column: 23
        },
        end: {
          line: 1276,
          column: 33
        }
      },
      "365": {
        start: {
          line: 1277,
          column: 8
        },
        end: {
          line: 1299,
          column: 9
        }
      },
      "366": {
        start: {
          line: 1278,
          column: 28
        },
        end: {
          line: 1278,
          column: 101
        }
      },
      "367": {
        start: {
          line: 1279,
          column: 12
        },
        end: {
          line: 1284,
          column: 15
        }
      },
      "368": {
        start: {
          line: 1287,
          column: 12
        },
        end: {
          line: 1292,
          column: 15
        }
      },
      "369": {
        start: {
          line: 1293,
          column: 12
        },
        end: {
          line: 1298,
          column: 15
        }
      },
      "370": {
        start: {
          line: 1302,
          column: 26
        },
        end: {
          line: 1302,
          column: 58
        }
      },
      "371": {
        start: {
          line: 1303,
          column: 23
        },
        end: {
          line: 1303,
          column: 33
        }
      },
      "372": {
        start: {
          line: 1304,
          column: 8
        },
        end: {
          line: 1333,
          column: 9
        }
      },
      "373": {
        start: {
          line: 1305,
          column: 28
        },
        end: {
          line: 1305,
          column: 91
        }
      },
      "374": {
        start: {
          line: 1306,
          column: 12
        },
        end: {
          line: 1319,
          column: 13
        }
      },
      "375": {
        start: {
          line: 1307,
          column: 16
        },
        end: {
          line: 1311,
          column: 19
        }
      },
      "376": {
        start: {
          line: 1314,
          column: 16
        },
        end: {
          line: 1318,
          column: 19
        }
      },
      "377": {
        start: {
          line: 1322,
          column: 12
        },
        end: {
          line: 1326,
          column: 15
        }
      },
      "378": {
        start: {
          line: 1327,
          column: 12
        },
        end: {
          line: 1332,
          column: 15
        }
      },
      "379": {
        start: {
          line: 1341,
          column: 26
        },
        end: {
          line: 1341,
          column: 58
        }
      },
      "380": {
        start: {
          line: 1342,
          column: 8
        },
        end: {
          line: 1361,
          column: 9
        }
      },
      "381": {
        start: {
          line: 1343,
          column: 12
        },
        end: {
          line: 1343,
          column: 85
        }
      },
      "382": {
        start: {
          line: 1344,
          column: 12
        },
        end: {
          line: 1348,
          column: 15
        }
      },
      "383": {
        start: {
          line: 1351,
          column: 12
        },
        end: {
          line: 1354,
          column: 15
        }
      },
      "384": {
        start: {
          line: 1355,
          column: 12
        },
        end: {
          line: 1360,
          column: 15
        }
      },
      "385": {
        start: {
          line: 1369,
          column: 26
        },
        end: {
          line: 1369,
          column: 58
        }
      },
      "386": {
        start: {
          line: 1370,
          column: 8
        },
        end: {
          line: 1389,
          column: 9
        }
      },
      "387": {
        start: {
          line: 1371,
          column: 12
        },
        end: {
          line: 1371,
          column: 87
        }
      },
      "388": {
        start: {
          line: 1372,
          column: 12
        },
        end: {
          line: 1376,
          column: 15
        }
      },
      "389": {
        start: {
          line: 1379,
          column: 12
        },
        end: {
          line: 1382,
          column: 15
        }
      },
      "390": {
        start: {
          line: 1383,
          column: 12
        },
        end: {
          line: 1388,
          column: 15
        }
      },
      "391": {
        start: {
          line: 1397,
          column: 26
        },
        end: {
          line: 1397,
          column: 58
        }
      },
      "392": {
        start: {
          line: 1398,
          column: 8
        },
        end: {
          line: 1418,
          column: 9
        }
      },
      "393": {
        start: {
          line: 1399,
          column: 34
        },
        end: {
          line: 1399,
          column: 105
        }
      },
      "394": {
        start: {
          line: 1400,
          column: 12
        },
        end: {
          line: 1405,
          column: 15
        }
      },
      "395": {
        start: {
          line: 1408,
          column: 12
        },
        end: {
          line: 1411,
          column: 15
        }
      },
      "396": {
        start: {
          line: 1412,
          column: 12
        },
        end: {
          line: 1417,
          column: 15
        }
      },
      "397": {
        start: {
          line: 1426,
          column: 26
        },
        end: {
          line: 1426,
          column: 58
        }
      },
      "398": {
        start: {
          line: 1427,
          column: 8
        },
        end: {
          line: 1459,
          column: 9
        }
      },
      "399": {
        start: {
          line: 1428,
          column: 47
        },
        end: {
          line: 1428,
          column: 57
        }
      },
      "400": {
        start: {
          line: 1430,
          column: 28
        },
        end: {
          line: 1430,
          column: 128
        }
      },
      "401": {
        start: {
          line: 1431,
          column: 12
        },
        end: {
          line: 1438,
          column: 13
        }
      },
      "402": {
        start: {
          line: 1432,
          column: 16
        },
        end: {
          line: 1436,
          column: 19
        }
      },
      "403": {
        start: {
          line: 1437,
          column: 16
        },
        end: {
          line: 1437,
          column: 23
        }
      },
      "404": {
        start: {
          line: 1440,
          column: 30
        },
        end: {
          line: 1440,
          column: 101
        }
      },
      "405": {
        start: {
          line: 1442,
          column: 12
        },
        end: {
          line: 1442,
          column: 61
        }
      },
      "406": {
        start: {
          line: 1443,
          column: 12
        },
        end: {
          line: 1443,
          column: 116
        }
      },
      "407": {
        start: {
          line: 1444,
          column: 12
        },
        end: {
          line: 1444,
          column: 62
        }
      },
      "408": {
        start: {
          line: 1445,
          column: 12
        },
        end: {
          line: 1445,
          column: 32
        }
      },
      "409": {
        start: {
          line: 1448,
          column: 12
        },
        end: {
          line: 1452,
          column: 15
        }
      },
      "410": {
        start: {
          line: 1453,
          column: 12
        },
        end: {
          line: 1458,
          column: 15
        }
      },
      "411": {
        start: {
          line: 1465,
          column: 26
        },
        end: {
          line: 1465,
          column: 58
        }
      },
      "412": {
        start: {
          line: 1466,
          column: 8
        },
        end: {
          line: 1495,
          column: 9
        }
      },
      "413": {
        start: {
          line: 1467,
          column: 27
        },
        end: {
          line: 1467,
          column: 37
        }
      },
      "414": {
        start: {
          line: 1468,
          column: 12
        },
        end: {
          line: 1475,
          column: 13
        }
      },
      "415": {
        start: {
          line: 1469,
          column: 16
        },
        end: {
          line: 1473,
          column: 19
        }
      },
      "416": {
        start: {
          line: 1474,
          column: 16
        },
        end: {
          line: 1474,
          column: 23
        }
      },
      "417": {
        start: {
          line: 1476,
          column: 30
        },
        end: {
          line: 1476,
          column: 95
        }
      },
      "418": {
        start: {
          line: 1478,
          column: 12
        },
        end: {
          line: 1478,
          column: 61
        }
      },
      "419": {
        start: {
          line: 1479,
          column: 12
        },
        end: {
          line: 1479,
          column: 101
        }
      },
      "420": {
        start: {
          line: 1480,
          column: 12
        },
        end: {
          line: 1480,
          column: 62
        }
      },
      "421": {
        start: {
          line: 1481,
          column: 12
        },
        end: {
          line: 1481,
          column: 32
        }
      },
      "422": {
        start: {
          line: 1484,
          column: 12
        },
        end: {
          line: 1488,
          column: 15
        }
      },
      "423": {
        start: {
          line: 1489,
          column: 12
        },
        end: {
          line: 1494,
          column: 15
        }
      },
      "424": {
        start: {
          line: 1503,
          column: 26
        },
        end: {
          line: 1503,
          column: 58
        }
      },
      "425": {
        start: {
          line: 1504,
          column: 8
        },
        end: {
          line: 1542,
          column: 9
        }
      },
      "426": {
        start: {
          line: 1505,
          column: 27
        },
        end: {
          line: 1505,
          column: 37
        }
      },
      "427": {
        start: {
          line: 1506,
          column: 27
        },
        end: {
          line: 1506,
          column: 43
        }
      },
      "428": {
        start: {
          line: 1507,
          column: 12
        },
        end: {
          line: 1514,
          column: 13
        }
      },
      "429": {
        start: {
          line: 1508,
          column: 16
        },
        end: {
          line: 1512,
          column: 19
        }
      },
      "430": {
        start: {
          line: 1513,
          column: 16
        },
        end: {
          line: 1513,
          column: 23
        }
      },
      "431": {
        start: {
          line: 1515,
          column: 12
        },
        end: {
          line: 1522,
          column: 13
        }
      },
      "432": {
        start: {
          line: 1516,
          column: 16
        },
        end: {
          line: 1520,
          column: 19
        }
      },
      "433": {
        start: {
          line: 1521,
          column: 16
        },
        end: {
          line: 1521,
          column: 23
        }
      },
      "434": {
        start: {
          line: 1523,
          column: 30
        },
        end: {
          line: 1523,
          column: 107
        }
      },
      "435": {
        start: {
          line: 1525,
          column: 12
        },
        end: {
          line: 1525,
          column: 61
        }
      },
      "436": {
        start: {
          line: 1526,
          column: 12
        },
        end: {
          line: 1526,
          column: 112
        }
      },
      "437": {
        start: {
          line: 1527,
          column: 12
        },
        end: {
          line: 1527,
          column: 62
        }
      },
      "438": {
        start: {
          line: 1528,
          column: 12
        },
        end: {
          line: 1528,
          column: 32
        }
      },
      "439": {
        start: {
          line: 1531,
          column: 12
        },
        end: {
          line: 1535,
          column: 15
        }
      },
      "440": {
        start: {
          line: 1536,
          column: 12
        },
        end: {
          line: 1541,
          column: 15
        }
      },
      "441": {
        start: {
          line: 1545,
          column: 0
        },
        end: {
          line: 1545,
          column: 46
        }
      },
      "442": {
        start: {
          line: 1546,
          column: 0
        },
        end: {
          line: 1546,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 35,
            column: 56
          },
          end: {
            line: 35,
            column: 57
          }
        },
        loc: {
          start: {
            line: 35,
            column: 71
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 35
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 40
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 50
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 38
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 94
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 37
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 138
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 40
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 177
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 40
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 218
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 43
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 256
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 271,
            column: 52
          },
          end: {
            line: 271,
            column: 53
          }
        },
        loc: {
          start: {
            line: 271,
            column: 62
          },
          end: {
            line: 271,
            column: 76
          }
        },
        line: 271
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 273,
            column: 80
          },
          end: {
            line: 273,
            column: 81
          }
        },
        loc: {
          start: {
            line: 273,
            column: 86
          },
          end: {
            line: 273,
            column: 156
          }
        },
        line: 273
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 319,
            column: 5
          }
        },
        loc: {
          start: {
            line: 319,
            column: 38
          },
          end: {
            line: 344,
            column: 5
          }
        },
        line: 319
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 350,
            column: 4
          },
          end: {
            line: 350,
            column: 5
          }
        },
        loc: {
          start: {
            line: 350,
            column: 38
          },
          end: {
            line: 388,
            column: 5
          }
        },
        line: 350
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 394,
            column: 4
          },
          end: {
            line: 394,
            column: 5
          }
        },
        loc: {
          start: {
            line: 394,
            column: 37
          },
          end: {
            line: 427,
            column: 5
          }
        },
        line: 394
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 433,
            column: 4
          },
          end: {
            line: 433,
            column: 5
          }
        },
        loc: {
          start: {
            line: 433,
            column: 40
          },
          end: {
            line: 468,
            column: 5
          }
        },
        line: 433
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 474,
            column: 4
          },
          end: {
            line: 474,
            column: 5
          }
        },
        loc: {
          start: {
            line: 474,
            column: 41
          },
          end: {
            line: 516,
            column: 5
          }
        },
        line: 474
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 522,
            column: 4
          },
          end: {
            line: 522,
            column: 5
          }
        },
        loc: {
          start: {
            line: 522,
            column: 46
          },
          end: {
            line: 557,
            column: 5
          }
        },
        line: 522
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 561,
            column: 4
          },
          end: {
            line: 561,
            column: 5
          }
        },
        loc: {
          start: {
            line: 561,
            column: 42
          },
          end: {
            line: 585,
            column: 5
          }
        },
        line: 561
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 589,
            column: 4
          },
          end: {
            line: 589,
            column: 5
          }
        },
        loc: {
          start: {
            line: 589,
            column: 51
          },
          end: {
            line: 617,
            column: 5
          }
        },
        line: 589
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 623,
            column: 4
          },
          end: {
            line: 623,
            column: 5
          }
        },
        loc: {
          start: {
            line: 623,
            column: 51
          },
          end: {
            line: 661,
            column: 5
          }
        },
        line: 623
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 667,
            column: 4
          },
          end: {
            line: 667,
            column: 5
          }
        },
        loc: {
          start: {
            line: 667,
            column: 44
          },
          end: {
            line: 706,
            column: 5
          }
        },
        line: 667
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 677,
            column: 76
          },
          end: {
            line: 677,
            column: 77
          }
        },
        loc: {
          start: {
            line: 677,
            column: 82
          },
          end: {
            line: 677,
            column: 152
          }
        },
        line: 677
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 712,
            column: 4
          },
          end: {
            line: 712,
            column: 5
          }
        },
        loc: {
          start: {
            line: 712,
            column: 38
          },
          end: {
            line: 745,
            column: 5
          }
        },
        line: 712
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 751,
            column: 4
          },
          end: {
            line: 751,
            column: 5
          }
        },
        loc: {
          start: {
            line: 751,
            column: 41
          },
          end: {
            line: 783,
            column: 5
          }
        },
        line: 751
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 789,
            column: 4
          },
          end: {
            line: 789,
            column: 5
          }
        },
        loc: {
          start: {
            line: 789,
            column: 36
          },
          end: {
            line: 812,
            column: 5
          }
        },
        line: 789
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 814,
            column: 4
          },
          end: {
            line: 814,
            column: 5
          }
        },
        loc: {
          start: {
            line: 814,
            column: 40
          },
          end: {
            line: 838,
            column: 5
          }
        },
        line: 814
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 839,
            column: 4
          },
          end: {
            line: 839,
            column: 5
          }
        },
        loc: {
          start: {
            line: 839,
            column: 38
          },
          end: {
            line: 863,
            column: 5
          }
        },
        line: 839
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 864,
            column: 4
          },
          end: {
            line: 864,
            column: 5
          }
        },
        loc: {
          start: {
            line: 864,
            column: 40
          },
          end: {
            line: 898,
            column: 5
          }
        },
        line: 864
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 899,
            column: 4
          },
          end: {
            line: 899,
            column: 5
          }
        },
        loc: {
          start: {
            line: 899,
            column: 40
          },
          end: {
            line: 931,
            column: 5
          }
        },
        line: 899
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 933,
            column: 4
          },
          end: {
            line: 933,
            column: 5
          }
        },
        loc: {
          start: {
            line: 933,
            column: 38
          },
          end: {
            line: 957,
            column: 5
          }
        },
        line: 933
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 958,
            column: 4
          },
          end: {
            line: 958,
            column: 5
          }
        },
        loc: {
          start: {
            line: 958,
            column: 36
          },
          end: {
            line: 982,
            column: 5
          }
        },
        line: 958
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 983,
            column: 4
          },
          end: {
            line: 983,
            column: 5
          }
        },
        loc: {
          start: {
            line: 983,
            column: 38
          },
          end: {
            line: 1018,
            column: 5
          }
        },
        line: 983
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 1019,
            column: 4
          },
          end: {
            line: 1019,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1019,
            column: 38
          },
          end: {
            line: 1051,
            column: 5
          }
        },
        line: 1019
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 1053,
            column: 4
          },
          end: {
            line: 1053,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1053,
            column: 49
          },
          end: {
            line: 1077,
            column: 5
          }
        },
        line: 1053
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 1078,
            column: 4
          },
          end: {
            line: 1078,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1078,
            column: 51
          },
          end: {
            line: 1102,
            column: 5
          }
        },
        line: 1078
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 1104,
            column: 4
          },
          end: {
            line: 1104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1104,
            column: 52
          },
          end: {
            line: 1141,
            column: 5
          }
        },
        line: 1104
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 1143,
            column: 4
          },
          end: {
            line: 1143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1143,
            column: 51
          },
          end: {
            line: 1183,
            column: 5
          }
        },
        line: 1143
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 1185,
            column: 4
          },
          end: {
            line: 1185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1185,
            column: 43
          },
          end: {
            line: 1222,
            column: 5
          }
        },
        line: 1185
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 1224,
            column: 4
          },
          end: {
            line: 1224,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1224,
            column: 40
          },
          end: {
            line: 1248,
            column: 5
          }
        },
        line: 1224
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 1249,
            column: 4
          },
          end: {
            line: 1249,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1249,
            column: 42
          },
          end: {
            line: 1273,
            column: 5
          }
        },
        line: 1249
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 1274,
            column: 4
          },
          end: {
            line: 1274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1274,
            column: 42
          },
          end: {
            line: 1300,
            column: 5
          }
        },
        line: 1274
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 1301,
            column: 4
          },
          end: {
            line: 1301,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1301,
            column: 42
          },
          end: {
            line: 1334,
            column: 5
          }
        },
        line: 1301
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 1340,
            column: 4
          },
          end: {
            line: 1340,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1340,
            column: 45
          },
          end: {
            line: 1362,
            column: 5
          }
        },
        line: 1340
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 1368,
            column: 4
          },
          end: {
            line: 1368,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1368,
            column: 47
          },
          end: {
            line: 1390,
            column: 5
          }
        },
        line: 1368
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 1396,
            column: 4
          },
          end: {
            line: 1396,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1396,
            column: 44
          },
          end: {
            line: 1419,
            column: 5
          }
        },
        line: 1396
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 1425,
            column: 4
          },
          end: {
            line: 1425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1425,
            column: 47
          },
          end: {
            line: 1460,
            column: 5
          }
        },
        line: 1425
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 1464,
            column: 4
          },
          end: {
            line: 1464,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1464,
            column: 44
          },
          end: {
            line: 1496,
            column: 5
          }
        },
        line: 1464
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 1502,
            column: 4
          },
          end: {
            line: 1502,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1502,
            column: 48
          },
          end: {
            line: 1543,
            column: 5
          }
        },
        line: 1502
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 35,
            column: 22
          },
          end: {
            line: 37,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 23
          },
          end: {
            line: 35,
            column: 27
          }
        }, {
          start: {
            line: 35,
            column: 31
          },
          end: {
            line: 35,
            column: 51
          }
        }, {
          start: {
            line: 35,
            column: 56
          },
          end: {
            line: 37,
            column: 1
          }
        }],
        line: 35
      },
      "18": {
        loc: {
          start: {
            line: 36,
            column: 11
          },
          end: {
            line: 36,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 37
          },
          end: {
            line: 36,
            column: 40
          }
        }, {
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 36,
            column: 61
          }
        }],
        line: 36
      },
      "19": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 15
          }
        }, {
          start: {
            line: 36,
            column: 19
          },
          end: {
            line: 36,
            column: 33
          }
        }],
        line: 36
      },
      "20": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "21": {
        loc: {
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 54,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 54,
            column: 28
          }
        }, {
          start: {
            line: 54,
            column: 32
          },
          end: {
            line: 54,
            column: 43
          }
        }, {
          start: {
            line: 54,
            column: 47
          },
          end: {
            line: 54,
            column: 56
          }
        }],
        line: 54
      },
      "22": {
        loc: {
          start: {
            line: 99,
            column: 22
          },
          end: {
            line: 99,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 99,
            column: 29
          },
          end: {
            line: 99,
            column: 43
          }
        }, {
          start: {
            line: 99,
            column: 46
          },
          end: {
            line: 99,
            column: 55
          }
        }],
        line: 99
      },
      "23": {
        loc: {
          start: {
            line: 100,
            column: 23
          },
          end: {
            line: 100,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 31
          },
          end: {
            line: 100,
            column: 46
          }
        }, {
          start: {
            line: 100,
            column: 49
          },
          end: {
            line: 100,
            column: 58
          }
        }],
        line: 100
      },
      "24": {
        loc: {
          start: {
            line: 111,
            column: 26
          },
          end: {
            line: 111,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 26
          },
          end: {
            line: 111,
            column: 40
          }
        }, {
          start: {
            line: 111,
            column: 44
          },
          end: {
            line: 111,
            column: 45
          }
        }],
        line: 111
      },
      "25": {
        loc: {
          start: {
            line: 112,
            column: 27
          },
          end: {
            line: 112,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 27
          },
          end: {
            line: 112,
            column: 42
          }
        }, {
          start: {
            line: 112,
            column: 46
          },
          end: {
            line: 112,
            column: 48
          }
        }],
        line: 112
      },
      "26": {
        loc: {
          start: {
            line: 114,
            column: 53
          },
          end: {
            line: 114,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 53
          },
          end: {
            line: 114,
            column: 68
          }
        }, {
          start: {
            line: 114,
            column: 72
          },
          end: {
            line: 114,
            column: 74
          }
        }],
        line: 114
      },
      "27": {
        loc: {
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "28": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 190,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 190,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "29": {
        loc: {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 230,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 230,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "30": {
        loc: {
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        }, {
          start: {
            line: 268,
            column: 17
          },
          end: {
            line: 277,
            column: 13
          }
        }],
        line: 264
      },
      "31": {
        loc: {
          start: {
            line: 355,
            column: 22
          },
          end: {
            line: 355,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 355,
            column: 29
          },
          end: {
            line: 355,
            column: 43
          }
        }, {
          start: {
            line: 355,
            column: 46
          },
          end: {
            line: 355,
            column: 55
          }
        }],
        line: 355
      },
      "32": {
        loc: {
          start: {
            line: 356,
            column: 23
          },
          end: {
            line: 356,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 356,
            column: 31
          },
          end: {
            line: 356,
            column: 46
          }
        }, {
          start: {
            line: 356,
            column: 49
          },
          end: {
            line: 356,
            column: 58
          }
        }],
        line: 356
      },
      "33": {
        loc: {
          start: {
            line: 367,
            column: 26
          },
          end: {
            line: 367,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 367,
            column: 26
          },
          end: {
            line: 367,
            column: 40
          }
        }, {
          start: {
            line: 367,
            column: 44
          },
          end: {
            line: 367,
            column: 45
          }
        }],
        line: 367
      },
      "34": {
        loc: {
          start: {
            line: 368,
            column: 27
          },
          end: {
            line: 368,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 368,
            column: 27
          },
          end: {
            line: 368,
            column: 42
          }
        }, {
          start: {
            line: 368,
            column: 46
          },
          end: {
            line: 368,
            column: 48
          }
        }],
        line: 368
      },
      "35": {
        loc: {
          start: {
            line: 370,
            column: 53
          },
          end: {
            line: 370,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 53
          },
          end: {
            line: 370,
            column: 68
          }
        }, {
          start: {
            line: 370,
            column: 72
          },
          end: {
            line: 370,
            column: 74
          }
        }],
        line: 370
      },
      "36": {
        loc: {
          start: {
            line: 399,
            column: 12
          },
          end: {
            line: 406,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 12
          },
          end: {
            line: 406,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 399
      },
      "37": {
        loc: {
          start: {
            line: 439,
            column: 12
          },
          end: {
            line: 446,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 439,
            column: 12
          },
          end: {
            line: 446,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 439
      },
      "38": {
        loc: {
          start: {
            line: 479,
            column: 12
          },
          end: {
            line: 486,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 479,
            column: 12
          },
          end: {
            line: 486,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 479
      },
      "39": {
        loc: {
          start: {
            line: 488,
            column: 12
          },
          end: {
            line: 495,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 488,
            column: 12
          },
          end: {
            line: 495,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 488
      },
      "40": {
        loc: {
          start: {
            line: 527,
            column: 12
          },
          end: {
            line: 534,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 527,
            column: 12
          },
          end: {
            line: 534,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 527
      },
      "41": {
        loc: {
          start: {
            line: 527,
            column: 16
          },
          end: {
            line: 527,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 527,
            column: 16
          },
          end: {
            line: 527,
            column: 23
          }
        }, {
          start: {
            line: 527,
            column: 27
          },
          end: {
            line: 527,
            column: 75
          }
        }],
        line: 527
      },
      "42": {
        loc: {
          start: {
            line: 628,
            column: 12
          },
          end: {
            line: 635,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 628,
            column: 12
          },
          end: {
            line: 635,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 628
      },
      "43": {
        loc: {
          start: {
            line: 628,
            column: 16
          },
          end: {
            line: 628,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 628,
            column: 16
          },
          end: {
            line: 628,
            column: 23
          }
        }, {
          start: {
            line: 628,
            column: 27
          },
          end: {
            line: 628,
            column: 75
          }
        }],
        line: 628
      },
      "44": {
        loc: {
          start: {
            line: 717,
            column: 12
          },
          end: {
            line: 724,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 717,
            column: 12
          },
          end: {
            line: 724,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 717
      },
      "45": {
        loc: {
          start: {
            line: 754,
            column: 20
          },
          end: {
            line: 754,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 754,
            column: 29
          },
          end: {
            line: 754,
            column: 34
          }
        }],
        line: 754
      },
      "46": {
        loc: {
          start: {
            line: 760,
            column: 12
          },
          end: {
            line: 769,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 760,
            column: 12
          },
          end: {
            line: 769,
            column: 13
          }
        }, {
          start: {
            line: 765,
            column: 17
          },
          end: {
            line: 769,
            column: 13
          }
        }],
        line: 760
      },
      "47": {
        loc: {
          start: {
            line: 869,
            column: 12
          },
          end: {
            line: 876,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 869,
            column: 12
          },
          end: {
            line: 876,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 869
      },
      "48": {
        loc: {
          start: {
            line: 904,
            column: 12
          },
          end: {
            line: 911,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 904,
            column: 12
          },
          end: {
            line: 911,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 904
      },
      "49": {
        loc: {
          start: {
            line: 989,
            column: 12
          },
          end: {
            line: 996,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 989,
            column: 12
          },
          end: {
            line: 996,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 989
      },
      "50": {
        loc: {
          start: {
            line: 1024,
            column: 12
          },
          end: {
            line: 1031,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1024,
            column: 12
          },
          end: {
            line: 1031,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1024
      },
      "51": {
        loc: {
          start: {
            line: 1109,
            column: 12
          },
          end: {
            line: 1116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1109,
            column: 12
          },
          end: {
            line: 1116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1109
      },
      "52": {
        loc: {
          start: {
            line: 1147,
            column: 12
          },
          end: {
            line: 1154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1147,
            column: 12
          },
          end: {
            line: 1154,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1147
      },
      "53": {
        loc: {
          start: {
            line: 1156,
            column: 12
          },
          end: {
            line: 1163,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1156,
            column: 12
          },
          end: {
            line: 1163,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1156
      },
      "54": {
        loc: {
          start: {
            line: 1190,
            column: 12
          },
          end: {
            line: 1197,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1190,
            column: 12
          },
          end: {
            line: 1197,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1190
      },
      "55": {
        loc: {
          start: {
            line: 1306,
            column: 12
          },
          end: {
            line: 1319,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1306,
            column: 12
          },
          end: {
            line: 1319,
            column: 13
          }
        }, {
          start: {
            line: 1313,
            column: 17
          },
          end: {
            line: 1319,
            column: 13
          }
        }],
        line: 1306
      },
      "56": {
        loc: {
          start: {
            line: 1431,
            column: 12
          },
          end: {
            line: 1438,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1431,
            column: 12
          },
          end: {
            line: 1438,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1431
      },
      "57": {
        loc: {
          start: {
            line: 1431,
            column: 16
          },
          end: {
            line: 1431,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1431,
            column: 16
          },
          end: {
            line: 1431,
            column: 24
          }
        }, {
          start: {
            line: 1431,
            column: 28
          },
          end: {
            line: 1431,
            column: 48
          }
        }],
        line: 1431
      },
      "58": {
        loc: {
          start: {
            line: 1468,
            column: 12
          },
          end: {
            line: 1475,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1468,
            column: 12
          },
          end: {
            line: 1475,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1468
      },
      "59": {
        loc: {
          start: {
            line: 1507,
            column: 12
          },
          end: {
            line: 1514,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1507,
            column: 12
          },
          end: {
            line: 1514,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1507
      },
      "60": {
        loc: {
          start: {
            line: 1515,
            column: 12
          },
          end: {
            line: 1522,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1515,
            column: 12
          },
          end: {
            line: 1522,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1515
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0,
      "378": 0,
      "379": 0,
      "380": 0,
      "381": 0,
      "382": 0,
      "383": 0,
      "384": 0,
      "385": 0,
      "386": 0,
      "387": 0,
      "388": 0,
      "389": 0,
      "390": 0,
      "391": 0,
      "392": 0,
      "393": 0,
      "394": 0,
      "395": 0,
      "396": 0,
      "397": 0,
      "398": 0,
      "399": 0,
      "400": 0,
      "401": 0,
      "402": 0,
      "403": 0,
      "404": 0,
      "405": 0,
      "406": 0,
      "407": 0,
      "408": 0,
      "409": 0,
      "410": 0,
      "411": 0,
      "412": 0,
      "413": 0,
      "414": 0,
      "415": 0,
      "416": 0,
      "417": 0,
      "418": 0,
      "419": 0,
      "420": 0,
      "421": 0,
      "422": 0,
      "423": 0,
      "424": 0,
      "425": 0,
      "426": 0,
      "427": 0,
      "428": 0,
      "429": 0,
      "430": 0,
      "431": 0,
      "432": 0,
      "433": 0,
      "434": 0,
      "435": 0,
      "436": 0,
      "437": 0,
      "438": 0,
      "439": 0,
      "440": 0,
      "441": 0,
      "442": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/payroll/payrollController.ts",
      mappings: ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,0EAAuE;AACvE,kFAA+E;AAC/E,uDAAyD;AACzD,gEAAwC;AAExC,MAAa,iBAAiB;IAC5B;;;;OAIG;IACH,KAAK,CAAC,mBAAmB,CAAC,GAAY,EAAE,GAAa;QACnD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAE/D,IAAI,CAAC,WAAW,IAAI,CAAC,UAAU,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC7C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,oDAAoD;oBAC7D,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,aAAa,GAAG,MAAM,+BAAc,CAAC,mBAAmB,CAAC;gBAC7D,WAAW;gBACX,UAAU,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC;gBAChC,QAAQ,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC;gBAC5B,MAAM;aACP,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,qCAAqC;gBAC9C,IAAI,EAAE,aAAa;gBACnB,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,iCAAiC;gBAC1C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB,CAAC,GAAY,EAAE,GAAa;QACjD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;YAE9D,MAAM,MAAM,GAAG;gBACb,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAc,CAAC,CAAC,CAAC,CAAC,SAAS;gBACjD,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC,SAAS;gBACpD,MAAM,EAAE,MAAgB;gBACxB,SAAS,EAAE,SAAmB;gBAC9B,OAAO,EAAE,OAAiB;aAC3B,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAE9D,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,wCAAwC;gBACjD,IAAI,EAAE,MAAM,CAAC,OAAO;gBACpB,UAAU,EAAE;oBACV,IAAI,EAAE,QAAQ,CAAC,IAAc,CAAC,IAAI,CAAC;oBACnC,KAAK,EAAE,QAAQ,CAAC,KAAe,CAAC,IAAI,EAAE;oBACtC,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,QAAQ,CAAC,KAAe,CAAC,IAAI,EAAE,CAAC,CAAC;iBACnE;gBACD,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,KAAK,EAAE,GAAG,CAAC,KAAK;aACjB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,+BAA+B;gBACxC,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,gBAAgB,CAAC,GAAY,EAAE,GAAa;QAChD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE1B,MAAM,aAAa,GAAG,MAAM,+BAAc,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;YAEhE,IAAI,CAAC,aAAa,EAAE,CAAC;gBACnB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,0BAA0B;oBACnC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,uCAAuC;gBAChD,IAAI,EAAE,aAAa;gBACnB,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE;gBAC3C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,8BAA8B;gBACvC,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,mBAAmB,CAAC,GAAY,EAAE,GAAa;QACnD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC;YAE5B,MAAM,aAAa,GAAG,MAAM,+BAAc,CAAC,mBAAmB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YAE/E,IAAI,CAAC,aAAa,EAAE,CAAC;gBACnB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,0BAA0B;oBACnC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,qCAAqC;gBAC9C,IAAI,EAAE,aAAa;gBACnB,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,iCAAiC;gBAC1C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,mBAAmB,CAAC,GAAY,EAAE,GAAa;QACnD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE1B,MAAM,OAAO,GAAG,MAAM,+BAAc,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;YAE7D,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,0BAA0B;oBACnC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,qCAAqC;gBAC9C,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,iCAAiC;gBAC1C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,sBAAsB,CAAC,GAAY,EAAE,GAAa;QACtD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QACpC,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAE1B,IAAI,CAAC;YACH,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;YAEnC,+CAA+C;YAC/C,MAAM,+BAAc,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC;YAEvE,IAAI,OAAO,CAAC;YACZ,IAAI,YAAY,EAAE,CAAC;gBACjB,2CAA2C;gBAC3C,OAAO,GAAG,MAAM,+BAAc,CAAC,sBAAsB,CAAC,EAAE,EAAE,YAAsB,CAAC,CAAC;YACpF,CAAC;iBAAM,CAAC;gBACN,uCAAuC;gBACvC,MAAM,iBAAiB,GAAG,MAAM,+BAAc,CAAC,uCAAuC,CAAC,EAAE,CAAC,CAAC;gBAC3F,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAE9D,gEAAgE;gBAChE,MAAM,EAAE,sBAAsB,EAAE,GAAG,wDAAa,+CAA+C,GAAC,CAAC;gBACjG,MAAM,sBAAsB,CAAC,+BAA+B,CAAC,EAAE,CAAC,CAAC;gBAEjE,gFAAgF;gBAChF,MAAM,+BAAc,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC,CAAC;YAC9E,CAAC;YAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,wCAAwC;gBACjD,IAAI,EAAE;oBACJ,QAAQ,EAAE,EAAE;oBACZ,WAAW,EAAE,OAAO,CAAC,MAAM;oBAC3B,OAAO;iBACR;gBACD,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE;gBAC/C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YAEH,gDAAgD;YAChD,IAAI,CAAC;gBACH,MAAM,+BAAc,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;YACpE,CAAC;YAAC,OAAO,WAAW,EAAE,CAAC;gBACrB,gBAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE;oBACpD,KAAK,EAAG,WAAqB,CAAC,OAAO;oBACrC,SAAS;oBACT,QAAQ,EAAE,EAAE;iBACb,CAAC,CAAC;YACL,CAAC;YAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,oCAAoC;gBAC7C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB,CAAC,GAAY,EAAE,GAAa;QACjD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE1B,MAAM,OAAO,GAAG,MAAM,+BAAc,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAE3D,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,wCAAwC;gBACjD,IAAI,EAAE,OAAO;gBACb,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,+BAA+B;gBACxC,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB,CAAC,GAAY,EAAE,GAAa;QACjD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,iBAAiB,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;YAE1E,MAAM,MAAM,GAAG;gBACb,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAc,CAAC,CAAC,CAAC,CAAC,SAAS;gBACjD,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC,SAAS;gBACpD,iBAAiB,EAAE,iBAA2B;gBAC9C,WAAW,EAAE,WAAqB;gBAClC,MAAM,EAAE,MAAgB;aACzB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAE9D,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,wCAAwC;gBACjD,IAAI,EAAE,MAAM,CAAC,OAAO;gBACpB,UAAU,EAAE;oBACV,IAAI,EAAE,QAAQ,CAAC,IAAc,CAAC,IAAI,CAAC;oBACnC,KAAK,EAAE,QAAQ,CAAC,KAAe,CAAC,IAAI,EAAE;oBACtC,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,QAAQ,CAAC,KAAe,CAAC,IAAI,EAAE,CAAC,CAAC;iBACnE;gBACD,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,KAAK,EAAE,GAAG,CAAC,KAAK;aACjB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,+BAA+B;gBACxC,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,gBAAgB,CAAC,GAAY,EAAE,GAAa;QAChD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE1B,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;YAEzD,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,0BAA0B;oBACnC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,uCAAuC;gBAChD,IAAI,EAAE,MAAM;gBACZ,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE;gBAC3C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,8BAA8B;gBACvC,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,mBAAmB,CAAC,GAAY,EAAE,GAAa;QACnD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC;YAE5B,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,mBAAmB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YAExE,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,0BAA0B;oBACnC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,qCAAqC;gBAC9C,IAAI,EAAE,MAAM;gBACZ,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,iCAAiC;gBAC1C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,oBAAoB,CAAC,GAAY,EAAE,GAAa;QACpD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC;YAEpC,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,yBAAyB;oBAClC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,oBAAoB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YAEzE,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,0BAA0B;oBACnC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,sCAAsC;gBAC/C,IAAI,EAAE,MAAM;gBACZ,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE;gBAC7C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,kCAAkC;gBAC3C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,yBAAyB,CAAC,GAAY,EAAE,GAAa;QACzD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAE5B,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,OAAO,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gBAChE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,mDAAmD;oBAC5D,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,aAAa,GAAG,MAAM,+BAAc,CAAC,yBAAyB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YAEjF,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,oCAAoC,MAAM,eAAe;gBAClE,IAAI,EAAE,aAAa;gBACnB,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE;gBACnD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,wCAAwC;gBACjD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB,CAAC,GAAY,EAAE,GAAa;QACrD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE1B,MAAM,eAAe,GAAG,MAAM,+BAAc,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;YAEvE,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,uCAAuC;gBAChD,IAAI,EAAE,eAAe;gBACrB,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE;gBAC9C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YACH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,uBAAuB;gBAChC,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,8BAA8B,CAAC,GAAY,EAAE,GAAa;QAC9D,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAEvD,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,8BAA8B,CAAC;gBACjE,QAAQ;gBACR,YAAY;gBACZ,SAAS;aACV,CAAC,CAAC;YAEH,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,wBAAwB,MAAM,CAAC,YAAY,iCAAiC;gBACrF,IAAI,EAAE,MAAM;gBACZ,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6CAA6C,EAAE;gBAC1D,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC,CAAC;YACH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,uBAAuB;gBAChC,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,8BAA8B,CAAC,GAAY,EAAE,GAAa;QAC9D,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAE1C,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,OAAO,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gBAChE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,mDAAmD;oBAC5D,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,cAAc,GAAG,MAAM,+BAAc,CAAC,8BAA8B,CAAC,EAAE,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;YAErG,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,gBAAgB,cAAc,CAAC,MAAM,uBAAuB,MAAM,eAAe;gBAC1F,IAAI,EAAE;oBACJ,YAAY,EAAE,cAAc,CAAC,MAAM;oBACnC,OAAO,EAAE,cAAc;iBACxB;gBACD,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,4CAA4C,EAAE;gBACzD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,8CAA8C;gBACvD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,uBAAuB,CAAC,GAAY,EAAE,GAAa;QACvD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;YAEnC,+CAA+C;YAC/C,MAAM,+BAAc,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC;YAEvE,8DAA8D;YAC9D,MAAM,OAAO,GAAG,MAAM,+BAAc,CAAC,uBAAuB,CAAC,EAAE,EAAE,YAAsB,CAAC,CAAC;YAEzF,0DAA0D;YAC1D,MAAM,EAAE,sBAAsB,EAAE,GAAG,wDAAa,+CAA+C,GAAC,CAAC;YACjG,MAAM,sBAAsB,CAAC,+BAA+B,CAAC,EAAE,CAAC,CAAC;YAEjE,kFAAkF;YAClF,MAAM,+BAAc,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC,CAAC;YAE5E,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,0CAA0C;gBACnD,IAAI,EAAE;oBACJ,QAAQ,EAAE,EAAE;oBACZ,WAAW,EAAE,OAAO,CAAC,MAAM;oBAC3B,OAAO,EAAE,OAAO;iBACjB;gBACD,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE;gBACjD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,KAAK,EAAE,GAAG,CAAC,KAAK;aACjB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,qCAAqC;gBAC9C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB,CAAC,GAAY,EAAE,GAAa;QACjD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE1B,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAE1D,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,0BAA0B;oBACnC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,4CAA4C;gBACrD,IAAI,EAAE,MAAM;gBACZ,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,gCAAgC;gBACzC,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,oBAAoB,CAAC,GAAY,EAAE,GAAa;QACpD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,GAAG,KAAK,EAAE,iBAAiB,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;YAEhE,MAAM,MAAM,GAAG;gBACb,iBAAiB,EAAE,iBAA2B;gBAC9C,MAAM,EAAE,MAAgB;aACzB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,oBAAoB,CAAC,MAAuB,EAAE,MAAM,CAAC,CAAC;YAE1F,IAAI,MAAM,KAAK,KAAK,EAAE,CAAC;gBACrB,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;gBAC1C,GAAG,CAAC,SAAS,CAAC,qBAAqB,EAAE,yCAAyC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;gBAC7H,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACnB,CAAC;iBAAM,CAAC;gBACN,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;gBACjD,GAAG,CAAC,SAAS,CAAC,qBAAqB,EAAE,yCAAyC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;gBAC7H,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACnB,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE;gBAC9C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,kCAAkC;gBAC3C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,eAAe,CAAC,GAAY,EAAE,GAAa;QAC/C,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,KAAK,GAAG,MAAM,+BAAc,CAAC,eAAe,EAAE,CAAC;YAErD,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,2CAA2C;gBACpD,IAAI,EAAE,KAAK;gBACX,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE;gBAC/C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,kCAAkC;gBAC3C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,+CAA+C;IAC/C,KAAK,CAAC,mBAAmB,CAAC,GAAY,EAAE,GAAa;QACnD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,aAAa,GAAG,MAAM,+BAAc,CAAC,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAEzE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,qCAAqC;gBAC9C,IAAI,EAAE,aAAa;gBACnB,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,iCAAiC;gBAC1C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,GAAY,EAAE,GAAa;QACjD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAEjE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,wCAAwC;gBACjD,IAAI,EAAE,MAAM;gBACZ,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,KAAK,EAAE,GAAG,CAAC,KAAK;aACjB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,+BAA+B;gBACxC,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,GAAY,EAAE,GAAa;QACnD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,aAAa,GAAG,MAAM,+BAAc,CAAC,mBAAmB,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;YAE7E,IAAI,CAAC,aAAa,EAAE,CAAC;gBACnB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,0BAA0B;oBACnC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,qCAAqC;gBAC9C,IAAI,EAAE,aAAa;gBACnB,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,iCAAiC;gBAC1C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,GAAY,EAAE,GAAa;QACnD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,OAAO,GAAG,MAAM,+BAAc,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;YAE7D,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,0BAA0B;oBACnC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,qCAAqC;gBAC9C,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,iCAAiC;gBAC1C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,6CAA6C;IAC7C,KAAK,CAAC,iBAAiB,CAAC,GAAY,EAAE,GAAa;QACjD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,WAAW,GAAG,MAAM,+BAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAErE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,mCAAmC;gBAC5C,IAAI,EAAE,WAAW;gBACjB,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE;gBAC1C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,+BAA+B;gBACxC,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,GAAY,EAAE,GAAa;QAC/C,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAE/D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,sCAAsC;gBAC/C,IAAI,EAAE,MAAM;gBACZ,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE;gBAC1C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,KAAK,EAAE,GAAG,CAAC,KAAK;aACjB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,6BAA6B;gBACtC,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,GAAY,EAAE,GAAa;QACjD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC;YAE5B,MAAM,WAAW,GAAG,MAAM,+BAAc,CAAC,iBAAiB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YAE3E,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,wBAAwB;oBACjC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,mCAAmC;gBAC5C,IAAI,EAAE,WAAW;gBACjB,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE;gBAC1C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,+BAA+B;gBACxC,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,GAAY,EAAE,GAAa;QACjD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE1B,MAAM,OAAO,GAAG,MAAM,+BAAc,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAE3D,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,wBAAwB;oBACjC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,mCAAmC;gBAC5C,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE;gBAC1C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,+BAA+B;gBACxC,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,2DAA2D;IAC3D,KAAK,CAAC,4BAA4B,CAAC,GAAY,EAAE,GAAa;QAC5D,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,4BAA4B,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAE5E,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,oDAAoD;gBAC7D,IAAI,EAAE,MAAM;gBACZ,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,2CAA2C,EAAE;gBACxD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,KAAK,EAAE,GAAG,CAAC,KAAK;aACjB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,2CAA2C;gBACpD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,8BAA8B,CAAC,GAAY,EAAE,GAAa;QAC9D,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,+BAAc,CAAC,8BAA8B,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAE9E,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,iDAAiD;gBAC1D,IAAI,EAAE,OAAO;gBACb,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,2CAA2C,EAAE;gBACxD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,6CAA6C;gBACtD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,sDAAsD;IACtD,KAAK,CAAC,+BAA+B,CAAC,GAAY,EAAE,GAAa;QAC/D,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,iEAAiE;YACjE,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;YAEzB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC5B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,yBAAyB;oBAClC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,+BAA+B,CAAC,OAAO,CAAC,CAAC;YAE7E,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,mDAAmD;gBAC5D,IAAI,EAAE;oBACJ,YAAY,EAAE,MAAM,CAAC,OAAO;oBAC5B,UAAU,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM;oBAChC,MAAM,EAAE,MAAM,CAAC,MAAM;iBACtB;gBACD,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6CAA6C,EAAE;gBAC1D,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,8CAA8C;gBACvD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,oCAAoC;IACpC,KAAK,CAAC,8BAA8B,CAAC,GAAY,EAAE,GAAa;QAC9D,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE1B,IAAI,CAAC,EAAE,EAAE,CAAC;gBACR,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,2CAA2C;oBACpD,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,OAAO,GAAG,MAAM,+BAAc,CAAC,8BAA8B,CAAC,EAAE,CAAC,CAAC;YAExE,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,sCAAsC;oBAC/C,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,iDAAiD;gBAC1D,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,2CAA2C,EAAE;gBACxD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE;aAClB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,6CAA6C;gBACtD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,4CAA4C;IAC5C,KAAK,CAAC,sBAAsB,CAAC,GAAY,EAAE,GAAa;QACtD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,iEAAiE;YACjE,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;YAEzB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC5B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,yBAAyB;oBAClC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;YAEpE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,yCAAyC;gBAClD,IAAI,EAAE;oBACJ,YAAY,EAAE,MAAM,CAAC,OAAO;oBAC5B,UAAU,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM;oBAChC,MAAM,EAAE,MAAM,CAAC,MAAM;iBACtB;gBACD,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,mCAAmC,EAAE;gBAChD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,oCAAoC;gBAC7C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,iDAAiD;IACjD,KAAK,CAAC,mBAAmB,CAAC,GAAY,EAAE,GAAa;QACnD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,+BAAc,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAEnE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,0CAA0C;gBACnD,IAAI,EAAE,MAAM;gBACZ,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE;gBAC9C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,KAAK,EAAE,GAAG,CAAC,KAAK;aACjB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,iCAAiC;gBAC1C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,GAAY,EAAE,GAAa;QACrD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,+BAAc,CAAC,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAErE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,uCAAuC;gBAChD,IAAI,EAAE,OAAO;gBACb,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE;gBAC9C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,mCAAmC;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,GAAY,EAAE,GAAa;QACrD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QACpC,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAE1B,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,+BAAc,CAAC,qBAAqB,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;YAEzE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,uCAAuC;gBAChD,IAAI,EAAE,OAAO;gBACb,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE;gBAC9C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,EAAE;gBACF,IAAI,EAAE,GAAG,CAAC,IAAI;aACf,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,mCAAmC;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,GAAY,EAAE,GAAa;QACrD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QACpC,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAE1B,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,+BAAc,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;YAE/D,IAAI,OAAO,EAAE,CAAC;gBACZ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,uCAAuC;oBAChD,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;iBAAM,CAAC;gBACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,4BAA4B;oBACrC,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE;gBAC9C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,EAAE;aACH,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,mCAAmC;gBAC5C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,wBAAwB,CAAC,GAAY,EAAE,GAAa;QACxD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,uCAAkB,CAAC,wBAAwB,EAAE,CAAC;YAEpD,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,+DAA+D;gBACxE,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE;gBACjD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,sCAAsC;gBAC/C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,0BAA0B,CAAC,GAAY,EAAE,GAAa;QAC1D,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,uCAAkB,CAAC,0BAA0B,EAAE,CAAC;YAEtD,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,qDAAqD;gBAC9D,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+CAA+C,EAAE;gBAC5D,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,iDAAiD;gBAC1D,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,uBAAuB,CAAC,GAAY,EAAE,GAAa;QACvD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,aAAa,GAAG,MAAM,uCAAkB,CAAC,uBAAuB,EAAE,CAAC;YAEzE,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,+CAA+C;gBACxD,IAAI,EAAE,EAAE,aAAa,EAAE;gBACvB,SAAS;aACV,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE;gBACnD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,sCAAsC;gBAC/C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,0BAA0B,CAAC,GAAY,EAAE,GAAa;QAC1D,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE9C,oDAAoD;YACpD,MAAM,OAAO,GAAG,MAAM,+BAAc,CAAC,sCAAsC,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;YAEpG,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACrC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,yDAAyD;oBAClE,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,kDAAkD;YAClD,MAAM,SAAS,GAAG,MAAM,+BAAc,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YAEzE,wCAAwC;YACxC,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;YACjD,GAAG,CAAC,SAAS,CAAC,qBAAqB,EAAE,kCAAkC,YAAY,IAAI,QAAQ,OAAO,CAAC,CAAC;YACxG,GAAG,CAAC,SAAS,CAAC,gBAAgB,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;YAElD,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE;gBACnD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,6BAA6B;gBACtC,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,uBAAuB,CAAC,GAAY,EAAE,GAAa;QACvD,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE1B,IAAI,CAAC,EAAE,EAAE,CAAC;gBACR,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,uBAAuB;oBAChC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,SAAS,GAAG,MAAM,+BAAc,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC;YAEnE,+BAA+B;YAC/B,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;YACjD,GAAG,CAAC,SAAS,CAAC,qBAAqB,EAAE,yCAAyC,EAAE,OAAO,CAAC,CAAC;YACzF,GAAG,CAAC,SAAS,CAAC,gBAAgB,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;YAElD,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,qCAAqC,EAAE;gBAClD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,sCAAsC;gBAC/C,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,2BAA2B,CAAC,GAAY,EAAE,GAAa;QAC3D,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC;YAEhC,IAAI,CAAC,EAAE,EAAE,CAAC;gBACR,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,uBAAuB;oBAChC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,8BAA8B;oBACvC,SAAS;iBACV,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,SAAS,GAAG,MAAM,+BAAc,CAAC,2BAA2B,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YAE/E,+BAA+B;YAC/B,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;YACjD,GAAG,CAAC,SAAS,CAAC,qBAAqB,EAAE,oDAAoD,EAAE,OAAO,CAAC,CAAC;YACpG,GAAG,CAAC,SAAS,CAAC,gBAAgB,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;YAElD,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,yCAAyC,EAAE;gBACtD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;gBACT,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,0CAA0C;gBACnD,KAAK,EAAG,KAAe,CAAC,OAAO;gBAC/B,SAAS;aACV,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CACF;AAlpDD,8CAkpDC;AAEY,QAAA,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/payroll/payrollController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { payrollService } from '../../services/payroll/payrollService';\nimport { autoPayrollService } from '../../services/payroll/autoPayrollService';\nimport { getRequestId } from '../../utils/types/express';\nimport logger from '../../utils/logger';\n\nexport class PayrollController {\n  /**\n   * @route POST /api/v1/payroll/periods\n   * @desc Create a new payroll period\n   * @access HR Admin\n   */\n  async createPayrollPeriod(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { period_name, start_date, end_date, status } = req.body;\n\n      if (!period_name || !start_date || !end_date) {\n        res.status(400).json({\n          success: false,\n          message: 'Period name, start date, and end date are required',\n          requestId\n        });\n        return;\n      }\n\n      const payrollPeriod = await payrollService.createPayrollPeriod({\n        period_name,\n        start_date: new Date(start_date),\n        end_date: new Date(end_date),\n        status\n      });\n\n      res.status(201).json({\n        success: true,\n        message: 'Payroll period created successfully',\n        data: payrollPeriod,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error creating payroll period', { \n        error: (error as Error).message, \n        requestId,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to create payroll period',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/periods\n   * @desc Get all payroll periods\n   * @access HR Admin\n   */\n  async getPayrollPeriods(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { page, limit, status, startDate, endDate } = req.query;\n\n      const params = {\n        page: page ? parseInt(page as string) : undefined,\n        limit: limit ? parseInt(limit as string) : undefined,\n        status: status as string,\n        startDate: startDate as string,\n        endDate: endDate as string\n      };\n\n      const result = await payrollService.getPayrollPeriods(params);\n\n      res.json({\n        success: true,\n        message: 'Payroll periods retrieved successfully',\n        data: result.periods,\n        pagination: {\n          page: parseInt(page as string) || 1,\n          limit: parseInt(limit as string) || 10,\n          total: result.total,\n          pages: Math.ceil(result.total / (parseInt(limit as string) || 10))\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting payroll periods', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get payroll periods',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/periods/:id\n   * @desc Get payroll period by ID\n   * @access HR Admin\n   */\n  async getPayrollPeriod(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const payrollPeriod = await payrollService.getPayrollPeriod(id);\n\n      if (!payrollPeriod) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll period not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll period retrieved successfully',\n        data: payrollPeriod,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting payroll period', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get payroll period',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route PUT /api/v1/payroll/periods/:id\n   * @desc Update payroll period\n   * @access HR Admin\n   */\n  async updatePayrollPeriod(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n\n      const payrollPeriod = await payrollService.updatePayrollPeriod(id, updateData);\n\n      if (!payrollPeriod) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll period not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll period updated successfully',\n        data: payrollPeriod,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error updating payroll period', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to update payroll period',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route DELETE /api/v1/payroll/periods/:id\n   * @desc Delete payroll period\n   * @access HR Admin\n   */\n  async deletePayrollPeriod(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const deleted = await payrollService.deletePayrollPeriod(id);\n\n      if (!deleted) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll period not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll period deleted successfully',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error deleting payroll period', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete payroll period',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/periods/:id/generate\n   * @desc Generate payroll records for a period\n   * @access HR Admin\n   */\n  async generatePayrollRecords(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    const { id } = req.params;\n    \n    try {\n      const { departmentId } = req.query;\n\n      // Update payroll period status to 'processing'\n      await payrollService.updatePayrollPeriod(id, { status: 'processing' });\n\n      let records;\n      if (departmentId) {\n        // Generate records for specific department\n        records = await payrollService.generatePayrollRecords(id, departmentId as string);\n      } else {\n        // Generate records for all departments\n        const departmentResults = await payrollService.generatePayrollRecordsForAllDepartments(id);\n        records = departmentResults.flatMap(result => result.records);\n        \n        // Create department-specific approvals after generating records\n        const { payrollApprovalService } = await import('../../services/payroll/payrollApprovalService');\n        await payrollApprovalService.createApprovalsForPayrollPeriod(id);\n        \n        // Update payroll period status to 'sent_for_review' after successful processing\n        await payrollService.updatePayrollPeriod(id, { status: 'sent_for_review' });\n      }\n\n      res.status(201).json({\n        success: true,\n        message: 'Payroll records generated successfully',\n        data: {\n          periodId: id,\n          recordCount: records.length,\n          records\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error generating payroll records', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      // Revert status to 'draft' if processing failed\n      try {\n        await payrollService.updatePayrollPeriod(id, { status: 'draft' });\n      } catch (revertError) {\n        logger.error('Error reverting payroll period status', { \n          error: (revertError as Error).message, \n          requestId,\n          periodId: id\n        });\n      }\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to generate payroll records',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/periods/:id/summary\n   * @desc Get payroll period summary\n   * @access HR Admin\n   */\n  async getPayrollSummary(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const summary = await payrollService.getPayrollSummary(id);\n\n      res.json({\n        success: true,\n        message: 'Payroll summary retrieved successfully',\n        data: summary,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting payroll summary', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get payroll summary',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/records\n   * @desc Get payroll records\n   * @access HR Admin\n   */\n  async getPayrollRecords(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { page, limit, payroll_period_id, employee_id, status } = req.query;\n\n      const params = {\n        page: page ? parseInt(page as string) : undefined,\n        limit: limit ? parseInt(limit as string) : undefined,\n        payroll_period_id: payroll_period_id as string,\n        employee_id: employee_id as string,\n        status: status as string\n      };\n\n      const result = await payrollService.getPayrollRecords(params);\n\n      res.json({\n        success: true,\n        message: 'Payroll records retrieved successfully',\n        data: result.records,\n        pagination: {\n          page: parseInt(page as string) || 1,\n          limit: parseInt(limit as string) || 10,\n          total: result.total,\n          pages: Math.ceil(result.total / (parseInt(limit as string) || 10))\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting payroll records', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get payroll records',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/records/:id\n   * @desc Get payroll record by ID\n   * @access HR Admin\n   */\n  async getPayrollRecord(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const record = await payrollService.getPayrollRecord(id);\n\n      if (!record) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll record not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll record retrieved successfully',\n        data: record,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting payroll record', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get payroll record',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route PUT /api/v1/payroll/records/:id\n   * @desc Update payroll record\n   * @access HR Admin\n   */\n  async updatePayrollRecord(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n\n      const record = await payrollService.updatePayrollRecord(id, updateData);\n\n      if (!record) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll record not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll record updated successfully',\n        data: record,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error updating payroll record', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to update payroll record',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/records/:id/approve\n   * @desc Approve payroll record\n   * @access HR Admin\n   */\n  async approvePayrollRecord(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const approverId = req.user?.userId;\n\n      if (!approverId) {\n        res.status(401).json({\n          success: false,\n          message: 'Approver ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const record = await payrollService.approvePayrollRecord(id, approverId);\n\n      if (!record) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll record not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll record approved successfully',\n        data: record,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error approving payroll record', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to approve payroll record',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route PUT /api/v1/payroll/records/:id/status\n   * @desc Update payroll record status\n   * @access HR Admin\n   */\n  async updatePayrollRecordStatus(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n\n      if (!status || !['draft', 'processed', 'paid'].includes(status)) {\n        res.status(400).json({\n          success: false,\n          message: 'Valid status (draft, processed, paid) is required',\n          requestId\n        });\n        return;\n      }\n\n      const updatedRecord = await payrollService.updatePayrollRecordStatus(id, status);\n\n      res.json({\n        success: true,\n        message: `Payroll record status updated to ${status} successfully`,\n        data: updatedRecord,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error updating payroll record status', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to update payroll record status',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Complete payroll period (mark as completed when all departments approve)\n   */\n  async completePayrollPeriod(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const completedPeriod = await payrollService.completePayrollPeriod(id);\n\n      res.json({\n        success: true,\n        message: 'Payroll period completed successfully',\n        data: completedPeriod,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error completing payroll period', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      res.status(500).json({\n        success: false,\n        message: 'Internal server error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Bulk update payroll records to paid status\n   */\n  async bulkUpdatePayrollRecordsToPaid(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { periodId, departmentId, recordIds } = req.body;\n\n      const result = await payrollService.bulkUpdatePayrollRecordsToPaid({\n        periodId,\n        departmentId,\n        recordIds\n      });\n\n      res.json({\n        success: true,\n        message: `Successfully updated ${result.updatedCount} payroll records to paid status`,\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error bulk updating payroll records to paid', { \n        error: (error as Error).message, \n        requestId,\n        body: req.body\n      });\n      res.status(500).json({\n        success: false,\n        message: 'Internal server error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route PUT /api/v1/payroll/periods/:id/records/status\n   * @desc Bulk update payroll records status for a period\n   * @access HR Admin\n   */\n  async bulkUpdatePayrollRecordsStatus(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const { status, departmentId } = req.body;\n\n      if (!status || !['draft', 'processed', 'paid'].includes(status)) {\n        res.status(400).json({\n          success: false,\n          message: 'Valid status (draft, processed, paid) is required',\n          requestId\n        });\n        return;\n      }\n\n      const updatedRecords = await payrollService.bulkUpdatePayrollRecordsStatus(id, status, departmentId);\n\n      res.json({\n        success: true,\n        message: `Bulk updated ${updatedRecords.length} payroll records to ${status} successfully`,\n        data: {\n          updatedCount: updatedRecords.length,\n          records: updatedRecords\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error bulk updating payroll records status', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to bulk update payroll records status',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/periods/:id/reprocess\n   * @desc Reprocess payroll records for a period (clears existing and regenerates)\n   * @access HR Admin\n   */\n  async reprocessPayrollRecords(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const { departmentId } = req.query;\n\n      // Update payroll period status to 'processing'\n      await payrollService.updatePayrollPeriod(id, { status: 'processing' });\n\n      // Reprocess payroll records (clears existing and regenerates)\n      const records = await payrollService.reprocessPayrollRecords(id, departmentId as string);\n\n      // Create department-specific approvals after reprocessing\n      const { payrollApprovalService } = await import('../../services/payroll/payrollApprovalService');\n      await payrollApprovalService.createApprovalsForPayrollPeriod(id);\n      \n      // Update payroll period status to 'sent_for_review' after successful reprocessing\n      await payrollService.updatePayrollPeriod(id, { status: 'sent_for_review' });\n\n      res.status(201).json({\n        success: true,\n        message: 'Payroll records reprocessed successfully',\n        data: {\n          periodId: id,\n          recordCount: records.length,\n          records: records\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error reprocessing payroll records', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to reprocess payroll records',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/records/:id/mark-paid\n   * @desc Mark payroll record as paid\n   * @access HR Admin\n   */\n  async markPayrollAsPaid(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const record = await payrollService.markPayrollAsPaid(id);\n\n      if (!record) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll record not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll record marked as paid successfully',\n        data: record,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error marking payroll as paid', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to mark payroll as paid',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/records/export\n   * @desc Export payroll records\n   * @access HR Admin\n   */\n  async exportPayrollRecords(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { format = 'csv', payroll_period_id, status } = req.query;\n      \n      const params = {\n        payroll_period_id: payroll_period_id as string,\n        status: status as string\n      };\n\n      const result = await payrollService.exportPayrollRecords(format as 'csv' | 'pdf', params);\n\n      if (format === 'csv') {\n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', `attachment; filename=\"payroll-records-${new Date().toISOString().split('T')[0]}.csv\"`);\n        res.send(result);\n      } else {\n        res.setHeader('Content-Type', 'application/pdf');\n        res.setHeader('Content-Disposition', `attachment; filename=\"payroll-records-${new Date().toISOString().split('T')[0]}.pdf\"`);\n        res.send(result);\n      }\n    } catch (error) {\n      logger.error('Error exporting payroll records', { \n        error: (error as Error).message,\n        requestId \n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to export payroll records',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/stats\n   * @desc Get payroll statistics\n   * @access HR Admin\n   */\n  async getPayrollStats(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const stats = await payrollService.getPayrollStats();\n\n      res.json({\n        success: true,\n        message: 'Payroll statistics retrieved successfully',\n        data: stats,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting payroll statistics', { \n        error: (error as Error).message, \n        requestId\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get payroll statistics',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // New endpoints for deduction types management\n  async createDeductionType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const deductionType = await payrollService.createDeductionType(req.body);\n\n      res.status(201).json({\n        success: true,\n        message: 'Deduction type created successfully',\n        data: deductionType,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error creating deduction type', { \n        error: (error as Error).message, \n        requestId,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to create deduction type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async getDeductionTypes(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const result = await payrollService.getDeductionTypes(req.query);\n\n      res.status(200).json({\n        success: true,\n        message: 'Deduction types retrieved successfully',\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting deduction types', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get deduction types',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async updateDeductionType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const deductionType = await payrollService.updateDeductionType(id, req.body);\n\n      if (!deductionType) {\n        res.status(404).json({\n          success: false,\n          message: 'Deduction type not found',\n          requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Deduction type updated successfully',\n        data: deductionType,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error updating deduction type', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to update deduction type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async deleteDeductionType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const deleted = await payrollService.deleteDeductionType(id);\n\n      if (!deleted) {\n        res.status(404).json({\n          success: false,\n          message: 'Deduction type not found',\n          requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Deduction type deleted successfully',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error deleting deduction type', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete deduction type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // New endpoints for benefit types management\n  async createBenefitType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const benefitType = await payrollService.createBenefitType(req.body);\n\n      res.status(201).json({\n        success: true,\n        message: 'Benefit type created successfully',\n        data: benefitType,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error creating benefit type', { \n        error: (error as Error).message, \n        requestId,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to create benefit type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async getBenefitTypes(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const result = await payrollService.getBenefitTypes(req.query);\n\n      res.status(200).json({\n        success: true,\n        message: 'Benefit types retrieved successfully',\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting benefit types', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get benefit types',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async updateBenefitType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n\n      const benefitType = await payrollService.updateBenefitType(id, updateData);\n\n      if (!benefitType) {\n        res.status(404).json({\n          success: false,\n          message: 'Benefit type not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Benefit type updated successfully',\n        data: benefitType,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error updating benefit type', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to update benefit type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async deleteBenefitType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const deleted = await payrollService.deleteBenefitType(id);\n\n      if (!deleted) {\n        res.status(404).json({\n          success: false,\n          message: 'Benefit type not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Benefit type deleted successfully',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error deleting benefit type', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete benefit type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // New endpoints for employee deduction balances management\n  async getEmployeeDeductionBalances(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const result = await payrollService.getEmployeeDeductionBalances(req.query);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee deduction balances retrieved successfully',\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting employee deduction balances', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get employee deduction balances',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async createEmployeeDeductionBalance(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const balance = await payrollService.createEmployeeDeductionBalance(req.body);\n\n      res.status(201).json({\n        success: true,\n        message: 'Employee deduction balance created successfully',\n        data: balance,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error creating employee deduction balance', { \n        error: (error as Error).message, \n        requestId,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to create employee deduction balance',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // CSV upload endpoint for employee deduction balances\n  async uploadEmployeeDeductionBalances(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      // Assuming CSV data is parsed and passed in req.body as an array\n      const csvData = req.body;\n      \n      if (!Array.isArray(csvData)) {\n        res.status(400).json({\n          success: false,\n          message: 'Invalid CSV data format',\n          requestId\n        });\n        return;\n      }\n\n      const result = await payrollService.uploadEmployeeDeductionBalances(csvData);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee deduction balances uploaded successfully',\n        data: {\n          successCount: result.success,\n          errorCount: result.errors.length,\n          errors: result.errors\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error uploading employee deduction balances', { \n        error: (error as Error).message, \n        requestId\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to upload employee deduction balances',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // Delete employee deduction balance\n  async deleteEmployeeDeductionBalance(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      \n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Employee deduction balance ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const deleted = await payrollService.deleteEmployeeDeductionBalance(id);\n      \n      if (!deleted) {\n        res.status(404).json({\n          success: false,\n          message: 'Employee deduction balance not found',\n          requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee deduction balance deleted successfully',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error deleting employee deduction balance', { \n        error: (error as Error).message, \n        requestId,\n        id: req.params.id\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete employee deduction balance',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // CSV upload endpoint for employee benefits\n  async uploadEmployeeBenefits(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      // Assuming CSV data is parsed and passed in req.body as an array\n      const csvData = req.body;\n      \n      if (!Array.isArray(csvData)) {\n        res.status(400).json({\n          success: false,\n          message: 'Invalid CSV data format',\n          requestId\n        });\n        return;\n      }\n\n      const result = await payrollService.uploadEmployeeBenefits(csvData);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee benefits uploaded successfully',\n        data: {\n          successCount: result.success,\n          errorCount: result.errors.length,\n          errors: result.errors\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error uploading employee benefits', { \n        error: (error as Error).message, \n        requestId\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to upload employee benefits',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // New endpoints for employee benefits management\n  async getEmployeeBenefits(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const result = await payrollService.getEmployeeBenefits(req.query);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee benefits retrieved successfully',\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting employee benefits', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get employee benefits',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async createEmployeeBenefit(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const benefit = await payrollService.createEmployeeBenefit(req.body);\n\n      res.status(201).json({\n        success: true,\n        message: 'Employee benefit created successfully',\n        data: benefit,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error creating employee benefit', { \n        error: (error as Error).message, \n        requestId,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to create employee benefit',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async updateEmployeeBenefit(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    const { id } = req.params;\n    \n    try {\n      const benefit = await payrollService.updateEmployeeBenefit(id, req.body);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee benefit updated successfully',\n        data: benefit,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error updating employee benefit', { \n        error: (error as Error).message, \n        requestId,\n        id,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to update employee benefit',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async deleteEmployeeBenefit(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    const { id } = req.params;\n    \n    try {\n      const deleted = await payrollService.deleteEmployeeBenefit(id);\n\n      if (deleted) {\n        res.status(200).json({\n          success: true,\n          message: 'Employee benefit deleted successfully',\n          requestId\n        });\n      } else {\n        res.status(404).json({\n          success: false,\n          message: 'Employee benefit not found',\n          requestId\n        });\n      }\n    } catch (error) {\n      logger.error('Error deleting employee benefit', { \n        error: (error as Error).message, \n        requestId,\n        id\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete employee benefit',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/initialize-periods\n   * @desc Initialize payroll periods for the current year\n   * @access HR Admin\n   */\n  async initializePayrollPeriods(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      await autoPayrollService.initializePayrollPeriods();\n      \n      res.json({\n        success: true,\n        message: 'Payroll periods initialized successfully for the current year',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error initializing payroll periods', { \n        error: (error as Error).message, \n        requestId\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to initialize payroll periods',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/generate-current-month\n   * @desc Generate payroll period for the current month only\n   * @access HR Admin\n   */\n  async generateCurrentMonthPeriod(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      await autoPayrollService.generateCurrentMonthPeriod();\n      \n      res.json({\n        success: true,\n        message: 'Current month payroll period generated successfully',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error generating current month payroll period', { \n        error: (error as Error).message, \n        requestId\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to generate current month payroll period',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/expected-hours\n   * @desc Get expected monthly hours from system settings\n   * @access HR Admin\n   */\n  async getExpectedMonthlyHours(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const expectedHours = await autoPayrollService.getExpectedMonthlyHours();\n      \n      res.json({\n        success: true,\n        message: 'Expected monthly hours retrieved successfully',\n        data: { expectedHours },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting expected monthly hours', { \n        error: (error as Error).message, \n        requestId\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get expected monthly hours',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/paystubs/department/:departmentId/period/:periodId\n   * @desc Generate PDF paystubs for a department's employees for a specific period\n   * @access HR Admin\n   */\n  async generateDepartmentPaystubs(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { departmentId, periodId } = req.params;\n\n      // Get payroll records for the department and period\n      const records = await payrollService.getPayrollRecordsByDepartmentAndPeriod(departmentId, periodId);\n      \n      if (!records || records.length === 0) {\n        res.status(404).json({\n          success: false,\n          message: 'No payroll records found for this department and period',\n          requestId\n        });\n        return;\n      }\n\n      // Generate PDF paystubs using the existing method\n      const pdfBuffer = await payrollService.exportPeriodPaystubsPDF(periodId);\n\n      // Set response headers for PDF download\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"paystubs-${departmentId}-${periodId}.pdf\"`);\n      res.setHeader('Content-Length', pdfBuffer.length);\n\n      res.send(pdfBuffer);\n    } catch (error) {\n      logger.error('Error generating department paystubs', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to generate paystubs',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Export all employee paystubs for a period as PDF\n   */\n  async exportPeriodPaystubsPDF(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Period ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const pdfBuffer = await payrollService.exportPeriodPaystubsPDF(id);\n\n      // Set headers for PDF download\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"paystubs-period-${id}.pdf\"`);\n      res.setHeader('Content-Length', pdfBuffer.length);\n\n      res.send(pdfBuffer);\n    } catch (error) {\n      logger.error('Error exporting period paystubs PDF', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to export period paystubs PDF',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/periods/:id/export/paystubs/department/pdf\n   * @desc Export department employee paystubs for a period as PDF\n   * @access Department Head\n   */\n  async exportDepartmentPaystubsPDF(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const userId = req.user?.userId;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Period ID is required',\n          requestId\n        });\n        return;\n      }\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User authentication required',\n          requestId\n        });\n        return;\n      }\n\n      const pdfBuffer = await payrollService.exportDepartmentPaystubsPDF(id, userId);\n\n      // Set headers for PDF download\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"department-paystubs-period-${id}.pdf\"`);\n      res.setHeader('Content-Length', pdfBuffer.length);\n\n      res.send(pdfBuffer);\n    } catch (error) {\n      logger.error('Error exporting department paystubs PDF', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to export department paystubs PDF',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n}\n\nexport const payrollController = new PayrollController();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "66d402944afdaf63880ea33f56115cd61f29c694"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_hzsouck27 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_hzsouck27();
var __createBinding =
/* istanbul ignore next */
(cov_hzsouck27().s[0]++,
/* istanbul ignore next */
(cov_hzsouck27().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_hzsouck27().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_hzsouck27().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_hzsouck27().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_hzsouck27().f[0]++;
  cov_hzsouck27().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_hzsouck27().b[2][0]++;
    cov_hzsouck27().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_hzsouck27().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_hzsouck27().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_hzsouck27().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_hzsouck27().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_hzsouck27().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_hzsouck27().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_hzsouck27().b[5][1]++,
  /* istanbul ignore next */
  (cov_hzsouck27().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_hzsouck27().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_hzsouck27().b[3][0]++;
    cov_hzsouck27().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_hzsouck27().f[1]++;
        cov_hzsouck27().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_hzsouck27().b[3][1]++;
  }
  cov_hzsouck27().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_hzsouck27().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_hzsouck27().f[2]++;
  cov_hzsouck27().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_hzsouck27().b[7][0]++;
    cov_hzsouck27().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_hzsouck27().b[7][1]++;
  }
  cov_hzsouck27().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_hzsouck27().s[11]++,
/* istanbul ignore next */
(cov_hzsouck27().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_hzsouck27().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_hzsouck27().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_hzsouck27().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_hzsouck27().f[3]++;
  cov_hzsouck27().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_hzsouck27().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_hzsouck27().f[4]++;
  cov_hzsouck27().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_hzsouck27().s[14]++,
/* istanbul ignore next */
(cov_hzsouck27().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_hzsouck27().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_hzsouck27().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_hzsouck27().f[5]++;
  cov_hzsouck27().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_hzsouck27().f[6]++;
    cov_hzsouck27().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_hzsouck27().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_hzsouck27().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_hzsouck27().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_hzsouck27().s[17]++, []);
      /* istanbul ignore next */
      cov_hzsouck27().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_hzsouck27().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_hzsouck27().b[12][0]++;
          cov_hzsouck27().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_hzsouck27().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_hzsouck27().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_hzsouck27().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_hzsouck27().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_hzsouck27().f[8]++;
    cov_hzsouck27().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_hzsouck27().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_hzsouck27().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_hzsouck27().b[13][0]++;
      cov_hzsouck27().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_hzsouck27().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_hzsouck27().s[26]++, {});
    /* istanbul ignore next */
    cov_hzsouck27().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_hzsouck27().b[15][0]++;
      cov_hzsouck27().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_hzsouck27().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_hzsouck27().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_hzsouck27().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_hzsouck27().b[16][0]++;
          cov_hzsouck27().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_hzsouck27().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_hzsouck27().b[15][1]++;
    }
    cov_hzsouck27().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_hzsouck27().s[34]++;
    return result;
  };
}()));
var __importDefault =
/* istanbul ignore next */
(cov_hzsouck27().s[35]++,
/* istanbul ignore next */
(cov_hzsouck27().b[17][0]++, this) &&
/* istanbul ignore next */
(cov_hzsouck27().b[17][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_hzsouck27().b[17][2]++, function (mod) {
  /* istanbul ignore next */
  cov_hzsouck27().f[9]++;
  cov_hzsouck27().s[36]++;
  return /* istanbul ignore next */(cov_hzsouck27().b[19][0]++, mod) &&
  /* istanbul ignore next */
  (cov_hzsouck27().b[19][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_hzsouck27().b[18][0]++, mod) :
  /* istanbul ignore next */
  (cov_hzsouck27().b[18][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_hzsouck27().s[37]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_hzsouck27().s[38]++;
exports.payrollController = exports.PayrollController = void 0;
const payrollService_1 =
/* istanbul ignore next */
(cov_hzsouck27().s[39]++, require("../../services/payroll/payrollService"));
const autoPayrollService_1 =
/* istanbul ignore next */
(cov_hzsouck27().s[40]++, require("../../services/payroll/autoPayrollService"));
const express_1 =
/* istanbul ignore next */
(cov_hzsouck27().s[41]++, require("../../utils/types/express"));
const logger_1 =
/* istanbul ignore next */
(cov_hzsouck27().s[42]++, __importDefault(require("../../utils/logger")));
class PayrollController {
  /**
   * @route POST /api/v1/payroll/periods
   * @desc Create a new payroll period
   * @access HR Admin
   */
  async createPayrollPeriod(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[10]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[43]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[44]++;
    try {
      const {
        period_name,
        start_date,
        end_date,
        status
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[45]++, req.body);
      /* istanbul ignore next */
      cov_hzsouck27().s[46]++;
      if (
      /* istanbul ignore next */
      (cov_hzsouck27().b[21][0]++, !period_name) ||
      /* istanbul ignore next */
      (cov_hzsouck27().b[21][1]++, !start_date) ||
      /* istanbul ignore next */
      (cov_hzsouck27().b[21][2]++, !end_date)) {
        /* istanbul ignore next */
        cov_hzsouck27().b[20][0]++;
        cov_hzsouck27().s[47]++;
        res.status(400).json({
          success: false,
          message: 'Period name, start date, and end date are required',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[48]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[20][1]++;
      }
      const payrollPeriod =
      /* istanbul ignore next */
      (cov_hzsouck27().s[49]++, await payrollService_1.payrollService.createPayrollPeriod({
        period_name,
        start_date: new Date(start_date),
        end_date: new Date(end_date),
        status
      }));
      /* istanbul ignore next */
      cov_hzsouck27().s[50]++;
      res.status(201).json({
        success: true,
        message: 'Payroll period created successfully',
        data: payrollPeriod,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[51]++;
      logger_1.default.error('Error creating payroll period', {
        error: error.message,
        requestId,
        body: req.body
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[52]++;
      res.status(500).json({
        success: false,
        message: 'Failed to create payroll period',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route GET /api/v1/payroll/periods
   * @desc Get all payroll periods
   * @access HR Admin
   */
  async getPayrollPeriods(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[11]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[53]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[54]++;
    try {
      const {
        page,
        limit,
        status,
        startDate,
        endDate
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[55]++, req.query);
      const params =
      /* istanbul ignore next */
      (cov_hzsouck27().s[56]++, {
        page: page ?
        /* istanbul ignore next */
        (cov_hzsouck27().b[22][0]++, parseInt(page)) :
        /* istanbul ignore next */
        (cov_hzsouck27().b[22][1]++, undefined),
        limit: limit ?
        /* istanbul ignore next */
        (cov_hzsouck27().b[23][0]++, parseInt(limit)) :
        /* istanbul ignore next */
        (cov_hzsouck27().b[23][1]++, undefined),
        status: status,
        startDate: startDate,
        endDate: endDate
      });
      const result =
      /* istanbul ignore next */
      (cov_hzsouck27().s[57]++, await payrollService_1.payrollService.getPayrollPeriods(params));
      /* istanbul ignore next */
      cov_hzsouck27().s[58]++;
      res.json({
        success: true,
        message: 'Payroll periods retrieved successfully',
        data: result.periods,
        pagination: {
          page:
          /* istanbul ignore next */
          (cov_hzsouck27().b[24][0]++, parseInt(page)) ||
          /* istanbul ignore next */
          (cov_hzsouck27().b[24][1]++, 1),
          limit:
          /* istanbul ignore next */
          (cov_hzsouck27().b[25][0]++, parseInt(limit)) ||
          /* istanbul ignore next */
          (cov_hzsouck27().b[25][1]++, 10),
          total: result.total,
          pages: Math.ceil(result.total / (
          /* istanbul ignore next */
          (cov_hzsouck27().b[26][0]++, parseInt(limit)) ||
          /* istanbul ignore next */
          (cov_hzsouck27().b[26][1]++, 10)))
        },
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[59]++;
      logger_1.default.error('Error getting payroll periods', {
        error: error.message,
        requestId,
        query: req.query
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[60]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get payroll periods',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route GET /api/v1/payroll/periods/:id
   * @desc Get payroll period by ID
   * @access HR Admin
   */
  async getPayrollPeriod(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[12]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[61]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[62]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[63]++, req.params);
      const payrollPeriod =
      /* istanbul ignore next */
      (cov_hzsouck27().s[64]++, await payrollService_1.payrollService.getPayrollPeriod(id));
      /* istanbul ignore next */
      cov_hzsouck27().s[65]++;
      if (!payrollPeriod) {
        /* istanbul ignore next */
        cov_hzsouck27().b[27][0]++;
        cov_hzsouck27().s[66]++;
        res.status(404).json({
          success: false,
          message: 'Payroll period not found',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[67]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[27][1]++;
      }
      cov_hzsouck27().s[68]++;
      res.json({
        success: true,
        message: 'Payroll period retrieved successfully',
        data: payrollPeriod,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[69]++;
      logger_1.default.error('Error getting payroll period', {
        error: error.message,
        requestId,
        params: req.params
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[70]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get payroll period',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route PUT /api/v1/payroll/periods/:id
   * @desc Update payroll period
   * @access HR Admin
   */
  async updatePayrollPeriod(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[13]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[71]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[72]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[73]++, req.params);
      const updateData =
      /* istanbul ignore next */
      (cov_hzsouck27().s[74]++, req.body);
      const payrollPeriod =
      /* istanbul ignore next */
      (cov_hzsouck27().s[75]++, await payrollService_1.payrollService.updatePayrollPeriod(id, updateData));
      /* istanbul ignore next */
      cov_hzsouck27().s[76]++;
      if (!payrollPeriod) {
        /* istanbul ignore next */
        cov_hzsouck27().b[28][0]++;
        cov_hzsouck27().s[77]++;
        res.status(404).json({
          success: false,
          message: 'Payroll period not found',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[78]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[28][1]++;
      }
      cov_hzsouck27().s[79]++;
      res.json({
        success: true,
        message: 'Payroll period updated successfully',
        data: payrollPeriod,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[80]++;
      logger_1.default.error('Error updating payroll period', {
        error: error.message,
        requestId,
        params: req.params,
        body: req.body
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[81]++;
      res.status(500).json({
        success: false,
        message: 'Failed to update payroll period',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route DELETE /api/v1/payroll/periods/:id
   * @desc Delete payroll period
   * @access HR Admin
   */
  async deletePayrollPeriod(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[14]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[82]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[83]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[84]++, req.params);
      const deleted =
      /* istanbul ignore next */
      (cov_hzsouck27().s[85]++, await payrollService_1.payrollService.deletePayrollPeriod(id));
      /* istanbul ignore next */
      cov_hzsouck27().s[86]++;
      if (!deleted) {
        /* istanbul ignore next */
        cov_hzsouck27().b[29][0]++;
        cov_hzsouck27().s[87]++;
        res.status(404).json({
          success: false,
          message: 'Payroll period not found',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[88]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[29][1]++;
      }
      cov_hzsouck27().s[89]++;
      res.json({
        success: true,
        message: 'Payroll period deleted successfully',
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[90]++;
      logger_1.default.error('Error deleting payroll period', {
        error: error.message,
        requestId,
        params: req.params
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[91]++;
      res.status(500).json({
        success: false,
        message: 'Failed to delete payroll period',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route POST /api/v1/payroll/periods/:id/generate
   * @desc Generate payroll records for a period
   * @access HR Admin
   */
  async generatePayrollRecords(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[15]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[92]++, (0, express_1.getRequestId)(req));
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_hzsouck27().s[93]++, req.params);
    /* istanbul ignore next */
    cov_hzsouck27().s[94]++;
    try {
      const {
        departmentId
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[95]++, req.query);
      // Update payroll period status to 'processing'
      /* istanbul ignore next */
      cov_hzsouck27().s[96]++;
      await payrollService_1.payrollService.updatePayrollPeriod(id, {
        status: 'processing'
      });
      let records;
      /* istanbul ignore next */
      cov_hzsouck27().s[97]++;
      if (departmentId) {
        /* istanbul ignore next */
        cov_hzsouck27().b[30][0]++;
        cov_hzsouck27().s[98]++;
        // Generate records for specific department
        records = await payrollService_1.payrollService.generatePayrollRecords(id, departmentId);
      } else {
        /* istanbul ignore next */
        cov_hzsouck27().b[30][1]++;
        // Generate records for all departments
        const departmentResults =
        /* istanbul ignore next */
        (cov_hzsouck27().s[99]++, await payrollService_1.payrollService.generatePayrollRecordsForAllDepartments(id));
        /* istanbul ignore next */
        cov_hzsouck27().s[100]++;
        records = departmentResults.flatMap(result => {
          /* istanbul ignore next */
          cov_hzsouck27().f[16]++;
          cov_hzsouck27().s[101]++;
          return result.records;
        });
        // Create department-specific approvals after generating records
        const {
          payrollApprovalService
        } =
        /* istanbul ignore next */
        (cov_hzsouck27().s[102]++, await Promise.resolve().then(() => {
          /* istanbul ignore next */
          cov_hzsouck27().f[17]++;
          cov_hzsouck27().s[103]++;
          return __importStar(require('../../services/payroll/payrollApprovalService'));
        }));
        /* istanbul ignore next */
        cov_hzsouck27().s[104]++;
        await payrollApprovalService.createApprovalsForPayrollPeriod(id);
        // Update payroll period status to 'sent_for_review' after successful processing
        /* istanbul ignore next */
        cov_hzsouck27().s[105]++;
        await payrollService_1.payrollService.updatePayrollPeriod(id, {
          status: 'sent_for_review'
        });
      }
      /* istanbul ignore next */
      cov_hzsouck27().s[106]++;
      res.status(201).json({
        success: true,
        message: 'Payroll records generated successfully',
        data: {
          periodId: id,
          recordCount: records.length,
          records
        },
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[107]++;
      logger_1.default.error('Error generating payroll records', {
        error: error.message,
        requestId,
        params: req.params
      });
      // Revert status to 'draft' if processing failed
      /* istanbul ignore next */
      cov_hzsouck27().s[108]++;
      try {
        /* istanbul ignore next */
        cov_hzsouck27().s[109]++;
        await payrollService_1.payrollService.updatePayrollPeriod(id, {
          status: 'draft'
        });
      } catch (revertError) {
        /* istanbul ignore next */
        cov_hzsouck27().s[110]++;
        logger_1.default.error('Error reverting payroll period status', {
          error: revertError.message,
          requestId,
          periodId: id
        });
      }
      /* istanbul ignore next */
      cov_hzsouck27().s[111]++;
      res.status(500).json({
        success: false,
        message: 'Failed to generate payroll records',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route GET /api/v1/payroll/periods/:id/summary
   * @desc Get payroll period summary
   * @access HR Admin
   */
  async getPayrollSummary(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[18]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[112]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[113]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[114]++, req.params);
      const summary =
      /* istanbul ignore next */
      (cov_hzsouck27().s[115]++, await payrollService_1.payrollService.getPayrollSummary(id));
      /* istanbul ignore next */
      cov_hzsouck27().s[116]++;
      res.json({
        success: true,
        message: 'Payroll summary retrieved successfully',
        data: summary,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[117]++;
      logger_1.default.error('Error getting payroll summary', {
        error: error.message,
        requestId,
        params: req.params
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[118]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get payroll summary',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route GET /api/v1/payroll/records
   * @desc Get payroll records
   * @access HR Admin
   */
  async getPayrollRecords(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[19]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[119]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[120]++;
    try {
      const {
        page,
        limit,
        payroll_period_id,
        employee_id,
        status
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[121]++, req.query);
      const params =
      /* istanbul ignore next */
      (cov_hzsouck27().s[122]++, {
        page: page ?
        /* istanbul ignore next */
        (cov_hzsouck27().b[31][0]++, parseInt(page)) :
        /* istanbul ignore next */
        (cov_hzsouck27().b[31][1]++, undefined),
        limit: limit ?
        /* istanbul ignore next */
        (cov_hzsouck27().b[32][0]++, parseInt(limit)) :
        /* istanbul ignore next */
        (cov_hzsouck27().b[32][1]++, undefined),
        payroll_period_id: payroll_period_id,
        employee_id: employee_id,
        status: status
      });
      const result =
      /* istanbul ignore next */
      (cov_hzsouck27().s[123]++, await payrollService_1.payrollService.getPayrollRecords(params));
      /* istanbul ignore next */
      cov_hzsouck27().s[124]++;
      res.json({
        success: true,
        message: 'Payroll records retrieved successfully',
        data: result.records,
        pagination: {
          page:
          /* istanbul ignore next */
          (cov_hzsouck27().b[33][0]++, parseInt(page)) ||
          /* istanbul ignore next */
          (cov_hzsouck27().b[33][1]++, 1),
          limit:
          /* istanbul ignore next */
          (cov_hzsouck27().b[34][0]++, parseInt(limit)) ||
          /* istanbul ignore next */
          (cov_hzsouck27().b[34][1]++, 10),
          total: result.total,
          pages: Math.ceil(result.total / (
          /* istanbul ignore next */
          (cov_hzsouck27().b[35][0]++, parseInt(limit)) ||
          /* istanbul ignore next */
          (cov_hzsouck27().b[35][1]++, 10)))
        },
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[125]++;
      logger_1.default.error('Error getting payroll records', {
        error: error.message,
        requestId,
        query: req.query
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[126]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get payroll records',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route GET /api/v1/payroll/records/:id
   * @desc Get payroll record by ID
   * @access HR Admin
   */
  async getPayrollRecord(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[20]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[127]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[128]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[129]++, req.params);
      const record =
      /* istanbul ignore next */
      (cov_hzsouck27().s[130]++, await payrollService_1.payrollService.getPayrollRecord(id));
      /* istanbul ignore next */
      cov_hzsouck27().s[131]++;
      if (!record) {
        /* istanbul ignore next */
        cov_hzsouck27().b[36][0]++;
        cov_hzsouck27().s[132]++;
        res.status(404).json({
          success: false,
          message: 'Payroll record not found',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[133]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[36][1]++;
      }
      cov_hzsouck27().s[134]++;
      res.json({
        success: true,
        message: 'Payroll record retrieved successfully',
        data: record,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[135]++;
      logger_1.default.error('Error getting payroll record', {
        error: error.message,
        requestId,
        params: req.params
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[136]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get payroll record',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route PUT /api/v1/payroll/records/:id
   * @desc Update payroll record
   * @access HR Admin
   */
  async updatePayrollRecord(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[21]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[137]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[138]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[139]++, req.params);
      const updateData =
      /* istanbul ignore next */
      (cov_hzsouck27().s[140]++, req.body);
      const record =
      /* istanbul ignore next */
      (cov_hzsouck27().s[141]++, await payrollService_1.payrollService.updatePayrollRecord(id, updateData));
      /* istanbul ignore next */
      cov_hzsouck27().s[142]++;
      if (!record) {
        /* istanbul ignore next */
        cov_hzsouck27().b[37][0]++;
        cov_hzsouck27().s[143]++;
        res.status(404).json({
          success: false,
          message: 'Payroll record not found',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[144]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[37][1]++;
      }
      cov_hzsouck27().s[145]++;
      res.json({
        success: true,
        message: 'Payroll record updated successfully',
        data: record,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[146]++;
      logger_1.default.error('Error updating payroll record', {
        error: error.message,
        requestId,
        params: req.params,
        body: req.body
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[147]++;
      res.status(500).json({
        success: false,
        message: 'Failed to update payroll record',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route POST /api/v1/payroll/records/:id/approve
   * @desc Approve payroll record
   * @access HR Admin
   */
  async approvePayrollRecord(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[22]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[148]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[149]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[150]++, req.params);
      const approverId =
      /* istanbul ignore next */
      (cov_hzsouck27().s[151]++, req.user?.userId);
      /* istanbul ignore next */
      cov_hzsouck27().s[152]++;
      if (!approverId) {
        /* istanbul ignore next */
        cov_hzsouck27().b[38][0]++;
        cov_hzsouck27().s[153]++;
        res.status(401).json({
          success: false,
          message: 'Approver ID is required',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[154]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[38][1]++;
      }
      const record =
      /* istanbul ignore next */
      (cov_hzsouck27().s[155]++, await payrollService_1.payrollService.approvePayrollRecord(id, approverId));
      /* istanbul ignore next */
      cov_hzsouck27().s[156]++;
      if (!record) {
        /* istanbul ignore next */
        cov_hzsouck27().b[39][0]++;
        cov_hzsouck27().s[157]++;
        res.status(404).json({
          success: false,
          message: 'Payroll record not found',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[158]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[39][1]++;
      }
      cov_hzsouck27().s[159]++;
      res.json({
        success: true,
        message: 'Payroll record approved successfully',
        data: record,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[160]++;
      logger_1.default.error('Error approving payroll record', {
        error: error.message,
        requestId,
        params: req.params
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[161]++;
      res.status(500).json({
        success: false,
        message: 'Failed to approve payroll record',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route PUT /api/v1/payroll/records/:id/status
   * @desc Update payroll record status
   * @access HR Admin
   */
  async updatePayrollRecordStatus(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[23]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[162]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[163]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[164]++, req.params);
      const {
        status
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[165]++, req.body);
      /* istanbul ignore next */
      cov_hzsouck27().s[166]++;
      if (
      /* istanbul ignore next */
      (cov_hzsouck27().b[41][0]++, !status) ||
      /* istanbul ignore next */
      (cov_hzsouck27().b[41][1]++, !['draft', 'processed', 'paid'].includes(status))) {
        /* istanbul ignore next */
        cov_hzsouck27().b[40][0]++;
        cov_hzsouck27().s[167]++;
        res.status(400).json({
          success: false,
          message: 'Valid status (draft, processed, paid) is required',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[168]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[40][1]++;
      }
      const updatedRecord =
      /* istanbul ignore next */
      (cov_hzsouck27().s[169]++, await payrollService_1.payrollService.updatePayrollRecordStatus(id, status));
      /* istanbul ignore next */
      cov_hzsouck27().s[170]++;
      res.json({
        success: true,
        message: `Payroll record status updated to ${status} successfully`,
        data: updatedRecord,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[171]++;
      logger_1.default.error('Error updating payroll record status', {
        error: error.message,
        requestId,
        params: req.params,
        body: req.body
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[172]++;
      res.status(500).json({
        success: false,
        message: 'Failed to update payroll record status',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Complete payroll period (mark as completed when all departments approve)
   */
  async completePayrollPeriod(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[24]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[173]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[174]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[175]++, req.params);
      const completedPeriod =
      /* istanbul ignore next */
      (cov_hzsouck27().s[176]++, await payrollService_1.payrollService.completePayrollPeriod(id));
      /* istanbul ignore next */
      cov_hzsouck27().s[177]++;
      res.json({
        success: true,
        message: 'Payroll period completed successfully',
        data: completedPeriod,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[178]++;
      logger_1.default.error('Error completing payroll period', {
        error: error.message,
        requestId,
        params: req.params
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[179]++;
      res.status(500).json({
        success: false,
        message: 'Internal server error',
        requestId
      });
    }
  }
  /**
   * Bulk update payroll records to paid status
   */
  async bulkUpdatePayrollRecordsToPaid(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[25]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[180]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[181]++;
    try {
      const {
        periodId,
        departmentId,
        recordIds
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[182]++, req.body);
      const result =
      /* istanbul ignore next */
      (cov_hzsouck27().s[183]++, await payrollService_1.payrollService.bulkUpdatePayrollRecordsToPaid({
        periodId,
        departmentId,
        recordIds
      }));
      /* istanbul ignore next */
      cov_hzsouck27().s[184]++;
      res.json({
        success: true,
        message: `Successfully updated ${result.updatedCount} payroll records to paid status`,
        data: result,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[185]++;
      logger_1.default.error('Error bulk updating payroll records to paid', {
        error: error.message,
        requestId,
        body: req.body
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[186]++;
      res.status(500).json({
        success: false,
        message: 'Internal server error',
        requestId
      });
    }
  }
  /**
   * @route PUT /api/v1/payroll/periods/:id/records/status
   * @desc Bulk update payroll records status for a period
   * @access HR Admin
   */
  async bulkUpdatePayrollRecordsStatus(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[26]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[187]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[188]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[189]++, req.params);
      const {
        status,
        departmentId
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[190]++, req.body);
      /* istanbul ignore next */
      cov_hzsouck27().s[191]++;
      if (
      /* istanbul ignore next */
      (cov_hzsouck27().b[43][0]++, !status) ||
      /* istanbul ignore next */
      (cov_hzsouck27().b[43][1]++, !['draft', 'processed', 'paid'].includes(status))) {
        /* istanbul ignore next */
        cov_hzsouck27().b[42][0]++;
        cov_hzsouck27().s[192]++;
        res.status(400).json({
          success: false,
          message: 'Valid status (draft, processed, paid) is required',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[193]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[42][1]++;
      }
      const updatedRecords =
      /* istanbul ignore next */
      (cov_hzsouck27().s[194]++, await payrollService_1.payrollService.bulkUpdatePayrollRecordsStatus(id, status, departmentId));
      /* istanbul ignore next */
      cov_hzsouck27().s[195]++;
      res.json({
        success: true,
        message: `Bulk updated ${updatedRecords.length} payroll records to ${status} successfully`,
        data: {
          updatedCount: updatedRecords.length,
          records: updatedRecords
        },
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[196]++;
      logger_1.default.error('Error bulk updating payroll records status', {
        error: error.message,
        requestId,
        params: req.params,
        body: req.body
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[197]++;
      res.status(500).json({
        success: false,
        message: 'Failed to bulk update payroll records status',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route POST /api/v1/payroll/periods/:id/reprocess
   * @desc Reprocess payroll records for a period (clears existing and regenerates)
   * @access HR Admin
   */
  async reprocessPayrollRecords(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[27]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[198]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[199]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[200]++, req.params);
      const {
        departmentId
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[201]++, req.query);
      // Update payroll period status to 'processing'
      /* istanbul ignore next */
      cov_hzsouck27().s[202]++;
      await payrollService_1.payrollService.updatePayrollPeriod(id, {
        status: 'processing'
      });
      // Reprocess payroll records (clears existing and regenerates)
      const records =
      /* istanbul ignore next */
      (cov_hzsouck27().s[203]++, await payrollService_1.payrollService.reprocessPayrollRecords(id, departmentId));
      // Create department-specific approvals after reprocessing
      const {
        payrollApprovalService
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[204]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_hzsouck27().f[28]++;
        cov_hzsouck27().s[205]++;
        return __importStar(require('../../services/payroll/payrollApprovalService'));
      }));
      /* istanbul ignore next */
      cov_hzsouck27().s[206]++;
      await payrollApprovalService.createApprovalsForPayrollPeriod(id);
      // Update payroll period status to 'sent_for_review' after successful reprocessing
      /* istanbul ignore next */
      cov_hzsouck27().s[207]++;
      await payrollService_1.payrollService.updatePayrollPeriod(id, {
        status: 'sent_for_review'
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[208]++;
      res.status(201).json({
        success: true,
        message: 'Payroll records reprocessed successfully',
        data: {
          periodId: id,
          recordCount: records.length,
          records: records
        },
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[209]++;
      logger_1.default.error('Error reprocessing payroll records', {
        error: error.message,
        requestId,
        params: req.params,
        query: req.query
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[210]++;
      res.status(500).json({
        success: false,
        message: 'Failed to reprocess payroll records',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route POST /api/v1/payroll/records/:id/mark-paid
   * @desc Mark payroll record as paid
   * @access HR Admin
   */
  async markPayrollAsPaid(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[29]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[211]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[212]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[213]++, req.params);
      const record =
      /* istanbul ignore next */
      (cov_hzsouck27().s[214]++, await payrollService_1.payrollService.markPayrollAsPaid(id));
      /* istanbul ignore next */
      cov_hzsouck27().s[215]++;
      if (!record) {
        /* istanbul ignore next */
        cov_hzsouck27().b[44][0]++;
        cov_hzsouck27().s[216]++;
        res.status(404).json({
          success: false,
          message: 'Payroll record not found',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[217]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[44][1]++;
      }
      cov_hzsouck27().s[218]++;
      res.json({
        success: true,
        message: 'Payroll record marked as paid successfully',
        data: record,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[219]++;
      logger_1.default.error('Error marking payroll as paid', {
        error: error.message,
        requestId,
        params: req.params
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[220]++;
      res.status(500).json({
        success: false,
        message: 'Failed to mark payroll as paid',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route GET /api/v1/payroll/records/export
   * @desc Export payroll records
   * @access HR Admin
   */
  async exportPayrollRecords(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[30]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[221]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[222]++;
    try {
      const {
        format =
        /* istanbul ignore next */
        (cov_hzsouck27().b[45][0]++, 'csv'),
        payroll_period_id,
        status
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[223]++, req.query);
      const params =
      /* istanbul ignore next */
      (cov_hzsouck27().s[224]++, {
        payroll_period_id: payroll_period_id,
        status: status
      });
      const result =
      /* istanbul ignore next */
      (cov_hzsouck27().s[225]++, await payrollService_1.payrollService.exportPayrollRecords(format, params));
      /* istanbul ignore next */
      cov_hzsouck27().s[226]++;
      if (format === 'csv') {
        /* istanbul ignore next */
        cov_hzsouck27().b[46][0]++;
        cov_hzsouck27().s[227]++;
        res.setHeader('Content-Type', 'text/csv');
        /* istanbul ignore next */
        cov_hzsouck27().s[228]++;
        res.setHeader('Content-Disposition', `attachment; filename="payroll-records-${new Date().toISOString().split('T')[0]}.csv"`);
        /* istanbul ignore next */
        cov_hzsouck27().s[229]++;
        res.send(result);
      } else {
        /* istanbul ignore next */
        cov_hzsouck27().b[46][1]++;
        cov_hzsouck27().s[230]++;
        res.setHeader('Content-Type', 'application/pdf');
        /* istanbul ignore next */
        cov_hzsouck27().s[231]++;
        res.setHeader('Content-Disposition', `attachment; filename="payroll-records-${new Date().toISOString().split('T')[0]}.pdf"`);
        /* istanbul ignore next */
        cov_hzsouck27().s[232]++;
        res.send(result);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[233]++;
      logger_1.default.error('Error exporting payroll records', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[234]++;
      res.status(500).json({
        success: false,
        message: 'Failed to export payroll records',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route GET /api/v1/payroll/stats
   * @desc Get payroll statistics
   * @access HR Admin
   */
  async getPayrollStats(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[31]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[235]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[236]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_hzsouck27().s[237]++, await payrollService_1.payrollService.getPayrollStats());
      /* istanbul ignore next */
      cov_hzsouck27().s[238]++;
      res.json({
        success: true,
        message: 'Payroll statistics retrieved successfully',
        data: stats,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[239]++;
      logger_1.default.error('Error getting payroll statistics', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[240]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get payroll statistics',
        error: error.message,
        requestId
      });
    }
  }
  // New endpoints for deduction types management
  async createDeductionType(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[32]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[241]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[242]++;
    try {
      const deductionType =
      /* istanbul ignore next */
      (cov_hzsouck27().s[243]++, await payrollService_1.payrollService.createDeductionType(req.body));
      /* istanbul ignore next */
      cov_hzsouck27().s[244]++;
      res.status(201).json({
        success: true,
        message: 'Deduction type created successfully',
        data: deductionType,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[245]++;
      logger_1.default.error('Error creating deduction type', {
        error: error.message,
        requestId,
        body: req.body
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[246]++;
      res.status(500).json({
        success: false,
        message: 'Failed to create deduction type',
        error: error.message,
        requestId
      });
    }
  }
  async getDeductionTypes(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[33]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[247]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[248]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_hzsouck27().s[249]++, await payrollService_1.payrollService.getDeductionTypes(req.query));
      /* istanbul ignore next */
      cov_hzsouck27().s[250]++;
      res.status(200).json({
        success: true,
        message: 'Deduction types retrieved successfully',
        data: result,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[251]++;
      logger_1.default.error('Error getting deduction types', {
        error: error.message,
        requestId,
        query: req.query
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[252]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get deduction types',
        error: error.message,
        requestId
      });
    }
  }
  async updateDeductionType(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[34]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[253]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[254]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[255]++, req.params);
      const deductionType =
      /* istanbul ignore next */
      (cov_hzsouck27().s[256]++, await payrollService_1.payrollService.updateDeductionType(id, req.body));
      /* istanbul ignore next */
      cov_hzsouck27().s[257]++;
      if (!deductionType) {
        /* istanbul ignore next */
        cov_hzsouck27().b[47][0]++;
        cov_hzsouck27().s[258]++;
        res.status(404).json({
          success: false,
          message: 'Deduction type not found',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[259]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[47][1]++;
      }
      cov_hzsouck27().s[260]++;
      res.status(200).json({
        success: true,
        message: 'Deduction type updated successfully',
        data: deductionType,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[261]++;
      logger_1.default.error('Error updating deduction type', {
        error: error.message,
        requestId,
        params: req.params,
        body: req.body
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[262]++;
      res.status(500).json({
        success: false,
        message: 'Failed to update deduction type',
        error: error.message,
        requestId
      });
    }
  }
  async deleteDeductionType(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[35]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[263]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[264]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[265]++, req.params);
      const deleted =
      /* istanbul ignore next */
      (cov_hzsouck27().s[266]++, await payrollService_1.payrollService.deleteDeductionType(id));
      /* istanbul ignore next */
      cov_hzsouck27().s[267]++;
      if (!deleted) {
        /* istanbul ignore next */
        cov_hzsouck27().b[48][0]++;
        cov_hzsouck27().s[268]++;
        res.status(404).json({
          success: false,
          message: 'Deduction type not found',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[269]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[48][1]++;
      }
      cov_hzsouck27().s[270]++;
      res.status(200).json({
        success: true,
        message: 'Deduction type deleted successfully',
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[271]++;
      logger_1.default.error('Error deleting deduction type', {
        error: error.message,
        requestId,
        params: req.params
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[272]++;
      res.status(500).json({
        success: false,
        message: 'Failed to delete deduction type',
        error: error.message,
        requestId
      });
    }
  }
  // New endpoints for benefit types management
  async createBenefitType(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[36]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[273]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[274]++;
    try {
      const benefitType =
      /* istanbul ignore next */
      (cov_hzsouck27().s[275]++, await payrollService_1.payrollService.createBenefitType(req.body));
      /* istanbul ignore next */
      cov_hzsouck27().s[276]++;
      res.status(201).json({
        success: true,
        message: 'Benefit type created successfully',
        data: benefitType,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[277]++;
      logger_1.default.error('Error creating benefit type', {
        error: error.message,
        requestId,
        body: req.body
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[278]++;
      res.status(500).json({
        success: false,
        message: 'Failed to create benefit type',
        error: error.message,
        requestId
      });
    }
  }
  async getBenefitTypes(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[37]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[279]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[280]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_hzsouck27().s[281]++, await payrollService_1.payrollService.getBenefitTypes(req.query));
      /* istanbul ignore next */
      cov_hzsouck27().s[282]++;
      res.status(200).json({
        success: true,
        message: 'Benefit types retrieved successfully',
        data: result,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[283]++;
      logger_1.default.error('Error getting benefit types', {
        error: error.message,
        requestId,
        query: req.query
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[284]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get benefit types',
        error: error.message,
        requestId
      });
    }
  }
  async updateBenefitType(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[38]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[285]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[286]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[287]++, req.params);
      const updateData =
      /* istanbul ignore next */
      (cov_hzsouck27().s[288]++, req.body);
      const benefitType =
      /* istanbul ignore next */
      (cov_hzsouck27().s[289]++, await payrollService_1.payrollService.updateBenefitType(id, updateData));
      /* istanbul ignore next */
      cov_hzsouck27().s[290]++;
      if (!benefitType) {
        /* istanbul ignore next */
        cov_hzsouck27().b[49][0]++;
        cov_hzsouck27().s[291]++;
        res.status(404).json({
          success: false,
          message: 'Benefit type not found',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[292]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[49][1]++;
      }
      cov_hzsouck27().s[293]++;
      res.json({
        success: true,
        message: 'Benefit type updated successfully',
        data: benefitType,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[294]++;
      logger_1.default.error('Error updating benefit type', {
        error: error.message,
        requestId,
        params: req.params,
        body: req.body
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[295]++;
      res.status(500).json({
        success: false,
        message: 'Failed to update benefit type',
        error: error.message,
        requestId
      });
    }
  }
  async deleteBenefitType(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[39]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[296]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[297]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[298]++, req.params);
      const deleted =
      /* istanbul ignore next */
      (cov_hzsouck27().s[299]++, await payrollService_1.payrollService.deleteBenefitType(id));
      /* istanbul ignore next */
      cov_hzsouck27().s[300]++;
      if (!deleted) {
        /* istanbul ignore next */
        cov_hzsouck27().b[50][0]++;
        cov_hzsouck27().s[301]++;
        res.status(404).json({
          success: false,
          message: 'Benefit type not found',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[302]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[50][1]++;
      }
      cov_hzsouck27().s[303]++;
      res.json({
        success: true,
        message: 'Benefit type deleted successfully',
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[304]++;
      logger_1.default.error('Error deleting benefit type', {
        error: error.message,
        requestId,
        params: req.params
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[305]++;
      res.status(500).json({
        success: false,
        message: 'Failed to delete benefit type',
        error: error.message,
        requestId
      });
    }
  }
  // New endpoints for employee deduction balances management
  async getEmployeeDeductionBalances(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[40]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[306]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[307]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_hzsouck27().s[308]++, await payrollService_1.payrollService.getEmployeeDeductionBalances(req.query));
      /* istanbul ignore next */
      cov_hzsouck27().s[309]++;
      res.status(200).json({
        success: true,
        message: 'Employee deduction balances retrieved successfully',
        data: result,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[310]++;
      logger_1.default.error('Error getting employee deduction balances', {
        error: error.message,
        requestId,
        query: req.query
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[311]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get employee deduction balances',
        error: error.message,
        requestId
      });
    }
  }
  async createEmployeeDeductionBalance(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[41]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[312]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[313]++;
    try {
      const balance =
      /* istanbul ignore next */
      (cov_hzsouck27().s[314]++, await payrollService_1.payrollService.createEmployeeDeductionBalance(req.body));
      /* istanbul ignore next */
      cov_hzsouck27().s[315]++;
      res.status(201).json({
        success: true,
        message: 'Employee deduction balance created successfully',
        data: balance,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[316]++;
      logger_1.default.error('Error creating employee deduction balance', {
        error: error.message,
        requestId,
        body: req.body
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[317]++;
      res.status(500).json({
        success: false,
        message: 'Failed to create employee deduction balance',
        error: error.message,
        requestId
      });
    }
  }
  // CSV upload endpoint for employee deduction balances
  async uploadEmployeeDeductionBalances(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[42]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[318]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[319]++;
    try {
      // Assuming CSV data is parsed and passed in req.body as an array
      const csvData =
      /* istanbul ignore next */
      (cov_hzsouck27().s[320]++, req.body);
      /* istanbul ignore next */
      cov_hzsouck27().s[321]++;
      if (!Array.isArray(csvData)) {
        /* istanbul ignore next */
        cov_hzsouck27().b[51][0]++;
        cov_hzsouck27().s[322]++;
        res.status(400).json({
          success: false,
          message: 'Invalid CSV data format',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[323]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[51][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_hzsouck27().s[324]++, await payrollService_1.payrollService.uploadEmployeeDeductionBalances(csvData));
      /* istanbul ignore next */
      cov_hzsouck27().s[325]++;
      res.status(200).json({
        success: true,
        message: 'Employee deduction balances uploaded successfully',
        data: {
          successCount: result.success,
          errorCount: result.errors.length,
          errors: result.errors
        },
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[326]++;
      logger_1.default.error('Error uploading employee deduction balances', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[327]++;
      res.status(500).json({
        success: false,
        message: 'Failed to upload employee deduction balances',
        error: error.message,
        requestId
      });
    }
  }
  // Delete employee deduction balance
  async deleteEmployeeDeductionBalance(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[43]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[328]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[329]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[330]++, req.params);
      /* istanbul ignore next */
      cov_hzsouck27().s[331]++;
      if (!id) {
        /* istanbul ignore next */
        cov_hzsouck27().b[52][0]++;
        cov_hzsouck27().s[332]++;
        res.status(400).json({
          success: false,
          message: 'Employee deduction balance ID is required',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[333]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[52][1]++;
      }
      const deleted =
      /* istanbul ignore next */
      (cov_hzsouck27().s[334]++, await payrollService_1.payrollService.deleteEmployeeDeductionBalance(id));
      /* istanbul ignore next */
      cov_hzsouck27().s[335]++;
      if (!deleted) {
        /* istanbul ignore next */
        cov_hzsouck27().b[53][0]++;
        cov_hzsouck27().s[336]++;
        res.status(404).json({
          success: false,
          message: 'Employee deduction balance not found',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[337]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[53][1]++;
      }
      cov_hzsouck27().s[338]++;
      res.status(200).json({
        success: true,
        message: 'Employee deduction balance deleted successfully',
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[339]++;
      logger_1.default.error('Error deleting employee deduction balance', {
        error: error.message,
        requestId,
        id: req.params.id
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[340]++;
      res.status(500).json({
        success: false,
        message: 'Failed to delete employee deduction balance',
        error: error.message,
        requestId
      });
    }
  }
  // CSV upload endpoint for employee benefits
  async uploadEmployeeBenefits(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[44]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[341]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[342]++;
    try {
      // Assuming CSV data is parsed and passed in req.body as an array
      const csvData =
      /* istanbul ignore next */
      (cov_hzsouck27().s[343]++, req.body);
      /* istanbul ignore next */
      cov_hzsouck27().s[344]++;
      if (!Array.isArray(csvData)) {
        /* istanbul ignore next */
        cov_hzsouck27().b[54][0]++;
        cov_hzsouck27().s[345]++;
        res.status(400).json({
          success: false,
          message: 'Invalid CSV data format',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[346]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[54][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_hzsouck27().s[347]++, await payrollService_1.payrollService.uploadEmployeeBenefits(csvData));
      /* istanbul ignore next */
      cov_hzsouck27().s[348]++;
      res.status(200).json({
        success: true,
        message: 'Employee benefits uploaded successfully',
        data: {
          successCount: result.success,
          errorCount: result.errors.length,
          errors: result.errors
        },
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[349]++;
      logger_1.default.error('Error uploading employee benefits', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[350]++;
      res.status(500).json({
        success: false,
        message: 'Failed to upload employee benefits',
        error: error.message,
        requestId
      });
    }
  }
  // New endpoints for employee benefits management
  async getEmployeeBenefits(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[45]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[351]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[352]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_hzsouck27().s[353]++, await payrollService_1.payrollService.getEmployeeBenefits(req.query));
      /* istanbul ignore next */
      cov_hzsouck27().s[354]++;
      res.status(200).json({
        success: true,
        message: 'Employee benefits retrieved successfully',
        data: result,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[355]++;
      logger_1.default.error('Error getting employee benefits', {
        error: error.message,
        requestId,
        query: req.query
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[356]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get employee benefits',
        error: error.message,
        requestId
      });
    }
  }
  async createEmployeeBenefit(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[46]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[357]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[358]++;
    try {
      const benefit =
      /* istanbul ignore next */
      (cov_hzsouck27().s[359]++, await payrollService_1.payrollService.createEmployeeBenefit(req.body));
      /* istanbul ignore next */
      cov_hzsouck27().s[360]++;
      res.status(201).json({
        success: true,
        message: 'Employee benefit created successfully',
        data: benefit,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[361]++;
      logger_1.default.error('Error creating employee benefit', {
        error: error.message,
        requestId,
        body: req.body
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[362]++;
      res.status(500).json({
        success: false,
        message: 'Failed to create employee benefit',
        error: error.message,
        requestId
      });
    }
  }
  async updateEmployeeBenefit(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[47]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[363]++, (0, express_1.getRequestId)(req));
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_hzsouck27().s[364]++, req.params);
    /* istanbul ignore next */
    cov_hzsouck27().s[365]++;
    try {
      const benefit =
      /* istanbul ignore next */
      (cov_hzsouck27().s[366]++, await payrollService_1.payrollService.updateEmployeeBenefit(id, req.body));
      /* istanbul ignore next */
      cov_hzsouck27().s[367]++;
      res.status(200).json({
        success: true,
        message: 'Employee benefit updated successfully',
        data: benefit,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[368]++;
      logger_1.default.error('Error updating employee benefit', {
        error: error.message,
        requestId,
        id,
        body: req.body
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[369]++;
      res.status(500).json({
        success: false,
        message: 'Failed to update employee benefit',
        error: error.message,
        requestId
      });
    }
  }
  async deleteEmployeeBenefit(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[48]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[370]++, (0, express_1.getRequestId)(req));
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_hzsouck27().s[371]++, req.params);
    /* istanbul ignore next */
    cov_hzsouck27().s[372]++;
    try {
      const deleted =
      /* istanbul ignore next */
      (cov_hzsouck27().s[373]++, await payrollService_1.payrollService.deleteEmployeeBenefit(id));
      /* istanbul ignore next */
      cov_hzsouck27().s[374]++;
      if (deleted) {
        /* istanbul ignore next */
        cov_hzsouck27().b[55][0]++;
        cov_hzsouck27().s[375]++;
        res.status(200).json({
          success: true,
          message: 'Employee benefit deleted successfully',
          requestId
        });
      } else {
        /* istanbul ignore next */
        cov_hzsouck27().b[55][1]++;
        cov_hzsouck27().s[376]++;
        res.status(404).json({
          success: false,
          message: 'Employee benefit not found',
          requestId
        });
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[377]++;
      logger_1.default.error('Error deleting employee benefit', {
        error: error.message,
        requestId,
        id
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[378]++;
      res.status(500).json({
        success: false,
        message: 'Failed to delete employee benefit',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route POST /api/v1/payroll/initialize-periods
   * @desc Initialize payroll periods for the current year
   * @access HR Admin
   */
  async initializePayrollPeriods(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[49]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[379]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[380]++;
    try {
      /* istanbul ignore next */
      cov_hzsouck27().s[381]++;
      await autoPayrollService_1.autoPayrollService.initializePayrollPeriods();
      /* istanbul ignore next */
      cov_hzsouck27().s[382]++;
      res.json({
        success: true,
        message: 'Payroll periods initialized successfully for the current year',
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[383]++;
      logger_1.default.error('Error initializing payroll periods', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[384]++;
      res.status(500).json({
        success: false,
        message: 'Failed to initialize payroll periods',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route POST /api/v1/payroll/generate-current-month
   * @desc Generate payroll period for the current month only
   * @access HR Admin
   */
  async generateCurrentMonthPeriod(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[50]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[385]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[386]++;
    try {
      /* istanbul ignore next */
      cov_hzsouck27().s[387]++;
      await autoPayrollService_1.autoPayrollService.generateCurrentMonthPeriod();
      /* istanbul ignore next */
      cov_hzsouck27().s[388]++;
      res.json({
        success: true,
        message: 'Current month payroll period generated successfully',
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[389]++;
      logger_1.default.error('Error generating current month payroll period', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[390]++;
      res.status(500).json({
        success: false,
        message: 'Failed to generate current month payroll period',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route GET /api/v1/payroll/expected-hours
   * @desc Get expected monthly hours from system settings
   * @access HR Admin
   */
  async getExpectedMonthlyHours(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[51]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[391]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[392]++;
    try {
      const expectedHours =
      /* istanbul ignore next */
      (cov_hzsouck27().s[393]++, await autoPayrollService_1.autoPayrollService.getExpectedMonthlyHours());
      /* istanbul ignore next */
      cov_hzsouck27().s[394]++;
      res.json({
        success: true,
        message: 'Expected monthly hours retrieved successfully',
        data: {
          expectedHours
        },
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[395]++;
      logger_1.default.error('Error getting expected monthly hours', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[396]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get expected monthly hours',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route GET /api/v1/payroll/paystubs/department/:departmentId/period/:periodId
   * @desc Generate PDF paystubs for a department's employees for a specific period
   * @access HR Admin
   */
  async generateDepartmentPaystubs(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[52]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[397]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[398]++;
    try {
      const {
        departmentId,
        periodId
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[399]++, req.params);
      // Get payroll records for the department and period
      const records =
      /* istanbul ignore next */
      (cov_hzsouck27().s[400]++, await payrollService_1.payrollService.getPayrollRecordsByDepartmentAndPeriod(departmentId, periodId));
      /* istanbul ignore next */
      cov_hzsouck27().s[401]++;
      if (
      /* istanbul ignore next */
      (cov_hzsouck27().b[57][0]++, !records) ||
      /* istanbul ignore next */
      (cov_hzsouck27().b[57][1]++, records.length === 0)) {
        /* istanbul ignore next */
        cov_hzsouck27().b[56][0]++;
        cov_hzsouck27().s[402]++;
        res.status(404).json({
          success: false,
          message: 'No payroll records found for this department and period',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[403]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[56][1]++;
      }
      // Generate PDF paystubs using the existing method
      const pdfBuffer =
      /* istanbul ignore next */
      (cov_hzsouck27().s[404]++, await payrollService_1.payrollService.exportPeriodPaystubsPDF(periodId));
      // Set response headers for PDF download
      /* istanbul ignore next */
      cov_hzsouck27().s[405]++;
      res.setHeader('Content-Type', 'application/pdf');
      /* istanbul ignore next */
      cov_hzsouck27().s[406]++;
      res.setHeader('Content-Disposition', `attachment; filename="paystubs-${departmentId}-${periodId}.pdf"`);
      /* istanbul ignore next */
      cov_hzsouck27().s[407]++;
      res.setHeader('Content-Length', pdfBuffer.length);
      /* istanbul ignore next */
      cov_hzsouck27().s[408]++;
      res.send(pdfBuffer);
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[409]++;
      logger_1.default.error('Error generating department paystubs', {
        error: error.message,
        requestId,
        params: req.params
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[410]++;
      res.status(500).json({
        success: false,
        message: 'Failed to generate paystubs',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Export all employee paystubs for a period as PDF
   */
  async exportPeriodPaystubsPDF(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[53]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[411]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[412]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[413]++, req.params);
      /* istanbul ignore next */
      cov_hzsouck27().s[414]++;
      if (!id) {
        /* istanbul ignore next */
        cov_hzsouck27().b[58][0]++;
        cov_hzsouck27().s[415]++;
        res.status(400).json({
          success: false,
          message: 'Period ID is required',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[416]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[58][1]++;
      }
      const pdfBuffer =
      /* istanbul ignore next */
      (cov_hzsouck27().s[417]++, await payrollService_1.payrollService.exportPeriodPaystubsPDF(id));
      // Set headers for PDF download
      /* istanbul ignore next */
      cov_hzsouck27().s[418]++;
      res.setHeader('Content-Type', 'application/pdf');
      /* istanbul ignore next */
      cov_hzsouck27().s[419]++;
      res.setHeader('Content-Disposition', `attachment; filename="paystubs-period-${id}.pdf"`);
      /* istanbul ignore next */
      cov_hzsouck27().s[420]++;
      res.setHeader('Content-Length', pdfBuffer.length);
      /* istanbul ignore next */
      cov_hzsouck27().s[421]++;
      res.send(pdfBuffer);
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[422]++;
      logger_1.default.error('Error exporting period paystubs PDF', {
        error: error.message,
        requestId,
        params: req.params
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[423]++;
      res.status(500).json({
        success: false,
        message: 'Failed to export period paystubs PDF',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * @route GET /api/v1/payroll/periods/:id/export/paystubs/department/pdf
   * @desc Export department employee paystubs for a period as PDF
   * @access Department Head
   */
  async exportDepartmentPaystubsPDF(req, res) {
    /* istanbul ignore next */
    cov_hzsouck27().f[54]++;
    const requestId =
    /* istanbul ignore next */
    (cov_hzsouck27().s[424]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_hzsouck27().s[425]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_hzsouck27().s[426]++, req.params);
      const userId =
      /* istanbul ignore next */
      (cov_hzsouck27().s[427]++, req.user?.userId);
      /* istanbul ignore next */
      cov_hzsouck27().s[428]++;
      if (!id) {
        /* istanbul ignore next */
        cov_hzsouck27().b[59][0]++;
        cov_hzsouck27().s[429]++;
        res.status(400).json({
          success: false,
          message: 'Period ID is required',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[430]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[59][1]++;
      }
      cov_hzsouck27().s[431]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_hzsouck27().b[60][0]++;
        cov_hzsouck27().s[432]++;
        res.status(401).json({
          success: false,
          message: 'User authentication required',
          requestId
        });
        /* istanbul ignore next */
        cov_hzsouck27().s[433]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_hzsouck27().b[60][1]++;
      }
      const pdfBuffer =
      /* istanbul ignore next */
      (cov_hzsouck27().s[434]++, await payrollService_1.payrollService.exportDepartmentPaystubsPDF(id, userId));
      // Set headers for PDF download
      /* istanbul ignore next */
      cov_hzsouck27().s[435]++;
      res.setHeader('Content-Type', 'application/pdf');
      /* istanbul ignore next */
      cov_hzsouck27().s[436]++;
      res.setHeader('Content-Disposition', `attachment; filename="department-paystubs-period-${id}.pdf"`);
      /* istanbul ignore next */
      cov_hzsouck27().s[437]++;
      res.setHeader('Content-Length', pdfBuffer.length);
      /* istanbul ignore next */
      cov_hzsouck27().s[438]++;
      res.send(pdfBuffer);
    } catch (error) {
      /* istanbul ignore next */
      cov_hzsouck27().s[439]++;
      logger_1.default.error('Error exporting department paystubs PDF', {
        error: error.message,
        requestId,
        params: req.params
      });
      /* istanbul ignore next */
      cov_hzsouck27().s[440]++;
      res.status(500).json({
        success: false,
        message: 'Failed to export department paystubs PDF',
        error: error.message,
        requestId
      });
    }
  }
}
/* istanbul ignore next */
cov_hzsouck27().s[441]++;
exports.PayrollController = PayrollController;
/* istanbul ignore next */
cov_hzsouck27().s[442]++;
exports.payrollController = new PayrollController();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,