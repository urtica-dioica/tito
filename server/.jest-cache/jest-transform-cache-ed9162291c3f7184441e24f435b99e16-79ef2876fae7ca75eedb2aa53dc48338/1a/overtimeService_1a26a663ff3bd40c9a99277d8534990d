bb78b2ec27bff59edfee529ce1f35b99
"use strict";

/* istanbul ignore next */
function cov_2fp2swidx1() {
  var path = "/home/kim/tito/server/src/services/attendance/overtimeService.ts";
  var hash = "3b287d4f6fead3cb0a6d51201cf8c75f0db060ba";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/attendance/overtimeService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 59
        }
      },
      "4": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 7,
          column: 76
        }
      },
      "5": {
        start: {
          line: 8,
          column: 27
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "6": {
        start: {
          line: 9,
          column: 28
        },
        end: {
          line: 9,
          column: 80
        }
      },
      "7": {
        start: {
          line: 10,
          column: 23
        },
        end: {
          line: 10,
          column: 65
        }
      },
      "8": {
        start: {
          line: 11,
          column: 19
        },
        end: {
          line: 11,
          column: 54
        }
      },
      "9": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 12,
          column: 51
        }
      },
      "10": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 63
        }
      },
      "11": {
        start: {
          line: 19,
          column: 88
        },
        end: {
          line: 19,
          column: 92
        }
      },
      "12": {
        start: {
          line: 21,
          column: 25
        },
        end: {
          line: 21,
          column: 76
        }
      },
      "13": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "14": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 50
        }
      },
      "15": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "16": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 54
        }
      },
      "17": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 29,
          column: 32
        }
      },
      "18": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 35
        }
      },
      "19": {
        start: {
          line: 31,
          column: 29
        },
        end: {
          line: 31,
          column: 50
        }
      },
      "20": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 42
        }
      },
      "21": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "22": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 70
        }
      },
      "23": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "24": {
        start: {
          line: 41,
          column: 30
        },
        end: {
          line: 41,
          column: 62
        }
      },
      "25": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 42,
          column: 43
        }
      },
      "26": {
        start: {
          line: 43,
          column: 28
        },
        end: {
          line: 43,
          column: 45
        }
      },
      "27": {
        start: {
          line: 44,
          column: 28
        },
        end: {
          line: 44,
          column: 45
        }
      },
      "28": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "29": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 61
        }
      },
      "30": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 144
        }
      },
      "31": {
        start: {
          line: 51,
          column: 13
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "32": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 198
        }
      },
      "33": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 57
        }
      },
      "34": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "35": {
        start: {
          line: 60,
          column: 30
        },
        end: {
          line: 60,
          column: 60
        }
      },
      "36": {
        start: {
          line: 61,
          column: 26
        },
        end: {
          line: 61,
          column: 43
        }
      },
      "37": {
        start: {
          line: 62,
          column: 28
        },
        end: {
          line: 62,
          column: 45
        }
      },
      "38": {
        start: {
          line: 63,
          column: 28
        },
        end: {
          line: 63,
          column: 45
        }
      },
      "39": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "40": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 59
        }
      },
      "41": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 142
        }
      },
      "42": {
        start: {
          line: 70,
          column: 13
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "43": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 190
        }
      },
      "44": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 55
        }
      },
      "45": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "46": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 66
        }
      },
      "47": {
        start: {
          line: 82,
          column: 26
        },
        end: {
          line: 82,
          column: 64
        }
      },
      "48": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 83,
          column: 60
        }
      },
      "49": {
        start: {
          line: 84,
          column: 32
        },
        end: {
          line: 84,
          column: 92
        }
      },
      "50": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "51": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 75
        }
      },
      "52": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "53": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 70
        }
      },
      "54": {
        start: {
          line: 93,
          column: 34
        },
        end: {
          line: 93,
          column: 72
        }
      },
      "55": {
        start: {
          line: 94,
          column: 32
        },
        end: {
          line: 94,
          column: 68
        }
      },
      "56": {
        start: {
          line: 95,
          column: 35
        },
        end: {
          line: 95,
          column: 128
        }
      },
      "57": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "58": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 87
        }
      },
      "59": {
        start: {
          line: 100,
          column: 34
        },
        end: {
          line: 100,
          column: 46
        }
      },
      "60": {
        start: {
          line: 101,
          column: 32
        },
        end: {
          line: 101,
          column: 42
        }
      },
      "61": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 112,
          column: 11
        }
      },
      "62": {
        start: {
          line: 113,
          column: 28
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "63": {
        start: {
          line: 121,
          column: 24
        },
        end: {
          line: 121,
          column: 103
        }
      },
      "64": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "65": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 23
        }
      },
      "66": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 84
        }
      },
      "67": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 92
        }
      },
      "68": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 89
        }
      },
      "69": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 118
        }
      },
      "70": {
        start: {
          line: 162,
          column: 62
        },
        end: {
          line: 162,
          column: 66
        }
      },
      "71": {
        start: {
          line: 164,
          column: 24
        },
        end: {
          line: 164,
          column: 88
        }
      },
      "72": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "73": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 58
        }
      },
      "74": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "75": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 66
        }
      },
      "76": {
        start: {
          line: 172,
          column: 27
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "77": {
        start: {
          line: 177,
          column: 31
        },
        end: {
          line: 177,
          column: 120
        }
      },
      "78": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "79": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 65
        }
      },
      "80": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "81": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 61
        }
      },
      "82": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 195,
          column: 11
        }
      },
      "83": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 30
        }
      },
      "84": {
        start: {
          line: 202,
          column: 80
        },
        end: {
          line: 202,
          column: 87
        }
      },
      "85": {
        start: {
          line: 204,
          column: 31
        },
        end: {
          line: 204,
          column: 124
        }
      },
      "86": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "87": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 210,
          column: 15
        }
      },
      "88": {
        start: {
          line: 213,
          column: 31
        },
        end: {
          line: 213,
          column: 98
        }
      },
      "89": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 219,
          column: 11
        }
      },
      "90": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 84
        }
      },
      "91": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 229,
          column: 11
        }
      },
      "92": {
        start: {
          line: 236,
          column: 22
        },
        end: {
          line: 240,
          column: 5
        }
      },
      "93": {
        start: {
          line: 241,
          column: 23
        },
        end: {
          line: 241,
          column: 67
        }
      },
      "94": {
        start: {
          line: 242,
          column: 37
        },
        end: {
          line: 242,
          column: 110
        }
      },
      "95": {
        start: {
          line: 243,
          column: 33
        },
        end: {
          line: 243,
          column: 69
        }
      },
      "96": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 102
        }
      },
      "97": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 251,
          column: 11
        }
      },
      "98": {
        start: {
          line: 257,
          column: 22
        },
        end: {
          line: 280,
          column: 5
        }
      },
      "99": {
        start: {
          line: 282,
          column: 29
        },
        end: {
          line: 282,
          column: 199
        }
      },
      "100": {
        start: {
          line: 283,
          column: 27
        },
        end: {
          line: 283,
          column: 191
        }
      },
      "101": {
        start: {
          line: 284,
          column: 23
        },
        end: {
          line: 284,
          column: 120
        }
      },
      "102": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 62
        }
      },
      "103": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 291,
          column: 110
        }
      },
      "104": {
        start: {
          line: 297,
          column: 24
        },
        end: {
          line: 297,
          column: 81
        }
      },
      "105": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "106": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 58
        }
      },
      "107": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "108": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 64
        }
      },
      "109": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 86
        }
      },
      "110": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 318,
          column: 11
        }
      },
      "111": {
        start: {
          line: 324,
          column: 23
        },
        end: {
          line: 324,
          column: 25
        }
      },
      "112": {
        start: {
          line: 326,
          column: 25
        },
        end: {
          line: 326,
          column: 81
        }
      },
      "113": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "114": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 46
        }
      },
      "115": {
        start: {
          line: 330,
          column: 13
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "116": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 50
        }
      },
      "117": {
        start: {
          line: 334,
          column: 22
        },
        end: {
          line: 334,
          column: 32
        }
      },
      "118": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 335,
          column: 35
        }
      },
      "119": {
        start: {
          line: 336,
          column: 29
        },
        end: {
          line: 336,
          column: 55
        }
      },
      "120": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 337,
          column: 42
        }
      },
      "121": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 340,
          column: 9
        }
      },
      "122": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 66
        }
      },
      "123": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 364,
          column: 9
        }
      },
      "124": {
        start: {
          line: 346,
          column: 30
        },
        end: {
          line: 346,
          column: 67
        }
      },
      "125": {
        start: {
          line: 347,
          column: 26
        },
        end: {
          line: 347,
          column: 43
        }
      },
      "126": {
        start: {
          line: 348,
          column: 28
        },
        end: {
          line: 348,
          column: 45
        }
      },
      "127": {
        start: {
          line: 349,
          column: 28
        },
        end: {
          line: 349,
          column: 45
        }
      },
      "128": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 354,
          column: 13
        }
      },
      "129": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 57
        }
      },
      "130": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 353,
          column: 50
        }
      },
      "131": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 144
        }
      },
      "132": {
        start: {
          line: 357,
          column: 13
        },
        end: {
          line: 364,
          column: 9
        }
      },
      "133": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 359,
          column: 213
        }
      },
      "134": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 53
        }
      },
      "135": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 46
        }
      },
      "136": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 385,
          column: 9
        }
      },
      "137": {
        start: {
          line: 367,
          column: 30
        },
        end: {
          line: 367,
          column: 65
        }
      },
      "138": {
        start: {
          line: 368,
          column: 26
        },
        end: {
          line: 368,
          column: 43
        }
      },
      "139": {
        start: {
          line: 369,
          column: 28
        },
        end: {
          line: 369,
          column: 45
        }
      },
      "140": {
        start: {
          line: 370,
          column: 28
        },
        end: {
          line: 370,
          column: 45
        }
      },
      "141": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 375,
          column: 13
        }
      },
      "142": {
        start: {
          line: 373,
          column: 16
        },
        end: {
          line: 373,
          column: 55
        }
      },
      "143": {
        start: {
          line: 374,
          column: 16
        },
        end: {
          line: 374,
          column: 50
        }
      },
      "144": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 142
        }
      },
      "145": {
        start: {
          line: 378,
          column: 13
        },
        end: {
          line: 385,
          column: 9
        }
      },
      "146": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 205
        }
      },
      "147": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 383,
          column: 51
        }
      },
      "148": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 384,
          column: 46
        }
      },
      "149": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 389,
          column: 9
        }
      },
      "150": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 388,
          column: 62
        }
      },
      "151": {
        start: {
          line: 391,
          column: 26
        },
        end: {
          line: 391,
          column: 64
        }
      },
      "152": {
        start: {
          line: 392,
          column: 24
        },
        end: {
          line: 392,
          column: 60
        }
      },
      "153": {
        start: {
          line: 393,
          column: 32
        },
        end: {
          line: 393,
          column: 92
        }
      },
      "154": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 396,
          column: 9
        }
      },
      "155": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 71
        }
      },
      "156": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 399,
          column: 9
        }
      },
      "157": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 66
        }
      },
      "158": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 403,
          column: 9
        }
      },
      "159": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 70
        }
      },
      "160": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 413,
          column: 9
        }
      },
      "161": {
        start: {
          line: 407,
          column: 38
        },
        end: {
          line: 407,
          column: 76
        }
      },
      "162": {
        start: {
          line: 408,
          column: 36
        },
        end: {
          line: 408,
          column: 72
        }
      },
      "163": {
        start: {
          line: 409,
          column: 39
        },
        end: {
          line: 409,
          column: 142
        }
      },
      "164": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 412,
          column: 13
        }
      },
      "165": {
        start: {
          line: 411,
          column: 16
        },
        end: {
          line: 411,
          column: 87
        }
      },
      "166": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 417,
          column: 10
        }
      },
      "167": {
        start: {
          line: 423,
          column: 22
        },
        end: {
          line: 423,
          column: 61
        }
      },
      "168": {
        start: {
          line: 425,
          column: 22
        },
        end: {
          line: 429,
          column: 5
        }
      },
      "169": {
        start: {
          line: 430,
          column: 23
        },
        end: {
          line: 430,
          column: 67
        }
      },
      "170": {
        start: {
          line: 431,
          column: 37
        },
        end: {
          line: 431,
          column: 110
        }
      },
      "171": {
        start: {
          line: 432,
          column: 33
        },
        end: {
          line: 432,
          column: 75
        }
      },
      "172": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 439,
          column: 10
        }
      },
      "173": {
        start: {
          line: 442,
          column: 0
        },
        end: {
          line: 442,
          column: 42
        }
      },
      "174": {
        start: {
          line: 443,
          column: 0
        },
        end: {
          line: 443,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 38
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 137,
            column: 33
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 137
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 143,
            column: 42
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 143
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 44
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 149
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 68
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 155
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        loc: {
          start: {
            line: 161,
            column: 39
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 161
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 41
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 201
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 68
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 234
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 77
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 256
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 290,
            column: 5
          }
        },
        loc: {
          start: {
            line: 290,
            column: 53
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 290
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 36
          },
          end: {
            line: 305,
            column: 5
          }
        },
        line: 296
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 92
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 309
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        },
        loc: {
          start: {
            line: 323,
            column: 40
          },
          end: {
            line: 418,
            column: 5
          }
        },
        line: 323
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 422,
            column: 4
          },
          end: {
            line: 422,
            column: 5
          }
        },
        loc: {
          start: {
            line: 422,
            column: 71
          },
          end: {
            line: 440,
            column: 5
          }
        },
        line: 422
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "6": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: 51,
            column: 13
          },
          end: {
            line: 57,
            column: 9
          }
        }],
        line: 39
      },
      "7": {
        loc: {
          start: {
            line: 42,
            column: 26
          },
          end: {
            line: 42,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 26
          },
          end: {
            line: 42,
            column: 38
          }
        }, {
          start: {
            line: 42,
            column: 42
          },
          end: {
            line: 42,
            column: 43
          }
        }],
        line: 42
      },
      "8": {
        loc: {
          start: {
            line: 43,
            column: 28
          },
          end: {
            line: 43,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 28
          },
          end: {
            line: 43,
            column: 40
          }
        }, {
          start: {
            line: 43,
            column: 44
          },
          end: {
            line: 43,
            column: 45
          }
        }],
        line: 43
      },
      "9": {
        loc: {
          start: {
            line: 44,
            column: 28
          },
          end: {
            line: 44,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 28
          },
          end: {
            line: 44,
            column: 40
          }
        }, {
          start: {
            line: 44,
            column: 44
          },
          end: {
            line: 44,
            column: 45
          }
        }],
        line: 44
      },
      "10": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "11": {
        loc: {
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 46,
            column: 153
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 46,
            column: 28
          }
        }, {
          start: {
            line: 46,
            column: 32
          },
          end: {
            line: 46,
            column: 46
          }
        }, {
          start: {
            line: 46,
            column: 50
          },
          end: {
            line: 46,
            column: 64
          }
        }, {
          start: {
            line: 46,
            column: 68
          },
          end: {
            line: 46,
            column: 77
          }
        }, {
          start: {
            line: 46,
            column: 81
          },
          end: {
            line: 46,
            column: 91
          }
        }, {
          start: {
            line: 46,
            column: 95
          },
          end: {
            line: 46,
            column: 106
          }
        }, {
          start: {
            line: 46,
            column: 110
          },
          end: {
            line: 46,
            column: 122
          }
        }, {
          start: {
            line: 46,
            column: 126
          },
          end: {
            line: 46,
            column: 137
          }
        }, {
          start: {
            line: 46,
            column: 141
          },
          end: {
            line: 46,
            column: 153
          }
        }],
        line: 46
      },
      "12": {
        loc: {
          start: {
            line: 51,
            column: 13
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 13
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: 55,
            column: 13
          },
          end: {
            line: 57,
            column: 9
          }
        }],
        line: 51
      },
      "13": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: 70,
            column: 13
          },
          end: {
            line: 76,
            column: 9
          }
        }],
        line: 58
      },
      "14": {
        loc: {
          start: {
            line: 61,
            column: 26
          },
          end: {
            line: 61,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 26
          },
          end: {
            line: 61,
            column: 38
          }
        }, {
          start: {
            line: 61,
            column: 42
          },
          end: {
            line: 61,
            column: 43
          }
        }],
        line: 61
      },
      "15": {
        loc: {
          start: {
            line: 62,
            column: 28
          },
          end: {
            line: 62,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 28
          },
          end: {
            line: 62,
            column: 40
          }
        }, {
          start: {
            line: 62,
            column: 44
          },
          end: {
            line: 62,
            column: 45
          }
        }],
        line: 62
      },
      "16": {
        loc: {
          start: {
            line: 63,
            column: 28
          },
          end: {
            line: 63,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 28
          },
          end: {
            line: 63,
            column: 40
          }
        }, {
          start: {
            line: 63,
            column: 44
          },
          end: {
            line: 63,
            column: 45
          }
        }],
        line: 63
      },
      "17": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "18": {
        loc: {
          start: {
            line: 65,
            column: 16
          },
          end: {
            line: 65,
            column: 153
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 16
          },
          end: {
            line: 65,
            column: 28
          }
        }, {
          start: {
            line: 65,
            column: 32
          },
          end: {
            line: 65,
            column: 46
          }
        }, {
          start: {
            line: 65,
            column: 50
          },
          end: {
            line: 65,
            column: 64
          }
        }, {
          start: {
            line: 65,
            column: 68
          },
          end: {
            line: 65,
            column: 77
          }
        }, {
          start: {
            line: 65,
            column: 81
          },
          end: {
            line: 65,
            column: 91
          }
        }, {
          start: {
            line: 65,
            column: 95
          },
          end: {
            line: 65,
            column: 106
          }
        }, {
          start: {
            line: 65,
            column: 110
          },
          end: {
            line: 65,
            column: 122
          }
        }, {
          start: {
            line: 65,
            column: 126
          },
          end: {
            line: 65,
            column: 137
          }
        }, {
          start: {
            line: 65,
            column: 141
          },
          end: {
            line: 65,
            column: 153
          }
        }],
        line: 65
      },
      "19": {
        loc: {
          start: {
            line: 70,
            column: 13
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 13
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: 74,
            column: 13
          },
          end: {
            line: 76,
            column: 9
          }
        }],
        line: 70
      },
      "20": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "21": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "22": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "23": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "24": {
        loc: {
          start: {
            line: 149,
            column: 31
          },
          end: {
            line: 149,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 149,
            column: 40
          },
          end: {
            line: 149,
            column: 42
          }
        }],
        line: 149
      },
      "25": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "26": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "27": {
        loc: {
          start: {
            line: 173,
            column: 20
          },
          end: {
            line: 173,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 31
          },
          end: {
            line: 173,
            column: 41
          }
        }, {
          start: {
            line: 173,
            column: 44
          },
          end: {
            line: 173,
            column: 54
          }
        }],
        line: 173
      },
      "28": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "29": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "30": {
        loc: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "31": {
        loc: {
          start: {
            line: 242,
            column: 37
          },
          end: {
            line: 242,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 242,
            column: 62
          },
          end: {
            line: 242,
            column: 102
          }
        }, {
          start: {
            line: 242,
            column: 105
          },
          end: {
            line: 242,
            column: 110
          }
        }],
        line: 242
      },
      "32": {
        loc: {
          start: {
            line: 285,
            column: 15
          },
          end: {
            line: 285,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 285,
            column: 40
          },
          end: {
            line: 285,
            column: 54
          }
        }, {
          start: {
            line: 285,
            column: 57
          },
          end: {
            line: 285,
            column: 61
          }
        }],
        line: 285
      },
      "33": {
        loc: {
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "34": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "35": {
        loc: {
          start: {
            line: 309,
            column: 70
          },
          end: {
            line: 309,
            column: 78
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 309,
            column: 77
          },
          end: {
            line: 309,
            column: 78
          }
        }],
        line: 309
      },
      "36": {
        loc: {
          start: {
            line: 309,
            column: 80
          },
          end: {
            line: 309,
            column: 90
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 309,
            column: 88
          },
          end: {
            line: 309,
            column: 90
          }
        }],
        line: 309
      },
      "37": {
        loc: {
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        }, {
          start: {
            line: 330,
            column: 13
          },
          end: {
            line: 332,
            column: 9
          }
        }],
        line: 327
      },
      "38": {
        loc: {
          start: {
            line: 330,
            column: 13
          },
          end: {
            line: 332,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 13
          },
          end: {
            line: 332,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "39": {
        loc: {
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "40": {
        loc: {
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 364,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 364,
            column: 9
          }
        }, {
          start: {
            line: 357,
            column: 13
          },
          end: {
            line: 364,
            column: 9
          }
        }],
        line: 344
      },
      "41": {
        loc: {
          start: {
            line: 347,
            column: 26
          },
          end: {
            line: 347,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 26
          },
          end: {
            line: 347,
            column: 38
          }
        }, {
          start: {
            line: 347,
            column: 42
          },
          end: {
            line: 347,
            column: 43
          }
        }],
        line: 347
      },
      "42": {
        loc: {
          start: {
            line: 348,
            column: 28
          },
          end: {
            line: 348,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 28
          },
          end: {
            line: 348,
            column: 40
          }
        }, {
          start: {
            line: 348,
            column: 44
          },
          end: {
            line: 348,
            column: 45
          }
        }],
        line: 348
      },
      "43": {
        loc: {
          start: {
            line: 349,
            column: 28
          },
          end: {
            line: 349,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 349,
            column: 28
          },
          end: {
            line: 349,
            column: 40
          }
        }, {
          start: {
            line: 349,
            column: 44
          },
          end: {
            line: 349,
            column: 45
          }
        }],
        line: 349
      },
      "44": {
        loc: {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 354,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 354,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "45": {
        loc: {
          start: {
            line: 351,
            column: 16
          },
          end: {
            line: 351,
            column: 153
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 351,
            column: 16
          },
          end: {
            line: 351,
            column: 28
          }
        }, {
          start: {
            line: 351,
            column: 32
          },
          end: {
            line: 351,
            column: 46
          }
        }, {
          start: {
            line: 351,
            column: 50
          },
          end: {
            line: 351,
            column: 64
          }
        }, {
          start: {
            line: 351,
            column: 68
          },
          end: {
            line: 351,
            column: 77
          }
        }, {
          start: {
            line: 351,
            column: 81
          },
          end: {
            line: 351,
            column: 91
          }
        }, {
          start: {
            line: 351,
            column: 95
          },
          end: {
            line: 351,
            column: 106
          }
        }, {
          start: {
            line: 351,
            column: 110
          },
          end: {
            line: 351,
            column: 122
          }
        }, {
          start: {
            line: 351,
            column: 126
          },
          end: {
            line: 351,
            column: 137
          }
        }, {
          start: {
            line: 351,
            column: 141
          },
          end: {
            line: 351,
            column: 153
          }
        }],
        line: 351
      },
      "46": {
        loc: {
          start: {
            line: 357,
            column: 13
          },
          end: {
            line: 364,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 13
          },
          end: {
            line: 364,
            column: 9
          }
        }, {
          start: {
            line: 361,
            column: 13
          },
          end: {
            line: 364,
            column: 9
          }
        }],
        line: 357
      },
      "47": {
        loc: {
          start: {
            line: 365,
            column: 8
          },
          end: {
            line: 385,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 365,
            column: 8
          },
          end: {
            line: 385,
            column: 9
          }
        }, {
          start: {
            line: 378,
            column: 13
          },
          end: {
            line: 385,
            column: 9
          }
        }],
        line: 365
      },
      "48": {
        loc: {
          start: {
            line: 368,
            column: 26
          },
          end: {
            line: 368,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 368,
            column: 26
          },
          end: {
            line: 368,
            column: 38
          }
        }, {
          start: {
            line: 368,
            column: 42
          },
          end: {
            line: 368,
            column: 43
          }
        }],
        line: 368
      },
      "49": {
        loc: {
          start: {
            line: 369,
            column: 28
          },
          end: {
            line: 369,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 369,
            column: 28
          },
          end: {
            line: 369,
            column: 40
          }
        }, {
          start: {
            line: 369,
            column: 44
          },
          end: {
            line: 369,
            column: 45
          }
        }],
        line: 369
      },
      "50": {
        loc: {
          start: {
            line: 370,
            column: 28
          },
          end: {
            line: 370,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 28
          },
          end: {
            line: 370,
            column: 40
          }
        }, {
          start: {
            line: 370,
            column: 44
          },
          end: {
            line: 370,
            column: 45
          }
        }],
        line: 370
      },
      "51": {
        loc: {
          start: {
            line: 372,
            column: 12
          },
          end: {
            line: 375,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 12
          },
          end: {
            line: 375,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "52": {
        loc: {
          start: {
            line: 372,
            column: 16
          },
          end: {
            line: 372,
            column: 153
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 372,
            column: 16
          },
          end: {
            line: 372,
            column: 28
          }
        }, {
          start: {
            line: 372,
            column: 32
          },
          end: {
            line: 372,
            column: 46
          }
        }, {
          start: {
            line: 372,
            column: 50
          },
          end: {
            line: 372,
            column: 64
          }
        }, {
          start: {
            line: 372,
            column: 68
          },
          end: {
            line: 372,
            column: 77
          }
        }, {
          start: {
            line: 372,
            column: 81
          },
          end: {
            line: 372,
            column: 91
          }
        }, {
          start: {
            line: 372,
            column: 95
          },
          end: {
            line: 372,
            column: 106
          }
        }, {
          start: {
            line: 372,
            column: 110
          },
          end: {
            line: 372,
            column: 122
          }
        }, {
          start: {
            line: 372,
            column: 126
          },
          end: {
            line: 372,
            column: 137
          }
        }, {
          start: {
            line: 372,
            column: 141
          },
          end: {
            line: 372,
            column: 153
          }
        }],
        line: 372
      },
      "53": {
        loc: {
          start: {
            line: 378,
            column: 13
          },
          end: {
            line: 385,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 378,
            column: 13
          },
          end: {
            line: 385,
            column: 9
          }
        }, {
          start: {
            line: 382,
            column: 13
          },
          end: {
            line: 385,
            column: 9
          }
        }],
        line: 378
      },
      "54": {
        loc: {
          start: {
            line: 387,
            column: 8
          },
          end: {
            line: 389,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 387,
            column: 8
          },
          end: {
            line: 389,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 387
      },
      "55": {
        loc: {
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 396,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 396,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "56": {
        loc: {
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 399,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 399,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "57": {
        loc: {
          start: {
            line: 401,
            column: 8
          },
          end: {
            line: 403,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 401,
            column: 8
          },
          end: {
            line: 403,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 401
      },
      "58": {
        loc: {
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 401,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 401,
            column: 24
          }
        }, {
          start: {
            line: 401,
            column: 28
          },
          end: {
            line: 401,
            column: 58
          }
        }],
        line: 401
      },
      "59": {
        loc: {
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 413,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 413,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 405
      },
      "60": {
        loc: {
          start: {
            line: 410,
            column: 12
          },
          end: {
            line: 412,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 410,
            column: 12
          },
          end: {
            line: 412,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 410
      },
      "61": {
        loc: {
          start: {
            line: 431,
            column: 37
          },
          end: {
            line: 431,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 431,
            column: 62
          },
          end: {
            line: 431,
            column: 102
          }
        }, {
          start: {
            line: 431,
            column: 105
          },
          end: {
            line: 431,
            column: 110
          }
        }],
        line: 431
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0, 0, 0, 0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0, 0, 0, 0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0],
      "36": [0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0, 0, 0, 0, 0, 0, 0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0, 0, 0, 0, 0, 0, 0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/attendance/overtimeService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/services/attendance/overtimeService.ts"],
      sourcesContent: ["import { overtimeRequestModel, OvertimeRequest, CreateOvertimeRequestData, UpdateOvertimeRequestData } from '../../models/attendance/OvertimeRequest';\nimport { attendanceRecordModel } from '../../models/attendance/AttendanceRecord';\nimport { attendanceSessionModel } from '../../models/attendance/AttendanceSession';\nimport { leaveBalanceModel } from '../../models/leave/LeaveBalance';\nimport { employeeModel } from '../../models/hr/Employee';\nimport { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface CreateOvertimeData {\n  employeeId: string;\n  requestDate: Date;\n  startTime: Date | string;\n  endTime: Date | string;\n  requestedHours: number;\n  reason: string;\n}\n\nexport interface ApproveOvertimeData {\n  requestId: string;\n  approverId: string;\n  approved: boolean;\n  comments?: string;\n}\n\nexport interface OvertimeWithDetails extends OvertimeRequest {\n  employeeCode: string;\n  employeeName: string;\n  departmentName: string | null;\n  approverName: string | null;\n}\n\nexport class OvertimeService {\n  /**\n   * Create an overtime request\n   */\n  async createOvertimeRequest(data: CreateOvertimeData): Promise<OvertimeRequest> {\n    const { employeeId, requestDate, startTime, endTime, requestedHours, reason } = data;\n\n    // Verify employee exists and is active\n    const employee = await employeeModel.findById(employeeId);\n    if (!employee) {\n      throw new Error('Employee not found');\n    }\n\n    if (employee.status !== 'active') {\n      throw new Error('Employee is not active');\n    }\n\n    // Validate overtime date (cannot be in the past)\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const overtimeDate = new Date(requestDate);\n    overtimeDate.setHours(0, 0, 0, 0);\n    \n    if (overtimeDate < today) {\n      throw new Error('Cannot request overtime for past dates');\n    }\n\n    // Validate time range - work with time strings directly\n    let startTimeStr: string;\n    let endTimeStr: string;\n    \n    if (typeof startTime === 'string') {\n      // Validate time format and ensure HH:MM:SS format\n      const timeParts = startTime.split(':').map(Number);\n      const hours = timeParts[0] || 0;\n      const minutes = timeParts[1] || 0;\n      const seconds = timeParts[2] || 0; // Default to 0 if not provided\n      \n      // Validate time components\n      if (isNaN(hours) || isNaN(minutes) || isNaN(seconds) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59 || seconds < 0 || seconds > 59) {\n        throw new Error('Invalid start time format');\n      }\n      \n      startTimeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    } else if (startTime instanceof Date) {\n      // Convert Date object to time string\n      startTimeStr = `${startTime.getUTCHours().toString().padStart(2, '0')}:${startTime.getUTCMinutes().toString().padStart(2, '0')}:${startTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    } else {\n      throw new Error('Invalid start time format');\n    }\n    \n    if (typeof endTime === 'string') {\n      // Validate time format and ensure HH:MM:SS format\n      const timeParts = endTime.split(':').map(Number);\n      const hours = timeParts[0] || 0;\n      const minutes = timeParts[1] || 0;\n      const seconds = timeParts[2] || 0; // Default to 0 if not provided\n      \n      // Validate time components\n      if (isNaN(hours) || isNaN(minutes) || isNaN(seconds) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59 || seconds < 0 || seconds > 59) {\n        throw new Error('Invalid end time format');\n      }\n      \n      endTimeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    } else if (endTime instanceof Date) {\n      // Convert Date object to time string\n      endTimeStr = `${endTime.getUTCHours().toString().padStart(2, '0')}:${endTime.getUTCMinutes().toString().padStart(2, '0')}:${endTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    } else {\n      throw new Error('Invalid end time format');\n    }\n    \n    // Validate time order by comparing time strings\n    if (startTimeStr >= endTimeStr) {\n      throw new Error('Start time must be before end time');\n    }\n\n    // Validate requested hours by creating temporary Date objects for calculation only\n    const tempStart = new Date(`2000-01-01T${startTimeStr}`);\n    const tempEnd = new Date(`2000-01-01T${endTimeStr}`);\n    const calculatedHours = (tempEnd.getTime() - tempStart.getTime()) / (1000 * 60 * 60);\n    if (Math.abs(calculatedHours - requestedHours) > 0.1) {\n      throw new Error('Requested hours do not match the time range');\n    }\n\n    if (requestedHours <= 0) {\n      throw new Error('Requested hours must be greater than 0');\n    }\n\n    // Check for overlapping overtime requests\n    // Create temporary Date objects for the overlapping check\n    const tempStartForCheck = new Date(`2000-01-01T${startTimeStr}`);\n    const tempEndForCheck = new Date(`2000-01-01T${endTimeStr}`);\n    const overlappingRequest = await this.getOverlappingRequest(employeeId, requestDate, tempStartForCheck, tempEndForCheck);\n    if (overlappingRequest) {\n      throw new Error('An overtime request already exists for this time period');\n    }\n\n    // Use the validated time strings directly\n    const originalStartTime = startTimeStr;\n    const originalEndTime = endTimeStr;\n\n    // Debug: Log the data being passed to the model\n    logger.info('Data being passed to overtime model:', {\n      employeeId,\n      requestDate,\n      startTime: originalStartTime,\n      endTime: originalEndTime,\n      requestedHours,\n      reason,\n      originalStartTimeType: typeof originalStartTime,\n      originalEndTimeType: typeof originalEndTime\n    });\n\n    const requestData: CreateOvertimeRequestData = {\n      employeeId,\n      requestDate,\n      startTime: originalStartTime, // Always pass time string\n      endTime: originalEndTime,     // Always pass time string\n      requestedHours,\n      reason\n    };\n\n    const request = await overtimeRequestModel.createOvertimeRequest(requestData);\n\n    logger.info('Overtime request created', {\n      requestId: request.id,\n      employeeId,\n      employeeCode: employee.employee_id,\n      requestDate,\n      startTime,\n      endTime,\n      requestedHours,\n      reason\n    });\n\n    return request;\n  }\n\n  /**\n   * Get overtime request by ID\n   */\n  async getOvertimeRequest(id: string): Promise<OvertimeWithDetails | null> {\n    return await overtimeRequestModel.findByIdWithDetails(id);\n  }\n\n  /**\n   * Update overtime request\n   */\n  async updateOvertimeRequest(id: string, data: UpdateOvertimeRequestData): Promise<OvertimeRequest | null> {\n    return await overtimeRequestModel.updateOvertimeRequest(id, data);\n  }\n\n  /**\n   * List overtime requests with filtering\n   */\n  async listOvertimeRequests(params: {\n    page?: number;\n    limit?: number;\n    employeeId?: string;\n    departmentId?: string;\n    status?: 'pending' | 'approved' | 'rejected';\n    startDate?: Date;\n    endDate?: Date;\n    search?: string;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n  } = {}): Promise<{\n    requests: OvertimeWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return await overtimeRequestModel.listOvertimeRequests(params);\n  }\n\n  /**\n   * Get pending requests for a department head\n   */\n  async getPendingRequestsForDepartmentHead(departmentHeadUserId: string): Promise<OvertimeWithDetails[]> {\n    return await overtimeRequestModel.getPendingRequestsForDepartmentHead(departmentHeadUserId);\n  }\n\n  /**\n   * Approve or reject an overtime request\n   */\n  async approveOvertimeRequest(data: ApproveOvertimeData): Promise<OvertimeRequest> {\n    const { requestId, approverId, approved, comments } = data;\n\n    // Get the request\n    const request = await overtimeRequestModel.findById(requestId);\n    if (!request) {\n      throw new Error('Overtime request not found');\n    }\n\n    if (request.status !== 'pending') {\n      throw new Error('Request has already been processed');\n    }\n\n    // Update the request status\n    const updateData: UpdateOvertimeRequestData = {\n      status: approved ? 'approved' : 'rejected',\n      approvedBy: approverId,\n      approvedAt: new Date()\n    };\n\n    const updatedRequest = await overtimeRequestModel.updateOvertimeRequest(requestId, updateData);\n    if (!updatedRequest) {\n      throw new Error('Failed to update overtime request');\n    }\n\n    // If approved, create overtime session and accrue leave\n    if (approved) {\n      await this.applyOvertimeApproval(updatedRequest);\n    }\n\n    logger.info('Overtime request processed', {\n      requestId,\n      approverId,\n      approved,\n      comments,\n      employeeId: request.employeeId,\n      requestDate: request.requestDate,\n      startTime: request.startTime,\n      endTime: request.endTime,\n      requestedHours: request.requestedHours\n    });\n\n    return updatedRequest;\n  }\n\n  /**\n   * Apply approved overtime request\n   */\n  private async applyOvertimeApproval(request: OvertimeRequest): Promise<void> {\n    const { employeeId, requestDate, startTime, endTime, requestedHours } = request;\n\n    // Get or create attendance record for the overtime date\n    let attendanceRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, requestDate);\n    \n    if (!attendanceRecord) {\n      attendanceRecord = await attendanceRecordModel.createAttendanceRecord({\n        employeeId,\n        date: requestDate,\n        overallStatus: 'present'\n      });\n    }\n\n    // Convert TIME values to TIMESTAMP by combining with the overtime date\n    const startTimestamp = new Date(`${requestDate.toISOString().split('T')[0]}T${startTime}`);\n\n    // Create overtime session\n    await attendanceSessionModel.createAttendanceSession({\n      attendanceRecordId: attendanceRecord.id,\n      sessionType: 'overtime',\n      timestamp: startTimestamp\n    });\n\n    // Accrue leave days from overtime hours\n    await this.accrueLeaveFromOvertime(employeeId, requestedHours, requestDate);\n\n    logger.info('Overtime approval applied successfully', {\n      requestId: request.id,\n      employeeId,\n      requestDate,\n      startTime,\n      endTime,\n      requestedHours\n    });\n  }\n\n  /**\n   * Accrue leave days from overtime hours\n   */\n  private async accrueLeaveFromOvertime(employeeId: string, overtimeHours: number, _date: Date): Promise<void> {\n    // Get overtime to leave ratio from system settings\n    const query = `\n      SELECT setting_value \n      FROM system_settings \n      WHERE setting_key = 'overtime_to_leave_ratio'\n    `;\n    \n    const result = await getPool().query(query);\n    const overtimeToLeaveRatio = result.rows.length > 0 ? parseFloat(result.rows[0].setting_value) : 0.125; // Default: 1 day per 8 hours\n\n    const leaveDaysAccrued = overtimeHours * overtimeToLeaveRatio;\n\n    // Add leave days to vacation balance\n    await leaveBalanceModel.addLeaveDays(employeeId, 'vacation', leaveDaysAccrued);\n\n    logger.info('Leave days accrued from overtime', {\n      employeeId,\n      overtimeHours,\n      leaveDaysAccrued,\n      overtimeToLeaveRatio\n    });\n  }\n\n  /**\n   * Get overlapping overtime request\n   */\n  private async getOverlappingRequest(\n    employeeId: string, \n    requestDate: Date, \n    startTime: Date, \n    endTime: Date\n  ): Promise<OvertimeRequest | null> {\n    const query = `\n      SELECT \n        id,\n        employee_id as \"employeeId\",\n        request_date as \"requestDate\",\n        start_time as \"startTime\",\n        end_time as \"endTime\",\n        requested_hours as \"requestedHours\",\n        reason,\n        status,\n        approver_id as \"approvedBy\",\n        approved_at as \"approvedAt\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM overtime_requests\n      WHERE employee_id = $1 \n        AND request_date = $2 \n        AND status = 'pending'\n        AND (\n          (start_time <= $3 AND end_time > $3) OR\n          (start_time < $4 AND end_time >= $4) OR\n          (start_time >= $3 AND end_time <= $4)\n        )\n    `;\n\n    // Convert Date objects to time strings for database comparison\n    const startTimeStr = `${startTime.getUTCHours().toString().padStart(2, '0')}:${startTime.getUTCMinutes().toString().padStart(2, '0')}:${startTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    const endTimeStr = `${endTime.getUTCHours().toString().padStart(2, '0')}:${endTime.getUTCMinutes().toString().padStart(2, '0')}:${endTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    \n    const result = await getPool().query(query, [employeeId, requestDate, startTimeStr, endTimeStr]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Get overtime request statistics\n   */\n  async getOvertimeStats(employeeId?: string, departmentId?: string): Promise<{\n    totalRequests: number;\n    pendingRequests: number;\n    approvedRequests: number;\n    rejectedRequests: number;\n    totalHours: number;\n    approvedHours: number;\n  }> {\n    return await overtimeRequestModel.getOvertimeRequestStats(employeeId, departmentId);\n  }\n\n  /**\n   * Delete overtime request\n   */\n  async deleteOvertimeRequest(id: string): Promise<boolean> {\n    const request = await overtimeRequestModel.findById(id);\n    if (!request) {\n      throw new Error('Overtime request not found');\n    }\n\n    if (request.status !== 'pending') {\n      throw new Error('Cannot delete processed requests');\n    }\n\n    return await overtimeRequestModel.deleteOvertimeRequest(id);\n  }\n\n  /**\n   * Get overtime requests for an employee\n   */\n  async getEmployeeOvertimeRequests(\n    employeeId: string,\n    startDate?: Date,\n    endDate?: Date,\n    page: number = 1,\n    limit: number = 20\n  ): Promise<{\n    requests: OvertimeWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return await overtimeRequestModel.listOvertimeRequests({\n      employeeId,\n      startDate,\n      endDate,\n      page,\n      limit,\n      sortBy: 'created_at',\n      sortOrder: 'desc'\n    });\n  }\n\n  /**\n   * Validate overtime request\n   */\n  async validateOvertimeRequest(data: CreateOvertimeData): Promise<{\n    isValid: boolean;\n    errors: string[];\n  }> {\n    const errors: string[] = [];\n\n    // Check if employee exists\n    const employee = await employeeModel.findById(data.employeeId);\n    if (!employee) {\n      errors.push('Employee not found');\n    } else if (employee.status !== 'active') {\n      errors.push('Employee is not active');\n    }\n\n    // Validate overtime date\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const overtimeDate = new Date(data.requestDate);\n    overtimeDate.setHours(0, 0, 0, 0);\n    \n    if (overtimeDate < today) {\n      errors.push('Cannot request overtime for past dates');\n    }\n\n    // Validate time range - work with time strings directly\n    let startTimeStr: string;\n    let endTimeStr: string;\n    \n    if (typeof data.startTime === 'string') {\n      // Validate time format and ensure HH:MM:SS format\n      const timeParts = data.startTime.split(':').map(Number);\n      const hours = timeParts[0] || 0;\n      const minutes = timeParts[1] || 0;\n      const seconds = timeParts[2] || 0; // Default to 0 if not provided\n      \n      // Validate time components\n      if (isNaN(hours) || isNaN(minutes) || isNaN(seconds) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59 || seconds < 0 || seconds > 59) {\n        errors.push('Invalid start time format');\n        return { isValid: false, errors };\n      }\n      \n      startTimeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    } else if (data.startTime instanceof Date) {\n      // Convert Date object to time string\n      startTimeStr = `${data.startTime.getUTCHours().toString().padStart(2, '0')}:${data.startTime.getUTCMinutes().toString().padStart(2, '0')}:${data.startTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    } else {\n      errors.push('Invalid start time format');\n      return { isValid: false, errors };\n    }\n    \n    if (typeof data.endTime === 'string') {\n      // Validate time format and ensure HH:MM:SS format\n      const timeParts = data.endTime.split(':').map(Number);\n      const hours = timeParts[0] || 0;\n      const minutes = timeParts[1] || 0;\n      const seconds = timeParts[2] || 0; // Default to 0 if not provided\n      \n      // Validate time components\n      if (isNaN(hours) || isNaN(minutes) || isNaN(seconds) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59 || seconds < 0 || seconds > 59) {\n        errors.push('Invalid end time format');\n        return { isValid: false, errors };\n      }\n      \n      endTimeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    } else if (data.endTime instanceof Date) {\n      // Convert Date object to time string\n      endTimeStr = `${data.endTime.getUTCHours().toString().padStart(2, '0')}:${data.endTime.getUTCMinutes().toString().padStart(2, '0')}:${data.endTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    } else {\n      errors.push('Invalid end time format');\n      return { isValid: false, errors };\n    }\n    \n    // Validate time order by comparing time strings\n    if (startTimeStr >= endTimeStr) {\n      errors.push('Start time must be before end time');\n    }\n\n    // Validate requested hours by creating temporary Date objects for calculation only\n    const tempStart = new Date(`2000-01-01T${startTimeStr}`);\n    const tempEnd = new Date(`2000-01-01T${endTimeStr}`);\n    const calculatedHours = (tempEnd.getTime() - tempStart.getTime()) / (1000 * 60 * 60);\n    if (Math.abs(calculatedHours - data.requestedHours) > 0.1) {\n      errors.push('Requested hours do not match the time range');\n    }\n\n    if (data.requestedHours <= 0) {\n      errors.push('Requested hours must be greater than 0');\n    }\n\n    // Validate reason\n    if (!data.reason || data.reason.trim().length < 10) {\n      errors.push('Reason must be at least 10 characters long');\n    }\n\n    // Check for overlapping requests\n    if (employee) {\n      // Create temporary Date objects for the overlapping check\n      const tempStartForCheck = new Date(`2000-01-01T${startTimeStr}`);\n      const tempEndForCheck = new Date(`2000-01-01T${endTimeStr}`);\n      const overlappingRequest = await this.getOverlappingRequest(\n        data.employeeId, \n        data.requestDate, \n        tempStartForCheck, \n        tempEndForCheck\n      );\n      if (overlappingRequest) {\n        errors.push('An overtime request already exists for this time period');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Get overtime summary for an employee\n   */\n  async getEmployeeOvertimeSummary(\n    employeeId: string, \n        _startDate: Date,\n    _endDate: Date\n  ): Promise<{\n    totalRequests: number;\n    approvedRequests: number;\n    totalHours: number;\n    approvedHours: number;\n    leaveDaysAccrued: number;\n  }> {\n    const stats = await this.getOvertimeStats(employeeId);\n    \n    // Get overtime to leave ratio\n    const query = `\n      SELECT setting_value \n      FROM system_settings \n      WHERE setting_key = 'overtime_to_leave_ratio'\n    `;\n    \n    const result = await getPool().query(query);\n    const overtimeToLeaveRatio = result.rows.length > 0 ? parseFloat(result.rows[0].setting_value) : 0.125;\n    \n    const leaveDaysAccrued = stats.approvedHours * overtimeToLeaveRatio;\n\n    return {\n      totalRequests: stats.totalRequests,\n      approvedRequests: stats.approvedRequests,\n      totalHours: stats.totalHours,\n      approvedHours: stats.approvedHours,\n      leaveDaysAccrued: Math.round(leaveDaysAccrued * 100) / 100\n    };\n  }\n}\n\nexport const overtimeService = new OvertimeService();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3b287d4f6fead3cb0a6d51201cf8c75f0db060ba"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2fp2swidx1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2fp2swidx1();
var __importDefault =
/* istanbul ignore next */
(cov_2fp2swidx1().s[0]++,
/* istanbul ignore next */
(cov_2fp2swidx1().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2fp2swidx1().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2fp2swidx1().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2fp2swidx1().f[0]++;
  cov_2fp2swidx1().s[1]++;
  return /* istanbul ignore next */(cov_2fp2swidx1().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2fp2swidx1().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2fp2swidx1().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2fp2swidx1().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2fp2swidx1().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2fp2swidx1().s[3]++;
exports.overtimeService = exports.OvertimeService = void 0;
const OvertimeRequest_1 =
/* istanbul ignore next */
(cov_2fp2swidx1().s[4]++, require("../../models/attendance/OvertimeRequest"));
const AttendanceRecord_1 =
/* istanbul ignore next */
(cov_2fp2swidx1().s[5]++, require("../../models/attendance/AttendanceRecord"));
const AttendanceSession_1 =
/* istanbul ignore next */
(cov_2fp2swidx1().s[6]++, require("../../models/attendance/AttendanceSession"));
const LeaveBalance_1 =
/* istanbul ignore next */
(cov_2fp2swidx1().s[7]++, require("../../models/leave/LeaveBalance"));
const Employee_1 =
/* istanbul ignore next */
(cov_2fp2swidx1().s[8]++, require("../../models/hr/Employee"));
const database_1 =
/* istanbul ignore next */
(cov_2fp2swidx1().s[9]++, require("../../config/database"));
const logger_1 =
/* istanbul ignore next */
(cov_2fp2swidx1().s[10]++, __importDefault(require("../../utils/logger")));
class OvertimeService {
  /**
   * Create an overtime request
   */
  async createOvertimeRequest(data) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[1]++;
    const {
      employeeId,
      requestDate,
      startTime,
      endTime,
      requestedHours,
      reason
    } =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[11]++, data);
    // Verify employee exists and is active
    const employee =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[12]++, await Employee_1.employeeModel.findById(employeeId));
    /* istanbul ignore next */
    cov_2fp2swidx1().s[13]++;
    if (!employee) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[3][0]++;
      cov_2fp2swidx1().s[14]++;
      throw new Error('Employee not found');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[3][1]++;
    }
    cov_2fp2swidx1().s[15]++;
    if (employee.status !== 'active') {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[4][0]++;
      cov_2fp2swidx1().s[16]++;
      throw new Error('Employee is not active');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[4][1]++;
    }
    // Validate overtime date (cannot be in the past)
    const today =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[17]++, new Date());
    /* istanbul ignore next */
    cov_2fp2swidx1().s[18]++;
    today.setHours(0, 0, 0, 0);
    const overtimeDate =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[19]++, new Date(requestDate));
    /* istanbul ignore next */
    cov_2fp2swidx1().s[20]++;
    overtimeDate.setHours(0, 0, 0, 0);
    /* istanbul ignore next */
    cov_2fp2swidx1().s[21]++;
    if (overtimeDate < today) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[5][0]++;
      cov_2fp2swidx1().s[22]++;
      throw new Error('Cannot request overtime for past dates');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[5][1]++;
    }
    // Validate time range - work with time strings directly
    let startTimeStr;
    let endTimeStr;
    /* istanbul ignore next */
    cov_2fp2swidx1().s[23]++;
    if (typeof startTime === 'string') {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[6][0]++;
      // Validate time format and ensure HH:MM:SS format
      const timeParts =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[24]++, startTime.split(':').map(Number));
      const hours =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[25]++,
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[7][0]++, timeParts[0]) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[7][1]++, 0));
      const minutes =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[26]++,
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[8][0]++, timeParts[1]) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[8][1]++, 0));
      const seconds =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[27]++,
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[9][0]++, timeParts[2]) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[9][1]++, 0)); // Default to 0 if not provided
      // Validate time components
      /* istanbul ignore next */
      cov_2fp2swidx1().s[28]++;
      if (
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[11][0]++, isNaN(hours)) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[11][1]++, isNaN(minutes)) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[11][2]++, isNaN(seconds)) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[11][3]++, hours < 0) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[11][4]++, hours > 23) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[11][5]++, minutes < 0) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[11][6]++, minutes > 59) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[11][7]++, seconds < 0) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[11][8]++, seconds > 59)) {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[10][0]++;
        cov_2fp2swidx1().s[29]++;
        throw new Error('Invalid start time format');
      } else
      /* istanbul ignore next */
      {
        cov_2fp2swidx1().b[10][1]++;
      }
      cov_2fp2swidx1().s[30]++;
      startTimeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    } else {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[6][1]++;
      cov_2fp2swidx1().s[31]++;
      if (startTime instanceof Date) {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[12][0]++;
        cov_2fp2swidx1().s[32]++;
        // Convert Date object to time string
        startTimeStr = `${startTime.getUTCHours().toString().padStart(2, '0')}:${startTime.getUTCMinutes().toString().padStart(2, '0')}:${startTime.getUTCSeconds().toString().padStart(2, '0')}`;
      } else {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[12][1]++;
        cov_2fp2swidx1().s[33]++;
        throw new Error('Invalid start time format');
      }
    }
    /* istanbul ignore next */
    cov_2fp2swidx1().s[34]++;
    if (typeof endTime === 'string') {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[13][0]++;
      // Validate time format and ensure HH:MM:SS format
      const timeParts =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[35]++, endTime.split(':').map(Number));
      const hours =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[36]++,
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[14][0]++, timeParts[0]) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[14][1]++, 0));
      const minutes =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[37]++,
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[15][0]++, timeParts[1]) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[15][1]++, 0));
      const seconds =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[38]++,
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[16][0]++, timeParts[2]) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[16][1]++, 0)); // Default to 0 if not provided
      // Validate time components
      /* istanbul ignore next */
      cov_2fp2swidx1().s[39]++;
      if (
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[18][0]++, isNaN(hours)) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[18][1]++, isNaN(minutes)) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[18][2]++, isNaN(seconds)) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[18][3]++, hours < 0) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[18][4]++, hours > 23) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[18][5]++, minutes < 0) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[18][6]++, minutes > 59) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[18][7]++, seconds < 0) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[18][8]++, seconds > 59)) {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[17][0]++;
        cov_2fp2swidx1().s[40]++;
        throw new Error('Invalid end time format');
      } else
      /* istanbul ignore next */
      {
        cov_2fp2swidx1().b[17][1]++;
      }
      cov_2fp2swidx1().s[41]++;
      endTimeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    } else {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[13][1]++;
      cov_2fp2swidx1().s[42]++;
      if (endTime instanceof Date) {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[19][0]++;
        cov_2fp2swidx1().s[43]++;
        // Convert Date object to time string
        endTimeStr = `${endTime.getUTCHours().toString().padStart(2, '0')}:${endTime.getUTCMinutes().toString().padStart(2, '0')}:${endTime.getUTCSeconds().toString().padStart(2, '0')}`;
      } else {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[19][1]++;
        cov_2fp2swidx1().s[44]++;
        throw new Error('Invalid end time format');
      }
    }
    // Validate time order by comparing time strings
    /* istanbul ignore next */
    cov_2fp2swidx1().s[45]++;
    if (startTimeStr >= endTimeStr) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[20][0]++;
      cov_2fp2swidx1().s[46]++;
      throw new Error('Start time must be before end time');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[20][1]++;
    }
    // Validate requested hours by creating temporary Date objects for calculation only
    const tempStart =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[47]++, new Date(`2000-01-01T${startTimeStr}`));
    const tempEnd =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[48]++, new Date(`2000-01-01T${endTimeStr}`));
    const calculatedHours =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[49]++, (tempEnd.getTime() - tempStart.getTime()) / (1000 * 60 * 60));
    /* istanbul ignore next */
    cov_2fp2swidx1().s[50]++;
    if (Math.abs(calculatedHours - requestedHours) > 0.1) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[21][0]++;
      cov_2fp2swidx1().s[51]++;
      throw new Error('Requested hours do not match the time range');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[21][1]++;
    }
    cov_2fp2swidx1().s[52]++;
    if (requestedHours <= 0) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[22][0]++;
      cov_2fp2swidx1().s[53]++;
      throw new Error('Requested hours must be greater than 0');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[22][1]++;
    }
    // Check for overlapping overtime requests
    // Create temporary Date objects for the overlapping check
    const tempStartForCheck =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[54]++, new Date(`2000-01-01T${startTimeStr}`));
    const tempEndForCheck =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[55]++, new Date(`2000-01-01T${endTimeStr}`));
    const overlappingRequest =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[56]++, await this.getOverlappingRequest(employeeId, requestDate, tempStartForCheck, tempEndForCheck));
    /* istanbul ignore next */
    cov_2fp2swidx1().s[57]++;
    if (overlappingRequest) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[23][0]++;
      cov_2fp2swidx1().s[58]++;
      throw new Error('An overtime request already exists for this time period');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[23][1]++;
    }
    // Use the validated time strings directly
    const originalStartTime =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[59]++, startTimeStr);
    const originalEndTime =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[60]++, endTimeStr);
    // Debug: Log the data being passed to the model
    /* istanbul ignore next */
    cov_2fp2swidx1().s[61]++;
    logger_1.default.info('Data being passed to overtime model:', {
      employeeId,
      requestDate,
      startTime: originalStartTime,
      endTime: originalEndTime,
      requestedHours,
      reason,
      originalStartTimeType: typeof originalStartTime,
      originalEndTimeType: typeof originalEndTime
    });
    const requestData =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[62]++, {
      employeeId,
      requestDate,
      startTime: originalStartTime,
      // Always pass time string
      endTime: originalEndTime,
      // Always pass time string
      requestedHours,
      reason
    });
    const request =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[63]++, await OvertimeRequest_1.overtimeRequestModel.createOvertimeRequest(requestData));
    /* istanbul ignore next */
    cov_2fp2swidx1().s[64]++;
    logger_1.default.info('Overtime request created', {
      requestId: request.id,
      employeeId,
      employeeCode: employee.employee_id,
      requestDate,
      startTime,
      endTime,
      requestedHours,
      reason
    });
    /* istanbul ignore next */
    cov_2fp2swidx1().s[65]++;
    return request;
  }
  /**
   * Get overtime request by ID
   */
  async getOvertimeRequest(id) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[2]++;
    cov_2fp2swidx1().s[66]++;
    return await OvertimeRequest_1.overtimeRequestModel.findByIdWithDetails(id);
  }
  /**
   * Update overtime request
   */
  async updateOvertimeRequest(id, data) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[3]++;
    cov_2fp2swidx1().s[67]++;
    return await OvertimeRequest_1.overtimeRequestModel.updateOvertimeRequest(id, data);
  }
  /**
   * List overtime requests with filtering
   */
  async listOvertimeRequests(params =
  /* istanbul ignore next */
  (cov_2fp2swidx1().b[24][0]++, {})) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[4]++;
    cov_2fp2swidx1().s[68]++;
    return await OvertimeRequest_1.overtimeRequestModel.listOvertimeRequests(params);
  }
  /**
   * Get pending requests for a department head
   */
  async getPendingRequestsForDepartmentHead(departmentHeadUserId) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[5]++;
    cov_2fp2swidx1().s[69]++;
    return await OvertimeRequest_1.overtimeRequestModel.getPendingRequestsForDepartmentHead(departmentHeadUserId);
  }
  /**
   * Approve or reject an overtime request
   */
  async approveOvertimeRequest(data) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[6]++;
    const {
      requestId,
      approverId,
      approved,
      comments
    } =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[70]++, data);
    // Get the request
    const request =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[71]++, await OvertimeRequest_1.overtimeRequestModel.findById(requestId));
    /* istanbul ignore next */
    cov_2fp2swidx1().s[72]++;
    if (!request) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[25][0]++;
      cov_2fp2swidx1().s[73]++;
      throw new Error('Overtime request not found');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[25][1]++;
    }
    cov_2fp2swidx1().s[74]++;
    if (request.status !== 'pending') {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[26][0]++;
      cov_2fp2swidx1().s[75]++;
      throw new Error('Request has already been processed');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[26][1]++;
    }
    // Update the request status
    const updateData =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[76]++, {
      status: approved ?
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[27][0]++, 'approved') :
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[27][1]++, 'rejected'),
      approvedBy: approverId,
      approvedAt: new Date()
    });
    const updatedRequest =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[77]++, await OvertimeRequest_1.overtimeRequestModel.updateOvertimeRequest(requestId, updateData));
    /* istanbul ignore next */
    cov_2fp2swidx1().s[78]++;
    if (!updatedRequest) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[28][0]++;
      cov_2fp2swidx1().s[79]++;
      throw new Error('Failed to update overtime request');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[28][1]++;
    }
    // If approved, create overtime session and accrue leave
    cov_2fp2swidx1().s[80]++;
    if (approved) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[29][0]++;
      cov_2fp2swidx1().s[81]++;
      await this.applyOvertimeApproval(updatedRequest);
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[29][1]++;
    }
    cov_2fp2swidx1().s[82]++;
    logger_1.default.info('Overtime request processed', {
      requestId,
      approverId,
      approved,
      comments,
      employeeId: request.employeeId,
      requestDate: request.requestDate,
      startTime: request.startTime,
      endTime: request.endTime,
      requestedHours: request.requestedHours
    });
    /* istanbul ignore next */
    cov_2fp2swidx1().s[83]++;
    return updatedRequest;
  }
  /**
   * Apply approved overtime request
   */
  async applyOvertimeApproval(request) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[7]++;
    const {
      employeeId,
      requestDate,
      startTime,
      endTime,
      requestedHours
    } =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[84]++, request);
    // Get or create attendance record for the overtime date
    let attendanceRecord =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[85]++, await AttendanceRecord_1.attendanceRecordModel.findByEmployeeAndDate(employeeId, requestDate));
    /* istanbul ignore next */
    cov_2fp2swidx1().s[86]++;
    if (!attendanceRecord) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[30][0]++;
      cov_2fp2swidx1().s[87]++;
      attendanceRecord = await AttendanceRecord_1.attendanceRecordModel.createAttendanceRecord({
        employeeId,
        date: requestDate,
        overallStatus: 'present'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[30][1]++;
    }
    // Convert TIME values to TIMESTAMP by combining with the overtime date
    const startTimestamp =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[88]++, new Date(`${requestDate.toISOString().split('T')[0]}T${startTime}`));
    // Create overtime session
    /* istanbul ignore next */
    cov_2fp2swidx1().s[89]++;
    await AttendanceSession_1.attendanceSessionModel.createAttendanceSession({
      attendanceRecordId: attendanceRecord.id,
      sessionType: 'overtime',
      timestamp: startTimestamp
    });
    // Accrue leave days from overtime hours
    /* istanbul ignore next */
    cov_2fp2swidx1().s[90]++;
    await this.accrueLeaveFromOvertime(employeeId, requestedHours, requestDate);
    /* istanbul ignore next */
    cov_2fp2swidx1().s[91]++;
    logger_1.default.info('Overtime approval applied successfully', {
      requestId: request.id,
      employeeId,
      requestDate,
      startTime,
      endTime,
      requestedHours
    });
  }
  /**
   * Accrue leave days from overtime hours
   */
  async accrueLeaveFromOvertime(employeeId, overtimeHours, _date) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[8]++;
    // Get overtime to leave ratio from system settings
    const query =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[92]++, `
      SELECT setting_value 
      FROM system_settings 
      WHERE setting_key = 'overtime_to_leave_ratio'
    `);
    const result =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[93]++, await (0, database_1.getPool)().query(query));
    const overtimeToLeaveRatio =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[94]++, result.rows.length > 0 ?
    /* istanbul ignore next */
    (cov_2fp2swidx1().b[31][0]++, parseFloat(result.rows[0].setting_value)) :
    /* istanbul ignore next */
    (cov_2fp2swidx1().b[31][1]++, 0.125)); // Default: 1 day per 8 hours
    const leaveDaysAccrued =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[95]++, overtimeHours * overtimeToLeaveRatio);
    // Add leave days to vacation balance
    /* istanbul ignore next */
    cov_2fp2swidx1().s[96]++;
    await LeaveBalance_1.leaveBalanceModel.addLeaveDays(employeeId, 'vacation', leaveDaysAccrued);
    /* istanbul ignore next */
    cov_2fp2swidx1().s[97]++;
    logger_1.default.info('Leave days accrued from overtime', {
      employeeId,
      overtimeHours,
      leaveDaysAccrued,
      overtimeToLeaveRatio
    });
  }
  /**
   * Get overlapping overtime request
   */
  async getOverlappingRequest(employeeId, requestDate, startTime, endTime) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[9]++;
    const query =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[98]++, `
      SELECT 
        id,
        employee_id as "employeeId",
        request_date as "requestDate",
        start_time as "startTime",
        end_time as "endTime",
        requested_hours as "requestedHours",
        reason,
        status,
        approver_id as "approvedBy",
        approved_at as "approvedAt",
        created_at as "createdAt",
        updated_at as "updatedAt"
      FROM overtime_requests
      WHERE employee_id = $1 
        AND request_date = $2 
        AND status = 'pending'
        AND (
          (start_time <= $3 AND end_time > $3) OR
          (start_time < $4 AND end_time >= $4) OR
          (start_time >= $3 AND end_time <= $4)
        )
    `);
    // Convert Date objects to time strings for database comparison
    const startTimeStr =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[99]++, `${startTime.getUTCHours().toString().padStart(2, '0')}:${startTime.getUTCMinutes().toString().padStart(2, '0')}:${startTime.getUTCSeconds().toString().padStart(2, '0')}`);
    const endTimeStr =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[100]++, `${endTime.getUTCHours().toString().padStart(2, '0')}:${endTime.getUTCMinutes().toString().padStart(2, '0')}:${endTime.getUTCSeconds().toString().padStart(2, '0')}`);
    const result =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[101]++, await (0, database_1.getPool)().query(query, [employeeId, requestDate, startTimeStr, endTimeStr]));
    /* istanbul ignore next */
    cov_2fp2swidx1().s[102]++;
    return result.rows.length > 0 ?
    /* istanbul ignore next */
    (cov_2fp2swidx1().b[32][0]++, result.rows[0]) :
    /* istanbul ignore next */
    (cov_2fp2swidx1().b[32][1]++, null);
  }
  /**
   * Get overtime request statistics
   */
  async getOvertimeStats(employeeId, departmentId) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[10]++;
    cov_2fp2swidx1().s[103]++;
    return await OvertimeRequest_1.overtimeRequestModel.getOvertimeRequestStats(employeeId, departmentId);
  }
  /**
   * Delete overtime request
   */
  async deleteOvertimeRequest(id) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[11]++;
    const request =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[104]++, await OvertimeRequest_1.overtimeRequestModel.findById(id));
    /* istanbul ignore next */
    cov_2fp2swidx1().s[105]++;
    if (!request) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[33][0]++;
      cov_2fp2swidx1().s[106]++;
      throw new Error('Overtime request not found');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[33][1]++;
    }
    cov_2fp2swidx1().s[107]++;
    if (request.status !== 'pending') {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[34][0]++;
      cov_2fp2swidx1().s[108]++;
      throw new Error('Cannot delete processed requests');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[34][1]++;
    }
    cov_2fp2swidx1().s[109]++;
    return await OvertimeRequest_1.overtimeRequestModel.deleteOvertimeRequest(id);
  }
  /**
   * Get overtime requests for an employee
   */
  async getEmployeeOvertimeRequests(employeeId, startDate, endDate, page =
  /* istanbul ignore next */
  (cov_2fp2swidx1().b[35][0]++, 1), limit =
  /* istanbul ignore next */
  (cov_2fp2swidx1().b[36][0]++, 20)) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[12]++;
    cov_2fp2swidx1().s[110]++;
    return await OvertimeRequest_1.overtimeRequestModel.listOvertimeRequests({
      employeeId,
      startDate,
      endDate,
      page,
      limit,
      sortBy: 'created_at',
      sortOrder: 'desc'
    });
  }
  /**
   * Validate overtime request
   */
  async validateOvertimeRequest(data) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[13]++;
    const errors =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[111]++, []);
    // Check if employee exists
    const employee =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[112]++, await Employee_1.employeeModel.findById(data.employeeId));
    /* istanbul ignore next */
    cov_2fp2swidx1().s[113]++;
    if (!employee) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[37][0]++;
      cov_2fp2swidx1().s[114]++;
      errors.push('Employee not found');
    } else {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[37][1]++;
      cov_2fp2swidx1().s[115]++;
      if (employee.status !== 'active') {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[38][0]++;
        cov_2fp2swidx1().s[116]++;
        errors.push('Employee is not active');
      } else
      /* istanbul ignore next */
      {
        cov_2fp2swidx1().b[38][1]++;
      }
    }
    // Validate overtime date
    const today =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[117]++, new Date());
    /* istanbul ignore next */
    cov_2fp2swidx1().s[118]++;
    today.setHours(0, 0, 0, 0);
    const overtimeDate =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[119]++, new Date(data.requestDate));
    /* istanbul ignore next */
    cov_2fp2swidx1().s[120]++;
    overtimeDate.setHours(0, 0, 0, 0);
    /* istanbul ignore next */
    cov_2fp2swidx1().s[121]++;
    if (overtimeDate < today) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[39][0]++;
      cov_2fp2swidx1().s[122]++;
      errors.push('Cannot request overtime for past dates');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[39][1]++;
    }
    // Validate time range - work with time strings directly
    let startTimeStr;
    let endTimeStr;
    /* istanbul ignore next */
    cov_2fp2swidx1().s[123]++;
    if (typeof data.startTime === 'string') {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[40][0]++;
      // Validate time format and ensure HH:MM:SS format
      const timeParts =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[124]++, data.startTime.split(':').map(Number));
      const hours =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[125]++,
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[41][0]++, timeParts[0]) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[41][1]++, 0));
      const minutes =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[126]++,
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[42][0]++, timeParts[1]) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[42][1]++, 0));
      const seconds =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[127]++,
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[43][0]++, timeParts[2]) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[43][1]++, 0)); // Default to 0 if not provided
      // Validate time components
      /* istanbul ignore next */
      cov_2fp2swidx1().s[128]++;
      if (
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[45][0]++, isNaN(hours)) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[45][1]++, isNaN(minutes)) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[45][2]++, isNaN(seconds)) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[45][3]++, hours < 0) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[45][4]++, hours > 23) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[45][5]++, minutes < 0) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[45][6]++, minutes > 59) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[45][7]++, seconds < 0) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[45][8]++, seconds > 59)) {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[44][0]++;
        cov_2fp2swidx1().s[129]++;
        errors.push('Invalid start time format');
        /* istanbul ignore next */
        cov_2fp2swidx1().s[130]++;
        return {
          isValid: false,
          errors
        };
      } else
      /* istanbul ignore next */
      {
        cov_2fp2swidx1().b[44][1]++;
      }
      cov_2fp2swidx1().s[131]++;
      startTimeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    } else {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[40][1]++;
      cov_2fp2swidx1().s[132]++;
      if (data.startTime instanceof Date) {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[46][0]++;
        cov_2fp2swidx1().s[133]++;
        // Convert Date object to time string
        startTimeStr = `${data.startTime.getUTCHours().toString().padStart(2, '0')}:${data.startTime.getUTCMinutes().toString().padStart(2, '0')}:${data.startTime.getUTCSeconds().toString().padStart(2, '0')}`;
      } else {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[46][1]++;
        cov_2fp2swidx1().s[134]++;
        errors.push('Invalid start time format');
        /* istanbul ignore next */
        cov_2fp2swidx1().s[135]++;
        return {
          isValid: false,
          errors
        };
      }
    }
    /* istanbul ignore next */
    cov_2fp2swidx1().s[136]++;
    if (typeof data.endTime === 'string') {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[47][0]++;
      // Validate time format and ensure HH:MM:SS format
      const timeParts =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[137]++, data.endTime.split(':').map(Number));
      const hours =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[138]++,
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[48][0]++, timeParts[0]) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[48][1]++, 0));
      const minutes =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[139]++,
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[49][0]++, timeParts[1]) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[49][1]++, 0));
      const seconds =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[140]++,
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[50][0]++, timeParts[2]) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[50][1]++, 0)); // Default to 0 if not provided
      // Validate time components
      /* istanbul ignore next */
      cov_2fp2swidx1().s[141]++;
      if (
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[52][0]++, isNaN(hours)) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[52][1]++, isNaN(minutes)) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[52][2]++, isNaN(seconds)) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[52][3]++, hours < 0) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[52][4]++, hours > 23) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[52][5]++, minutes < 0) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[52][6]++, minutes > 59) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[52][7]++, seconds < 0) ||
      /* istanbul ignore next */
      (cov_2fp2swidx1().b[52][8]++, seconds > 59)) {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[51][0]++;
        cov_2fp2swidx1().s[142]++;
        errors.push('Invalid end time format');
        /* istanbul ignore next */
        cov_2fp2swidx1().s[143]++;
        return {
          isValid: false,
          errors
        };
      } else
      /* istanbul ignore next */
      {
        cov_2fp2swidx1().b[51][1]++;
      }
      cov_2fp2swidx1().s[144]++;
      endTimeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    } else {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[47][1]++;
      cov_2fp2swidx1().s[145]++;
      if (data.endTime instanceof Date) {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[53][0]++;
        cov_2fp2swidx1().s[146]++;
        // Convert Date object to time string
        endTimeStr = `${data.endTime.getUTCHours().toString().padStart(2, '0')}:${data.endTime.getUTCMinutes().toString().padStart(2, '0')}:${data.endTime.getUTCSeconds().toString().padStart(2, '0')}`;
      } else {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[53][1]++;
        cov_2fp2swidx1().s[147]++;
        errors.push('Invalid end time format');
        /* istanbul ignore next */
        cov_2fp2swidx1().s[148]++;
        return {
          isValid: false,
          errors
        };
      }
    }
    // Validate time order by comparing time strings
    /* istanbul ignore next */
    cov_2fp2swidx1().s[149]++;
    if (startTimeStr >= endTimeStr) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[54][0]++;
      cov_2fp2swidx1().s[150]++;
      errors.push('Start time must be before end time');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[54][1]++;
    }
    // Validate requested hours by creating temporary Date objects for calculation only
    const tempStart =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[151]++, new Date(`2000-01-01T${startTimeStr}`));
    const tempEnd =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[152]++, new Date(`2000-01-01T${endTimeStr}`));
    const calculatedHours =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[153]++, (tempEnd.getTime() - tempStart.getTime()) / (1000 * 60 * 60));
    /* istanbul ignore next */
    cov_2fp2swidx1().s[154]++;
    if (Math.abs(calculatedHours - data.requestedHours) > 0.1) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[55][0]++;
      cov_2fp2swidx1().s[155]++;
      errors.push('Requested hours do not match the time range');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[55][1]++;
    }
    cov_2fp2swidx1().s[156]++;
    if (data.requestedHours <= 0) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[56][0]++;
      cov_2fp2swidx1().s[157]++;
      errors.push('Requested hours must be greater than 0');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[56][1]++;
    }
    // Validate reason
    cov_2fp2swidx1().s[158]++;
    if (
    /* istanbul ignore next */
    (cov_2fp2swidx1().b[58][0]++, !data.reason) ||
    /* istanbul ignore next */
    (cov_2fp2swidx1().b[58][1]++, data.reason.trim().length < 10)) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[57][0]++;
      cov_2fp2swidx1().s[159]++;
      errors.push('Reason must be at least 10 characters long');
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[57][1]++;
    }
    // Check for overlapping requests
    cov_2fp2swidx1().s[160]++;
    if (employee) {
      /* istanbul ignore next */
      cov_2fp2swidx1().b[59][0]++;
      // Create temporary Date objects for the overlapping check
      const tempStartForCheck =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[161]++, new Date(`2000-01-01T${startTimeStr}`));
      const tempEndForCheck =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[162]++, new Date(`2000-01-01T${endTimeStr}`));
      const overlappingRequest =
      /* istanbul ignore next */
      (cov_2fp2swidx1().s[163]++, await this.getOverlappingRequest(data.employeeId, data.requestDate, tempStartForCheck, tempEndForCheck));
      /* istanbul ignore next */
      cov_2fp2swidx1().s[164]++;
      if (overlappingRequest) {
        /* istanbul ignore next */
        cov_2fp2swidx1().b[60][0]++;
        cov_2fp2swidx1().s[165]++;
        errors.push('An overtime request already exists for this time period');
      } else
      /* istanbul ignore next */
      {
        cov_2fp2swidx1().b[60][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2fp2swidx1().b[59][1]++;
    }
    cov_2fp2swidx1().s[166]++;
    return {
      isValid: errors.length === 0,
      errors
    };
  }
  /**
   * Get overtime summary for an employee
   */
  async getEmployeeOvertimeSummary(employeeId, _startDate, _endDate) {
    /* istanbul ignore next */
    cov_2fp2swidx1().f[14]++;
    const stats =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[167]++, await this.getOvertimeStats(employeeId));
    // Get overtime to leave ratio
    const query =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[168]++, `
      SELECT setting_value 
      FROM system_settings 
      WHERE setting_key = 'overtime_to_leave_ratio'
    `);
    const result =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[169]++, await (0, database_1.getPool)().query(query));
    const overtimeToLeaveRatio =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[170]++, result.rows.length > 0 ?
    /* istanbul ignore next */
    (cov_2fp2swidx1().b[61][0]++, parseFloat(result.rows[0].setting_value)) :
    /* istanbul ignore next */
    (cov_2fp2swidx1().b[61][1]++, 0.125));
    const leaveDaysAccrued =
    /* istanbul ignore next */
    (cov_2fp2swidx1().s[171]++, stats.approvedHours * overtimeToLeaveRatio);
    /* istanbul ignore next */
    cov_2fp2swidx1().s[172]++;
    return {
      totalRequests: stats.totalRequests,
      approvedRequests: stats.approvedRequests,
      totalHours: stats.totalHours,
      approvedHours: stats.approvedHours,
      leaveDaysAccrued: Math.round(leaveDaysAccrued * 100) / 100
    };
  }
}
/* istanbul ignore next */
cov_2fp2swidx1().s[173]++;
exports.OvertimeService = OvertimeService;
/* istanbul ignore next */
cov_2fp2swidx1().s[174]++;
exports.overtimeService = new OvertimeService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,