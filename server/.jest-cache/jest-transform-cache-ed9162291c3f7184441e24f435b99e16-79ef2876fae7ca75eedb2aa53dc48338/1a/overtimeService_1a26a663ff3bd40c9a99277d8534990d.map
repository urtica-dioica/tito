{"version":3,"names":["OvertimeRequest_1","cov_2fp2swidx1","s","require","AttendanceRecord_1","AttendanceSession_1","LeaveBalance_1","Employee_1","database_1","logger_1","__importDefault","OvertimeService","createOvertimeRequest","data","f","employeeId","requestDate","startTime","endTime","requestedHours","reason","employee","employeeModel","findById","b","Error","status","today","Date","setHours","overtimeDate","startTimeStr","endTimeStr","timeParts","split","map","Number","hours","minutes","seconds","isNaN","toString","padStart","getUTCHours","getUTCMinutes","getUTCSeconds","tempStart","tempEnd","calculatedHours","getTime","Math","abs","tempStartForCheck","tempEndForCheck","overlappingRequest","getOverlappingRequest","originalStartTime","originalEndTime","default","info","originalStartTimeType","originalEndTimeType","requestData","request","overtimeRequestModel","requestId","id","employeeCode","employee_id","getOvertimeRequest","findByIdWithDetails","updateOvertimeRequest","listOvertimeRequests","params","getPendingRequestsForDepartmentHead","departmentHeadUserId","approveOvertimeRequest","approverId","approved","comments","updateData","approvedBy","approvedAt","updatedRequest","applyOvertimeApproval","attendanceRecord","attendanceRecordModel","findByEmployeeAndDate","createAttendanceRecord","date","overallStatus","startTimestamp","toISOString","attendanceSessionModel","createAttendanceSession","attendanceRecordId","sessionType","timestamp","accrueLeaveFromOvertime","overtimeHours","_date","query","result","getPool","overtimeToLeaveRatio","rows","length","parseFloat","setting_value","leaveDaysAccrued","leaveBalanceModel","addLeaveDays","getOvertimeStats","departmentId","getOvertimeRequestStats","deleteOvertimeRequest","getEmployeeOvertimeRequests","startDate","endDate","page","limit","sortBy","sortOrder","validateOvertimeRequest","errors","push","isValid","trim","getEmployeeOvertimeSummary","_startDate","_endDate","stats","approvedHours","totalRequests","approvedRequests","totalHours","round","exports","overtimeService"],"sources":["/home/kim/tito/server/src/services/attendance/overtimeService.ts"],"sourcesContent":["import { overtimeRequestModel, OvertimeRequest, CreateOvertimeRequestData, UpdateOvertimeRequestData } from '../../models/attendance/OvertimeRequest';\nimport { attendanceRecordModel } from '../../models/attendance/AttendanceRecord';\nimport { attendanceSessionModel } from '../../models/attendance/AttendanceSession';\nimport { leaveBalanceModel } from '../../models/leave/LeaveBalance';\nimport { employeeModel } from '../../models/hr/Employee';\nimport { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface CreateOvertimeData {\n  employeeId: string;\n  requestDate: Date;\n  startTime: Date | string;\n  endTime: Date | string;\n  requestedHours: number;\n  reason: string;\n}\n\nexport interface ApproveOvertimeData {\n  requestId: string;\n  approverId: string;\n  approved: boolean;\n  comments?: string;\n}\n\nexport interface OvertimeWithDetails extends OvertimeRequest {\n  employeeCode: string;\n  employeeName: string;\n  departmentName: string | null;\n  approverName: string | null;\n}\n\nexport class OvertimeService {\n  /**\n   * Create an overtime request\n   */\n  async createOvertimeRequest(data: CreateOvertimeData): Promise<OvertimeRequest> {\n    const { employeeId, requestDate, startTime, endTime, requestedHours, reason } = data;\n\n    // Verify employee exists and is active\n    const employee = await employeeModel.findById(employeeId);\n    if (!employee) {\n      throw new Error('Employee not found');\n    }\n\n    if (employee.status !== 'active') {\n      throw new Error('Employee is not active');\n    }\n\n    // Validate overtime date (cannot be in the past)\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const overtimeDate = new Date(requestDate);\n    overtimeDate.setHours(0, 0, 0, 0);\n    \n    if (overtimeDate < today) {\n      throw new Error('Cannot request overtime for past dates');\n    }\n\n    // Validate time range - work with time strings directly\n    let startTimeStr: string;\n    let endTimeStr: string;\n    \n    if (typeof startTime === 'string') {\n      // Validate time format and ensure HH:MM:SS format\n      const timeParts = startTime.split(':').map(Number);\n      const hours = timeParts[0] || 0;\n      const minutes = timeParts[1] || 0;\n      const seconds = timeParts[2] || 0; // Default to 0 if not provided\n      \n      // Validate time components\n      if (isNaN(hours) || isNaN(minutes) || isNaN(seconds) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59 || seconds < 0 || seconds > 59) {\n        throw new Error('Invalid start time format');\n      }\n      \n      startTimeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    } else if (startTime instanceof Date) {\n      // Convert Date object to time string\n      startTimeStr = `${startTime.getUTCHours().toString().padStart(2, '0')}:${startTime.getUTCMinutes().toString().padStart(2, '0')}:${startTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    } else {\n      throw new Error('Invalid start time format');\n    }\n    \n    if (typeof endTime === 'string') {\n      // Validate time format and ensure HH:MM:SS format\n      const timeParts = endTime.split(':').map(Number);\n      const hours = timeParts[0] || 0;\n      const minutes = timeParts[1] || 0;\n      const seconds = timeParts[2] || 0; // Default to 0 if not provided\n      \n      // Validate time components\n      if (isNaN(hours) || isNaN(minutes) || isNaN(seconds) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59 || seconds < 0 || seconds > 59) {\n        throw new Error('Invalid end time format');\n      }\n      \n      endTimeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    } else if (endTime instanceof Date) {\n      // Convert Date object to time string\n      endTimeStr = `${endTime.getUTCHours().toString().padStart(2, '0')}:${endTime.getUTCMinutes().toString().padStart(2, '0')}:${endTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    } else {\n      throw new Error('Invalid end time format');\n    }\n    \n    // Validate time order by comparing time strings\n    if (startTimeStr >= endTimeStr) {\n      throw new Error('Start time must be before end time');\n    }\n\n    // Validate requested hours by creating temporary Date objects for calculation only\n    const tempStart = new Date(`2000-01-01T${startTimeStr}`);\n    const tempEnd = new Date(`2000-01-01T${endTimeStr}`);\n    const calculatedHours = (tempEnd.getTime() - tempStart.getTime()) / (1000 * 60 * 60);\n    if (Math.abs(calculatedHours - requestedHours) > 0.1) {\n      throw new Error('Requested hours do not match the time range');\n    }\n\n    if (requestedHours <= 0) {\n      throw new Error('Requested hours must be greater than 0');\n    }\n\n    // Check for overlapping overtime requests\n    // Create temporary Date objects for the overlapping check\n    const tempStartForCheck = new Date(`2000-01-01T${startTimeStr}`);\n    const tempEndForCheck = new Date(`2000-01-01T${endTimeStr}`);\n    const overlappingRequest = await this.getOverlappingRequest(employeeId, requestDate, tempStartForCheck, tempEndForCheck);\n    if (overlappingRequest) {\n      throw new Error('An overtime request already exists for this time period');\n    }\n\n    // Use the validated time strings directly\n    const originalStartTime = startTimeStr;\n    const originalEndTime = endTimeStr;\n\n    // Debug: Log the data being passed to the model\n    logger.info('Data being passed to overtime model:', {\n      employeeId,\n      requestDate,\n      startTime: originalStartTime,\n      endTime: originalEndTime,\n      requestedHours,\n      reason,\n      originalStartTimeType: typeof originalStartTime,\n      originalEndTimeType: typeof originalEndTime\n    });\n\n    const requestData: CreateOvertimeRequestData = {\n      employeeId,\n      requestDate,\n      startTime: originalStartTime, // Always pass time string\n      endTime: originalEndTime,     // Always pass time string\n      requestedHours,\n      reason\n    };\n\n    const request = await overtimeRequestModel.createOvertimeRequest(requestData);\n\n    logger.info('Overtime request created', {\n      requestId: request.id,\n      employeeId,\n      employeeCode: employee.employee_id,\n      requestDate,\n      startTime,\n      endTime,\n      requestedHours,\n      reason\n    });\n\n    return request;\n  }\n\n  /**\n   * Get overtime request by ID\n   */\n  async getOvertimeRequest(id: string): Promise<OvertimeWithDetails | null> {\n    return await overtimeRequestModel.findByIdWithDetails(id);\n  }\n\n  /**\n   * Update overtime request\n   */\n  async updateOvertimeRequest(id: string, data: UpdateOvertimeRequestData): Promise<OvertimeRequest | null> {\n    return await overtimeRequestModel.updateOvertimeRequest(id, data);\n  }\n\n  /**\n   * List overtime requests with filtering\n   */\n  async listOvertimeRequests(params: {\n    page?: number;\n    limit?: number;\n    employeeId?: string;\n    departmentId?: string;\n    status?: 'pending' | 'approved' | 'rejected';\n    startDate?: Date;\n    endDate?: Date;\n    search?: string;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n  } = {}): Promise<{\n    requests: OvertimeWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return await overtimeRequestModel.listOvertimeRequests(params);\n  }\n\n  /**\n   * Get pending requests for a department head\n   */\n  async getPendingRequestsForDepartmentHead(departmentHeadUserId: string): Promise<OvertimeWithDetails[]> {\n    return await overtimeRequestModel.getPendingRequestsForDepartmentHead(departmentHeadUserId);\n  }\n\n  /**\n   * Approve or reject an overtime request\n   */\n  async approveOvertimeRequest(data: ApproveOvertimeData): Promise<OvertimeRequest> {\n    const { requestId, approverId, approved, comments } = data;\n\n    // Get the request\n    const request = await overtimeRequestModel.findById(requestId);\n    if (!request) {\n      throw new Error('Overtime request not found');\n    }\n\n    if (request.status !== 'pending') {\n      throw new Error('Request has already been processed');\n    }\n\n    // Update the request status\n    const updateData: UpdateOvertimeRequestData = {\n      status: approved ? 'approved' : 'rejected',\n      approvedBy: approverId,\n      approvedAt: new Date()\n    };\n\n    const updatedRequest = await overtimeRequestModel.updateOvertimeRequest(requestId, updateData);\n    if (!updatedRequest) {\n      throw new Error('Failed to update overtime request');\n    }\n\n    // If approved, create overtime session and accrue leave\n    if (approved) {\n      await this.applyOvertimeApproval(updatedRequest);\n    }\n\n    logger.info('Overtime request processed', {\n      requestId,\n      approverId,\n      approved,\n      comments,\n      employeeId: request.employeeId,\n      requestDate: request.requestDate,\n      startTime: request.startTime,\n      endTime: request.endTime,\n      requestedHours: request.requestedHours\n    });\n\n    return updatedRequest;\n  }\n\n  /**\n   * Apply approved overtime request\n   */\n  private async applyOvertimeApproval(request: OvertimeRequest): Promise<void> {\n    const { employeeId, requestDate, startTime, endTime, requestedHours } = request;\n\n    // Get or create attendance record for the overtime date\n    let attendanceRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, requestDate);\n    \n    if (!attendanceRecord) {\n      attendanceRecord = await attendanceRecordModel.createAttendanceRecord({\n        employeeId,\n        date: requestDate,\n        overallStatus: 'present'\n      });\n    }\n\n    // Convert TIME values to TIMESTAMP by combining with the overtime date\n    const startTimestamp = new Date(`${requestDate.toISOString().split('T')[0]}T${startTime}`);\n\n    // Create overtime session\n    await attendanceSessionModel.createAttendanceSession({\n      attendanceRecordId: attendanceRecord.id,\n      sessionType: 'overtime',\n      timestamp: startTimestamp\n    });\n\n    // Accrue leave days from overtime hours\n    await this.accrueLeaveFromOvertime(employeeId, requestedHours, requestDate);\n\n    logger.info('Overtime approval applied successfully', {\n      requestId: request.id,\n      employeeId,\n      requestDate,\n      startTime,\n      endTime,\n      requestedHours\n    });\n  }\n\n  /**\n   * Accrue leave days from overtime hours\n   */\n  private async accrueLeaveFromOvertime(employeeId: string, overtimeHours: number, _date: Date): Promise<void> {\n    // Get overtime to leave ratio from system settings\n    const query = `\n      SELECT setting_value \n      FROM system_settings \n      WHERE setting_key = 'overtime_to_leave_ratio'\n    `;\n    \n    const result = await getPool().query(query);\n    const overtimeToLeaveRatio = result.rows.length > 0 ? parseFloat(result.rows[0].setting_value) : 0.125; // Default: 1 day per 8 hours\n\n    const leaveDaysAccrued = overtimeHours * overtimeToLeaveRatio;\n\n    // Add leave days to vacation balance\n    await leaveBalanceModel.addLeaveDays(employeeId, 'vacation', leaveDaysAccrued);\n\n    logger.info('Leave days accrued from overtime', {\n      employeeId,\n      overtimeHours,\n      leaveDaysAccrued,\n      overtimeToLeaveRatio\n    });\n  }\n\n  /**\n   * Get overlapping overtime request\n   */\n  private async getOverlappingRequest(\n    employeeId: string, \n    requestDate: Date, \n    startTime: Date, \n    endTime: Date\n  ): Promise<OvertimeRequest | null> {\n    const query = `\n      SELECT \n        id,\n        employee_id as \"employeeId\",\n        request_date as \"requestDate\",\n        start_time as \"startTime\",\n        end_time as \"endTime\",\n        requested_hours as \"requestedHours\",\n        reason,\n        status,\n        approver_id as \"approvedBy\",\n        approved_at as \"approvedAt\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM overtime_requests\n      WHERE employee_id = $1 \n        AND request_date = $2 \n        AND status = 'pending'\n        AND (\n          (start_time <= $3 AND end_time > $3) OR\n          (start_time < $4 AND end_time >= $4) OR\n          (start_time >= $3 AND end_time <= $4)\n        )\n    `;\n\n    // Convert Date objects to time strings for database comparison\n    const startTimeStr = `${startTime.getUTCHours().toString().padStart(2, '0')}:${startTime.getUTCMinutes().toString().padStart(2, '0')}:${startTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    const endTimeStr = `${endTime.getUTCHours().toString().padStart(2, '0')}:${endTime.getUTCMinutes().toString().padStart(2, '0')}:${endTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    \n    const result = await getPool().query(query, [employeeId, requestDate, startTimeStr, endTimeStr]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Get overtime request statistics\n   */\n  async getOvertimeStats(employeeId?: string, departmentId?: string): Promise<{\n    totalRequests: number;\n    pendingRequests: number;\n    approvedRequests: number;\n    rejectedRequests: number;\n    totalHours: number;\n    approvedHours: number;\n  }> {\n    return await overtimeRequestModel.getOvertimeRequestStats(employeeId, departmentId);\n  }\n\n  /**\n   * Delete overtime request\n   */\n  async deleteOvertimeRequest(id: string): Promise<boolean> {\n    const request = await overtimeRequestModel.findById(id);\n    if (!request) {\n      throw new Error('Overtime request not found');\n    }\n\n    if (request.status !== 'pending') {\n      throw new Error('Cannot delete processed requests');\n    }\n\n    return await overtimeRequestModel.deleteOvertimeRequest(id);\n  }\n\n  /**\n   * Get overtime requests for an employee\n   */\n  async getEmployeeOvertimeRequests(\n    employeeId: string,\n    startDate?: Date,\n    endDate?: Date,\n    page: number = 1,\n    limit: number = 20\n  ): Promise<{\n    requests: OvertimeWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return await overtimeRequestModel.listOvertimeRequests({\n      employeeId,\n      startDate,\n      endDate,\n      page,\n      limit,\n      sortBy: 'created_at',\n      sortOrder: 'desc'\n    });\n  }\n\n  /**\n   * Validate overtime request\n   */\n  async validateOvertimeRequest(data: CreateOvertimeData): Promise<{\n    isValid: boolean;\n    errors: string[];\n  }> {\n    const errors: string[] = [];\n\n    // Check if employee exists\n    const employee = await employeeModel.findById(data.employeeId);\n    if (!employee) {\n      errors.push('Employee not found');\n    } else if (employee.status !== 'active') {\n      errors.push('Employee is not active');\n    }\n\n    // Validate overtime date\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const overtimeDate = new Date(data.requestDate);\n    overtimeDate.setHours(0, 0, 0, 0);\n    \n    if (overtimeDate < today) {\n      errors.push('Cannot request overtime for past dates');\n    }\n\n    // Validate time range - work with time strings directly\n    let startTimeStr: string;\n    let endTimeStr: string;\n    \n    if (typeof data.startTime === 'string') {\n      // Validate time format and ensure HH:MM:SS format\n      const timeParts = data.startTime.split(':').map(Number);\n      const hours = timeParts[0] || 0;\n      const minutes = timeParts[1] || 0;\n      const seconds = timeParts[2] || 0; // Default to 0 if not provided\n      \n      // Validate time components\n      if (isNaN(hours) || isNaN(minutes) || isNaN(seconds) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59 || seconds < 0 || seconds > 59) {\n        errors.push('Invalid start time format');\n        return { isValid: false, errors };\n      }\n      \n      startTimeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    } else if (data.startTime instanceof Date) {\n      // Convert Date object to time string\n      startTimeStr = `${data.startTime.getUTCHours().toString().padStart(2, '0')}:${data.startTime.getUTCMinutes().toString().padStart(2, '0')}:${data.startTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    } else {\n      errors.push('Invalid start time format');\n      return { isValid: false, errors };\n    }\n    \n    if (typeof data.endTime === 'string') {\n      // Validate time format and ensure HH:MM:SS format\n      const timeParts = data.endTime.split(':').map(Number);\n      const hours = timeParts[0] || 0;\n      const minutes = timeParts[1] || 0;\n      const seconds = timeParts[2] || 0; // Default to 0 if not provided\n      \n      // Validate time components\n      if (isNaN(hours) || isNaN(minutes) || isNaN(seconds) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59 || seconds < 0 || seconds > 59) {\n        errors.push('Invalid end time format');\n        return { isValid: false, errors };\n      }\n      \n      endTimeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    } else if (data.endTime instanceof Date) {\n      // Convert Date object to time string\n      endTimeStr = `${data.endTime.getUTCHours().toString().padStart(2, '0')}:${data.endTime.getUTCMinutes().toString().padStart(2, '0')}:${data.endTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    } else {\n      errors.push('Invalid end time format');\n      return { isValid: false, errors };\n    }\n    \n    // Validate time order by comparing time strings\n    if (startTimeStr >= endTimeStr) {\n      errors.push('Start time must be before end time');\n    }\n\n    // Validate requested hours by creating temporary Date objects for calculation only\n    const tempStart = new Date(`2000-01-01T${startTimeStr}`);\n    const tempEnd = new Date(`2000-01-01T${endTimeStr}`);\n    const calculatedHours = (tempEnd.getTime() - tempStart.getTime()) / (1000 * 60 * 60);\n    if (Math.abs(calculatedHours - data.requestedHours) > 0.1) {\n      errors.push('Requested hours do not match the time range');\n    }\n\n    if (data.requestedHours <= 0) {\n      errors.push('Requested hours must be greater than 0');\n    }\n\n    // Validate reason\n    if (!data.reason || data.reason.trim().length < 10) {\n      errors.push('Reason must be at least 10 characters long');\n    }\n\n    // Check for overlapping requests\n    if (employee) {\n      // Create temporary Date objects for the overlapping check\n      const tempStartForCheck = new Date(`2000-01-01T${startTimeStr}`);\n      const tempEndForCheck = new Date(`2000-01-01T${endTimeStr}`);\n      const overlappingRequest = await this.getOverlappingRequest(\n        data.employeeId, \n        data.requestDate, \n        tempStartForCheck, \n        tempEndForCheck\n      );\n      if (overlappingRequest) {\n        errors.push('An overtime request already exists for this time period');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Get overtime summary for an employee\n   */\n  async getEmployeeOvertimeSummary(\n    employeeId: string, \n        _startDate: Date,\n    _endDate: Date\n  ): Promise<{\n    totalRequests: number;\n    approvedRequests: number;\n    totalHours: number;\n    approvedHours: number;\n    leaveDaysAccrued: number;\n  }> {\n    const stats = await this.getOvertimeStats(employeeId);\n    \n    // Get overtime to leave ratio\n    const query = `\n      SELECT setting_value \n      FROM system_settings \n      WHERE setting_key = 'overtime_to_leave_ratio'\n    `;\n    \n    const result = await getPool().query(query);\n    const overtimeToLeaveRatio = result.rows.length > 0 ? parseFloat(result.rows[0].setting_value) : 0.125;\n    \n    const leaveDaysAccrued = stats.approvedHours * overtimeToLeaveRatio;\n\n    return {\n      totalRequests: stats.totalRequests,\n      approvedRequests: stats.approvedRequests,\n      totalHours: stats.totalHours,\n      approvedHours: stats.approvedHours,\n      leaveDaysAccrued: Math.round(leaveDaysAccrued * 100) / 100\n    };\n  }\n}\n\nexport const overtimeService = new OvertimeService();"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}