0f695224d0d837279ba72eb7c1334d15
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the dependencies
jest.mock('../../../src/config/jwt');
jest.mock('../../../src/services/auth/authService');
const authenticate_1 = require("../../../src/middleware/auth/authenticate");
const jwt_1 = require("../../../src/config/jwt");
const authService_1 = require("../../../src/services/auth/authService");
const mockExtractTokenFromHeader = jwt_1.extractTokenFromHeader;
const mockAuthService = authService_1.authService;
describe('Authentication Middleware', () => {
    let mockRequest;
    let mockResponse;
    let mockNext;
    beforeEach(() => {
        jest.clearAllMocks();
        // Mock request object
        mockRequest = {
            method: 'GET',
            headers: {
                authorization: 'Bearer valid-token'
            },
            requestId: 'test-request-123',
            user: undefined
        };
        // Mock response object
        mockResponse = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn().mockReturnThis()
        };
        // Mock next function
        mockNext = jest.fn();
    });
    describe('authenticate', () => {
        it('should authenticate successfully with valid token', async () => {
            // Arrange
            const mockUser = {
                id: 'user-123',
                email: 'test@example.com',
                role: 'employee',
                firstName: 'John',
                lastName: 'Doe'
            };
            mockExtractTokenFromHeader.mockReturnValue('valid-token');
            mockAuthService.validateToken.mockResolvedValue({
                success: true,
                message: 'Token is valid',
                data: { user: mockUser }
            });
            // Act
            await (0, authenticate_1.authenticate)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockExtractTokenFromHeader).toHaveBeenCalledWith('Bearer valid-token');
            expect(mockAuthService.validateToken).toHaveBeenCalledWith('valid-token');
            expect(mockRequest.user).toEqual(mockUser);
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
            expect(mockResponse.json).not.toHaveBeenCalled();
        });
        it('should handle CORS preflight requests', async () => {
            // Arrange
            mockRequest.method = 'OPTIONS';
            // Act
            await (0, authenticate_1.authenticate)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockExtractTokenFromHeader).not.toHaveBeenCalled();
            expect(mockAuthService.validateToken).not.toHaveBeenCalled();
        });
        it('should return 401 for missing token', async () => {
            // Arrange
            mockExtractTokenFromHeader.mockReturnValue(null);
            // Act
            await (0, authenticate_1.authenticate)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Access token required',
                error: 'MISSING_TOKEN',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should return 401 for invalid token', async () => {
            // Arrange
            mockExtractTokenFromHeader.mockReturnValue('invalid-token');
            mockAuthService.validateToken.mockResolvedValue({
                success: false,
                message: 'Token is invalid or expired',
                error: 'INVALID_TOKEN'
            });
            // Act
            await (0, authenticate_1.authenticate)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Token is invalid or expired',
                error: 'INVALID_TOKEN',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should return 401 for expired token', async () => {
            // Arrange
            mockExtractTokenFromHeader.mockReturnValue('expired-token');
            mockAuthService.validateToken.mockResolvedValue({
                success: false,
                message: 'Token has expired',
                error: 'TOKEN_EXPIRED'
            });
            // Act
            await (0, authenticate_1.authenticate)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Token has expired',
                error: 'TOKEN_EXPIRED',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should handle service errors gracefully', async () => {
            // Arrange
            mockExtractTokenFromHeader.mockReturnValue('valid-token');
            mockAuthService.validateToken.mockRejectedValue(new Error('Service error'));
            // Act
            await (0, authenticate_1.authenticate)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Authentication failed',
                error: 'AUTHENTICATION_FAILED',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should handle missing requestId gracefully', async () => {
            // Arrange
            mockRequest.requestId = undefined;
            mockExtractTokenFromHeader.mockReturnValue(null);
            // Act
            await (0, authenticate_1.authenticate)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Access token required',
                error: 'MISSING_TOKEN',
                timestamp: expect.any(String),
                requestId: 'unknown'
            });
        });
    });
    describe('authenticateOptional', () => {
        it('should set user info when valid token is provided', async () => {
            // Arrange
            const mockUser = {
                id: 'user-123',
                email: 'test@example.com',
                role: 'employee',
                firstName: 'John',
                lastName: 'Doe'
            };
            mockExtractTokenFromHeader.mockReturnValue('valid-token');
            mockAuthService.validateToken.mockResolvedValue({
                success: true,
                message: 'Token is valid',
                data: { user: mockUser }
            });
            // Act
            await (0, authenticate_1.authenticateOptional)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockRequest.user).toEqual(mockUser);
            expect(mockNext).toHaveBeenCalled();
        });
        it('should continue without authentication when no token is provided', async () => {
            // Arrange
            mockExtractTokenFromHeader.mockReturnValue(null);
            // Act
            await (0, authenticate_1.authenticateOptional)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockRequest.user).toBeUndefined();
            expect(mockNext).toHaveBeenCalled();
            expect(mockAuthService.validateToken).not.toHaveBeenCalled();
        });
        it('should continue without authentication when token is invalid', async () => {
            // Arrange
            mockExtractTokenFromHeader.mockReturnValue('invalid-token');
            mockAuthService.validateToken.mockResolvedValue({
                success: false,
                message: 'Token is invalid',
                error: 'INVALID_TOKEN'
            });
            // Act
            await (0, authenticate_1.authenticateOptional)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockRequest.user).toBeUndefined();
            expect(mockNext).toHaveBeenCalled();
        });
        it('should continue without authentication when service throws error', async () => {
            // Arrange
            mockExtractTokenFromHeader.mockReturnValue('valid-token');
            mockAuthService.validateToken.mockRejectedValue(new Error('Service error'));
            // Act
            await (0, authenticate_1.authenticateOptional)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockRequest.user).toBeUndefined();
            expect(mockNext).toHaveBeenCalled();
        });
    });
    describe('requireAuth', () => {
        it('should call next when user is authenticated', () => {
            // Arrange
            mockRequest.user = {
                userId: 'user-123',
                email: 'test@example.com',
                role: 'employee',
                tokenVersion: 1
            };
            // Act
            (0, authenticate_1.requireAuth)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
        });
        it('should return 401 when user is not authenticated', () => {
            // Arrange
            mockRequest.user = undefined;
            // Act
            (0, authenticate_1.requireAuth)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Authentication required',
                error: 'AUTHENTICATION_REQUIRED',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should handle missing requestId gracefully', () => {
            // Arrange
            mockRequest.user = undefined;
            mockRequest.requestId = undefined;
            // Act
            (0, authenticate_1.requireAuth)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Authentication required',
                error: 'AUTHENTICATION_REQUIRED',
                timestamp: expect.any(String),
                requestId: 'unknown'
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,