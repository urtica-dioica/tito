bf7c4caa417eb63290a33cfc72056836
"use strict";

/* istanbul ignore next */
function cov_12c3ddd1no() {
  var path = "/home/kim/tito/server/src/middleware/redis/sessionMiddleware.ts";
  var hash = "88c46908465bdb2e94867a9bc1cf31bb2888ef12";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/middleware/redis/sessionMiddleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 181
        }
      },
      "4": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 67
        }
      },
      "5": {
        start: {
          line: 8,
          column: 14
        },
        end: {
          line: 8,
          column: 41
        }
      },
      "6": {
        start: {
          line: 9,
          column: 16
        },
        end: {
          line: 9,
          column: 45
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 63
        }
      },
      "8": {
        start: {
          line: 14,
          column: 26
        },
        end: {
          line: 77,
          column: 1
        }
      },
      "9": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 76,
          column: 5
        }
      },
      "10": {
        start: {
          line: 16,
          column: 22
        },
        end: {
          line: 16,
          column: 62
        }
      },
      "11": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 20,
          column: 9
        }
      },
      "12": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 26
        }
      },
      "13": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "14": {
        start: {
          line: 24,
          column: 30
        },
        end: {
          line: 24,
          column: 69
        }
      },
      "15": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "16": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 26
        }
      },
      "17": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 29,
          column: 59
        }
      },
      "18": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "19": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 26
        }
      },
      "20": {
        start: {
          line: 35,
          column: 26
        },
        end: {
          line: 35,
          column: 79
        }
      },
      "21": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 34
        }
      },
      "22": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "23": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 86
        }
      },
      "24": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 26
        }
      },
      "25": {
        start: {
          line: 43,
          column: 26
        },
        end: {
          line: 43,
          column: 81
        }
      },
      "26": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "27": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 56,
          column: 14
        }
      },
      "28": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 88
        }
      },
      "29": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 84
        }
      },
      "30": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 64
        }
      },
      "31": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 88
        }
      },
      "32": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 71
        }
      },
      "33": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 79
        }
      },
      "34": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 34
        }
      },
      "35": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 15
        }
      },
      "36": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 67
        }
      },
      "37": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "38": {
        start: {
          line: 78,
          column: 0
        },
        end: {
          line: 78,
          column: 46
        }
      },
      "39": {
        start: {
          line: 82,
          column: 23
        },
        end: {
          line: 101,
          column: 1
        }
      },
      "40": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "41": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 88,
          column: 11
        }
      },
      "42": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "43": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 99,
          column: 5
        }
      },
      "44": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 97,
          column: 11
        }
      },
      "45": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 15
        }
      },
      "46": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 100,
          column: 11
        }
      },
      "47": {
        start: {
          line: 102,
          column: 0
        },
        end: {
          line: 102,
          column: 40
        }
      },
      "48": {
        start: {
          line: 106,
          column: 23
        },
        end: {
          line: 115,
          column: 1
        }
      },
      "49": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "50": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 70
        }
      },
      "51": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 64
        }
      },
      "52": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 116,
          column: 40
        }
      },
      "53": {
        start: {
          line: 120,
          column: 31
        },
        end: {
          line: 129,
          column: 1
        }
      },
      "54": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 128,
          column: 5
        }
      },
      "55": {
        start: {
          line: 122,
          column: 24
        },
        end: {
          line: 122,
          column: 45
        }
      },
      "56": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 62
        }
      },
      "57": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 77
        }
      },
      "58": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 91
        }
      },
      "59": {
        start: {
          line: 130,
          column: 0
        },
        end: {
          line: 130,
          column: 56
        }
      },
      "60": {
        start: {
          line: 134,
          column: 30
        },
        end: {
          line: 151,
          column: 1
        }
      },
      "61": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 150,
          column: 5
        }
      },
      "62": {
        start: {
          line: 136,
          column: 24
        },
        end: {
          line: 136,
          column: 45
        }
      },
      "63": {
        start: {
          line: 137,
          column: 21
        },
        end: {
          line: 137,
          column: 71
        }
      },
      "64": {
        start: {
          line: 138,
          column: 25
        },
        end: {
          line: 138,
          column: 27
        }
      },
      "65": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "66": {
        start: {
          line: 140,
          column: 32
        },
        end: {
          line: 140,
          column: 79
        }
      },
      "67": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 143,
          column: 13
        }
      },
      "68": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 142,
          column: 43
        }
      },
      "69": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 24
        }
      },
      "70": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 91
        }
      },
      "71": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 18
        }
      },
      "72": {
        start: {
          line: 152,
          column: 0
        },
        end: {
          line: 152,
          column: 54
        }
      },
      "73": {
        start: {
          line: 156,
          column: 29
        },
        end: {
          line: 164,
          column: 1
        }
      },
      "74": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 162,
          column: 5
        }
      },
      "75": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "76": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 81
        }
      },
      "77": {
        start: {
          line: 163,
          column: 4
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "78": {
        start: {
          line: 165,
          column: 0
        },
        end: {
          line: 165,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 26
          },
          end: {
            line: 14,
            column: 27
          }
        },
        loc: {
          start: {
            line: 14,
            column: 53
          },
          end: {
            line: 77,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 82,
            column: 24
          }
        },
        loc: {
          start: {
            line: 82,
            column: 43
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 82
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 106,
            column: 23
          },
          end: {
            line: 106,
            column: 24
          }
        },
        loc: {
          start: {
            line: 106,
            column: 35
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 106
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 120,
            column: 31
          },
          end: {
            line: 120,
            column: 32
          }
        },
        loc: {
          start: {
            line: 120,
            column: 49
          },
          end: {
            line: 129,
            column: 1
          }
        },
        line: 120
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 134,
            column: 30
          },
          end: {
            line: 134,
            column: 31
          }
        },
        loc: {
          start: {
            line: 134,
            column: 48
          },
          end: {
            line: 151,
            column: 1
          }
        },
        line: 134
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 156,
            column: 29
          },
          end: {
            line: 156,
            column: 30
          }
        },
        loc: {
          start: {
            line: 156,
            column: 50
          },
          end: {
            line: 164,
            column: 1
          }
        },
        line: 156
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 159,
            column: 79
          },
          end: {
            line: 159,
            column: 80
          }
        },
        loc: {
          start: {
            line: 159,
            column: 88
          },
          end: {
            line: 161,
            column: 9
          }
        },
        line: 159
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "5": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 40
          }
        }, {
          start: {
            line: 22,
            column: 44
          },
          end: {
            line: 22,
            column: 77
          }
        }, {
          start: {
            line: 22,
            column: 81
          },
          end: {
            line: 22,
            column: 113
          }
        }],
        line: 22
      },
      "6": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "7": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 30,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 30,
            column: 20
          }
        }, {
          start: {
            line: 30,
            column: 24
          },
          end: {
            line: 30,
            column: 39
          }
        }],
        line: 30
      },
      "8": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "9": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: 61,
            column: 13
          },
          end: {
            line: 68,
            column: 9
          }
        }],
        line: 44
      },
      "10": {
        loc: {
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 54,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 54,
            column: 33
          }
        }, {
          start: {
            line: 54,
            column: 37
          },
          end: {
            line: 54,
            column: 65
          }
        }, {
          start: {
            line: 54,
            column: 69
          },
          end: {
            line: 54,
            column: 78
          }
        }],
        line: 54
      },
      "11": {
        loc: {
          start: {
            line: 55,
            column: 27
          },
          end: {
            line: 55,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 27
          },
          end: {
            line: 55,
            column: 48
          }
        }, {
          start: {
            line: 55,
            column: 52
          },
          end: {
            line: 55,
            column: 61
          }
        }],
        line: 55
      },
      "12": {
        loc: {
          start: {
            line: 64,
            column: 36
          },
          end: {
            line: 64,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 36
          },
          end: {
            line: 64,
            column: 42
          }
        }, {
          start: {
            line: 64,
            column: 46
          },
          end: {
            line: 64,
            column: 74
          }
        }, {
          start: {
            line: 64,
            column: 78
          },
          end: {
            line: 64,
            column: 87
          }
        }],
        line: 64
      },
      "13": {
        loc: {
          start: {
            line: 65,
            column: 36
          },
          end: {
            line: 65,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 36
          },
          end: {
            line: 65,
            column: 57
          }
        }, {
          start: {
            line: 65,
            column: 61
          },
          end: {
            line: 65,
            column: 70
          }
        }],
        line: 65
      },
      "14": {
        loc: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "15": {
        loc: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "16": {
        loc: {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "17": {
        loc: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "18": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 157,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 157,
            column: 19
          }
        }, {
          start: {
            line: 157,
            column: 23
          },
          end: {
            line: 157,
            column: 36
          }
        }],
        line: 157
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/middleware/redis/sessionMiddleware.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/middleware/redis/sessionMiddleware.ts"],
      sourcesContent: ["import { Request, Response, NextFunction } from 'express';\nimport { redisService } from '../../services/redis/redisService';\nimport { verifyAccessToken } from '../../config/jwt';\nimport { isRedisAvailable } from '../../config/redis';\nimport logger from '../../utils/logger';\n\nexport interface SessionData {\n  userId: string;\n  email: string;\n  role: string;\n  firstName: string;\n  lastName: string;\n  isActive: boolean;\n  lastActivity: string;\n  ipAddress: string;\n  userAgent: string;\n}\n\nexport interface AuthenticatedRequest extends Request {\n  session?: SessionData;\n  sessionId?: string;\n}\n\n/**\n * Session middleware that manages user sessions using Redis\n */\nexport const sessionMiddleware = async (\n  req: AuthenticatedRequest,\n  _res: Response,\n  next: NextFunction\n): Promise<void> => {\n  try {\n    const token = req.headers.authorization?.split(' ')[1];\n    \n    if (!token) {\n      // No token, continue without session\n      return next();\n    }\n\n    // Skip JWT verification for development tokens\n    if (token.includes('test-token') || token.includes('dept-head-token') || token.includes('employee-token')) {\n      // For development tokens, create a mock session ID\n      const sessionId = `dev-session:${token.substring(0, 16)}`;\n      req.sessionId = sessionId;\n      return next();\n    }\n\n    // Verify the JWT token\n    const decoded = verifyAccessToken(token) as any;\n    if (!decoded || !decoded.userId) {\n      // Invalid token, continue without session\n      return next();\n    }\n\n    // Generate session ID from user ID and token\n    const sessionId = `session:${decoded.userId}:${token.substring(0, 16)}`;\n    req.sessionId = sessionId;\n\n    // Skip session management if Redis is not available (e.g., in test environment)\n    if (!isRedisAvailable()) {\n      logger.warn('Redis not available, skipping session management');\n      return next();\n    }\n\n    // Try to get existing session from Redis\n    let sessionData = await redisService.getSession<SessionData>(sessionId);\n\n    if (!sessionData) {\n      // Create new session\n      sessionData = {\n        userId: decoded.userId,\n        email: decoded.email,\n        role: decoded.role,\n        firstName: decoded.firstName,\n        lastName: decoded.lastName,\n        isActive: decoded.isActive,\n        lastActivity: new Date().toISOString(),\n        ipAddress: req.ip || req.connection.remoteAddress || 'unknown',\n        userAgent: req.get('User-Agent') || 'unknown'\n      };\n\n      // Store session in Redis with 24-hour expiry\n      await redisService.setSession(sessionId, sessionData, 86400);\n      logger.info(`New session created for user ${decoded.userId}`);\n    } else {\n      // Update last activity\n      sessionData.lastActivity = new Date().toISOString();\n      sessionData.ipAddress = req.ip || req.connection.remoteAddress || 'unknown';\n      sessionData.userAgent = req.get('User-Agent') || 'unknown';\n\n      // Refresh session expiry\n      await redisService.refreshSession(sessionId, 86400);\n    }\n\n    req.session = sessionData;\n    next();\n  } catch (error) {\n    logger.error('Session middleware error:', error);\n    // Continue without session on error\n    next();\n  }\n};\n\n/**\n * Session validation middleware - ensures valid session exists\n */\nexport const requireSession = (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n): void => {\n  if (!req.session) {\n    res.status(401).json({\n      success: false,\n      message: 'Valid session required',\n      error: 'SESSION_REQUIRED'\n    });\n    return;\n  }\n\n  // Check if session is still active\n  if (!req.session.isActive) {\n    res.status(401).json({\n      success: false,\n      message: 'Session is inactive',\n      error: 'SESSION_INACTIVE'\n    });\n    return;\n  }\n\n  next();\n};\n\n/**\n * Session cleanup middleware - removes expired sessions\n */\nexport const sessionCleanup = async (): Promise<void> => {\n  try {\n    // This would typically run as a scheduled job\n    // For now, we'll just log that it's available\n    logger.info('Session cleanup middleware available');\n  } catch (error) {\n    logger.error('Session cleanup error:', error);\n  }\n};\n\n/**\n * Invalidate user sessions (for logout, password change, etc.)\n */\nexport const invalidateUserSessions = async (userId: string): Promise<void> => {\n  try {\n    const pattern = `session:${userId}:*`;\n    await redisService.clearCache(pattern);\n    logger.info(`Invalidated all sessions for user ${userId}`);\n  } catch (error) {\n    logger.error(`Failed to invalidate sessions for user ${userId}:`, error);\n  }\n};\n\n/**\n * Get active sessions for a user\n */\nexport const getUserActiveSessions = async (userId: string): Promise<SessionData[]> => {\n  try {\n    const pattern = `session:${userId}:*`;\n    const keys = await redisService.getKeys(pattern);\n    const sessions: SessionData[] = [];\n\n    for (const key of keys) {\n      const sessionData = await redisService.getCache<SessionData>(key);\n      if (sessionData) {\n        sessions.push(sessionData);\n      }\n    }\n\n    return sessions;\n  } catch (error) {\n    logger.error(`Failed to get active sessions for user ${userId}:`, error);\n    return [];\n  }\n};\n\n/**\n * Session activity tracking middleware\n */\nexport const trackSessionActivity = (\n  req: AuthenticatedRequest,\n  _res: Response,\n  next: NextFunction\n): void => {\n  if (req.session && req.sessionId) {\n    // Update last activity in background\n    redisService.refreshSession(req.sessionId, 86400).catch(error => {\n      logger.error('Failed to refresh session activity:', error);\n    });\n  }\n  next();\n}; "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "88c46908465bdb2e94867a9bc1cf31bb2888ef12"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_12c3ddd1no = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_12c3ddd1no();
var __importDefault =
/* istanbul ignore next */
(cov_12c3ddd1no().s[0]++,
/* istanbul ignore next */
(cov_12c3ddd1no().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_12c3ddd1no().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_12c3ddd1no().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_12c3ddd1no().f[0]++;
  cov_12c3ddd1no().s[1]++;
  return /* istanbul ignore next */(cov_12c3ddd1no().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_12c3ddd1no().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_12c3ddd1no().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_12c3ddd1no().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_12c3ddd1no().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_12c3ddd1no().s[3]++;
exports.trackSessionActivity = exports.getUserActiveSessions = exports.invalidateUserSessions = exports.sessionCleanup = exports.requireSession = exports.sessionMiddleware = void 0;
const redisService_1 =
/* istanbul ignore next */
(cov_12c3ddd1no().s[4]++, require("../../services/redis/redisService"));
const jwt_1 =
/* istanbul ignore next */
(cov_12c3ddd1no().s[5]++, require("../../config/jwt"));
const redis_1 =
/* istanbul ignore next */
(cov_12c3ddd1no().s[6]++, require("../../config/redis"));
const logger_1 =
/* istanbul ignore next */
(cov_12c3ddd1no().s[7]++, __importDefault(require("../../utils/logger")));
/**
 * Session middleware that manages user sessions using Redis
 */
/* istanbul ignore next */
cov_12c3ddd1no().s[8]++;
const sessionMiddleware = async (req, _res, next) => {
  /* istanbul ignore next */
  cov_12c3ddd1no().f[1]++;
  cov_12c3ddd1no().s[9]++;
  try {
    const token =
    /* istanbul ignore next */
    (cov_12c3ddd1no().s[10]++, req.headers.authorization?.split(' ')[1]);
    /* istanbul ignore next */
    cov_12c3ddd1no().s[11]++;
    if (!token) {
      /* istanbul ignore next */
      cov_12c3ddd1no().b[3][0]++;
      cov_12c3ddd1no().s[12]++;
      // No token, continue without session
      return next();
    } else
    /* istanbul ignore next */
    {
      cov_12c3ddd1no().b[3][1]++;
    }
    // Skip JWT verification for development tokens
    cov_12c3ddd1no().s[13]++;
    if (
    /* istanbul ignore next */
    (cov_12c3ddd1no().b[5][0]++, token.includes('test-token')) ||
    /* istanbul ignore next */
    (cov_12c3ddd1no().b[5][1]++, token.includes('dept-head-token')) ||
    /* istanbul ignore next */
    (cov_12c3ddd1no().b[5][2]++, token.includes('employee-token'))) {
      /* istanbul ignore next */
      cov_12c3ddd1no().b[4][0]++;
      // For development tokens, create a mock session ID
      const sessionId =
      /* istanbul ignore next */
      (cov_12c3ddd1no().s[14]++, `dev-session:${token.substring(0, 16)}`);
      /* istanbul ignore next */
      cov_12c3ddd1no().s[15]++;
      req.sessionId = sessionId;
      /* istanbul ignore next */
      cov_12c3ddd1no().s[16]++;
      return next();
    } else
    /* istanbul ignore next */
    {
      cov_12c3ddd1no().b[4][1]++;
    }
    // Verify the JWT token
    const decoded =
    /* istanbul ignore next */
    (cov_12c3ddd1no().s[17]++, (0, jwt_1.verifyAccessToken)(token));
    /* istanbul ignore next */
    cov_12c3ddd1no().s[18]++;
    if (
    /* istanbul ignore next */
    (cov_12c3ddd1no().b[7][0]++, !decoded) ||
    /* istanbul ignore next */
    (cov_12c3ddd1no().b[7][1]++, !decoded.userId)) {
      /* istanbul ignore next */
      cov_12c3ddd1no().b[6][0]++;
      cov_12c3ddd1no().s[19]++;
      // Invalid token, continue without session
      return next();
    } else
    /* istanbul ignore next */
    {
      cov_12c3ddd1no().b[6][1]++;
    }
    // Generate session ID from user ID and token
    const sessionId =
    /* istanbul ignore next */
    (cov_12c3ddd1no().s[20]++, `session:${decoded.userId}:${token.substring(0, 16)}`);
    /* istanbul ignore next */
    cov_12c3ddd1no().s[21]++;
    req.sessionId = sessionId;
    // Skip session management if Redis is not available (e.g., in test environment)
    /* istanbul ignore next */
    cov_12c3ddd1no().s[22]++;
    if (!(0, redis_1.isRedisAvailable)()) {
      /* istanbul ignore next */
      cov_12c3ddd1no().b[8][0]++;
      cov_12c3ddd1no().s[23]++;
      logger_1.default.warn('Redis not available, skipping session management');
      /* istanbul ignore next */
      cov_12c3ddd1no().s[24]++;
      return next();
    } else
    /* istanbul ignore next */
    {
      cov_12c3ddd1no().b[8][1]++;
    }
    // Try to get existing session from Redis
    let sessionData =
    /* istanbul ignore next */
    (cov_12c3ddd1no().s[25]++, await redisService_1.redisService.getSession(sessionId));
    /* istanbul ignore next */
    cov_12c3ddd1no().s[26]++;
    if (!sessionData) {
      /* istanbul ignore next */
      cov_12c3ddd1no().b[9][0]++;
      cov_12c3ddd1no().s[27]++;
      // Create new session
      sessionData = {
        userId: decoded.userId,
        email: decoded.email,
        role: decoded.role,
        firstName: decoded.firstName,
        lastName: decoded.lastName,
        isActive: decoded.isActive,
        lastActivity: new Date().toISOString(),
        ipAddress:
        /* istanbul ignore next */
        (cov_12c3ddd1no().b[10][0]++, req.ip) ||
        /* istanbul ignore next */
        (cov_12c3ddd1no().b[10][1]++, req.connection.remoteAddress) ||
        /* istanbul ignore next */
        (cov_12c3ddd1no().b[10][2]++, 'unknown'),
        userAgent:
        /* istanbul ignore next */
        (cov_12c3ddd1no().b[11][0]++, req.get('User-Agent')) ||
        /* istanbul ignore next */
        (cov_12c3ddd1no().b[11][1]++, 'unknown')
      };
      // Store session in Redis with 24-hour expiry
      /* istanbul ignore next */
      cov_12c3ddd1no().s[28]++;
      await redisService_1.redisService.setSession(sessionId, sessionData, 86400);
      /* istanbul ignore next */
      cov_12c3ddd1no().s[29]++;
      logger_1.default.info(`New session created for user ${decoded.userId}`);
    } else {
      /* istanbul ignore next */
      cov_12c3ddd1no().b[9][1]++;
      cov_12c3ddd1no().s[30]++;
      // Update last activity
      sessionData.lastActivity = new Date().toISOString();
      /* istanbul ignore next */
      cov_12c3ddd1no().s[31]++;
      sessionData.ipAddress =
      /* istanbul ignore next */
      (cov_12c3ddd1no().b[12][0]++, req.ip) ||
      /* istanbul ignore next */
      (cov_12c3ddd1no().b[12][1]++, req.connection.remoteAddress) ||
      /* istanbul ignore next */
      (cov_12c3ddd1no().b[12][2]++, 'unknown');
      /* istanbul ignore next */
      cov_12c3ddd1no().s[32]++;
      sessionData.userAgent =
      /* istanbul ignore next */
      (cov_12c3ddd1no().b[13][0]++, req.get('User-Agent')) ||
      /* istanbul ignore next */
      (cov_12c3ddd1no().b[13][1]++, 'unknown');
      // Refresh session expiry
      /* istanbul ignore next */
      cov_12c3ddd1no().s[33]++;
      await redisService_1.redisService.refreshSession(sessionId, 86400);
    }
    /* istanbul ignore next */
    cov_12c3ddd1no().s[34]++;
    req.session = sessionData;
    /* istanbul ignore next */
    cov_12c3ddd1no().s[35]++;
    next();
  } catch (error) {
    /* istanbul ignore next */
    cov_12c3ddd1no().s[36]++;
    logger_1.default.error('Session middleware error:', error);
    // Continue without session on error
    /* istanbul ignore next */
    cov_12c3ddd1no().s[37]++;
    next();
  }
};
/* istanbul ignore next */
cov_12c3ddd1no().s[38]++;
exports.sessionMiddleware = sessionMiddleware;
/**
 * Session validation middleware - ensures valid session exists
 */
/* istanbul ignore next */
cov_12c3ddd1no().s[39]++;
const requireSession = (req, res, next) => {
  /* istanbul ignore next */
  cov_12c3ddd1no().f[2]++;
  cov_12c3ddd1no().s[40]++;
  if (!req.session) {
    /* istanbul ignore next */
    cov_12c3ddd1no().b[14][0]++;
    cov_12c3ddd1no().s[41]++;
    res.status(401).json({
      success: false,
      message: 'Valid session required',
      error: 'SESSION_REQUIRED'
    });
    /* istanbul ignore next */
    cov_12c3ddd1no().s[42]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_12c3ddd1no().b[14][1]++;
  }
  // Check if session is still active
  cov_12c3ddd1no().s[43]++;
  if (!req.session.isActive) {
    /* istanbul ignore next */
    cov_12c3ddd1no().b[15][0]++;
    cov_12c3ddd1no().s[44]++;
    res.status(401).json({
      success: false,
      message: 'Session is inactive',
      error: 'SESSION_INACTIVE'
    });
    /* istanbul ignore next */
    cov_12c3ddd1no().s[45]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_12c3ddd1no().b[15][1]++;
  }
  cov_12c3ddd1no().s[46]++;
  next();
};
/* istanbul ignore next */
cov_12c3ddd1no().s[47]++;
exports.requireSession = requireSession;
/**
 * Session cleanup middleware - removes expired sessions
 */
/* istanbul ignore next */
cov_12c3ddd1no().s[48]++;
const sessionCleanup = async () => {
  /* istanbul ignore next */
  cov_12c3ddd1no().f[3]++;
  cov_12c3ddd1no().s[49]++;
  try {
    /* istanbul ignore next */
    cov_12c3ddd1no().s[50]++;
    // This would typically run as a scheduled job
    // For now, we'll just log that it's available
    logger_1.default.info('Session cleanup middleware available');
  } catch (error) {
    /* istanbul ignore next */
    cov_12c3ddd1no().s[51]++;
    logger_1.default.error('Session cleanup error:', error);
  }
};
/* istanbul ignore next */
cov_12c3ddd1no().s[52]++;
exports.sessionCleanup = sessionCleanup;
/**
 * Invalidate user sessions (for logout, password change, etc.)
 */
/* istanbul ignore next */
cov_12c3ddd1no().s[53]++;
const invalidateUserSessions = async userId => {
  /* istanbul ignore next */
  cov_12c3ddd1no().f[4]++;
  cov_12c3ddd1no().s[54]++;
  try {
    const pattern =
    /* istanbul ignore next */
    (cov_12c3ddd1no().s[55]++, `session:${userId}:*`);
    /* istanbul ignore next */
    cov_12c3ddd1no().s[56]++;
    await redisService_1.redisService.clearCache(pattern);
    /* istanbul ignore next */
    cov_12c3ddd1no().s[57]++;
    logger_1.default.info(`Invalidated all sessions for user ${userId}`);
  } catch (error) {
    /* istanbul ignore next */
    cov_12c3ddd1no().s[58]++;
    logger_1.default.error(`Failed to invalidate sessions for user ${userId}:`, error);
  }
};
/* istanbul ignore next */
cov_12c3ddd1no().s[59]++;
exports.invalidateUserSessions = invalidateUserSessions;
/**
 * Get active sessions for a user
 */
/* istanbul ignore next */
cov_12c3ddd1no().s[60]++;
const getUserActiveSessions = async userId => {
  /* istanbul ignore next */
  cov_12c3ddd1no().f[5]++;
  cov_12c3ddd1no().s[61]++;
  try {
    const pattern =
    /* istanbul ignore next */
    (cov_12c3ddd1no().s[62]++, `session:${userId}:*`);
    const keys =
    /* istanbul ignore next */
    (cov_12c3ddd1no().s[63]++, await redisService_1.redisService.getKeys(pattern));
    const sessions =
    /* istanbul ignore next */
    (cov_12c3ddd1no().s[64]++, []);
    /* istanbul ignore next */
    cov_12c3ddd1no().s[65]++;
    for (const key of keys) {
      const sessionData =
      /* istanbul ignore next */
      (cov_12c3ddd1no().s[66]++, await redisService_1.redisService.getCache(key));
      /* istanbul ignore next */
      cov_12c3ddd1no().s[67]++;
      if (sessionData) {
        /* istanbul ignore next */
        cov_12c3ddd1no().b[16][0]++;
        cov_12c3ddd1no().s[68]++;
        sessions.push(sessionData);
      } else
      /* istanbul ignore next */
      {
        cov_12c3ddd1no().b[16][1]++;
      }
    }
    /* istanbul ignore next */
    cov_12c3ddd1no().s[69]++;
    return sessions;
  } catch (error) {
    /* istanbul ignore next */
    cov_12c3ddd1no().s[70]++;
    logger_1.default.error(`Failed to get active sessions for user ${userId}:`, error);
    /* istanbul ignore next */
    cov_12c3ddd1no().s[71]++;
    return [];
  }
};
/* istanbul ignore next */
cov_12c3ddd1no().s[72]++;
exports.getUserActiveSessions = getUserActiveSessions;
/**
 * Session activity tracking middleware
 */
/* istanbul ignore next */
cov_12c3ddd1no().s[73]++;
const trackSessionActivity = (req, _res, next) => {
  /* istanbul ignore next */
  cov_12c3ddd1no().f[6]++;
  cov_12c3ddd1no().s[74]++;
  if (
  /* istanbul ignore next */
  (cov_12c3ddd1no().b[18][0]++, req.session) &&
  /* istanbul ignore next */
  (cov_12c3ddd1no().b[18][1]++, req.sessionId)) {
    /* istanbul ignore next */
    cov_12c3ddd1no().b[17][0]++;
    cov_12c3ddd1no().s[75]++;
    // Update last activity in background
    redisService_1.redisService.refreshSession(req.sessionId, 86400).catch(error => {
      /* istanbul ignore next */
      cov_12c3ddd1no().f[7]++;
      cov_12c3ddd1no().s[76]++;
      logger_1.default.error('Failed to refresh session activity:', error);
    });
  } else
  /* istanbul ignore next */
  {
    cov_12c3ddd1no().b[17][1]++;
  }
  cov_12c3ddd1no().s[77]++;
  next();
};
/* istanbul ignore next */
cov_12c3ddd1no().s[78]++;
exports.trackSessionActivity = trackSessionActivity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,