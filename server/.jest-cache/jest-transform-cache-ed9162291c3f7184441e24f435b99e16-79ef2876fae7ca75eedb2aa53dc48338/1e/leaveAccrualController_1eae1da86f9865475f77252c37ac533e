fad8e156ae654c320f59f1a18b430e61
"use strict";

/* istanbul ignore next */
function cov_1lwbxz1hr0() {
  var path = "/home/kim/tito/server/src/controllers/leave/leaveAccrualController.ts";
  var hash = "7ee63909285ae8c999e5322f7d5045360561e09e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/leave/leaveAccrualController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 40
        }
      },
      "2": {
        start: {
          line: 4,
          column: 30
        },
        end: {
          line: 4,
          column: 81
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 83
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "5": {
        start: {
          line: 11,
          column: 101
        },
        end: {
          line: 11,
          column: 109
        }
      },
      "6": {
        start: {
          line: 12,
          column: 28
        },
        end: {
          line: 18,
          column: 14
        }
      },
      "7": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 25,
          column: 15
        }
      },
      "8": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 34,
          column: 15
        }
      },
      "9": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "10": {
        start: {
          line: 39,
          column: 27
        },
        end: {
          line: 39,
          column: 37
        }
      },
      "11": {
        start: {
          line: 40,
          column: 28
        },
        end: {
          line: 40,
          column: 78
        }
      },
      "12": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "13": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 47,
          column: 19
        }
      },
      "14": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 23
        }
      },
      "15": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "16": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 65,
          column: 15
        }
      },
      "17": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "18": {
        start: {
          line: 70,
          column: 144
        },
        end: {
          line: 70,
          column: 153
        }
      },
      "19": {
        start: {
          line: 71,
          column: 27
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "20": {
        start: {
          line: 82,
          column: 27
        },
        end: {
          line: 82,
          column: 83
        }
      },
      "21": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "22": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 98,
          column: 15
        }
      },
      "23": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "24": {
        start: {
          line: 103,
          column: 35
        },
        end: {
          line: 103,
          column: 45
        }
      },
      "25": {
        start: {
          line: 104,
          column: 43
        },
        end: {
          line: 104,
          column: 52
        }
      },
      "26": {
        start: {
          line: 105,
          column: 29
        },
        end: {
          line: 105,
          column: 182
        }
      },
      "27": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 112,
          column: 15
        }
      },
      "28": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 121,
          column: 15
        }
      },
      "29": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "30": {
        start: {
          line: 126,
          column: 35
        },
        end: {
          line: 126,
          column: 45
        }
      },
      "31": {
        start: {
          line: 127,
          column: 56
        },
        end: {
          line: 127,
          column: 65
        }
      },
      "32": {
        start: {
          line: 128,
          column: 28
        },
        end: {
          line: 128,
          column: 112
        }
      },
      "33": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 135,
          column: 15
        }
      },
      "34": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 144,
          column: 15
        }
      },
      "35": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "36": {
        start: {
          line: 149,
          column: 69
        },
        end: {
          line: 149,
          column: 78
        }
      },
      "37": {
        start: {
          line: 150,
          column: 26
        },
        end: {
          line: 150,
          column: 189
        }
      },
      "38": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 157,
          column: 15
        }
      },
      "39": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 166,
          column: 15
        }
      },
      "40": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "41": {
        start: {
          line: 171,
          column: 83
        },
        end: {
          line: 171,
          column: 91
        }
      },
      "42": {
        start: {
          line: 172,
          column: 28
        },
        end: {
          line: 172,
          column: 184
        }
      },
      "43": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 179,
          column: 15
        }
      },
      "44": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 188,
          column: 15
        }
      },
      "45": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "46": {
        start: {
          line: 193,
          column: 43
        },
        end: {
          line: 193,
          column: 51
        }
      },
      "47": {
        start: {
          line: 194,
          column: 27
        },
        end: {
          line: 194,
          column: 125
        }
      },
      "48": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 201,
          column: 15
        }
      },
      "49": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 210,
          column: 15
        }
      },
      "50": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "51": {
        start: {
          line: 215,
          column: 35
        },
        end: {
          line: 215,
          column: 45
        }
      },
      "52": {
        start: {
          line: 216,
          column: 56
        },
        end: {
          line: 216,
          column: 64
        }
      },
      "53": {
        start: {
          line: 217,
          column: 27
        },
        end: {
          line: 217,
          column: 113
        }
      },
      "54": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 224,
          column: 15
        }
      },
      "55": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 233,
          column: 15
        }
      },
      "56": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "57": {
        start: {
          line: 238,
          column: 27
        },
        end: {
          line: 238,
          column: 37
        }
      },
      "58": {
        start: {
          line: 239,
          column: 28
        },
        end: {
          line: 239,
          column: 81
        }
      },
      "59": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 248,
          column: 13
        }
      },
      "60": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 246,
          column: 19
        }
      },
      "61": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 247,
          column: 23
        }
      },
      "62": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 254,
          column: 15
        }
      },
      "63": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 263,
          column: 15
        }
      },
      "64": {
        start: {
          line: 267,
          column: 0
        },
        end: {
          line: 267,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 39
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 36
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 37
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        },
        loc: {
          start: {
            line: 68,
            column: 38
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 68
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 45
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 101
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        loc: {
          start: {
            line: 124,
            column: 46
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 124
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 41
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 147
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        loc: {
          start: {
            line: 169,
            column: 50
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 169
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 191,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        loc: {
          start: {
            line: 191,
            column: 48
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 191
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 48
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 213
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 236,
            column: 4
          },
          end: {
            line: 236,
            column: 5
          }
        },
        loc: {
          start: {
            line: 236,
            column: 39
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 236
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 23
          },
          end: {
            line: 31,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 48
          },
          end: {
            line: 31,
            column: 61
          }
        }, {
          start: {
            line: 31,
            column: 64
          },
          end: {
            line: 31,
            column: 79
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 62,
            column: 23
          },
          end: {
            line: 62,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 62,
            column: 48
          },
          end: {
            line: 62,
            column: 61
          }
        }, {
          start: {
            line: 62,
            column: 64
          },
          end: {
            line: 62,
            column: 79
          }
        }],
        line: 62
      },
      "3": {
        loc: {
          start: {
            line: 70,
            column: 20
          },
          end: {
            line: 70,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 70,
            column: 27
          },
          end: {
            line: 70,
            column: 28
          }
        }],
        line: 70
      },
      "4": {
        loc: {
          start: {
            line: 70,
            column: 30
          },
          end: {
            line: 70,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 70,
            column: 38
          },
          end: {
            line: 70,
            column: 40
          }
        }],
        line: 70
      },
      "5": {
        loc: {
          start: {
            line: 70,
            column: 96
          },
          end: {
            line: 70,
            column: 119
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 70,
            column: 105
          },
          end: {
            line: 70,
            column: 119
          }
        }],
        line: 70
      },
      "6": {
        loc: {
          start: {
            line: 70,
            column: 121
          },
          end: {
            line: 70,
            column: 139
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 70,
            column: 133
          },
          end: {
            line: 70,
            column: 139
          }
        }],
        line: 70
      },
      "7": {
        loc: {
          start: {
            line: 76,
            column: 27
          },
          end: {
            line: 76,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 76,
            column: 39
          },
          end: {
            line: 76,
            column: 58
          }
        }, {
          start: {
            line: 76,
            column: 61
          },
          end: {
            line: 76,
            column: 70
          }
        }],
        line: 76
      },
      "8": {
        loc: {
          start: {
            line: 77,
            column: 25
          },
          end: {
            line: 77,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 77,
            column: 35
          },
          end: {
            line: 77,
            column: 52
          }
        }, {
          start: {
            line: 77,
            column: 55
          },
          end: {
            line: 77,
            column: 64
          }
        }],
        line: 77
      },
      "9": {
        loc: {
          start: {
            line: 95,
            column: 23
          },
          end: {
            line: 95,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 95,
            column: 48
          },
          end: {
            line: 95,
            column: 61
          }
        }, {
          start: {
            line: 95,
            column: 64
          },
          end: {
            line: 95,
            column: 79
          }
        }],
        line: 95
      },
      "10": {
        loc: {
          start: {
            line: 105,
            column: 97
          },
          end: {
            line: 105,
            column: 140
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 109
          },
          end: {
            line: 105,
            column: 128
          }
        }, {
          start: {
            line: 105,
            column: 131
          },
          end: {
            line: 105,
            column: 140
          }
        }],
        line: 105
      },
      "11": {
        loc: {
          start: {
            line: 105,
            column: 142
          },
          end: {
            line: 105,
            column: 181
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 152
          },
          end: {
            line: 105,
            column: 169
          }
        }, {
          start: {
            line: 105,
            column: 172
          },
          end: {
            line: 105,
            column: 181
          }
        }],
        line: 105
      },
      "12": {
        loc: {
          start: {
            line: 118,
            column: 23
          },
          end: {
            line: 118,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 118,
            column: 48
          },
          end: {
            line: 118,
            column: 61
          }
        }, {
          start: {
            line: 118,
            column: 64
          },
          end: {
            line: 118,
            column: 79
          }
        }],
        line: 118
      },
      "13": {
        loc: {
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 127,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 127,
            column: 27
          },
          end: {
            line: 127,
            column: 51
          }
        }],
        line: 127
      },
      "14": {
        loc: {
          start: {
            line: 141,
            column: 23
          },
          end: {
            line: 141,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 48
          },
          end: {
            line: 141,
            column: 61
          }
        }, {
          start: {
            line: 141,
            column: 64
          },
          end: {
            line: 141,
            column: 79
          }
        }],
        line: 141
      },
      "15": {
        loc: {
          start: {
            line: 150,
            column: 104
          },
          end: {
            line: 150,
            column: 147
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 116
          },
          end: {
            line: 150,
            column: 135
          }
        }, {
          start: {
            line: 150,
            column: 138
          },
          end: {
            line: 150,
            column: 147
          }
        }],
        line: 150
      },
      "16": {
        loc: {
          start: {
            line: 150,
            column: 149
          },
          end: {
            line: 150,
            column: 188
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 159
          },
          end: {
            line: 150,
            column: 176
          }
        }, {
          start: {
            line: 150,
            column: 179
          },
          end: {
            line: 150,
            column: 188
          }
        }],
        line: 150
      },
      "17": {
        loc: {
          start: {
            line: 163,
            column: 23
          },
          end: {
            line: 163,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 48
          },
          end: {
            line: 163,
            column: 61
          }
        }, {
          start: {
            line: 163,
            column: 64
          },
          end: {
            line: 163,
            column: 79
          }
        }],
        line: 163
      },
      "18": {
        loc: {
          start: {
            line: 172,
            column: 136
          },
          end: {
            line: 172,
            column: 183
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 172,
            column: 150
          },
          end: {
            line: 172,
            column: 171
          }
        }, {
          start: {
            line: 172,
            column: 174
          },
          end: {
            line: 172,
            column: 183
          }
        }],
        line: 172
      },
      "19": {
        loc: {
          start: {
            line: 185,
            column: 23
          },
          end: {
            line: 185,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 185,
            column: 48
          },
          end: {
            line: 185,
            column: 61
          }
        }, {
          start: {
            line: 185,
            column: 64
          },
          end: {
            line: 185,
            column: 79
          }
        }],
        line: 185
      },
      "20": {
        loc: {
          start: {
            line: 207,
            column: 23
          },
          end: {
            line: 207,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 207,
            column: 48
          },
          end: {
            line: 207,
            column: 61
          }
        }, {
          start: {
            line: 207,
            column: 64
          },
          end: {
            line: 207,
            column: 79
          }
        }],
        line: 207
      },
      "21": {
        loc: {
          start: {
            line: 216,
            column: 20
          },
          end: {
            line: 216,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 216,
            column: 27
          },
          end: {
            line: 216,
            column: 51
          }
        }],
        line: 216
      },
      "22": {
        loc: {
          start: {
            line: 230,
            column: 23
          },
          end: {
            line: 230,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 230,
            column: 48
          },
          end: {
            line: 230,
            column: 61
          }
        }, {
          start: {
            line: 230,
            column: 64
          },
          end: {
            line: 230,
            column: 79
          }
        }],
        line: 230
      },
      "23": {
        loc: {
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "24": {
        loc: {
          start: {
            line: 260,
            column: 23
          },
          end: {
            line: 260,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 260,
            column: 48
          },
          end: {
            line: 260,
            column: 61
          }
        }, {
          start: {
            line: 260,
            column: 64
          },
          end: {
            line: 260,
            column: 79
          }
        }],
        line: 260
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/leave/leaveAccrualController.ts",
      mappings: ";;;AACA,kFAA+E;AAG/E,MAAa,sBAAsB;IAGjC;QACE,IAAI,CAAC,mBAAmB,GAAG,IAAI,yCAAmB,EAAE,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,GAAY,EAAE,GAA0B;QAC/D,IAAI,CAAC;YACH,MAAM,EAAE,UAAU,EAAE,kBAAkB,EAAE,aAAa,EAAE,gBAAgB,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAElG,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC;gBAChE,UAAU;gBACV,kBAAkB;gBAClB,aAAa;gBACb,gBAAgB;gBAChB,WAAW,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC;aACnC,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,oCAAoC;gBAC7C,IAAI,EAAE,OAAO;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,gCAAgC;gBACzC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;gBAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,GAAY,EAAE,GAA0B;QAC5D,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE1B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAEnE,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,yBAAyB;oBAClC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;iBACzB,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,sCAAsC;gBAC/C,IAAI,EAAE,OAAO;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,kCAAkC;gBAC3C,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;gBAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,GAAY,EAAE,GAA0B;QAC9D,IAAI,CAAC;YACH,MAAM,EACJ,IAAI,GAAG,CAAC,EACR,KAAK,GAAG,EAAE,EACV,UAAU,EACV,YAAY,EACZ,SAAS,EACT,OAAO,EACP,MAAM,EACN,MAAM,GAAG,cAAc,EACvB,SAAS,GAAG,MAAM,EACnB,GAAG,GAAG,CAAC,KAAK,CAAC;YAEd,MAAM,MAAM,GAAG;gBACb,IAAI,EAAE,QAAQ,CAAC,IAAc,CAAC;gBAC9B,KAAK,EAAE,QAAQ,CAAC,KAAe,CAAC;gBAChC,UAAU,EAAE,UAAoB;gBAChC,YAAY,EAAE,YAAsB;gBACpC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAmB,CAAC,CAAC,CAAC,CAAC,SAAS;gBAChE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAiB,CAAC,CAAC,CAAC,CAAC,SAAS;gBAC1D,MAAM,EAAE,MAAgB;gBACxB,MAAM,EAAE,MAAgB;gBACxB,SAAS,EAAE,SAA2B;aACvC,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAExE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,uCAAuC;gBAChD,IAAI,EAAE,MAAM;gBACZ,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,mCAAmC;gBAC5C,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;gBAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,GAAY,EAAE,GAA0B;QACrE,IAAI,CAAC;YACH,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAClC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;YAEzC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,wBAAwB,CACtE,UAAU,EACV,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAmB,CAAC,CAAC,CAAC,CAAC,SAAS,EACrD,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAClD,CAAC;YAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,gDAAgD;gBACzD,IAAI,EAAE,QAAQ;gBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,4CAA4C;gBACrD,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;gBAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,yBAAyB,CAAC,GAAY,EAAE,GAA0B;QACtE,IAAI,CAAC;YACH,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAClC,MAAM,EAAE,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;YAEtD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,yBAAyB,CACtE,UAAU,EACV,QAAQ,CAAC,IAAc,CAAC,CACzB,CAAC;YAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,iDAAiD;gBAC1D,IAAI,EAAE,OAAO;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,6CAA6C;gBACtD,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;gBAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,GAAY,EAAE,GAA0B;QACjE,IAAI,CAAC;YACH,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;YAEnE,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,CAC/D,UAAoB,EACpB,YAAsB,EACtB,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAmB,CAAC,CAAC,CAAC,CAAC,SAAS,EACrD,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAClD,CAAC;YAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,iDAAiD;gBAC1D,IAAI,EAAE,KAAK;gBACX,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,6CAA6C;gBACtD,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;gBAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,6BAA6B,CAAC,GAAY,EAAE,GAA0B;QAC1E,IAAI,CAAC;YACH,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,kBAAkB,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAEhF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,6BAA6B,CAC1E,UAAU,EACV,aAAa,EACb,kBAAkB,EAClB,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAChD,CAAC;YAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,kDAAkD;gBAC3D,IAAI,EAAE,OAAO;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,6CAA6C;gBACtD,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;gBAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,2BAA2B,CAAC,GAAY,EAAE,GAA0B;QACxE,IAAI,CAAC;YACH,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAExC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,2BAA2B,CACvE,IAAI,IAAI,CAAC,SAAS,CAAC,EACnB,IAAI,IAAI,CAAC,OAAO,CAAC,CAClB,CAAC;YAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,+CAA+C;gBACxD,IAAI,EAAE,MAAM;gBACZ,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,0CAA0C;gBACnD,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;gBAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,2BAA2B,CAAC,GAAY,EAAE,GAA0B;QACxE,IAAI,CAAC;YACH,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAClC,MAAM,EAAE,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAErD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,2BAA2B,CACvE,UAAU,EACV,QAAQ,CAAC,IAAI,CAAC,CACf,CAAC;YAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,6CAA6C;gBACtD,IAAI,EAAE,MAAM;gBACZ,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,yCAAyC;gBAClD,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;gBAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,GAAY,EAAE,GAA0B;QAC/D,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE1B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;YAEtE,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,yBAAyB;oBAClC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;iBACzB,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,oCAAoC;gBAC7C,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,gCAAgC;gBACzC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;gBAC/D,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,GAAG,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CACF;AA/TD,wDA+TC",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/leave/leaveAccrualController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { LeaveAccrualService } from '../../services/leave/leaveAccrualService';\nimport { ApiResponse } from '../../utils/types/express';\n\nexport class LeaveAccrualController {\n  private leaveAccrualService: LeaveAccrualService;\n\n  constructor() {\n    this.leaveAccrualService = new LeaveAccrualService();\n  }\n\n  async createLeaveAccrual(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { employeeId, attendanceRecordId, overtimeHours, leaveDaysAccrued, accrualDate } = req.body;\n\n      const accrual = await this.leaveAccrualService.createLeaveAccrual({\n        employeeId,\n        attendanceRecordId,\n        overtimeHours,\n        leaveDaysAccrued,\n        accrualDate: new Date(accrualDate)\n      });\n\n      res.status(201).json({\n        success: true,\n        message: 'Leave accrual created successfully',\n        data: accrual,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(400).json({\n        success: false,\n        message: 'Failed to create leave accrual',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getLeaveAccrual(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { id } = req.params;\n\n      const accrual = await this.leaveAccrualService.getLeaveAccrual(id);\n\n      if (!accrual) {\n        res.status(404).json({\n          success: false,\n          message: 'Leave accrual not found',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Leave accrual retrieved successfully',\n        data: accrual,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve leave accrual',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async listLeaveAccruals(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const {\n        page = 1,\n        limit = 20,\n        employeeId,\n        departmentId,\n        startDate,\n        endDate,\n        search,\n        sortBy = 'accrual_date',\n        sortOrder = 'desc'\n      } = req.query;\n\n      const params = {\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        employeeId: employeeId as string,\n        departmentId: departmentId as string,\n        startDate: startDate ? new Date(startDate as string) : undefined,\n        endDate: endDate ? new Date(endDate as string) : undefined,\n        search: search as string,\n        sortBy: sortBy as string,\n        sortOrder: sortOrder as 'asc' | 'desc'\n      };\n\n      const result = await this.leaveAccrualService.listLeaveAccruals(params);\n\n      res.status(200).json({\n        success: true,\n        message: 'Leave accruals retrieved successfully',\n        data: result,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve leave accruals',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getEmployeeLeaveAccruals(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { employeeId } = req.params;\n      const { startDate, endDate } = req.query;\n\n      const accruals = await this.leaveAccrualService.getEmployeeLeaveAccruals(\n        employeeId,\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee leave accruals retrieved successfully',\n        data: accruals,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve employee leave accruals',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getEmployeeAccrualSummary(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { employeeId } = req.params;\n      const { year = new Date().getFullYear() } = req.query;\n\n      const summary = await this.leaveAccrualService.getEmployeeAccrualSummary(\n        employeeId,\n        parseInt(year as string)\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee accrual summary retrieved successfully',\n        data: summary,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve employee accrual summary',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getLeaveAccrualStats(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { employeeId, departmentId, startDate, endDate } = req.query;\n\n      const stats = await this.leaveAccrualService.getLeaveAccrualStats(\n        employeeId as string,\n        departmentId as string,\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Leave accrual statistics retrieved successfully',\n        data: stats,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve leave accrual statistics',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async processOvertimeToLeaveAccrual(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { employeeId, overtimeHours, attendanceRecordId, accrualDate } = req.body;\n\n      const accrual = await this.leaveAccrualService.processOvertimeToLeaveAccrual(\n        employeeId,\n        overtimeHours,\n        attendanceRecordId,\n        accrualDate ? new Date(accrualDate) : undefined\n      );\n\n      res.status(201).json({\n        success: true,\n        message: 'Overtime to leave accrual processed successfully',\n        data: accrual,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(400).json({\n        success: false,\n        message: 'Failed to process overtime to leave accrual',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async processBulkOvertimeAccruals(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { startDate, endDate } = req.body;\n\n      const result = await this.leaveAccrualService.processBulkOvertimeAccruals(\n        new Date(startDate),\n        new Date(endDate)\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Bulk overtime accruals processed successfully',\n        data: result,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(400).json({\n        success: false,\n        message: 'Failed to process bulk overtime accruals',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async recalculateEmployeeAccruals(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { employeeId } = req.params;\n      const { year = new Date().getFullYear() } = req.body;\n\n      const result = await this.leaveAccrualService.recalculateEmployeeAccruals(\n        employeeId,\n        parseInt(year)\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee accruals recalculated successfully',\n        data: result,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(400).json({\n        success: false,\n        message: 'Failed to recalculate employee accruals',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async deleteLeaveAccrual(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { id } = req.params;\n\n      const deleted = await this.leaveAccrualService.deleteLeaveAccrual(id);\n\n      if (!deleted) {\n        res.status(404).json({\n          success: false,\n          message: 'Leave accrual not found',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Leave accrual deleted successfully',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete leave accrual',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7ee63909285ae8c999e5322f7d5045360561e09e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1lwbxz1hr0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1lwbxz1hr0();
cov_1lwbxz1hr0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1lwbxz1hr0().s[1]++;
exports.LeaveAccrualController = void 0;
const leaveAccrualService_1 =
/* istanbul ignore next */
(cov_1lwbxz1hr0().s[2]++, require("../../services/leave/leaveAccrualService"));
class LeaveAccrualController {
  constructor() {
    /* istanbul ignore next */
    cov_1lwbxz1hr0().f[0]++;
    cov_1lwbxz1hr0().s[3]++;
    this.leaveAccrualService = new leaveAccrualService_1.LeaveAccrualService();
  }
  async createLeaveAccrual(req, res) {
    /* istanbul ignore next */
    cov_1lwbxz1hr0().f[1]++;
    cov_1lwbxz1hr0().s[4]++;
    try {
      const {
        employeeId,
        attendanceRecordId,
        overtimeHours,
        leaveDaysAccrued,
        accrualDate
      } =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[5]++, req.body);
      const accrual =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[6]++, await this.leaveAccrualService.createLeaveAccrual({
        employeeId,
        attendanceRecordId,
        overtimeHours,
        leaveDaysAccrued,
        accrualDate: new Date(accrualDate)
      }));
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[7]++;
      res.status(201).json({
        success: true,
        message: 'Leave accrual created successfully',
        data: accrual,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[8]++;
      res.status(400).json({
        success: false,
        message: 'Failed to create leave accrual',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[0][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[0][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async getLeaveAccrual(req, res) {
    /* istanbul ignore next */
    cov_1lwbxz1hr0().f[2]++;
    cov_1lwbxz1hr0().s[9]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[10]++, req.params);
      const accrual =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[11]++, await this.leaveAccrualService.getLeaveAccrual(id));
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[12]++;
      if (!accrual) {
        /* istanbul ignore next */
        cov_1lwbxz1hr0().b[1][0]++;
        cov_1lwbxz1hr0().s[13]++;
        res.status(404).json({
          success: false,
          message: 'Leave accrual not found',
          timestamp: new Date().toISOString(),
          requestId: req.requestId
        });
        /* istanbul ignore next */
        cov_1lwbxz1hr0().s[14]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1lwbxz1hr0().b[1][1]++;
      }
      cov_1lwbxz1hr0().s[15]++;
      res.status(200).json({
        success: true,
        message: 'Leave accrual retrieved successfully',
        data: accrual,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[16]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve leave accrual',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[2][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[2][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async listLeaveAccruals(req, res) {
    /* istanbul ignore next */
    cov_1lwbxz1hr0().f[3]++;
    cov_1lwbxz1hr0().s[17]++;
    try {
      const {
        page =
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[3][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[4][0]++, 20),
        employeeId,
        departmentId,
        startDate,
        endDate,
        search,
        sortBy =
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[5][0]++, 'accrual_date'),
        sortOrder =
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[6][0]++, 'desc')
      } =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[18]++, req.query);
      const params =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[19]++, {
        page: parseInt(page),
        limit: parseInt(limit),
        employeeId: employeeId,
        departmentId: departmentId,
        startDate: startDate ?
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[7][0]++, new Date(startDate)) :
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[7][1]++, undefined),
        endDate: endDate ?
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[8][0]++, new Date(endDate)) :
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[8][1]++, undefined),
        search: search,
        sortBy: sortBy,
        sortOrder: sortOrder
      });
      const result =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[20]++, await this.leaveAccrualService.listLeaveAccruals(params));
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[21]++;
      res.status(200).json({
        success: true,
        message: 'Leave accruals retrieved successfully',
        data: result,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[22]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve leave accruals',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[9][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[9][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async getEmployeeLeaveAccruals(req, res) {
    /* istanbul ignore next */
    cov_1lwbxz1hr0().f[4]++;
    cov_1lwbxz1hr0().s[23]++;
    try {
      const {
        employeeId
      } =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[24]++, req.params);
      const {
        startDate,
        endDate
      } =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[25]++, req.query);
      const accruals =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[26]++, await this.leaveAccrualService.getEmployeeLeaveAccruals(employeeId, startDate ?
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().b[10][0]++, new Date(startDate)) :
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().b[10][1]++, undefined), endDate ?
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().b[11][0]++, new Date(endDate)) :
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().b[11][1]++, undefined)));
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[27]++;
      res.status(200).json({
        success: true,
        message: 'Employee leave accruals retrieved successfully',
        data: accruals,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[28]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve employee leave accruals',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[12][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[12][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async getEmployeeAccrualSummary(req, res) {
    /* istanbul ignore next */
    cov_1lwbxz1hr0().f[5]++;
    cov_1lwbxz1hr0().s[29]++;
    try {
      const {
        employeeId
      } =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[30]++, req.params);
      const {
        year =
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[13][0]++, new Date().getFullYear())
      } =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[31]++, req.query);
      const summary =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[32]++, await this.leaveAccrualService.getEmployeeAccrualSummary(employeeId, parseInt(year)));
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[33]++;
      res.status(200).json({
        success: true,
        message: 'Employee accrual summary retrieved successfully',
        data: summary,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[34]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve employee accrual summary',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[14][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[14][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async getLeaveAccrualStats(req, res) {
    /* istanbul ignore next */
    cov_1lwbxz1hr0().f[6]++;
    cov_1lwbxz1hr0().s[35]++;
    try {
      const {
        employeeId,
        departmentId,
        startDate,
        endDate
      } =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[36]++, req.query);
      const stats =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[37]++, await this.leaveAccrualService.getLeaveAccrualStats(employeeId, departmentId, startDate ?
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().b[15][0]++, new Date(startDate)) :
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().b[15][1]++, undefined), endDate ?
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().b[16][0]++, new Date(endDate)) :
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().b[16][1]++, undefined)));
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[38]++;
      res.status(200).json({
        success: true,
        message: 'Leave accrual statistics retrieved successfully',
        data: stats,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[39]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve leave accrual statistics',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[17][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[17][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async processOvertimeToLeaveAccrual(req, res) {
    /* istanbul ignore next */
    cov_1lwbxz1hr0().f[7]++;
    cov_1lwbxz1hr0().s[40]++;
    try {
      const {
        employeeId,
        overtimeHours,
        attendanceRecordId,
        accrualDate
      } =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[41]++, req.body);
      const accrual =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[42]++, await this.leaveAccrualService.processOvertimeToLeaveAccrual(employeeId, overtimeHours, attendanceRecordId, accrualDate ?
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().b[18][0]++, new Date(accrualDate)) :
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().b[18][1]++, undefined)));
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[43]++;
      res.status(201).json({
        success: true,
        message: 'Overtime to leave accrual processed successfully',
        data: accrual,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[44]++;
      res.status(400).json({
        success: false,
        message: 'Failed to process overtime to leave accrual',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[19][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[19][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async processBulkOvertimeAccruals(req, res) {
    /* istanbul ignore next */
    cov_1lwbxz1hr0().f[8]++;
    cov_1lwbxz1hr0().s[45]++;
    try {
      const {
        startDate,
        endDate
      } =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[46]++, req.body);
      const result =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[47]++, await this.leaveAccrualService.processBulkOvertimeAccruals(new Date(startDate), new Date(endDate)));
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[48]++;
      res.status(200).json({
        success: true,
        message: 'Bulk overtime accruals processed successfully',
        data: result,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[49]++;
      res.status(400).json({
        success: false,
        message: 'Failed to process bulk overtime accruals',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[20][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[20][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async recalculateEmployeeAccruals(req, res) {
    /* istanbul ignore next */
    cov_1lwbxz1hr0().f[9]++;
    cov_1lwbxz1hr0().s[50]++;
    try {
      const {
        employeeId
      } =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[51]++, req.params);
      const {
        year =
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[21][0]++, new Date().getFullYear())
      } =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[52]++, req.body);
      const result =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[53]++, await this.leaveAccrualService.recalculateEmployeeAccruals(employeeId, parseInt(year)));
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[54]++;
      res.status(200).json({
        success: true,
        message: 'Employee accruals recalculated successfully',
        data: result,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[55]++;
      res.status(400).json({
        success: false,
        message: 'Failed to recalculate employee accruals',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[22][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[22][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async deleteLeaveAccrual(req, res) {
    /* istanbul ignore next */
    cov_1lwbxz1hr0().f[10]++;
    cov_1lwbxz1hr0().s[56]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[57]++, req.params);
      const deleted =
      /* istanbul ignore next */
      (cov_1lwbxz1hr0().s[58]++, await this.leaveAccrualService.deleteLeaveAccrual(id));
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[59]++;
      if (!deleted) {
        /* istanbul ignore next */
        cov_1lwbxz1hr0().b[23][0]++;
        cov_1lwbxz1hr0().s[60]++;
        res.status(404).json({
          success: false,
          message: 'Leave accrual not found',
          timestamp: new Date().toISOString(),
          requestId: req.requestId
        });
        /* istanbul ignore next */
        cov_1lwbxz1hr0().s[61]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1lwbxz1hr0().b[23][1]++;
      }
      cov_1lwbxz1hr0().s[62]++;
      res.status(200).json({
        success: true,
        message: 'Leave accrual deleted successfully',
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1lwbxz1hr0().s[63]++;
      res.status(500).json({
        success: false,
        message: 'Failed to delete leave accrual',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[24][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1lwbxz1hr0().b[24][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
}
/* istanbul ignore next */
cov_1lwbxz1hr0().s[64]++;
exports.LeaveAccrualController = LeaveAccrualController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,