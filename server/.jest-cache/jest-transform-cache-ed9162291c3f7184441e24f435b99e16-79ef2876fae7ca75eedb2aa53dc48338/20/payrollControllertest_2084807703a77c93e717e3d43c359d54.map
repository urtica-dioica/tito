{"file":"/home/kim/tito/server/tests/unit/controllers/payrollController.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/unit/controllers/payrollController.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { PayrollController } from '../../../src/controllers/payroll/payrollController';\nimport { payrollService } from '../../../src/services/payroll/payrollService';\nimport { getRequestId } from '../../../src/utils/types/express';\nimport { PayrollRecord } from '../../../src/models/payroll/PayrollRecord';\n\n// Mock the dependencies\njest.mock('../../../src/services/payroll/payrollService');\njest.mock('../../../src/services/payroll/autoPayrollService');\njest.mock('../../../src/utils/types/express');\n\nconst mockPayrollService = payrollService as jest.Mocked<typeof payrollService>;\nconst mockGetRequestId = getRequestId as jest.MockedFunction<typeof getRequestId>;\n\ndescribe('PayrollController', () => {\n  let payrollController: PayrollController;\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n\n  beforeEach(() => {\n    payrollController = new PayrollController();\n    jest.clearAllMocks();\n\n    // Mock request object\n    mockRequest = {\n      body: {},\n      params: {},\n      query: {},\n      user: {\n        userId: 'hr-user-123',\n        email: 'hr@example.com',\n        role: 'hr',\n        tokenVersion: 1\n      }\n    };\n\n    // Mock response object\n    mockResponse = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis(),\n      download: jest.fn().mockReturnThis()\n    };\n\n    // Mock getRequestId\n    mockGetRequestId.mockReturnValue('test-request-123');\n  });\n\n  describe('createPayrollPeriod', () => {\n    it('should create payroll period successfully', async () => {\n      // Arrange\n      mockRequest.body = {\n        period_name: 'January 2024',\n        start_date: '2024-01-01',\n        end_date: '2024-01-31',\n        status: 'draft' as const\n      };\n\n      const mockPayrollPeriod = {\n        id: 'period-123',\n        period_name: 'January 2024',\n        start_date: new Date('2024-01-01'),\n        end_date: new Date('2024-01-31'),\n        status: 'draft' as const,\n        created_at: new Date(),\n        updated_at: new Date()\n      };\n\n      mockPayrollService.createPayrollPeriod.mockResolvedValue(mockPayrollPeriod);\n\n      // Act\n      await payrollController.createPayrollPeriod(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPayrollService.createPayrollPeriod).toHaveBeenCalledWith({\n        period_name: 'January 2024',\n        start_date: new Date('2024-01-01'),\n        end_date: new Date('2024-01-31'),\n        status: 'draft' as const\n      });\n      expect(mockResponse.status).toHaveBeenCalledWith(201);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Payroll period created successfully',\n        data: mockPayrollPeriod,\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 400 for missing required fields', async () => {\n      // Arrange\n      mockRequest.body = {\n        period_name: 'January 2024'\n        // start_date and end_date missing\n      };\n\n      // Act\n      await payrollController.createPayrollPeriod(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Period name, start date, and end date are required',\n        requestId: 'test-request-123'\n      });\n      expect(mockPayrollService.createPayrollPeriod).not.toHaveBeenCalled();\n    });\n\n    it('should handle service errors', async () => {\n      // Arrange\n      mockRequest.body = {\n        period_name: 'January 2024',\n        start_date: '2024-01-01',\n        end_date: '2024-01-31'\n      };\n\n      mockPayrollService.createPayrollPeriod.mockRejectedValue(new Error('Database error'));\n\n      // Act\n      await payrollController.createPayrollPeriod(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Failed to create payroll period',\n        error: 'Database error',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('getPayrollPeriods', () => {\n    it('should get payroll periods successfully', async () => {\n      // Arrange\n      mockRequest.query = {\n        page: '1',\n        limit: '10',\n        status: 'active'\n      };\n\n      const mockPeriods = [\n        {\n          id: 'period-1',\n          period_name: 'January 2024',\n          start_date: new Date('2024-01-01'),\n          end_date: new Date('2024-01-31'),\n          status: 'processing' as const,\n          created_at: new Date(),\n          updated_at: new Date()\n        },\n        {\n          id: 'period-2',\n          period_name: 'February 2024',\n          start_date: new Date('2024-02-01'),\n          end_date: new Date('2024-02-29'),\n          status: 'processing' as const,\n          created_at: new Date(),\n          updated_at: new Date()\n        }\n      ];\n\n      mockPayrollService.getPayrollPeriods.mockResolvedValue({\n        periods: mockPeriods,\n        total: 2\n      });\n\n      // Act\n      await payrollController.getPayrollPeriods(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPayrollService.getPayrollPeriods).toHaveBeenCalledWith({\n        page: 1,\n        limit: 10,\n        status: 'active'\n      });\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Payroll periods retrieved successfully',\n        data: {\n          periods: mockPeriods,\n          pagination: {\n            page: 1,\n            limit: 10,\n            total: 2,\n            totalPages: 1\n          }\n        },\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should handle service errors', async () => {\n      // Arrange\n      mockRequest.query = {};\n\n      mockPayrollService.getPayrollPeriods.mockRejectedValue(new Error('Database error'));\n\n      // Act\n      await payrollController.getPayrollPeriods(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Failed to get payroll periods',\n        error: 'Database error',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('getPayrollPeriod', () => {\n    it('should get payroll period successfully', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'period-123'\n      };\n\n      const mockPeriod = {\n        id: 'period-123',\n        period_name: 'January 2024',\n        start_date: new Date('2024-01-01'),\n        end_date: new Date('2024-01-31'),\n        status: 'processing' as const,\n        created_at: new Date(),\n        updated_at: new Date()\n      };\n\n      mockPayrollService.getPayrollPeriod.mockResolvedValue(mockPeriod);\n\n      // Act\n      await payrollController.getPayrollPeriod(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPayrollService.getPayrollPeriod).toHaveBeenCalledWith('period-123');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Payroll period retrieved successfully',\n        data: mockPeriod,\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 404 if period not found', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'nonexistent-period'\n      };\n\n      mockPayrollService.getPayrollPeriod.mockResolvedValue(null);\n\n      // Act\n      await payrollController.getPayrollPeriod(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Payroll period not found',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('updatePayrollPeriod', () => {\n    it('should update payroll period successfully', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'period-123'\n      };\n      mockRequest.body = {\n        period_name: 'Updated January 2024',\n        status: 'active'\n      };\n\n      const mockUpdatedPeriod = {\n        id: 'period-123',\n        period_name: 'Updated January 2024',\n        start_date: new Date('2024-01-01'),\n        end_date: new Date('2024-01-31'),\n        status: 'processing' as const,\n        created_at: new Date(),\n        updated_at: new Date()\n      };\n\n      mockPayrollService.updatePayrollPeriod.mockResolvedValue(mockUpdatedPeriod);\n\n      // Act\n      await payrollController.updatePayrollPeriod(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPayrollService.updatePayrollPeriod).toHaveBeenCalledWith('period-123', {\n        period_name: 'Updated January 2024',\n        status: 'active'\n      });\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Payroll period updated successfully',\n        data: mockUpdatedPeriod,\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 404 if period not found', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'nonexistent-period'\n      };\n      mockRequest.body = {\n        period_name: 'Updated Period'\n      };\n\n      mockPayrollService.updatePayrollPeriod.mockResolvedValue(null);\n\n      // Act\n      await payrollController.updatePayrollPeriod(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Payroll period not found',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('deletePayrollPeriod', () => {\n    it('should delete payroll period successfully', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'period-123'\n      };\n\n      mockPayrollService.deletePayrollPeriod.mockResolvedValue(true);\n\n      // Act\n      await payrollController.deletePayrollPeriod(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPayrollService.deletePayrollPeriod).toHaveBeenCalledWith('period-123');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Payroll period deleted successfully',\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 404 if period not found', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'nonexistent-period'\n      };\n\n      mockPayrollService.deletePayrollPeriod.mockResolvedValue(false);\n\n      // Act\n      await payrollController.deletePayrollPeriod(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Payroll period not found',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('generatePayrollRecords', () => {\n    it('should generate payroll records successfully', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'period-123'\n      };\n\n      const mockResult: PayrollRecord[] = [\n        {\n          id: 'record-1',\n          payroll_period_id: 'period-123',\n          employee_id: 'emp-1',\n          base_salary: 50000,\n          total_worked_hours: 160,\n          hourly_rate: 312.5,\n          total_regular_hours: 160,\n          total_overtime_hours: 0,\n          total_late_hours: 0,\n          late_deductions: 0,\n          paid_leave_hours: 0,\n          gross_pay: 50000,\n          net_pay: 45000,\n          total_deductions: 5000,\n          total_benefits: 0,\n          status: 'draft' as const,\n          created_at: new Date(),\n          updated_at: new Date()\n        }\n      ];\n\n      mockPayrollService.generatePayrollRecordsForAllDepartments.mockResolvedValue([{\n        departmentId: 'dept-1',\n        records: mockResult\n      }]);\n\n      // Act\n      await payrollController.generatePayrollRecords(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPayrollService.generatePayrollRecordsForAllDepartments).toHaveBeenCalledWith('period-123');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Payroll records generated successfully',\n        data: mockResult,\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should handle generation errors', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'period-123'\n      };\n\n      mockPayrollService.generatePayrollRecordsForAllDepartments.mockRejectedValue(new Error('Generation failed'));\n\n      // Act\n      await payrollController.generatePayrollRecords(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Internal server error',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('getPayrollSummary', () => {\n    it('should get payroll summary successfully', async () => {\n      // Arrange\n      mockRequest.params = {\n        periodId: 'period-123'\n      };\n\n      const mockSummary = {\n        period: {\n          id: 'period-123',\n          period_name: 'January 2024',\n          start_date: new Date('2024-01-01'),\n          end_date: new Date('2024-01-31'),\n          status: 'processing' as const,\n          created_at: new Date(),\n          updated_at: new Date()\n        },\n        totalEmployees: 25,\n        totalGrossPay: 125000,\n        totalDeductions: 25000,\n        totalNetPay: 100000,\n        processedRecords: 25,\n        pendingRecords: 0\n      };\n\n      mockPayrollService.getPayrollSummary.mockResolvedValue(mockSummary);\n\n      // Act\n      await payrollController.getPayrollSummary(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPayrollService.getPayrollSummary).toHaveBeenCalledWith('period-123');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Payroll summary retrieved successfully',\n        data: mockSummary,\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should handle service errors', async () => {\n      // Arrange\n      mockRequest.params = {\n        periodId: 'period-123'\n      };\n\n      mockPayrollService.getPayrollSummary.mockRejectedValue(new Error('Database error'));\n\n      // Act\n      await payrollController.getPayrollSummary(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Failed to get payroll summary',\n        error: 'Database error',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('getPayrollRecords', () => {\n    it('should get payroll records successfully', async () => {\n      // Arrange\n      mockRequest.params = {\n        periodId: 'period-123'\n      };\n      mockRequest.query = {\n        page: '1',\n        limit: '10',\n        status: 'processed' as const\n      };\n\n      const mockRecords = [\n        {\n          id: 'record-1',\n          payroll_period_id: 'period-123',\n          employee_id: 'emp-1',\n          base_salary: 50000,\n          total_worked_hours: 160,\n          hourly_rate: 312.5,\n          total_regular_hours: 160,\n          total_overtime_hours: 0,\n          total_late_hours: 0,\n          late_deductions: 0,\n          paid_leave_hours: 0,\n          gross_pay: 5000,\n          net_pay: 4000,\n          total_deductions: 1000,\n          total_benefits: 0,\n          status: 'processed' as const,\n          created_at: new Date(),\n          updated_at: new Date(),\n          employee: {\n            employee_id: 'emp-1',\n            user: {\n              first_name: 'John',\n              last_name: 'Doe'\n            },\n            department: {\n              id: 'dept-1',\n              name: 'Engineering'\n            }\n          }\n        },\n        {\n          id: 'record-2',\n          payroll_period_id: 'period-123',\n          employee_id: 'emp-2',\n          base_salary: 60000,\n          total_worked_hours: 160,\n          hourly_rate: 375,\n          total_regular_hours: 160,\n          total_overtime_hours: 0,\n          total_late_hours: 0,\n          late_deductions: 0,\n          paid_leave_hours: 0,\n          gross_pay: 6000,\n          net_pay: 4800,\n          total_deductions: 1200,\n          total_benefits: 0,\n          status: 'processed' as const,\n          created_at: new Date(),\n          updated_at: new Date(),\n          employee: {\n            employee_id: 'emp-2',\n            user: {\n              first_name: 'Jane',\n              last_name: 'Smith'\n            },\n            department: {\n              id: 'dept-1',\n              name: 'Engineering'\n            }\n          }\n        }\n      ];\n\n      mockPayrollService.getPayrollRecords.mockResolvedValue({\n        records: mockRecords,\n        total: 2\n      });\n\n      // Act\n      await payrollController.getPayrollRecords(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPayrollService.getPayrollRecords).toHaveBeenCalledWith({\n        page: 1,\n        limit: 10,\n        payroll_period_id: 'period-123',\n        employee_id: undefined,\n        status: 'processed' as const\n      });\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Payroll records retrieved successfully',\n        data: {\n          records: mockRecords,\n          pagination: {\n            page: 1,\n            limit: 10,\n            total: 2,\n            totalPages: 1\n          }\n        },\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('getPayrollRecord', () => {\n    it('should get payroll record successfully', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'record-123'\n      };\n\n      const mockRecord = {\n        id: 'record-123',\n        payroll_period_id: 'period-123',\n        employee_id: 'emp-123',\n        base_salary: 50000,\n        total_worked_hours: 160,\n        hourly_rate: 312.5,\n        total_regular_hours: 160,\n        total_overtime_hours: 0,\n        total_late_hours: 0,\n        late_deductions: 0,\n        paid_leave_hours: 0,\n        gross_pay: 5000,\n        net_pay: 4000,\n        total_deductions: 1000,\n        total_benefits: 0,\n        status: 'processed' as const,\n        created_at: new Date(),\n        updated_at: new Date()\n      };\n\n      mockPayrollService.getPayrollRecord.mockResolvedValue(mockRecord);\n\n      // Act\n      await payrollController.getPayrollRecord(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPayrollService.getPayrollRecord).toHaveBeenCalledWith('record-123');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Payroll record retrieved successfully',\n        data: mockRecord,\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 404 if record not found', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'nonexistent-record'\n      };\n\n      mockPayrollService.getPayrollRecord.mockResolvedValue(null);\n\n      // Act\n      await payrollController.getPayrollRecord(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Payroll record not found',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('updatePayrollRecord', () => {\n    it('should update payroll record successfully', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'record-123'\n      };\n      mockRequest.body = {\n        gross_pay: 5500,\n        total_deductions: 1100,\n        net_pay: 4400\n      };\n\n      const mockUpdatedRecord = {\n        id: 'record-123',\n        payroll_period_id: 'period-123',\n        employee_id: 'emp-123',\n        base_salary: 50000,\n        total_worked_hours: 160,\n        hourly_rate: 312.5,\n        total_regular_hours: 160,\n        total_overtime_hours: 0,\n        total_late_hours: 0,\n        late_deductions: 0,\n        paid_leave_hours: 0,\n        gross_pay: 5500,\n        net_pay: 4400,\n        total_deductions: 1100,\n        total_benefits: 0,\n        status: 'processed' as const,\n        created_at: new Date(),\n        updated_at: new Date()\n      };\n\n      mockPayrollService.updatePayrollRecord.mockResolvedValue(mockUpdatedRecord);\n\n      // Act\n      await payrollController.updatePayrollRecord(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPayrollService.updatePayrollRecord).toHaveBeenCalledWith('record-123', {\n        gross_pay: 5500,\n        total_deductions: 1100,\n        net_pay: 4400\n      });\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Payroll record updated successfully',\n        data: mockUpdatedRecord,\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 404 if record not found', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'nonexistent-record'\n      };\n      mockRequest.body = {\n        gross_pay: 5500\n      };\n\n      mockPayrollService.updatePayrollRecord.mockResolvedValue(null);\n\n      // Act\n      await payrollController.updatePayrollRecord(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Payroll record not found',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('approvePayrollRecord', () => {\n    it('should approve payroll record successfully', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'record-123'\n      };\n      mockRequest.body = {\n        comments: 'Approved for payment'\n      };\n\n      const mockApprovedRecord = {\n        id: 'record-123',\n        payroll_period_id: 'period-123',\n        employee_id: 'emp-123',\n        base_salary: 50000,\n        total_worked_hours: 160,\n        hourly_rate: 312.5,\n        total_regular_hours: 160,\n        total_overtime_hours: 0,\n        total_late_hours: 0,\n        late_deductions: 0,\n        paid_leave_hours: 0,\n        gross_pay: 50000,\n        net_pay: 45000,\n        total_deductions: 5000,\n        total_benefits: 0,\n        status: 'processed' as const,\n        created_at: new Date(),\n        updated_at: new Date()\n      };\n\n      mockPayrollService.approvePayrollRecord.mockResolvedValue(mockApprovedRecord);\n\n      // Act\n      await payrollController.approvePayrollRecord(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPayrollService.approvePayrollRecord).toHaveBeenCalledWith('record-123', 'hr-user-123');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Payroll record approved successfully',\n        data: mockApprovedRecord,\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 404 if record not found', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'nonexistent-record'\n      };\n      mockRequest.body = {\n        comments: 'Approved'\n      };\n\n      mockPayrollService.approvePayrollRecord.mockResolvedValue(null);\n\n      // Act\n      await payrollController.approvePayrollRecord(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Payroll record not found',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('markPayrollAsPaid', () => {\n    it('should mark payroll as paid successfully', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'record-123'\n      };\n      mockRequest.body = {\n        payment_date: '2024-01-31',\n        payment_method: 'bank_transfer',\n        transaction_id: 'TXN-123456'\n      };\n\n      const mockPaidRecord = {\n        id: 'record-123',\n        payroll_period_id: 'period-123',\n        employee_id: 'emp-123',\n        base_salary: 50000,\n        total_worked_hours: 160,\n        hourly_rate: 312.5,\n        total_regular_hours: 160,\n        total_overtime_hours: 0,\n        total_late_hours: 0,\n        late_deductions: 0,\n        paid_leave_hours: 0,\n        gross_pay: 50000,\n        net_pay: 45000,\n        total_deductions: 5000,\n        total_benefits: 0,\n        status: 'paid' as const,\n        created_at: new Date(),\n        updated_at: new Date()\n      };\n\n      mockPayrollService.markPayrollAsPaid.mockResolvedValue(mockPaidRecord);\n\n      // Act\n      await payrollController.markPayrollAsPaid(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPayrollService.markPayrollAsPaid).toHaveBeenCalledWith('record-123');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Payroll marked as paid successfully',\n        data: mockPaidRecord,\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 400 for missing payment information', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'record-123'\n      };\n      mockRequest.body = {\n        payment_date: '2024-01-31'\n        // payment_method and transaction_id missing\n      };\n\n      // Act\n      await payrollController.markPayrollAsPaid(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Payment date, method, and transaction ID are required',\n        requestId: 'test-request-123'\n      });\n      expect(mockPayrollService.markPayrollAsPaid).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('getPayrollStats', () => {\n    it('should get payroll stats successfully', async () => {\n      // Arrange\n      mockRequest.query = {\n        period: '2024-01'\n      };\n\n      const mockStats = {\n        totalEmployees: 25,\n        totalPayroll: 1500000,\n        processedPeriods: 11,\n        pendingPeriods: 1\n      };\n\n      mockPayrollService.getPayrollStats.mockResolvedValue(mockStats);\n\n      // Act\n      await payrollController.getPayrollStats(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPayrollService.getPayrollStats).toHaveBeenCalledWith();\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Payroll statistics retrieved successfully',\n        data: mockStats,\n        requestId: 'test-request-123'\n      });\n    });\n  });\n});\n"],"version":3}