{"version":3,"names":["cov_1w15gqa8v","actualCoverage","s","QueryUtils","constructor","pool","f","buildWhereClause","filters","tableAlias","b","conditions","values","paramCount","key","value","Object","entries","undefined","field","Array","isArray","placeholders","map","join","push","clause","length","buildSearchClause","search","searchFields","fieldName","buildOrderClause","sort","direction","buildPaginationClause","page","limit","offset","executePaginatedQuery","baseQuery","countQuery","params","options","countResult","query","total","parseInt","rows","count","paginationClause","dataQuery","dataParams","dataResult","totalPages","Math","ceil","hasNext","hasPrev","data","pagination","error","buildSelectQuery","table","fields","selectFields","whereClause","searchClause","executeTransaction","callback","client","connect","result","release","recordExists","excludeId","getRecordCount","softDelete","id","deletedAtField","rowCount","restore","exports","buildSearchQuery","sanitizeFieldName","replace","buildInClause","_","index"],"sources":["/home/kim/tito/server/src/utils/database/queryUtils.ts"],"sourcesContent":["import { Pool } from 'pg';\n\nexport interface PaginationOptions {\n  page: number;\n  limit: number;\n}\n\nexport interface PaginationResult<T> {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n}\n\nexport interface SearchOptions {\n  search?: string;\n  searchFields?: string[];\n}\n\nexport interface FilterOptions {\n  [key: string]: any;\n}\n\nexport interface SortOptions {\n  field: string;\n  direction: 'ASC' | 'DESC';\n}\n\nexport class QueryUtils {\n  private pool: Pool;\n\n  constructor(pool: Pool) {\n    this.pool = pool;\n  }\n\n  /**\n   * Build WHERE clause for filters\n   */\n  buildWhereClause(filters: FilterOptions, tableAlias: string = ''): { clause: string; values: any[] } {\n    const conditions: string[] = [];\n    const values: any[] = [];\n    let paramCount = 1;\n\n    for (const [key, value] of Object.entries(filters)) {\n      if (value !== undefined && value !== null) {\n        const field = tableAlias ? `${tableAlias}.${key}` : key;\n        \n        if (Array.isArray(value)) {\n          const placeholders = value.map(() => `$${paramCount++}`).join(', ');\n          conditions.push(`${field} IN (${placeholders})`);\n          values.push(...value);\n        } else {\n          conditions.push(`${field} = $${paramCount++}`);\n          values.push(value);\n        }\n      }\n    }\n\n    return {\n      clause: conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '',\n      values\n    };\n  }\n\n  /**\n   * Build search clause\n   */\n  buildSearchClause(search: string, searchFields: string[], tableAlias: string = ''): { clause: string; values: any[] } {\n    if (!search || !searchFields.length) {\n      return { clause: '', values: [] };\n    }\n\n    const conditions: string[] = [];\n    const values: any[] = [];\n    let paramCount = 1;\n\n    for (const field of searchFields) {\n      const fieldName = tableAlias ? `${tableAlias}.${field}` : field;\n      conditions.push(`${fieldName} ILIKE $${paramCount++}`);\n      values.push(`%${search}%`);\n    }\n\n    return {\n      clause: `AND (${conditions.join(' OR ')})`,\n      values\n    };\n  }\n\n  /**\n   * Build ORDER BY clause\n   */\n  buildOrderClause(sort: SortOptions, tableAlias: string = ''): string {\n    const field = tableAlias ? `${tableAlias}.${sort.field}` : sort.field;\n    return `ORDER BY ${field} ${sort.direction}`;\n  }\n\n  /**\n   * Build LIMIT and OFFSET for pagination\n   */\n  buildPaginationClause(page: number, limit: number): { clause: string; values: number[] } {\n    const offset = (page - 1) * limit;\n    return {\n      clause: `LIMIT $1 OFFSET $2`,\n      values: [limit, offset]\n    };\n  }\n\n  /**\n   * Execute paginated query\n   */\n  async executePaginatedQuery<T>(\n    baseQuery: string,\n    countQuery: string,\n    params: any[],\n    options: PaginationOptions\n  ): Promise<PaginationResult<T>> {\n    try {\n      // Execute count query\n      const countResult = await this.pool.query(countQuery, params);\n      const total = parseInt(countResult.rows[0].count);\n\n      // Execute data query with pagination\n      const paginationClause = this.buildPaginationClause(options.page, options.limit);\n      const dataQuery = `${baseQuery} ${paginationClause.clause}`;\n      const dataParams = [...params, ...paginationClause.values];\n\n      const dataResult = await this.pool.query(dataQuery, dataParams);\n\n      const totalPages = Math.ceil(total / options.limit);\n      const hasNext = options.page < totalPages;\n      const hasPrev = options.page > 1;\n\n      return {\n        data: dataResult.rows,\n        pagination: {\n          page: options.page,\n          limit: options.limit,\n          total,\n          totalPages,\n          hasNext,\n          hasPrev\n        }\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Build complete SELECT query with filters, search, and pagination\n   */\n  buildSelectQuery(\n    table: string,\n    fields: string[],\n    filters: FilterOptions = {},\n    search?: SearchOptions,\n    sort?: SortOptions,\n    tableAlias: string = ''\n  ): { query: string; values: any[] } {\n    const selectFields = fields.map(field => \n      tableAlias ? `${tableAlias}.${field}` : field\n    ).join(', ');\n\n    let query = `SELECT ${selectFields} FROM ${table}`;\n    if (tableAlias) {\n      query += ` ${tableAlias}`;\n    }\n\n    const values: any[] = [];\n    let paramCount = 1;\n\n    // Add filters\n    const whereClause = this.buildWhereClause(filters, tableAlias);\n    if (whereClause.clause) {\n      query += ` ${whereClause.clause}`;\n      values.push(...whereClause.values);\n      paramCount += whereClause.values.length;\n    }\n\n    // Add search\n    if (search?.search && search?.searchFields) {\n      const searchClause = this.buildSearchClause(search.search, search.searchFields, tableAlias);\n      if (searchClause.clause) {\n        query += ` ${searchClause.clause}`;\n        values.push(...searchClause.values);\n      }\n    }\n\n    // Add sorting\n    if (sort) {\n      query += ` ${this.buildOrderClause(sort, tableAlias)}`;\n    }\n\n    return { query, values };\n  }\n\n  /**\n   * Execute transaction\n   */\n  async executeTransaction<T>(callback: (client: any) => Promise<T>): Promise<T> {\n    const client = await this.pool.connect();\n    \n    try {\n      await client.query('BEGIN');\n      const result = await callback(client);\n      await client.query('COMMIT');\n      return result;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Check if record exists\n   */\n  async recordExists(table: string, field: string, value: any, excludeId?: string): Promise<boolean> {\n    let query = `SELECT 1 FROM ${table} WHERE ${field} = $1`;\n    const values = [value];\n\n    if (excludeId) {\n      query += ` AND id != $2`;\n      values.push(excludeId);\n    }\n\n    query += ' LIMIT 1';\n\n    try {\n      const result = await this.pool.query(query, values);\n      return result.rows.length > 0;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get record count\n   */\n  async getRecordCount(table: string, filters: FilterOptions = {}): Promise<number> {\n    const whereClause = this.buildWhereClause(filters);\n    const query = `SELECT COUNT(*) FROM ${table} ${whereClause.clause}`;\n\n    try {\n      const result = await this.pool.query(query, whereClause.values);\n      return parseInt(result.rows[0].count);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Soft delete record\n   */\n  async softDelete(table: string, id: string, deletedAtField: string = 'deleted_at'): Promise<boolean> {\n    const query = `UPDATE ${table} SET ${deletedAtField} = NOW() WHERE id = $1`;\n    \n    try {\n      const result = await this.pool.query(query, [id]);\n      return result.rowCount ? result.rowCount > 0 : false;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Restore soft deleted record\n   */\n  async restore(table: string, id: string, deletedAtField: string = 'deleted_at'): Promise<boolean> {\n    const query = `UPDATE ${table} SET ${deletedAtField} = NULL WHERE id = $1`;\n    \n    try {\n      const result = await this.pool.query(query, [id]);\n      return result.rowCount ? result.rowCount > 0 : false;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n// Export utility functions that don't require pool instance\nexport const buildSearchQuery = (search: string, fields: string[]): string => {\n  if (!search || !fields.length) return '';\n  \n  return fields.map(field => `${field} ILIKE '%${search}%'`).join(' OR ');\n};\n\nexport const sanitizeFieldName = (field: string): string => {\n  // Remove any characters that could be used for SQL injection\n  return field.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\nexport const buildInClause = (values: any[]): string => {\n  if (!values.length) return '';\n  return values.map((_, index) => `$${index + 1}`).join(', ');\n}; "],"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","ignoreList":[]}