14d5e4ac126e6cc5da677de7c3d60570
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the logger
jest.mock('../../../src/utils/logger');
const errorHandler_1 = require("../../../src/middleware/errorHandler");
const logger_1 = __importDefault(require("../../../src/utils/logger"));
const mockLogger = logger_1.default;
describe('Error Handler Middleware', () => {
    let mockRequest;
    let mockResponse;
    let mockNext;
    beforeEach(() => {
        jest.clearAllMocks();
        // Mock request object
        mockRequest = {
            url: '/api/test',
            method: 'GET',
            ip: '127.0.0.1',
            get: jest.fn().mockReturnValue('Mozilla/5.0'),
            requestId: 'test-request-123'
        };
        // Mock response object
        mockResponse = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn().mockReturnThis()
        };
        // Mock next function
        mockNext = jest.fn();
        // Reset environment
        process.env.NODE_ENV = 'test';
    });
    describe('errorHandler', () => {
        it('should handle generic errors with default status 500', () => {
            // Arrange
            const error = new Error('Something went wrong');
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(500);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Something went wrong',
                error: 'INTERNAL_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockLogger.error).toHaveBeenCalledWith('Server error:', expect.objectContaining({
                message: 'Something went wrong',
                url: '/api/test',
                method: 'GET',
                ip: '127.0.0.1',
                requestId: 'test-request-123'
            }));
        });
        it('should handle ValidationError (Joi)', () => {
            // Arrange
            const error = new Error('Validation failed');
            error.name = 'ValidationError';
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Validation failed',
                error: 'VALIDATION_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockLogger.warn).toHaveBeenCalledWith('Validation error:', expect.any(Object));
        });
        it('should handle UnauthorizedError (JWT)', () => {
            // Arrange
            const error = new Error('Authentication failed');
            error.name = 'UnauthorizedError';
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Authentication failed',
                error: 'AUTHENTICATION_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockLogger.warn).toHaveBeenCalledWith('Authentication error:', expect.any(Object));
        });
        it('should handle JsonWebTokenError', () => {
            // Arrange
            const error = new Error('Invalid token');
            error.name = 'JsonWebTokenError';
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Invalid token',
                error: 'INVALID_TOKEN',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockLogger.warn).toHaveBeenCalledWith('JWT error:', expect.any(Object));
        });
        it('should handle TokenExpiredError', () => {
            // Arrange
            const error = new Error('Token expired');
            error.name = 'TokenExpiredError';
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Token expired',
                error: 'TOKEN_EXPIRED',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockLogger.warn).toHaveBeenCalledWith('Token expired:', expect.any(Object));
        });
        it('should handle CastError', () => {
            // Arrange
            const error = new Error('Invalid data format');
            error.name = 'CastError';
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Invalid data format',
                error: 'INVALID_DATA',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockLogger.warn).toHaveBeenCalledWith('Cast error:', expect.any(Object));
        });
        it('should handle PostgreSQL unique constraint violation (23505)', () => {
            // Arrange
            const error = new Error('Resource already exists');
            error.code = '23505';
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(409);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Resource already exists',
                error: 'DUPLICATE_ENTRY',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockLogger.warn).toHaveBeenCalledWith('Duplicate entry error:', expect.any(Object));
        });
        it('should handle PostgreSQL foreign key constraint violation (23503)', () => {
            // Arrange
            const error = new Error('Invalid reference');
            error.code = '23503';
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Invalid reference',
                error: 'INVALID_REFERENCE',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockLogger.warn).toHaveBeenCalledWith('Foreign key error:', expect.any(Object));
        });
        it('should handle database connection errors (ECONNREFUSED)', () => {
            // Arrange
            const error = new Error('Connection refused');
            error.code = 'ECONNREFUSED';
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(503);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Service temporarily unavailable',
                error: 'SERVICE_UNAVAILABLE',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockLogger.error).toHaveBeenCalledWith('Database connection error:', expect.any(Object));
        });
        it('should handle database connection errors (ENOTFOUND)', () => {
            // Arrange
            const error = new Error('Host not found');
            error.code = 'ENOTFOUND';
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(503);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Service temporarily unavailable',
                error: 'SERVICE_UNAVAILABLE',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockLogger.error).toHaveBeenCalledWith('Database connection error:', expect.any(Object));
        });
        it('should handle custom status code from error', () => {
            // Arrange
            const error = new Error('Custom error');
            error.statusCode = 422;
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(422);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Custom error',
                error: 'INTERNAL_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockLogger.warn).toHaveBeenCalledWith('Application error:', expect.any(Object));
        });
        it('should include error details in development environment', () => {
            // Arrange
            process.env.NODE_ENV = 'development';
            const error = new Error('Test error');
            error.stack = 'Error stack trace';
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Test error',
                error: 'INTERNAL_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123',
                details: {
                    name: 'Error',
                    stack: 'Error stack trace'
                }
            });
        });
        it('should not include error details in production environment for 500 errors', () => {
            // Arrange
            process.env.NODE_ENV = 'production';
            const error = new Error('Internal server error');
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Something went wrong', // Generic message in production
                error: 'INTERNAL_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
        it('should handle missing requestId gracefully', () => {
            // Arrange
            mockRequest.requestId = undefined;
            const error = new Error('Test error');
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Test error',
                error: 'INTERNAL_ERROR',
                timestamp: expect.any(String),
                requestId: undefined
            });
        });
        it('should handle missing User-Agent header gracefully', () => {
            // Arrange
            mockRequest.get.mockReturnValue(undefined);
            const error = new Error('Test error');
            // Act
            (0, errorHandler_1.errorHandler)(error, mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockLogger.error).toHaveBeenCalledWith('Server error:', expect.objectContaining({
                userAgent: undefined
            }));
        });
    });
    describe('catchAsync', () => {
        it('should catch async errors and pass them to next', async () => {
            // Arrange
            const asyncFunction = jest.fn().mockRejectedValue(new Error('Async error'));
            const wrappedFunction = (0, errorHandler_1.catchAsync)(asyncFunction);
            // Act
            await wrappedFunction(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalledWith(expect.any(Error));
        });
        it('should pass through successful async functions', async () => {
            // Arrange
            const asyncFunction = jest.fn().mockResolvedValue('success');
            const wrappedFunction = (0, errorHandler_1.catchAsync)(asyncFunction);
            // Act
            await wrappedFunction(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).not.toHaveBeenCalled();
            expect(asyncFunction).toHaveBeenCalledWith(mockRequest, mockResponse, mockNext);
        });
        it('should handle synchronous functions that throw', () => {
            // Arrange
            const syncFunction = jest.fn().mockImplementation(() => {
                throw new Error('Sync error');
            });
            const wrappedFunction = (0, errorHandler_1.catchAsync)(syncFunction);
            // Act
            wrappedFunction(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalledWith(expect.any(Error));
        });
        it('should handle synchronous functions that return successfully', () => {
            // Arrange
            const syncFunction = jest.fn().mockReturnValue('success');
            const wrappedFunction = (0, errorHandler_1.catchAsync)(syncFunction);
            // Act
            wrappedFunction(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).not.toHaveBeenCalled();
            expect(syncFunction).toHaveBeenCalledWith(mockRequest, mockResponse, mockNext);
        });
    });
    describe('createOperationalError', () => {
        it('should create operational error with status code', () => {
            // Act
            const error = (0, errorHandler_1.createOperationalError)('User not found', 404, 'USER_NOT_FOUND');
            // Assert
            expect(error.message).toBe('User not found');
            expect(error.statusCode).toBe(404);
            expect(error.status).toBe('fail');
            expect(error.isOperational).toBe(true);
            expect(error.errorCode).toBe('USER_NOT_FOUND');
        });
        it('should create operational error without error code', () => {
            // Act
            const error = (0, errorHandler_1.createOperationalError)('Bad request', 400);
            // Assert
            expect(error.message).toBe('Bad request');
            expect(error.statusCode).toBe(400);
            expect(error.status).toBe('fail');
            expect(error.isOperational).toBe(true);
            expect(error.errorCode).toBeUndefined();
        });
        it('should set status to error for 5xx status codes', () => {
            // Act
            const error = (0, errorHandler_1.createOperationalError)('Internal server error', 500);
            // Assert
            expect(error.status).toBe('error');
        });
        it('should set status to fail for 4xx status codes', () => {
            // Act
            const error = (0, errorHandler_1.createOperationalError)('Bad request', 400);
            // Assert
            expect(error.status).toBe('fail');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,