{"file":"/home/kim/tito/server/tests/unit/middleware/errorHandler.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/unit/middleware/errorHandler.test.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { \n  errorHandler, \n  catchAsync, \n  createOperationalError,\n  AppError \n} from '../../../src/middleware/errorHandler';\nimport logger from '../../../src/utils/logger';\n\n// Mock the logger\njest.mock('../../../src/utils/logger');\n\nconst mockLogger = logger as jest.Mocked<typeof logger>;\n\ndescribe('Error Handler Middleware', () => {\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockNext: NextFunction;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Mock request object\n    mockRequest = {\n      url: '/api/test',\n      method: 'GET',\n      ip: '127.0.0.1',\n      get: jest.fn().mockReturnValue('Mozilla/5.0'),\n      requestId: 'test-request-123'\n    };\n\n    // Mock response object\n    mockResponse = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis()\n    };\n\n    // Mock next function\n    mockNext = jest.fn();\n\n    // Reset environment\n    process.env.NODE_ENV = 'test';\n  });\n\n  describe('errorHandler', () => {\n    it('should handle generic errors with default status 500', () => {\n      // Arrange\n      const error = new Error('Something went wrong');\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Something went wrong',\n        error: 'INTERNAL_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockLogger.error).toHaveBeenCalledWith('Server error:', expect.objectContaining({\n        message: 'Something went wrong',\n        url: '/api/test',\n        method: 'GET',\n        ip: '127.0.0.1',\n        requestId: 'test-request-123'\n      }));\n    });\n\n    it('should handle ValidationError (Joi)', () => {\n      // Arrange\n      const error = new Error('Validation failed');\n      error.name = 'ValidationError';\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Validation failed',\n        error: 'VALIDATION_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockLogger.warn).toHaveBeenCalledWith('Validation error:', expect.any(Object));\n    });\n\n    it('should handle UnauthorizedError (JWT)', () => {\n      // Arrange\n      const error = new Error('Authentication failed');\n      error.name = 'UnauthorizedError';\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Authentication failed',\n        error: 'AUTHENTICATION_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockLogger.warn).toHaveBeenCalledWith('Authentication error:', expect.any(Object));\n    });\n\n    it('should handle JsonWebTokenError', () => {\n      // Arrange\n      const error = new Error('Invalid token');\n      error.name = 'JsonWebTokenError';\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Invalid token',\n        error: 'INVALID_TOKEN',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockLogger.warn).toHaveBeenCalledWith('JWT error:', expect.any(Object));\n    });\n\n    it('should handle TokenExpiredError', () => {\n      // Arrange\n      const error = new Error('Token expired');\n      error.name = 'TokenExpiredError';\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Token expired',\n        error: 'TOKEN_EXPIRED',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockLogger.warn).toHaveBeenCalledWith('Token expired:', expect.any(Object));\n    });\n\n    it('should handle CastError', () => {\n      // Arrange\n      const error = new Error('Invalid data format');\n      error.name = 'CastError';\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Invalid data format',\n        error: 'INVALID_DATA',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockLogger.warn).toHaveBeenCalledWith('Cast error:', expect.any(Object));\n    });\n\n    it('should handle PostgreSQL unique constraint violation (23505)', () => {\n      // Arrange\n      const error = new Error('Resource already exists');\n      (error as any).code = '23505';\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(409);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Resource already exists',\n        error: 'DUPLICATE_ENTRY',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockLogger.warn).toHaveBeenCalledWith('Duplicate entry error:', expect.any(Object));\n    });\n\n    it('should handle PostgreSQL foreign key constraint violation (23503)', () => {\n      // Arrange\n      const error = new Error('Invalid reference');\n      (error as any).code = '23503';\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Invalid reference',\n        error: 'INVALID_REFERENCE',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockLogger.warn).toHaveBeenCalledWith('Foreign key error:', expect.any(Object));\n    });\n\n    it('should handle database connection errors (ECONNREFUSED)', () => {\n      // Arrange\n      const error = new Error('Connection refused');\n      (error as any).code = 'ECONNREFUSED';\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(503);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Service temporarily unavailable',\n        error: 'SERVICE_UNAVAILABLE',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockLogger.error).toHaveBeenCalledWith('Database connection error:', expect.any(Object));\n    });\n\n    it('should handle database connection errors (ENOTFOUND)', () => {\n      // Arrange\n      const error = new Error('Host not found');\n      (error as any).code = 'ENOTFOUND';\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(503);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Service temporarily unavailable',\n        error: 'SERVICE_UNAVAILABLE',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockLogger.error).toHaveBeenCalledWith('Database connection error:', expect.any(Object));\n    });\n\n    it('should handle custom status code from error', () => {\n      // Arrange\n      const error = new Error('Custom error');\n      (error as any).statusCode = 422;\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(422);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Custom error',\n        error: 'INTERNAL_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockLogger.warn).toHaveBeenCalledWith('Application error:', expect.any(Object));\n    });\n\n    it('should include error details in development environment', () => {\n      // Arrange\n      process.env.NODE_ENV = 'development';\n      const error = new Error('Test error');\n      error.stack = 'Error stack trace';\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Test error',\n        error: 'INTERNAL_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123',\n        details: {\n          name: 'Error',\n          stack: 'Error stack trace'\n        }\n      });\n    });\n\n    it('should not include error details in production environment for 500 errors', () => {\n      // Arrange\n      process.env.NODE_ENV = 'production';\n      const error = new Error('Internal server error');\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Something went wrong', // Generic message in production\n        error: 'INTERNAL_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should handle missing requestId gracefully', () => {\n      // Arrange\n      mockRequest.requestId = undefined;\n      const error = new Error('Test error');\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Test error',\n        error: 'INTERNAL_ERROR',\n        timestamp: expect.any(String),\n        requestId: undefined\n      });\n    });\n\n    it('should handle missing User-Agent header gracefully', () => {\n      // Arrange\n      (mockRequest.get as jest.Mock).mockReturnValue(undefined);\n      const error = new Error('Test error');\n\n      // Act\n      errorHandler(error as AppError, mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockLogger.error).toHaveBeenCalledWith('Server error:', expect.objectContaining({\n        userAgent: undefined\n      }));\n    });\n  });\n\n  describe('catchAsync', () => {\n    it('should catch async errors and pass them to next', async () => {\n      // Arrange\n      const asyncFunction = jest.fn().mockRejectedValue(new Error('Async error'));\n      const wrappedFunction = catchAsync(asyncFunction);\n\n      // Act\n      await wrappedFunction(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalledWith(expect.any(Error));\n    });\n\n    it('should pass through successful async functions', async () => {\n      // Arrange\n      const asyncFunction = jest.fn().mockResolvedValue('success');\n      const wrappedFunction = catchAsync(asyncFunction);\n\n      // Act\n      await wrappedFunction(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).not.toHaveBeenCalled();\n      expect(asyncFunction).toHaveBeenCalledWith(mockRequest, mockResponse, mockNext);\n    });\n\n    it('should handle synchronous functions that throw', () => {\n      // Arrange\n      const syncFunction = jest.fn().mockImplementation(() => {\n        throw new Error('Sync error');\n      });\n      const wrappedFunction = catchAsync(syncFunction);\n\n      // Act\n      wrappedFunction(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalledWith(expect.any(Error));\n    });\n\n    it('should handle synchronous functions that return successfully', () => {\n      // Arrange\n      const syncFunction = jest.fn().mockReturnValue('success');\n      const wrappedFunction = catchAsync(syncFunction);\n\n      // Act\n      wrappedFunction(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).not.toHaveBeenCalled();\n      expect(syncFunction).toHaveBeenCalledWith(mockRequest, mockResponse, mockNext);\n    });\n  });\n\n  describe('createOperationalError', () => {\n    it('should create operational error with status code', () => {\n      // Act\n      const error = createOperationalError('User not found', 404, 'USER_NOT_FOUND');\n\n      // Assert\n      expect(error.message).toBe('User not found');\n      expect(error.statusCode).toBe(404);\n      expect(error.status).toBe('fail');\n      expect(error.isOperational).toBe(true);\n      expect((error as any).errorCode).toBe('USER_NOT_FOUND');\n    });\n\n    it('should create operational error without error code', () => {\n      // Act\n      const error = createOperationalError('Bad request', 400);\n\n      // Assert\n      expect(error.message).toBe('Bad request');\n      expect(error.statusCode).toBe(400);\n      expect(error.status).toBe('fail');\n      expect(error.isOperational).toBe(true);\n      expect((error as any).errorCode).toBeUndefined();\n    });\n\n    it('should set status to error for 5xx status codes', () => {\n      // Act\n      const error = createOperationalError('Internal server error', 500);\n\n      // Assert\n      expect(error.status).toBe('error');\n    });\n\n    it('should set status to fail for 4xx status codes', () => {\n      // Act\n      const error = createOperationalError('Bad request', 400);\n\n      // Assert\n      expect(error.status).toBe('fail');\n    });\n  });\n});\n"],"version":3}