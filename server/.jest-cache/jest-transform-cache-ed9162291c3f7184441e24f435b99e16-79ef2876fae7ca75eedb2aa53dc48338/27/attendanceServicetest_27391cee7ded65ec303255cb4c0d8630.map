{"file":"/home/kim/tito/server/tests/unit/services/attendanceService.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/unit/services/attendanceService.test.ts"],"sourcesContent":["import { attendanceService } from '../../../src/services/attendance/attendanceService';\nimport { TestHelpers } from '../../utils/testHelpers';\nimport { initializeTestConnections } from '../../setup';\n\ndescribe('AttendanceService', () => {\n  let testHelpers: TestHelpers;\n  let createdUserIds: string[] = [];\n  let createdEmployeeIds: string[] = [];\n  let createdDepartmentIds: string[] = [];\n\n  beforeAll(async () => {\n    const { testDbPool } = await initializeTestConnections();\n    testHelpers = new TestHelpers(testDbPool);\n  });\n\n  afterEach(async () => {\n    // Clean up created data after each test\n    for (const employeeId of createdEmployeeIds) {\n      try {\n        await testHelpers.deleteEmployee(employeeId);\n      } catch (error) {\n        // Ignore cleanup errors\n      }\n    }\n    for (const userId of createdUserIds) {\n      try {\n        await testHelpers.deleteUser(userId);\n      } catch (error) {\n        // Ignore cleanup errors\n      }\n    }\n    for (const departmentId of createdDepartmentIds) {\n      try {\n        await testHelpers.deleteDepartment(departmentId);\n      } catch (error) {\n        // Ignore cleanup errors\n      }\n    }\n    createdUserIds = [];\n    createdEmployeeIds = [];\n    createdDepartmentIds = [];\n  });\n\n  describe('clockIn', () => {\n    it('should successfully clock in employee', async () => {\n      // Arrange\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n      \n      const employee = await testHelpers.createTestEmployee({\n        departmentId: department.id,\n        employmentType: 'regular'\n      });\n      createdEmployeeIds.push(employee.id);\n      createdUserIds.push(employee.userId);\n\n      const clockInData = {\n        employeeId: employee.id,\n        qrCodeHash: 'test-qr-hash',\n        timestamp: new Date('2025-01-15T08:00:00Z'),\n        selfieImagePath: '/uploads/selfies/test-selfie.jpg'\n      };\n\n      // Act\n      const result = await attendanceService.clockIn(clockInData);\n\n      // Assert\n      expect(result).toHaveProperty('employeeId');\n      expect(result).toHaveProperty('date');\n      expect(result).toHaveProperty('sessions');\n      expect(result.employeeId).toBe(employee.id);\n    });\n\n    it('should handle clock in for non-existent employee', async () => {\n      // Arrange\n      const clockInData = {\n        employeeId: 'non-existent-id',\n        qrCodeHash: 'test-qr-hash',\n        timestamp: new Date('2025-01-15T08:00:00Z'),\n        selfieImagePath: '/uploads/selfies/test-selfie.jpg'\n      };\n\n      // Act & Assert\n      await expect(attendanceService.clockIn(clockInData)).rejects.toThrow('Employee not found');\n    });\n  });\n\n  describe('clockOut', () => {\n    it('should handle clock out without clock in', async () => {\n      // Arrange\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n      \n      const employee = await testHelpers.createTestEmployee({\n        departmentId: department.id,\n        employmentType: 'regular'\n      });\n      createdEmployeeIds.push(employee.id);\n      createdUserIds.push(employee.userId);\n\n      const clockOutData = {\n        employeeId: employee.id,\n        qrCodeHash: 'test-qr-hash',\n        timestamp: new Date('2025-01-15T12:00:00Z'),\n        selfieImagePath: '/uploads/selfies/test-selfie-out.jpg'\n      };\n\n      // Act & Assert\n      await expect(attendanceService.clockOut(clockOutData)).rejects.toThrow();\n    });\n  });\n\n  describe('getAttendanceSummary', () => {\n    it('should get attendance summary for employee and date', async () => {\n      // Arrange\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n      \n      const employee = await testHelpers.createTestEmployee({\n        departmentId: department.id,\n        employmentType: 'regular'\n      });\n      createdEmployeeIds.push(employee.id);\n      createdUserIds.push(employee.userId);\n\n      const date = new Date('2025-01-15');\n\n      // Act\n      const result = await attendanceService.getAttendanceSummary(employee.id, date);\n\n      // Assert\n      expect(result).toHaveProperty('employeeId');\n      expect(result).toHaveProperty('date');\n      expect(result.employeeId).toBe(employee.id);\n    });\n  });\n\n  describe('getEmployeeAttendanceHistory', () => {\n    it('should get attendance history for employee', async () => {\n      // Arrange\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n      \n      const employee = await testHelpers.createTestEmployee({\n        departmentId: department.id,\n        employmentType: 'regular'\n      });\n      createdEmployeeIds.push(employee.id);\n      createdUserIds.push(employee.userId);\n\n      const startDate = new Date('2025-01-01');\n      const endDate = new Date('2025-01-31');\n\n      // Act\n      const result = await attendanceService.getEmployeeAttendanceHistory(employee.id, startDate, endDate);\n\n      // Assert\n      expect(result).toHaveProperty('records');\n      expect(result).toHaveProperty('total');\n      expect(result).toHaveProperty('page');\n      expect(Array.isArray(result.records)).toBe(true);\n      expect(typeof result.total).toBe('number');\n      expect(typeof result.page).toBe('number');\n    });\n  });\n\n  describe('getEmployeeAttendanceStats', () => {\n    it('should get attendance stats for employee', async () => {\n      // Arrange\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n      \n      const employee = await testHelpers.createTestEmployee({\n        departmentId: department.id,\n        employmentType: 'regular'\n      });\n      createdEmployeeIds.push(employee.id);\n      createdUserIds.push(employee.userId);\n\n      const startDate = new Date('2025-01-01');\n      const endDate = new Date('2025-01-31');\n\n      // Act\n      const result = await attendanceService.getEmployeeAttendanceStats(employee.id, startDate, endDate);\n\n      // Assert\n      expect(result).toHaveProperty('totalDays');\n      expect(result).toHaveProperty('presentDays');\n      expect(result).toHaveProperty('lateDays');\n      expect(result).toHaveProperty('absentDays');\n      expect(result).toHaveProperty('totalHours');\n      expect(typeof result.totalDays).toBe('number');\n      expect(typeof result.presentDays).toBe('number');\n      expect(typeof result.lateDays).toBe('number');\n      expect(typeof result.absentDays).toBe('number');\n      expect(typeof result.totalHours).toBe('number');\n    });\n  });\n\n  describe('getAttendanceRecords', () => {\n    it('should get attendance records', async () => {\n      // Arrange\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n      \n      const employee = await testHelpers.createTestEmployee({\n        departmentId: department.id,\n        employmentType: 'regular'\n      });\n      createdEmployeeIds.push(employee.id);\n      createdUserIds.push(employee.userId);\n\n      const startDate = new Date('2025-01-01');\n      const endDate = new Date('2025-01-31');\n\n      // Act\n      const result = await attendanceService.getAttendanceRecords(startDate, endDate);\n\n      // Assert\n      expect(result).toHaveProperty('records');\n      expect(result).toHaveProperty('total');\n      expect(Array.isArray(result.records)).toBe(true);\n      expect(typeof result.total).toBe('number');\n    });\n  });\n\n  describe('validateAttendanceAction', () => {\n    it('should validate attendance action', async () => {\n      // Act\n      const result = await attendanceService.validateAttendanceAction('valid-employee-id', 'morning_in');\n\n      // Assert\n      expect(result).toHaveProperty('canPerform');\n      expect(typeof result.canPerform).toBe('boolean');\n    });\n  });\n\n  describe('verifyQRCode', () => {\n    it('should verify QR code', async () => {\n      // Act\n      const result = await attendanceService.verifyQRCode('test-qr-hash');\n\n      // Assert\n      expect(result).toHaveProperty('isValid');\n      expect(typeof result.isValid).toBe('boolean');\n    });\n  });\n\n  describe('getCurrentAttendanceStatus', () => {\n    it('should get current attendance status', async () => {\n      // Arrange\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n      \n      const employee = await testHelpers.createTestEmployee({\n        departmentId: department.id,\n        employmentType: 'regular'\n      });\n      createdEmployeeIds.push(employee.id);\n      createdUserIds.push(employee.userId);\n\n      // Act\n      const result = await attendanceService.getCurrentAttendanceStatus(employee.id);\n\n      // Assert\n      expect(result).toHaveProperty('isClockedIn');\n      expect(result).toHaveProperty('lastClockIn');\n      expect(result).toHaveProperty('lastClockOut');\n      expect(result).toHaveProperty('todayHours');\n      expect(result).toHaveProperty('todayStatus');\n      expect(typeof result.isClockedIn).toBe('boolean');\n      expect(typeof result.todayHours).toBe('number');\n      expect(result.todayStatus !== undefined).toBe(true);\n    });\n  });\n});"],"version":3}