2721d1b24a2c5646f21d07a075e6987d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the dependencies
jest.mock('../../../src/services/auth/authService');
jest.mock('../../../src/models/auth/User');
const authController_1 = require("../../../src/controllers/auth/authController");
const authService_1 = require("../../../src/services/auth/authService");
const User_1 = require("../../../src/models/auth/User");
const roles_1 = require("../../../src/utils/constants/roles");
const mockAuthService = authService_1.authService;
const mockUserModel = User_1.userModel;
describe('AuthController', () => {
    let authController;
    let mockRequest;
    let mockResponse;
    beforeEach(() => {
        authController = new authController_1.AuthController();
        jest.clearAllMocks();
        // Mock request object
        mockRequest = {
            body: {},
            params: {},
            query: {},
            requestId: 'test-request-123',
            user: undefined
        };
        // Mock response object
        mockResponse = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn().mockReturnThis(),
            cookie: jest.fn().mockReturnThis(),
            clearCookie: jest.fn().mockReturnThis()
        };
    });
    describe('login', () => {
        it('should login successfully with valid credentials', async () => {
            // Arrange
            mockRequest.body = {
                email: 'test@example.com',
                password: 'password123'
            };
            const mockAuthResult = {
                success: true,
                message: 'Login successful',
                data: {
                    user: {
                        userId: 'user-123',
                        email: 'test@example.com',
                        firstName: 'John',
                        lastName: 'Doe',
                        role: roles_1.USER_ROLES.EMPLOYEE
                    },
                    accessToken: 'access-token-123',
                    refreshToken: 'refresh-token-123'
                }
            };
            mockAuthService.login.mockResolvedValue(mockAuthResult);
            // Act
            await authController.login(mockRequest, mockResponse);
            // Assert
            expect(mockAuthService.login).toHaveBeenCalledWith({
                email: 'test@example.com',
                password: 'password123'
            });
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Login successful',
                data: mockAuthResult.data,
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            // Note: The controller doesn't set cookies, it returns the token in the response data
        });
        it('should return 400 for missing credentials', async () => {
            // Arrange
            mockRequest.body = {
                email: 'test@example.com'
                // password missing
            };
            // Act
            await authController.login(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Email and password are required',
                error: 'MISSING_CREDENTIALS',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockAuthService.login).not.toHaveBeenCalled();
        });
        it('should return 401 for invalid credentials', async () => {
            // Arrange
            mockRequest.body = {
                email: 'test@example.com',
                password: 'wrongpassword'
            };
            const mockAuthResult = {
                success: false,
                message: 'Invalid credentials',
                error: 'INVALID_CREDENTIALS'
            };
            mockAuthService.login.mockResolvedValue(mockAuthResult);
            // Act
            await authController.login(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Invalid credentials',
                error: 'INVALID_CREDENTIALS',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
        it('should handle service errors gracefully', async () => {
            // Arrange
            mockRequest.body = {
                email: 'test@example.com',
                password: 'password123'
            };
            mockAuthService.login.mockRejectedValue(new Error('Database connection failed'));
            // Act
            await authController.login(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(500);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Login failed',
                error: 'INTERNAL_SERVER_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
    });
    describe('logout', () => {
        it('should logout successfully', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'user-123',
                email: 'test@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockAuthService.logout.mockResolvedValue({
                success: true,
                message: 'Logout successful'
            });
            // Act
            await authController.logout(mockRequest, mockResponse);
            // Assert
            expect(mockAuthService.logout).toHaveBeenCalledWith('user-123');
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Logout successful',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
        it('should handle logout errors', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'user-123',
                email: 'test@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockAuthService.logout.mockRejectedValue(new Error('Logout failed'));
            // Act
            await authController.logout(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(500);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Logout failed',
                error: 'INTERNAL_SERVER_ERROR',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
    });
    describe('refreshToken', () => {
        it('should refresh token successfully', async () => {
            // Arrange
            mockRequest.body = {
                refreshToken: 'valid-refresh-token'
            };
            const mockAuthResult = {
                success: true,
                message: 'Token refreshed successfully',
                data: {
                    accessToken: 'new-access-token',
                    refreshToken: 'new-refresh-token'
                }
            };
            mockAuthService.refreshToken.mockResolvedValue(mockAuthResult);
            // Act
            await authController.refreshToken(mockRequest, mockResponse);
            // Assert
            expect(mockAuthService.refreshToken).toHaveBeenCalledWith('valid-refresh-token');
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Token refreshed successfully',
                data: mockAuthResult.data,
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
        it('should return 400 for missing refresh token', async () => {
            // Arrange
            mockRequest.body = {};
            // Act
            await authController.refreshToken(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Refresh token is required',
                error: 'MISSING_REFRESH_TOKEN',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockAuthService.refreshToken).not.toHaveBeenCalled();
        });
        it('should return 401 for invalid refresh token', async () => {
            // Arrange
            mockRequest.body = {
                refreshToken: 'invalid-refresh-token'
            };
            const mockAuthResult = {
                success: false,
                message: 'Invalid refresh token',
                error: 'INVALID_REFRESH_TOKEN'
            };
            mockAuthService.refreshToken.mockResolvedValue(mockAuthResult);
            // Act
            await authController.refreshToken(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Invalid refresh token',
                error: 'INVALID_REFRESH_TOKEN',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
    });
    describe('changePassword', () => {
        it('should change password successfully', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'user-123',
                email: 'test@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.body = {
                currentPassword: 'oldpassword',
                newPassword: 'newpassword123'
            };
            const mockResult = {
                success: true,
                message: 'Password changed successfully'
            };
            mockAuthService.changePassword.mockResolvedValue(mockResult);
            // Act
            await authController.changePassword(mockRequest, mockResponse);
            // Assert
            expect(mockAuthService.changePassword).toHaveBeenCalledWith('user-123', 'oldpassword', 'newpassword123');
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Password changed successfully',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
        it('should return 400 for missing password fields', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'user-123',
                email: 'test@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.body = {
                currentPassword: 'oldpassword'
                // newPassword missing
            };
            // Act
            await authController.changePassword(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Current password and new password are required',
                error: 'MISSING_PASSWORDS',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockAuthService.changePassword).not.toHaveBeenCalled();
        });
        it('should return 401 for incorrect current password', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'user-123',
                email: 'test@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.body = {
                currentPassword: 'wrongpassword',
                newPassword: 'newpassword123'
            };
            const mockResult = {
                success: false,
                message: 'Current password is incorrect',
                error: 'INCORRECT_CURRENT_PASSWORD'
            };
            mockAuthService.changePassword.mockResolvedValue(mockResult);
            // Act
            await authController.changePassword(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Current password is incorrect',
                error: 'INCORRECT_CURRENT_PASSWORD',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
    });
    describe('requestPasswordReset', () => {
        it('should request password reset successfully', async () => {
            // Arrange
            mockRequest.body = {
                email: 'test@example.com'
            };
            const mockResult = {
                success: true,
                message: 'Password reset email sent'
            };
            mockAuthService.requestPasswordReset.mockResolvedValue(mockResult);
            // Act
            await authController.requestPasswordReset(mockRequest, mockResponse);
            // Assert
            expect(mockAuthService.requestPasswordReset).toHaveBeenCalledWith('test@example.com');
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Password reset email sent',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
        it('should return 400 for missing email', async () => {
            // Arrange
            mockRequest.body = {};
            // Act
            await authController.requestPasswordReset(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Email is required',
                error: 'MISSING_EMAIL',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockAuthService.requestPasswordReset).not.toHaveBeenCalled();
        });
    });
    describe('resetPassword', () => {
        it('should reset password successfully', async () => {
            // Arrange
            mockRequest.body = {
                email: 'test@example.com',
                resetToken: 'valid-reset-token',
                newPassword: 'newpassword123'
            };
            const mockResult = {
                success: true,
                message: 'Password reset successfully'
            };
            mockAuthService.resetPassword.mockResolvedValue(mockResult);
            // Act
            await authController.resetPassword(mockRequest, mockResponse);
            // Assert
            expect(mockAuthService.resetPassword).toHaveBeenCalledWith('test@example.com', 'valid-reset-token', 'newpassword123');
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Password reset successfully',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
        it('should return 400 for missing fields', async () => {
            // Arrange
            mockRequest.body = {
                token: 'valid-reset-token'
                // newPassword missing
            };
            // Act
            await authController.resetPassword(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Email, reset token, and new password are required',
                error: 'MISSING_RESET_DATA',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockAuthService.resetPassword).not.toHaveBeenCalled();
        });
        it('should return 400 for invalid token', async () => {
            // Arrange
            mockRequest.body = {
                email: 'test@example.com',
                resetToken: 'invalid-token',
                newPassword: 'newpassword123'
            };
            const mockResult = {
                success: false,
                message: 'Invalid or expired reset token',
                error: 'INVALID_TOKEN'
            };
            mockAuthService.resetPassword.mockResolvedValue(mockResult);
            // Act
            await authController.resetPassword(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Invalid or expired reset token',
                error: 'INVALID_TOKEN',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
    });
    describe('setupPassword', () => {
        it('should setup password successfully', async () => {
            // Arrange
            mockRequest.body = {
                token: 'valid-setup-token',
                password: 'newpassword123'
            };
            const mockResult = {
                success: true,
                message: 'Password setup successfully'
            };
            mockAuthService.setupPassword.mockResolvedValue(mockResult);
            // Act
            await authController.setupPassword(mockRequest, mockResponse);
            // Assert
            expect(mockAuthService.setupPassword).toHaveBeenCalledWith('valid-setup-token', 'newpassword123');
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Password setup successfully',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
        it('should return 400 for missing fields', async () => {
            // Arrange
            mockRequest.body = {
                token: 'valid-setup-token'
                // password missing
            };
            // Act
            await authController.setupPassword(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Setup token and password are required',
                error: 'MISSING_SETUP_DATA',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockAuthService.setupPassword).not.toHaveBeenCalled();
        });
    });
    describe('getProfile', () => {
        it('should get user profile successfully', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'user-123',
                email: 'test@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            const mockProfile = {
                id: 'user-123',
                email: 'test@example.com',
                first_name: 'John',
                last_name: 'Doe',
                role: roles_1.USER_ROLES.EMPLOYEE,
                is_active: true,
                created_at: new Date('2023-01-01T00:00:00Z'),
                updated_at: new Date('2023-01-01T00:00:00Z')
            };
            const mockResult = {
                success: true,
                message: 'Profile retrieved successfully',
                data: mockProfile
            };
            mockAuthService.getUserProfile.mockResolvedValue(mockResult);
            // Act
            await authController.getProfile(mockRequest, mockResponse);
            // Assert
            expect(mockAuthService.getUserProfile).toHaveBeenCalledWith('user-123');
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Profile retrieved successfully',
                data: mockProfile,
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
        it('should return 404 if user not found', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'user-123',
                email: 'test@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            const mockResult = {
                success: false,
                message: 'User not found',
                error: 'USER_NOT_FOUND'
            };
            mockAuthService.getUserProfile.mockResolvedValue(mockResult);
            // Act
            await authController.getProfile(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(404);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'User not found',
                error: 'USER_NOT_FOUND',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
    });
    describe('updateProfile', () => {
        it('should update profile successfully', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'user-123',
                email: 'test@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.body = {
                firstName: 'Jane',
                lastName: 'Smith',
                email: 'test@example.com'
            };
            const mockResult = {
                success: true,
                message: 'Profile updated successfully',
                data: {
                    id: 'user-123',
                    email: 'test@example.com',
                    first_name: 'Jane',
                    last_name: 'Smith',
                    role: roles_1.USER_ROLES.EMPLOYEE,
                    is_active: true,
                    created_at: new Date('2023-01-01T00:00:00Z'),
                    updated_at: new Date('2023-01-01T00:00:00Z')
                }
            };
            mockAuthService.updateUserProfile.mockResolvedValue(mockResult);
            // Act
            await authController.updateProfile(mockRequest, mockResponse);
            // Assert
            expect(mockAuthService.updateUserProfile).toHaveBeenCalledWith('user-123', {
                firstName: 'Jane',
                lastName: 'Smith',
                email: 'test@example.com'
            });
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Profile updated successfully',
                data: mockResult.data,
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
        it('should return 400 for invalid update data', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'user-123',
                email: 'test@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.body = {
                email: 'invalid-email' // Invalid email format
            };
            // Act
            await authController.updateProfile(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'All fields are required',
                error: 'MISSING_FIELDS',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockAuthService.updateUserProfile).not.toHaveBeenCalled();
        });
    });
    describe('createUser', () => {
        it('should create user successfully (HR role)', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'hr-user-123',
                email: 'hr@example.com',
                role: roles_1.USER_ROLES.HR,
                tokenVersion: 1
            };
            mockRequest.body = {
                email: 'newuser@example.com',
                password: 'password123',
                first_name: 'New',
                last_name: 'User',
                role: roles_1.USER_ROLES.EMPLOYEE
            };
            const mockNewUser = {
                id: 'new-user-123',
                email: 'newuser@example.com',
                first_name: 'New',
                last_name: 'User',
                role: roles_1.USER_ROLES.EMPLOYEE,
                is_active: true,
                created_at: new Date('2023-01-01T00:00:00Z'),
                updated_at: new Date('2023-01-01T00:00:00Z')
            };
            mockUserModel.createUser.mockResolvedValue(mockNewUser);
            // Act
            await authController.createUser(mockRequest, mockResponse);
            // Assert
            expect(mockUserModel.createUser).toHaveBeenCalledWith({
                email: 'newuser@example.com',
                password: 'password123',
                first_name: 'New',
                last_name: 'User',
                role: roles_1.USER_ROLES.EMPLOYEE
            });
            expect(mockResponse.status).toHaveBeenCalledWith(201);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'User created successfully',
                data: { user: mockNewUser },
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
        it('should return 403 for non-HR users', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'user-123',
                email: 'test@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.body = {
                email: 'newuser@example.com',
                firstName: 'New',
                lastName: 'User',
                role: roles_1.USER_ROLES.EMPLOYEE
                // Missing password field
            };
            // Act
            await authController.createUser(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'All fields are required',
                error: 'MISSING_FIELDS',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockUserModel.createUser).not.toHaveBeenCalled();
        });
        it('should return 400 for missing required fields', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'hr-user-123',
                email: 'hr@example.com',
                role: roles_1.USER_ROLES.HR,
                tokenVersion: 1
            };
            mockRequest.body = {
                email: 'newuser@example.com'
                // firstName and lastName missing
            };
            // Act
            await authController.createUser(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'All fields are required',
                error: 'MISSING_FIELDS',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockUserModel.createUser).not.toHaveBeenCalled();
        });
    });
    describe('getAllUsers', () => {
        it('should get all users successfully (HR role)', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'hr-user-123',
                email: 'hr@example.com',
                role: roles_1.USER_ROLES.HR,
                tokenVersion: 1
            };
            mockRequest.query = {
                page: '1',
                limit: '10'
            };
            const mockUsers = [
                {
                    id: 'user-1',
                    email: 'user1@example.com',
                    first_name: 'User',
                    last_name: 'One',
                    role: roles_1.USER_ROLES.EMPLOYEE,
                    is_active: true,
                    created_at: new Date('2023-01-01T00:00:00Z'),
                    updated_at: new Date('2023-01-01T00:00:00Z')
                },
                {
                    id: 'user-2',
                    email: 'user2@example.com',
                    first_name: 'User',
                    last_name: 'Two',
                    role: roles_1.USER_ROLES.DEPARTMENT_HEAD,
                    is_active: true,
                    created_at: new Date('2023-01-01T00:00:00Z'),
                    updated_at: new Date('2023-01-01T00:00:00Z')
                }
            ];
            mockUserModel.listAllUsers.mockResolvedValue(mockUsers);
            // Act
            await authController.getAllUsers(mockRequest, mockResponse);
            // Assert
            expect(mockUserModel.listAllUsers).toHaveBeenCalledWith();
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Users retrieved successfully',
                data: {
                    users: mockUsers
                },
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
        it('should return 403 for non-HR users', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'user-123',
                email: 'test@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            const mockUsers = [];
            mockUserModel.listAllUsers.mockResolvedValue(mockUsers);
            // Act
            await authController.getAllUsers(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Users retrieved successfully',
                data: {
                    users: mockUsers
                },
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockUserModel.listAllUsers).toHaveBeenCalledWith();
        });
    });
    describe('updateUser', () => {
        it('should update user successfully (HR role)', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'hr-user-123',
                email: 'hr@example.com',
                role: roles_1.USER_ROLES.HR,
                tokenVersion: 1
            };
            mockRequest.params = {
                id: 'user-123'
            };
            mockRequest.body = {
                firstName: 'Updated',
                lastName: 'Name'
            };
            const mockUpdatedUser = {
                id: 'user-123',
                email: 'user@example.com',
                first_name: 'Updated',
                last_name: 'Name',
                role: roles_1.USER_ROLES.EMPLOYEE,
                is_active: true,
                created_at: new Date('2023-01-01T00:00:00Z'),
                updated_at: new Date('2023-01-01T00:00:00Z')
            };
            mockUserModel.updateUser.mockResolvedValue(mockUpdatedUser);
            // Act
            await authController.updateUser(mockRequest, mockResponse);
            // Assert
            expect(mockUserModel.updateUser).toHaveBeenCalledWith('user-123', {
                first_name: 'Updated',
                last_name: 'Name'
            });
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'User updated successfully',
                data: mockUpdatedUser,
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
        });
        it('should return 403 for non-HR users', async () => {
            // Arrange
            mockRequest.user = {
                userId: 'user-123',
                email: 'test@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.params = {
                id: 'user-456'
            };
            mockRequest.body = {
                firstName: 'Updated'
            };
            // Act
            await authController.updateUser(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Access denied. HR role required.',
                error: 'INSUFFICIENT_PERMISSIONS',
                timestamp: expect.any(String),
                requestId: 'test-request-123'
            });
            expect(mockUserModel.updateUser).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,