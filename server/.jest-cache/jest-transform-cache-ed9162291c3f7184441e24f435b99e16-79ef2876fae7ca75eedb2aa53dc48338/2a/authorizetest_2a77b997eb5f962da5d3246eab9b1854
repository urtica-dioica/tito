c1db812fa93e4364da589fee33fc090e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const authorize_1 = require("../../../src/middleware/auth/authorize");
const roles_1 = require("../../../src/utils/constants/roles");
describe('Authorization Middleware', () => {
    let mockRequest;
    let mockResponse;
    let mockNext;
    beforeEach(() => {
        jest.clearAllMocks();
        // Mock request object
        mockRequest = {
            method: 'GET',
            user: undefined
        };
        // Mock response object
        mockResponse = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn().mockReturnThis()
        };
        // Mock next function
        mockNext = jest.fn();
    });
    describe('authorize', () => {
        it('should authorize user with correct role', () => {
            // Arrange
            const hrUser = {
                userId: 'user-123',
                email: 'hr@example.com',
                role: roles_1.USER_ROLES.HR,
                tokenVersion: 1
            };
            mockRequest.user = hrUser;
            const authorizeHR = (0, authorize_1.authorize)([roles_1.USER_ROLES.HR]);
            // Act
            authorizeHR(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
            expect(mockResponse.json).not.toHaveBeenCalled();
        });
        it('should authorize user with one of multiple allowed roles', () => {
            // Arrange
            const deptHeadUser = {
                userId: 'user-456',
                email: 'depthead@example.com',
                role: roles_1.USER_ROLES.DEPARTMENT_HEAD,
                tokenVersion: 1
            };
            mockRequest.user = deptHeadUser;
            const authorizeHRorDeptHead = (0, authorize_1.authorize)([roles_1.USER_ROLES.HR, roles_1.USER_ROLES.DEPARTMENT_HEAD]);
            // Act
            authorizeHRorDeptHead(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
            expect(mockResponse.json).not.toHaveBeenCalled();
        });
        it('should handle CORS preflight requests', () => {
            // Arrange
            mockRequest.method = 'OPTIONS';
            const authorizeHR = (0, authorize_1.authorize)([roles_1.USER_ROLES.HR]);
            // Act
            authorizeHR(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
            expect(mockResponse.json).not.toHaveBeenCalled();
        });
        it('should return 401 when user is not authenticated', () => {
            // Arrange
            mockRequest.user = undefined;
            const authorizeHR = (0, authorize_1.authorize)([roles_1.USER_ROLES.HR]);
            // Act
            authorizeHR(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Authentication required',
                error: 'AUTHENTICATION_REQUIRED'
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should return 403 when user has insufficient permissions', () => {
            // Arrange
            const employeeUser = {
                userId: 'user-789',
                email: 'employee@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.user = employeeUser;
            const authorizeHR = (0, authorize_1.authorize)([roles_1.USER_ROLES.HR]);
            // Act
            authorizeHR(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Insufficient permissions',
                error: 'INSUFFICIENT_PERMISSIONS',
                requiredRoles: [roles_1.USER_ROLES.HR],
                userRole: roles_1.USER_ROLES.EMPLOYEE
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should return 403 when user role is not in allowed roles', () => {
            // Arrange
            const employeeUser = {
                userId: 'user-789',
                email: 'employee@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.user = employeeUser;
            const authorizeHRorDeptHead = (0, authorize_1.authorize)([roles_1.USER_ROLES.HR, roles_1.USER_ROLES.DEPARTMENT_HEAD]);
            // Act
            authorizeHRorDeptHead(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Insufficient permissions',
                error: 'INSUFFICIENT_PERMISSIONS',
                requiredRoles: [roles_1.USER_ROLES.HR, roles_1.USER_ROLES.DEPARTMENT_HEAD],
                userRole: roles_1.USER_ROLES.EMPLOYEE
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should handle errors gracefully', () => {
            // Arrange
            const invalidUser = {
                userId: 'user-123',
                email: 'test@example.com',
                role: null, // Invalid role
                tokenVersion: 1
            };
            mockRequest.user = invalidUser;
            const authorizeHR = (0, authorize_1.authorize)([roles_1.USER_ROLES.HR]);
            // Act
            authorizeHR(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(500);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Authorization check failed',
                error: 'AUTHORIZATION_FAILED'
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
    });
    describe('requireHR', () => {
        it('should allow HR users', () => {
            // Arrange
            const hrUser = {
                userId: 'user-123',
                email: 'hr@example.com',
                role: roles_1.USER_ROLES.HR,
                tokenVersion: 1
            };
            mockRequest.user = hrUser;
            // Act
            (0, authorize_1.requireHR)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
        });
        it('should deny non-HR users', () => {
            // Arrange
            const employeeUser = {
                userId: 'user-456',
                email: 'employee@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.user = employeeUser;
            // Act
            (0, authorize_1.requireHR)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Insufficient permissions',
                error: 'INSUFFICIENT_PERMISSIONS',
                requiredRoles: [roles_1.USER_ROLES.HR],
                userRole: roles_1.USER_ROLES.EMPLOYEE
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
    });
    describe('requireHROrDeptHead', () => {
        it('should allow HR users', () => {
            // Arrange
            const hrUser = {
                userId: 'user-123',
                email: 'hr@example.com',
                role: roles_1.USER_ROLES.HR,
                tokenVersion: 1
            };
            mockRequest.user = hrUser;
            // Act
            (0, authorize_1.requireHROrDeptHead)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
        });
        it('should allow department head users', () => {
            // Arrange
            const deptHeadUser = {
                userId: 'user-456',
                email: 'depthead@example.com',
                role: roles_1.USER_ROLES.DEPARTMENT_HEAD,
                tokenVersion: 1
            };
            mockRequest.user = deptHeadUser;
            // Act
            (0, authorize_1.requireHROrDeptHead)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
        });
        it('should deny employee users', () => {
            // Arrange
            const employeeUser = {
                userId: 'user-789',
                email: 'employee@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.user = employeeUser;
            // Act
            (0, authorize_1.requireHROrDeptHead)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Insufficient permissions',
                error: 'INSUFFICIENT_PERMISSIONS',
                requiredRoles: [roles_1.USER_ROLES.HR, roles_1.USER_ROLES.DEPARTMENT_HEAD],
                userRole: roles_1.USER_ROLES.EMPLOYEE
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
    });
    describe('requireAuthenticatedUser', () => {
        it('should allow HR users', () => {
            // Arrange
            const hrUser = {
                userId: 'user-123',
                email: 'hr@example.com',
                role: roles_1.USER_ROLES.HR,
                tokenVersion: 1
            };
            mockRequest.user = hrUser;
            // Act
            (0, authorize_1.requireAuthenticatedUser)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
        });
        it('should allow department head users', () => {
            // Arrange
            const deptHeadUser = {
                userId: 'user-456',
                email: 'depthead@example.com',
                role: roles_1.USER_ROLES.DEPARTMENT_HEAD,
                tokenVersion: 1
            };
            mockRequest.user = deptHeadUser;
            // Act
            (0, authorize_1.requireAuthenticatedUser)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
        });
        it('should allow employee users', () => {
            // Arrange
            const employeeUser = {
                userId: 'user-789',
                email: 'employee@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.user = employeeUser;
            // Act
            (0, authorize_1.requireAuthenticatedUser)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
        });
        it('should deny unauthenticated users', () => {
            // Arrange
            mockRequest.user = undefined;
            // Act
            (0, authorize_1.requireAuthenticatedUser)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(401);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Authentication required',
                error: 'AUTHENTICATION_REQUIRED'
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
    });
    describe('requireDepartmentHead', () => {
        it('should allow department head users', () => {
            // Arrange
            const deptHeadUser = {
                userId: 'user-456',
                email: 'depthead@example.com',
                role: roles_1.USER_ROLES.DEPARTMENT_HEAD,
                tokenVersion: 1
            };
            mockRequest.user = deptHeadUser;
            // Act
            (0, authorize_1.requireDepartmentHead)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
        });
        it('should deny HR users', () => {
            // Arrange
            const hrUser = {
                userId: 'user-123',
                email: 'hr@example.com',
                role: roles_1.USER_ROLES.HR,
                tokenVersion: 1
            };
            mockRequest.user = hrUser;
            // Act
            (0, authorize_1.requireDepartmentHead)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Insufficient permissions',
                error: 'INSUFFICIENT_PERMISSIONS',
                requiredRoles: [roles_1.USER_ROLES.DEPARTMENT_HEAD],
                userRole: roles_1.USER_ROLES.HR
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should deny employee users', () => {
            // Arrange
            const employeeUser = {
                userId: 'user-789',
                email: 'employee@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.user = employeeUser;
            // Act
            (0, authorize_1.requireDepartmentHead)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Insufficient permissions',
                error: 'INSUFFICIENT_PERMISSIONS',
                requiredRoles: [roles_1.USER_ROLES.DEPARTMENT_HEAD],
                userRole: roles_1.USER_ROLES.EMPLOYEE
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
    });
    describe('requireEmployee', () => {
        it('should allow employee users', () => {
            // Arrange
            const employeeUser = {
                userId: 'user-789',
                email: 'employee@example.com',
                role: roles_1.USER_ROLES.EMPLOYEE,
                tokenVersion: 1
            };
            mockRequest.user = employeeUser;
            // Act
            (0, authorize_1.requireEmployee)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockNext).toHaveBeenCalled();
            expect(mockResponse.status).not.toHaveBeenCalled();
        });
        it('should deny HR users', () => {
            // Arrange
            const hrUser = {
                userId: 'user-123',
                email: 'hr@example.com',
                role: roles_1.USER_ROLES.HR,
                tokenVersion: 1
            };
            mockRequest.user = hrUser;
            // Act
            (0, authorize_1.requireEmployee)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Insufficient permissions',
                error: 'INSUFFICIENT_PERMISSIONS',
                requiredRoles: [roles_1.USER_ROLES.EMPLOYEE],
                userRole: roles_1.USER_ROLES.HR
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
        it('should deny department head users', () => {
            // Arrange
            const deptHeadUser = {
                userId: 'user-456',
                email: 'depthead@example.com',
                role: roles_1.USER_ROLES.DEPARTMENT_HEAD,
                tokenVersion: 1
            };
            mockRequest.user = deptHeadUser;
            // Act
            (0, authorize_1.requireEmployee)(mockRequest, mockResponse, mockNext);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(403);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Insufficient permissions',
                error: 'INSUFFICIENT_PERMISSIONS',
                requiredRoles: [roles_1.USER_ROLES.EMPLOYEE],
                userRole: roles_1.USER_ROLES.DEPARTMENT_HEAD
            });
            expect(mockNext).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,