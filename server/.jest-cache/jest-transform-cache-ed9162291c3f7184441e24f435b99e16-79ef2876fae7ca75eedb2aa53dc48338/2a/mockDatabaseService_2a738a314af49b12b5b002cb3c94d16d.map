{"file":"/home/kim/tito/server/tests/utils/mockDatabaseService.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/utils/mockDatabaseService.ts"],"sourcesContent":["/**\n * Mock Database Service for Testing\n * \n * This mock service provides the same interface as the real database service\n * but stores data in memory instead of connecting to PostgreSQL.\n */\n\nexport interface MockQueryResult {\n  rows: any[];\n  rowCount: number;\n}\n\nexport interface MockDatabaseData {\n  [tableName: string]: {\n    [id: string]: any;\n  };\n}\n\nexport class MockDatabaseService {\n  private data: MockDatabaseData = {};\n  private sequenceCounters: { [sequenceName: string]: number } = {};\n\n  constructor() {\n    this.initializeSequences();\n  }\n\n  private initializeSequences(): void {\n    // Initialize sequence counters\n    this.sequenceCounters = {\n      users_id_seq: 1,\n      departments_id_seq: 1,\n      employees_id_seq: 1,\n      attendance_records_id_seq: 1,\n      attendance_sessions_id_seq: 1,\n      time_correction_requests_id_seq: 1,\n      overtime_requests_id_seq: 1,\n      leaves_id_seq: 1,\n      leave_balances_id_seq: 1,\n      payroll_periods_id_seq: 1,\n      payroll_records_id_seq: 1,\n      payroll_deductions_id_seq: 1,\n      deduction_types_id_seq: 1,\n      payroll_approvals_id_seq: 1,\n      system_settings_id_seq: 1,\n      id_cards_id_seq: 1\n    };\n\n    // Initialize table data\n    this.data = {\n      users: {},\n      departments: {},\n      employees: {},\n      attendance_records: {},\n      attendance_sessions: {},\n      time_correction_requests: {},\n      overtime_requests: {},\n      leaves: {},\n      leave_balances: {},\n      payroll_periods: {},\n      payroll_records: {},\n      payroll_deductions: {},\n      deduction_types: {},\n      payroll_approvals: {},\n      system_settings: {},\n      id_cards: {}\n    };\n  }\n\n  // Event emitter methods\n  on(_event: string, _callback: (...args: any[]) => void): void {\n    // Mock event emitter - do nothing for tests\n  }\n\n  // Connection methods\n  async connect(): Promise<any> {\n    return {\n      query: this.query.bind(this),\n      release: () => {}\n    };\n  }\n\n  async query(query: string, values: any[] = []): Promise<MockQueryResult> {\n    console.log('Mock DB: Query called:', query);\n    const normalizedQuery = query.trim().toLowerCase();\n    \n    // Handle INSERT queries\n    if (normalizedQuery.startsWith('insert into')) {\n      return this.handleInsert(query, values);\n    }\n    \n    // Handle SELECT queries\n    if (normalizedQuery.startsWith('select')) {\n      return this.handleSelect(query, values);\n    }\n    \n    // Handle UPDATE queries\n    if (normalizedQuery.startsWith('update')) {\n      return this.handleUpdate(query, values);\n    }\n    \n    // Handle DELETE queries\n    if (normalizedQuery.startsWith('delete')) {\n      return this.handleDelete(query, values);\n    }\n    \n    // Handle ALTER SEQUENCE queries\n    if (normalizedQuery.startsWith('alter sequence')) {\n      return this.handleAlterSequence(query, values);\n    }\n    \n    // Handle SET queries\n    if (normalizedQuery.startsWith('set')) {\n      return { rows: [], rowCount: 0 };\n    }\n    \n    // Default response for other queries\n    return { rows: [], rowCount: 0 };\n  }\n\n  private handleInsert(query: string, values: any[]): MockQueryResult {\n    // Extract table name from INSERT query\n    const tableMatch = query.match(/insert into\\s+(\\w+)/i);\n    if (!tableMatch) {\n      return { rows: [], rowCount: 0 };\n    }\n    \n    const tableName = tableMatch[1];\n    \n    // Generate ID if not provided\n    const id = this.generateId(tableName);\n    \n    // Create row data\n    const row: any = { id };\n    \n    // Map values to columns (simplified - assumes values are in order)\n    const columnMatch = query.match(/insert into\\s+\\w+\\s*\\(([^)]+)\\)/i);\n    if (columnMatch) {\n      const columns = columnMatch[1].split(',').map(col => col.trim());\n      columns.forEach((column, index) => {\n        if (values[index] !== undefined) {\n          row[column] = values[index];\n        }\n      });\n    }\n    \n    // Store in mock data\n    this.data[tableName][id] = row;\n    \n    // Return the inserted row\n    return { rows: [row], rowCount: 1 };\n  }\n\n  private handleSelect(query: string, values: any[]): MockQueryResult {\n    // Handle COUNT(*) queries (case-insensitive)\n    if (query.toLowerCase().includes('count(*)')) {\n      const tableMatch = query.match(/from\\s+(\\w+)/i);\n      if (!tableMatch) {\n        return { rows: [{ count: '0' }], rowCount: 1 };\n      }\n      \n      const tableName = tableMatch[1];\n      const tableData = this.data[tableName] || {};\n      let count = Object.keys(tableData).length;\n      \n      // Handle WHERE clauses for COUNT\n      if (query.includes('where')) {\n        let rows = Object.values(tableData);\n        \n        // Handle WHERE status = $1\n        if (query.includes('where status = $1') && values[0]) {\n          rows = rows.filter(row => row.status === values[0]);\n        }\n        \n        // Handle WHERE employee_id = $1\n        if (query.includes('where employee_id = $1') && values[0]) {\n          rows = rows.filter(row => row.employee_id === values[0]);\n        }\n        \n        count = rows.length;\n      }\n      \n      return { rows: [{ count: count.toString() }], rowCount: 1 };\n    }\n    \n    // Handle SUM queries (case-insensitive)\n    if (query.toLowerCase().includes('sum(')) {\n      const tableMatch = query.match(/from\\s+(\\w+)/i);\n      if (!tableMatch) {\n        return { rows: [{ total: '0' }], rowCount: 1 };\n      }\n\n      const tableName = tableMatch[1];\n      const tableData = this.data[tableName] || {};\n      let rows = Object.values(tableData);\n\n      // Handle WHERE clauses for SUM\n      if (query.includes('where')) {\n        // Handle WHERE status = $1\n        if (query.includes('where status = $1') && values[0]) {\n          rows = rows.filter(row => row.status === values[0]);\n        }\n      }\n\n      // Calculate sum (for simplicity, assume we're summing a numeric field)\n      const sum = rows.reduce((total, row) => {\n        // Try to find a numeric field to sum (net_pay, gross_pay, etc.)\n        const numericFields = ['net_pay', 'gross_pay', 'total_deductions', 'total_benefits'];\n        for (const field of numericFields) {\n          if (row[field] !== undefined) {\n            return total + (parseFloat(row[field]) || 0);\n          }\n        }\n        return total;\n      }, 0);\n\n      return { rows: [{ total: sum.toString() }], rowCount: 1 };\n    }\n\n    // Handle getDepartmentStats query (simpler pattern)\n    if (query.includes('COUNT(*) as total') && \n        query.includes('COUNT(*) FILTER') &&\n        query.includes('FROM departments d') &&\n        query.includes('LEFT JOIN employees e') &&\n        query.includes('WHERE d.is_active = true')) {\n      console.log('Mock DB: Handling getDepartmentStats query (simple pattern):', query);\n      const departmentsData = this.data.departments || {};\n      const employeesData = this.data.employees || {};\n      \n      // Convert object to array\n      const departments = Object.values(departmentsData);\n      const employees = Object.values(employeesData);\n      \n      console.log('Mock DB: getDepartmentStats - Departments count:', departments.length);\n      console.log('Mock DB: getDepartmentStats - Employees count:', employees.length);\n      \n      // Apply WHERE clause filtering if present\n      let filteredDepartments = departments;\n      if (query.toLowerCase().includes('where d.is_active = true')) {\n        filteredDepartments = departments.filter((d: any) => d.is_active === true);\n        console.log('Mock DB: getDepartmentStats - Filtered departments (active only):', filteredDepartments.length);\n      }\n      \n      const total = filteredDepartments.length;\n      const active = filteredDepartments.filter((d: any) => d.is_active !== false).length;\n      const withHeads = filteredDepartments.filter((d: any) => d.department_head_user_id).length;\n      const withoutHeads = filteredDepartments.filter((d: any) => !d.department_head_user_id).length;\n      const totalEmployees = employees.filter((e: any) => e.status === 'active').length;\n      const averageEmployeesPerDepartment = total > 0 ? totalEmployees / total : 0;\n\n      const result = {\n        rows: [{\n          total: total,\n          active: active,\n          with_heads: withHeads,\n          without_heads: withoutHeads,\n          total_employees: totalEmployees,\n          average_employees_per_department: averageEmployeesPerDepartment\n        }],\n        rowCount: 1\n      };\n      \n      console.log('Mock DB: getDepartmentStats - Returning department stats:', result);\n      return result;\n    }\n\n    // Handle getDepartmentStats query (specific pattern)\n    if (query.includes('COUNT(*) as total') && \n        query.includes('COUNT(*) FILTER (WHERE is_active = true) as active') &&\n        query.includes('COUNT(*) FILTER (WHERE department_head_user_id IS NOT NULL) as with_heads') &&\n        query.includes('FROM departments d') &&\n        query.includes('LEFT JOIN employees e')) {\n      console.log('Mock DB: Handling getDepartmentStats query:', query);\n      const departmentsData = this.data.departments || {};\n      const employeesData = this.data.employees || {};\n      \n      // Convert object to array\n      const departments = Object.values(departmentsData);\n      const employees = Object.values(employeesData);\n      \n      console.log('Mock DB: getDepartmentStats - Departments count:', departments.length);\n      console.log('Mock DB: getDepartmentStats - Employees count:', employees.length);\n      \n      // Apply WHERE clause filtering if present\n      let filteredDepartments = departments;\n      if (query.toLowerCase().includes('where d.is_active = true')) {\n        filteredDepartments = departments.filter((d: any) => d.is_active === true);\n        console.log('Mock DB: getDepartmentStats - Filtered departments (active only):', filteredDepartments.length);\n      }\n      \n      const total = filteredDepartments.length;\n      const active = filteredDepartments.filter((d: any) => d.is_active !== false).length;\n      const withHeads = filteredDepartments.filter((d: any) => d.department_head_user_id).length;\n      const withoutHeads = filteredDepartments.filter((d: any) => !d.department_head_user_id).length;\n      const totalEmployees = employees.filter((e: any) => e.status === 'active').length;\n      const averageEmployeesPerDepartment = total > 0 ? totalEmployees / total : 0;\n\n      const result = {\n        rows: [{\n          total: total,\n          active: active,\n          with_heads: withHeads,\n          without_heads: withoutHeads,\n          total_employees: totalEmployees,\n          average_employees_per_department: averageEmployeesPerDepartment\n        }],\n        rowCount: 1\n      };\n      \n      console.log('Mock DB: getDepartmentStats - Returning department stats:', result);\n      return result;\n    }\n\n    // Handle complex department stats queries\n    if (query.toLowerCase().includes('count(*)') && query.toLowerCase().includes('departments') && (query.toLowerCase().includes('filter') || query.includes('FILTER'))) {\n      console.log('Mock DB: Handling department stats query:', query);\n      const departmentsData = this.data.departments || {};\n      const employeesData = this.data.employees || {};\n      \n      // Convert object to array\n      const departments = Object.values(departmentsData);\n      const employees = Object.values(employeesData);\n      \n      console.log('Mock DB: Departments count:', departments.length);\n      console.log('Mock DB: Employees count:', employees.length);\n      \n      // Apply WHERE clause filtering if present\n      let filteredDepartments = departments;\n      if (query.toLowerCase().includes('where d.is_active = true')) {\n        filteredDepartments = departments.filter((d: any) => d.is_active === true);\n        console.log('Mock DB: Filtered departments (active only):', filteredDepartments.length);\n      }\n      \n      const total = filteredDepartments.length;\n      const active = filteredDepartments.filter((d: any) => d.is_active !== false).length;\n      const withHeads = filteredDepartments.filter((d: any) => d.department_head_user_id).length;\n      const withoutHeads = filteredDepartments.filter((d: any) => !d.department_head_user_id).length;\n      const totalEmployees = employees.filter((e: any) => e.status === 'active').length;\n      const averageEmployeesPerDepartment = total > 0 ? totalEmployees / total : 0;\n\n      const result = {\n        rows: [{\n          total: total,\n          active: active,\n          with_heads: withHeads,\n          without_heads: withoutHeads,\n          total_employees: totalEmployees,\n          average_employees_per_department: averageEmployeesPerDepartment\n        }],\n        rowCount: 1\n      };\n      \n      console.log('Mock DB: Returning department stats:', result);\n      return result;\n    }\n\n    // Handle specific department stats query pattern\n    if (query.includes('COUNT(*) FILTER (WHERE is_active = true)') && query.includes('FROM departments d')) {\n      console.log('Mock DB: Handling specific department stats query:', query);\n      const departmentsData = this.data.departments || {};\n      const employeesData = this.data.employees || {};\n      \n      // Convert object to array\n      const departments = Object.values(departmentsData);\n      const employees = Object.values(employeesData);\n      \n      console.log('Mock DB: Departments count:', departments.length);\n      console.log('Mock DB: Employees count:', employees.length);\n      \n      // Apply WHERE clause filtering if present\n      let filteredDepartments = departments;\n      if (query.toLowerCase().includes('where d.is_active = true')) {\n        filteredDepartments = departments.filter((d: any) => d.is_active === true);\n        console.log('Mock DB: Filtered departments (active only):', filteredDepartments.length);\n      }\n      \n      const total = filteredDepartments.length;\n      const active = filteredDepartments.filter((d: any) => d.is_active !== false).length;\n      const withHeads = filteredDepartments.filter((d: any) => d.department_head_user_id).length;\n      const withoutHeads = filteredDepartments.filter((d: any) => !d.department_head_user_id).length;\n      const totalEmployees = employees.filter((e: any) => e.status === 'active').length;\n      const averageEmployeesPerDepartment = total > 0 ? totalEmployees / total : 0;\n\n      const result = {\n        rows: [{\n          total: total,\n          active: active,\n          with_heads: withHeads,\n          without_heads: withoutHeads,\n          total_employees: totalEmployees,\n          average_employees_per_department: averageEmployeesPerDepartment\n        }],\n        rowCount: 1\n      };\n      \n      console.log('Mock DB: Returning department stats:', result);\n      return result;\n    }\n\n    // Handle any department stats query with FILTER\n    if (query.includes('FILTER') && query.includes('FROM departments d')) {\n      console.log('Mock DB: Handling department stats query with FILTER:', query);\n      const departmentsData = this.data.departments || {};\n      const employeesData = this.data.employees || {};\n      \n      // Convert object to array\n      const departments = Object.values(departmentsData);\n      const employees = Object.values(employeesData);\n      \n      console.log('Mock DB: Departments count:', departments.length);\n      console.log('Mock DB: Employees count:', employees.length);\n      \n      // Apply WHERE clause filtering if present\n      let filteredDepartments = departments;\n      if (query.toLowerCase().includes('where d.is_active = true')) {\n        filteredDepartments = departments.filter((d: any) => d.is_active === true);\n        console.log('Mock DB: Filtered departments (active only):', filteredDepartments.length);\n      }\n      \n      const total = filteredDepartments.length;\n      const active = filteredDepartments.filter((d: any) => d.is_active !== false).length;\n      const withHeads = filteredDepartments.filter((d: any) => d.department_head_user_id).length;\n      const withoutHeads = filteredDepartments.filter((d: any) => !d.department_head_user_id).length;\n      const totalEmployees = employees.filter((e: any) => e.status === 'active').length;\n      const averageEmployeesPerDepartment = total > 0 ? totalEmployees / total : 0;\n\n      const result = {\n        rows: [{\n          total: total,\n          active: active,\n          with_heads: withHeads,\n          without_heads: withoutHeads,\n          total_employees: totalEmployees,\n          average_employees_per_department: averageEmployeesPerDepartment\n        }],\n        rowCount: 1\n      };\n      \n      console.log('Mock DB: Returning department stats:', result);\n      return result;\n    }\n\n    // Handle department stats query with specific pattern\n    if (query.includes('COUNT(*) FILTER (WHERE is_active = true)') && \n        query.includes('COUNT(*) FILTER (WHERE department_head_user_id IS NOT NULL)') &&\n        query.includes('FROM departments d')) {\n      console.log('Mock DB: Handling specific department stats query pattern:', query);\n      const departmentsData = this.data.departments || {};\n      const employeesData = this.data.employees || {};\n      \n      // Convert object to array\n      const departments = Object.values(departmentsData);\n      const employees = Object.values(employeesData);\n      \n      console.log('Mock DB: Departments count:', departments.length);\n      console.log('Mock DB: Employees count:', employees.length);\n      \n      // Apply WHERE clause filtering if present\n      let filteredDepartments = departments;\n      if (query.toLowerCase().includes('where d.is_active = true')) {\n        filteredDepartments = departments.filter((d: any) => d.is_active === true);\n        console.log('Mock DB: Filtered departments (active only):', filteredDepartments.length);\n      }\n      \n      const total = filteredDepartments.length;\n      const active = filteredDepartments.filter((d: any) => d.is_active !== false).length;\n      const withHeads = filteredDepartments.filter((d: any) => d.department_head_user_id).length;\n      const withoutHeads = filteredDepartments.filter((d: any) => !d.department_head_user_id).length;\n      const totalEmployees = employees.filter((e: any) => e.status === 'active').length;\n      const averageEmployeesPerDepartment = total > 0 ? totalEmployees / total : 0;\n\n      const result = {\n        rows: [{\n          total: total,\n          active: active,\n          with_heads: withHeads,\n          without_heads: withoutHeads,\n          total_employees: totalEmployees,\n          average_employees_per_department: averageEmployeesPerDepartment\n        }],\n        rowCount: 1\n      };\n      \n      console.log('Mock DB: Returning department stats:', result);\n      return result;\n    }\n\n    // Handle any query with FILTER and departments (catch-all)\n    if (query.includes('FILTER') && query.includes('departments')) {\n      console.log('Mock DB: Handling FILTER + departments query (catch-all):', query);\n      const departmentsData = this.data.departments || {};\n      const employeesData = this.data.employees || {};\n      \n      // Convert object to array\n      const departments = Object.values(departmentsData);\n      const employees = Object.values(employeesData);\n      \n      console.log('Mock DB: Departments count:', departments.length);\n      console.log('Mock DB: Employees count:', employees.length);\n      \n      // Apply WHERE clause filtering if present\n      let filteredDepartments = departments;\n      if (query.toLowerCase().includes('where d.is_active = true')) {\n        filteredDepartments = departments.filter((d: any) => d.is_active === true);\n        console.log('Mock DB: Filtered departments (active only):', filteredDepartments.length);\n      }\n      \n      const total = filteredDepartments.length;\n      const active = filteredDepartments.filter((d: any) => d.is_active !== false).length;\n      const withHeads = filteredDepartments.filter((d: any) => d.department_head_user_id).length;\n      const withoutHeads = filteredDepartments.filter((d: any) => !d.department_head_user_id).length;\n      const totalEmployees = employees.filter((e: any) => e.status === 'active').length;\n      const averageEmployeesPerDepartment = total > 0 ? totalEmployees / total : 0;\n\n      const result = {\n        rows: [{\n          total: total,\n          active: active,\n          with_heads: withHeads,\n          without_heads: withoutHeads,\n          total_employees: totalEmployees,\n          average_employees_per_department: averageEmployeesPerDepartment\n        }],\n        rowCount: 1\n      };\n      \n      console.log('Mock DB: Returning department stats:', result);\n      return result;\n    }\n\n    // Handle listDepartments query (returns actual department records)\n    if (query.toLowerCase().includes('from departments d') && \n        query.toLowerCase().includes('left join users u') && \n        query.toLowerCase().includes('left join employees e') &&\n        query.toLowerCase().includes('group by d.id')) {\n      console.log('Mock DB: Handling listDepartments query:', query);\n      const departmentsData = this.data.departments || {};\n      const usersData = this.data.users || {};\n      const employeesData = this.data.employees || {};\n      \n      // Convert object to array\n      const departments = Object.values(departmentsData);\n      const users = Object.values(usersData);\n      const employees = Object.values(employeesData);\n      \n      console.log('Mock DB: listDepartments - Departments count:', departments.length);\n      \n      // Apply WHERE clause filtering if present\n      let filteredDepartments = departments;\n      if (query.toLowerCase().includes('where d.is_active = true')) {\n        filteredDepartments = departments.filter((d: any) => d.is_active === true);\n        console.log('Mock DB: listDepartments - Filtered departments (active only):', filteredDepartments.length);\n      }\n      \n      // Apply pagination (LIMIT and OFFSET)\n      let limit = 20; // default\n      let offset = 0; // default\n      if (values.length >= 2) {\n        limit = values[0] || 20;\n        offset = values[1] || 0;\n      }\n      \n      // Sort by created_at DESC (default)\n      filteredDepartments.sort((a: any, b: any) => {\n        const dateA = new Date(a.created_at || 0);\n        const dateB = new Date(b.created_at || 0);\n        return dateB.getTime() - dateA.getTime();\n      });\n      \n      // Apply pagination\n      const paginatedDepartments = filteredDepartments.slice(offset, offset + limit);\n      \n      // Transform to match the expected format\n      const result = {\n        rows: paginatedDepartments.map((dept: any) => {\n          // Find associated user (department head)\n          const departmentHead = users.find((u: any) => u.id === dept.department_head_user_id);\n          \n          // Count employees in this department\n          const employeeCount = employees.filter((e: any) => \n            e.department_id === dept.id && e.status === 'active'\n          ).length;\n          \n          return {\n            id: dept.id,\n            name: dept.name,\n            description: dept.description,\n            departmentHeadUserId: dept.department_head_user_id,\n            isActive: dept.is_active,\n            createdAt: dept.created_at,\n            updatedAt: dept.updated_at,\n            head_id: departmentHead?.id || null,\n            head_email: departmentHead?.email || null,\n            head_first_name: departmentHead?.first_name || null,\n            head_last_name: departmentHead?.last_name || null,\n            employee_count: employeeCount.toString()\n          };\n        }),\n        rowCount: paginatedDepartments.length\n      };\n      \n      console.log('Mock DB: listDepartments - Returning', result.rows.length, 'departments');\n      return result;\n    }\n\n    // Simple test condition - match any query with departments (for stats)\n    if (query.toLowerCase().includes('from departments d')) {\n      console.log('Mock DB: TEST - Found query with \"FROM departments d\":', query);\n      const departmentsData = this.data.departments || {};\n      const employeesData = this.data.employees || {};\n      \n      // Convert object to array\n      const departments = Object.values(departmentsData);\n      const employees = Object.values(employeesData);\n      \n      console.log('Mock DB: TEST - Departments count:', departments.length);\n      console.log('Mock DB: TEST - Employees count:', employees.length);\n      \n      // Apply WHERE clause filtering if present\n      let filteredDepartments = departments;\n      if (query.toLowerCase().includes('where d.is_active = true')) {\n        filteredDepartments = departments.filter((d: any) => d.is_active === true);\n        console.log('Mock DB: TEST - Filtered departments (active only):', filteredDepartments.length);\n      }\n      \n      const total = filteredDepartments.length;\n      const active = filteredDepartments.filter((d: any) => d.is_active !== false).length;\n      const withHeads = filteredDepartments.filter((d: any) => d.department_head_user_id).length;\n      const withoutHeads = filteredDepartments.filter((d: any) => !d.department_head_user_id).length;\n      const totalEmployees = employees.filter((e: any) => e.status === 'active').length;\n      const averageEmployeesPerDepartment = total > 0 ? totalEmployees / total : 0;\n\n      const result = {\n        rows: [{\n          total: total,\n          active: active,\n          with_heads: withHeads,\n          without_heads: withoutHeads,\n          total_employees: totalEmployees,\n          average_employees_per_department: averageEmployeesPerDepartment\n        }],\n        rowCount: 1\n      };\n      \n      console.log('Mock DB: TEST - Returning department stats:', result);\n      return result;\n    }\n    \n    // Extract table name from SELECT query\n    const tableMatch = query.match(/from\\s+(\\w+)/i);\n    if (!tableMatch) {\n      return { rows: [], rowCount: 0 };\n    }\n    \n    const tableName = tableMatch[1];\n    const tableData = this.data[tableName] || {};\n    \n    // Simple WHERE clause handling\n    let rows = Object.values(tableData);\n    \n    // Handle WHERE id = $1\n    if (query.includes('where id = $1') && values[0]) {\n      rows = rows.filter(row => row.id === values[0]);\n    }\n    \n    // Handle WHERE email = $1\n    if (query.includes('where email = $1') && values[0]) {\n      rows = rows.filter(row => row.email === values[0]);\n    }\n    \n    // Handle WHERE status = $1\n    if (query.includes('where status = $1') && values[0]) {\n      rows = rows.filter(row => row.status === values[0]);\n    }\n    \n    // Handle WHERE employee_id = $1\n    if (query.includes('where employee_id = $1') && values[0]) {\n      rows = rows.filter(row => row.employee_id === values[0]);\n    }\n    \n    // Handle WHERE attendance_record_id = $1\n    if (query.includes('where attendance_record_id = $1') && values[0]) {\n      rows = rows.filter(row => row.attendance_record_id === values[0]);\n    }\n    \n    // Handle WHERE date = $1\n    if (query.includes('where date = $1') && values[0]) {\n      rows = rows.filter(row => row.date === values[0]);\n    }\n    \n    // Handle ORDER BY\n    if (query.includes('order by')) {\n      if (query.includes('order by first_name, last_name')) {\n        rows.sort((a, b) => {\n          const nameA = `${a.first_name || ''} ${a.last_name || ''}`.trim();\n          const nameB = `${b.first_name || ''} ${b.last_name || ''}`.trim();\n          return nameA.localeCompare(nameB);\n        });\n      }\n    }\n    \n    // Handle LIMIT\n    if (query.includes('limit')) {\n      const limitMatch = query.match(/limit\\s+(\\d+)/i);\n      if (limitMatch) {\n        const limit = parseInt(limitMatch[1]);\n        rows = rows.slice(0, limit);\n      }\n    }\n    \n    return { rows, rowCount: rows.length };\n  }\n\n  private handleUpdate(query: string, values: any[]): MockQueryResult {\n    // Extract table name from UPDATE query\n    const tableMatch = query.match(/update\\s+(\\w+)/i);\n    if (!tableMatch) {\n      return { rows: [], rowCount: 0 };\n    }\n    \n    const tableName = tableMatch[1];\n    const tableData = this.data[tableName] || {};\n    \n    // Handle WHERE id = $1\n    if (query.includes('where id = $1') && values[0]) {\n      const id = values[0];\n      if (tableData[id]) {\n        // Update the row (simplified - assumes SET clause is at the end)\n        const setMatch = query.match(/set\\s+(.+?)\\s+where/i);\n        if (setMatch) {\n          const setClause = setMatch[1];\n          const updates = setClause.split(',').map(update => update.trim());\n          updates.forEach(update => {\n            const [column, value] = update.split('=').map(part => part.trim());\n            if (value.startsWith('$')) {\n              const paramIndex = parseInt(value.substring(1)) - 1;\n              if (values[paramIndex] !== undefined) {\n                tableData[id][column] = values[paramIndex];\n              }\n            }\n          });\n        }\n        return { rows: [tableData[id]], rowCount: 1 };\n      }\n    }\n    \n    return { rows: [], rowCount: 0 };\n  }\n\n  private handleDelete(query: string, values: any[]): MockQueryResult {\n    // Extract table name from DELETE query\n    const tableMatch = query.match(/delete from\\s+(\\w+)/i);\n    if (!tableMatch) {\n      return { rows: [], rowCount: 0 };\n    }\n    \n    const tableName = tableMatch[1];\n    const tableData = this.data[tableName] || {};\n    \n    // Handle WHERE id = $1\n    if (query.includes('where id = $1') && values[0]) {\n      const id = values[0];\n      if (tableData[id]) {\n        delete tableData[id];\n        return { rows: [], rowCount: 1 };\n      }\n    }\n    \n    // Handle DELETE FROM table (no WHERE clause)\n    if (!query.includes('where')) {\n      const rowCount = Object.keys(tableData).length;\n      this.data[tableName] = {};\n      return { rows: [], rowCount };\n    }\n    \n    return { rows: [], rowCount: 0 };\n  }\n\n  private handleAlterSequence(query: string, _values: any[]): MockQueryResult {\n    // Extract sequence name from ALTER SEQUENCE query\n    const sequenceMatch = query.match(/alter sequence\\s+(\\w+)/i);\n    if (sequenceMatch) {\n      const sequenceName = sequenceMatch[1];\n      this.sequenceCounters[sequenceName] = 1;\n    }\n    \n    return { rows: [], rowCount: 0 };\n  }\n\n  private generateId(_tableName: string): string {\n    // Generate a UUID-like ID\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 15);\n    return `${timestamp}-${random}`;\n  }\n\n  // Test utilities\n  getData(): MockDatabaseData {\n    return { ...this.data };\n  }\n\n  clearData(): void {\n    this.initializeSequences();\n  }\n\n  setData(tableName: string, data: any): void {\n    this.data[tableName] = { ...data };\n  }\n\n  getTableData(tableName: string): any {\n    return { ...this.data[tableName] };\n  }\n}\n\n// Singleton instance for tests\nexport const mockDatabaseService = new MockDatabaseService();\n\n// Export for use in tests\nexport default mockDatabaseService;\n"],"version":3}