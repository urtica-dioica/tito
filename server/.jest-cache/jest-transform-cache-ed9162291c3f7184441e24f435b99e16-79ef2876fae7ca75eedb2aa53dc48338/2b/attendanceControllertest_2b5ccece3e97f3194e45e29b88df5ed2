8d7f0653b6758162a0a4656068533eac
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the dependencies
jest.mock('../../../src/services/attendance/attendanceService');
jest.mock('../../../src/config/database');
jest.mock('../../../src/utils/types/express');
const attendanceController_1 = require("../../../src/controllers/attendance/attendanceController");
// import { attendanceService } from '../../../src/services/attendance/attendanceService';
const database_1 = require("../../../src/config/database");
const express_1 = require("../../../src/utils/types/express");
// const mockAttendanceService = attendanceService as jest.Mocked<typeof attendanceService>;
const mockGetPool = database_1.getPool;
const mockGetRequestId = express_1.getRequestId;
describe('AttendanceController', () => {
    let attendanceController;
    let mockRequest;
    let mockResponse;
    let mockPool;
    beforeEach(() => {
        attendanceController = new attendanceController_1.AttendanceController();
        jest.clearAllMocks();
        // Mock request object
        mockRequest = {
            body: {},
            params: {},
            query: {},
            user: {
                userId: 'user-123',
                email: 'test@example.com',
                role: 'hr',
                tokenVersion: 1
            }
        };
        // Mock response object
        mockResponse = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn().mockReturnThis()
        };
        // Mock database pool
        mockPool = {
            query: jest.fn()
        };
        mockGetPool.mockReturnValue(mockPool);
        // Mock getRequestId
        mockGetRequestId.mockReturnValue('test-request-123');
    });
    describe('getRecentAttendance', () => {
        it('should get recent attendance records successfully', async () => {
            // Arrange
            mockRequest.query = {
                limit: '5'
            };
            const mockAttendanceData = [
                {
                    id: 'session-1',
                    session_type: 'morning_in',
                    clock_in: '08:30:00',
                    clock_out: null,
                    created_at: '2024-01-15T08:30:00Z',
                    selfie_image_url: 'selfie1.jpg',
                    date: '2024-01-15',
                    employee_id: 'emp-123',
                    first_name: 'John',
                    last_name: 'Doe',
                    employee_code: 'EMP001',
                    department_name: 'Engineering'
                },
                {
                    id: 'session-2',
                    session_type: 'afternoon_out',
                    clock_in: null,
                    clock_out: '17:30:00',
                    created_at: '2024-01-15T17:30:00Z',
                    selfie_image_url: 'selfie2.jpg',
                    date: '2024-01-15',
                    employee_id: 'emp-124',
                    first_name: 'Jane',
                    last_name: 'Smith',
                    employee_code: 'EMP002',
                    department_name: 'Marketing'
                }
            ];
            mockPool.query.mockResolvedValue({
                rows: mockAttendanceData
            });
            // Act
            await attendanceController.getRecentAttendance(mockRequest, mockResponse);
            // Assert
            expect(mockPool.query).toHaveBeenCalledWith(expect.stringContaining('SELECT'), ["5"]);
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Recent attendance records retrieved successfully',
                data: [
                    {
                        id: 'session-1',
                        sessionType: 'morning_in',
                        clockIn: '08:30:00',
                        clockOut: null,
                        createdAt: '2024-01-15T08:30:00Z',
                        selfieImageUrl: 'selfie1.jpg',
                        date: '2024-01-15',
                        employeeId: 'emp-123',
                        employeeName: 'John Doe',
                        employeeCode: 'EMP001',
                        departmentName: 'Engineering'
                    },
                    {
                        id: 'session-2',
                        sessionType: 'afternoon_out',
                        clockIn: null,
                        clockOut: '17:30:00',
                        createdAt: '2024-01-15T17:30:00Z',
                        selfieImageUrl: 'selfie2.jpg',
                        date: '2024-01-15',
                        employeeId: 'emp-124',
                        employeeName: 'Jane Smith',
                        employeeCode: 'EMP002',
                        departmentName: 'Marketing'
                    }
                ],
                requestId: 'test-request-123'
            });
        });
        it('should use default limit when not provided', async () => {
            // Arrange
            mockRequest.query = {};
            mockPool.query.mockResolvedValue({
                rows: []
            });
            // Act
            await attendanceController.getRecentAttendance(mockRequest, mockResponse);
            // Assert
            expect(mockPool.query).toHaveBeenCalledWith(expect.stringContaining('SELECT'), [10] // default limit
            );
        });
        it('should handle database errors', async () => {
            // Arrange
            mockRequest.query = {
                limit: '5'
            };
            mockPool.query.mockRejectedValue(new Error('Database connection failed'));
            // Act
            await attendanceController.getRecentAttendance(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(500);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Failed to get recent attendance records',
                error: 'Database connection failed',
                requestId: 'test-request-123'
            });
        });
    });
    describe('getAttendanceStats', () => {
        it('should get attendance stats successfully', async () => {
            // Arrange
            mockRequest.query = {
                period: '2024-01',
                department: 'engineering'
            };
            const mockStatsData = [
                {
                    total_employees: 25,
                    present_today: 23,
                    absent_today: 2,
                    late_today: 3,
                    total_hours_today: 184,
                    average_hours_per_employee: 8.0,
                    attendance_rate: 92.0
                }
            ];
            mockPool.query.mockResolvedValue({
                rows: mockStatsData
            });
            // Act
            await attendanceController.getAttendanceStats(mockRequest, mockResponse);
            // Assert
            expect(mockPool.query).toHaveBeenCalledWith(expect.stringContaining('SELECT'), expect.any(Array));
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Attendance statistics retrieved successfully',
                data: {
                    totalEmployees: 25,
                    presentToday: 23,
                    absentToday: 2,
                    lateToday: 3,
                    totalHoursToday: 184,
                    averageHoursPerEmployee: 8.0,
                    attendanceRate: 92.0
                },
                requestId: 'test-request-123'
            });
        });
        it('should handle missing stats data', async () => {
            // Arrange
            mockRequest.query = {
                period: '2024-01'
            };
            mockPool.query.mockResolvedValue({
                rows: []
            });
            // Act
            await attendanceController.getAttendanceStats(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Attendance statistics retrieved successfully',
                data: {
                    totalEmployees: 0,
                    presentToday: 0,
                    absentToday: 0,
                    lateToday: 0,
                    totalHoursToday: 0,
                    averageHoursPerEmployee: 0,
                    attendanceRate: 0
                },
                requestId: 'test-request-123'
            });
        });
    });
    describe('getDailyAttendance', () => {
        it('should get daily attendance successfully', async () => {
            // Arrange
            mockRequest.query = {
                date: '2024-01-15',
                department: 'engineering'
            };
            const mockDailyData = [
                {
                    id: 'emp-123',
                    employee_id: 'EMP001',
                    first_name: 'John',
                    last_name: 'Doe',
                    department_name: 'Engineering',
                    morning_clock_in: '08:30:00',
                    morning_clock_out: '12:00:00',
                    afternoon_clock_in: '13:00:00',
                    afternoon_clock_out: '17:30:00',
                    total_hours: 8.0,
                    status: 'present'
                },
                {
                    id: 'emp-124',
                    employee_id: 'EMP002',
                    first_name: 'Jane',
                    last_name: 'Smith',
                    department_name: 'Engineering',
                    morning_clock_in: '08:45:00',
                    morning_clock_out: '12:00:00',
                    afternoon_clock_in: '13:00:00',
                    afternoon_clock_out: '17:15:00',
                    total_hours: 7.5,
                    status: 'late'
                }
            ];
            mockPool.query.mockResolvedValue({
                rows: mockDailyData
            });
            // Act
            await attendanceController.getDailyAttendance(mockRequest, mockResponse);
            // Assert
            expect(mockPool.query).toHaveBeenCalledWith(expect.stringContaining('SELECT'), expect.any(Array));
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Daily attendance retrieved successfully',
                data: [
                    {
                        id: 'emp-123',
                        employeeId: 'EMP001',
                        employeeName: 'John Doe',
                        departmentName: 'Engineering',
                        morningClockIn: '08:30:00',
                        morningClockOut: '12:00:00',
                        afternoonClockIn: '13:00:00',
                        afternoonClockOut: '17:30:00',
                        totalHours: 8.0,
                        status: 'present'
                    },
                    {
                        id: 'emp-124',
                        employeeId: 'EMP002',
                        employeeName: 'Jane Smith',
                        departmentName: 'Engineering',
                        morningClockIn: '08:45:00',
                        morningClockOut: '12:00:00',
                        afternoonClockIn: '13:00:00',
                        afternoonClockOut: '17:15:00',
                        totalHours: 7.5,
                        status: 'late'
                    }
                ],
                requestId: 'test-request-123'
            });
        });
        it('should use current date when date not provided', async () => {
            // Arrange
            mockRequest.query = {};
            mockPool.query.mockResolvedValue({
                rows: []
            });
            // Act
            await attendanceController.getDailyAttendance(mockRequest, mockResponse);
            // Assert
            expect(mockPool.query).toHaveBeenCalledWith(expect.stringContaining('SELECT'), expect.any(Array));
        });
    });
    describe('getAttendanceRecordSessions', () => {
        it('should get attendance record sessions successfully', async () => {
            // Arrange
            mockRequest.params = {
                id: 'record-123'
            };
            const mockSessionsData = [
                {
                    id: 'session-1',
                    session_type: 'morning_in',
                    clock_in: '08:30:00',
                    clock_out: '12:00:00',
                    selfie_image_url: 'selfie1.jpg',
                    created_at: '2024-01-15T08:30:00Z'
                },
                {
                    id: 'session-2',
                    session_type: 'afternoon_in',
                    clock_in: '13:00:00',
                    clock_out: '17:30:00',
                    selfie_image_url: 'selfie2.jpg',
                    created_at: '2024-01-15T13:00:00Z'
                }
            ];
            mockPool.query.mockResolvedValue({
                rows: mockSessionsData
            });
            // Act
            await attendanceController.getAttendanceRecordSessions(mockRequest, mockResponse);
            // Assert
            expect(mockPool.query).toHaveBeenCalledWith(expect.stringContaining('SELECT'), ['record-123']);
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Attendance record sessions retrieved successfully',
                data: [
                    {
                        id: 'session-1',
                        sessionType: 'morning_in',
                        clockIn: '08:30:00',
                        clockOut: '12:00:00',
                        selfieImageUrl: 'selfie1.jpg',
                        createdAt: '2024-01-15T08:30:00Z'
                    },
                    {
                        id: 'session-2',
                        sessionType: 'afternoon_in',
                        clockIn: '13:00:00',
                        clockOut: '17:30:00',
                        selfieImageUrl: 'selfie2.jpg',
                        createdAt: '2024-01-15T13:00:00Z'
                    }
                ],
                requestId: 'test-request-123'
            });
        });
        it('should return 404 if record not found', async () => {
            // Arrange
            mockRequest.params = {
                id: 'nonexistent-record'
            };
            mockPool.query.mockResolvedValue({
                rows: []
            });
            // Act
            await attendanceController.getAttendanceRecordSessions(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(404);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Attendance record not found',
                requestId: 'test-request-123'
            });
        });
    });
    describe('getAttendanceDetail', () => {
        it('should get attendance detail successfully', async () => {
            // Arrange
            mockRequest.params = {
                id: 'record-123'
            };
            const mockDetailData = [
                {
                    id: 'record-123',
                    employee_id: 'emp-123',
                    date: '2024-01-15',
                    total_hours: 8.0,
                    status: 'present',
                    first_name: 'John',
                    last_name: 'Doe',
                    employee_id_code: 'EMP001',
                    department_name: 'Engineering',
                    morning_clock_in: '08:30:00',
                    morning_clock_out: '12:00:00',
                    afternoon_clock_in: '13:00:00',
                    afternoon_clock_out: '17:30:00'
                }
            ];
            mockPool.query.mockResolvedValue({
                rows: mockDetailData
            });
            // Act
            await attendanceController.getAttendanceDetail(mockRequest, mockResponse);
            // Assert
            expect(mockPool.query).toHaveBeenCalledWith(expect.stringContaining('SELECT'), ['record-123']);
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Attendance detail retrieved successfully',
                data: {
                    id: 'record-123',
                    employeeId: 'emp-123',
                    date: '2024-01-15',
                    totalHours: 8.0,
                    status: 'present',
                    employeeName: 'John Doe',
                    employeeCode: 'EMP001',
                    departmentName: 'Engineering',
                    morningClockIn: '08:30:00',
                    morningClockOut: '12:00:00',
                    afternoonClockIn: '13:00:00',
                    afternoonClockOut: '17:30:00'
                },
                requestId: 'test-request-123'
            });
        });
        it('should return 404 if detail not found', async () => {
            // Arrange
            mockRequest.params = {
                id: 'nonexistent-record'
            };
            mockPool.query.mockResolvedValue({
                rows: []
            });
            // Act
            await attendanceController.getAttendanceDetail(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(404);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Attendance record not found',
                requestId: 'test-request-123'
            });
        });
    });
    describe('getDetailedHoursCalculation', () => {
        it('should get detailed hours calculation successfully', async () => {
            // Arrange
            mockRequest.params = {
                id: 'record-123'
            };
            const mockCalculationData = [
                {
                    id: 'record-123',
                    employee_id: 'emp-123',
                    date: '2024-01-15',
                    morning_clock_in: '08:30:00',
                    morning_clock_out: '12:00:00',
                    afternoon_clock_in: '13:00:00',
                    afternoon_clock_out: '17:30:00',
                    morning_hours: 3.5,
                    afternoon_hours: 4.5,
                    total_hours: 8.0,
                    break_hours: 1.0,
                    overtime_hours: 0.0,
                    status: 'present',
                    first_name: 'John',
                    last_name: 'Doe',
                    employee_id_code: 'EMP001'
                }
            ];
            mockPool.query.mockResolvedValue({
                rows: mockCalculationData
            });
            // Act
            await attendanceController.getDetailedHoursCalculation(mockRequest, mockResponse);
            // Assert
            expect(mockPool.query).toHaveBeenCalledWith(expect.stringContaining('SELECT'), ['record-123']);
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Detailed hours calculation retrieved successfully',
                data: {
                    id: 'record-123',
                    employeeId: 'emp-123',
                    date: '2024-01-15',
                    morningClockIn: '08:30:00',
                    morningClockOut: '12:00:00',
                    afternoonClockIn: '13:00:00',
                    afternoonClockOut: '17:30:00',
                    morningHours: 3.5,
                    afternoonHours: 4.5,
                    totalHours: 8.0,
                    breakHours: 1.0,
                    overtimeHours: 0.0,
                    status: 'present',
                    employeeName: 'John Doe',
                    employeeCode: 'EMP001'
                },
                requestId: 'test-request-123'
            });
        });
        it('should return 404 if calculation not found', async () => {
            // Arrange
            mockRequest.params = {
                id: 'nonexistent-record'
            };
            mockPool.query.mockResolvedValue({
                rows: []
            });
            // Act
            await attendanceController.getDetailedHoursCalculation(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Attendance record ID is required',
                requestId: 'test-request-123'
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,