2a514a0ff2782238c51baf674b3de743
"use strict";

/* istanbul ignore next */
function cov_1z53f3x0nf() {
  var path = "/home/kim/tito/server/src/controllers/payroll/payrollApprovalController.ts";
  var hash = "45fe77aee2d48dd47b8f860f79d170184da105f5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/payroll/payrollApprovalController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 43
        }
      },
      "2": {
        start: {
          line: 4,
          column: 33
        },
        end: {
          line: 4,
          column: 89
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 92
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "5": {
        start: {
          line: 11,
          column: 76
        },
        end: {
          line: 11,
          column: 84
        }
      },
      "6": {
        start: {
          line: 12,
          column: 29
        },
        end: {
          line: 17,
          column: 14
        }
      },
      "7": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "8": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "9": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "10": {
        start: {
          line: 38,
          column: 27
        },
        end: {
          line: 38,
          column: 37
        }
      },
      "11": {
        start: {
          line: 39,
          column: 29
        },
        end: {
          line: 39,
          column: 85
        }
      },
      "12": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "13": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 46,
          column: 19
        }
      },
      "14": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 23
        }
      },
      "15": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "16": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 64,
          column: 15
        }
      },
      "17": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "18": {
        start: {
          line: 69,
          column: 167
        },
        end: {
          line: 69,
          column: 176
        }
      },
      "19": {
        start: {
          line: 70,
          column: 27
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "20": {
        start: {
          line: 83,
          column: 27
        },
        end: {
          line: 83,
          column: 89
        }
      },
      "21": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "22": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 99,
          column: 15
        }
      },
      "23": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "24": {
        start: {
          line: 104,
          column: 35
        },
        end: {
          line: 104,
          column: 45
        }
      },
      "25": {
        start: {
          line: 105,
          column: 30
        },
        end: {
          line: 105,
          column: 106
        }
      },
      "26": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 112,
          column: 15
        }
      },
      "27": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 121,
          column: 15
        }
      },
      "28": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "29": {
        start: {
          line: 126,
          column: 27
        },
        end: {
          line: 126,
          column: 37
        }
      },
      "30": {
        start: {
          line: 127,
          column: 43
        },
        end: {
          line: 127,
          column: 51
        }
      },
      "31": {
        start: {
          line: 128,
          column: 31
        },
        end: {
          line: 128,
          column: 47
        }
      },
      "32": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "33": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 135,
          column: 19
        }
      },
      "34": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 23
        }
      },
      "35": {
        start: {
          line: 138,
          column: 29
        },
        end: {
          line: 143,
          column: 14
        }
      },
      "36": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 150,
          column: 15
        }
      },
      "37": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 159,
          column: 15
        }
      },
      "38": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "39": {
        start: {
          line: 164,
          column: 40
        },
        end: {
          line: 164,
          column: 50
        }
      },
      "40": {
        start: {
          line: 165,
          column: 30
        },
        end: {
          line: 165,
          column: 112
        }
      },
      "41": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 175,
          column: 15
        }
      },
      "42": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 184,
          column: 15
        }
      },
      "43": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "44": {
        start: {
          line: 189,
          column: 26
        },
        end: {
          line: 189,
          column: 85
        }
      },
      "45": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "46": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 205,
          column: 15
        }
      },
      "47": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "48": {
        start: {
          line: 210,
          column: 40
        },
        end: {
          line: 210,
          column: 50
        }
      },
      "49": {
        start: {
          line: 211,
          column: 35
        },
        end: {
          line: 211,
          column: 111
        }
      },
      "50": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 218,
          column: 15
        }
      },
      "51": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 227,
          column: 15
        }
      },
      "52": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 258,
          column: 9
        }
      },
      "53": {
        start: {
          line: 232,
          column: 27
        },
        end: {
          line: 232,
          column: 37
        }
      },
      "54": {
        start: {
          line: 233,
          column: 28
        },
        end: {
          line: 233,
          column: 87
        }
      },
      "55": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 242,
          column: 13
        }
      },
      "56": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 240,
          column: 19
        }
      },
      "57": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 23
        }
      },
      "58": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 248,
          column: 15
        }
      },
      "59": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 257,
          column: 15
        }
      },
      "60": {
        start: {
          line: 261,
          column: 0
        },
        end: {
          line: 261,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 42
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 39
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 36
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 41
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 67
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 51
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 102
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        loc: {
          start: {
            line: 124,
            column: 43
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 124
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        loc: {
          start: {
            line: 162,
            column: 52
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 162
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 44
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 187
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 46
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 208
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 42
          },
          end: {
            line: 259,
            column: 5
          }
        },
        line: 230
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 23
          },
          end: {
            line: 30,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 30,
            column: 48
          },
          end: {
            line: 30,
            column: 61
          }
        }, {
          start: {
            line: 30,
            column: 64
          },
          end: {
            line: 30,
            column: 79
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 61,
            column: 23
          },
          end: {
            line: 61,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 61,
            column: 48
          },
          end: {
            line: 61,
            column: 61
          }
        }, {
          start: {
            line: 61,
            column: 64
          },
          end: {
            line: 61,
            column: 79
          }
        }],
        line: 61
      },
      "3": {
        loc: {
          start: {
            line: 69,
            column: 20
          },
          end: {
            line: 69,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 69,
            column: 27
          },
          end: {
            line: 69,
            column: 28
          }
        }],
        line: 69
      },
      "4": {
        loc: {
          start: {
            line: 69,
            column: 30
          },
          end: {
            line: 69,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 69,
            column: 38
          },
          end: {
            line: 69,
            column: 40
          }
        }],
        line: 69
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 121
          },
          end: {
            line: 69,
            column: 142
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 69,
            column: 130
          },
          end: {
            line: 69,
            column: 142
          }
        }],
        line: 69
      },
      "6": {
        loc: {
          start: {
            line: 69,
            column: 144
          },
          end: {
            line: 69,
            column: 162
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 69,
            column: 156
          },
          end: {
            line: 69,
            column: 162
          }
        }],
        line: 69
      },
      "7": {
        loc: {
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 77,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 77,
            column: 39
          },
          end: {
            line: 77,
            column: 58
          }
        }, {
          start: {
            line: 77,
            column: 61
          },
          end: {
            line: 77,
            column: 70
          }
        }],
        line: 77
      },
      "8": {
        loc: {
          start: {
            line: 78,
            column: 25
          },
          end: {
            line: 78,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 78,
            column: 35
          },
          end: {
            line: 78,
            column: 52
          }
        }, {
          start: {
            line: 78,
            column: 55
          },
          end: {
            line: 78,
            column: 64
          }
        }],
        line: 78
      },
      "9": {
        loc: {
          start: {
            line: 96,
            column: 23
          },
          end: {
            line: 96,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 48
          },
          end: {
            line: 96,
            column: 61
          }
        }, {
          start: {
            line: 96,
            column: 64
          },
          end: {
            line: 96,
            column: 79
          }
        }],
        line: 96
      },
      "10": {
        loc: {
          start: {
            line: 118,
            column: 23
          },
          end: {
            line: 118,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 118,
            column: 48
          },
          end: {
            line: 118,
            column: 61
          }
        }, {
          start: {
            line: 118,
            column: 64
          },
          end: {
            line: 118,
            column: 79
          }
        }],
        line: 118
      },
      "11": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "12": {
        loc: {
          start: {
            line: 146,
            column: 45
          },
          end: {
            line: 146,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 146,
            column: 56
          },
          end: {
            line: 146,
            column: 66
          }
        }, {
          start: {
            line: 146,
            column: 69
          },
          end: {
            line: 146,
            column: 79
          }
        }],
        line: 146
      },
      "13": {
        loc: {
          start: {
            line: 156,
            column: 23
          },
          end: {
            line: 156,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 156,
            column: 48
          },
          end: {
            line: 156,
            column: 61
          }
        }, {
          start: {
            line: 156,
            column: 64
          },
          end: {
            line: 156,
            column: 79
          }
        }],
        line: 156
      },
      "14": {
        loc: {
          start: {
            line: 181,
            column: 23
          },
          end: {
            line: 181,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 181,
            column: 48
          },
          end: {
            line: 181,
            column: 61
          }
        }, {
          start: {
            line: 181,
            column: 64
          },
          end: {
            line: 181,
            column: 79
          }
        }],
        line: 181
      },
      "15": {
        loc: {
          start: {
            line: 202,
            column: 23
          },
          end: {
            line: 202,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 48
          },
          end: {
            line: 202,
            column: 61
          }
        }, {
          start: {
            line: 202,
            column: 64
          },
          end: {
            line: 202,
            column: 79
          }
        }],
        line: 202
      },
      "16": {
        loc: {
          start: {
            line: 224,
            column: 23
          },
          end: {
            line: 224,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 224,
            column: 48
          },
          end: {
            line: 224,
            column: 61
          }
        }, {
          start: {
            line: 224,
            column: 64
          },
          end: {
            line: 224,
            column: 79
          }
        }],
        line: 224
      },
      "17": {
        loc: {
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "18": {
        loc: {
          start: {
            line: 254,
            column: 23
          },
          end: {
            line: 254,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 254,
            column: 48
          },
          end: {
            line: 254,
            column: 61
          }
        }, {
          start: {
            line: 254,
            column: 64
          },
          end: {
            line: 254,
            column: 79
          }
        }],
        line: 254
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/payroll/payrollApprovalController.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/payroll/payrollApprovalController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { PayrollApprovalService } from '../../services/payroll/payrollApprovalService';\nimport { ApiResponse } from '../../utils/types/express';\n\nexport class PayrollApprovalController {\n  private payrollApprovalService: PayrollApprovalService;\n\n  constructor() {\n    this.payrollApprovalService = new PayrollApprovalService();\n  }\n\n  async createPayrollApproval(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { payrollPeriodId, approverId, departmentId, comments } = req.body;\n\n      const approval = await this.payrollApprovalService.createPayrollApproval({\n        payrollPeriodId,\n        approverId,\n        departmentId,\n        comments\n      });\n\n      res.status(201).json({\n        success: true,\n        message: 'Payroll approval created successfully',\n        data: approval,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(400).json({\n        success: false,\n        message: 'Failed to create payroll approval',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getPayrollApproval(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { id } = req.params;\n\n      const approval = await this.payrollApprovalService.getPayrollApproval(id);\n\n      if (!approval) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll approval not found',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Payroll approval retrieved successfully',\n        data: approval,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve payroll approval',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async listPayrollApprovals(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const {\n        page = 1,\n        limit = 20,\n        payrollPeriodId,\n        approverId,\n        departmentId,\n        status,\n        startDate,\n        endDate,\n        search,\n        sortBy = 'created_at',\n        sortOrder = 'desc'\n      } = req.query;\n\n      const params = {\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        payrollPeriodId: payrollPeriodId as string,\n        approverId: approverId as string,\n        departmentId: departmentId as string,\n        status: status as 'pending' | 'approved' | 'rejected',\n        startDate: startDate ? new Date(startDate as string) : undefined,\n        endDate: endDate ? new Date(endDate as string) : undefined,\n        search: search as string,\n        sortBy: sortBy as string,\n        sortOrder: sortOrder as 'asc' | 'desc'\n      };\n\n      const result = await this.payrollApprovalService.listPayrollApprovals(params);\n\n      res.status(200).json({\n        success: true,\n        message: 'Payroll approvals retrieved successfully',\n        data: result,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve payroll approvals',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getPendingApprovalsForApprover(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { approverId } = req.params;\n\n      const approvals = await this.payrollApprovalService.getPendingApprovalsForApprover(approverId);\n\n      res.status(200).json({\n        success: true,\n        message: 'Pending payroll approvals retrieved successfully',\n        data: approvals,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve pending payroll approvals',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async approvePayrollApproval(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { id } = req.params;\n      const { approved, comments } = req.body;\n      const approverId = req.user?.userId;\n\n      if (!approverId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId\n        });\n        return;\n      }\n\n      const approval = await this.payrollApprovalService.approvePayrollApproval({\n        approvalId: id,\n        approverId,\n        approved,\n        comments\n      });\n\n      res.status(200).json({\n        success: true,\n        message: `Payroll approval ${approved ? 'approved' : 'rejected'} successfully`,\n        data: approval,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(400).json({\n        success: false,\n        message: 'Failed to approve payroll approval',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async createApprovalsForPayrollPeriod(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { payrollPeriodId } = req.params;\n\n      const approvals = await this.payrollApprovalService.createApprovalsForPayrollPeriod(payrollPeriodId);\n\n      res.status(201).json({\n        success: true,\n        message: 'Payroll approvals created successfully',\n        data: {\n          approvals,\n          count: approvals.length\n        },\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(400).json({\n        success: false,\n        message: 'Failed to create payroll approvals',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getPayrollApprovalStats(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const stats = await this.payrollApprovalService.getPayrollApprovalStats();\n\n      res.status(200).json({\n        success: true,\n        message: 'Payroll approval statistics retrieved successfully',\n        data: stats,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve payroll approval statistics',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getApprovalWorkflowStatus(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { payrollPeriodId } = req.params;\n\n      const workflowStatus = await this.payrollApprovalService.getApprovalWorkflowStatus(payrollPeriodId);\n\n      res.status(200).json({\n        success: true,\n        message: 'Payroll approval workflow status retrieved successfully',\n        data: workflowStatus,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve payroll approval workflow status',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async deletePayrollApproval(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { id } = req.params;\n\n      const deleted = await this.payrollApprovalService.deletePayrollApproval(id);\n\n      if (!deleted) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll approval not found',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Payroll approval deleted successfully',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete payroll approval',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "45fe77aee2d48dd47b8f860f79d170184da105f5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1z53f3x0nf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1z53f3x0nf();
cov_1z53f3x0nf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1z53f3x0nf().s[1]++;
exports.PayrollApprovalController = void 0;
const payrollApprovalService_1 =
/* istanbul ignore next */
(cov_1z53f3x0nf().s[2]++, require("../../services/payroll/payrollApprovalService"));
class PayrollApprovalController {
  constructor() {
    /* istanbul ignore next */
    cov_1z53f3x0nf().f[0]++;
    cov_1z53f3x0nf().s[3]++;
    this.payrollApprovalService = new payrollApprovalService_1.PayrollApprovalService();
  }
  async createPayrollApproval(req, res) {
    /* istanbul ignore next */
    cov_1z53f3x0nf().f[1]++;
    cov_1z53f3x0nf().s[4]++;
    try {
      const {
        payrollPeriodId,
        approverId,
        departmentId,
        comments
      } =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[5]++, req.body);
      const approval =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[6]++, await this.payrollApprovalService.createPayrollApproval({
        payrollPeriodId,
        approverId,
        departmentId,
        comments
      }));
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[7]++;
      res.status(201).json({
        success: true,
        message: 'Payroll approval created successfully',
        data: approval,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[8]++;
      res.status(400).json({
        success: false,
        message: 'Failed to create payroll approval',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[0][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[0][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async getPayrollApproval(req, res) {
    /* istanbul ignore next */
    cov_1z53f3x0nf().f[2]++;
    cov_1z53f3x0nf().s[9]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[10]++, req.params);
      const approval =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[11]++, await this.payrollApprovalService.getPayrollApproval(id));
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[12]++;
      if (!approval) {
        /* istanbul ignore next */
        cov_1z53f3x0nf().b[1][0]++;
        cov_1z53f3x0nf().s[13]++;
        res.status(404).json({
          success: false,
          message: 'Payroll approval not found',
          timestamp: new Date().toISOString(),
          requestId: req.requestId
        });
        /* istanbul ignore next */
        cov_1z53f3x0nf().s[14]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1z53f3x0nf().b[1][1]++;
      }
      cov_1z53f3x0nf().s[15]++;
      res.status(200).json({
        success: true,
        message: 'Payroll approval retrieved successfully',
        data: approval,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[16]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve payroll approval',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[2][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[2][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async listPayrollApprovals(req, res) {
    /* istanbul ignore next */
    cov_1z53f3x0nf().f[3]++;
    cov_1z53f3x0nf().s[17]++;
    try {
      const {
        page =
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[3][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[4][0]++, 20),
        payrollPeriodId,
        approverId,
        departmentId,
        status,
        startDate,
        endDate,
        search,
        sortBy =
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[5][0]++, 'created_at'),
        sortOrder =
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[6][0]++, 'desc')
      } =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[18]++, req.query);
      const params =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[19]++, {
        page: parseInt(page),
        limit: parseInt(limit),
        payrollPeriodId: payrollPeriodId,
        approverId: approverId,
        departmentId: departmentId,
        status: status,
        startDate: startDate ?
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[7][0]++, new Date(startDate)) :
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[7][1]++, undefined),
        endDate: endDate ?
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[8][0]++, new Date(endDate)) :
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[8][1]++, undefined),
        search: search,
        sortBy: sortBy,
        sortOrder: sortOrder
      });
      const result =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[20]++, await this.payrollApprovalService.listPayrollApprovals(params));
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[21]++;
      res.status(200).json({
        success: true,
        message: 'Payroll approvals retrieved successfully',
        data: result,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[22]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve payroll approvals',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[9][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[9][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async getPendingApprovalsForApprover(req, res) {
    /* istanbul ignore next */
    cov_1z53f3x0nf().f[4]++;
    cov_1z53f3x0nf().s[23]++;
    try {
      const {
        approverId
      } =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[24]++, req.params);
      const approvals =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[25]++, await this.payrollApprovalService.getPendingApprovalsForApprover(approverId));
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[26]++;
      res.status(200).json({
        success: true,
        message: 'Pending payroll approvals retrieved successfully',
        data: approvals,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[27]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve pending payroll approvals',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[10][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[10][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async approvePayrollApproval(req, res) {
    /* istanbul ignore next */
    cov_1z53f3x0nf().f[5]++;
    cov_1z53f3x0nf().s[28]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[29]++, req.params);
      const {
        approved,
        comments
      } =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[30]++, req.body);
      const approverId =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[31]++, req.user?.userId);
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[32]++;
      if (!approverId) {
        /* istanbul ignore next */
        cov_1z53f3x0nf().b[11][0]++;
        cov_1z53f3x0nf().s[33]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          timestamp: new Date().toISOString(),
          requestId: req.requestId
        });
        /* istanbul ignore next */
        cov_1z53f3x0nf().s[34]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1z53f3x0nf().b[11][1]++;
      }
      const approval =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[35]++, await this.payrollApprovalService.approvePayrollApproval({
        approvalId: id,
        approverId,
        approved,
        comments
      }));
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[36]++;
      res.status(200).json({
        success: true,
        message: `Payroll approval ${approved ?
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[12][0]++, 'approved') :
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[12][1]++, 'rejected')} successfully`,
        data: approval,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[37]++;
      res.status(400).json({
        success: false,
        message: 'Failed to approve payroll approval',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[13][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[13][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async createApprovalsForPayrollPeriod(req, res) {
    /* istanbul ignore next */
    cov_1z53f3x0nf().f[6]++;
    cov_1z53f3x0nf().s[38]++;
    try {
      const {
        payrollPeriodId
      } =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[39]++, req.params);
      const approvals =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[40]++, await this.payrollApprovalService.createApprovalsForPayrollPeriod(payrollPeriodId));
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[41]++;
      res.status(201).json({
        success: true,
        message: 'Payroll approvals created successfully',
        data: {
          approvals,
          count: approvals.length
        },
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[42]++;
      res.status(400).json({
        success: false,
        message: 'Failed to create payroll approvals',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[14][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[14][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async getPayrollApprovalStats(req, res) {
    /* istanbul ignore next */
    cov_1z53f3x0nf().f[7]++;
    cov_1z53f3x0nf().s[43]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[44]++, await this.payrollApprovalService.getPayrollApprovalStats());
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[45]++;
      res.status(200).json({
        success: true,
        message: 'Payroll approval statistics retrieved successfully',
        data: stats,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[46]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve payroll approval statistics',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[15][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[15][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async getApprovalWorkflowStatus(req, res) {
    /* istanbul ignore next */
    cov_1z53f3x0nf().f[8]++;
    cov_1z53f3x0nf().s[47]++;
    try {
      const {
        payrollPeriodId
      } =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[48]++, req.params);
      const workflowStatus =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[49]++, await this.payrollApprovalService.getApprovalWorkflowStatus(payrollPeriodId));
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[50]++;
      res.status(200).json({
        success: true,
        message: 'Payroll approval workflow status retrieved successfully',
        data: workflowStatus,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[51]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve payroll approval workflow status',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[16][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[16][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async deletePayrollApproval(req, res) {
    /* istanbul ignore next */
    cov_1z53f3x0nf().f[9]++;
    cov_1z53f3x0nf().s[52]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[53]++, req.params);
      const deleted =
      /* istanbul ignore next */
      (cov_1z53f3x0nf().s[54]++, await this.payrollApprovalService.deletePayrollApproval(id));
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[55]++;
      if (!deleted) {
        /* istanbul ignore next */
        cov_1z53f3x0nf().b[17][0]++;
        cov_1z53f3x0nf().s[56]++;
        res.status(404).json({
          success: false,
          message: 'Payroll approval not found',
          timestamp: new Date().toISOString(),
          requestId: req.requestId
        });
        /* istanbul ignore next */
        cov_1z53f3x0nf().s[57]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1z53f3x0nf().b[17][1]++;
      }
      cov_1z53f3x0nf().s[58]++;
      res.status(200).json({
        success: true,
        message: 'Payroll approval deleted successfully',
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1z53f3x0nf().s[59]++;
      res.status(500).json({
        success: false,
        message: 'Failed to delete payroll approval',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[18][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1z53f3x0nf().b[18][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
}
/* istanbul ignore next */
cov_1z53f3x0nf().s[60]++;
exports.PayrollApprovalController = PayrollApprovalController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,