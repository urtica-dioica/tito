{"version":3,"names":["cov_n9ohqjeks","actualCoverage","express_1","s","require","logger_1","__importDefault","database_1","attendanceService_1","AttendanceController","getRecentAttendance","req","res","f","requestId","getRequestId","limit","b","query","result","getPool","attendanceRecords","rows","map","row","id","sessionType","session_type","clockIn","clock_in","clockOut","clock_out","createdAt","created_at","selfieImageUrl","selfie_image_url","date","employeeId","employee_id","employeeName","first_name","last_name","employeeCode","employee_code","departmentName","department_name","action","timestamp","json","success","message","data","error","default","status","getAttendanceStats","today","Date","toISOString","split","stats","totalEmployeesToday","parseInt","total_employees_today","clockInsToday","clock_ins_today","clockOutsToday","clock_outs_today","completedSessionsToday","completed_sessions_today","getDailyAttendance","targetDate","setHours","console","log","length","total_hours","dailyAttendance","attendanceRecordId","attendance_record_id","position","overallStatus","overall_status","morningIn","morning_in","morningOut","morning_out","afternoonIn","afternoon_in","afternoonOut","afternoon_out","totalHours","Math","round","parseFloat","getAttendanceRecordSessions","params","recordQuery","recordResult","record","sessionsQuery","sessionsResult","attendanceDetail","sessions","session","selfieImagePath","calculatedHours","calculated_hours","lateHours","late_hours","getAttendanceDetail","regularHours","regular_hours","overtimeHours","overtime_hours","lateMinutes","late_minutes","getDetailedHoursCalculation","detailedCalculation","attendanceService","exports","attendanceController"],"sources":["/home/kim/tito/server/src/controllers/attendance/attendanceController.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { getRequestId } from '../../utils/types/express';\nimport logger from '../../utils/logger';\nimport { getPool } from '../../config/database';\nimport { attendanceService } from '../../services/attendance/attendanceService';\n\nexport class AttendanceController {\n  /**\n   * Get recent attendance records for dashboard\n   */\n  async getRecentAttendance(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n\n    try {\n      const { limit = 10 } = req.query;\n\n      const query = `\n        SELECT \n          s.id,\n          s.session_type,\n          s.clock_in,\n          s.clock_out,\n          s.created_at,\n          s.selfie_image_url,\n          ar.date,\n          ar.employee_id,\n          u.first_name,\n          u.last_name,\n          e.employee_id as employee_code,\n          d.name as department_name\n        FROM attendance_sessions s\n        JOIN attendance_records ar ON s.attendance_record_id = ar.id\n        JOIN employees e ON ar.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        WHERE s.clock_in IS NOT NULL OR s.clock_out IS NOT NULL\n        ORDER BY s.created_at DESC\n        LIMIT $1\n      `;\n\n      const result = await getPool().query(query, [limit]);\n      \n      const attendanceRecords = result.rows.map(row => ({\n        id: row.id,\n        sessionType: row.session_type,\n        clockIn: row.clock_in,\n        clockOut: row.clock_out,\n        createdAt: row.created_at,\n        selfieImageUrl: row.selfie_image_url,\n        date: row.date,\n        employeeId: row.employee_id,\n        employeeName: `${row.first_name} ${row.last_name}`,\n        employeeCode: row.employee_code,\n        departmentName: row.department_name,\n        action: row.clock_in ? 'Clock In' : 'Clock Out',\n        timestamp: row.clock_in || row.clock_out\n      }));\n\n      res.json({\n        success: true,\n        message: 'Recent attendance records retrieved successfully',\n        data: attendanceRecords,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting recent attendance records', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get recent attendance records',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get attendance statistics for dashboard\n   */\n  async getAttendanceStats(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      \n      const query = `\n        SELECT \n          COUNT(DISTINCT ar.employee_id) as total_employees_today,\n          COUNT(CASE WHEN s.clock_in IS NOT NULL THEN 1 END) as clock_ins_today,\n          COUNT(CASE WHEN s.clock_out IS NOT NULL THEN 1 END) as clock_outs_today,\n          COUNT(CASE WHEN s.clock_in IS NOT NULL AND s.clock_out IS NOT NULL THEN 1 END) as completed_sessions_today\n        FROM attendance_records ar\n        LEFT JOIN attendance_sessions s ON ar.id = s.attendance_record_id\n        WHERE ar.date = $1\n      `;\n\n      const result = await getPool().query(query, [today]);\n      const stats = result.rows[0];\n\n      res.json({\n        success: true,\n        message: 'Attendance statistics retrieved successfully',\n        data: {\n          totalEmployeesToday: parseInt(stats.total_employees_today) || 0,\n          clockInsToday: parseInt(stats.clock_ins_today) || 0,\n          clockOutsToday: parseInt(stats.clock_outs_today) || 0,\n          completedSessionsToday: parseInt(stats.completed_sessions_today) || 0\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting attendance statistics', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get attendance statistics',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get daily attendance records for dashboard\n   */\n  async getDailyAttendance(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n\n    try {\n      const { limit = 10, date } = req.query;\n      const targetDate = date ? new Date(date as string) : new Date();\n      targetDate.setHours(0, 0, 0, 0);\n\n      const query = `\n        SELECT \n          ar.id as attendance_record_id,\n          ar.employee_id,\n          ar.date,\n          ar.overall_status,\n          u.first_name,\n          u.last_name,\n          e.employee_id as employee_code,\n          d.name as department_name,\n          e.position,\n          -- Morning session\n          morning_in.clock_in as morning_in,\n          morning_out.clock_out as morning_out,\n          -- Afternoon session\n          afternoon_in.clock_in as afternoon_in,\n          afternoon_out.clock_out as afternoon_out,\n          -- Total hours calculation by pairing clock-in and clock-out sessions\n          COALESCE(\n            -- Morning session hours (if both morning_in and morning_out exist)\n            (SELECT EXTRACT(EPOCH FROM (m_out.clock_out - m_in.clock_in)) / 3600.0\n             FROM attendance_sessions m_in, attendance_sessions m_out\n             WHERE m_in.attendance_record_id = ar.id \n               AND m_in.session_type = 'morning_in'\n               AND m_in.clock_in IS NOT NULL\n               AND m_out.attendance_record_id = ar.id \n               AND m_out.session_type = 'morning_out'\n               AND m_out.clock_out IS NOT NULL), 0) +\n          COALESCE(\n            -- Afternoon session hours (if both afternoon_in and afternoon_out exist)\n            (SELECT EXTRACT(EPOCH FROM (a_out.clock_out - a_in.clock_in)) / 3600.0\n             FROM attendance_sessions a_in, attendance_sessions a_out\n             WHERE a_in.attendance_record_id = ar.id \n               AND a_in.session_type = 'afternoon_in'\n               AND a_in.clock_in IS NOT NULL\n               AND a_out.attendance_record_id = ar.id \n               AND a_out.session_type = 'afternoon_out'\n               AND a_out.clock_out IS NOT NULL), 0\n          ) as total_hours\n        FROM attendance_records ar\n        JOIN employees e ON ar.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        -- Morning sessions\n        LEFT JOIN attendance_sessions morning_in ON ar.id = morning_in.attendance_record_id \n          AND morning_in.session_type = 'morning_in'\n        LEFT JOIN attendance_sessions morning_out ON ar.id = morning_out.attendance_record_id \n          AND morning_out.session_type = 'morning_out'\n        -- Afternoon sessions\n        LEFT JOIN attendance_sessions afternoon_in ON ar.id = afternoon_in.attendance_record_id \n          AND afternoon_in.session_type = 'afternoon_in'\n        LEFT JOIN attendance_sessions afternoon_out ON ar.id = afternoon_out.attendance_record_id \n          AND afternoon_out.session_type = 'afternoon_out'\n        WHERE ar.date = $1\n        ORDER BY u.first_name, u.last_name\n        LIMIT $2\n      `;\n\n      const result = await getPool().query(query, [targetDate, limit]);\n      \n      // Debug logging\n      console.log('Daily attendance query result:', result.rows.length, 'rows');\n      if (result.rows.length > 0) {\n        console.log('First row total_hours:', result.rows[0].total_hours);\n      }\n      \n      const dailyAttendance = result.rows.map(row => ({\n        attendanceRecordId: row.attendance_record_id,\n        employeeId: row.employee_id,\n        employeeName: `${row.first_name} ${row.last_name}`,\n        employeeCode: row.employee_code,\n        departmentName: row.department_name,\n        position: row.position,\n        date: row.date,\n        overallStatus: row.overall_status,\n        morningIn: row.morning_in,\n        morningOut: row.morning_out,\n        afternoonIn: row.afternoon_in,\n        afternoonOut: row.afternoon_out,\n        totalHours: Math.round(parseFloat(row.total_hours) || 0)\n      }));\n\n      res.json({\n        success: true,\n        message: 'Daily attendance records retrieved successfully',\n        data: dailyAttendance,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting daily attendance records', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get daily attendance records',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get all sessions for an attendance record\n   */\n  async getAttendanceRecordSessions(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n\n    try {\n      const { id } = req.params;\n\n      // First get the attendance record info\n      const recordQuery = `\n        SELECT \n          ar.id as attendance_record_id,\n          ar.employee_id,\n          ar.date,\n          ar.overall_status,\n          u.first_name,\n          u.last_name,\n          e.employee_id as employee_code,\n          e.position,\n          d.name as department_name\n        FROM attendance_records ar\n        JOIN employees e ON ar.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        WHERE ar.id = $1\n      `;\n\n      const recordResult = await getPool().query(recordQuery, [id]);\n      \n      if (recordResult.rows.length === 0) {\n        res.status(404).json({\n          success: false,\n          message: 'Attendance record not found',\n          requestId\n        });\n        return;\n      }\n\n      const record = recordResult.rows[0];\n\n      // Then get all sessions for this attendance record\n      const sessionsQuery = `\n        SELECT \n          s.id,\n          s.session_type,\n          s.clock_in,\n          s.clock_out,\n          s.created_at,\n          s.selfie_image_url,\n          s.calculated_hours,\n          s.late_hours,\n          s.status\n        FROM attendance_sessions s\n        WHERE s.attendance_record_id = $1\n        ORDER BY s.created_at ASC\n      `;\n\n      const sessionsResult = await getPool().query(sessionsQuery, [id]);\n      \n      const attendanceDetail = {\n        attendanceRecordId: record.attendance_record_id,\n        employeeId: record.employee_id,\n        employeeName: `${record.first_name} ${record.last_name}`,\n        employeeCode: record.employee_code,\n        position: record.position,\n        departmentName: record.department_name,\n        date: record.date,\n        overallStatus: record.overall_status,\n        sessions: sessionsResult.rows.map(session => ({\n          id: session.id,\n          sessionType: session.session_type,\n          clockIn: session.clock_in,\n          clockOut: session.clock_out,\n          createdAt: session.created_at,\n          selfieImagePath: session.selfie_image_url,\n          calculatedHours: parseFloat(session.calculated_hours) || 0,\n          lateHours: parseFloat(session.late_hours) || 0,\n          status: session.status\n        }))\n      };\n\n      res.json({\n        success: true,\n        message: 'Attendance record sessions retrieved successfully',\n        data: attendanceDetail,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting attendance record sessions', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get attendance record sessions',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get detailed attendance record by ID\n   */\n  async getAttendanceDetail(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n\n    try {\n      const { id } = req.params;\n\n      const query = `\n        SELECT \n          s.id,\n          s.session_type,\n          s.clock_in,\n          s.clock_out,\n          s.created_at,\n          s.selfie_image_url,\n          s.regular_hours,\n          s.overtime_hours,\n          s.late_minutes,\n          s.late_hours,\n          ar.date,\n          ar.employee_id,\n          u.first_name,\n          u.last_name,\n          e.employee_id as employee_code,\n          e.position,\n          d.name as department_name\n        FROM attendance_sessions s\n        JOIN attendance_records ar ON s.attendance_record_id = ar.id\n        JOIN employees e ON ar.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        WHERE s.id = $1\n      `;\n\n      const result = await getPool().query(query, [id]);\n      \n      if (result.rows.length === 0) {\n        res.status(404).json({\n          success: false,\n          message: 'Attendance record not found',\n          requestId\n        });\n        return;\n      }\n\n      const row = result.rows[0];\n      const attendanceDetail = {\n        id: row.id,\n        sessionType: row.session_type,\n        clockIn: row.clock_in,\n        clockOut: row.clock_out,\n        createdAt: row.created_at,\n        selfieImageUrl: row.selfie_image_url,\n        regularHours: row.regular_hours,\n        overtimeHours: row.overtime_hours,\n        lateMinutes: row.late_minutes,\n        lateHours: row.late_hours,\n        date: row.date,\n        employeeId: row.employee_id,\n        employeeName: `${row.first_name} ${row.last_name}`,\n        employeeCode: row.employee_code,\n        position: row.position,\n        departmentName: row.department_name,\n        action: row.clock_in ? 'Clock In' : 'Clock Out',\n        timestamp: row.clock_in || row.clock_out\n      };\n\n      res.json({\n        success: true,\n        message: 'Attendance detail retrieved successfully',\n        data: attendanceDetail,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting attendance detail', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get attendance detail',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get detailed hours calculation for an attendance record\n   */\n  async getDetailedHoursCalculation(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n\n    try {\n      const { attendanceRecordId } = req.params;\n\n      if (!attendanceRecordId) {\n        res.status(400).json({\n          success: false,\n          message: 'Attendance record ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const detailedCalculation = await attendanceService.getDetailedHoursCalculation(attendanceRecordId);\n\n      res.json({\n        success: true,\n        message: 'Detailed hours calculation retrieved successfully',\n        data: detailedCalculation,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting detailed hours calculation', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get detailed hours calculation',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n}\n\nexport const attendanceController = new AttendanceController();"],"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","ignoreList":[]}