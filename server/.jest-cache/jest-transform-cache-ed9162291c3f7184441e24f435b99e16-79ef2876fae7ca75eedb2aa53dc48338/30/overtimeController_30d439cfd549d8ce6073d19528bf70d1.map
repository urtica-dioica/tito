{"version":3,"names":["cov_edsbjjmkp","actualCoverage","overtimeService_1","s","require","employeeService_1","requestId_1","logger_1","__importDefault","OvertimeController","createOvertimeRequest","req","res","f","requestId","generateRequestId","requestDate","startTime","endTime","requestedHours","reason","body","userId","user","b","status","json","success","message","employeeId","employeeService","getEmployeeIdByUserId","parsedStartTime","parsedEndTime","timeRegex","includes","dateObj","Date","isNaN","getTime","Error","getUTCHours","toString","padStart","getUTCMinutes","test","requestData","parseFloat","trim","default","info","validation","overtimeService","validateOvertimeRequest","isValid","errors","request","data","error","getOvertimeRequest","id","params","listOvertimeRequests","page","limit","departmentId","startDate","endDate","search","sortBy","sortOrder","query","parseInt","result","getEmployeeOvertimeRequests","getPendingRequestsForDepartmentHead","departmentHeadUserId","requests","approveOvertimeRequest","approved","comments","approverId","approvalData","updatedRequest","deleteOvertimeRequest","deleted","getOvertimeStats","stats","getEmployeeOvertimeSummary","start","end","summary","exports","overtimeController"],"sources":["/home/kim/tito/server/src/controllers/attendance/overtimeController.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { overtimeService } from '../../services/attendance/overtimeService';\nimport { employeeService } from '../../services/employee/employeeService';\nimport { generateRequestId } from '../../utils/requestId';\nimport logger from '../../utils/logger';\n\nexport class OvertimeController {\n  /**\n   * Create an overtime request\n   */\n  async createOvertimeRequest(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const { requestDate, startTime, endTime, requestedHours, reason } = req.body;\n      const userId = req.user?.userId;\n      \n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User ID not found in token',\n          requestId\n        });\n        return;\n      }\n\n      // Get employee ID from user ID\n      const employeeId = await employeeService.getEmployeeIdByUserId(userId);\n      if (!employeeId) {\n        res.status(404).json({\n          success: false,\n          message: 'Employee not found for this user',\n          requestId\n        });\n        return;\n      }\n\n      if (!requestDate || !startTime || !endTime || !requestedHours || !reason) {\n        res.status(400).json({\n          success: false,\n          message: 'Request date, start time, end time, requested hours, and reason are required',\n          requestId\n        });\n        return;\n      }\n\n      // Parse times properly - handle both full datetime and time-only strings\n      let parsedStartTime: string;\n      let parsedEndTime: string;\n      \n      // Validate time format first\n      const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\n      \n      if (startTime.includes('T')) {\n        // Full datetime string - extract time portion\n        const dateObj = new Date(startTime);\n        if (isNaN(dateObj.getTime())) {\n          throw new Error('Invalid start time format');\n        }\n        parsedStartTime = `${dateObj.getUTCHours().toString().padStart(2, '0')}:${dateObj.getUTCMinutes().toString().padStart(2, '0')}`;\n      } else if (timeRegex.test(startTime)) {\n        // Time-only string, use as is\n        parsedStartTime = startTime;\n      } else {\n        throw new Error('Invalid start time format. Expected HH:MM format');\n      }\n      \n      if (endTime.includes('T')) {\n        // Full datetime string - extract time portion\n        const dateObj = new Date(endTime);\n        if (isNaN(dateObj.getTime())) {\n          throw new Error('Invalid end time format');\n        }\n        parsedEndTime = `${dateObj.getUTCHours().toString().padStart(2, '0')}:${dateObj.getUTCMinutes().toString().padStart(2, '0')}`;\n      } else if (timeRegex.test(endTime)) {\n        // Time-only string, use as is\n        parsedEndTime = endTime;\n      } else {\n        throw new Error('Invalid end time format. Expected HH:MM format');\n      }\n\n      const requestData = {\n        employeeId,\n        requestDate: new Date(requestDate),\n        startTime: parsedStartTime,\n        endTime: parsedEndTime,\n        requestedHours: parseFloat(requestedHours),\n        reason: reason.trim()\n      };\n\n      // Debug: Log the processed data\n      logger.info('Processed overtime request data:', {\n        employeeId,\n        requestDate: requestData.requestDate,\n        startTime: requestData.startTime,\n        endTime: requestData.endTime,\n        requestedHours: requestData.requestedHours,\n        reason: requestData.reason,\n        requestId\n      });\n\n      // Validate the request\n      const validation = await overtimeService.validateOvertimeRequest(requestData);\n      if (!validation.isValid) {\n        res.status(400).json({\n          success: false,\n          message: 'Validation failed',\n          errors: validation.errors,\n          requestId\n        });\n        return;\n      }\n\n      const request = await overtimeService.createOvertimeRequest(requestData);\n\n      res.status(201).json({\n        success: true,\n        message: 'Overtime request created successfully',\n        data: request,\n        requestId\n      });\n\n    } catch (error) {\n      logger.error('Create overtime request error', {\n        error: (error as Error).message,\n        requestId,\n        employeeId: req.user?.userId\n      });\n\n      res.status(400).json({\n        success: false,\n        message: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get overtime request by ID\n   */\n  async getOvertimeRequest(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const id = req.params['id'];\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Request ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const request = await overtimeService.getOvertimeRequest(id);\n\n      if (!request) {\n        res.status(404).json({\n          success: false,\n          message: 'Overtime request not found',\n          requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Overtime request retrieved',\n        data: request,\n        requestId\n      });\n\n    } catch (error) {\n      logger.error('Get overtime request error', {\n        error: (error as Error).message,\n        requestId,\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get overtime request',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * List overtime requests\n   */\n  async listOvertimeRequests(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const {\n        page = '1',\n        limit = '20',\n        employeeId,\n        departmentId,\n        status,\n        startDate,\n        endDate,\n        search,\n        sortBy = 'created_at',\n        sortOrder = 'desc'\n      } = req.query;\n\n      const params: any = {\n        page: parseInt(page as string) || 1,\n        limit: parseInt(limit as string) || 20,\n        sortBy: sortBy as string,\n        sortOrder: sortOrder as 'asc' | 'desc'\n      };\n\n      if (employeeId) params.employeeId = employeeId as string;\n      if (departmentId) params.departmentId = departmentId as string;\n      if (status) params.status = status as 'pending' | 'approved' | 'rejected';\n      if (startDate) params.startDate = new Date(startDate as string);\n      if (endDate) params.endDate = new Date(endDate as string);\n      if (search) params.search = search as string;\n\n      const result = await overtimeService.listOvertimeRequests(params);\n\n      res.status(200).json({\n        success: true,\n        message: 'Overtime requests retrieved',\n        data: result,\n        requestId\n      });\n\n    } catch (error) {\n      logger.error('List overtime requests error', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to list overtime requests',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get employee's overtime requests\n   */\n  async getEmployeeOvertimeRequests(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const employeeId = req.user?.userId;\n      const { startDate, endDate, page = '1', limit = '20' } = req.query;\n\n      if (!employeeId) {\n        res.status(401).json({\n          success: false,\n          message: 'Employee ID not found in token',\n          requestId\n        });\n        return;\n      }\n\n      const params: any = {\n        page: parseInt(page as string) || 1,\n        limit: parseInt(limit as string) || 20\n      };\n\n      if (startDate) params.startDate = new Date(startDate as string);\n      if (endDate) params.endDate = new Date(endDate as string);\n\n      const result = await overtimeService.getEmployeeOvertimeRequests(\n        employeeId,\n        params.startDate,\n        params.endDate,\n        params.page,\n        params.limit\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee overtime requests retrieved',\n        data: result,\n        requestId\n      });\n\n    } catch (error) {\n      logger.error('Get employee overtime requests error', {\n        error: (error as Error).message,\n        requestId,\n        employeeId: req.user?.userId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get employee overtime requests',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get pending requests for department head\n   */\n  async getPendingRequestsForDepartmentHead(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const departmentHeadUserId = req.user?.userId;\n\n      if (!departmentHeadUserId) {\n        res.status(401).json({\n          success: false,\n          message: 'Department head ID not found in token',\n          requestId\n        });\n        return;\n      }\n\n      const requests = await overtimeService.getPendingRequestsForDepartmentHead(departmentHeadUserId);\n\n      res.status(200).json({\n        success: true,\n        message: 'Pending overtime requests retrieved',\n        data: requests,\n        requestId\n      });\n\n    } catch (error) {\n      logger.error('Get pending requests for department head error', {\n        error: (error as Error).message,\n        requestId,\n        departmentHeadUserId: req.user?.userId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get pending overtime requests',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Approve or reject an overtime request\n   */\n  async approveOvertimeRequest(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const { id } = req.params;\n      const { approved, comments } = req.body;\n      const approverId = req.user?.userId;\n\n      if (!approverId) {\n        res.status(401).json({\n          success: false,\n          message: 'Approver ID not found in token',\n          requestId\n        });\n        return;\n      }\n\n      if (typeof approved !== 'boolean') {\n        res.status(400).json({\n          success: false,\n          message: 'Approved status is required and must be boolean',\n          requestId\n        });\n        return;\n      }\n\n      const approvalData = {\n        requestId: id,\n        approverId,\n        approved,\n        comments: comments?.trim()\n      };\n\n      const updatedRequest = await overtimeService.approveOvertimeRequest(approvalData);\n\n      res.status(200).json({\n        success: true,\n        message: `Overtime request ${approved ? 'approved' : 'rejected'} successfully`,\n        data: updatedRequest,\n        requestId\n      });\n\n    } catch (error) {\n      logger.error('Approve overtime request error', {\n        error: (error as Error).message,\n        requestId,\n        approverId: req.user?.userId\n      });\n\n      res.status(400).json({\n        success: false,\n        message: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Delete an overtime request\n   */\n  async deleteOvertimeRequest(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const { id } = req.params;\n      const employeeId = req.user?.userId;\n\n      if (!employeeId) {\n        res.status(401).json({\n          success: false,\n          message: 'Employee ID not found in token',\n          requestId\n        });\n        return;\n      }\n\n      // Verify the request belongs to the employee\n      const request = await overtimeService.getOvertimeRequest(id);\n      if (!request) {\n        res.status(404).json({\n          success: false,\n          message: 'Overtime request not found',\n          requestId\n        });\n        return;\n      }\n\n      if (request.employeeId !== employeeId) {\n        res.status(403).json({\n          success: false,\n          message: 'You can only delete your own overtime requests',\n          requestId\n        });\n        return;\n      }\n\n      const deleted = await overtimeService.deleteOvertimeRequest(id);\n\n      if (!deleted) {\n        res.status(400).json({\n          success: false,\n          message: 'Failed to delete overtime request',\n          requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Overtime request deleted successfully',\n        requestId\n      });\n\n    } catch (error) {\n      logger.error('Delete overtime request error', {\n        error: (error as Error).message,\n        requestId,\n        employeeId: req.user?.userId\n      });\n\n      res.status(400).json({\n        success: false,\n        message: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get overtime request statistics\n   */\n  async getOvertimeStats(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const { employeeId, departmentId } = req.query;\n\n      const stats = await overtimeService.getOvertimeStats(\n        employeeId as string,\n        departmentId as string\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Overtime statistics retrieved',\n        data: stats,\n        requestId\n      });\n\n    } catch (error) {\n      logger.error('Get overtime stats error', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get overtime statistics',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get employee overtime summary\n   */\n  async getEmployeeOvertimeSummary(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const employeeId = req.user?.userId;\n      const { startDate, endDate } = req.query;\n\n      if (!employeeId) {\n        res.status(401).json({\n          success: false,\n          message: 'Employee ID not found in token',\n          requestId\n        });\n        return;\n      }\n\n      if (!startDate || !endDate) {\n        res.status(400).json({\n          success: false,\n          message: 'Start date and end date are required',\n          requestId\n        });\n        return;\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      \n      if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n        res.status(400).json({\n          success: false,\n          message: 'Invalid date format',\n          requestId\n        });\n        return;\n      }\n\n      const summary = await overtimeService.getEmployeeOvertimeSummary(employeeId, start, end);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee overtime summary retrieved',\n        data: summary,\n        requestId\n      });\n\n    } catch (error) {\n      logger.error('Get employee overtime summary error', {\n        error: (error as Error).message,\n        requestId,\n        employeeId: req.user?.userId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get employee overtime summary',\n        requestId\n      });\n    }\n  }\n}\n\nexport const overtimeController = new OvertimeController();"],"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","ignoreList":[]}