27346f181620529e424dc7108396c8a6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the dependencies
jest.mock('../../../src/models/hr/Employee');
jest.mock('../../../src/models/payroll/PayrollApproval');
jest.mock('../../../src/config/database');
const departmentHeadService_1 = require("../../../src/services/department-head/departmentHeadService");
const database_1 = require("../../../src/config/database");
const mockGetPool = database_1.getPool;
describe('DepartmentHeadService', () => {
    let departmentHeadService;
    let mockPool;
    beforeEach(() => {
        departmentHeadService = new departmentHeadService_1.DepartmentHeadService();
        jest.clearAllMocks();
        // Mock database pool
        mockPool = {
            query: jest.fn()
        };
        mockGetPool.mockReturnValue(mockPool);
    });
    describe('getDashboard', () => {
        const mockDepartment = {
            id: 'dept-123',
            name: 'Engineering',
            description: 'Software Engineering Department',
            employee_count: 15
        };
        const mockPendingRequests = {
            timeCorrections: 3,
            overtime: 2,
            leaves: 5,
            total: 10
        };
        const mockRecentActivity = [
            {
                type: 'time_correction',
                employee_name: 'John Doe',
                date: '2024-01-15',
                status: 'pending'
            }
        ];
        const mockAttendanceSummary = {
            present_today: 12,
            absent_today: 2,
            late_today: 1
        };
        it('should return department head dashboard successfully', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [mockDepartment] }) // getDepartmentByHead
                .mockResolvedValueOnce({ rows: [{ ...mockPendingRequests }] }) // getPendingRequestsCount
                .mockResolvedValueOnce({ rows: mockRecentActivity }) // getRecentActivity
                .mockResolvedValueOnce({ rows: [{ ...mockAttendanceSummary }] }); // getTodayAttendanceSummary
            // Act
            const result = await departmentHeadService.getDashboard('user-123');
            // Assert
            expect(result).toEqual({
                department: {
                    id: 'dept-123',
                    name: 'Engineering',
                    description: 'Software Engineering Department',
                    employeeCount: 15
                },
                pendingRequests: {
                    timeCorrections: 3,
                    overtime: 2,
                    leaves: 5,
                    total: 10
                },
                recentActivity: [
                    {
                        type: 'time_correction',
                        employeeName: 'John Doe',
                        date: '2024-01-15',
                        status: 'pending'
                    }
                ],
                attendanceSummary: {
                    presentToday: 12,
                    absentToday: 2,
                    lateToday: 1
                }
            });
        });
        it('should throw error if department not found', async () => {
            // Arrange
            mockPool.query.mockResolvedValueOnce({ rows: [] });
            // Act & Assert
            await expect(departmentHeadService.getDashboard('user-123'))
                .rejects.toThrow('Department not found for user');
        });
    });
    describe('getDepartmentEmployees', () => {
        const mockEmployees = [
            {
                id: 'emp-123',
                employee_id: 'EMP001',
                user_id: 'user-123',
                position: 'Software Developer',
                employment_type: 'regular',
                hire_date: '2023-01-01',
                status: 'active',
                first_name: 'John',
                last_name: 'Doe',
                email: 'john.doe@company.com',
                last_attendance: '2024-01-15'
            }
        ];
        it('should return department employees successfully', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead
                .mockResolvedValueOnce({ rows: mockEmployees }); // getDepartmentEmployees
            // Act
            const result = await departmentHeadService.getDepartmentEmployees('user-123', {
                page: 1,
                limit: 10,
                search: '',
                status: 'active'
            });
            // Assert
            expect(result.data).toHaveLength(1);
            expect(result.data[0]).toEqual({
                id: 'emp-123',
                employeeId: 'EMP001',
                user: {
                    id: 'user-123',
                    firstName: 'John',
                    lastName: 'Doe',
                    email: 'john.doe@company.com'
                },
                position: 'Software Developer',
                employmentType: 'regular',
                hireDate: '2023-01-01',
                status: 'active',
                lastAttendance: '2024-01-15'
            });
        });
        it('should handle pagination correctly', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] })
                .mockResolvedValueOnce({ rows: mockEmployees })
                .mockResolvedValueOnce({ rows: [{ count: '25' }] }); // total count
            // Act
            const result = await departmentHeadService.getDepartmentEmployees('user-123', {
                page: 2,
                limit: 10,
                search: '',
                status: 'active'
            });
            // Assert
            expect(result.pagination).toEqual({
                page: 2,
                limit: 10,
                total: 25,
                totalPages: 3
            });
        });
    });
    describe('getEmployeeDetails', () => {
        const mockEmployeeDetails = {
            id: 'emp-123',
            employee_id: 'EMP001',
            user_id: 'user-123',
            position: 'Software Developer',
            employment_type: 'regular',
            hire_date: '2023-01-01',
            status: 'active',
            base_salary: 50000,
            first_name: 'John',
            last_name: 'Doe',
            email: 'john.doe@company.com',
            department_name: 'Engineering'
        };
        it('should return employee details successfully', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead
                .mockResolvedValueOnce({ rows: [mockEmployeeDetails] }); // getEmployeeDetails
            // Act
            const result = await departmentHeadService.getEmployeeDetails('user-123', 'emp-123');
            // Assert
            expect(result).toEqual({
                id: 'emp-123',
                employeeId: 'EMP001',
                user: {
                    id: 'user-123',
                    firstName: 'John',
                    lastName: 'Doe',
                    email: 'john.doe@company.com'
                },
                position: 'Software Developer',
                employmentType: 'regular',
                hireDate: '2023-01-01',
                status: 'active',
                baseSalary: 50000,
                departmentName: 'Engineering'
            });
        });
        it('should throw error if employee not found in department', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] })
                .mockResolvedValueOnce({ rows: [] });
            // Act & Assert
            await expect(departmentHeadService.getEmployeeDetails('user-123', 'emp-123'))
                .rejects.toThrow('Employee not found in department');
        });
    });
    describe('getPendingRequests', () => {
        const mockRequests = [
            {
                id: 'req-123',
                type: 'time_correction',
                employee_name: 'John Doe',
                date: '2024-01-15',
                status: 'pending',
                created_at: '2024-01-15T10:00:00Z'
            }
        ];
        it('should return pending requests successfully', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead
                .mockResolvedValueOnce({ rows: mockRequests }); // getPendingRequests
            // Act
            const result = await departmentHeadService.getPendingRequests('user-123', {
                type: 'time_correction',
                page: 1,
                limit: 10
            });
            // Assert
            expect(result.data).toHaveLength(1);
            expect(result.data[0]).toEqual({
                id: 'req-123',
                type: 'time_correction',
                employeeName: 'John Doe',
                date: '2024-01-15',
                status: 'pending',
                createdAt: '2024-01-15T10:00:00Z'
            });
        });
    });
    describe('getDepartmentStats', () => {
        const mockStats = {
            total_employees: 15,
            active_employees: 14,
            inactive_employees: 1,
            average_attendance: 95.5,
            total_requests: 25,
            pending_requests: 5,
            approved_requests: 18,
            rejected_requests: 2
        };
        it('should return department stats successfully', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead
                .mockResolvedValueOnce({ rows: [mockStats] }); // getDepartmentStats
            // Act
            const result = await departmentHeadService.getDepartmentStats('user-123', '2024-01');
            // Assert
            expect(result).toEqual({
                totalEmployees: 15,
                activeEmployees: 14,
                inactiveEmployees: 1,
                averageAttendance: 95.5,
                totalRequests: 25,
                pendingRequests: 5,
                approvedRequests: 18,
                rejectedRequests: 2
            });
        });
    });
    describe('getAttendanceSummary', () => {
        const mockAttendanceSummary = {
            present_today: 12,
            absent_today: 2,
            late_today: 1,
            total_employees: 15,
            attendance_rate: 80.0
        };
        it('should return attendance summary successfully', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead
                .mockResolvedValueOnce({ rows: [mockAttendanceSummary] }); // getAttendanceSummary
            // Act
            const result = await departmentHeadService.getAttendanceSummary('user-123', {
                startDate: '2024-01-15',
                endDate: '2024-01-15'
            });
            // Assert
            expect(result).toEqual({
                presentToday: 12,
                absentToday: 2,
                lateToday: 1,
                totalEmployees: 15,
                attendanceRate: 80.0
            });
        });
    });
    describe('getPayrollSummary', () => {
        const mockPayrollSummary = {
            total_employees: 15,
            total_gross_pay: 75000,
            total_deductions: 15000,
            total_net_pay: 60000,
            average_salary: 5000
        };
        it('should return payroll summary successfully', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead
                .mockResolvedValueOnce({ rows: [mockPayrollSummary] }); // getPayrollSummary
            // Act
            const result = await departmentHeadService.getPayrollSummary('user-123', {
                periodId: 'payroll-123',
                page: 1,
                limit: 10
            });
            // Assert
            expect(result).toEqual({
                totalEmployees: 15,
                totalGrossPay: 75000,
                totalDeductions: 15000,
                totalNetPay: 60000,
                averageSalary: 5000
            });
        });
    });
    describe('approveRequest', () => {
        it('should approve request successfully', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead
                .mockResolvedValueOnce({ rows: [{ id: 'req-123', type: 'time_correction' }] }) // getRequest
                .mockResolvedValueOnce({ rows: [] }); // updateRequest
            // Act
            await departmentHeadService.approveRequest('user-123', 'req-123');
            // Assert
            expect(mockPool.query).toHaveBeenCalledTimes(3);
        });
        it('should throw error if request not found', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] })
                .mockResolvedValueOnce({ rows: [] });
            // Act & Assert
            await expect(departmentHeadService.approveRequest('user-123', 'req-123'))
                .rejects.toThrow('Request not found');
        });
    });
    describe('rejectRequest', () => {
        it('should reject request successfully', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead
                .mockResolvedValueOnce({ rows: [{ id: 'req-123', type: 'time_correction' }] }) // getRequest
                .mockResolvedValueOnce({ rows: [] }); // updateRequest
            // Act
            await departmentHeadService.rejectRequest('user-123', 'req-123', 'Invalid request');
            // Assert
            expect(mockPool.query).toHaveBeenCalledTimes(3);
        });
    });
    describe('getPayrollRecords', () => {
        const mockPayrollRecords = [
            {
                id: 'payroll-123',
                employee_id: 'emp-123',
                employee_name: 'John Doe',
                base_salary: 5000,
                total_hours: 160,
                gross_pay: 5000,
                total_deductions: 1000,
                net_pay: 4000,
                status: 'processed'
            }
        ];
        it('should return payroll records successfully', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead
                .mockResolvedValueOnce({ rows: mockPayrollRecords }); // getPayrollRecords
            // Act
            const result = await departmentHeadService.getPayrollRecords('user-123', 'period-123');
            // Assert
            expect(result).toHaveLength(1);
            expect(result[0]).toEqual({
                id: 'payroll-123',
                employeeId: 'emp-123',
                employeeName: 'John Doe',
                baseSalary: 5000,
                totalHours: 160,
                grossPay: 5000,
                totalDeductions: 1000,
                netPay: 4000,
                status: 'processed'
            });
        });
    });
    describe('approvePayrollApproval', () => {
        it('should approve payroll approval successfully', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'approval-123', status: 'pending' }] }) // findById
                .mockResolvedValueOnce({ rows: [{ id: 'approval-123', status: 'approved' }] }); // updatePayrollApproval
            // Act
            const result = await departmentHeadService.approvePayrollApproval('user-123', 'approval-123', 'approved', 'Approved for processing');
            // Assert
            expect(result).toBe(true);
            expect(mockPool.query).toHaveBeenCalledTimes(2);
        });
        it('should reject payroll approval successfully', async () => {
            // Arrange
            mockPool.query
                .mockResolvedValueOnce({ rows: [{ id: 'approval-123', status: 'pending' }] }) // findById
                .mockResolvedValueOnce({ rows: [{ id: 'approval-123', status: 'rejected' }] }); // updatePayrollApproval
            // Act
            const result = await departmentHeadService.approvePayrollApproval('user-123', 'approval-123', 'rejected', 'Rejected due to errors');
            // Assert
            expect(result).toBe(true);
            expect(mockPool.query).toHaveBeenCalledTimes(2);
        });
        it('should throw error if payroll approval not found', async () => {
            // Arrange
            mockPool.query.mockResolvedValueOnce({ rows: [] }); // findById returns empty
            // Act & Assert
            await expect(departmentHeadService.approvePayrollApproval('user-123', 'approval-123', 'approved')).rejects.toThrow('Payroll approval not found');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,