{"file":"/home/kim/tito/server/tests/unit/services/departmentHeadService.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/unit/services/departmentHeadService.test.ts"],"sourcesContent":["import { DepartmentHeadService } from '../../../src/services/department-head/departmentHeadService';\nimport { getPool } from '../../../src/config/database';\n\n// Mock the dependencies\njest.mock('../../../src/models/hr/Employee');\njest.mock('../../../src/models/payroll/PayrollApproval');\njest.mock('../../../src/config/database');\n\nconst mockGetPool = getPool as jest.MockedFunction<typeof getPool>;\n\ndescribe('DepartmentHeadService', () => {\n  let departmentHeadService: DepartmentHeadService;\n  let mockPool: any;\n\n  beforeEach(() => {\n    departmentHeadService = new DepartmentHeadService();\n    jest.clearAllMocks();\n\n    // Mock database pool\n    mockPool = {\n      query: jest.fn()\n    };\n    mockGetPool.mockReturnValue(mockPool);\n  });\n\n  describe('getDashboard', () => {\n    const mockDepartment = {\n      id: 'dept-123',\n      name: 'Engineering',\n      description: 'Software Engineering Department',\n      employee_count: 15\n    };\n\n    const mockPendingRequests = {\n      timeCorrections: 3,\n      overtime: 2,\n      leaves: 5,\n      total: 10\n    };\n\n    const mockRecentActivity = [\n      {\n        type: 'time_correction',\n        employee_name: 'John Doe',\n        date: '2024-01-15',\n        status: 'pending'\n      }\n    ];\n\n    const mockAttendanceSummary = {\n      present_today: 12,\n      absent_today: 2,\n      late_today: 1\n    };\n\n    it('should return department head dashboard successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [mockDepartment] }) // getDepartmentByHead\n        .mockResolvedValueOnce({ rows: [{ ...mockPendingRequests }] }) // getPendingRequestsCount\n        .mockResolvedValueOnce({ rows: mockRecentActivity }) // getRecentActivity\n        .mockResolvedValueOnce({ rows: [{ ...mockAttendanceSummary }] }); // getTodayAttendanceSummary\n\n      // Act\n      const result = await departmentHeadService.getDashboard('user-123');\n\n      // Assert\n      expect(result).toEqual({\n        department: {\n          id: 'dept-123',\n          name: 'Engineering',\n          description: 'Software Engineering Department',\n          employeeCount: 15\n        },\n        pendingRequests: {\n          timeCorrections: 3,\n          overtime: 2,\n          leaves: 5,\n          total: 10\n        },\n        recentActivity: [\n          {\n            type: 'time_correction',\n            employeeName: 'John Doe',\n            date: '2024-01-15',\n            status: 'pending'\n          }\n        ],\n        attendanceSummary: {\n          presentToday: 12,\n          absentToday: 2,\n          lateToday: 1\n        }\n      });\n    });\n\n    it('should throw error if department not found', async () => {\n      // Arrange\n      mockPool.query.mockResolvedValueOnce({ rows: [] });\n\n      // Act & Assert\n      await expect(departmentHeadService.getDashboard('user-123'))\n        .rejects.toThrow('Department not found for user');\n    });\n  });\n\n  describe('getDepartmentEmployees', () => {\n    const mockEmployees = [\n      {\n        id: 'emp-123',\n        employee_id: 'EMP001',\n        user_id: 'user-123',\n        position: 'Software Developer',\n        employment_type: 'regular',\n        hire_date: '2023-01-01',\n        status: 'active',\n        first_name: 'John',\n        last_name: 'Doe',\n        email: 'john.doe@company.com',\n        last_attendance: '2024-01-15'\n      }\n    ];\n\n    it('should return department employees successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead\n        .mockResolvedValueOnce({ rows: mockEmployees }); // getDepartmentEmployees\n\n      // Act\n      const result = await departmentHeadService.getDepartmentEmployees('user-123', {\n        page: 1,\n        limit: 10,\n        search: '',\n        status: 'active'\n      });\n\n      // Assert\n      expect(result.data).toHaveLength(1);\n      expect(result.data[0]).toEqual({\n        id: 'emp-123',\n        employeeId: 'EMP001',\n        user: {\n          id: 'user-123',\n          firstName: 'John',\n          lastName: 'Doe',\n          email: 'john.doe@company.com'\n        },\n        position: 'Software Developer',\n        employmentType: 'regular',\n        hireDate: '2023-01-01',\n        status: 'active',\n        lastAttendance: '2024-01-15'\n      });\n    });\n\n    it('should handle pagination correctly', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] })\n        .mockResolvedValueOnce({ rows: mockEmployees })\n        .mockResolvedValueOnce({ rows: [{ count: '25' }] }); // total count\n\n      // Act\n      const result = await departmentHeadService.getDepartmentEmployees('user-123', {\n        page: 2,\n        limit: 10,\n        search: '',\n        status: 'active'\n      });\n\n      // Assert\n      expect(result.pagination).toEqual({\n        page: 2,\n        limit: 10,\n        total: 25,\n        totalPages: 3\n      });\n    });\n  });\n\n  describe('getEmployeeDetails', () => {\n    const mockEmployeeDetails = {\n      id: 'emp-123',\n      employee_id: 'EMP001',\n      user_id: 'user-123',\n      position: 'Software Developer',\n      employment_type: 'regular',\n      hire_date: '2023-01-01',\n      status: 'active',\n      base_salary: 50000,\n      first_name: 'John',\n      last_name: 'Doe',\n      email: 'john.doe@company.com',\n      department_name: 'Engineering'\n    };\n\n    it('should return employee details successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead\n        .mockResolvedValueOnce({ rows: [mockEmployeeDetails] }); // getEmployeeDetails\n\n      // Act\n      const result = await departmentHeadService.getEmployeeDetails('user-123', 'emp-123');\n\n      // Assert\n      expect(result).toEqual({\n        id: 'emp-123',\n        employeeId: 'EMP001',\n        user: {\n          id: 'user-123',\n          firstName: 'John',\n          lastName: 'Doe',\n          email: 'john.doe@company.com'\n        },\n        position: 'Software Developer',\n        employmentType: 'regular',\n        hireDate: '2023-01-01',\n        status: 'active',\n        baseSalary: 50000,\n        departmentName: 'Engineering'\n      });\n    });\n\n    it('should throw error if employee not found in department', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] })\n        .mockResolvedValueOnce({ rows: [] });\n\n      // Act & Assert\n      await expect(departmentHeadService.getEmployeeDetails('user-123', 'emp-123'))\n        .rejects.toThrow('Employee not found in department');\n    });\n  });\n\n  describe('getPendingRequests', () => {\n    const mockRequests = [\n      {\n        id: 'req-123',\n        type: 'time_correction',\n        employee_name: 'John Doe',\n        date: '2024-01-15',\n        status: 'pending',\n        created_at: '2024-01-15T10:00:00Z'\n      }\n    ];\n\n    it('should return pending requests successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead\n        .mockResolvedValueOnce({ rows: mockRequests }); // getPendingRequests\n\n      // Act\n      const result = await departmentHeadService.getPendingRequests('user-123', {\n        type: 'time_correction',\n        page: 1,\n        limit: 10\n      });\n\n      // Assert\n      expect(result.data).toHaveLength(1);\n      expect(result.data[0]).toEqual({\n        id: 'req-123',\n        type: 'time_correction',\n        employeeName: 'John Doe',\n        date: '2024-01-15',\n        status: 'pending',\n        createdAt: '2024-01-15T10:00:00Z'\n      });\n    });\n  });\n\n  describe('getDepartmentStats', () => {\n    const mockStats = {\n      total_employees: 15,\n      active_employees: 14,\n      inactive_employees: 1,\n      average_attendance: 95.5,\n      total_requests: 25,\n      pending_requests: 5,\n      approved_requests: 18,\n      rejected_requests: 2\n    };\n\n    it('should return department stats successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead\n        .mockResolvedValueOnce({ rows: [mockStats] }); // getDepartmentStats\n\n      // Act\n      const result = await departmentHeadService.getDepartmentStats('user-123', '2024-01');\n\n      // Assert\n      expect(result).toEqual({\n        totalEmployees: 15,\n        activeEmployees: 14,\n        inactiveEmployees: 1,\n        averageAttendance: 95.5,\n        totalRequests: 25,\n        pendingRequests: 5,\n        approvedRequests: 18,\n        rejectedRequests: 2\n      });\n    });\n  });\n\n  describe('getAttendanceSummary', () => {\n    const mockAttendanceSummary = {\n      present_today: 12,\n      absent_today: 2,\n      late_today: 1,\n      total_employees: 15,\n      attendance_rate: 80.0\n    };\n\n    it('should return attendance summary successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead\n        .mockResolvedValueOnce({ rows: [mockAttendanceSummary] }); // getAttendanceSummary\n\n      // Act\n      const result = await departmentHeadService.getAttendanceSummary('user-123', {\n        startDate: '2024-01-15',\n        endDate: '2024-01-15'\n      });\n\n      // Assert\n      expect(result).toEqual({\n        presentToday: 12,\n        absentToday: 2,\n        lateToday: 1,\n        totalEmployees: 15,\n        attendanceRate: 80.0\n      });\n    });\n  });\n\n  describe('getPayrollSummary', () => {\n    const mockPayrollSummary = {\n      total_employees: 15,\n      total_gross_pay: 75000,\n      total_deductions: 15000,\n      total_net_pay: 60000,\n      average_salary: 5000\n    };\n\n    it('should return payroll summary successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead\n        .mockResolvedValueOnce({ rows: [mockPayrollSummary] }); // getPayrollSummary\n\n      // Act\n      const result = await departmentHeadService.getPayrollSummary('user-123', {\n        periodId: 'payroll-123',\n        page: 1,\n        limit: 10\n      });\n\n      // Assert\n      expect(result).toEqual({\n        totalEmployees: 15,\n        totalGrossPay: 75000,\n        totalDeductions: 15000,\n        totalNetPay: 60000,\n        averageSalary: 5000\n      });\n    });\n  });\n\n  describe('approveRequest', () => {\n    it('should approve request successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead\n        .mockResolvedValueOnce({ rows: [{ id: 'req-123', type: 'time_correction' }] }) // getRequest\n        .mockResolvedValueOnce({ rows: [] }); // updateRequest\n\n      // Act\n      await departmentHeadService.approveRequest('user-123', 'req-123');\n\n      // Assert\n      expect(mockPool.query).toHaveBeenCalledTimes(3);\n    });\n\n    it('should throw error if request not found', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] })\n        .mockResolvedValueOnce({ rows: [] });\n\n      // Act & Assert\n      await expect(departmentHeadService.approveRequest('user-123', 'req-123'))\n        .rejects.toThrow('Request not found');\n    });\n  });\n\n  describe('rejectRequest', () => {\n    it('should reject request successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead\n        .mockResolvedValueOnce({ rows: [{ id: 'req-123', type: 'time_correction' }] }) // getRequest\n        .mockResolvedValueOnce({ rows: [] }); // updateRequest\n\n      // Act\n      await departmentHeadService.rejectRequest('user-123', 'req-123', 'Invalid request');\n\n      // Assert\n      expect(mockPool.query).toHaveBeenCalledTimes(3);\n    });\n  });\n\n  describe('getPayrollRecords', () => {\n    const mockPayrollRecords = [\n      {\n        id: 'payroll-123',\n        employee_id: 'emp-123',\n        employee_name: 'John Doe',\n        base_salary: 5000,\n        total_hours: 160,\n        gross_pay: 5000,\n        total_deductions: 1000,\n        net_pay: 4000,\n        status: 'processed'\n      }\n    ];\n\n    it('should return payroll records successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'dept-123' }] }) // getDepartmentByHead\n        .mockResolvedValueOnce({ rows: mockPayrollRecords }); // getPayrollRecords\n\n      // Act\n      const result = await departmentHeadService.getPayrollRecords('user-123', 'period-123');\n\n      // Assert\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual({\n        id: 'payroll-123',\n        employeeId: 'emp-123',\n        employeeName: 'John Doe',\n        baseSalary: 5000,\n        totalHours: 160,\n        grossPay: 5000,\n        totalDeductions: 1000,\n        netPay: 4000,\n        status: 'processed'\n      });\n    });\n  });\n\n  describe('approvePayrollApproval', () => {\n    it('should approve payroll approval successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'approval-123', status: 'pending' }] }) // findById\n        .mockResolvedValueOnce({ rows: [{ id: 'approval-123', status: 'approved' }] }); // updatePayrollApproval\n\n      // Act\n      const result = await departmentHeadService.approvePayrollApproval(\n        'user-123',\n        'approval-123',\n        'approved',\n        'Approved for processing'\n      );\n\n      // Assert\n      expect(result).toBe(true);\n      expect(mockPool.query).toHaveBeenCalledTimes(2);\n    });\n\n    it('should reject payroll approval successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [{ id: 'approval-123', status: 'pending' }] }) // findById\n        .mockResolvedValueOnce({ rows: [{ id: 'approval-123', status: 'rejected' }] }); // updatePayrollApproval\n\n      // Act\n      const result = await departmentHeadService.approvePayrollApproval(\n        'user-123',\n        'approval-123',\n        'rejected',\n        'Rejected due to errors'\n      );\n\n      // Assert\n      expect(result).toBe(true);\n      expect(mockPool.query).toHaveBeenCalledTimes(2);\n    });\n\n    it('should throw error if payroll approval not found', async () => {\n      // Arrange\n      mockPool.query.mockResolvedValueOnce({ rows: [] }); // findById returns empty\n\n      // Act & Assert\n      await expect(departmentHeadService.approvePayrollApproval(\n        'user-123',\n        'approval-123',\n        'approved'\n      )).rejects.toThrow('Payroll approval not found');\n    });\n  });\n});\n"],"version":3}