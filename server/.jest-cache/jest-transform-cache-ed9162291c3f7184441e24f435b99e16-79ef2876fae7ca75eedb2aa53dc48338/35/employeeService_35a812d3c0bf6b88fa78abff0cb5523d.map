{"version":3,"names":["cov_m996mb16v","actualCoverage","database_1","s","require","User_1","Employee_1","Department_1","emailService_1","redisService_1","logger_1","__importDefault","EmployeeService","constructor","f","userModel","UserModel","employeeModel","EmployeeModel","departmentModel","DepartmentModel","createEmployee","data","pool","getPool","client","connect","query","existingUser","findByEmail","email","b","Error","department","findById","departmentId","userData","password","generateTemporaryPassword","first_name","firstName","last_name","lastName","role","user","createUser","employeeData","user_id","id","department_id","position","employment_type","employmentType","hire_date","hireDate","base_salary","baseSalary","employee","setupToken","Math","random","toString","substring","setupTokenKey","redisService","setCache","emailSent","emailService","sendEmployeePasswordSetupEmail","employee_id","default","warn","employeeId","completeEmployee","getEmployeeWithUser","info","userId","error","message","release","getEmployeeWithUserWithClient","result","rows","length","parseFloat","listEmployees","params","page","limit","search","status","sortBy","sortOrder","offset","whereConditions","queryParams","paramIndex","push","whereClause","join","countQuery","countResult","total","parseInt","dataQuery","toUpperCase","employees","map","totalPages","ceil","updateEmployee","currentEmployee","userUpdateData","updateUser","employeeUpdateData","undefined","Object","keys","updatedEmployee","updates","deleteEmployee","is_active","hardDeleteEmployee","deleteUser","getEmployeeStats","deptQuery","statsResult","deptResult","Promise","all","stats","employeesByDepartment","row","departmentName","department_name","count","totalEmployees","activeEmployees","active","inactiveEmployees","inactive","terminatedEmployees","terminated","onLeaveEmployees","on_leave","averageSalary","avg_salary","chars","i","charAt","floor","createBulkEmployees","csvData","results","success","errors","totalProcessed","successCount","errorCount","rowNumber","emailRegex","test","includes","Date","isNaN","getTime","errorMessage","exports"],"sources":["/home/kim/tito/server/src/services/hr/employeeService.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport { UserModel } from '../../models/auth/User';\nimport { EmployeeModel } from '../../models/hr/Employee';\nimport { DepartmentModel } from '../../models/hr/Department';\nimport { emailService } from '../email/emailService';\nimport { redisService } from '../redis/redisService';\nimport logger from '../../utils/logger';\n\nexport interface CreateEmployeeData {\n  email: string;\n  firstName: string;\n  lastName: string;\n  departmentId: string;\n  position: string;\n  employmentType: 'regular' | 'contractual' | 'jo';\n  hireDate: Date;\n  baseSalary: number;\n  password?: string;\n}\n\nexport interface UpdateEmployeeData {\n  firstName?: string;\n  lastName?: string;\n  departmentId?: string;\n  position?: string;\n  employmentType?: 'regular' | 'contractual' | 'jo';\n  hireDate?: string;\n  baseSalary?: number;\n  status?: 'active' | 'inactive' | 'terminated' | 'on_leave';\n}\n\nexport interface EmployeeWithUser {\n  id: string;\n  userId: string;\n  employeeId: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  departmentId: string | null;\n  departmentName: string | null;\n  position: string;\n  employmentType: string;\n  hireDate: Date;\n  baseSalary: number;\n  status: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface EmployeeListParams {\n  page?: number | undefined;\n  limit?: number | undefined;\n  search?: string | undefined;\n  departmentId?: string | undefined;\n  status?: string | undefined;\n  employmentType?: string | undefined;\n  sortBy?: string | undefined;\n  sortOrder?: 'asc' | 'desc' | undefined;\n}\n\nexport class EmployeeService {\n  private userModel: UserModel;\n  private employeeModel: EmployeeModel;\n  private departmentModel: DepartmentModel;\n  constructor() {\n    this.userModel = new UserModel();\n    this.employeeModel = new EmployeeModel();\n    this.departmentModel = new DepartmentModel();\n  }\n\n  /**\n   * Create a new employee with user account\n   */\n  async createEmployee(data: CreateEmployeeData): Promise<EmployeeWithUser> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if email already exists\n      const existingUser = await this.userModel.findByEmail(data.email);\n      if (existingUser) {\n        throw new Error('Email already exists');\n      }\n\n      // Verify department exists\n      const department = await this.departmentModel.findById(data.departmentId);\n      if (!department) {\n        throw new Error('Department not found');\n      }\n\n      // Create user account\n      const userData = {\n        email: data.email,\n        password: data.password || this.generateTemporaryPassword(),\n        first_name: data.firstName,\n        last_name: data.lastName,\n        role: 'employee' as const\n      };\n\n      const user = await this.userModel.createUser(userData);\n\n      // Create employee record\n      const employeeData = {\n        user_id: user.id,\n        department_id: data.departmentId,\n        position: data.position,\n        employment_type: data.employmentType,\n        hire_date: data.hireDate,\n        base_salary: data.baseSalary\n      };\n\n      const employee = await this.employeeModel.createEmployee(employeeData);\n\n      // Generate password setup token\n      const setupToken = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n      const setupTokenKey = `setup_token:${setupToken}`;\n      \n      // Store setup token in cache with user ID as value (expires in 24 hours)\n      await redisService.setCache(setupTokenKey, user.id, 24 * 60 * 60);\n\n      await client.query('COMMIT');\n\n      // Send password setup email\n      const emailSent = await emailService.sendEmployeePasswordSetupEmail(\n        data.email,\n        data.firstName,\n        data.lastName,\n        employee.employee_id,\n        setupToken\n      );\n\n      if (!emailSent) {\n        logger.warn('Failed to send password setup email', {\n          employeeId: employee.id,\n          email: data.email\n        });\n      }\n\n      // Get complete employee data with user info\n      const completeEmployee = await this.getEmployeeWithUser(employee.id);\n\n      logger.info(`Employee created successfully: ${employee.employee_id}`, {\n        employeeId: employee.id,\n        userId: user.id,\n        email: data.email,\n        emailSent\n      });\n\n      return completeEmployee;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to create employee', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get employee with user information using a specific client\n   */\n  private async getEmployeeWithUserWithClient(client: any, employeeId: string): Promise<EmployeeWithUser> {\n    const query = `\n      SELECT \n        e.id,\n        e.user_id as \"userId\",\n        e.employee_id as \"employeeId\",\n        u.email,\n        u.first_name as \"firstName\",\n        u.last_name as \"lastName\",\n        e.department_id as \"departmentId\",\n        d.name as \"departmentName\",\n        e.position,\n        e.employment_type as \"employmentType\",\n        e.hire_date as \"hireDate\",\n        e.base_salary as \"baseSalary\",\n        e.status,\n        u.is_active as \"isActive\",\n        e.created_at as \"createdAt\",\n        e.updated_at as \"updatedAt\"\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.id = $1\n    `;\n\n    const result = await client.query(query, [employeeId]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('Employee not found');\n    }\n\n    const employee = result.rows[0];\n    // Convert numeric fields to numbers\n    employee.baseSalary = parseFloat(employee.baseSalary);\n    \n    return employee;\n  }\n\n  /**\n   * Get employee with user information\n   */\n  async getEmployeeWithUser(employeeId: string): Promise<EmployeeWithUser> {\n    const query = `\n      SELECT \n        e.id,\n        e.user_id as \"userId\",\n        e.employee_id as \"employeeId\",\n        u.email,\n        u.first_name as \"firstName\",\n        u.last_name as \"lastName\",\n        e.department_id as \"departmentId\",\n        d.name as \"departmentName\",\n        e.position,\n        e.employment_type as \"employmentType\",\n        e.hire_date as \"hireDate\",\n        e.base_salary as \"baseSalary\",\n        e.status,\n        u.is_active as \"isActive\",\n        e.created_at as \"createdAt\",\n        e.updated_at as \"updatedAt\"\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.id = $1\n    `;\n\n    const result = await getPool().query(query, [employeeId]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('Employee not found');\n    }\n\n    const employee = result.rows[0];\n    // Convert numeric fields to numbers\n    employee.baseSalary = parseFloat(employee.baseSalary);\n    \n    return employee;\n  }\n\n  /**\n   * List employees with filtering and pagination\n   */\n  async listEmployees(params: EmployeeListParams = {}): Promise<{\n    employees: EmployeeWithUser[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      search,\n      departmentId,\n      status,\n      employmentType,\n      sortBy = 'created_at',\n      sortOrder = 'desc'\n    } = params;\n\n    const offset = (page - 1) * limit;\n\n    // Build WHERE clause\n    const whereConditions: string[] = [];\n    const queryParams: any[] = [];\n    let paramIndex = 1;\n\n    if (search) {\n      whereConditions.push(`(\n        u.first_name ILIKE $${paramIndex} OR \n        u.last_name ILIKE $${paramIndex} OR \n        u.email ILIKE $${paramIndex} OR \n        e.employee_id ILIKE $${paramIndex} OR \n        e.position ILIKE $${paramIndex}\n      )`);\n      queryParams.push(`%${search}%`);\n      paramIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`e.department_id = $${paramIndex}`);\n      queryParams.push(departmentId);\n      paramIndex++;\n    }\n\n    if (status) {\n      whereConditions.push(`e.status = $${paramIndex}`);\n      queryParams.push(status);\n      paramIndex++;\n    }\n\n    if (employmentType) {\n      whereConditions.push(`e.employment_type = $${paramIndex}`);\n      queryParams.push(employmentType);\n      paramIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n    `;\n\n    const countResult = await getPool().query(countQuery, queryParams);\n    const total = parseInt(countResult.rows[0].total);\n\n    // Data query\n    const dataQuery = `\n      SELECT \n        e.id,\n        e.user_id as \"userId\",\n        e.employee_id as \"employeeId\",\n        u.email,\n        u.first_name as \"firstName\",\n        u.last_name as \"lastName\",\n        e.department_id as \"departmentId\",\n        d.name as \"departmentName\",\n        e.position,\n        e.employment_type as \"employmentType\",\n        e.hire_date as \"hireDate\",\n        e.base_salary as \"baseSalary\",\n        e.status,\n        u.is_active as \"isActive\",\n        e.created_at as \"createdAt\",\n        e.updated_at as \"updatedAt\"\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n      ORDER BY e.${sortBy} ${sortOrder.toUpperCase()}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    queryParams.push(limit, offset);\n    const result = await getPool().query(dataQuery, queryParams);\n\n    // Convert numeric fields to numbers for each employee\n    const employees = result.rows.map(employee => ({\n      ...employee,\n      baseSalary: parseFloat(employee.baseSalary)\n    }));\n\n    return {\n      employees,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  /**\n   * Update employee information\n   */\n  async updateEmployee(employeeId: string, data: UpdateEmployeeData): Promise<EmployeeWithUser> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get current employee\n      const currentEmployee = await this.getEmployeeWithUser(employeeId);\n      if (!currentEmployee) {\n        throw new Error('Employee not found');\n      }\n\n      // Update user information if provided\n      if (data.firstName || data.lastName) {\n        const userUpdateData: any = {};\n        if (data.firstName) userUpdateData.first_name = data.firstName;\n        if (data.lastName) userUpdateData.last_name = data.lastName;\n\n        await this.userModel.updateUser(currentEmployee.userId, userUpdateData);\n      }\n\n      // Update employee information\n      const employeeUpdateData: any = {};\n      if (data.departmentId) {\n        // Verify department exists\n        const department = await this.departmentModel.findById(data.departmentId);\n        if (!department) {\n          throw new Error('Department not found');\n        }\n        employeeUpdateData.department_id = data.departmentId;\n      }\n      if (data.position) employeeUpdateData.position = data.position;\n      if (data.employmentType) employeeUpdateData.employment_type = data.employmentType;\n      if (data.hireDate) employeeUpdateData.hire_date = data.hireDate;\n      if (data.baseSalary !== undefined) employeeUpdateData.base_salary = data.baseSalary;\n      if (data.status) employeeUpdateData.status = data.status;\n\n      if (Object.keys(employeeUpdateData).length > 0) {\n        await this.employeeModel.updateEmployee(employeeId, employeeUpdateData);\n      }\n\n      await client.query('COMMIT');\n\n      // Get updated employee data using the same client to ensure we see the committed changes\n      const updatedEmployee = await this.getEmployeeWithUserWithClient(client, employeeId);\n\n      logger.info(`Employee updated successfully: ${currentEmployee.employeeId}`, {\n        employeeId,\n        updates: { ...data }\n      });\n\n      return updatedEmployee;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to update employee', { error: (error as Error).message, employeeId, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Delete employee (soft delete by deactivating user)\n   */\n  async deleteEmployee(employeeId: string): Promise<void> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get employee\n      const employee = await this.getEmployeeWithUser(employeeId);\n      if (!employee) {\n        throw new Error('Employee not found');\n      }\n\n      // Deactivate user account\n      await this.userModel.updateUser(employee.userId, { is_active: false });\n\n      // Update employee status to inactive\n      await this.employeeModel.updateEmployee(employeeId, { status: 'inactive' });\n\n      await client.query('COMMIT');\n\n      logger.info(`Employee deleted successfully: ${employee.employeeId}`, {\n        employeeId,\n        userId: employee.userId\n      });\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to delete employee', { error: (error as Error).message, employeeId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Hard delete employee (permanently remove from database)\n   */\n  async hardDeleteEmployee(employeeId: string): Promise<void> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get employee\n      const employee = await this.getEmployeeWithUser(employeeId);\n      if (!employee) {\n        throw new Error('Employee not found');\n      }\n\n      // Check if employee has any related records that would prevent deletion\n      // For now, we'll allow hard delete but this could be extended to check for:\n      // - Active ID cards\n      // - Time corrections\n      // - Leave requests\n      // - Other related records\n\n      // Hard delete user account first (this will cascade delete the employee due to FK constraint)\n      await this.userModel.deleteUser(employee.userId);\n\n      await client.query('COMMIT');\n\n      logger.info(`Employee hard deleted successfully: ${employee.employeeId}`, {\n        employeeId,\n        userId: employee.userId\n      });\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to hard delete employee', { error: (error as Error).message, employeeId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get employee statistics\n   */\n  async getEmployeeStats(): Promise<{\n    totalEmployees: number;\n    activeEmployees: number;\n    inactiveEmployees: number;\n    terminatedEmployees: number;\n    onLeaveEmployees: number;\n    averageSalary: number;\n    employeesByDepartment: Array<{\n      departmentId: string;\n      departmentName: string;\n      count: number;\n    }>;\n  }> {\n    const query = `\n      SELECT \n        COUNT(*) as total,\n        COUNT(*) FILTER (WHERE e.status = 'active') as active,\n        COUNT(*) FILTER (WHERE e.status = 'inactive') as inactive,\n        COUNT(*) FILTER (WHERE e.status = 'terminated') as terminated,\n        COUNT(*) FILTER (WHERE e.status = 'on_leave') as on_leave,\n        AVG(e.base_salary) as avg_salary\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      WHERE u.is_active = true\n    `;\n\n    const deptQuery = `\n      SELECT \n        d.id as department_id,\n        COALESCE(d.name, 'Unassigned') as department_name,\n        COUNT(*) as count\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE u.is_active = true AND e.status = 'active'\n      GROUP BY d.id, d.name\n      ORDER BY count DESC\n    `;\n\n    const [statsResult, deptResult] = await Promise.all([\n      getPool().query(query),\n      getPool().query(deptQuery)\n    ]);\n\n    const stats = statsResult.rows[0];\n    const employeesByDepartment = deptResult.rows.map(row => ({\n      departmentId: row.department_id || '',\n      departmentName: row.department_name,\n      count: parseInt(row.count)\n    }));\n\n    return {\n      totalEmployees: parseInt(stats.total),\n      activeEmployees: parseInt(stats.active),\n      inactiveEmployees: parseInt(stats.inactive),\n      terminatedEmployees: parseInt(stats.terminated),\n      onLeaveEmployees: parseInt(stats.on_leave),\n      averageSalary: parseFloat(stats.avg_salary) || 0,\n      employeesByDepartment\n    };\n  }\n\n  /**\n   * Generate temporary password for new employees\n   */\n  private generateTemporaryPassword(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let password = '';\n    for (let i = 0; i < 8; i++) {\n      password += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return password;\n  }\n\n  /**\n   * Create multiple employees from CSV data\n   */\n  async createBulkEmployees(csvData: CreateEmployeeData[]): Promise<{\n    success: EmployeeWithUser[];\n    errors: Array<{ row: number; data: CreateEmployeeData; error: string }>;\n    totalProcessed: number;\n    successCount: number;\n    errorCount: number;\n  }> {\n    const results = {\n      success: [] as EmployeeWithUser[],\n      errors: [] as Array<{ row: number; data: CreateEmployeeData; error: string }>,\n      totalProcessed: csvData.length,\n      successCount: 0,\n      errorCount: 0\n    };\n\n    // Process each employee sequentially to handle individual errors\n    for (let i = 0; i < csvData.length; i++) {\n      const employeeData = csvData[i];\n      const rowNumber = i + 1; // 1-based row numbering for user feedback\n\n      try {\n        // Validate required fields\n        if (!employeeData.email || !employeeData.firstName || !employeeData.lastName || \n            !employeeData.departmentId || !employeeData.position || !employeeData.hireDate || \n            !employeeData.baseSalary) {\n          throw new Error('Missing required fields');\n        }\n\n        // Validate email format\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(employeeData.email)) {\n          throw new Error('Invalid email format');\n        }\n\n        // Validate salary is positive\n        if (employeeData.baseSalary <= 0) {\n          throw new Error('Base salary must be greater than 0');\n        }\n\n        // Validate employment type\n        if (!['regular', 'contractual', 'jo'].includes(employeeData.employmentType)) {\n          throw new Error('Invalid employment type. Must be: regular, contractual, or jo');\n        }\n\n        // Validate hire date\n        const hireDate = new Date(employeeData.hireDate);\n        if (isNaN(hireDate.getTime())) {\n          throw new Error('Invalid hire date format');\n        }\n\n        // Create the employee using existing logic\n        const employee = await this.createEmployee(employeeData);\n        results.success.push(employee);\n        results.successCount++;\n\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n        results.errors.push({\n          row: rowNumber,\n          data: employeeData,\n          error: errorMessage\n        });\n        results.errorCount++;\n        \n        logger.error(`Bulk employee creation failed for row ${rowNumber}:`, {\n          error: errorMessage,\n          data: employeeData\n        });\n      }\n    }\n\n    logger.info(`Bulk employee creation completed: ${results.successCount} successful, ${results.errorCount} failed`);\n    return results;\n  }\n}"],"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","ignoreList":[]}