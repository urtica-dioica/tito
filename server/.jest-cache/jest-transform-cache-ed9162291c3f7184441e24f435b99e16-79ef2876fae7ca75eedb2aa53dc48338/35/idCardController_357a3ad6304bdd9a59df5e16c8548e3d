fd9d20466fabee39c6caa7cf6cfe7a28
"use strict";

/* istanbul ignore next */
function cov_1223h7n79p() {
  var path = "/home/kim/tito/server/src/controllers/hr/idCardController.ts";
  var hash = "78f8d5f6908ee06e52bc0bf1ae7510de0760239c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/hr/idCardController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "4": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 7,
          column: 66
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "6": {
        start: {
          line: 9,
          column: 18
        },
        end: {
          line: 9,
          column: 54
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 49,
          column: 10
        }
      },
      "8": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "9": {
        start: {
          line: 17,
          column: 34
        },
        end: {
          line: 17,
          column: 66
        }
      },
      "10": {
        start: {
          line: 18,
          column: 29
        },
        end: {
          line: 18,
          column: 37
        }
      },
      "11": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 27,
          column: 17
        }
      },
      "12": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 25,
          column: 23
        }
      },
      "13": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 27
        }
      },
      "14": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 31,
          column: 17
        }
      },
      "15": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 30,
          column: 52
        }
      },
      "16": {
        start: {
          line: 32,
          column: 31
        },
        end: {
          line: 32,
          column: 74
        }
      },
      "17": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 38,
          column: 19
        }
      },
      "18": {
        start: {
          line: 41,
          column: 34
        },
        end: {
          line: 41,
          column: 66
        }
      },
      "19": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 104
        }
      },
      "20": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 47,
          column: 19
        }
      },
      "21": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 83,
          column: 10
        }
      },
      "22": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "23": {
        start: {
          line: 55,
          column: 34
        },
        end: {
          line: 55,
          column: 66
        }
      },
      "24": {
        start: {
          line: 56,
          column: 31
        },
        end: {
          line: 56,
          column: 41
        }
      },
      "25": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 64,
          column: 17
        }
      },
      "26": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 62,
          column: 23
        }
      },
      "27": {
        start: {
          line: 63,
          column: 20
        },
        end: {
          line: 63,
          column: 27
        }
      },
      "28": {
        start: {
          line: 65,
          column: 31
        },
        end: {
          line: 65,
          column: 80
        }
      },
      "29": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 71,
          column: 19
        }
      },
      "30": {
        start: {
          line: 74,
          column: 34
        },
        end: {
          line: 74,
          column: 66
        }
      },
      "31": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 101
        }
      },
      "32": {
        start: {
          line: 76,
          column: 35
        },
        end: {
          line: 76,
          column: 84
        }
      },
      "33": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 81,
          column: 19
        }
      },
      "34": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 123,
          column: 10
        }
      },
      "35": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "36": {
        start: {
          line: 89,
          column: 34
        },
        end: {
          line: 89,
          column: 66
        }
      },
      "37": {
        start: {
          line: 90,
          column: 31
        },
        end: {
          line: 99,
          column: 17
        }
      },
      "38": {
        start: {
          line: 100,
          column: 31
        },
        end: {
          line: 100,
          column: 75
        }
      },
      "39": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 112,
          column: 19
        }
      },
      "40": {
        start: {
          line: 115,
          column: 34
        },
        end: {
          line: 115,
          column: 66
        }
      },
      "41": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 103
        }
      },
      "42": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 121,
          column: 19
        }
      },
      "43": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 156,
          column: 10
        }
      },
      "44": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 155,
          column: 13
        }
      },
      "45": {
        start: {
          line: 129,
          column: 34
        },
        end: {
          line: 129,
          column: 66
        }
      },
      "46": {
        start: {
          line: 130,
          column: 31
        },
        end: {
          line: 130,
          column: 41
        }
      },
      "47": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 138,
          column: 17
        }
      },
      "48": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 136,
          column: 23
        }
      },
      "49": {
        start: {
          line: 137,
          column: 20
        },
        end: {
          line: 137,
          column: 27
        }
      },
      "50": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 62
        }
      },
      "51": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 144,
          column: 19
        }
      },
      "52": {
        start: {
          line: 147,
          column: 34
        },
        end: {
          line: 147,
          column: 66
        }
      },
      "53": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 108
        }
      },
      "54": {
        start: {
          line: 149,
          column: 35
        },
        end: {
          line: 149,
          column: 84
        }
      },
      "55": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 154,
          column: 19
        }
      },
      "56": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 189,
          column: 10
        }
      },
      "57": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 188,
          column: 13
        }
      },
      "58": {
        start: {
          line: 162,
          column: 34
        },
        end: {
          line: 162,
          column: 66
        }
      },
      "59": {
        start: {
          line: 163,
          column: 41
        },
        end: {
          line: 163,
          column: 51
        }
      },
      "60": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 171,
          column: 17
        }
      },
      "61": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 169,
          column: 23
        }
      },
      "62": {
        start: {
          line: 170,
          column: 20
        },
        end: {
          line: 170,
          column: 27
        }
      },
      "63": {
        start: {
          line: 172,
          column: 31
        },
        end: {
          line: 172,
          column: 95
        }
      },
      "64": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 178,
          column: 19
        }
      },
      "65": {
        start: {
          line: 181,
          column: 34
        },
        end: {
          line: 181,
          column: 66
        }
      },
      "66": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 118
        }
      },
      "67": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 187,
          column: 19
        }
      },
      "68": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 213,
          column: 10
        }
      },
      "69": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 212,
          column: 13
        }
      },
      "70": {
        start: {
          line: 195,
          column: 34
        },
        end: {
          line: 195,
          column: 66
        }
      },
      "71": {
        start: {
          line: 196,
          column: 30
        },
        end: {
          line: 196,
          column: 71
        }
      },
      "72": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 202,
          column: 19
        }
      },
      "73": {
        start: {
          line: 205,
          column: 34
        },
        end: {
          line: 205,
          column: 66
        }
      },
      "74": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 112
        }
      },
      "75": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 211,
          column: 19
        }
      },
      "76": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 247,
          column: 10
        }
      },
      "77": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 246,
          column: 13
        }
      },
      "78": {
        start: {
          line: 219,
          column: 34
        },
        end: {
          line: 219,
          column: 66
        }
      },
      "79": {
        start: {
          line: 220,
          column: 31
        },
        end: {
          line: 220,
          column: 41
        }
      },
      "80": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 228,
          column: 17
        }
      },
      "81": {
        start: {
          line: 222,
          column: 20
        },
        end: {
          line: 226,
          column: 23
        }
      },
      "82": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 227,
          column: 27
        }
      },
      "83": {
        start: {
          line: 229,
          column: 35
        },
        end: {
          line: 229,
          column: 77
        }
      },
      "84": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 235,
          column: 19
        }
      },
      "85": {
        start: {
          line: 238,
          column: 34
        },
        end: {
          line: 238,
          column: 66
        }
      },
      "86": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 106
        }
      },
      "87": {
        start: {
          line: 240,
          column: 35
        },
        end: {
          line: 240,
          column: 84
        }
      },
      "88": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 245,
          column: 19
        }
      },
      "89": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 65
        }
      },
      "90": {
        start: {
          line: 251,
          column: 0
        },
        end: {
          line: 251,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 15,
            column: 29
          }
        },
        loc: {
          start: {
            line: 15,
            column: 48
          },
          end: {
            line: 49,
            column: 9
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 53,
            column: 25
          },
          end: {
            line: 53,
            column: 26
          }
        },
        loc: {
          start: {
            line: 53,
            column: 45
          },
          end: {
            line: 83,
            column: 9
          }
        },
        line: 53
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 87,
            column: 27
          },
          end: {
            line: 87,
            column: 28
          }
        },
        loc: {
          start: {
            line: 87,
            column: 47
          },
          end: {
            line: 123,
            column: 9
          }
        },
        line: 87
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 127,
            column: 32
          },
          end: {
            line: 127,
            column: 33
          }
        },
        loc: {
          start: {
            line: 127,
            column: 52
          },
          end: {
            line: 156,
            column: 9
          }
        },
        line: 127
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 160,
            column: 41
          },
          end: {
            line: 160,
            column: 42
          }
        },
        loc: {
          start: {
            line: 160,
            column: 61
          },
          end: {
            line: 189,
            column: 9
          }
        },
        line: 160
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 193,
            column: 30
          },
          end: {
            line: 193,
            column: 31
          }
        },
        loc: {
          start: {
            line: 193,
            column: 50
          },
          end: {
            line: 213,
            column: 9
          }
        },
        line: 193
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 217,
            column: 29
          },
          end: {
            line: 217,
            column: 30
          }
        },
        loc: {
          start: {
            line: 217,
            column: 49
          },
          end: {
            line: 247,
            column: 9
          }
        },
        line: 217
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 27,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 27,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 31,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 31,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "5": {
        loc: {
          start: {
            line: 45,
            column: 29
          },
          end: {
            line: 45,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 29
          },
          end: {
            line: 45,
            column: 42
          }
        }, {
          start: {
            line: 45,
            column: 46
          },
          end: {
            line: 45,
            column: 72
          }
        }],
        line: 45
      },
      "6": {
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 64,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 64,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "7": {
        loc: {
          start: {
            line: 76,
            column: 35
          },
          end: {
            line: 76,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 76,
            column: 75
          },
          end: {
            line: 76,
            column: 78
          }
        }, {
          start: {
            line: 76,
            column: 81
          },
          end: {
            line: 76,
            column: 84
          }
        }],
        line: 76
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 29
          },
          end: {
            line: 79,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 29
          },
          end: {
            line: 79,
            column: 42
          }
        }, {
          start: {
            line: 79,
            column: 46
          },
          end: {
            line: 79,
            column: 69
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 91,
            column: 26
          },
          end: {
            line: 91,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 91,
            column: 46
          },
          end: {
            line: 91,
            column: 73
          }
        }, {
          start: {
            line: 91,
            column: 76
          },
          end: {
            line: 91,
            column: 85
          }
        }],
        line: 91
      },
      "10": {
        loc: {
          start: {
            line: 92,
            column: 27
          },
          end: {
            line: 92,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 92,
            column: 48
          },
          end: {
            line: 92,
            column: 76
          }
        }, {
          start: {
            line: 92,
            column: 79
          },
          end: {
            line: 92,
            column: 88
          }
        }],
        line: 92
      },
      "11": {
        loc: {
          start: {
            line: 95,
            column: 30
          },
          end: {
            line: 95,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 95,
            column: 54
          },
          end: {
            line: 95,
            column: 86
          }
        }, {
          start: {
            line: 95,
            column: 89
          },
          end: {
            line: 95,
            column: 98
          }
        }],
        line: 95
      },
      "12": {
        loc: {
          start: {
            line: 96,
            column: 31
          },
          end: {
            line: 96,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 56
          },
          end: {
            line: 96,
            column: 89
          }
        }, {
          start: {
            line: 96,
            column: 92
          },
          end: {
            line: 96,
            column: 101
          }
        }],
        line: 96
      },
      "13": {
        loc: {
          start: {
            line: 119,
            column: 29
          },
          end: {
            line: 119,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 29
          },
          end: {
            line: 119,
            column: 42
          }
        }, {
          start: {
            line: 119,
            column: 46
          },
          end: {
            line: 119,
            column: 71
          }
        }],
        line: 119
      },
      "14": {
        loc: {
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "15": {
        loc: {
          start: {
            line: 149,
            column: 35
          },
          end: {
            line: 149,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 75
          },
          end: {
            line: 149,
            column: 78
          }
        }, {
          start: {
            line: 149,
            column: 81
          },
          end: {
            line: 149,
            column: 84
          }
        }],
        line: 149
      },
      "16": {
        loc: {
          start: {
            line: 152,
            column: 29
          },
          end: {
            line: 152,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 29
          },
          end: {
            line: 152,
            column: 42
          }
        }, {
          start: {
            line: 152,
            column: 46
          },
          end: {
            line: 152,
            column: 76
          }
        }],
        line: 152
      },
      "17": {
        loc: {
          start: {
            line: 164,
            column: 16
          },
          end: {
            line: 171,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 16
          },
          end: {
            line: 171,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "18": {
        loc: {
          start: {
            line: 185,
            column: 29
          },
          end: {
            line: 185,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 29
          },
          end: {
            line: 185,
            column: 42
          }
        }, {
          start: {
            line: 185,
            column: 46
          },
          end: {
            line: 185,
            column: 86
          }
        }],
        line: 185
      },
      "19": {
        loc: {
          start: {
            line: 209,
            column: 29
          },
          end: {
            line: 209,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 29
          },
          end: {
            line: 209,
            column: 42
          }
        }, {
          start: {
            line: 209,
            column: 46
          },
          end: {
            line: 209,
            column: 80
          }
        }],
        line: 209
      },
      "20": {
        loc: {
          start: {
            line: 221,
            column: 16
          },
          end: {
            line: 228,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 16
          },
          end: {
            line: 228,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "21": {
        loc: {
          start: {
            line: 240,
            column: 35
          },
          end: {
            line: 240,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 240,
            column: 75
          },
          end: {
            line: 240,
            column: 78
          }
        }, {
          start: {
            line: 240,
            column: 81
          },
          end: {
            line: 240,
            column: 84
          }
        }],
        line: 240
      },
      "22": {
        loc: {
          start: {
            line: 243,
            column: 29
          },
          end: {
            line: 243,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 29
          },
          end: {
            line: 243,
            column: 42
          }
        }, {
          start: {
            line: 243,
            column: 46
          },
          end: {
            line: 243,
            column: 74
          }
        }],
        line: 243
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/hr/idCardController.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/hr/idCardController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { IdCardService, CreateIdCardData, IdCardListParams } from '../../services/hr/idCardService';\nimport logger from '../../utils/logger';\nimport { getRequestId } from '../../utils/types/express';\n\nexport class IdCardController {\n  private idCardService: IdCardService;\n\n  constructor() {\n    this.idCardService = new IdCardService();\n  }\n\n  /**\n   * Create ID card for employee\n   */\n  createIdCard = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const data: CreateIdCardData = req.body;\n\n      // Validate required fields\n      if (!data.employeeId) {\n        res.status(400).json({\n          success: false,\n          message: 'Employee ID is required',\n          requestId\n        });\n        return;\n      }\n\n      // Add current user ID as issuedBy\n      if (req.user?.userId) {\n        data.issuedBy = req.user.userId;\n      }\n\n      const idCard = await this.idCardService.createIdCard(data);\n\n      res.status(201).json({\n        success: true,\n        message: 'ID card created successfully',\n        data: idCard,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to create ID card', { error: (error as Error).message, requestId });\n      \n      res.status(400).json({\n        success: false,\n        message: (error as Error).message || 'Failed to create ID card',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Get ID card by ID\n   */\n  getIdCard = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const { id } = req.params;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'ID card ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const idCard = await this.idCardService.getIdCardWithDetails(id);\n\n      res.status(200).json({\n        success: true,\n        message: 'ID card retrieved successfully',\n        data: idCard,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to get ID card', { error: (error as Error).message, requestId });\n      \n      const statusCode = (error as Error).message === 'ID card not found' ? 404 : 400;\n      res.status(statusCode).json({\n        success: false,\n        message: (error as Error).message || 'Failed to get ID card',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * List ID cards with filtering and pagination\n   */\n  listIdCards = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const params: IdCardListParams = {\n        page: req.query[\"page\"] ? parseInt(req.query[\"page\"] as string) : undefined,\n        limit: req.query[\"limit\"] ? parseInt(req.query[\"limit\"] as string) : undefined,\n        search: req.query[\"search\"] as string,\n        departmentId: req.query[\"departmentId\"] as string,\n        isActive: req.query[\"isActive\"] ? req.query[\"isActive\"] === 'true' : undefined,\n        isExpired: req.query[\"isExpired\"] ? req.query[\"isExpired\"] === 'true' : undefined,\n        sortBy: req.query[\"sortBy\"] as string,\n        sortOrder: req.query[\"sortOrder\"] as 'asc' | 'desc'\n      };\n\n      const result = await this.idCardService.listIdCards(params);\n\n      res.status(200).json({\n        success: true,\n        message: 'ID cards retrieved successfully',\n        data: result.idCards,\n        pagination: {\n          total: result.total,\n          page: result.page,\n          limit: result.limit,\n          totalPages: result.totalPages\n        },\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to list ID cards', { error: (error as Error).message, requestId });\n      \n      res.status(400).json({\n        success: false,\n        message: (error as Error).message || 'Failed to list ID cards',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Deactivate ID card\n   */\n  deactivateIdCard = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const { id } = req.params;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'ID card ID is required',\n          requestId\n        });\n        return;\n      }\n\n      await this.idCardService.deactivateIdCard(id);\n\n      res.status(200).json({\n        success: true,\n        message: 'ID card deactivated successfully',\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to deactivate ID card', { error: (error as Error).message, requestId });\n      \n      const statusCode = (error as Error).message === 'ID card not found' ? 404 : 400;\n      res.status(statusCode).json({\n        success: false,\n        message: (error as Error).message || 'Failed to deactivate ID card',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Generate ID cards for all employees in a department\n   */\n  generateDepartmentIdCards = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const { departmentId } = req.params;\n\n      if (!departmentId) {\n        res.status(400).json({\n          success: false,\n          message: 'Department ID is required',\n          requestId\n        });\n        return;\n      }\n\n\n      const result = await this.idCardService.generateDepartmentIdCards(departmentId);\n\n      res.status(200).json({\n        success: true,\n        message: 'Department ID cards generation completed',\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to generate department ID cards', { error: (error as Error).message, requestId });\n      \n      res.status(400).json({\n        success: false,\n        message: (error as Error).message || 'Failed to generate department ID cards',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Get ID card statistics\n   */\n  getIdCardStats = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n\n      const stats = await this.idCardService.getIdCardStats();\n\n      res.status(200).json({\n        success: true,\n        message: 'ID card statistics retrieved successfully',\n        data: stats,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to get ID card statistics', { error: (error as Error).message, requestId });\n      \n      res.status(400).json({\n        success: false,\n        message: (error as Error).message || 'Failed to get ID card statistics',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Get QR code data for ID card\n   */\n  getQrCodeData = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const { id } = req.params;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'ID card ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const qrCodeData = await this.idCardService.getQrCodeData(id);\n\n      res.status(200).json({\n        success: true,\n        message: 'QR code data retrieved successfully',\n        data: qrCodeData,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to get QR code data', { error: (error as Error).message, requestId });\n      \n      const statusCode = (error as Error).message === 'ID card not found' ? 404 : 400;\n      res.status(statusCode).json({\n        success: false,\n        message: (error as Error).message || 'Failed to get QR code data',\n        requestId\n      });\n    }\n  };\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "78f8d5f6908ee06e52bc0bf1ae7510de0760239c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1223h7n79p = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1223h7n79p();
var __importDefault =
/* istanbul ignore next */
(cov_1223h7n79p().s[0]++,
/* istanbul ignore next */
(cov_1223h7n79p().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1223h7n79p().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1223h7n79p().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1223h7n79p().f[0]++;
  cov_1223h7n79p().s[1]++;
  return /* istanbul ignore next */(cov_1223h7n79p().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1223h7n79p().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1223h7n79p().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1223h7n79p().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1223h7n79p().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1223h7n79p().s[3]++;
exports.IdCardController = void 0;
const idCardService_1 =
/* istanbul ignore next */
(cov_1223h7n79p().s[4]++, require("../../services/hr/idCardService"));
const logger_1 =
/* istanbul ignore next */
(cov_1223h7n79p().s[5]++, __importDefault(require("../../utils/logger")));
const express_1 =
/* istanbul ignore next */
(cov_1223h7n79p().s[6]++, require("../../utils/types/express"));
class IdCardController {
  constructor() {
    /* istanbul ignore next */
    cov_1223h7n79p().f[1]++;
    cov_1223h7n79p().s[7]++;
    /**
     * Create ID card for employee
     */
    this.createIdCard = async (req, res) => {
      /* istanbul ignore next */
      cov_1223h7n79p().f[2]++;
      cov_1223h7n79p().s[8]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[9]++, (0, express_1.getRequestId)(req));
        const data =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[10]++, req.body);
        // Validate required fields
        /* istanbul ignore next */
        cov_1223h7n79p().s[11]++;
        if (!data.employeeId) {
          /* istanbul ignore next */
          cov_1223h7n79p().b[3][0]++;
          cov_1223h7n79p().s[12]++;
          res.status(400).json({
            success: false,
            message: 'Employee ID is required',
            requestId
          });
          /* istanbul ignore next */
          cov_1223h7n79p().s[13]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1223h7n79p().b[3][1]++;
        }
        // Add current user ID as issuedBy
        cov_1223h7n79p().s[14]++;
        if (req.user?.userId) {
          /* istanbul ignore next */
          cov_1223h7n79p().b[4][0]++;
          cov_1223h7n79p().s[15]++;
          data.issuedBy = req.user.userId;
        } else
        /* istanbul ignore next */
        {
          cov_1223h7n79p().b[4][1]++;
        }
        const idCard =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[16]++, await this.idCardService.createIdCard(data));
        /* istanbul ignore next */
        cov_1223h7n79p().s[17]++;
        res.status(201).json({
          success: true,
          message: 'ID card created successfully',
          data: idCard,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[18]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1223h7n79p().s[19]++;
        logger_1.default.error('Failed to create ID card', {
          error: error.message,
          requestId
        });
        /* istanbul ignore next */
        cov_1223h7n79p().s[20]++;
        res.status(400).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1223h7n79p().b[5][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1223h7n79p().b[5][1]++, 'Failed to create ID card'),
          requestId
        });
      }
    };
    /**
     * Get ID card by ID
     */
    /* istanbul ignore next */
    cov_1223h7n79p().s[21]++;
    this.getIdCard = async (req, res) => {
      /* istanbul ignore next */
      cov_1223h7n79p().f[3]++;
      cov_1223h7n79p().s[22]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[23]++, (0, express_1.getRequestId)(req));
        const {
          id
        } =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[24]++, req.params);
        /* istanbul ignore next */
        cov_1223h7n79p().s[25]++;
        if (!id) {
          /* istanbul ignore next */
          cov_1223h7n79p().b[6][0]++;
          cov_1223h7n79p().s[26]++;
          res.status(400).json({
            success: false,
            message: 'ID card ID is required',
            requestId
          });
          /* istanbul ignore next */
          cov_1223h7n79p().s[27]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1223h7n79p().b[6][1]++;
        }
        const idCard =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[28]++, await this.idCardService.getIdCardWithDetails(id));
        /* istanbul ignore next */
        cov_1223h7n79p().s[29]++;
        res.status(200).json({
          success: true,
          message: 'ID card retrieved successfully',
          data: idCard,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[30]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1223h7n79p().s[31]++;
        logger_1.default.error('Failed to get ID card', {
          error: error.message,
          requestId
        });
        const statusCode =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[32]++, error.message === 'ID card not found' ?
        /* istanbul ignore next */
        (cov_1223h7n79p().b[7][0]++, 404) :
        /* istanbul ignore next */
        (cov_1223h7n79p().b[7][1]++, 400));
        /* istanbul ignore next */
        cov_1223h7n79p().s[33]++;
        res.status(statusCode).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1223h7n79p().b[8][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1223h7n79p().b[8][1]++, 'Failed to get ID card'),
          requestId
        });
      }
    };
    /**
     * List ID cards with filtering and pagination
     */
    /* istanbul ignore next */
    cov_1223h7n79p().s[34]++;
    this.listIdCards = async (req, res) => {
      /* istanbul ignore next */
      cov_1223h7n79p().f[4]++;
      cov_1223h7n79p().s[35]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[36]++, (0, express_1.getRequestId)(req));
        const params =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[37]++, {
          page: req.query["page"] ?
          /* istanbul ignore next */
          (cov_1223h7n79p().b[9][0]++, parseInt(req.query["page"])) :
          /* istanbul ignore next */
          (cov_1223h7n79p().b[9][1]++, undefined),
          limit: req.query["limit"] ?
          /* istanbul ignore next */
          (cov_1223h7n79p().b[10][0]++, parseInt(req.query["limit"])) :
          /* istanbul ignore next */
          (cov_1223h7n79p().b[10][1]++, undefined),
          search: req.query["search"],
          departmentId: req.query["departmentId"],
          isActive: req.query["isActive"] ?
          /* istanbul ignore next */
          (cov_1223h7n79p().b[11][0]++, req.query["isActive"] === 'true') :
          /* istanbul ignore next */
          (cov_1223h7n79p().b[11][1]++, undefined),
          isExpired: req.query["isExpired"] ?
          /* istanbul ignore next */
          (cov_1223h7n79p().b[12][0]++, req.query["isExpired"] === 'true') :
          /* istanbul ignore next */
          (cov_1223h7n79p().b[12][1]++, undefined),
          sortBy: req.query["sortBy"],
          sortOrder: req.query["sortOrder"]
        });
        const result =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[38]++, await this.idCardService.listIdCards(params));
        /* istanbul ignore next */
        cov_1223h7n79p().s[39]++;
        res.status(200).json({
          success: true,
          message: 'ID cards retrieved successfully',
          data: result.idCards,
          pagination: {
            total: result.total,
            page: result.page,
            limit: result.limit,
            totalPages: result.totalPages
          },
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[40]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1223h7n79p().s[41]++;
        logger_1.default.error('Failed to list ID cards', {
          error: error.message,
          requestId
        });
        /* istanbul ignore next */
        cov_1223h7n79p().s[42]++;
        res.status(400).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1223h7n79p().b[13][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1223h7n79p().b[13][1]++, 'Failed to list ID cards'),
          requestId
        });
      }
    };
    /**
     * Deactivate ID card
     */
    /* istanbul ignore next */
    cov_1223h7n79p().s[43]++;
    this.deactivateIdCard = async (req, res) => {
      /* istanbul ignore next */
      cov_1223h7n79p().f[5]++;
      cov_1223h7n79p().s[44]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[45]++, (0, express_1.getRequestId)(req));
        const {
          id
        } =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[46]++, req.params);
        /* istanbul ignore next */
        cov_1223h7n79p().s[47]++;
        if (!id) {
          /* istanbul ignore next */
          cov_1223h7n79p().b[14][0]++;
          cov_1223h7n79p().s[48]++;
          res.status(400).json({
            success: false,
            message: 'ID card ID is required',
            requestId
          });
          /* istanbul ignore next */
          cov_1223h7n79p().s[49]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1223h7n79p().b[14][1]++;
        }
        cov_1223h7n79p().s[50]++;
        await this.idCardService.deactivateIdCard(id);
        /* istanbul ignore next */
        cov_1223h7n79p().s[51]++;
        res.status(200).json({
          success: true,
          message: 'ID card deactivated successfully',
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[52]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1223h7n79p().s[53]++;
        logger_1.default.error('Failed to deactivate ID card', {
          error: error.message,
          requestId
        });
        const statusCode =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[54]++, error.message === 'ID card not found' ?
        /* istanbul ignore next */
        (cov_1223h7n79p().b[15][0]++, 404) :
        /* istanbul ignore next */
        (cov_1223h7n79p().b[15][1]++, 400));
        /* istanbul ignore next */
        cov_1223h7n79p().s[55]++;
        res.status(statusCode).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1223h7n79p().b[16][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1223h7n79p().b[16][1]++, 'Failed to deactivate ID card'),
          requestId
        });
      }
    };
    /**
     * Generate ID cards for all employees in a department
     */
    /* istanbul ignore next */
    cov_1223h7n79p().s[56]++;
    this.generateDepartmentIdCards = async (req, res) => {
      /* istanbul ignore next */
      cov_1223h7n79p().f[6]++;
      cov_1223h7n79p().s[57]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[58]++, (0, express_1.getRequestId)(req));
        const {
          departmentId
        } =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[59]++, req.params);
        /* istanbul ignore next */
        cov_1223h7n79p().s[60]++;
        if (!departmentId) {
          /* istanbul ignore next */
          cov_1223h7n79p().b[17][0]++;
          cov_1223h7n79p().s[61]++;
          res.status(400).json({
            success: false,
            message: 'Department ID is required',
            requestId
          });
          /* istanbul ignore next */
          cov_1223h7n79p().s[62]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1223h7n79p().b[17][1]++;
        }
        const result =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[63]++, await this.idCardService.generateDepartmentIdCards(departmentId));
        /* istanbul ignore next */
        cov_1223h7n79p().s[64]++;
        res.status(200).json({
          success: true,
          message: 'Department ID cards generation completed',
          data: result,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[65]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1223h7n79p().s[66]++;
        logger_1.default.error('Failed to generate department ID cards', {
          error: error.message,
          requestId
        });
        /* istanbul ignore next */
        cov_1223h7n79p().s[67]++;
        res.status(400).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1223h7n79p().b[18][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1223h7n79p().b[18][1]++, 'Failed to generate department ID cards'),
          requestId
        });
      }
    };
    /**
     * Get ID card statistics
     */
    /* istanbul ignore next */
    cov_1223h7n79p().s[68]++;
    this.getIdCardStats = async (req, res) => {
      /* istanbul ignore next */
      cov_1223h7n79p().f[7]++;
      cov_1223h7n79p().s[69]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[70]++, (0, express_1.getRequestId)(req));
        const stats =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[71]++, await this.idCardService.getIdCardStats());
        /* istanbul ignore next */
        cov_1223h7n79p().s[72]++;
        res.status(200).json({
          success: true,
          message: 'ID card statistics retrieved successfully',
          data: stats,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[73]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1223h7n79p().s[74]++;
        logger_1.default.error('Failed to get ID card statistics', {
          error: error.message,
          requestId
        });
        /* istanbul ignore next */
        cov_1223h7n79p().s[75]++;
        res.status(400).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1223h7n79p().b[19][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1223h7n79p().b[19][1]++, 'Failed to get ID card statistics'),
          requestId
        });
      }
    };
    /**
     * Get QR code data for ID card
     */
    /* istanbul ignore next */
    cov_1223h7n79p().s[76]++;
    this.getQrCodeData = async (req, res) => {
      /* istanbul ignore next */
      cov_1223h7n79p().f[8]++;
      cov_1223h7n79p().s[77]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[78]++, (0, express_1.getRequestId)(req));
        const {
          id
        } =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[79]++, req.params);
        /* istanbul ignore next */
        cov_1223h7n79p().s[80]++;
        if (!id) {
          /* istanbul ignore next */
          cov_1223h7n79p().b[20][0]++;
          cov_1223h7n79p().s[81]++;
          res.status(400).json({
            success: false,
            message: 'ID card ID is required',
            requestId
          });
          /* istanbul ignore next */
          cov_1223h7n79p().s[82]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1223h7n79p().b[20][1]++;
        }
        const qrCodeData =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[83]++, await this.idCardService.getQrCodeData(id));
        /* istanbul ignore next */
        cov_1223h7n79p().s[84]++;
        res.status(200).json({
          success: true,
          message: 'QR code data retrieved successfully',
          data: qrCodeData,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[85]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1223h7n79p().s[86]++;
        logger_1.default.error('Failed to get QR code data', {
          error: error.message,
          requestId
        });
        const statusCode =
        /* istanbul ignore next */
        (cov_1223h7n79p().s[87]++, error.message === 'ID card not found' ?
        /* istanbul ignore next */
        (cov_1223h7n79p().b[21][0]++, 404) :
        /* istanbul ignore next */
        (cov_1223h7n79p().b[21][1]++, 400));
        /* istanbul ignore next */
        cov_1223h7n79p().s[88]++;
        res.status(statusCode).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1223h7n79p().b[22][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1223h7n79p().b[22][1]++, 'Failed to get QR code data'),
          requestId
        });
      }
    };
    /* istanbul ignore next */
    cov_1223h7n79p().s[89]++;
    this.idCardService = new idCardService_1.IdCardService();
  }
}
/* istanbul ignore next */
cov_1223h7n79p().s[90]++;
exports.IdCardController = IdCardController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,