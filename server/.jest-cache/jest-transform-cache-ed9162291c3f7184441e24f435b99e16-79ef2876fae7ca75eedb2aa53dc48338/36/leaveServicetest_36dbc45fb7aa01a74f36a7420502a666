2a22578aafca90591a76ffc80d515fb1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the models
jest.mock('../../../src/models/leave/Leave');
jest.mock('../../../src/models/leave/LeaveBalance');
jest.mock('../../../src/models/hr/Employee');
const leaveService_1 = require("../../../src/services/leave/leaveService");
const Leave_1 = require("../../../src/models/leave/Leave");
const LeaveBalance_1 = require("../../../src/models/leave/LeaveBalance");
const Employee_1 = require("../../../src/models/hr/Employee");
const mockLeaveModel = Leave_1.leaveModel;
const mockLeaveBalanceModel = LeaveBalance_1.leaveBalanceModel;
const mockEmployeeModel = Employee_1.employeeModel;
describe('LeaveService', () => {
    let leaveService;
    // Shared mock data
    const validLeaveData = {
        employeeId: 'emp-123',
        leaveType: 'vacation',
        startDate: new Date('2025-12-15'),
        endDate: new Date('2025-12-17'),
        reason: 'Family vacation'
    };
    const mockEmployee = {
        id: 'emp-123',
        user_id: 'user-123',
        employee_id: 'EMP001',
        position: 'Software Developer',
        department_id: 'dept-123',
        employment_type: 'regular',
        hire_date: new Date('2023-01-01'),
        base_salary: 50000,
        status: 'active',
        created_at: new Date(),
        updated_at: new Date()
    };
    const mockLeave = {
        id: 'leave-123',
        employeeId: 'emp-123',
        leaveType: 'vacation',
        startDate: new Date('2025-12-15'),
        endDate: new Date('2025-12-17'),
        totalDays: 3,
        reason: 'Family vacation',
        status: 'pending',
        approvedBy: null,
        createdAt: new Date(),
        updatedAt: new Date()
    };
    beforeEach(() => {
        leaveService = new leaveService_1.LeaveService();
        jest.clearAllMocks();
    });
    describe('createLeaveRequest', () => {
        it('should create a leave request successfully', async () => {
            // Arrange
            mockEmployeeModel.findById.mockResolvedValue(mockEmployee);
            mockLeaveModel.createLeave.mockResolvedValue(mockLeave);
            // Mock the specific method called by createLeaveRequest
            mockLeaveBalanceModel.findByEmployeeLeaveTypeAndYear.mockResolvedValue({
                id: 'lb-1',
                employeeId: 'emp-123',
                leaveType: 'vacation',
                balance: 15,
                year: 2025,
                updatedAt: new Date()
            });
            // Mock checkOverlappingLeaves to return no overlaps
            mockLeaveModel.checkOverlappingLeaves.mockResolvedValue([]);
            mockLeaveModel.listLeaves.mockResolvedValue({ leaves: [], total: 0, page: 1, limit: 10, totalPages: 1 });
            // Act
            const result = await leaveService.createLeaveRequest(validLeaveData);
            // Assert
            expect(mockEmployeeModel.findById).toHaveBeenCalledWith('emp-123');
            expect(mockLeaveModel.createLeave).toHaveBeenCalledWith({
                employeeId: 'emp-123',
                leaveType: 'vacation',
                startDate: new Date('2025-12-15'),
                endDate: new Date('2025-12-17'),
                reason: 'Family vacation'
            });
            expect(result).toEqual(mockLeave);
        });
        it('should throw error if employee not found', async () => {
            // Arrange
            mockEmployeeModel.findById.mockResolvedValue(null);
            // Act & Assert
            await expect(leaveService.createLeaveRequest(validLeaveData))
                .rejects.toThrow('Employee not found');
        });
        it('should throw error if employee is not active', async () => {
            // Arrange
            const inactiveEmployee = { ...mockEmployee, status: 'inactive' };
            mockEmployeeModel.findById.mockResolvedValue(inactiveEmployee);
            // Act & Assert
            await expect(leaveService.createLeaveRequest(validLeaveData))
                .rejects.toThrow('Employee is not active');
        });
        it('should throw error if end date is before start date', async () => {
            // Arrange
            const invalidData = {
                ...validLeaveData,
                startDate: new Date('2025-12-17'),
                endDate: new Date('2025-12-15')
            };
            mockEmployeeModel.findById.mockResolvedValue(mockEmployee);
            // Act & Assert
            await expect(leaveService.createLeaveRequest(invalidData))
                .rejects.toThrow('Start date must be before end date');
        });
        it('should throw error if leave request is for past dates', async () => {
            // Arrange
            const pastDate = new Date();
            pastDate.setDate(pastDate.getDate() - 1);
            const pastEndDate = new Date();
            pastEndDate.setDate(pastEndDate.getDate() - 1);
            pastEndDate.setDate(pastEndDate.getDate() + 2); // Make end date after start date
            const invalidData = {
                ...validLeaveData,
                startDate: pastDate,
                endDate: pastEndDate
            };
            mockEmployeeModel.findById.mockResolvedValue(mockEmployee);
            // Act & Assert
            await expect(leaveService.createLeaveRequest(invalidData))
                .rejects.toThrow('Cannot request leave for past dates');
        });
    });
    describe('getLeaveRequest', () => {
        const mockLeaveWithDetails = {
            id: 'leave-123',
            employeeId: 'emp-123',
            leaveType: 'vacation',
            startDate: new Date('2025-12-15'),
            endDate: new Date('2025-12-17'),
            totalDays: 3,
            reason: 'Family vacation',
            status: 'pending',
            approvedBy: null,
            createdAt: new Date(),
            updatedAt: new Date(),
            employeeCode: 'EMP001',
            employeeName: 'John Doe',
            departmentName: 'Engineering',
            approverName: null
        };
        it('should return leave request with details', async () => {
            // Arrange
            mockLeaveModel.findByIdWithDetails.mockResolvedValue(mockLeaveWithDetails);
            // Act
            const result = await leaveService.getLeaveRequest('leave-123');
            // Assert
            expect(mockLeaveModel.findByIdWithDetails).toHaveBeenCalledWith('leave-123');
            expect(result).toEqual(mockLeaveWithDetails);
        });
        it('should return null if leave request not found', async () => {
            // Arrange
            mockLeaveModel.findByIdWithDetails.mockResolvedValue(null);
            // Act
            const result = await leaveService.getLeaveRequest('nonexistent');
            // Assert
            expect(result).toBeNull();
        });
    });
    describe('approveLeaveRequest', () => {
        const mockLeave = {
            id: 'leave-123',
            employeeId: 'emp-123',
            leaveType: 'vacation',
            startDate: new Date('2025-12-15'),
            endDate: new Date('2025-12-17'),
            totalDays: 3,
            reason: 'Family vacation',
            status: 'pending',
            approvedBy: null,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        const approveData = {
            leaveId: 'leave-123',
            approverId: 'approver-123',
            approved: true,
            comments: 'Approved for family vacation'
        };
        it('should approve leave request successfully', async () => {
            // Arrange
            mockLeaveModel.findById.mockResolvedValue(mockLeave);
            mockLeaveModel.updateLeave.mockResolvedValue({
                ...mockLeave,
                status: 'approved',
                approvedBy: 'approver-123',
            });
            // Mock the specific method called by approveLeaveRequest
            mockLeaveBalanceModel.useLeaveDays.mockResolvedValue({
                id: 'lb-1',
                employeeId: 'emp-123',
                leaveType: 'vacation',
                balance: 12, // 15 - 3 days
                year: 2025,
                updatedAt: new Date()
            });
            // Act
            const result = await leaveService.approveLeaveRequest(approveData);
            // Assert
            expect(mockLeaveModel.findById).toHaveBeenCalledWith('leave-123');
            expect(mockLeaveModel.updateLeave).toHaveBeenCalledWith('leave-123', {
                status: 'approved',
                approvedBy: 'approver-123',
                approvedAt: expect.any(Date),
            });
            expect(result.status).toBe('approved');
        });
        it('should reject leave request successfully', async () => {
            // Arrange
            const rejectData = { ...approveData, approved: false };
            mockLeaveModel.findById.mockResolvedValue(mockLeave);
            mockLeaveModel.updateLeave.mockResolvedValue({
                ...mockLeave,
                status: 'rejected',
                approvedBy: 'approver-123',
            });
            // Act
            const result = await leaveService.approveLeaveRequest(rejectData);
            // Assert
            expect(result.status).toBe('rejected');
        });
        it('should throw error if leave request not found', async () => {
            // Arrange
            mockLeaveModel.findById.mockResolvedValue(null);
            // Act & Assert
            await expect(leaveService.approveLeaveRequest(approveData))
                .rejects.toThrow('Leave request not found');
        });
        it('should throw error if leave request is already processed', async () => {
            // Arrange
            const processedLeave = { ...mockLeave, status: 'approved' };
            mockLeaveModel.findById.mockResolvedValue(processedLeave);
            // Act & Assert
            await expect(leaveService.approveLeaveRequest(approveData))
                .rejects.toThrow('Request has already been processed');
        });
    });
    describe('getEmployeeLeaveBalance', () => {
        const mockLeaveBalances = [
            {
                id: 'lb-1',
                employeeId: 'emp-123',
                leaveType: 'vacation',
                balance: 15,
                year: 2025,
                updatedAt: new Date(),
                employeeCode: 'EMP001',
                employeeName: 'John Doe',
                departmentName: 'Engineering'
            },
            {
                id: 'lb-2',
                employeeId: 'emp-123',
                leaveType: 'sick',
                balance: 10,
                year: 2025,
                updatedAt: new Date(),
                employeeCode: 'EMP001',
                employeeName: 'John Doe',
                departmentName: 'Engineering'
            }
        ];
        it('should return leave balance summary for employee', async () => {
            // Arrange
            mockLeaveBalanceModel.getEmployeeLeaveBalances.mockResolvedValue(mockLeaveBalances);
            // Act
            const result = await leaveService.getEmployeeLeaveBalance('emp-123', 2025);
            // Assert
            expect(mockLeaveBalanceModel.getEmployeeLeaveBalances).toHaveBeenCalledWith('emp-123', 2025);
            expect(result).toEqual({
                vacation: { total: 15, used: 0, available: 15 },
                sick: { total: 10, used: 0, available: 10 },
                maternity: { total: 0, used: 0, available: 0 },
                other: { total: 0, used: 0, available: 0 }
            });
        });
        it('should use current year if year not provided', async () => {
            // Arrange
            const currentYear = new Date().getFullYear();
            mockLeaveBalanceModel.getEmployeeLeaveBalances.mockResolvedValue([]);
            // Act
            await leaveService.getEmployeeLeaveBalance('emp-123');
            // Assert
            expect(mockLeaveBalanceModel.getEmployeeLeaveBalances).toHaveBeenCalledWith('emp-123', currentYear);
        });
        it('should return zero balances if no leave balances found', async () => {
            // Arrange
            mockLeaveBalanceModel.getEmployeeLeaveBalances.mockResolvedValue([]);
            // Act
            const result = await leaveService.getEmployeeLeaveBalance('emp-123', 2024);
            // Assert
            expect(result).toEqual({
                vacation: { total: 0, used: 0, available: 0 },
                sick: { total: 0, used: 0, available: 0 },
                maternity: { total: 0, used: 0, available: 0 },
                other: { total: 0, used: 0, available: 0 }
            });
        });
    });
    describe('validateLeaveRequest', () => {
        const validLeaveData = {
            employeeId: 'emp-123',
            leaveType: 'vacation',
            startDate: new Date('2025-12-15'),
            endDate: new Date('2025-12-17'),
            reason: 'Family vacation'
        };
        it('should validate leave request successfully', async () => {
            // Arrange
            // Mock the specific method called by validateLeaveRequest
            mockLeaveBalanceModel.findByEmployeeLeaveTypeAndYear.mockResolvedValue({
                id: 'lb-1',
                employeeId: 'emp-123',
                leaveType: 'vacation',
                balance: 15,
                year: 2025,
                updatedAt: new Date()
            });
            mockLeaveModel.checkOverlappingLeaves.mockResolvedValue([]);
            // Act
            const result = await leaveService.validateLeaveRequest(validLeaveData);
            // Assert
            expect(result.isValid).toBe(true);
            expect(result.errors).toHaveLength(0);
        });
        it('should return validation errors for insufficient leave balance', async () => {
            // Arrange
            const insufficientBalanceData = {
                ...validLeaveData,
                startDate: new Date('2025-12-15'),
                endDate: new Date('2024-01-30') // 16 days
            };
            const mockLeaveBalances = [
                {
                    id: 'lb-1',
                    employeeId: 'emp-123',
                    leaveType: 'vacation',
                    balance: 15,
                    year: 2025,
                    updatedAt: new Date(),
                    employeeCode: 'EMP001',
                    employeeName: 'John Doe',
                    departmentName: 'Engineering'
                }
            ];
            mockLeaveBalanceModel.getEmployeeLeaveBalances.mockResolvedValue(mockLeaveBalances);
            // Act
            const result = await leaveService.validateLeaveRequest(insufficientBalanceData);
            // Assert
            expect(result.isValid).toBe(false);
            expect(result.errors).toContain('No leave balance available for vacation leave');
        });
        it('should return validation errors for overlapping requests', async () => {
            // Arrange
            const mockOverlappingRequests = [
                {
                    id: 'leave-456',
                    employeeId: 'emp-123',
                    leaveType: 'sick',
                    startDate: new Date('2024-01-16'),
                    endDate: new Date('2024-01-18'),
                    totalDays: 3,
                    reason: null,
                    status: 'pending',
                    approvedBy: null,
                    createdAt: new Date(),
                    updatedAt: new Date()
                }
            ];
            mockLeaveBalanceModel.getEmployeeLeaveBalances.mockResolvedValue([]);
            mockLeaveModel.checkOverlappingLeaves.mockResolvedValue(mockOverlappingRequests);
            // Act
            const result = await leaveService.validateLeaveRequest(validLeaveData);
            // Assert
            expect(result.isValid).toBe(false);
            expect(result.errors).toContain('Leave request overlaps with existing approved leave');
        });
    });
    describe('getEmployeeLeaveRequests', () => {
        const mockLeaveRequests = [
            {
                id: 'leave-123',
                employeeId: 'emp-123',
                leaveType: 'vacation',
                startDate: new Date('2025-12-15'),
                endDate: new Date('2025-12-17'),
                totalDays: 3,
                reason: 'Family vacation',
                status: 'approved',
                approvedBy: 'approver-123',
                createdAt: new Date(),
                updatedAt: new Date(),
                employeeCode: 'EMP001',
                employeeName: 'John Doe',
                departmentName: 'Engineering',
                approverName: 'Jane Smith'
            }
        ];
        it('should return employee leave requests', async () => {
            // Arrange
            mockLeaveModel.listLeaves.mockResolvedValue({ leaves: mockLeaveRequests, total: 1, page: 1, limit: 10, totalPages: 1 });
            // Act
            const result = await leaveService.getEmployeeLeaveRequests('emp-123');
            // Assert
            expect(mockLeaveModel.listLeaves).toHaveBeenCalledWith({
                employeeId: 'emp-123',
                startDate: undefined,
                endDate: undefined,
                page: 1,
                limit: 20,
                sortBy: 'created_at',
                sortOrder: 'desc'
            });
            expect(result).toEqual({
                leaves: mockLeaveRequests,
                total: 1,
                page: 1,
                limit: 10,
                totalPages: 1
            });
        });
        it('should use current year if year not provided', async () => {
            // Arrange
            mockLeaveModel.listLeaves.mockResolvedValue({ leaves: [], total: 0, page: 1, limit: 10, totalPages: 1 });
            // Act
            await leaveService.getEmployeeLeaveRequests('emp-123');
            // Assert
            expect(mockLeaveModel.listLeaves).toHaveBeenCalledWith({
                employeeId: 'emp-123',
                startDate: undefined,
                endDate: undefined,
                page: 1,
                limit: 20,
                sortBy: 'created_at',
                sortOrder: 'desc'
            });
        });
    });
    describe('deleteLeaveRequest', () => {
        it('should delete leave request successfully', async () => {
            // Arrange
            mockLeaveModel.findById.mockResolvedValue(mockLeave);
            mockLeaveModel.deleteLeave.mockResolvedValue(true);
            // Act
            const result = await leaveService.deleteLeaveRequest('leave-123');
            // Assert
            expect(mockLeaveModel.findById).toHaveBeenCalledWith('leave-123');
            expect(mockLeaveModel.deleteLeave).toHaveBeenCalledWith('leave-123');
            expect(result).toBe(true);
        });
        it('should throw error if leave request not found', async () => {
            // Arrange
            mockLeaveModel.findById.mockResolvedValue(null);
            // Act & Assert
            await expect(leaveService.deleteLeaveRequest('nonexistent'))
                .rejects.toThrow('Leave request not found');
            expect(mockLeaveModel.findById).toHaveBeenCalledWith('nonexistent');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,