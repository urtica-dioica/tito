{"version":3,"names":["cov_2nprzc2uzf","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","validateHoursCalculation","AttendanceHoursCalculator","constructor","config","baseConfig","morningStart","morningEnd","afternoonStart","afternoonEnd","gracePeriodMinutes","sessionCapHours","dateToDecimalHours","date","getHours","getMinutes","getSeconds","applyGracePeriodRule","clockInTime","gracePeriodHours","Math","ceil","calculateMorningHours","sessions","morningIn","morningOut","hours","effectiveStart","effectiveEnd","clockOutTime","rawHours","max","cappedHours","min","round","calculateAfternoonHours","afternoonIn","afternoonOut","calculateTotalHours","morningResult","afternoonResult","totalHours","morningHours","afternoonHours","effectiveMorningStart","effectiveAfternoonStart","effectiveMorningEnd","effectiveAfternoonEnd","calculateFromSessions","sessionTimes","session","sessionType","clockIn","clockOut","getConfig","updateConfig","newConfig","defaultHoursCalculator","calculator","testSessions","Date","result","console","log"],"sources":["/home/kim/tito/server/src/utils/attendanceHoursCalculator.ts"],"sourcesContent":["/**\n * Attendance Hours Calculator\n * \n * Implements the mathematical formulation for calculating total hours worked by an employee\n * in a single workday, considering morning and afternoon sessions, grace period rules,\n * and break time constraints.\n * \n * Mathematical Formulation:\n * - Each session (morning/afternoon) is capped at 4 hours\n * - Grace period rule: 30 minutes after hour mark rounds up to next hour\n * - Break time: 12:01-12:59 (1 hour mandatory break)\n * - Early clock-in: Session starts at official start time\n * - Late clock-out: Hours capped at session maximum\n */\n\nexport interface AttendanceSessionTimes {\n  morningIn?: Date;\n  morningOut?: Date;\n  afternoonIn?: Date;\n  afternoonOut?: Date;\n}\n\nexport interface AttendanceConfig {\n  morningStart: number;      // Default: 8.0 (8:00 AM)\n  morningEnd: number;        // Default: 12.0 (12:00 PM)\n  afternoonStart: number;    // Default: 13.0 (1:00 PM)\n  afternoonEnd: number;      // Default: 17.0 (5:00 PM)\n  gracePeriodMinutes: number; // Default: 30 minutes\n  sessionCapHours: number;   // Default: 4 hours\n}\n\nexport interface CalculatedHours {\n  morningHours: number;\n  afternoonHours: number;\n  totalHours: number;\n  effectiveMorningStart: number | null;\n  effectiveAfternoonStart: number | null;\n  effectiveMorningEnd: number | null;\n  effectiveAfternoonEnd: number | null;\n}\n\nexport class AttendanceHoursCalculator {\n  private config: AttendanceConfig;\n\n  constructor(config?: Partial<AttendanceConfig>) {\n    // Use configuration from environment or defaults\n    const baseConfig = {\n      morningStart: 8.0,      // 8:00 AM\n      morningEnd: 12.0,       // 12:00 PM\n      afternoonStart: 13.0,   // 1:00 PM\n      afternoonEnd: 17.0,     // 5:00 PM\n      gracePeriodMinutes: 30, // 30 minutes\n      sessionCapHours: 4,     // 4 hours per session\n    };\n    \n    this.config = { ...baseConfig, ...config };\n  }\n\n  /**\n   * Convert Date to decimal hours (24-hour format)\n   * @param date - Date object\n   * @returns Decimal hours (e.g., 8.5 for 8:30 AM)\n   */\n  private dateToDecimalHours(date: Date): number {\n    return date.getHours() + date.getMinutes() / 60 + date.getSeconds() / 3600;\n  }\n\n  /**\n   * Apply grace period rule to determine effective start time\n   * @param clockInTime - Actual clock-in time in decimal hours\n   * @returns Effective start time in decimal hours\n   */\n  private applyGracePeriodRule(clockInTime: number): number {\n    const gracePeriodHours = this.config.gracePeriodMinutes / 60;\n    return Math.ceil(clockInTime - gracePeriodHours);\n  }\n\n  /**\n   * Check if time falls within break period (12:01-12:59)\n   * @param time - Time in decimal hours\n   * @returns True if within break period\n   */\n  // private isBreakPeriod(time: number): boolean {\n  //   const breakStart = 12 + 1/60;  // 12:01\n  //   const breakEnd = 12 + 59/60;   // 12:59\n  //   return time >= breakStart && time <= breakEnd;\n  // }\n\n  /**\n   * Calculate morning session hours\n   * @param sessions - Attendance session times\n   * @returns Morning hours and effective times\n   */\n  private calculateMorningHours(sessions: AttendanceSessionTimes): {\n    hours: number;\n    effectiveStart: number | null;\n    effectiveEnd: number | null;\n  } {\n    const { morningIn, morningOut } = sessions;\n\n    // No morning session if no clock-in\n    if (!morningIn) {\n      return { hours: 0, effectiveStart: null, effectiveEnd: null };\n    }\n\n    const clockInTime = this.dateToDecimalHours(morningIn);\n    \n    // Determine effective morning start time\n    let effectiveStart: number;\n    \n    if (clockInTime < this.config.morningStart) {\n      // Early clock-in: session starts at official start time\n      effectiveStart = this.config.morningStart;\n    } else {\n      // Apply grace period rule\n      effectiveStart = this.applyGracePeriodRule(clockInTime);\n    }\n\n    // Ensure effective start is not after morning end\n    if (effectiveStart > this.config.morningEnd) {\n      return { hours: 0, effectiveStart: null, effectiveEnd: null };\n    }\n\n    // Determine effective morning end time\n    let effectiveEnd: number;\n    \n    if (!morningOut) {\n      // No clock-out: use morning end time\n      effectiveEnd = this.config.morningEnd;\n    } else {\n      const clockOutTime = this.dateToDecimalHours(morningOut);\n      \n      if (clockOutTime <= this.config.morningEnd) {\n        // Clock-out before or at morning end\n        effectiveEnd = clockOutTime;\n      } else if (clockOutTime < this.config.afternoonStart) {\n        // Clock-out between morning end and afternoon start\n        effectiveEnd = this.config.morningEnd;\n      } else {\n        // Clock-out after afternoon start: use morning end\n        effectiveEnd = this.config.morningEnd;\n      }\n    }\n\n    // Calculate morning hours with cap\n    const rawHours = Math.max(0, effectiveEnd - effectiveStart);\n    const cappedHours = Math.min(this.config.sessionCapHours, rawHours);\n\n    return {\n      hours: Math.round(cappedHours * 100) / 100, // Round to 2 decimal places\n      effectiveStart,\n      effectiveEnd\n    };\n  }\n\n  /**\n   * Calculate afternoon session hours\n   * @param sessions - Attendance session times\n   * @returns Afternoon hours and effective times\n   */\n  private calculateAfternoonHours(sessions: AttendanceSessionTimes): {\n    hours: number;\n    effectiveStart: number | null;\n    effectiveEnd: number | null;\n  } {\n    const { afternoonIn, afternoonOut } = sessions;\n\n    // No afternoon session if no clock-in\n    if (!afternoonIn) {\n      return { hours: 0, effectiveStart: null, effectiveEnd: null };\n    }\n\n    const clockInTime = this.dateToDecimalHours(afternoonIn);\n    \n    // Determine effective afternoon start time\n    let effectiveStart: number;\n    \n    if (clockInTime < this.config.afternoonStart) {\n      // Clock-in before afternoon start: use official start time\n      effectiveStart = this.config.afternoonStart;\n    } else {\n      // Apply grace period rule\n      effectiveStart = this.applyGracePeriodRule(clockInTime);\n    }\n\n    // Ensure effective start is not after afternoon end\n    if (effectiveStart > this.config.afternoonEnd) {\n      return { hours: 0, effectiveStart: null, effectiveEnd: null };\n    }\n\n    // Determine effective afternoon end time\n    let effectiveEnd: number;\n    \n    if (!afternoonOut) {\n      // No clock-out: use afternoon end time\n      effectiveEnd = this.config.afternoonEnd;\n    } else {\n      const clockOutTime = this.dateToDecimalHours(afternoonOut);\n      \n      // Use the earlier of clock-out time or afternoon end\n      effectiveEnd = Math.min(clockOutTime, this.config.afternoonEnd);\n    }\n\n    // Calculate afternoon hours with cap\n    const rawHours = Math.max(0, effectiveEnd - effectiveStart);\n    const cappedHours = Math.min(this.config.sessionCapHours, rawHours);\n\n    return {\n      hours: Math.round(cappedHours * 100) / 100, // Round to 2 decimal places\n      effectiveStart,\n      effectiveEnd\n    };\n  }\n\n  /**\n   * Calculate total hours for a workday\n   * @param sessions - Attendance session times\n   * @returns Complete calculation results\n   */\n  public calculateTotalHours(sessions: AttendanceSessionTimes): CalculatedHours {\n    const morningResult = this.calculateMorningHours(sessions);\n    const afternoonResult = this.calculateAfternoonHours(sessions);\n\n    const totalHours = morningResult.hours + afternoonResult.hours;\n\n    return {\n      morningHours: morningResult.hours,\n      afternoonHours: afternoonResult.hours,\n      totalHours: Math.round(totalHours * 100) / 100, // Round to 2 decimal places\n      effectiveMorningStart: morningResult.effectiveStart,\n      effectiveAfternoonStart: afternoonResult.effectiveStart,\n      effectiveMorningEnd: morningResult.effectiveEnd,\n      effectiveAfternoonEnd: afternoonResult.effectiveEnd\n    };\n  }\n\n  /**\n   * Calculate hours from attendance sessions (database format)\n   * @param sessions - Array of attendance sessions from database\n   * @returns Complete calculation results\n   */\n  public calculateFromSessions(sessions: Array<{\n    sessionType: string;\n    clockIn?: Date;\n    clockOut?: Date;\n  }>): CalculatedHours {\n    const sessionTimes: AttendanceSessionTimes = {};\n\n    // Extract session times\n    for (const session of sessions) {\n      switch (session.sessionType) {\n        case 'morning_in':\n          sessionTimes.morningIn = session.clockIn;\n          break;\n        case 'morning_out':\n          sessionTimes.morningOut = session.clockOut;\n          break;\n        case 'afternoon_in':\n          sessionTimes.afternoonIn = session.clockIn;\n          break;\n        case 'afternoon_out':\n          sessionTimes.afternoonOut = session.clockOut;\n          break;\n      }\n    }\n\n    return this.calculateTotalHours(sessionTimes);\n  }\n\n  /**\n   * Get current configuration\n   * @returns Current configuration object\n   */\n  public getConfig(): AttendanceConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Update configuration\n   * @param newConfig - Partial configuration to update\n   */\n  public updateConfig(newConfig: Partial<AttendanceConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n}\n\n// Default instance with standard configuration\nexport const defaultHoursCalculator = new AttendanceHoursCalculator();\n\n// Example usage and validation\nexport function validateHoursCalculation(): void {\n  const calculator = new AttendanceHoursCalculator();\n  \n  // Test case from the specification\n  const testSessions: AttendanceSessionTimes = {\n    morningIn: new Date('2025-01-01T08:31:00'), // 8:31 AM\n    afternoonOut: new Date('2025-01-01T18:00:00') // 6:00 PM\n  };\n\n  const result = calculator.calculateTotalHours(testSessions);\n  \n  console.log('Test calculation result:', result);\n  console.log('Expected: 7 hours (3 morning + 4 afternoon)');\n  console.log('Actual matches expected:', result.totalHours === 7);\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAA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","ignoreList":[]}