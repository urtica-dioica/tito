074aa77a8d58b2aa0d04cca9f7ec436b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const loadTestUtils_1 = require("./loadTestUtils");
const axios = {
    create: () => ({
        get: jest.fn(),
        post: jest.fn(),
        put: jest.fn(),
        delete: jest.fn(),
        patch: jest.fn(),
        interceptors: {
            request: { use: jest.fn() },
            response: { use: jest.fn() }
        }
    })
};
describe('Authentication Load Tests', () => {
    let loadTestRunner;
    let baseURL;
    beforeAll(() => {
        baseURL = process.env.TEST_BASE_URL || 'http://localhost:3000';
        const config = {
            baseURL,
            concurrentUsers: 10,
            requestsPerUser: 5,
            rampUpTime: 2000, // 2 seconds
            testDuration: 30000, // 30 seconds
            timeout: 10000 // 10 seconds
        };
        loadTestRunner = new loadTestUtils_1.LoadTestRunner(config);
    });
    describe('Login Endpoint Load Test', () => {
        it('should handle concurrent login requests', async () => {
            const testCredentials = {
                email: 'test@example.com',
                password: 'password123'
            };
            const requestFunction = async (axios) => {
                return axios.create().post('/api/v1/auth/login', testCredentials);
            };
            const result = await loadTestRunner.runLoadTest(requestFunction, 'Login Endpoint Load Test');
            // Performance assertions
            expect(result.averageResponseTime).toBeLessThan(2000); // Less than 2 seconds
            expect(result.errorRate).toBeLessThan(0.05); // Less than 5% error rate
            expect(result.requestsPerSecond).toBeGreaterThan(5); // At least 5 RPS
            console.log(loadTestRunner.generateReport(result, 'Login Endpoint Load Test'));
        }, 60000); // 60 second timeout
    });
    describe('Token Validation Load Test', () => {
        let authToken;
        beforeAll(async () => {
            // Get a valid token for testing
            try {
                const response = await axios.create().post(`${baseURL}/api/v1/auth/login`, {
                    email: 'test@example.com',
                    password: 'password123'
                });
                authToken = response.data.data.accessToken;
            }
            catch (error) {
                console.warn('Could not obtain auth token for load test');
                authToken = 'invalid-token';
            }
        });
        it('should handle concurrent token validation requests', async () => {
            const requestFunction = async (axios) => {
                return axios.create().get('/api/v1/auth/profile', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
            };
            const result = await loadTestRunner.runLoadTest(requestFunction, 'Token Validation Load Test');
            // Performance assertions
            expect(result.averageResponseTime).toBeLessThan(1000); // Less than 1 second
            expect(result.errorRate).toBeLessThan(0.1); // Less than 10% error rate
            expect(result.requestsPerSecond).toBeGreaterThan(10); // At least 10 RPS
            console.log(loadTestRunner.generateReport(result, 'Token Validation Load Test'));
        }, 60000);
    });
    describe('Refresh Token Load Test', () => {
        let refreshToken;
        beforeAll(async () => {
            // Get a valid refresh token for testing
            try {
                const response = await axios.create().post(`${baseURL}/api/v1/auth/login`, {
                    email: 'test@example.com',
                    password: 'password123'
                });
                refreshToken = response.data.data.refreshToken;
            }
            catch (error) {
                console.warn('Could not obtain refresh token for load test');
                refreshToken = 'invalid-refresh-token';
            }
        });
        it('should handle concurrent refresh token requests', async () => {
            const requestFunction = async (axios) => {
                return axios.create().post('/api/v1/auth/refresh', {}, {
                    headers: {
                        'Cookie': `refreshToken=${refreshToken}`
                    }
                });
            };
            const result = await loadTestRunner.runLoadTest(requestFunction, 'Refresh Token Load Test');
            // Performance assertions
            expect(result.averageResponseTime).toBeLessThan(1500); // Less than 1.5 seconds
            expect(result.errorRate).toBeLessThan(0.1); // Less than 10% error rate
            expect(result.requestsPerSecond).toBeGreaterThan(8); // At least 8 RPS
            console.log(loadTestRunner.generateReport(result, 'Refresh Token Load Test'));
        }, 60000);
    });
    describe('High Load Authentication Test', () => {
        it('should handle high concurrent load on authentication endpoints', async () => {
            const highLoadConfig = {
                baseURL,
                concurrentUsers: 50,
                requestsPerUser: 10,
                rampUpTime: 5000, // 5 seconds
                testDuration: 60000, // 60 seconds
                timeout: 15000 // 15 seconds
            };
            const highLoadRunner = new loadTestUtils_1.LoadTestRunner(highLoadConfig);
            const testCredentials = {
                email: 'test@example.com',
                password: 'password123'
            };
            const requestFunction = async (axios) => {
                return axios.create().post('/api/v1/auth/login', testCredentials);
            };
            const result = await highLoadRunner.runLoadTest(requestFunction, 'High Load Authentication Test');
            // High load performance assertions
            expect(result.averageResponseTime).toBeLessThan(3000); // Less than 3 seconds
            expect(result.errorRate).toBeLessThan(0.1); // Less than 10% error rate
            expect(result.requestsPerSecond).toBeGreaterThan(20); // At least 20 RPS
            expect(result.totalRequests).toBe(500); // 50 users * 10 requests each
            console.log(highLoadRunner.generateReport(result, 'High Load Authentication Test'));
        }, 120000); // 2 minute timeout
    });
    describe('Authentication Stress Test', () => {
        it('should handle stress conditions on authentication endpoints', async () => {
            const stressConfig = {
                baseURL,
                concurrentUsers: 100,
                requestsPerUser: 20,
                rampUpTime: 10000, // 10 seconds
                testDuration: 120000, // 2 minutes
                timeout: 20000 // 20 seconds
            };
            const stressRunner = new loadTestUtils_1.LoadTestRunner(stressConfig);
            const testCredentials = {
                email: 'test@example.com',
                password: 'password123'
            };
            const requestFunction = async (axios) => {
                return axios.create().post('/api/v1/auth/login', testCredentials);
            };
            const result = await stressRunner.runLoadTest(requestFunction, 'Authentication Stress Test');
            // Stress test performance assertions (more lenient)
            expect(result.averageResponseTime).toBeLessThan(5000); // Less than 5 seconds
            expect(result.errorRate).toBeLessThan(0.2); // Less than 20% error rate
            expect(result.requestsPerSecond).toBeGreaterThan(10); // At least 10 RPS
            expect(result.totalRequests).toBe(2000); // 100 users * 20 requests each
            console.log(stressRunner.generateReport(result, 'Authentication Stress Test'));
        }, 180000); // 3 minute timeout
    });
    describe('Authentication Endpoint Comparison', () => {
        it('should compare performance across different authentication endpoints', async () => {
            const endpoints = [
                { name: 'Login', path: '/api/v1/auth/login', method: 'POST' },
                { name: 'Profile', path: '/api/v1/auth/profile', method: 'GET' },
                { name: 'Refresh', path: '/api/v1/auth/refresh', method: 'POST' }
            ];
            const results = {};
            for (const endpoint of endpoints) {
                const requestFunction = async (axios) => {
                    const data = endpoint.method === 'POST' ?
                        (endpoint.path.includes('login') ?
                            { email: 'test@example.com', password: 'password123' } :
                            {}) :
                        undefined;
                    const config = {
                        method: endpoint.method.toLowerCase(),
                        url: endpoint.path
                    };
                    if (data) {
                        config.data = data;
                    }
                    if (endpoint.path.includes('profile')) {
                        config.headers = {
                            'Authorization': 'Bearer test-token'
                        };
                    }
                    if (endpoint.path.includes('refresh')) {
                        config.headers = {
                            'Cookie': 'refreshToken=test-refresh-token'
                        };
                    }
                    return axios(config);
                };
                const result = await loadTestRunner.runLoadTest(requestFunction, `${endpoint.name} Endpoint Performance`);
                results[endpoint.name] = result;
            }
            // Compare results
            console.log('\nðŸ“Š AUTHENTICATION ENDPOINT COMPARISON');
            console.log('=====================================');
            for (const [name, result] of Object.entries(results)) {
                console.log(`\n${name}:`);
                console.log(`  Average Response Time: ${result.averageResponseTime.toFixed(2)}ms`);
                console.log(`  Error Rate: ${(result.errorRate * 100).toFixed(2)}%`);
                console.log(`  Requests/Second: ${result.requestsPerSecond.toFixed(2)}`);
            }
            // Assertions for endpoint comparison
            expect(results.Login.averageResponseTime).toBeLessThan(2000);
            expect(results.Profile.averageResponseTime).toBeLessThan(1000);
            expect(results.Refresh.averageResponseTime).toBeLessThan(1500);
        }, 180000);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,