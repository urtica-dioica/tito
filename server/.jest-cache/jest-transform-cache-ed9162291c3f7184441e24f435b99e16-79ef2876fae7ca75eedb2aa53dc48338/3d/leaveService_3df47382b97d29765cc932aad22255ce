ad770c9fd3c484ecf0d5a00261dc746e
"use strict";

/* istanbul ignore next */
function cov_1djk0uam3x() {
  var path = "/home/kim/tito/server/src/services/leave/leaveService.ts";
  var hash = "a5af0db3e21412f5425ffb92d8c9a9e420da1b0a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/leave/leaveService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 16
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 23
        },
        end: {
          line: 8,
          column: 65
        }
      },
      "6": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 9,
          column: 54
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 63
        }
      },
      "8": {
        start: {
          line: 16,
          column: 70
        },
        end: {
          line: 16,
          column: 74
        }
      },
      "9": {
        start: {
          line: 18,
          column: 25
        },
        end: {
          line: 18,
          column: 76
        }
      },
      "10": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 21,
          column: 9
        }
      },
      "11": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 50
        }
      },
      "12": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "13": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 54
        }
      },
      "14": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "15": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 66
        }
      },
      "16": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 29,
          column: 32
        }
      },
      "17": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 35
        }
      },
      "18": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "19": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 67
        }
      },
      "20": {
        start: {
          line: 35,
          column: 26
        },
        end: {
          line: 35,
          column: 71
        }
      },
      "21": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "22": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 82
        }
      },
      "23": {
        start: {
          line: 40,
          column: 28
        },
        end: {
          line: 40,
          column: 52
        }
      },
      "24": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 41,
          column: 134
        }
      },
      "25": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "26": {
        start: {
          line: 43,
          column: 34
        },
        end: {
          line: 43,
          column: 54
        }
      },
      "27": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "28": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 126
        }
      },
      "29": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 54,
          column: 15
        }
      },
      "30": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 81
        }
      },
      "31": {
        start: {
          line: 58,
          column: 34
        },
        end: {
          line: 58,
          column: 113
        }
      },
      "32": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "33": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 83
        }
      },
      "34": {
        start: {
          line: 63,
          column: 26
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "35": {
        start: {
          line: 71,
          column: 22
        },
        end: {
          line: 71,
          column: 69
        }
      },
      "36": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "37": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 21
        }
      },
      "38": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 64
        }
      },
      "39": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 62
        }
      },
      "40": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 59
        }
      },
      "41": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 98
        }
      },
      "42": {
        start: {
          line: 112,
          column: 60
        },
        end: {
          line: 112,
          column: 64
        }
      },
      "43": {
        start: {
          line: 114,
          column: 22
        },
        end: {
          line: 114,
          column: 64
        }
      },
      "44": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "45": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 55
        }
      },
      "46": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "47": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 66
        }
      },
      "48": {
        start: {
          line: 122,
          column: 27
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "49": {
        start: {
          line: 126,
          column: 29
        },
        end: {
          line: 126,
          column: 86
        }
      },
      "50": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "51": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 62
        }
      },
      "52": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "53": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 56
        }
      },
      "54": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "55": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 28
        }
      },
      "56": {
        start: {
          line: 151,
          column: 28
        },
        end: {
          line: 151,
          column: 52
        }
      },
      "57": {
        start: {
          line: 153,
          column: 31
        },
        end: {
          line: 153,
          column: 147
        }
      },
      "58": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "59": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 85
        }
      },
      "60": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "61": {
        start: {
          line: 169,
          column: 20
        },
        end: {
          line: 169,
          column: 21
        }
      },
      "62": {
        start: {
          line: 170,
          column: 24
        },
        end: {
          line: 170,
          column: 43
        }
      },
      "63": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "64": {
        start: {
          line: 172,
          column: 30
        },
        end: {
          line: 172,
          column: 46
        }
      },
      "65": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 175,
          column: 13
        }
      },
      "66": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 24
        }
      },
      "67": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 51
        }
      },
      "68": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 21
        }
      },
      "69": {
        start: {
          line: 184,
          column: 28
        },
        end: {
          line: 184,
          column: 60
        }
      },
      "70": {
        start: {
          line: 185,
          column: 23
        },
        end: {
          line: 185,
          column: 111
        }
      },
      "71": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "72": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 128
        }
      },
      "73": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 93
        }
      },
      "74": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 112
        }
      },
      "75": {
        start: {
          line: 193,
          column: 24
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "76": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 206,
          column: 11
        }
      },
      "77": {
        start: {
          line: 200,
          column: 30
        },
        end: {
          line: 200,
          column: 47
        }
      },
      "78": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 205,
          column: 13
        }
      },
      "79": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 59
        }
      },
      "80": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 44
        }
      },
      "81": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 63
        }
      },
      "82": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 23
        }
      },
      "83": {
        start: {
          line: 213,
          column: 25
        },
        end: {
          line: 213,
          column: 27
        }
      },
      "84": {
        start: {
          line: 215,
          column: 27
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "85": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "86": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 229,
          column: 13
        }
      },
      "87": {
        start: {
          line: 223,
          column: 32
        },
        end: {
          line: 227,
          column: 18
        }
      },
      "88": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 228,
          column: 39
        }
      },
      "89": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 238,
          column: 11
        }
      },
      "90": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 24
        }
      },
      "91": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 80
        }
      },
      "92": {
        start: {
          line: 251,
          column: 22
        },
        end: {
          line: 251,
          column: 59
        }
      },
      "93": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "94": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 55
        }
      },
      "95": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "96": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 64
        }
      },
      "97": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 56
        }
      },
      "98": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 272,
          column: 11
        }
      },
      "99": {
        start: {
          line: 278,
          column: 23
        },
        end: {
          line: 278,
          column: 25
        }
      },
      "100": {
        start: {
          line: 280,
          column: 25
        },
        end: {
          line: 280,
          column: 81
        }
      },
      "101": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "102": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 46
        }
      },
      "103": {
        start: {
          line: 284,
          column: 13
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "104": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 50
        }
      },
      "105": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "106": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 62
        }
      },
      "107": {
        start: {
          line: 291,
          column: 22
        },
        end: {
          line: 291,
          column: 32
        }
      },
      "108": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 35
        }
      },
      "109": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "110": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 63
        }
      },
      "111": {
        start: {
          line: 297,
          column: 26
        },
        end: {
          line: 297,
          column: 81
        }
      },
      "112": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "113": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 78
        }
      },
      "114": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "115": {
        start: {
          line: 303,
          column: 32
        },
        end: {
          line: 303,
          column: 56
        }
      },
      "116": {
        start: {
          line: 304,
          column: 33
        },
        end: {
          line: 304,
          column: 148
        }
      },
      "117": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "118": {
        start: {
          line: 306,
          column: 38
        },
        end: {
          line: 306,
          column: 58
        }
      },
      "119": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 309,
          column: 17
        }
      },
      "120": {
        start: {
          line: 308,
          column: 20
        },
        end: {
          line: 308,
          column: 126
        }
      },
      "121": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 86
        }
      },
      "122": {
        start: {
          line: 315,
          column: 38
        },
        end: {
          line: 315,
          column: 132
        }
      },
      "123": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 318,
          column: 13
        }
      },
      "124": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 317,
          column: 83
        }
      },
      "125": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 323,
          column: 10
        }
      },
      "126": {
        start: {
          line: 329,
          column: 26
        },
        end: {
          line: 329,
          column: 46
        }
      },
      "127": {
        start: {
          line: 330,
          column: 24
        },
        end: {
          line: 330,
          column: 46
        }
      },
      "128": {
        start: {
          line: 331,
          column: 23
        },
        end: {
          line: 336,
          column: 10
        }
      },
      "129": {
        start: {
          line: 337,
          column: 31
        },
        end: {
          line: 346,
          column: 11
        }
      },
      "130": {
        start: {
          line: 338,
          column: 29
        },
        end: {
          line: 338,
          column: 56
        }
      },
      "131": {
        start: {
          line: 339,
          column: 27
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "132": {
        start: {
          line: 347,
          column: 30
        },
        end: {
          line: 356,
          column: 11
        }
      },
      "133": {
        start: {
          line: 348,
          column: 29
        },
        end: {
          line: 348,
          column: 55
        }
      },
      "134": {
        start: {
          line: 349,
          column: 27
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "135": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 360,
          column: 10
        }
      },
      "136": {
        start: {
          line: 363,
          column: 0
        },
        end: {
          line: 363,
          column: 36
        }
      },
      "137": {
        start: {
          line: 364,
          column: 0
        },
        end: {
          line: 364,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 30
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 87
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 39
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 93
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 41
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 99
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 68
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 105
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 36
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 36
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 150
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 45
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 168
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 52
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 183
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 199,
            column: 25
          },
          end: {
            line: 199,
            column: 26
          }
        },
        loc: {
          start: {
            line: 199,
            column: 36
          },
          end: {
            line: 206,
            column: 9
          }
        },
        line: 199
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 127
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 212
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 50
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 244
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        loc: {
          start: {
            line: 250,
            column: 33
          },
          end: {
            line: 259,
            column: 5
          }
        },
        line: 250
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 263,
            column: 4
          },
          end: {
            line: 263,
            column: 5
          }
        },
        loc: {
          start: {
            line: 263,
            column: 89
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 263
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 277,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        },
        loc: {
          start: {
            line: 277,
            column: 37
          },
          end: {
            line: 324,
            column: 5
          }
        },
        line: 277
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 328,
            column: 5
          }
        },
        loc: {
          start: {
            line: 328,
            column: 53
          },
          end: {
            line: 361,
            column: 5
          }
        },
        line: 328
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 338,
            column: 20
          },
          end: {
            line: 338,
            column: 21
          }
        },
        loc: {
          start: {
            line: 338,
            column: 29
          },
          end: {
            line: 338,
            column: 56
          }
        },
        line: 338
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 339,
            column: 17
          },
          end: {
            line: 339,
            column: 18
          }
        },
        loc: {
          start: {
            line: 339,
            column: 27
          },
          end: {
            line: 346,
            column: 9
          }
        },
        line: 339
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 348,
            column: 20
          },
          end: {
            line: 348,
            column: 21
          }
        },
        loc: {
          start: {
            line: 348,
            column: 29
          },
          end: {
            line: 348,
            column: 55
          }
        },
        line: 348
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 349,
            column: 17
          },
          end: {
            line: 349,
            column: 18
          }
        },
        loc: {
          start: {
            line: 349,
            column: 27
          },
          end: {
            line: 356,
            column: 9
          }
        },
        line: 349
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 21,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 21,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "4": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "5": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "6": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "7": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "8": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: 48,
            column: 13
          },
          end: {
            line: 56,
            column: 9
          }
        }],
        line: 42
      },
      "9": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "10": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "11": {
        loc: {
          start: {
            line: 69,
            column: 16
          },
          end: {
            line: 69,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 16
          },
          end: {
            line: 69,
            column: 22
          }
        }, {
          start: {
            line: 69,
            column: 26
          },
          end: {
            line: 69,
            column: 36
          }
        }],
        line: 69
      },
      "12": {
        loc: {
          start: {
            line: 99,
            column: 28
          },
          end: {
            line: 99,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 99,
            column: 37
          },
          end: {
            line: 99,
            column: 39
          }
        }],
        line: 99
      },
      "13": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "14": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "15": {
        loc: {
          start: {
            line: 123,
            column: 20
          },
          end: {
            line: 123,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 31
          },
          end: {
            line: 123,
            column: 41
          }
        }, {
          start: {
            line: 123,
            column: 44
          },
          end: {
            line: 123,
            column: 54
          }
        }],
        line: 123
      },
      "16": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "17": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "18": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "19": {
        loc: {
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "20": {
        loc: {
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 173,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 173,
            column: 31
          }
        }, {
          start: {
            line: 173,
            column: 35
          },
          end: {
            line: 173,
            column: 50
          }
        }],
        line: 173
      },
      "21": {
        loc: {
          start: {
            line: 184,
            column: 28
          },
          end: {
            line: 184,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 28
          },
          end: {
            line: 184,
            column: 32
          }
        }, {
          start: {
            line: 184,
            column: 36
          },
          end: {
            line: 184,
            column: 60
          }
        }],
        line: 184
      },
      "22": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "23": {
        loc: {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "24": {
        loc: {
          start: {
            line: 212,
            column: 59
          },
          end: {
            line: 212,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 212,
            column: 74
          },
          end: {
            line: 212,
            column: 76
          }
        }],
        line: 212
      },
      "25": {
        loc: {
          start: {
            line: 212,
            column: 78
          },
          end: {
            line: 212,
            column: 91
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 212,
            column: 89
          },
          end: {
            line: 212,
            column: 91
          }
        }],
        line: 212
      },
      "26": {
        loc: {
          start: {
            line: 212,
            column: 93
          },
          end: {
            line: 212,
            column: 110
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 212,
            column: 109
          },
          end: {
            line: 212,
            column: 110
          }
        }],
        line: 212
      },
      "27": {
        loc: {
          start: {
            line: 212,
            column: 112
          },
          end: {
            line: 212,
            column: 125
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 212,
            column: 124
          },
          end: {
            line: 212,
            column: 125
          }
        }],
        line: 212
      },
      "28": {
        loc: {
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "29": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "30": {
        loc: {
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "31": {
        loc: {
          start: {
            line: 263,
            column: 67
          },
          end: {
            line: 263,
            column: 75
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 263,
            column: 74
          },
          end: {
            line: 263,
            column: 75
          }
        }],
        line: 263
      },
      "32": {
        loc: {
          start: {
            line: 263,
            column: 77
          },
          end: {
            line: 263,
            column: 87
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 263,
            column: 85
          },
          end: {
            line: 263,
            column: 87
          }
        }],
        line: 263
      },
      "33": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        }, {
          start: {
            line: 284,
            column: 13
          },
          end: {
            line: 286,
            column: 9
          }
        }],
        line: 281
      },
      "34": {
        loc: {
          start: {
            line: 284,
            column: 13
          },
          end: {
            line: 286,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 13
          },
          end: {
            line: 286,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "35": {
        loc: {
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "36": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "37": {
        loc: {
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "38": {
        loc: {
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "39": {
        loc: {
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        }, {
          start: {
            line: 311,
            column: 17
          },
          end: {
            line: 313,
            column: 13
          }
        }],
        line: 305
      },
      "40": {
        loc: {
          start: {
            line: 307,
            column: 16
          },
          end: {
            line: 309,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 16
          },
          end: {
            line: 309,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "41": {
        loc: {
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0],
      "26": [0],
      "27": [0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0],
      "32": [0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/leave/leaveService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/services/leave/leaveService.ts"],
      sourcesContent: ["import { leaveModel, Leave, CreateLeaveData, UpdateLeaveData } from '../../models/leave/Leave';\nimport { leaveBalanceModel, LeaveBalance } from '../../models/leave/LeaveBalance';\nimport { employeeModel } from '../../models/hr/Employee';\nimport logger from '../../utils/logger';\n\nexport interface CreateLeaveRequestData {\n  employeeId: string;\n  leaveType: 'vacation' | 'sick' | 'maternity' | 'other';\n  startDate: Date;\n  endDate: Date;\n  reason?: string;\n}\n\nexport interface ApproveLeaveData {\n  leaveId: string;\n  approverId: string;\n  approved: boolean;\n  comments?: string;\n}\n\nexport interface LeaveWithDetails extends Leave {\n  employeeCode: string;\n  employeeName: string;\n  departmentName: string | null;\n  approverName: string | null;\n}\n\nexport interface LeaveBalanceSummary {\n  vacation: { total: number; used: number; available: number };\n  sick: { total: number; used: number; available: number };\n  maternity: { total: number; used: number; available: number };\n  other: { total: number; used: number; available: number };\n}\n\nexport class LeaveService {\n  /**\n   * Create a leave request\n   */\n  async createLeaveRequest(data: CreateLeaveRequestData): Promise<Leave> {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n\n    // Verify employee exists and is active\n    const employee = await employeeModel.findById(employeeId);\n    if (!employee) {\n      throw new Error('Employee not found');\n    }\n\n    if (employee.status !== 'active') {\n      throw new Error('Employee is not active');\n    }\n\n    // Validate dates\n    if (startDate >= endDate) {\n      throw new Error('Start date must be before end date');\n    }\n\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    if (startDate < today) {\n      throw new Error('Cannot request leave for past dates');\n    }\n\n    // Calculate total days (excluding weekends)\n    const totalDays = this.calculateWorkingDays(startDate, endDate);\n    if (totalDays <= 0) {\n      throw new Error('Leave period must include at least one working day');\n    }\n\n    // Check leave balance\n    const currentYear = new Date().getFullYear();\n    const leaveBalance = await leaveBalanceModel.findByEmployeeLeaveTypeAndYear(employeeId, leaveType, currentYear);\n    \n    if (leaveBalance) {\n      const availableDays = leaveBalance.balance;\n      if (availableDays < totalDays) {\n        throw new Error(`Insufficient leave balance. Available: ${availableDays} days, Requested: ${totalDays} days`);\n      }\n    } else {\n      // No leave balance record exists, create one with 0 balance\n      await leaveBalanceModel.createLeaveBalance({\n        employeeId,\n        leaveType,\n        balance: 0\n      });\n      throw new Error(`No leave balance available for ${leaveType} leave`);\n    }\n\n    // Check for overlapping leave requests\n    const overlappingLeaves = await leaveModel.checkOverlappingLeaves(employeeId, startDate, endDate);\n    if (overlappingLeaves.length > 0) {\n      throw new Error('Leave request overlaps with existing approved leave');\n    }\n\n    // Create the leave request\n    const leaveData: CreateLeaveData = {\n      employeeId,\n      leaveType,\n      startDate,\n      endDate,\n      totalDays,\n      ...(reason && { reason })\n    };\n\n    const leave = await leaveModel.createLeave(leaveData);\n\n    logger.info('Leave request created', {\n      leaveId: leave.id,\n      employeeId,\n      employeeCode: employee.employee_id,\n      leaveType,\n      startDate,\n      endDate,\n      totalDays,\n      reason\n    });\n\n    return leave;\n  }\n\n  /**\n   * Get leave request by ID\n   */\n  async getLeaveRequest(id: string): Promise<LeaveWithDetails | null> {\n    return await leaveModel.findByIdWithDetails(id);\n  }\n\n  /**\n   * Update leave request\n   */\n  async updateLeaveRequest(id: string, data: UpdateLeaveData): Promise<Leave | null> {\n    return await leaveModel.updateLeave(id, data);\n  }\n\n  /**\n   * List leave requests with filtering\n   */\n  async listLeaveRequests(params: {\n    page?: number;\n    limit?: number;\n    employeeId?: string;\n    departmentId?: string;\n    leaveType?: 'vacation' | 'sick' | 'maternity' | 'other';\n    status?: 'pending' | 'approved' | 'rejected';\n    startDate?: Date;\n    endDate?: Date;\n    search?: string;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n  } = {}): Promise<{\n    leaves: LeaveWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return await leaveModel.listLeaves(params);\n  }\n\n  /**\n   * Get pending requests for a department head\n   */\n  async getPendingRequestsForDepartmentHead(departmentHeadUserId: string): Promise<LeaveWithDetails[]> {\n    return await leaveModel.getPendingRequestsForDepartmentHead(departmentHeadUserId);\n  }\n\n  /**\n   * Approve or reject a leave request\n   */\n  async approveLeaveRequest(data: ApproveLeaveData): Promise<Leave> {\n    const { leaveId, approverId, approved, comments } = data;\n\n    // Get the leave request\n    const leave = await leaveModel.findById(leaveId);\n    if (!leave) {\n      throw new Error('Leave request not found');\n    }\n\n    if (leave.status !== 'pending') {\n      throw new Error('Request has already been processed');\n    }\n\n    // Update the leave request status\n    const updateData: UpdateLeaveData = {\n      status: approved ? 'approved' : 'rejected',\n      approvedBy: approverId\n    };\n\n    const updatedLeave = await leaveModel.updateLeave(leaveId, updateData);\n    if (!updatedLeave) {\n      throw new Error('Failed to update leave request');\n    }\n\n    // If approved, update leave balance\n    if (approved) {\n      await this.updateLeaveBalance(updatedLeave);\n    }\n\n    logger.info('Leave request processed', {\n      leaveId,\n      approverId,\n      approved,\n      comments,\n      employeeId: leave.employeeId,\n      leaveType: leave.leaveType,\n      startDate: leave.startDate,\n      endDate: leave.endDate,\n      totalDays: leave.totalDays\n    });\n\n    return updatedLeave;\n  }\n\n  /**\n   * Update leave balance when leave is approved\n   */\n  private async updateLeaveBalance(leave: Leave): Promise<void> {\n    const currentYear = new Date().getFullYear();\n    \n    // Use leave days from balance\n    const updatedBalance = await leaveBalanceModel.useLeaveDays(\n      leave.employeeId, \n      leave.leaveType, \n      leave.totalDays, \n      currentYear\n    );\n\n    if (!updatedBalance) {\n      throw new Error('Failed to update leave balance - insufficient balance');\n    }\n\n    logger.info('Leave balance updated', {\n      leaveId: leave.id,\n      employeeId: leave.employeeId,\n      leaveType: leave.leaveType,\n      daysUsed: leave.totalDays,\n      remainingBalance: updatedBalance.balance\n    });\n  }\n\n  /**\n   * Calculate working days between two dates (excluding weekends)\n   */\n  private calculateWorkingDays(startDate: Date, endDate: Date): number {\n    let count = 0;\n    const current = new Date(startDate);\n    \n    while (current <= endDate) {\n      const dayOfWeek = current.getDay();\n      if (dayOfWeek !== 0 && dayOfWeek !== 6) { // Not Sunday (0) or Saturday (6)\n        count++;\n      }\n      current.setDate(current.getDate() + 1);\n    }\n    \n    return count;\n  }\n\n  /**\n   * Get leave balance for an employee\n   */\n  async getEmployeeLeaveBalance(employeeId: string, year?: number): Promise<LeaveBalanceSummary> {\n    const currentYear = year || new Date().getFullYear();\n    \n    let balances = await leaveBalanceModel.getEmployeeLeaveBalances(employeeId, currentYear);\n    \n    // If no leave balances exist, create default ones\n    if (balances.length === 0) {\n      logger.info('No leave balances found for employee, creating defaults', { employeeId, year: currentYear });\n      await this.initializeEmployeeLeaveBalance(employeeId, currentYear, 15, 10, 0, 0);\n      // Fetch the newly created balances\n      balances = await leaveBalanceModel.getEmployeeLeaveBalances(employeeId, currentYear);\n    }\n    \n    const summary: LeaveBalanceSummary = {\n      vacation: { total: 0, used: 0, available: 0 },\n      sick: { total: 0, used: 0, available: 0 },\n      maternity: { total: 0, used: 0, available: 0 },\n      other: { total: 0, used: 0, available: 0 }\n    };\n\n    balances.forEach(balance => {\n      const leaveType = balance.leaveType as keyof LeaveBalanceSummary;\n      if (summary[leaveType]) {\n        summary[leaveType].total = balance.balance;\n        summary[leaveType].used = 0; // We'll need to calculate this from leave records\n        summary[leaveType].available = balance.balance;\n      }\n    });\n\n    return summary;\n  }\n\n  /**\n   * Initialize leave balance for an employee\n   */\n  async initializeEmployeeLeaveBalance(\n    employeeId: string, \n    year: number,\n    vacationDays: number = 15,\n    sickDays: number = 10,\n    maternityDays: number = 0,\n    otherDays: number = 0\n  ): Promise<LeaveBalance[]> {\n    const balances: LeaveBalance[] = [];\n\n    // Create leave balances for each type\n    const leaveTypes = [\n      { type: 'vacation' as const, days: vacationDays },\n      { type: 'sick' as const, days: sickDays },\n      { type: 'maternity' as const, days: maternityDays },\n      { type: 'other' as const, days: otherDays }\n    ];\n\n    for (const { type, days } of leaveTypes) {\n      if (days > 0) {\n        const balance = await leaveBalanceModel.upsertLeaveBalance({\n          employeeId,\n          leaveType: type,\n          balance: days\n        });\n        balances.push(balance);\n      }\n    }\n\n    logger.info('Leave balance initialized for employee', {\n      employeeId,\n      year,\n      vacationDays,\n      sickDays,\n      maternityDays,\n      otherDays\n    });\n\n    return balances;\n  }\n\n  /**\n   * Get leave request statistics\n   */\n  async getLeaveStats(employeeId?: string, departmentId?: string): Promise<{\n    totalRequests: number;\n    pendingRequests: number;\n    approvedRequests: number;\n    rejectedRequests: number;\n    totalDays: number;\n    approvedDays: number;\n  }> {\n    return await leaveModel.getLeaveStats(employeeId, departmentId);\n  }\n\n  /**\n   * Delete leave request\n   */\n  async deleteLeaveRequest(id: string): Promise<boolean> {\n    const leave = await leaveModel.findById(id);\n    if (!leave) {\n      throw new Error('Leave request not found');\n    }\n\n    if (leave.status !== 'pending') {\n      throw new Error('Cannot delete processed requests');\n    }\n\n    return await leaveModel.deleteLeave(id);\n  }\n\n  /**\n   * Get leave requests for an employee\n   */\n  async getEmployeeLeaveRequests(\n    employeeId: string,\n    startDate?: Date,\n    endDate?: Date,\n    page: number = 1,\n    limit: number = 20\n  ): Promise<{\n    leaves: LeaveWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return await leaveModel.listLeaves({\n      employeeId,\n      startDate,\n      endDate,\n      page,\n      limit,\n      sortBy: 'created_at',\n      sortOrder: 'desc'\n    });\n  }\n\n  /**\n   * Validate leave request\n   */\n  async validateLeaveRequest(data: CreateLeaveRequestData): Promise<{\n    isValid: boolean;\n    errors: string[];\n  }> {\n    const errors: string[] = [];\n\n    // Check if employee exists\n    const employee = await employeeModel.findById(data.employeeId);\n    if (!employee) {\n      errors.push('Employee not found');\n    } else if (employee.status !== 'active') {\n      errors.push('Employee is not active');\n    }\n\n    // Validate dates\n    if (data.startDate >= data.endDate) {\n      errors.push('Start date must be before end date');\n    }\n\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    if (data.startDate < today) {\n      errors.push('Cannot request leave for past dates');\n    }\n\n    // Calculate total days\n    const totalDays = this.calculateWorkingDays(data.startDate, data.endDate);\n    if (totalDays <= 0) {\n      errors.push('Leave period must include at least one working day');\n    }\n\n    // Check leave balance\n    if (employee) {\n      const currentYear = new Date().getFullYear();\n      const leaveBalance = await leaveBalanceModel.findByEmployeeLeaveTypeAndYear(\n        data.employeeId, \n        data.leaveType, \n        currentYear\n      );\n      \n      if (leaveBalance) {\n        const availableDays = leaveBalance.balance;\n        if (availableDays < totalDays) {\n          errors.push(`Insufficient leave balance. Available: ${availableDays} days, Requested: ${totalDays} days`);\n        }\n      } else {\n        errors.push(`No leave balance available for ${data.leaveType} leave`);\n      }\n\n      // Check for overlapping requests\n      const overlappingLeaves = await leaveModel.checkOverlappingLeaves(data.employeeId, data.startDate, data.endDate);\n      if (overlappingLeaves.length > 0) {\n        errors.push('Leave request overlaps with existing approved leave');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Get leave calendar for an employee\n   */\n  async getEmployeeLeaveCalendar(employeeId: string, year: number): Promise<{\n    approvedLeaves: Array<{\n      id: string;\n      leaveType: string;\n      startDate: Date;\n      endDate: Date;\n      totalDays: number;\n      reason: string | null;\n    }>;\n    pendingLeaves: Array<{\n      id: string;\n      leaveType: string;\n      startDate: Date;\n      endDate: Date;\n      totalDays: number;\n      reason: string | null;\n    }>;\n  }> {\n    const startDate = new Date(year, 0, 1);\n    const endDate = new Date(year, 11, 31);\n\n    const result = await leaveModel.listLeaves({\n      employeeId,\n      startDate,\n      endDate,\n      limit: 1000 // Get all leaves for the year\n    });\n\n    const approvedLeaves = result.leaves\n      .filter(leave => leave.status === 'approved')\n      .map(leave => ({\n        id: leave.id,\n        leaveType: leave.leaveType,\n        startDate: leave.startDate,\n        endDate: leave.endDate,\n        totalDays: leave.totalDays,\n        reason: leave.reason\n      }));\n\n    const pendingLeaves = result.leaves\n      .filter(leave => leave.status === 'pending')\n      .map(leave => ({\n        id: leave.id,\n        leaveType: leave.leaveType,\n        startDate: leave.startDate,\n        endDate: leave.endDate,\n        totalDays: leave.totalDays,\n        reason: leave.reason\n      }));\n\n    return {\n      approvedLeaves,\n      pendingLeaves\n    };\n  }\n}\n\nexport const leaveService = new LeaveService();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a5af0db3e21412f5425ffb92d8c9a9e420da1b0a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1djk0uam3x = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1djk0uam3x();
var __importDefault =
/* istanbul ignore next */
(cov_1djk0uam3x().s[0]++,
/* istanbul ignore next */
(cov_1djk0uam3x().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1djk0uam3x().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1djk0uam3x().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1djk0uam3x().f[0]++;
  cov_1djk0uam3x().s[1]++;
  return /* istanbul ignore next */(cov_1djk0uam3x().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1djk0uam3x().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1djk0uam3x().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1djk0uam3x().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1djk0uam3x().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1djk0uam3x().s[3]++;
exports.leaveService = exports.LeaveService = void 0;
const Leave_1 =
/* istanbul ignore next */
(cov_1djk0uam3x().s[4]++, require("../../models/leave/Leave"));
const LeaveBalance_1 =
/* istanbul ignore next */
(cov_1djk0uam3x().s[5]++, require("../../models/leave/LeaveBalance"));
const Employee_1 =
/* istanbul ignore next */
(cov_1djk0uam3x().s[6]++, require("../../models/hr/Employee"));
const logger_1 =
/* istanbul ignore next */
(cov_1djk0uam3x().s[7]++, __importDefault(require("../../utils/logger")));
class LeaveService {
  /**
   * Create a leave request
   */
  async createLeaveRequest(data) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[1]++;
    const {
      employeeId,
      leaveType,
      startDate,
      endDate,
      reason
    } =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[8]++, data);
    // Verify employee exists and is active
    const employee =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[9]++, await Employee_1.employeeModel.findById(employeeId));
    /* istanbul ignore next */
    cov_1djk0uam3x().s[10]++;
    if (!employee) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[3][0]++;
      cov_1djk0uam3x().s[11]++;
      throw new Error('Employee not found');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[3][1]++;
    }
    cov_1djk0uam3x().s[12]++;
    if (employee.status !== 'active') {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[4][0]++;
      cov_1djk0uam3x().s[13]++;
      throw new Error('Employee is not active');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[4][1]++;
    }
    // Validate dates
    cov_1djk0uam3x().s[14]++;
    if (startDate >= endDate) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[5][0]++;
      cov_1djk0uam3x().s[15]++;
      throw new Error('Start date must be before end date');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[5][1]++;
    }
    const today =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[16]++, new Date());
    /* istanbul ignore next */
    cov_1djk0uam3x().s[17]++;
    today.setHours(0, 0, 0, 0);
    /* istanbul ignore next */
    cov_1djk0uam3x().s[18]++;
    if (startDate < today) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[6][0]++;
      cov_1djk0uam3x().s[19]++;
      throw new Error('Cannot request leave for past dates');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[6][1]++;
    }
    // Calculate total days (excluding weekends)
    const totalDays =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[20]++, this.calculateWorkingDays(startDate, endDate));
    /* istanbul ignore next */
    cov_1djk0uam3x().s[21]++;
    if (totalDays <= 0) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[7][0]++;
      cov_1djk0uam3x().s[22]++;
      throw new Error('Leave period must include at least one working day');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[7][1]++;
    }
    // Check leave balance
    const currentYear =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[23]++, new Date().getFullYear());
    const leaveBalance =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[24]++, await LeaveBalance_1.leaveBalanceModel.findByEmployeeLeaveTypeAndYear(employeeId, leaveType, currentYear));
    /* istanbul ignore next */
    cov_1djk0uam3x().s[25]++;
    if (leaveBalance) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[8][0]++;
      const availableDays =
      /* istanbul ignore next */
      (cov_1djk0uam3x().s[26]++, leaveBalance.balance);
      /* istanbul ignore next */
      cov_1djk0uam3x().s[27]++;
      if (availableDays < totalDays) {
        /* istanbul ignore next */
        cov_1djk0uam3x().b[9][0]++;
        cov_1djk0uam3x().s[28]++;
        throw new Error(`Insufficient leave balance. Available: ${availableDays} days, Requested: ${totalDays} days`);
      } else
      /* istanbul ignore next */
      {
        cov_1djk0uam3x().b[9][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[8][1]++;
      cov_1djk0uam3x().s[29]++;
      // No leave balance record exists, create one with 0 balance
      await LeaveBalance_1.leaveBalanceModel.createLeaveBalance({
        employeeId,
        leaveType,
        balance: 0
      });
      /* istanbul ignore next */
      cov_1djk0uam3x().s[30]++;
      throw new Error(`No leave balance available for ${leaveType} leave`);
    }
    // Check for overlapping leave requests
    const overlappingLeaves =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[31]++, await Leave_1.leaveModel.checkOverlappingLeaves(employeeId, startDate, endDate));
    /* istanbul ignore next */
    cov_1djk0uam3x().s[32]++;
    if (overlappingLeaves.length > 0) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[10][0]++;
      cov_1djk0uam3x().s[33]++;
      throw new Error('Leave request overlaps with existing approved leave');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[10][1]++;
    }
    // Create the leave request
    const leaveData =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[34]++, {
      employeeId,
      leaveType,
      startDate,
      endDate,
      totalDays,
      ...(
      /* istanbul ignore next */
      (cov_1djk0uam3x().b[11][0]++, reason) &&
      /* istanbul ignore next */
      (cov_1djk0uam3x().b[11][1]++, {
        reason
      }))
    });
    const leave =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[35]++, await Leave_1.leaveModel.createLeave(leaveData));
    /* istanbul ignore next */
    cov_1djk0uam3x().s[36]++;
    logger_1.default.info('Leave request created', {
      leaveId: leave.id,
      employeeId,
      employeeCode: employee.employee_id,
      leaveType,
      startDate,
      endDate,
      totalDays,
      reason
    });
    /* istanbul ignore next */
    cov_1djk0uam3x().s[37]++;
    return leave;
  }
  /**
   * Get leave request by ID
   */
  async getLeaveRequest(id) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[2]++;
    cov_1djk0uam3x().s[38]++;
    return await Leave_1.leaveModel.findByIdWithDetails(id);
  }
  /**
   * Update leave request
   */
  async updateLeaveRequest(id, data) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[3]++;
    cov_1djk0uam3x().s[39]++;
    return await Leave_1.leaveModel.updateLeave(id, data);
  }
  /**
   * List leave requests with filtering
   */
  async listLeaveRequests(params =
  /* istanbul ignore next */
  (cov_1djk0uam3x().b[12][0]++, {})) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[4]++;
    cov_1djk0uam3x().s[40]++;
    return await Leave_1.leaveModel.listLeaves(params);
  }
  /**
   * Get pending requests for a department head
   */
  async getPendingRequestsForDepartmentHead(departmentHeadUserId) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[5]++;
    cov_1djk0uam3x().s[41]++;
    return await Leave_1.leaveModel.getPendingRequestsForDepartmentHead(departmentHeadUserId);
  }
  /**
   * Approve or reject a leave request
   */
  async approveLeaveRequest(data) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[6]++;
    const {
      leaveId,
      approverId,
      approved,
      comments
    } =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[42]++, data);
    // Get the leave request
    const leave =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[43]++, await Leave_1.leaveModel.findById(leaveId));
    /* istanbul ignore next */
    cov_1djk0uam3x().s[44]++;
    if (!leave) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[13][0]++;
      cov_1djk0uam3x().s[45]++;
      throw new Error('Leave request not found');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[13][1]++;
    }
    cov_1djk0uam3x().s[46]++;
    if (leave.status !== 'pending') {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[14][0]++;
      cov_1djk0uam3x().s[47]++;
      throw new Error('Request has already been processed');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[14][1]++;
    }
    // Update the leave request status
    const updateData =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[48]++, {
      status: approved ?
      /* istanbul ignore next */
      (cov_1djk0uam3x().b[15][0]++, 'approved') :
      /* istanbul ignore next */
      (cov_1djk0uam3x().b[15][1]++, 'rejected'),
      approvedBy: approverId
    });
    const updatedLeave =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[49]++, await Leave_1.leaveModel.updateLeave(leaveId, updateData));
    /* istanbul ignore next */
    cov_1djk0uam3x().s[50]++;
    if (!updatedLeave) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[16][0]++;
      cov_1djk0uam3x().s[51]++;
      throw new Error('Failed to update leave request');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[16][1]++;
    }
    // If approved, update leave balance
    cov_1djk0uam3x().s[52]++;
    if (approved) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[17][0]++;
      cov_1djk0uam3x().s[53]++;
      await this.updateLeaveBalance(updatedLeave);
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[17][1]++;
    }
    cov_1djk0uam3x().s[54]++;
    logger_1.default.info('Leave request processed', {
      leaveId,
      approverId,
      approved,
      comments,
      employeeId: leave.employeeId,
      leaveType: leave.leaveType,
      startDate: leave.startDate,
      endDate: leave.endDate,
      totalDays: leave.totalDays
    });
    /* istanbul ignore next */
    cov_1djk0uam3x().s[55]++;
    return updatedLeave;
  }
  /**
   * Update leave balance when leave is approved
   */
  async updateLeaveBalance(leave) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[7]++;
    const currentYear =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[56]++, new Date().getFullYear());
    // Use leave days from balance
    const updatedBalance =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[57]++, await LeaveBalance_1.leaveBalanceModel.useLeaveDays(leave.employeeId, leave.leaveType, leave.totalDays, currentYear));
    /* istanbul ignore next */
    cov_1djk0uam3x().s[58]++;
    if (!updatedBalance) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[18][0]++;
      cov_1djk0uam3x().s[59]++;
      throw new Error('Failed to update leave balance - insufficient balance');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[18][1]++;
    }
    cov_1djk0uam3x().s[60]++;
    logger_1.default.info('Leave balance updated', {
      leaveId: leave.id,
      employeeId: leave.employeeId,
      leaveType: leave.leaveType,
      daysUsed: leave.totalDays,
      remainingBalance: updatedBalance.balance
    });
  }
  /**
   * Calculate working days between two dates (excluding weekends)
   */
  calculateWorkingDays(startDate, endDate) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[8]++;
    let count =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[61]++, 0);
    const current =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[62]++, new Date(startDate));
    /* istanbul ignore next */
    cov_1djk0uam3x().s[63]++;
    while (current <= endDate) {
      const dayOfWeek =
      /* istanbul ignore next */
      (cov_1djk0uam3x().s[64]++, current.getDay());
      /* istanbul ignore next */
      cov_1djk0uam3x().s[65]++;
      if (
      /* istanbul ignore next */
      (cov_1djk0uam3x().b[20][0]++, dayOfWeek !== 0) &&
      /* istanbul ignore next */
      (cov_1djk0uam3x().b[20][1]++, dayOfWeek !== 6)) {
        /* istanbul ignore next */
        cov_1djk0uam3x().b[19][0]++;
        cov_1djk0uam3x().s[66]++;
        // Not Sunday (0) or Saturday (6)
        count++;
      } else
      /* istanbul ignore next */
      {
        cov_1djk0uam3x().b[19][1]++;
      }
      cov_1djk0uam3x().s[67]++;
      current.setDate(current.getDate() + 1);
    }
    /* istanbul ignore next */
    cov_1djk0uam3x().s[68]++;
    return count;
  }
  /**
   * Get leave balance for an employee
   */
  async getEmployeeLeaveBalance(employeeId, year) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[9]++;
    const currentYear =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[69]++,
    /* istanbul ignore next */
    (cov_1djk0uam3x().b[21][0]++, year) ||
    /* istanbul ignore next */
    (cov_1djk0uam3x().b[21][1]++, new Date().getFullYear()));
    let balances =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[70]++, await LeaveBalance_1.leaveBalanceModel.getEmployeeLeaveBalances(employeeId, currentYear));
    // If no leave balances exist, create default ones
    /* istanbul ignore next */
    cov_1djk0uam3x().s[71]++;
    if (balances.length === 0) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[22][0]++;
      cov_1djk0uam3x().s[72]++;
      logger_1.default.info('No leave balances found for employee, creating defaults', {
        employeeId,
        year: currentYear
      });
      /* istanbul ignore next */
      cov_1djk0uam3x().s[73]++;
      await this.initializeEmployeeLeaveBalance(employeeId, currentYear, 15, 10, 0, 0);
      // Fetch the newly created balances
      /* istanbul ignore next */
      cov_1djk0uam3x().s[74]++;
      balances = await LeaveBalance_1.leaveBalanceModel.getEmployeeLeaveBalances(employeeId, currentYear);
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[22][1]++;
    }
    const summary =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[75]++, {
      vacation: {
        total: 0,
        used: 0,
        available: 0
      },
      sick: {
        total: 0,
        used: 0,
        available: 0
      },
      maternity: {
        total: 0,
        used: 0,
        available: 0
      },
      other: {
        total: 0,
        used: 0,
        available: 0
      }
    });
    /* istanbul ignore next */
    cov_1djk0uam3x().s[76]++;
    balances.forEach(balance => {
      /* istanbul ignore next */
      cov_1djk0uam3x().f[10]++;
      const leaveType =
      /* istanbul ignore next */
      (cov_1djk0uam3x().s[77]++, balance.leaveType);
      /* istanbul ignore next */
      cov_1djk0uam3x().s[78]++;
      if (summary[leaveType]) {
        /* istanbul ignore next */
        cov_1djk0uam3x().b[23][0]++;
        cov_1djk0uam3x().s[79]++;
        summary[leaveType].total = balance.balance;
        /* istanbul ignore next */
        cov_1djk0uam3x().s[80]++;
        summary[leaveType].used = 0; // We'll need to calculate this from leave records
        /* istanbul ignore next */
        cov_1djk0uam3x().s[81]++;
        summary[leaveType].available = balance.balance;
      } else
      /* istanbul ignore next */
      {
        cov_1djk0uam3x().b[23][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1djk0uam3x().s[82]++;
    return summary;
  }
  /**
   * Initialize leave balance for an employee
   */
  async initializeEmployeeLeaveBalance(employeeId, year, vacationDays =
  /* istanbul ignore next */
  (cov_1djk0uam3x().b[24][0]++, 15), sickDays =
  /* istanbul ignore next */
  (cov_1djk0uam3x().b[25][0]++, 10), maternityDays =
  /* istanbul ignore next */
  (cov_1djk0uam3x().b[26][0]++, 0), otherDays =
  /* istanbul ignore next */
  (cov_1djk0uam3x().b[27][0]++, 0)) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[11]++;
    const balances =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[83]++, []);
    // Create leave balances for each type
    const leaveTypes =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[84]++, [{
      type: 'vacation',
      days: vacationDays
    }, {
      type: 'sick',
      days: sickDays
    }, {
      type: 'maternity',
      days: maternityDays
    }, {
      type: 'other',
      days: otherDays
    }]);
    /* istanbul ignore next */
    cov_1djk0uam3x().s[85]++;
    for (const {
      type,
      days
    } of leaveTypes) {
      /* istanbul ignore next */
      cov_1djk0uam3x().s[86]++;
      if (days > 0) {
        /* istanbul ignore next */
        cov_1djk0uam3x().b[28][0]++;
        const balance =
        /* istanbul ignore next */
        (cov_1djk0uam3x().s[87]++, await LeaveBalance_1.leaveBalanceModel.upsertLeaveBalance({
          employeeId,
          leaveType: type,
          balance: days
        }));
        /* istanbul ignore next */
        cov_1djk0uam3x().s[88]++;
        balances.push(balance);
      } else
      /* istanbul ignore next */
      {
        cov_1djk0uam3x().b[28][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1djk0uam3x().s[89]++;
    logger_1.default.info('Leave balance initialized for employee', {
      employeeId,
      year,
      vacationDays,
      sickDays,
      maternityDays,
      otherDays
    });
    /* istanbul ignore next */
    cov_1djk0uam3x().s[90]++;
    return balances;
  }
  /**
   * Get leave request statistics
   */
  async getLeaveStats(employeeId, departmentId) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[12]++;
    cov_1djk0uam3x().s[91]++;
    return await Leave_1.leaveModel.getLeaveStats(employeeId, departmentId);
  }
  /**
   * Delete leave request
   */
  async deleteLeaveRequest(id) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[13]++;
    const leave =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[92]++, await Leave_1.leaveModel.findById(id));
    /* istanbul ignore next */
    cov_1djk0uam3x().s[93]++;
    if (!leave) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[29][0]++;
      cov_1djk0uam3x().s[94]++;
      throw new Error('Leave request not found');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[29][1]++;
    }
    cov_1djk0uam3x().s[95]++;
    if (leave.status !== 'pending') {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[30][0]++;
      cov_1djk0uam3x().s[96]++;
      throw new Error('Cannot delete processed requests');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[30][1]++;
    }
    cov_1djk0uam3x().s[97]++;
    return await Leave_1.leaveModel.deleteLeave(id);
  }
  /**
   * Get leave requests for an employee
   */
  async getEmployeeLeaveRequests(employeeId, startDate, endDate, page =
  /* istanbul ignore next */
  (cov_1djk0uam3x().b[31][0]++, 1), limit =
  /* istanbul ignore next */
  (cov_1djk0uam3x().b[32][0]++, 20)) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[14]++;
    cov_1djk0uam3x().s[98]++;
    return await Leave_1.leaveModel.listLeaves({
      employeeId,
      startDate,
      endDate,
      page,
      limit,
      sortBy: 'created_at',
      sortOrder: 'desc'
    });
  }
  /**
   * Validate leave request
   */
  async validateLeaveRequest(data) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[15]++;
    const errors =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[99]++, []);
    // Check if employee exists
    const employee =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[100]++, await Employee_1.employeeModel.findById(data.employeeId));
    /* istanbul ignore next */
    cov_1djk0uam3x().s[101]++;
    if (!employee) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[33][0]++;
      cov_1djk0uam3x().s[102]++;
      errors.push('Employee not found');
    } else {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[33][1]++;
      cov_1djk0uam3x().s[103]++;
      if (employee.status !== 'active') {
        /* istanbul ignore next */
        cov_1djk0uam3x().b[34][0]++;
        cov_1djk0uam3x().s[104]++;
        errors.push('Employee is not active');
      } else
      /* istanbul ignore next */
      {
        cov_1djk0uam3x().b[34][1]++;
      }
    }
    // Validate dates
    /* istanbul ignore next */
    cov_1djk0uam3x().s[105]++;
    if (data.startDate >= data.endDate) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[35][0]++;
      cov_1djk0uam3x().s[106]++;
      errors.push('Start date must be before end date');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[35][1]++;
    }
    const today =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[107]++, new Date());
    /* istanbul ignore next */
    cov_1djk0uam3x().s[108]++;
    today.setHours(0, 0, 0, 0);
    /* istanbul ignore next */
    cov_1djk0uam3x().s[109]++;
    if (data.startDate < today) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[36][0]++;
      cov_1djk0uam3x().s[110]++;
      errors.push('Cannot request leave for past dates');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[36][1]++;
    }
    // Calculate total days
    const totalDays =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[111]++, this.calculateWorkingDays(data.startDate, data.endDate));
    /* istanbul ignore next */
    cov_1djk0uam3x().s[112]++;
    if (totalDays <= 0) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[37][0]++;
      cov_1djk0uam3x().s[113]++;
      errors.push('Leave period must include at least one working day');
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[37][1]++;
    }
    // Check leave balance
    cov_1djk0uam3x().s[114]++;
    if (employee) {
      /* istanbul ignore next */
      cov_1djk0uam3x().b[38][0]++;
      const currentYear =
      /* istanbul ignore next */
      (cov_1djk0uam3x().s[115]++, new Date().getFullYear());
      const leaveBalance =
      /* istanbul ignore next */
      (cov_1djk0uam3x().s[116]++, await LeaveBalance_1.leaveBalanceModel.findByEmployeeLeaveTypeAndYear(data.employeeId, data.leaveType, currentYear));
      /* istanbul ignore next */
      cov_1djk0uam3x().s[117]++;
      if (leaveBalance) {
        /* istanbul ignore next */
        cov_1djk0uam3x().b[39][0]++;
        const availableDays =
        /* istanbul ignore next */
        (cov_1djk0uam3x().s[118]++, leaveBalance.balance);
        /* istanbul ignore next */
        cov_1djk0uam3x().s[119]++;
        if (availableDays < totalDays) {
          /* istanbul ignore next */
          cov_1djk0uam3x().b[40][0]++;
          cov_1djk0uam3x().s[120]++;
          errors.push(`Insufficient leave balance. Available: ${availableDays} days, Requested: ${totalDays} days`);
        } else
        /* istanbul ignore next */
        {
          cov_1djk0uam3x().b[40][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_1djk0uam3x().b[39][1]++;
        cov_1djk0uam3x().s[121]++;
        errors.push(`No leave balance available for ${data.leaveType} leave`);
      }
      // Check for overlapping requests
      const overlappingLeaves =
      /* istanbul ignore next */
      (cov_1djk0uam3x().s[122]++, await Leave_1.leaveModel.checkOverlappingLeaves(data.employeeId, data.startDate, data.endDate));
      /* istanbul ignore next */
      cov_1djk0uam3x().s[123]++;
      if (overlappingLeaves.length > 0) {
        /* istanbul ignore next */
        cov_1djk0uam3x().b[41][0]++;
        cov_1djk0uam3x().s[124]++;
        errors.push('Leave request overlaps with existing approved leave');
      } else
      /* istanbul ignore next */
      {
        cov_1djk0uam3x().b[41][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1djk0uam3x().b[38][1]++;
    }
    cov_1djk0uam3x().s[125]++;
    return {
      isValid: errors.length === 0,
      errors
    };
  }
  /**
   * Get leave calendar for an employee
   */
  async getEmployeeLeaveCalendar(employeeId, year) {
    /* istanbul ignore next */
    cov_1djk0uam3x().f[16]++;
    const startDate =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[126]++, new Date(year, 0, 1));
    const endDate =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[127]++, new Date(year, 11, 31));
    const result =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[128]++, await Leave_1.leaveModel.listLeaves({
      employeeId,
      startDate,
      endDate,
      limit: 1000 // Get all leaves for the year
    }));
    const approvedLeaves =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[129]++, result.leaves.filter(leave => {
      /* istanbul ignore next */
      cov_1djk0uam3x().f[17]++;
      cov_1djk0uam3x().s[130]++;
      return leave.status === 'approved';
    }).map(leave => {
      /* istanbul ignore next */
      cov_1djk0uam3x().f[18]++;
      cov_1djk0uam3x().s[131]++;
      return {
        id: leave.id,
        leaveType: leave.leaveType,
        startDate: leave.startDate,
        endDate: leave.endDate,
        totalDays: leave.totalDays,
        reason: leave.reason
      };
    }));
    const pendingLeaves =
    /* istanbul ignore next */
    (cov_1djk0uam3x().s[132]++, result.leaves.filter(leave => {
      /* istanbul ignore next */
      cov_1djk0uam3x().f[19]++;
      cov_1djk0uam3x().s[133]++;
      return leave.status === 'pending';
    }).map(leave => {
      /* istanbul ignore next */
      cov_1djk0uam3x().f[20]++;
      cov_1djk0uam3x().s[134]++;
      return {
        id: leave.id,
        leaveType: leave.leaveType,
        startDate: leave.startDate,
        endDate: leave.endDate,
        totalDays: leave.totalDays,
        reason: leave.reason
      };
    }));
    /* istanbul ignore next */
    cov_1djk0uam3x().s[135]++;
    return {
      approvedLeaves,
      pendingLeaves
    };
  }
}
/* istanbul ignore next */
cov_1djk0uam3x().s[136]++;
exports.LeaveService = LeaveService;
/* istanbul ignore next */
cov_1djk0uam3x().s[137]++;
exports.leaveService = new LeaveService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,