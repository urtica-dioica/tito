{"version":3,"names":["cov_1nwl1wd7ui","actualCoverage","s","express_1","require","schedulerController_1","authenticate_1","authorize_1","roles_1","router","Router","get","authenticate","authorize","USER_ROLES","HR","schedulerController","getStatus","bind","post","start","stop","triggerSelfieCleanup","triggerAuditLogCleanup","exports","default"],"sources":["/home/kim/tito/server/src/routes/scheduler/schedulerRoutes.ts"],"sourcesContent":["import { Router } from 'express';\nimport { schedulerController } from '../../controllers/scheduler/schedulerController';\nimport { authenticate } from '../../middleware/auth/authenticate';\nimport { authorize } from '../../middleware/auth/authorize';\nimport { USER_ROLES } from '../../utils/constants/roles';\n\nconst router = Router();\n\n/**\n * Scheduler Management Routes\n * These routes require HR admin access for security\n */\n\n// Get scheduler status\nrouter.get('/status', \n  authenticate, \n  authorize([USER_ROLES.HR]), \n  schedulerController.getStatus.bind(schedulerController)\n);\n\n// Start scheduler service\nrouter.post('/start', \n  authenticate, \n  authorize([USER_ROLES.HR]), \n  schedulerController.start.bind(schedulerController)\n);\n\n// Stop scheduler service\nrouter.post('/stop', \n  authenticate, \n  authorize([USER_ROLES.HR]), \n  schedulerController.stop.bind(schedulerController)\n);\n\n// Manually trigger selfie cleanup\nrouter.post('/cleanup/selfies', \n  authenticate, \n  authorize([USER_ROLES.HR]), \n  schedulerController.triggerSelfieCleanup.bind(schedulerController)\n);\n\n// Manually trigger audit log cleanup\nrouter.post('/cleanup/audit-logs', \n  authenticate, \n  authorize([USER_ROLES.HR]), \n  schedulerController.triggerAuditLogCleanup.bind(schedulerController)\n);\n\nexport default router;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqBY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;AArBZ,MAAAC,SAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAC,qBAAA;AAAA;AAAA,CAAAL,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAE,cAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAG,WAAA;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAI,OAAA;AAAA;AAAA,CAAAR,cAAA,GAAAE,CAAA,OAAAE,OAAA;AAEA,MAAMK,MAAM;AAAA;AAAA,CAAAT,cAAA,GAAAE,CAAA,OAAG,IAAAC,SAAA,CAAAO,MAAM,GAAE;AAEvB;;;;AAKA;AAAA;AAAAV,cAAA,GAAAE,CAAA;AACAO,MAAM,CAACE,GAAG,CAAC,SAAS,EAClBL,cAAA,CAAAM,YAAY,EACZ,IAAAL,WAAA,CAAAM,SAAS,EAAC,CAACL,OAAA,CAAAM,UAAU,CAACC,EAAE,CAAC,CAAC,EAC1BV,qBAAA,CAAAW,mBAAmB,CAACC,SAAS,CAACC,IAAI,CAACb,qBAAA,CAAAW,mBAAmB,CAAC,CACxD;AAED;AAAA;AAAAhB,cAAA,GAAAE,CAAA;AACAO,MAAM,CAACU,IAAI,CAAC,QAAQ,EAClBb,cAAA,CAAAM,YAAY,EACZ,IAAAL,WAAA,CAAAM,SAAS,EAAC,CAACL,OAAA,CAAAM,UAAU,CAACC,EAAE,CAAC,CAAC,EAC1BV,qBAAA,CAAAW,mBAAmB,CAACI,KAAK,CAACF,IAAI,CAACb,qBAAA,CAAAW,mBAAmB,CAAC,CACpD;AAED;AAAA;AAAAhB,cAAA,GAAAE,CAAA;AACAO,MAAM,CAACU,IAAI,CAAC,OAAO,EACjBb,cAAA,CAAAM,YAAY,EACZ,IAAAL,WAAA,CAAAM,SAAS,EAAC,CAACL,OAAA,CAAAM,UAAU,CAACC,EAAE,CAAC,CAAC,EAC1BV,qBAAA,CAAAW,mBAAmB,CAACK,IAAI,CAACH,IAAI,CAACb,qBAAA,CAAAW,mBAAmB,CAAC,CACnD;AAED;AAAA;AAAAhB,cAAA,GAAAE,CAAA;AACAO,MAAM,CAACU,IAAI,CAAC,kBAAkB,EAC5Bb,cAAA,CAAAM,YAAY,EACZ,IAAAL,WAAA,CAAAM,SAAS,EAAC,CAACL,OAAA,CAAAM,UAAU,CAACC,EAAE,CAAC,CAAC,EAC1BV,qBAAA,CAAAW,mBAAmB,CAACM,oBAAoB,CAACJ,IAAI,CAACb,qBAAA,CAAAW,mBAAmB,CAAC,CACnE;AAED;AAAA;AAAAhB,cAAA,GAAAE,CAAA;AACAO,MAAM,CAACU,IAAI,CAAC,qBAAqB,EAC/Bb,cAAA,CAAAM,YAAY,EACZ,IAAAL,WAAA,CAAAM,SAAS,EAAC,CAACL,OAAA,CAAAM,UAAU,CAACC,EAAE,CAAC,CAAC,EAC1BV,qBAAA,CAAAW,mBAAmB,CAACO,sBAAsB,CAACL,IAAI,CAACb,qBAAA,CAAAW,mBAAmB,CAAC,CACrE;AAAC;AAAAhB,cAAA,GAAAE,CAAA;AAEFsB,OAAA,CAAAC,OAAA,GAAehB,MAAM","ignoreList":[]}