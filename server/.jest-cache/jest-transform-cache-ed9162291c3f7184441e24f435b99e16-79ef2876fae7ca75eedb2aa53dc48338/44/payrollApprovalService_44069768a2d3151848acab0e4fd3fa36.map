{"version":3,"names":["PayrollApproval_1","cov_2217y0ag8r","s","require","logger_1","__importDefault","PayrollApprovalService","constructor","f","payrollApprovalModel","PayrollApprovalModel","createPayrollApproval","data","getPool","Promise","resolve","then","__importStar","pool","periodQuery","periodResult","query","payrollPeriodId","rows","length","b","Error","period","status","existingQuery","existingResult","approverId","getPayrollApproval","id","findByIdWithDetails","updatePayrollApproval","listPayrollApprovals","params","getPendingApprovalsForApprover","approvePayrollApproval","approval","findById","approvalId","updateData","approved","comments","approvedAt","Date","updatedApproval","checkAndUpdatePayrollPeriodStatus","createApprovalsForPayrollPeriod","approversQuery","approversResult","approvals","approver","employeeCountQuery","employeeCountResult","department_id","employeeCount","parseInt","employee_count","approvalData","user_id","departmentId","push","default","info","department_name","error","message","includes","getPayrollApprovalStats","basicStats","getApprovalStats","avgTimeQuery","avgTimeResult","averageApprovalTime","parseFloat","avg_hours","deletePayrollApproval","approvalsQuery","approvalsResult","totalApprovals","reduce","sum","row","count","approvedCount","find","r","rejectedCount","newStatus","updateQuery","resetApprovalStatusForPeriod","getApprovalWorkflowStatus","map","approverName","approver_name","departmentName","approved_at","pendingApprovals","filter","a","approvedApprovals","rejectedApprovals","periodId","periodName","period_name","periodStatus","exports","payrollApprovalService"],"sources":["/home/kim/tito/server/src/services/payroll/payrollApprovalService.ts"],"sourcesContent":["import { PayrollApprovalModel, CreatePayrollApprovalData, UpdatePayrollApprovalData, PayrollApproval, PayrollApprovalWithDetails, PayrollApprovalListParams } from '../../models/payroll/PayrollApproval';\nimport logger from '../../utils/logger';\n\nexport interface ApprovePayrollData {\n  approvalId: string;\n  approverId: string;\n  approved: boolean;\n  comments?: string;\n}\n\nexport interface PayrollApprovalStats {\n  totalApprovals: number;\n  pendingApprovals: number;\n  approvedApprovals: number;\n  rejectedApprovals: number;\n  approvalsByDepartment: Array<{ departmentName: string; count: number }>;\n  approvalsByApprover: Array<{ approverName: string; count: number }>;\n  averageApprovalTime: number; // in hours\n}\n\nexport class PayrollApprovalService {\n  private payrollApprovalModel: PayrollApprovalModel;\n\n  constructor() {\n    this.payrollApprovalModel = new PayrollApprovalModel();\n  }\n\n  async createPayrollApproval(data: CreatePayrollApprovalData): Promise<PayrollApproval> {\n    // Validate that the payroll period exists and is in the correct status\n    const { getPool } = await import('../../config/database');\n    const pool = getPool();\n    \n    const periodQuery = 'SELECT id, status FROM payroll_periods WHERE id = $1';\n    const periodResult = await pool.query(periodQuery, [data.payrollPeriodId]);\n    \n    if (periodResult.rows.length === 0) {\n      throw new Error('Payroll period not found');\n    }\n    \n    const period = periodResult.rows[0];\n    if (period.status !== 'sent_for_review') {\n      throw new Error('Payroll period must be in \"sent_for_review\" status to create approvals');\n    }\n\n    // Check if approval already exists for this period and approver\n    const existingQuery = `\n      SELECT id FROM payroll_approvals \n      WHERE payroll_period_id = $1 AND approver_id = $2\n    `;\n    const existingResult = await pool.query(existingQuery, [data.payrollPeriodId, data.approverId]);\n    \n    if (existingResult.rows.length > 0) {\n      throw new Error('Approval already exists for this payroll period and approver');\n    }\n\n    return await this.payrollApprovalModel.createPayrollApproval(data);\n  }\n\n  async getPayrollApproval(id: string): Promise<PayrollApprovalWithDetails | null> {\n    return await this.payrollApprovalModel.findByIdWithDetails(id);\n  }\n\n  async updatePayrollApproval(id: string, data: UpdatePayrollApprovalData): Promise<PayrollApproval | null> {\n    return await this.payrollApprovalModel.updatePayrollApproval(id, data);\n  }\n\n  async listPayrollApprovals(params: PayrollApprovalListParams = {}): Promise<{\n    approvals: PayrollApprovalWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return await this.payrollApprovalModel.listPayrollApprovals(params);\n  }\n\n  async getPendingApprovalsForApprover(approverId: string): Promise<PayrollApprovalWithDetails[]> {\n    return await this.payrollApprovalModel.getPendingApprovalsForApprover(approverId);\n  }\n\n  async approvePayrollApproval(data: ApprovePayrollData): Promise<PayrollApproval> {\n    const approval = await this.payrollApprovalModel.findById(data.approvalId);\n    if (!approval) {\n      throw new Error('Payroll approval not found');\n    }\n\n    if (approval.status !== 'pending') {\n      throw new Error('Payroll approval is not in pending status');\n    }\n\n    if (approval.approverId !== data.approverId) {\n      throw new Error('User is not authorized to approve this payroll');\n    }\n\n    const updateData: UpdatePayrollApprovalData = {\n      status: data.approved ? 'approved' : 'rejected',\n      comments: data.comments,\n      approvedAt: new Date()\n    };\n\n    const updatedApproval = await this.payrollApprovalModel.updatePayrollApproval(data.approvalId, updateData);\n    if (!updatedApproval) {\n      throw new Error('Failed to update payroll approval');\n    }\n\n    // Check if all approvals for this payroll period are now complete\n    await this.checkAndUpdatePayrollPeriodStatus(approval.payrollPeriodId);\n\n    return updatedApproval;\n  }\n\n  async createApprovalsForPayrollPeriod(payrollPeriodId: string): Promise<PayrollApproval[]> {\n    // Get all department heads who should approve payroll for their departments\n    const { getPool } = await import('../../config/database');\n    const pool = getPool();\n    \n    const approversQuery = `\n      SELECT DISTINCT u.id as user_id, u.role, d.id as department_id, d.name as department_name\n      FROM users u\n      INNER JOIN departments d ON u.id = d.department_head_user_id\n      WHERE u.role = 'department_head' AND u.is_active = true AND d.is_active = true\n    `;\n    \n    const approversResult = await pool.query(approversQuery);\n    const approvals: PayrollApproval[] = [];\n\n    for (const approver of approversResult.rows) {\n      try {\n        // Check if there are employees in this department for this payroll period\n        const employeeCountQuery = `\n          SELECT COUNT(*) as employee_count\n          FROM payroll_records pr\n          INNER JOIN employees e ON pr.employee_id = e.id\n          WHERE pr.payroll_period_id = $1 AND e.department_id = $2\n        `;\n        \n        const employeeCountResult = await pool.query(employeeCountQuery, [payrollPeriodId, approver.department_id]);\n        const employeeCount = parseInt(employeeCountResult.rows[0].employee_count);\n        \n        // Only create approval if there are employees in this department\n        if (employeeCount > 0) {\n          const approvalData: CreatePayrollApprovalData = {\n            payrollPeriodId,\n            approverId: approver.user_id,\n            departmentId: approver.department_id,\n            status: 'pending'\n          };\n\n          const approval = await this.payrollApprovalModel.createPayrollApproval(approvalData);\n          approvals.push(approval);\n          \n          logger.info(`Created payroll approval for department: ${approver.department_name} (${employeeCount} employees)`);\n        }\n      } catch (error) {\n        // Skip if approval already exists\n        if (error instanceof Error && error.message.includes('already exists')) {\n          continue;\n        }\n        throw error;\n      }\n    }\n\n    return approvals;\n  }\n\n  async getPayrollApprovalStats(): Promise<PayrollApprovalStats> {\n    const basicStats = await this.payrollApprovalModel.getApprovalStats();\n    \n    // Calculate average approval time\n    const { getPool } = await import('../../config/database');\n    const pool = getPool();\n    \n    const avgTimeQuery = `\n      SELECT AVG(EXTRACT(EPOCH FROM (approved_at - created_at))/3600) as avg_hours\n      FROM payroll_approvals \n      WHERE approved_at IS NOT NULL\n    `;\n    \n    const avgTimeResult = await pool.query(avgTimeQuery);\n    const averageApprovalTime = parseFloat(avgTimeResult.rows[0].avg_hours) || 0;\n\n    return {\n      ...basicStats,\n      averageApprovalTime\n    };\n  }\n\n  async deletePayrollApproval(id: string): Promise<boolean> {\n    return await this.payrollApprovalModel.deletePayrollApproval(id);\n  }\n\n  async checkAndUpdatePayrollPeriodStatus(payrollPeriodId: string): Promise<void> {\n    const { getPool } = await import('../../config/database');\n    const pool = getPool();\n    \n    // Get all approvals for this payroll period\n    const approvalsQuery = `\n      SELECT status, COUNT(*) as count\n      FROM payroll_approvals \n      WHERE payroll_period_id = $1\n      GROUP BY status\n    `;\n    \n    const approvalsResult = await pool.query(approvalsQuery, [payrollPeriodId]);\n    \n    logger.info('Checking payroll period status', {\n      payrollPeriodId,\n      approvalsResult: approvalsResult.rows\n    });\n    \n    const totalApprovals = approvalsResult.rows.reduce((sum, row) => sum + parseInt(row.count), 0);\n    const approvedCount = approvalsResult.rows.find(r => r.status === 'approved')?.count || 0;\n    const rejectedCount = approvalsResult.rows.find(r => r.status === 'rejected')?.count || 0;\n\n    logger.info('Approval counts', {\n      payrollPeriodId,\n      totalApprovals,\n      approvedCount,\n      rejectedCount\n    });\n\n    let newStatus: string;\n    \n    if (rejectedCount > 0) {\n      // If any approval is rejected, mark as draft\n      newStatus = 'draft';\n    } else if (approvedCount === totalApprovals && totalApprovals > 0) {\n      // If all approvals are approved, mark as completed\n      newStatus = 'completed';\n    } else {\n      // Still pending\n      logger.info('Payroll period still pending', { payrollPeriodId });\n      return;\n    }\n\n    // Update payroll period status\n    const updateQuery = `\n      UPDATE payroll_periods \n      SET status = $1, updated_at = CURRENT_TIMESTAMP\n      WHERE id = $2\n    `;\n    \n    await pool.query(updateQuery, [newStatus, payrollPeriodId]);\n    \n    logger.info('Updated payroll period status', {\n      payrollPeriodId,\n      newStatus\n    });\n  }\n\n  /**\n   * Reset approval status for all approvals in a payroll period\n   * This is used when reprocessing payroll to require re-approval\n   */\n  async resetApprovalStatusForPeriod(payrollPeriodId: string): Promise<void> {\n    const { getPool } = await import('../../config/database');\n    const pool = getPool();\n    \n    // Reset all approvals for this period to pending\n    await pool.query(\n      'UPDATE payroll_approvals SET status = $1, comments = NULL, approved_at = NULL, updated_at = NOW() WHERE payroll_period_id = $2',\n      ['pending', payrollPeriodId]\n    );\n    \n    // Reset payroll period status to sent_for_review\n    await pool.query(\n      'UPDATE payroll_periods SET status = $1, updated_at = NOW() WHERE id = $2',\n      ['sent_for_review', payrollPeriodId]\n    );\n    \n    logger.info(`Reset approval status for payroll period ${payrollPeriodId}`);\n  }\n\n  async getApprovalWorkflowStatus(payrollPeriodId: string): Promise<{\n    periodId: string;\n    periodName: string;\n    periodStatus: string;\n    totalApprovals: number;\n    pendingApprovals: number;\n    approvedApprovals: number;\n    rejectedApprovals: number;\n    approvals: Array<{\n      id: string;\n      approverName: string;\n      departmentName: string | null;\n      status: string;\n      approvedAt: Date | null;\n      comments: string | null;\n    }>;\n  }> {\n    const { getPool } = await import('../../config/database');\n    const pool = getPool();\n    \n    // Get payroll period info\n    const periodQuery = `\n      SELECT id, period_name, status\n      FROM payroll_periods \n      WHERE id = $1\n    `;\n    const periodResult = await pool.query(periodQuery, [payrollPeriodId]);\n    \n    if (periodResult.rows.length === 0) {\n      throw new Error('Payroll period not found');\n    }\n    \n    const period = periodResult.rows[0];\n    \n    // Get all approvals with details\n    const approvalsQuery = `\n      SELECT \n        pa.id,\n        pa.status,\n        pa.approved_at,\n        pa.comments,\n        CONCAT(u.first_name, ' ', u.last_name) as approver_name,\n        d.name as department_name\n      FROM payroll_approvals pa\n      JOIN users u ON pa.approver_id = u.id\n      LEFT JOIN departments d ON pa.department_id = d.id\n      WHERE pa.payroll_period_id = $1\n      ORDER BY pa.created_at ASC\n    `;\n    \n    const approvalsResult = await pool.query(approvalsQuery, [payrollPeriodId]);\n    \n    const approvals = approvalsResult.rows.map(row => ({\n      id: row.id,\n      approverName: row.approver_name,\n      departmentName: row.department_name,\n      status: row.status,\n      approvedAt: row.approved_at,\n      comments: row.comments\n    }));\n    \n    const totalApprovals = approvals.length;\n    const pendingApprovals = approvals.filter(a => a.status === 'pending').length;\n    const approvedApprovals = approvals.filter(a => a.status === 'approved').length;\n    const rejectedApprovals = approvals.filter(a => a.status === 'rejected').length;\n\n    return {\n      periodId: period.id,\n      periodName: period.period_name,\n      periodStatus: period.status,\n      totalApprovals,\n      pendingApprovals,\n      approvedApprovals,\n      rejectedApprovals,\n      approvals\n    };\n  }\n}\n\nexport const payrollApprovalService = new PayrollApprovalService();"],"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","ignoreList":[]}