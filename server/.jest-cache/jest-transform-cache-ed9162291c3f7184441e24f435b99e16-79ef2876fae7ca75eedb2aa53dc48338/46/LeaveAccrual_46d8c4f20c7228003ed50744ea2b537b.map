{"version":3,"names":["cov_22z5a1c7z","actualCoverage","s","database_1","require","LeaveAccrualModel","constructor","f","pool","getPool","createLeaveAccrual","data","query","values","employeeId","b","attendanceRecordId","overtimeHours","leaveDaysAccrued","accrualDate","result","mapRowToLeaveAccrual","rows","findById","id","length","findByIdWithDetails","mapRowToLeaveAccrualWithDetails","listLeaveAccruals","params","page","limit","departmentId","startDate","endDate","search","sortBy","sortOrder","offset","whereConditions","valueIndex","push","whereClause","join","countQuery","countResult","total","parseInt","count","toUpperCase","accruals","map","row","totalPages","Math","ceil","getEmployeeLeaveAccruals","getLeaveAccrualStats","totalQuery","totalResult","employeeQuery","employeeResult","departmentQuery","departmentResult","monthQuery","monthResult","totalRow","totalAccruals","total_accruals","totalOvertimeHours","parseFloat","total_overtime_hours","totalLeaveDaysAccrued","total_leave_days_accrued","averageOvertimeToLeaveRatio","avg_ratio","accrualsByEmployee","accrualsByDepartment","accrualsByMonth","deleteLeaveAccrual","rowCount","getLeaveAccrualCount","employee_id","attendance_record_id","overtime_hours","leave_days_accrued","accrual_date","createdAt","created_at","employee","employee_code","firstName","first_name","lastName","last_name","email","department","department_id","name","department_name","attendanceRecord","date","attendance_date","overallStatus","overall_status","exports"],"sources":["/home/kim/tito/server/src/models/leave/LeaveAccrual.ts"],"sourcesContent":["import { Pool } from 'pg';\nimport { getPool } from '../../config/database';\n\nexport interface LeaveAccrual {\n  id: string;\n  employeeId: string;\n  attendanceRecordId: string | null;\n  overtimeHours: number;\n  leaveDaysAccrued: number;\n  accrualDate: Date;\n  createdAt: Date;\n}\n\nexport interface LeaveAccrualWithDetails extends LeaveAccrual {\n  employee: {\n    id: string;\n    employeeId: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  department?: {\n    id: string;\n    name: string;\n  } | null;\n  attendanceRecord?: {\n    id: string;\n    date: Date;\n    overallStatus: string;\n  } | null;\n}\n\nexport interface CreateLeaveAccrualData {\n  employeeId: string;\n  attendanceRecordId?: string;\n  overtimeHours: number;\n  leaveDaysAccrued: number;\n  accrualDate: Date;\n}\n\nexport interface LeaveAccrualListParams {\n  page?: number;\n  limit?: number;\n  employeeId?: string;\n  departmentId?: string;\n  startDate?: Date;\n  endDate?: Date;\n  search?: string;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport class LeaveAccrualModel {\n  private pool: Pool;\n\n  constructor() {\n    this.pool = getPool();\n  }\n\n  async createLeaveAccrual(data: CreateLeaveAccrualData): Promise<LeaveAccrual> {\n    const query = `\n      INSERT INTO leave_accruals (\n        employee_id, attendance_record_id, overtime_hours, leave_days_accrued, accrual_date\n      ) VALUES ($1, $2, $3, $4, $5)\n      RETURNING *\n    `;\n\n    const values = [\n      data.employeeId,\n      data.attendanceRecordId || null,\n      data.overtimeHours,\n      data.leaveDaysAccrued,\n      data.accrualDate\n    ];\n\n    const result = await this.pool.query(query, values);\n    return this.mapRowToLeaveAccrual(result.rows[0]);\n  }\n\n  async findById(id: string): Promise<LeaveAccrual | null> {\n    const query = 'SELECT * FROM leave_accruals WHERE id = $1';\n    const result = await this.pool.query(query, [id]);\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n    \n    return this.mapRowToLeaveAccrual(result.rows[0]);\n  }\n\n  async findByIdWithDetails(id: string): Promise<LeaveAccrualWithDetails | null> {\n    const query = `\n      SELECT \n        la.*,\n        e.id as employee_id,\n        e.employee_id as employee_code,\n        u.first_name,\n        u.last_name,\n        u.email,\n        d.id as department_id,\n        d.name as department_name,\n        ar.id as attendance_record_id,\n        ar.date as attendance_date,\n        ar.overall_status\n      FROM leave_accruals la\n      JOIN employees e ON la.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      LEFT JOIN attendance_records ar ON la.attendance_record_id = ar.id\n      WHERE la.id = $1\n    `;\n    \n    const result = await this.pool.query(query, [id]);\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n    \n    return this.mapRowToLeaveAccrualWithDetails(result.rows[0]);\n  }\n\n  async listLeaveAccruals(params: LeaveAccrualListParams = {}): Promise<{\n    accruals: LeaveAccrualWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      employeeId,\n      departmentId,\n      startDate,\n      endDate,\n      search,\n      sortBy = 'accrual_date',\n      sortOrder = 'desc'\n    } = params;\n\n    const offset = (page - 1) * limit;\n    let whereConditions: string[] = [];\n    let values: any[] = [];\n    let valueIndex = 1;\n\n    // Build WHERE conditions\n    if (employeeId) {\n      whereConditions.push(`la.employee_id = $${valueIndex}`);\n      values.push(employeeId);\n      valueIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`e.department_id = $${valueIndex}`);\n      values.push(departmentId);\n      valueIndex++;\n    }\n\n    if (startDate) {\n      whereConditions.push(`la.accrual_date >= $${valueIndex}`);\n      values.push(startDate);\n      valueIndex++;\n    }\n\n    if (endDate) {\n      whereConditions.push(`la.accrual_date <= $${valueIndex}`);\n      values.push(endDate);\n      valueIndex++;\n    }\n\n    if (search) {\n      whereConditions.push(`(\n        e.employee_id ILIKE $${valueIndex} OR \n        u.first_name ILIKE $${valueIndex} OR\n        u.last_name ILIKE $${valueIndex} OR\n        u.email ILIKE $${valueIndex} OR\n        d.name ILIKE $${valueIndex}\n      )`);\n      values.push(`%${search}%`);\n      valueIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) \n      FROM leave_accruals la\n      JOIN employees e ON la.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n    `;\n    const countResult = await this.pool.query(countQuery, values);\n    const total = parseInt(countResult.rows[0].count);\n\n    // Main query\n    const query = `\n      SELECT \n        la.*,\n        e.id as employee_id,\n        e.employee_id as employee_code,\n        u.first_name,\n        u.last_name,\n        u.email,\n        d.id as department_id,\n        d.name as department_name,\n        ar.id as attendance_record_id,\n        ar.date as attendance_date,\n        ar.overall_status\n      FROM leave_accruals la\n      JOIN employees e ON la.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      LEFT JOIN attendance_records ar ON la.attendance_record_id = ar.id\n      ${whereClause}\n      ORDER BY la.${sortBy} ${sortOrder.toUpperCase()}\n      LIMIT $${valueIndex} OFFSET $${valueIndex + 1}\n    `;\n    values.push(limit, offset);\n\n    const result = await this.pool.query(query, values);\n    const accruals = result.rows.map(row => this.mapRowToLeaveAccrualWithDetails(row));\n\n    return {\n      accruals,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  async getEmployeeLeaveAccruals(employeeId: string, startDate?: Date, endDate?: Date): Promise<LeaveAccrualWithDetails[]> {\n    let whereConditions = ['la.employee_id = $1'];\n    let values: any[] = [employeeId];\n    let valueIndex = 2;\n\n    if (startDate) {\n      whereConditions.push(`la.accrual_date >= $${valueIndex}`);\n      values.push(startDate);\n      valueIndex++;\n    }\n\n    if (endDate) {\n      whereConditions.push(`la.accrual_date <= $${valueIndex}`);\n      values.push(endDate);\n      valueIndex++;\n    }\n\n    const whereClause = `WHERE ${whereConditions.join(' AND ')}`;\n\n    const query = `\n      SELECT \n        la.*,\n        e.id as employee_id,\n        e.employee_id as employee_code,\n        u.first_name,\n        u.last_name,\n        u.email,\n        d.id as department_id,\n        d.name as department_name,\n        ar.id as attendance_record_id,\n        ar.date as attendance_date,\n        ar.overall_status\n      FROM leave_accruals la\n      JOIN employees e ON la.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      LEFT JOIN attendance_records ar ON la.attendance_record_id = ar.id\n      ${whereClause}\n      ORDER BY la.accrual_date DESC\n    `;\n    \n    const result = await this.pool.query(query, values);\n    return result.rows.map(row => this.mapRowToLeaveAccrualWithDetails(row));\n  }\n\n  async getLeaveAccrualStats(employeeId?: string, departmentId?: string, startDate?: Date, endDate?: Date): Promise<{\n    totalAccruals: number;\n    totalOvertimeHours: number;\n    totalLeaveDaysAccrued: number;\n    averageOvertimeToLeaveRatio: number;\n    accrualsByEmployee: Array<{ employeeName: string; overtimeHours: number; leaveDaysAccrued: number }>;\n    accrualsByDepartment: Array<{ departmentName: string; overtimeHours: number; leaveDaysAccrued: number }>;\n    accrualsByMonth: Array<{ month: string; overtimeHours: number; leaveDaysAccrued: number }>;\n  }> {\n    let whereConditions: string[] = [];\n    let values: any[] = [];\n    let valueIndex = 1;\n\n    if (employeeId) {\n      whereConditions.push(`la.employee_id = $${valueIndex}`);\n      values.push(employeeId);\n      valueIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`e.department_id = $${valueIndex}`);\n      values.push(departmentId);\n      valueIndex++;\n    }\n\n    if (startDate) {\n      whereConditions.push(`la.accrual_date >= $${valueIndex}`);\n      values.push(startDate);\n      valueIndex++;\n    }\n\n    if (endDate) {\n      whereConditions.push(`la.accrual_date <= $${valueIndex}`);\n      values.push(endDate);\n      valueIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Total stats\n    const totalQuery = `\n      SELECT \n        COUNT(*) as total_accruals,\n        SUM(la.overtime_hours) as total_overtime_hours,\n        SUM(la.leave_days_accrued) as total_leave_days_accrued,\n        AVG(la.leave_days_accrued / NULLIF(la.overtime_hours, 0)) as avg_ratio\n      FROM leave_accruals la\n      JOIN employees e ON la.employee_id = e.id\n      ${whereClause}\n    `;\n    const totalResult = await this.pool.query(totalQuery, values);\n\n    // By employee\n    const employeeQuery = `\n      SELECT \n        CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n        SUM(la.overtime_hours) as overtime_hours,\n        SUM(la.leave_days_accrued) as leave_days_accrued\n      FROM leave_accruals la\n      JOIN employees e ON la.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      ${whereClause}\n      GROUP BY e.id, u.first_name, u.last_name\n      ORDER BY overtime_hours DESC\n      LIMIT 10\n    `;\n    const employeeResult = await this.pool.query(employeeQuery, values);\n\n    // By department\n    const departmentQuery = `\n      SELECT \n        COALESCE(d.name, 'No Department') as department_name,\n        SUM(la.overtime_hours) as overtime_hours,\n        SUM(la.leave_days_accrued) as leave_days_accrued\n      FROM leave_accruals la\n      JOIN employees e ON la.employee_id = e.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n      GROUP BY d.id, d.name\n      ORDER BY overtime_hours DESC\n    `;\n    const departmentResult = await this.pool.query(departmentQuery, values);\n\n    // By month\n    const monthQuery = `\n      SELECT \n        TO_CHAR(la.accrual_date, 'YYYY-MM') as month,\n        SUM(la.overtime_hours) as overtime_hours,\n        SUM(la.leave_days_accrued) as leave_days_accrued\n      FROM leave_accruals la\n      JOIN employees e ON la.employee_id = e.id\n      ${whereClause}\n      GROUP BY TO_CHAR(la.accrual_date, 'YYYY-MM')\n      ORDER BY month DESC\n      LIMIT 12\n    `;\n    const monthResult = await this.pool.query(monthQuery, values);\n\n    const totalRow = totalResult.rows[0];\n    return {\n      totalAccruals: parseInt(totalRow.total_accruals) || 0,\n      totalOvertimeHours: parseFloat(totalRow.total_overtime_hours) || 0,\n      totalLeaveDaysAccrued: parseFloat(totalRow.total_leave_days_accrued) || 0,\n      averageOvertimeToLeaveRatio: parseFloat(totalRow.avg_ratio) || 0,\n      accrualsByEmployee: employeeResult.rows,\n      accrualsByDepartment: departmentResult.rows,\n      accrualsByMonth: monthResult.rows\n    };\n  }\n\n  async deleteLeaveAccrual(id: string): Promise<boolean> {\n    const query = 'DELETE FROM leave_accruals WHERE id = $1';\n    const result = await this.pool.query(query, [id]);\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  async getLeaveAccrualCount(): Promise<number> {\n    const query = 'SELECT COUNT(*) FROM leave_accruals';\n    const result = await this.pool.query(query);\n    return parseInt(result.rows[0].count);\n  }\n\n  private mapRowToLeaveAccrual(row: any): LeaveAccrual {\n    return {\n      id: row.id,\n      employeeId: row.employee_id,\n      attendanceRecordId: row.attendance_record_id,\n      overtimeHours: parseFloat(row.overtime_hours),\n      leaveDaysAccrued: parseFloat(row.leave_days_accrued),\n      accrualDate: row.accrual_date,\n      createdAt: row.created_at\n    };\n  }\n\n  private mapRowToLeaveAccrualWithDetails(row: any): LeaveAccrualWithDetails {\n    return {\n      id: row.id,\n      employeeId: row.employee_id,\n      attendanceRecordId: row.attendance_record_id,\n      overtimeHours: parseFloat(row.overtime_hours),\n      leaveDaysAccrued: parseFloat(row.leave_days_accrued),\n      accrualDate: row.accrual_date,\n      createdAt: row.created_at,\n      employee: {\n        id: row.employee_id,\n        employeeId: row.employee_code,\n        firstName: row.first_name,\n        lastName: row.last_name,\n        email: row.email\n      },\n      department: row.department_id ? {\n        id: row.department_id,\n        name: row.department_name\n      } : null,\n      attendanceRecord: row.attendance_record_id ? {\n        id: row.attendance_record_id,\n        date: row.attendance_date,\n        overallStatus: row.overall_status\n      } : null\n    };\n  }\n}"],"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","ignoreList":[]}