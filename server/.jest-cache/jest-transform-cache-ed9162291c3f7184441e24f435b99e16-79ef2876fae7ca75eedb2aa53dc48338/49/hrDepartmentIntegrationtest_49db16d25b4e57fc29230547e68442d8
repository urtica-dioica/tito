9c1522706b0aa22ad0e6f41e900d0747
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const departmentService_1 = require("../../src/services/hr/departmentService");
const testHelpers_1 = require("../utils/testHelpers");
const setup_1 = require("../setup");
// Create service instances
const departmentService = new departmentService_1.DepartmentService();
(0, globals_1.describe)('HR-Department Integration', () => {
    let testHelpers;
    let createdUserIds = [];
    let createdEmployeeIds = [];
    let createdDepartmentIds = [];
    (0, globals_1.beforeAll)(async () => {
        const { testDbPool } = await (0, setup_1.initializeTestConnections)();
        testHelpers = new testHelpers_1.TestHelpers(testDbPool);
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up created data after each test
        for (const employeeId of createdEmployeeIds) {
            await testHelpers.deleteEmployee(employeeId).catch(() => { });
        }
        for (const userId of createdUserIds) {
            await testHelpers.deleteUser(userId).catch(() => { });
        }
        for (const departmentId of createdDepartmentIds) {
            await testHelpers.deleteDepartment(departmentId).catch(() => { });
        }
        createdEmployeeIds = [];
        createdUserIds = [];
        createdDepartmentIds = [];
    });
    (0, globals_1.describe)('Department Management Workflow', () => {
        (0, globals_1.it)('should handle complete department management workflow', async () => {
            // 1. Create department
            const department = await testHelpers.createTestDepartment({
                name: 'Engineering',
                description: 'Software Engineering Department'
            });
            createdDepartmentIds.push(department.id);
            // 2. Test department retrieval
            const departments = await departmentService.listDepartments();
            (0, globals_1.expect)(departments).toHaveProperty('departments');
            (0, globals_1.expect)(departments).toHaveProperty('total');
            (0, globals_1.expect)(Array.isArray(departments.departments)).toBe(true);
            (0, globals_1.expect)(typeof departments.total).toBe('number');
            // 3. Test specific department retrieval
            const specificDepartment = await departmentService.getDepartmentWithHead(department.id);
            (0, globals_1.expect)(specificDepartment).toHaveProperty('id');
            (0, globals_1.expect)(specificDepartment?.id).toBe(department.id);
            (0, globals_1.expect)(specificDepartment?.name).toBe('Engineering');
            // 4. Create department head user
            const departmentHead = await testHelpers.createTestUser({
                email: 'depthead@example.com',
                password: 'DeptHeadPassword123!',
                role: 'department_head'
            });
            createdUserIds.push(departmentHead.id);
            // 5. Create department head employee
            const departmentHeadEmployee = await testHelpers.createTestEmployee({
                userId: departmentHead.id,
                departmentId: department.id,
                employmentType: 'regular',
                baseSalary: 80000
            });
            createdEmployeeIds.push(departmentHeadEmployee.id);
            // 6. Test department operations
            const departmentStats = await departmentService.getDepartmentStats();
            (0, globals_1.expect)(departmentStats).toHaveProperty('total');
            (0, globals_1.expect)(departmentStats).toHaveProperty('active');
            (0, globals_1.expect)(typeof departmentStats.total).toBe('number');
        });
        (0, globals_1.it)('should handle department hierarchy management', async () => {
            // 1. Create parent department
            const parentDepartment = await testHelpers.createTestDepartment({
                name: 'Technology',
                description: 'Technology Division'
            });
            createdDepartmentIds.push(parentDepartment.id);
            // 2. Create child departments
            const childDepartments = [];
            for (let i = 0; i < 2; i++) {
                const childDept = await testHelpers.createTestDepartment({
                    name: `SubDepartment${i + 1}`,
                    description: `Sub Department ${i + 1} under Technology`
                });
                childDepartments.push(childDept);
                createdDepartmentIds.push(childDept.id);
            }
            // 3. Test department listing
            const allDepartments = await departmentService.listDepartments();
            (0, globals_1.expect)(allDepartments.departments.length).toBeGreaterThanOrEqual(3);
            // 4. Create employees in different departments
            const employees = [];
            for (let i = 0; i < 3; i++) {
                const user = await testHelpers.createTestUser({
                    email: `employee${i}@example.com`,
                    password: 'EmployeePassword123!',
                    role: 'employee'
                });
                createdUserIds.push(user.id);
                const employee = await testHelpers.createTestEmployee({
                    userId: user.id,
                    departmentId: i === 0 ? parentDepartment.id : childDepartments[i - 1].id,
                    employmentType: 'regular',
                    baseSalary: 50000 + (i * 10000)
                });
                employees.push(employee);
                createdEmployeeIds.push(employee.id);
            }
            // 5. Test department statistics with multiple departments
            const departmentStats = await departmentService.getDepartmentStats();
            (0, globals_1.expect)(departmentStats.total).toBeGreaterThanOrEqual(3);
        });
    });
    (0, globals_1.describe)('Department Operations Integration', () => {
        (0, globals_1.it)('should handle department operations correctly', async () => {
            // 1. Create department
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            // 2. Test department retrieval
            const departments = await departmentService.listDepartments();
            (0, globals_1.expect)(departments).toHaveProperty('departments');
            (0, globals_1.expect)(departments).toHaveProperty('total');
            (0, globals_1.expect)(Array.isArray(departments.departments)).toBe(true);
            // 3. Test specific department retrieval
            const specificDepartment = await departmentService.getDepartmentWithHead(department.id);
            (0, globals_1.expect)(specificDepartment).toHaveProperty('id');
            (0, globals_1.expect)(specificDepartment?.id).toBe(department.id);
        });
    });
    (0, globals_1.describe)('Service Integration Patterns', () => {
        (0, globals_1.it)('should handle concurrent department operations', async () => {
            // 1. Create test data
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            // 2. Perform concurrent operations
            const promises = [
                departmentService.listDepartments(),
                departmentService.getDepartmentWithHead(department.id),
                departmentService.listDepartments()
            ];
            const results = await Promise.all(promises);
            // 3. Verify all operations completed successfully
            (0, globals_1.expect)(results).toHaveLength(3);
            results.forEach((result) => {
                (0, globals_1.expect)(result).toBeDefined();
            });
            // 4. Verify specific result types
            (0, globals_1.expect)(results[0]).toHaveProperty('departments');
            (0, globals_1.expect)(results[1]).toHaveProperty('id');
            (0, globals_1.expect)(results[2]).toHaveProperty('departments');
        });
        (0, globals_1.it)('should handle error scenarios gracefully', async () => {
            // Test with non-existent department
            const nonExistentDept = await departmentService.getDepartmentWithHead('non-existent-id');
            (0, globals_1.expect)(nonExistentDept).toBeNull();
            // Test department stats with no data
            const departmentStats = await departmentService.getDepartmentStats();
            (0, globals_1.expect)(departmentStats).toHaveProperty('total');
            (0, globals_1.expect)(departmentStats).toHaveProperty('active');
            (0, globals_1.expect)(typeof departmentStats.total).toBe('number');
        });
        (0, globals_1.it)('should maintain data consistency', async () => {
            // 1. Create department
            const department = await testHelpers.createTestDepartment({
                name: 'Consistency Test Department'
            });
            createdDepartmentIds.push(department.id);
            // 2. Verify data consistency
            const departmentData = await departmentService.getDepartmentWithHead(department.id);
            (0, globals_1.expect)(departmentData?.id).toBe(department.id);
            (0, globals_1.expect)(departmentData?.name).toBe('Consistency Test Department');
            // 3. Verify statistics consistency
            const departmentStats = await departmentService.getDepartmentStats();
            (0, globals_1.expect)(departmentStats.total).toBeGreaterThanOrEqual(1);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,