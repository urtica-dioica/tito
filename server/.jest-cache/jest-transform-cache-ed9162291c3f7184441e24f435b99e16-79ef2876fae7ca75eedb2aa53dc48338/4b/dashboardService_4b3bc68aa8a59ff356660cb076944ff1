555f5b63fafedc64449730f7b954e9b0
"use strict";

/* istanbul ignore next */
function cov_cyu5sf93() {
  var path = "/home/kim/tito/server/src/services/hr/dashboardService.ts";
  var hash = "b5f8f8e7e7b92d174ec6ef2be699be818d0a998c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/hr/dashboardService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 65
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "7": {
        start: {
          line: 16,
          column: 29
        },
        end: {
          line: 16,
          column: 58
        }
      },
      "8": {
        start: {
          line: 18,
          column: 35
        },
        end: {
          line: 18,
          column: 65
        }
      },
      "9": {
        start: {
          line: 20,
          column: 36
        },
        end: {
          line: 20,
          column: 67
        }
      },
      "10": {
        start: {
          line: 22,
          column: 36
        },
        end: {
          line: 22,
          column: 67
        }
      },
      "11": {
        start: {
          line: 24,
          column: 36
        },
        end: {
          line: 24,
          column: 67
        }
      },
      "12": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 31,
          column: 14
        }
      },
      "13": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 82
        }
      },
      "14": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 24
        }
      },
      "15": {
        start: {
          line: 42,
          column: 22
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "16": {
        start: {
          line: 50,
          column: 23
        },
        end: {
          line: 50,
          column: 67
        }
      },
      "17": {
        start: {
          line: 51,
          column: 20
        },
        end: {
          line: 51,
          column: 34
        }
      },
      "18": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 58,
          column: 10
        }
      },
      "19": {
        start: {
          line: 65,
          column: 27
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "20": {
        start: {
          line: 78,
          column: 28
        },
        end: {
          line: 78,
          column: 77
        }
      },
      "21": {
        start: {
          line: 80,
          column: 36
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "22": {
        start: {
          line: 93,
          column: 37
        },
        end: {
          line: 93,
          column: 95
        }
      },
      "23": {
        start: {
          line: 95,
          column: 30
        },
        end: {
          line: 107,
          column: 5
        }
      },
      "24": {
        start: {
          line: 108,
          column: 31
        },
        end: {
          line: 108,
          column: 83
        }
      },
      "25": {
        start: {
          line: 110,
          column: 30
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "26": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 124,
          column: 12
        }
      },
      "27": {
        start: {
          line: 116,
          column: 28
        },
        end: {
          line: 116,
          column: 93
        }
      },
      "28": {
        start: {
          line: 118,
          column: 30
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "29": {
        start: {
          line: 130,
          column: 22
        },
        end: {
          line: 135,
          column: 5
        }
      },
      "30": {
        start: {
          line: 136,
          column: 23
        },
        end: {
          line: 136,
          column: 67
        }
      },
      "31": {
        start: {
          line: 137,
          column: 20
        },
        end: {
          line: 137,
          column: 34
        }
      },
      "32": {
        start: {
          line: 138,
          column: 23
        },
        end: {
          line: 138,
          column: 56
        }
      },
      "33": {
        start: {
          line: 139,
          column: 32
        },
        end: {
          line: 139,
          column: 75
        }
      },
      "34": {
        start: {
          line: 140,
          column: 25
        },
        end: {
          line: 140,
          column: 60
        }
      },
      "35": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 146,
          column: 10
        }
      },
      "36": {
        start: {
          line: 152,
          column: 22
        },
        end: {
          line: 152,
          column: 60
        }
      },
      "37": {
        start: {
          line: 153,
          column: 22
        },
        end: {
          line: 161,
          column: 5
        }
      },
      "38": {
        start: {
          line: 162,
          column: 23
        },
        end: {
          line: 162,
          column: 76
        }
      },
      "39": {
        start: {
          line: 163,
          column: 20
        },
        end: {
          line: 163,
          column: 34
        }
      },
      "40": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 169,
          column: 10
        }
      },
      "41": {
        start: {
          line: 175,
          column: 22
        },
        end: {
          line: 175,
          column: 60
        }
      },
      "42": {
        start: {
          line: 176,
          column: 22
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "43": {
        start: {
          line: 188,
          column: 23
        },
        end: {
          line: 188,
          column: 76
        }
      },
      "44": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 194,
          column: 12
        }
      },
      "45": {
        start: {
          line: 189,
          column: 39
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "46": {
        start: {
          line: 197,
          column: 0
        },
        end: {
          line: 197,
          column: 48
        }
      },
      "47": {
        start: {
          line: 198,
          column: 0
        },
        end: {
          line: 198,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 29
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 30
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 63
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 116,
            column: 18
          },
          end: {
            line: 116,
            column: 19
          }
        },
        loc: {
          start: {
            line: 116,
            column: 28
          },
          end: {
            line: 116,
            column: 93
          }
        },
        line: 116
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 118,
            column: 17
          },
          end: {
            line: 118,
            column: 18
          }
        },
        loc: {
          start: {
            line: 118,
            column: 30
          },
          end: {
            line: 124,
            column: 9
          }
        },
        line: 118
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 31
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 129
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        loc: {
          start: {
            line: 151,
            column: 31
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 151
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 31
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 174
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 189,
            column: 31
          },
          end: {
            line: 189,
            column: 32
          }
        },
        loc: {
          start: {
            line: 189,
            column: 39
          },
          end: {
            line: 194,
            column: 9
          }
        },
        line: 189
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 28
          },
          end: {
            line: 53,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 28
          },
          end: {
            line: 53,
            column: 57
          }
        }, {
          start: {
            line: 53,
            column: 61
          },
          end: {
            line: 53,
            column: 62
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 54,
            column: 29
          },
          end: {
            line: 54,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 29
          },
          end: {
            line: 54,
            column: 59
          }
        }, {
          start: {
            line: 54,
            column: 63
          },
          end: {
            line: 54,
            column: 64
          }
        }],
        line: 54
      },
      "5": {
        loc: {
          start: {
            line: 55,
            column: 30
          },
          end: {
            line: 55,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 30
          },
          end: {
            line: 55,
            column: 61
          }
        }, {
          start: {
            line: 55,
            column: 65
          },
          end: {
            line: 55,
            column: 66
          }
        }],
        line: 55
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 26
          },
          end: {
            line: 56,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 26
          },
          end: {
            line: 56,
            column: 54
          }
        }, {
          start: {
            line: 56,
            column: 58
          },
          end: {
            line: 56,
            column: 59
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 57,
            column: 27
          },
          end: {
            line: 57,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 27
          },
          end: {
            line: 57,
            column: 56
          }
        }, {
          start: {
            line: 57,
            column: 60
          },
          end: {
            line: 57,
            column: 61
          }
        }],
        line: 57
      },
      "8": {
        loc: {
          start: {
            line: 138,
            column: 23
          },
          end: {
            line: 138,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 23
          },
          end: {
            line: 138,
            column: 51
          }
        }, {
          start: {
            line: 138,
            column: 55
          },
          end: {
            line: 138,
            column: 56
          }
        }],
        line: 138
      },
      "9": {
        loc: {
          start: {
            line: 139,
            column: 32
          },
          end: {
            line: 139,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 32
          },
          end: {
            line: 139,
            column: 70
          }
        }, {
          start: {
            line: 139,
            column: 74
          },
          end: {
            line: 139,
            column: 75
          }
        }],
        line: 139
      },
      "10": {
        loc: {
          start: {
            line: 140,
            column: 25
          },
          end: {
            line: 140,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 25
          },
          end: {
            line: 140,
            column: 55
          }
        }, {
          start: {
            line: 140,
            column: 59
          },
          end: {
            line: 140,
            column: 60
          }
        }],
        line: 140
      },
      "11": {
        loc: {
          start: {
            line: 165,
            column: 24
          },
          end: {
            line: 165,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 24
          },
          end: {
            line: 165,
            column: 49
          }
        }, {
          start: {
            line: 165,
            column: 53
          },
          end: {
            line: 165,
            column: 54
          }
        }],
        line: 165
      },
      "12": {
        loc: {
          start: {
            line: 166,
            column: 26
          },
          end: {
            line: 166,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 26
          },
          end: {
            line: 166,
            column: 53
          }
        }, {
          start: {
            line: 166,
            column: 57
          },
          end: {
            line: 166,
            column: 58
          }
        }],
        line: 166
      },
      "13": {
        loc: {
          start: {
            line: 167,
            column: 25
          },
          end: {
            line: 167,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 25
          },
          end: {
            line: 167,
            column: 51
          }
        }, {
          start: {
            line: 167,
            column: 55
          },
          end: {
            line: 167,
            column: 56
          }
        }],
        line: 167
      },
      "14": {
        loc: {
          start: {
            line: 168,
            column: 23
          },
          end: {
            line: 168,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 23
          },
          end: {
            line: 168,
            column: 47
          }
        }, {
          start: {
            line: 168,
            column: 51
          },
          end: {
            line: 168,
            column: 52
          }
        }],
        line: 168
      },
      "15": {
        loc: {
          start: {
            line: 191,
            column: 27
          },
          end: {
            line: 191,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 27
          },
          end: {
            line: 191,
            column: 55
          }
        }, {
          start: {
            line: 191,
            column: 59
          },
          end: {
            line: 191,
            column: 60
          }
        }],
        line: 191
      },
      "16": {
        loc: {
          start: {
            line: 192,
            column: 26
          },
          end: {
            line: 192,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 26
          },
          end: {
            line: 192,
            column: 53
          }
        }, {
          start: {
            line: 192,
            column: 57
          },
          end: {
            line: 192,
            column: 58
          }
        }],
        line: 192
      },
      "17": {
        loc: {
          start: {
            line: 193,
            column: 25
          },
          end: {
            line: 193,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 25
          },
          end: {
            line: 193,
            column: 51
          }
        }, {
          start: {
            line: 193,
            column: 55
          },
          end: {
            line: 193,
            column: 56
          }
        }],
        line: 193
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/hr/dashboardService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/services/hr/dashboardService.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface HRDashboardData {\n  overview: {\n    totalEmployees: number;\n    activeEmployees: number;\n    totalDepartments: number;\n    totalIdCards: number;\n    activeIdCards: number;\n  };\n  recentActivity: Array<{\n    id: string;\n    type: string;\n    description: string;\n    timestamp: string;\n    status: string;\n  }>;\n  pendingRequests: {\n    leaves: number;\n    timeCorrections: number;\n    overtime: number;\n    total: number;\n  };\n  attendanceStats: {\n    presentToday: number;\n    absentToday: number;\n    lateToday: number;\n    totalToday: number;\n  };\n  departmentStats: Array<{\n    departmentName: string;\n    employeeCount: number;\n    presentCount: number;\n    absentCount: number;\n  }>;\n}\n\nexport class HRDashboardService {\n  /**\n   * Get HR dashboard data\n   */\n  async getDashboardData(): Promise<HRDashboardData> {\n    try {\n      // Get overview statistics\n      const overview = await this.getOverviewStats();\n      \n      // Get recent activity\n      const recentActivity = await this.getRecentActivity();\n      \n      // Get pending requests\n      const pendingRequests = await this.getPendingRequests();\n      \n      // Get attendance stats\n      const attendanceStats = await this.getAttendanceStats();\n      \n      // Get department stats\n      const departmentStats = await this.getDepartmentStats();\n\n      return {\n        overview,\n        recentActivity,\n        pendingRequests,\n        attendanceStats,\n        departmentStats\n      };\n    } catch (error) {\n      logger.error('Error getting HR dashboard data:', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Get overview statistics\n   */\n  private async getOverviewStats(): Promise<HRDashboardData['overview']> {\n    const query = `\n      SELECT \n        (SELECT COUNT(*) FROM employees) as total_employees,\n        (SELECT COUNT(*) FROM employees WHERE status = 'active') as active_employees,\n        (SELECT COUNT(*) FROM departments) as total_departments,\n        (SELECT COUNT(*) FROM id_cards) as total_id_cards,\n        (SELECT COUNT(*) FROM id_cards WHERE is_active = true) as active_id_cards\n    `;\n    \n    const result = await getPool().query(query);\n    const row = result.rows[0];\n    \n    return {\n      totalEmployees: parseInt(row.total_employees) || 0,\n      activeEmployees: parseInt(row.active_employees) || 0,\n      totalDepartments: parseInt(row.total_departments) || 0,\n      totalIdCards: parseInt(row.total_id_cards) || 0,\n      activeIdCards: parseInt(row.active_id_cards) || 0\n    };\n  }\n\n  /**\n   * Get recent activity\n   */\n  private async getRecentActivity(): Promise<HRDashboardData['recentActivity']> {\n    // Get recent leave requests\n    const leaveQuery = `\n      SELECT \n        l.id,\n        'leave_request' as type,\n        CONCAT(u.first_name, ' ', u.last_name, ' submitted a leave request') as description,\n        l.created_at as timestamp,\n        l.status\n      FROM leaves l\n      JOIN employees e ON l.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      ORDER BY l.created_at DESC\n      LIMIT 5\n    `;\n    \n    const leaveResult = await getPool().query(leaveQuery);\n    \n    // Get recent time correction requests\n    const timeCorrectionQuery = `\n      SELECT \n        tcr.id,\n        'time_correction' as type,\n        CONCAT(u.first_name, ' ', u.last_name, ' submitted a time correction request') as description,\n        tcr.created_at as timestamp,\n        tcr.status\n      FROM time_correction_requests tcr\n      JOIN employees e ON tcr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      ORDER BY tcr.created_at DESC\n      LIMIT 5\n    `;\n    \n    const timeCorrectionResult = await getPool().query(timeCorrectionQuery);\n    \n    // Get recent overtime requests\n    const overtimeQuery = `\n      SELECT \n        ot.id,\n        'overtime_request' as type,\n        CONCAT(u.first_name, ' ', u.last_name, ' submitted an overtime request') as description,\n        ot.created_at as timestamp,\n        ot.status\n      FROM overtime_requests ot\n      JOIN employees e ON ot.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      ORDER BY ot.created_at DESC\n      LIMIT 5\n    `;\n    \n    const overtimeResult = await getPool().query(overtimeQuery);\n    \n    // Combine and sort all activities\n    const allActivities = [\n      ...leaveResult.rows,\n      ...timeCorrectionResult.rows,\n      ...overtimeResult.rows\n    ];\n    \n    return allActivities\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, 10)\n      .map(activity => ({\n        id: activity.id,\n        type: activity.type,\n        description: activity.description,\n        timestamp: activity.timestamp,\n        status: activity.status\n      }));\n  }\n\n  /**\n   * Get pending requests\n   */\n  private async getPendingRequests(): Promise<HRDashboardData['pendingRequests']> {\n    const query = `\n      SELECT \n        (SELECT COUNT(*) FROM leaves WHERE status = 'pending') as pending_leaves,\n        (SELECT COUNT(*) FROM time_correction_requests WHERE status = 'pending') as pending_time_corrections,\n        (SELECT COUNT(*) FROM overtime_requests WHERE status = 'pending') as pending_overtime\n    `;\n    \n    const result = await getPool().query(query);\n    const row = result.rows[0];\n    \n    const leaves = parseInt(row.pending_leaves) || 0;\n    const timeCorrections = parseInt(row.pending_time_corrections) || 0;\n    const overtime = parseInt(row.pending_overtime) || 0;\n    \n    return {\n      leaves,\n      timeCorrections,\n      overtime,\n      total: leaves + timeCorrections + overtime\n    };\n  }\n\n  /**\n   * Get attendance stats for today\n   */\n  private async getAttendanceStats(): Promise<HRDashboardData['attendanceStats']> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    const query = `\n      SELECT \n        COUNT(DISTINCT ar.employee_id) as total_today,\n        COUNT(DISTINCT CASE WHEN ar.overall_status = 'present' THEN ar.employee_id END) as present_today,\n        COUNT(DISTINCT CASE WHEN ar.overall_status = 'absent' THEN ar.employee_id END) as absent_today,\n        COUNT(DISTINCT CASE WHEN ar.overall_status = 'late' THEN ar.employee_id END) as late_today\n      FROM attendance_records ar\n      WHERE DATE(ar.date) = $1\n    `;\n    \n    const result = await getPool().query(query, [today]);\n    const row = result.rows[0];\n    \n    return {\n      totalToday: parseInt(row.total_today) || 0,\n      presentToday: parseInt(row.present_today) || 0,\n      absentToday: parseInt(row.absent_today) || 0,\n      lateToday: parseInt(row.late_today) || 0\n    };\n  }\n\n  /**\n   * Get department statistics\n   */\n  private async getDepartmentStats(): Promise<HRDashboardData['departmentStats']> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    const query = `\n      SELECT \n        d.name as department_name,\n        COUNT(DISTINCT e.id) as employee_count,\n        COUNT(DISTINCT CASE WHEN ar.overall_status = 'present' THEN ar.employee_id END) as present_count,\n        COUNT(DISTINCT CASE WHEN ar.overall_status = 'absent' THEN ar.employee_id END) as absent_count\n      FROM departments d\n      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'\n      LEFT JOIN attendance_records ar ON e.id = ar.employee_id AND DATE(ar.date) = $1\n      GROUP BY d.id, d.name\n      ORDER BY d.name\n    `;\n    \n    const result = await getPool().query(query, [today]);\n    \n    return result.rows.map(row => ({\n      departmentName: row.department_name,\n      employeeCount: parseInt(row.employee_count) || 0,\n      presentCount: parseInt(row.present_count) || 0,\n      absentCount: parseInt(row.absent_count) || 0\n    }));\n  }\n}\n\nexport const hrDashboardService = new HRDashboardService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b5f8f8e7e7b92d174ec6ef2be699be818d0a998c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_cyu5sf93 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_cyu5sf93();
var __importDefault =
/* istanbul ignore next */
(cov_cyu5sf93().s[0]++,
/* istanbul ignore next */
(cov_cyu5sf93().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_cyu5sf93().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_cyu5sf93().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_cyu5sf93().f[0]++;
  cov_cyu5sf93().s[1]++;
  return /* istanbul ignore next */(cov_cyu5sf93().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_cyu5sf93().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_cyu5sf93().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_cyu5sf93().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_cyu5sf93().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_cyu5sf93().s[3]++;
exports.hrDashboardService = exports.HRDashboardService = void 0;
const database_1 =
/* istanbul ignore next */
(cov_cyu5sf93().s[4]++, require("../../config/database"));
const logger_1 =
/* istanbul ignore next */
(cov_cyu5sf93().s[5]++, __importDefault(require("../../utils/logger")));
class HRDashboardService {
  /**
   * Get HR dashboard data
   */
  async getDashboardData() {
    /* istanbul ignore next */
    cov_cyu5sf93().f[1]++;
    cov_cyu5sf93().s[6]++;
    try {
      // Get overview statistics
      const overview =
      /* istanbul ignore next */
      (cov_cyu5sf93().s[7]++, await this.getOverviewStats());
      // Get recent activity
      const recentActivity =
      /* istanbul ignore next */
      (cov_cyu5sf93().s[8]++, await this.getRecentActivity());
      // Get pending requests
      const pendingRequests =
      /* istanbul ignore next */
      (cov_cyu5sf93().s[9]++, await this.getPendingRequests());
      // Get attendance stats
      const attendanceStats =
      /* istanbul ignore next */
      (cov_cyu5sf93().s[10]++, await this.getAttendanceStats());
      // Get department stats
      const departmentStats =
      /* istanbul ignore next */
      (cov_cyu5sf93().s[11]++, await this.getDepartmentStats());
      /* istanbul ignore next */
      cov_cyu5sf93().s[12]++;
      return {
        overview,
        recentActivity,
        pendingRequests,
        attendanceStats,
        departmentStats
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_cyu5sf93().s[13]++;
      logger_1.default.error('Error getting HR dashboard data:', {
        error
      });
      /* istanbul ignore next */
      cov_cyu5sf93().s[14]++;
      throw error;
    }
  }
  /**
   * Get overview statistics
   */
  async getOverviewStats() {
    /* istanbul ignore next */
    cov_cyu5sf93().f[2]++;
    const query =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[15]++, `
      SELECT 
        (SELECT COUNT(*) FROM employees) as total_employees,
        (SELECT COUNT(*) FROM employees WHERE status = 'active') as active_employees,
        (SELECT COUNT(*) FROM departments) as total_departments,
        (SELECT COUNT(*) FROM id_cards) as total_id_cards,
        (SELECT COUNT(*) FROM id_cards WHERE is_active = true) as active_id_cards
    `);
    const result =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[16]++, await (0, database_1.getPool)().query(query));
    const row =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[17]++, result.rows[0]);
    /* istanbul ignore next */
    cov_cyu5sf93().s[18]++;
    return {
      totalEmployees:
      /* istanbul ignore next */
      (cov_cyu5sf93().b[3][0]++, parseInt(row.total_employees)) ||
      /* istanbul ignore next */
      (cov_cyu5sf93().b[3][1]++, 0),
      activeEmployees:
      /* istanbul ignore next */
      (cov_cyu5sf93().b[4][0]++, parseInt(row.active_employees)) ||
      /* istanbul ignore next */
      (cov_cyu5sf93().b[4][1]++, 0),
      totalDepartments:
      /* istanbul ignore next */
      (cov_cyu5sf93().b[5][0]++, parseInt(row.total_departments)) ||
      /* istanbul ignore next */
      (cov_cyu5sf93().b[5][1]++, 0),
      totalIdCards:
      /* istanbul ignore next */
      (cov_cyu5sf93().b[6][0]++, parseInt(row.total_id_cards)) ||
      /* istanbul ignore next */
      (cov_cyu5sf93().b[6][1]++, 0),
      activeIdCards:
      /* istanbul ignore next */
      (cov_cyu5sf93().b[7][0]++, parseInt(row.active_id_cards)) ||
      /* istanbul ignore next */
      (cov_cyu5sf93().b[7][1]++, 0)
    };
  }
  /**
   * Get recent activity
   */
  async getRecentActivity() {
    /* istanbul ignore next */
    cov_cyu5sf93().f[3]++;
    // Get recent leave requests
    const leaveQuery =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[19]++, `
      SELECT 
        l.id,
        'leave_request' as type,
        CONCAT(u.first_name, ' ', u.last_name, ' submitted a leave request') as description,
        l.created_at as timestamp,
        l.status
      FROM leaves l
      JOIN employees e ON l.employee_id = e.id
      JOIN users u ON e.user_id = u.id
      ORDER BY l.created_at DESC
      LIMIT 5
    `);
    const leaveResult =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[20]++, await (0, database_1.getPool)().query(leaveQuery));
    // Get recent time correction requests
    const timeCorrectionQuery =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[21]++, `
      SELECT 
        tcr.id,
        'time_correction' as type,
        CONCAT(u.first_name, ' ', u.last_name, ' submitted a time correction request') as description,
        tcr.created_at as timestamp,
        tcr.status
      FROM time_correction_requests tcr
      JOIN employees e ON tcr.employee_id = e.id
      JOIN users u ON e.user_id = u.id
      ORDER BY tcr.created_at DESC
      LIMIT 5
    `);
    const timeCorrectionResult =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[22]++, await (0, database_1.getPool)().query(timeCorrectionQuery));
    // Get recent overtime requests
    const overtimeQuery =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[23]++, `
      SELECT 
        ot.id,
        'overtime_request' as type,
        CONCAT(u.first_name, ' ', u.last_name, ' submitted an overtime request') as description,
        ot.created_at as timestamp,
        ot.status
      FROM overtime_requests ot
      JOIN employees e ON ot.employee_id = e.id
      JOIN users u ON e.user_id = u.id
      ORDER BY ot.created_at DESC
      LIMIT 5
    `);
    const overtimeResult =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[24]++, await (0, database_1.getPool)().query(overtimeQuery));
    // Combine and sort all activities
    const allActivities =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[25]++, [...leaveResult.rows, ...timeCorrectionResult.rows, ...overtimeResult.rows]);
    /* istanbul ignore next */
    cov_cyu5sf93().s[26]++;
    return allActivities.sort((a, b) => {
      /* istanbul ignore next */
      cov_cyu5sf93().f[4]++;
      cov_cyu5sf93().s[27]++;
      return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
    }).slice(0, 10).map(activity => {
      /* istanbul ignore next */
      cov_cyu5sf93().f[5]++;
      cov_cyu5sf93().s[28]++;
      return {
        id: activity.id,
        type: activity.type,
        description: activity.description,
        timestamp: activity.timestamp,
        status: activity.status
      };
    });
  }
  /**
   * Get pending requests
   */
  async getPendingRequests() {
    /* istanbul ignore next */
    cov_cyu5sf93().f[6]++;
    const query =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[29]++, `
      SELECT 
        (SELECT COUNT(*) FROM leaves WHERE status = 'pending') as pending_leaves,
        (SELECT COUNT(*) FROM time_correction_requests WHERE status = 'pending') as pending_time_corrections,
        (SELECT COUNT(*) FROM overtime_requests WHERE status = 'pending') as pending_overtime
    `);
    const result =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[30]++, await (0, database_1.getPool)().query(query));
    const row =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[31]++, result.rows[0]);
    const leaves =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[32]++,
    /* istanbul ignore next */
    (cov_cyu5sf93().b[8][0]++, parseInt(row.pending_leaves)) ||
    /* istanbul ignore next */
    (cov_cyu5sf93().b[8][1]++, 0));
    const timeCorrections =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[33]++,
    /* istanbul ignore next */
    (cov_cyu5sf93().b[9][0]++, parseInt(row.pending_time_corrections)) ||
    /* istanbul ignore next */
    (cov_cyu5sf93().b[9][1]++, 0));
    const overtime =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[34]++,
    /* istanbul ignore next */
    (cov_cyu5sf93().b[10][0]++, parseInt(row.pending_overtime)) ||
    /* istanbul ignore next */
    (cov_cyu5sf93().b[10][1]++, 0));
    /* istanbul ignore next */
    cov_cyu5sf93().s[35]++;
    return {
      leaves,
      timeCorrections,
      overtime,
      total: leaves + timeCorrections + overtime
    };
  }
  /**
   * Get attendance stats for today
   */
  async getAttendanceStats() {
    /* istanbul ignore next */
    cov_cyu5sf93().f[7]++;
    const today =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[36]++, new Date().toISOString().split('T')[0]);
    const query =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[37]++, `
      SELECT 
        COUNT(DISTINCT ar.employee_id) as total_today,
        COUNT(DISTINCT CASE WHEN ar.overall_status = 'present' THEN ar.employee_id END) as present_today,
        COUNT(DISTINCT CASE WHEN ar.overall_status = 'absent' THEN ar.employee_id END) as absent_today,
        COUNT(DISTINCT CASE WHEN ar.overall_status = 'late' THEN ar.employee_id END) as late_today
      FROM attendance_records ar
      WHERE DATE(ar.date) = $1
    `);
    const result =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[38]++, await (0, database_1.getPool)().query(query, [today]));
    const row =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[39]++, result.rows[0]);
    /* istanbul ignore next */
    cov_cyu5sf93().s[40]++;
    return {
      totalToday:
      /* istanbul ignore next */
      (cov_cyu5sf93().b[11][0]++, parseInt(row.total_today)) ||
      /* istanbul ignore next */
      (cov_cyu5sf93().b[11][1]++, 0),
      presentToday:
      /* istanbul ignore next */
      (cov_cyu5sf93().b[12][0]++, parseInt(row.present_today)) ||
      /* istanbul ignore next */
      (cov_cyu5sf93().b[12][1]++, 0),
      absentToday:
      /* istanbul ignore next */
      (cov_cyu5sf93().b[13][0]++, parseInt(row.absent_today)) ||
      /* istanbul ignore next */
      (cov_cyu5sf93().b[13][1]++, 0),
      lateToday:
      /* istanbul ignore next */
      (cov_cyu5sf93().b[14][0]++, parseInt(row.late_today)) ||
      /* istanbul ignore next */
      (cov_cyu5sf93().b[14][1]++, 0)
    };
  }
  /**
   * Get department statistics
   */
  async getDepartmentStats() {
    /* istanbul ignore next */
    cov_cyu5sf93().f[8]++;
    const today =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[41]++, new Date().toISOString().split('T')[0]);
    const query =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[42]++, `
      SELECT 
        d.name as department_name,
        COUNT(DISTINCT e.id) as employee_count,
        COUNT(DISTINCT CASE WHEN ar.overall_status = 'present' THEN ar.employee_id END) as present_count,
        COUNT(DISTINCT CASE WHEN ar.overall_status = 'absent' THEN ar.employee_id END) as absent_count
      FROM departments d
      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'
      LEFT JOIN attendance_records ar ON e.id = ar.employee_id AND DATE(ar.date) = $1
      GROUP BY d.id, d.name
      ORDER BY d.name
    `);
    const result =
    /* istanbul ignore next */
    (cov_cyu5sf93().s[43]++, await (0, database_1.getPool)().query(query, [today]));
    /* istanbul ignore next */
    cov_cyu5sf93().s[44]++;
    return result.rows.map(row => {
      /* istanbul ignore next */
      cov_cyu5sf93().f[9]++;
      cov_cyu5sf93().s[45]++;
      return {
        departmentName: row.department_name,
        employeeCount:
        /* istanbul ignore next */
        (cov_cyu5sf93().b[15][0]++, parseInt(row.employee_count)) ||
        /* istanbul ignore next */
        (cov_cyu5sf93().b[15][1]++, 0),
        presentCount:
        /* istanbul ignore next */
        (cov_cyu5sf93().b[16][0]++, parseInt(row.present_count)) ||
        /* istanbul ignore next */
        (cov_cyu5sf93().b[16][1]++, 0),
        absentCount:
        /* istanbul ignore next */
        (cov_cyu5sf93().b[17][0]++, parseInt(row.absent_count)) ||
        /* istanbul ignore next */
        (cov_cyu5sf93().b[17][1]++, 0)
      };
    });
  }
}
/* istanbul ignore next */
cov_cyu5sf93().s[46]++;
exports.HRDashboardService = HRDashboardService;
/* istanbul ignore next */
cov_cyu5sf93().s[47]++;
exports.hrDashboardService = new HRDashboardService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,