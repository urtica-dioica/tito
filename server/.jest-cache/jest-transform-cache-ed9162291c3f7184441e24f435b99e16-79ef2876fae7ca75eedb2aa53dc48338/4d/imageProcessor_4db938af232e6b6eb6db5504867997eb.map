{"version":3,"names":["cov_o02dghz0s","actualCoverage","promises_1","s","__importDefault","require","path_1","environment_1","ImageProcessor","ensureUploadDir","f","default","access","UPLOAD_DIR","mkdir","recursive","generateFilename","employeeId","sessionType","timestamp","Date","toISOString","replace","extension","processSelfieImage","base64Data","b","startsWith","Error","matches","match","imageType","imageData","mimeType","ALLOWED_TYPES","includes","buffer","Buffer","from","length","MAX_SIZE","fileName","filePath","join","writeFile","fileSize","error","console","message","deleteSelfieImage","unlink","getSelfieImageAsBase64","readFile","getMimeTypeFromPath","toString","ext","extname","toLowerCase","cleanupOldSelfies","retentionDays","config","upload","selfieRetentionDays","cutoffDate","setDate","getDate","files","readdir","deletedCount","file","stats","stat","mtime","validateBase64Image","isValid","size","exports","path","maxSize"],"sources":["/home/kim/tito/server/src/utils/imageProcessor.ts"],"sourcesContent":["import fs from 'fs/promises';\nimport path from 'path';\nimport { config } from '../config/environment';\n\n/**\n * Image processing utility for handling selfie images\n */\nexport class ImageProcessor {\n  private static readonly UPLOAD_DIR = config.upload.path;\n  private static readonly MAX_SIZE = config.upload.maxSize;\n  private static readonly ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n\n  /**\n   * Ensure upload directory exists\n   */\n  private static async ensureUploadDir(): Promise<void> {\n    try {\n      await fs.access(this.UPLOAD_DIR);\n    } catch {\n      await fs.mkdir(this.UPLOAD_DIR, { recursive: true });\n    }\n  }\n\n  /**\n   * Generate unique filename for selfie image\n   */\n  private static generateFilename(employeeId: string, sessionType: string): string {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const extension = 'jpg'; // Default to jpg for selfies\n    return `selfie_${employeeId}_${sessionType}_${timestamp}.${extension}`;\n  }\n\n  /**\n   * Process and save base64 selfie image\n   */\n  static async processSelfieImage(\n    base64Data: string, \n    employeeId: string, \n    sessionType: string\n  ): Promise<{\n    filePath: string;\n    fileName: string;\n    fileSize: number;\n  }> {\n    try {\n      // Validate base64 data\n      if (!base64Data || !base64Data.startsWith('data:image/')) {\n        throw new Error('Invalid base64 image data');\n      }\n\n      // Extract image data and metadata\n      const matches = base64Data.match(/^data:image\\/([a-zA-Z]+);base64,(.+)$/);\n      if (!matches) {\n        throw new Error('Invalid base64 image format');\n      }\n\n      const [, imageType, imageData] = matches;\n      const mimeType = `image/${imageType}`;\n\n      // Validate image type\n      if (!this.ALLOWED_TYPES.includes(mimeType)) {\n        throw new Error(`Unsupported image type: ${mimeType}`);\n      }\n\n      // Convert base64 to buffer\n      const buffer = Buffer.from(imageData, 'base64');\n      \n      // Validate file size\n      if (buffer.length > this.MAX_SIZE) {\n        throw new Error(`Image size exceeds maximum allowed size of ${this.MAX_SIZE} bytes`);\n      }\n\n      // Ensure upload directory exists\n      await this.ensureUploadDir();\n\n      // Generate filename and file path\n      const fileName = this.generateFilename(employeeId, sessionType);\n      const filePath = path.join(this.UPLOAD_DIR, fileName);\n\n      // Save file\n      await fs.writeFile(filePath, buffer);\n\n      return {\n        filePath,\n        fileName,\n        fileSize: buffer.length\n      };\n    } catch (error) {\n      console.error('Error processing selfie image:', error);\n      throw new Error(`Failed to process selfie image: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Delete selfie image file\n   */\n  static async deleteSelfieImage(filePath: string): Promise<void> {\n    try {\n      await fs.unlink(filePath);\n    } catch (error) {\n      console.error('Error deleting selfie image:', error);\n      // Don't throw error for file deletion failures\n    }\n  }\n\n  /**\n   * Get selfie image as base64 (for API responses)\n   */\n  static async getSelfieImageAsBase64(filePath: string): Promise<string | null> {\n    try {\n      const buffer = await fs.readFile(filePath);\n      const mimeType = this.getMimeTypeFromPath(filePath);\n      return `data:${mimeType};base64,${buffer.toString('base64')}`;\n    } catch (error) {\n      console.error('Error reading selfie image:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get MIME type from file path\n   */\n  private static getMimeTypeFromPath(filePath: string): string {\n    const ext = path.extname(filePath).toLowerCase();\n    switch (ext) {\n      case '.jpg':\n      case '.jpeg':\n        return 'image/jpeg';\n      case '.png':\n        return 'image/png';\n      case '.webp':\n        return 'image/webp';\n      default:\n        return 'image/jpeg';\n    }\n  }\n\n  /**\n   * Clean up old selfie images based on retention policy\n   */\n  static async cleanupOldSelfies(): Promise<number> {\n    try {\n      const retentionDays = config.upload.selfieRetentionDays;\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n\n      const files = await fs.readdir(this.UPLOAD_DIR);\n      let deletedCount = 0;\n\n      for (const file of files) {\n        if (file.startsWith('selfie_')) {\n          const filePath = path.join(this.UPLOAD_DIR, file);\n          const stats = await fs.stat(filePath);\n          \n          if (stats.mtime < cutoffDate) {\n            await this.deleteSelfieImage(filePath);\n            deletedCount++;\n          }\n        }\n      }\n\n      return deletedCount;\n    } catch (error) {\n      console.error('Error cleaning up old selfies:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Validate base64 image data\n   */\n  static validateBase64Image(base64Data: string): {\n    isValid: boolean;\n    error?: string;\n    mimeType?: string;\n    size?: number;\n  } {\n    try {\n      if (!base64Data || !base64Data.startsWith('data:image/')) {\n        return { isValid: false, error: 'Invalid base64 image data' };\n      }\n\n      const matches = base64Data.match(/^data:image\\/([a-zA-Z]+);base64,(.+)$/);\n      if (!matches) {\n        return { isValid: false, error: 'Invalid base64 image format' };\n      }\n\n      const [, imageType, imageData] = matches;\n      const mimeType = `image/${imageType}`;\n\n      if (!this.ALLOWED_TYPES.includes(mimeType)) {\n        return { isValid: false, error: `Unsupported image type: ${mimeType}` };\n      }\n\n      const buffer = Buffer.from(imageData, 'base64');\n      if (buffer.length > this.MAX_SIZE) {\n        return { \n          isValid: false, \n          error: `Image size exceeds maximum allowed size of ${this.MAX_SIZE} bytes` \n        };\n      }\n\n      return {\n        isValid: true,\n        mimeType,\n        size: buffer.length\n      };\n    } catch (error) {\n      return { \n        isValid: false, \n        error: error instanceof Error ? error.message : 'Unknown validation error' \n      };\n    }\n  }\n}\n"],"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","ignoreList":[]}