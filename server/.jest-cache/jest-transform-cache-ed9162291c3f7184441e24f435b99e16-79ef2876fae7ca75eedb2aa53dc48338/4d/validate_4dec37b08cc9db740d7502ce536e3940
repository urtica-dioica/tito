859eb4e3b4a3fe172b2585a68113293f
"use strict";

/* istanbul ignore next */
function cov_18iwvpj4jt() {
  var path = "/home/kim/tito/server/src/middleware/validation/validate.ts";
  var hash = "7d70d7a7da5de9ced8d4cd97a90e3a8e91900a5f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/middleware/validation/validate.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 203
        }
      },
      "2": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 50,
          column: 1
        }
      },
      "3": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 49,
          column: 6
        }
      },
      "4": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "5": {
        start: {
          line: 10,
          column: 25
        },
        end: {
          line: 10,
          column: 38
        }
      },
      "6": {
        start: {
          line: 11,
          column: 37
        },
        end: {
          line: 15,
          column: 14
        }
      },
      "7": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 32,
          column: 13
        }
      },
      "8": {
        start: {
          line: 17,
          column: 37
        },
        end: {
          line: 21,
          column: 19
        }
      },
      "9": {
        start: {
          line: 17,
          column: 66
        },
        end: {
          line: 21,
          column: 17
        }
      },
      "10": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 30,
          column: 19
        }
      },
      "11": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 23
        }
      },
      "12": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 34
        }
      },
      "13": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 19
        }
      },
      "14": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 65
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "16": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 19
        }
      },
      "17": {
        start: {
          line: 51,
          column: 0
        },
        end: {
          line: 51,
          column: 28
        }
      },
      "18": {
        start: {
          line: 55,
          column: 21
        },
        end: {
          line: 55,
          column: 70
        }
      },
      "19": {
        start: {
          line: 55,
          column: 33
        },
        end: {
          line: 55,
          column: 70
        }
      },
      "20": {
        start: {
          line: 56,
          column: 0
        },
        end: {
          line: 56,
          column: 36
        }
      },
      "21": {
        start: {
          line: 60,
          column: 22
        },
        end: {
          line: 60,
          column: 72
        }
      },
      "22": {
        start: {
          line: 60,
          column: 34
        },
        end: {
          line: 60,
          column: 72
        }
      },
      "23": {
        start: {
          line: 61,
          column: 0
        },
        end: {
          line: 61,
          column: 38
        }
      },
      "24": {
        start: {
          line: 65,
          column: 23
        },
        end: {
          line: 65,
          column: 74
        }
      },
      "25": {
        start: {
          line: 65,
          column: 35
        },
        end: {
          line: 65,
          column: 74
        }
      },
      "26": {
        start: {
          line: 66,
          column: 0
        },
        end: {
          line: 66,
          column: 40
        }
      },
      "27": {
        start: {
          line: 70,
          column: 25
        },
        end: {
          line: 166,
          column: 1
        }
      },
      "28": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 165,
          column: 6
        }
      },
      "29": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "30": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "31": {
        start: {
          line: 75,
          column: 41
        },
        end: {
          line: 79,
          column: 18
        }
      },
      "32": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 96,
          column: 17
        }
      },
      "33": {
        start: {
          line: 81,
          column: 41
        },
        end: {
          line: 85,
          column: 23
        }
      },
      "34": {
        start: {
          line: 81,
          column: 70
        },
        end: {
          line: 85,
          column: 21
        }
      },
      "35": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 94,
          column: 23
        }
      },
      "36": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 95,
          column: 27
        }
      },
      "37": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 33
        }
      },
      "38": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 124,
          column: 13
        }
      },
      "39": {
        start: {
          line: 101,
          column: 41
        },
        end: {
          line: 105,
          column: 18
        }
      },
      "40": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 122,
          column: 17
        }
      },
      "41": {
        start: {
          line: 107,
          column: 41
        },
        end: {
          line: 111,
          column: 23
        }
      },
      "42": {
        start: {
          line: 107,
          column: 70
        },
        end: {
          line: 111,
          column: 21
        }
      },
      "43": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 120,
          column: 23
        }
      },
      "44": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 27
        }
      },
      "45": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 34
        }
      },
      "46": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "47": {
        start: {
          line: 127,
          column: 41
        },
        end: {
          line: 131,
          column: 18
        }
      },
      "48": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 148,
          column: 17
        }
      },
      "49": {
        start: {
          line: 133,
          column: 41
        },
        end: {
          line: 137,
          column: 23
        }
      },
      "50": {
        start: {
          line: 133,
          column: 70
        },
        end: {
          line: 137,
          column: 21
        }
      },
      "51": {
        start: {
          line: 138,
          column: 20
        },
        end: {
          line: 146,
          column: 23
        }
      },
      "52": {
        start: {
          line: 147,
          column: 20
        },
        end: {
          line: 147,
          column: 27
        }
      },
      "53": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 35
        }
      },
      "54": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 19
        }
      },
      "55": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 74
        }
      },
      "56": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "57": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 19
        }
      },
      "58": {
        start: {
          line: 167,
          column: 0
        },
        end: {
          line: 167,
          column: 44
        }
      },
      "59": {
        start: {
          line: 171,
          column: 23
        },
        end: {
          line: 206,
          column: 1
        }
      },
      "60": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 205,
          column: 6
        }
      },
      "61": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "62": {
        start: {
          line: 174,
          column: 40
        },
        end: {
          line: 174,
          column: 54
        }
      },
      "63": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 190,
          column: 13
        }
      },
      "64": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 188,
          column: 19
        }
      },
      "65": {
        start: {
          line: 183,
          column: 50
        },
        end: {
          line: 187,
          column: 21
        }
      },
      "66": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 23
        }
      },
      "67": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 19
        }
      },
      "68": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 72
        }
      },
      "69": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 202,
          column: 15
        }
      },
      "70": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 19
        }
      },
      "71": {
        start: {
          line: 207,
          column: 0
        },
        end: {
          line: 207,
          column: 40
        }
      },
      "72": {
        start: {
          line: 211,
          column: 22
        },
        end: {
          line: 231,
          column: 1
        }
      },
      "73": {
        start: {
          line: 212,
          column: 4
        },
        end: {
          line: 230,
          column: 5
        }
      },
      "74": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "75": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 48
        }
      },
      "76": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "77": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 50
        }
      },
      "78": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "79": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 52
        }
      },
      "80": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 15
        }
      },
      "81": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 52
        }
      },
      "82": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 15
        }
      },
      "83": {
        start: {
          line: 232,
          column: 0
        },
        end: {
          line: 232,
          column: 38
        }
      },
      "84": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 239,
          column: 5
        }
      },
      "85": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 35
        }
      },
      "86": {
        start: {
          line: 240,
          column: 4
        },
        end: {
          line: 242,
          column: 5
        }
      },
      "87": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 53
        }
      },
      "88": {
        start: {
          line: 241,
          column: 31
        },
        end: {
          line: 241,
          column: 51
        }
      },
      "89": {
        start: {
          line: 243,
          column: 4
        },
        end: {
          line: 249,
          column: 5
        }
      },
      "90": {
        start: {
          line: 244,
          column: 26
        },
        end: {
          line: 244,
          column: 28
        }
      },
      "91": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "92": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 51
        }
      },
      "93": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 25
        }
      },
      "94": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 250,
          column: 15
        }
      },
      "95": {
        start: {
          line: 256,
          column: 4
        },
        end: {
          line: 262,
          column: 34
        }
      },
      "96": {
        start: {
          line: 269,
          column: 27
        },
        end: {
          line: 276,
          column: 1
        }
      },
      "97": {
        start: {
          line: 270,
          column: 4
        },
        end: {
          line: 275,
          column: 6
        }
      },
      "98": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 103
        }
      },
      "99": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 15
        }
      },
      "100": {
        start: {
          line: 277,
          column: 0
        },
        end: {
          line: 277,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 7,
            column: 18
          }
        },
        loc: {
          start: {
            line: 7,
            column: 48
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 8,
            column: 11
          },
          end: {
            line: 8,
            column: 12
          }
        },
        loc: {
          start: {
            line: 8,
            column: 31
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 8
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 55
          },
          end: {
            line: 17,
            column: 56
          }
        },
        loc: {
          start: {
            line: 17,
            column: 66
          },
          end: {
            line: 21,
            column: 17
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 55,
            column: 21
          },
          end: {
            line: 55,
            column: 22
          }
        },
        loc: {
          start: {
            line: 55,
            column: 33
          },
          end: {
            line: 55,
            column: 70
          }
        },
        line: 55
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 60,
            column: 22
          },
          end: {
            line: 60,
            column: 23
          }
        },
        loc: {
          start: {
            line: 60,
            column: 34
          },
          end: {
            line: 60,
            column: 72
          }
        },
        line: 60
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 65,
            column: 23
          },
          end: {
            line: 65,
            column: 24
          }
        },
        loc: {
          start: {
            line: 65,
            column: 35
          },
          end: {
            line: 65,
            column: 74
          }
        },
        line: 65
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 70,
            column: 25
          },
          end: {
            line: 70,
            column: 26
          }
        },
        loc: {
          start: {
            line: 70,
            column: 38
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 70
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 71,
            column: 11
          },
          end: {
            line: 71,
            column: 12
          }
        },
        loc: {
          start: {
            line: 71,
            column: 31
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 71
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 81,
            column: 59
          },
          end: {
            line: 81,
            column: 60
          }
        },
        loc: {
          start: {
            line: 81,
            column: 70
          },
          end: {
            line: 85,
            column: 21
          }
        },
        line: 81
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 107,
            column: 59
          },
          end: {
            line: 107,
            column: 60
          }
        },
        loc: {
          start: {
            line: 107,
            column: 70
          },
          end: {
            line: 111,
            column: 21
          }
        },
        line: 107
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 133,
            column: 59
          },
          end: {
            line: 133,
            column: 60
          }
        },
        loc: {
          start: {
            line: 133,
            column: 70
          },
          end: {
            line: 137,
            column: 21
          }
        },
        line: 133
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 171,
            column: 23
          },
          end: {
            line: 171,
            column: 24
          }
        },
        loc: {
          start: {
            line: 171,
            column: 38
          },
          end: {
            line: 206,
            column: 1
          }
        },
        line: 171
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 172,
            column: 11
          },
          end: {
            line: 172,
            column: 12
          }
        },
        loc: {
          start: {
            line: 172,
            column: 31
          },
          end: {
            line: 205,
            column: 5
          }
        },
        line: 172
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 183,
            column: 40
          },
          end: {
            line: 183,
            column: 41
          }
        },
        loc: {
          start: {
            line: 183,
            column: 50
          },
          end: {
            line: 187,
            column: 21
          }
        },
        line: 183
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 211,
            column: 22
          },
          end: {
            line: 211,
            column: 23
          }
        },
        loc: {
          start: {
            line: 211,
            column: 43
          },
          end: {
            line: 231,
            column: 1
          }
        },
        line: 211
      },
      "15": {
        name: "sanitizeObject",
        decl: {
          start: {
            line: 236,
            column: 9
          },
          end: {
            line: 236,
            column: 23
          }
        },
        loc: {
          start: {
            line: 236,
            column: 29
          },
          end: {
            line: 251,
            column: 1
          }
        },
        line: 236
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 241,
            column: 23
          },
          end: {
            line: 241,
            column: 24
          }
        },
        loc: {
          start: {
            line: 241,
            column: 31
          },
          end: {
            line: 241,
            column: 51
          }
        },
        line: 241
      },
      "17": {
        name: "sanitizeString",
        decl: {
          start: {
            line: 255,
            column: 9
          },
          end: {
            line: 255,
            column: 23
          }
        },
        loc: {
          start: {
            line: 255,
            column: 29
          },
          end: {
            line: 263,
            column: 1
          }
        },
        line: 255
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 269,
            column: 27
          },
          end: {
            line: 269,
            column: 28
          }
        },
        loc: {
          start: {
            line: 269,
            column: 41
          },
          end: {
            line: 276,
            column: 1
          }
        },
        line: 269
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 270,
            column: 11
          },
          end: {
            line: 270,
            column: 12
          }
        },
        loc: {
          start: {
            line: 270,
            column: 33
          },
          end: {
            line: 275,
            column: 5
          }
        },
        line: 270
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 7,
            column: 26
          },
          end: {
            line: 7,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 7,
            column: 37
          },
          end: {
            line: 7,
            column: 43
          }
        }],
        line: 7
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 31
          },
          end: {
            line: 27,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 31
          },
          end: {
            line: 27,
            column: 44
          }
        }, {
          start: {
            line: 27,
            column: 48
          },
          end: {
            line: 27,
            column: 57
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 44,
            column: 27
          },
          end: {
            line: 44,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 27
          },
          end: {
            line: 44,
            column: 40
          }
        }, {
          start: {
            line: 44,
            column: 44
          },
          end: {
            line: 44,
            column: 53
          }
        }],
        line: 44
      },
      "4": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "5": {
        loc: {
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "6": {
        loc: {
          start: {
            line: 91,
            column: 35
          },
          end: {
            line: 91,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 35
          },
          end: {
            line: 91,
            column: 48
          }
        }, {
          start: {
            line: 91,
            column: 52
          },
          end: {
            line: 91,
            column: 61
          }
        }],
        line: 91
      },
      "7": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "8": {
        loc: {
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "9": {
        loc: {
          start: {
            line: 117,
            column: 35
          },
          end: {
            line: 117,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 35
          },
          end: {
            line: 117,
            column: 48
          }
        }, {
          start: {
            line: 117,
            column: 52
          },
          end: {
            line: 117,
            column: 61
          }
        }],
        line: 117
      },
      "10": {
        loc: {
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "11": {
        loc: {
          start: {
            line: 132,
            column: 16
          },
          end: {
            line: 148,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 16
          },
          end: {
            line: 148,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "12": {
        loc: {
          start: {
            line: 143,
            column: 35
          },
          end: {
            line: 143,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 35
          },
          end: {
            line: 143,
            column: 48
          }
        }, {
          start: {
            line: 143,
            column: 52
          },
          end: {
            line: 143,
            column: 61
          }
        }],
        line: 143
      },
      "13": {
        loc: {
          start: {
            line: 160,
            column: 27
          },
          end: {
            line: 160,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 27
          },
          end: {
            line: 160,
            column: 40
          }
        }, {
          start: {
            line: 160,
            column: 44
          },
          end: {
            line: 160,
            column: 53
          }
        }],
        line: 160
      },
      "14": {
        loc: {
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 190,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 190,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "15": {
        loc: {
          start: {
            line: 181,
            column: 31
          },
          end: {
            line: 181,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 31
          },
          end: {
            line: 181,
            column: 44
          }
        }, {
          start: {
            line: 181,
            column: 48
          },
          end: {
            line: 181,
            column: 57
          }
        }],
        line: 181
      },
      "16": {
        loc: {
          start: {
            line: 200,
            column: 27
          },
          end: {
            line: 200,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 27
          },
          end: {
            line: 200,
            column: 40
          }
        }, {
          start: {
            line: 200,
            column: 44
          },
          end: {
            line: 200,
            column: 53
          }
        }],
        line: 200
      },
      "17": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "18": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "19": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "20": {
        loc: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "21": {
        loc: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "22": {
        loc: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "23": {
        loc: {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 243,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 243,
            column: 20
          }
        }, {
          start: {
            line: 243,
            column: 24
          },
          end: {
            line: 243,
            column: 47
          }
        }],
        line: 243
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/middleware/validation/validate.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/middleware/validation/validate.ts"],
      sourcesContent: ["import { Request, Response, NextFunction } from 'express';\nimport { Schema } from 'joi';\nimport { ErrorResponse } from '../../utils/types/express';\n\n/**\n * Validation middleware using Joi schemas\n */\nexport const validate = (schema: Schema, property: 'body' | 'query' | 'params' = 'body') => {\n  return (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n    try {\n      const data = req[property];\n      const { error, value } = schema.validate(data, {\n        abortEarly: false,\n        stripUnknown: true,\n        allowUnknown: false\n      });\n\n      if (error) {\n        const errorDetails = error.details.map(detail => ({\n          field: detail.path.join('.'),\n          message: detail.message,\n          type: detail.type\n        }));\n\n        res.status(400).json({\n          success: false,\n          message: 'Validation failed',\n          error: 'VALIDATION_ERROR',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: errorDetails\n        });\n        return;\n      }\n\n      // Replace the request data with validated data\n      req[property] = value;\n      next();\n          } catch (error) {\n        console.error('Validation middleware error:', error);\n        \n        res.status(500).json({\n          success: false,\n          message: 'Validation processing failed',\n          error: 'VALIDATION_PROCESSING_ERROR',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n  };\n};\n\n/**\n * Validate request body\n */\nexport const validateBody = (schema: Schema) => validate(schema, 'body');\n\n/**\n * Validate request query parameters\n */\nexport const validateQuery = (schema: Schema) => validate(schema, 'query');\n\n/**\n * Validate request path parameters\n */\nexport const validateParams = (schema: Schema) => validate(schema, 'params');\n\n/**\n * Validate multiple schemas for different properties\n */\nexport const validateMultiple = (schemas: {\n  body?: Schema;\n  query?: Schema;\n  params?: Schema;\n}) => {\n  return (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n    try {\n      // Validate body\n      if (schemas.body) {\n        const { error, value } = schemas.body.validate(req.body, {\n          abortEarly: false,\n          stripUnknown: true,\n          allowUnknown: false\n        });\n\n        if (error) {\n          const errorDetails = error.details.map(detail => ({\n            field: `body.${detail.path.join('.')}`,\n            message: detail.message,\n            type: detail.type\n          }));\n\n          res.status(400).json({\n            success: false,\n            message: 'Body validation failed',\n            error: 'BODY_VALIDATION_ERROR',\n            timestamp: new Date().toISOString(),\n            requestId: req.requestId || 'unknown',\n            path: req.path,\n            details: errorDetails\n          });\n          return;\n        }\n\n        req.body = value;\n      }\n\n      // Validate query\n      if (schemas.query) {\n        const { error, value } = schemas.query.validate(req.query, {\n          abortEarly: false,\n          stripUnknown: true,\n          allowUnknown: false\n        });\n\n        if (error) {\n          const errorDetails = error.details.map(detail => ({\n            field: `query.${detail.path.join('.')}`,\n            message: detail.message,\n            type: detail.type\n          }));\n\n          res.status(400).json({\n            success: false,\n            message: 'Query validation failed',\n            error: 'QUERY_VALIDATION_ERROR',\n            timestamp: new Date().toISOString(),\n            requestId: req.requestId || 'unknown',\n            path: req.path,\n            details: errorDetails\n          });\n          return;\n        }\n\n        req.query = value;\n      }\n\n      // Validate params\n      if (schemas.params) {\n        const { error, value } = schemas.params.validate(req.params, {\n          abortEarly: false,\n          stripUnknown: true,\n          allowUnknown: false\n        });\n\n        if (error) {\n          const errorDetails = error.details.map(detail => ({\n            field: `params.${detail.path.join('.')}`,\n            message: detail.message,\n            type: detail.type\n          }));\n\n          res.status(400).json({\n            success: false,\n            message: 'Path parameters validation failed',\n            error: 'PARAMS_VALIDATION_ERROR',\n            timestamp: new Date().toISOString(),\n            requestId: req.requestId || 'unknown',\n            path: req.path,\n            details: errorDetails\n          });\n          return;\n        }\n\n        req.params = value;\n      }\n\n      next();\n    } catch (error) {\n      console.error('Multiple validation middleware error:', error);\n      \n      res.status(500).json({\n        success: false,\n        message: 'Validation processing failed',\n        error: 'VALIDATION_PROCESSING_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId || 'unknown',\n        path: req.path\n      });\n      return;\n    }\n  };\n};\n\n/**\n * Custom validation function for complex business logic\n */\nexport const customValidate = (\n  validator: (req: Request) => { isValid: boolean; errors: string[] }\n) => {\n  return (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n    try {\n      const { isValid, errors } = validator(req);\n\n      if (!isValid) {\n        res.status(400).json({\n          success: false,\n          message: 'Custom validation failed',\n          error: 'CUSTOM_VALIDATION_ERROR',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: errors.map(error => ({\n            field: 'custom',\n            message: error,\n            type: 'custom'\n          }))\n        });\n        return;\n      }\n\n      next();\n    } catch (error) {\n      console.error('Custom validation middleware error:', error);\n      \n      res.status(500).json({\n        success: false,\n        message: 'Custom validation processing failed',\n        error: 'CUSTOM_VALIDATION_PROCESSING_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId || 'unknown',\n        path: req.path\n      });\n      return;\n    }\n  };\n};\n\n/**\n * Sanitize input data to prevent XSS\n */\nexport const sanitizeInput = (req: Request, _res: Response, next: NextFunction) => {\n  try {\n    // Sanitize body\n    if (req.body) {\n      req.body = sanitizeObject(req.body);\n    }\n\n    // Sanitize query\n    if (req.query) {\n      req.query = sanitizeObject(req.query);\n    }\n\n    // Sanitize params\n    if (req.params) {\n      req.params = sanitizeObject(req.params);\n    }\n\n    next();\n  } catch (error) {\n    console.error('Sanitization error:', error);\n    next();\n  }\n};\n\n/**\n * Recursively sanitize object values\n */\nfunction sanitizeObject(obj: any): any {\n  if (typeof obj === 'string') {\n    return sanitizeString(obj);\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeObject(item));\n  }\n\n  if (obj !== null && typeof obj === 'object') {\n    const sanitized: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[key] = sanitizeObject(value);\n    }\n    return sanitized;\n  }\n\n  return obj;\n}\n\n/**\n * Sanitize string to prevent XSS\n */\nfunction sanitizeString(str: string): string {\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;');\n}\n\n/**\n * Validate file upload\n * Note: This function requires multer middleware to be configured\n * and the Request type to be extended with the files property\n */\nexport const validateFileUpload = (_options: {\n  maxSize?: number; // in bytes\n  allowedTypes?: string[];\n  maxFiles?: number;\n}) => {\n  return (_req: Request, _res: Response<ErrorResponse>, next: NextFunction): void => {\n    // TODO: Implement file validation when multer is configured\n    // For now, skip validation to avoid TypeScript errors\n    console.warn('File validation middleware not yet implemented - requires multer configuration');\n    next();\n  };\n}; "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7d70d7a7da5de9ced8d4cd97a90e3a8e91900a5f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_18iwvpj4jt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_18iwvpj4jt();
cov_18iwvpj4jt().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_18iwvpj4jt().s[1]++;
exports.validateFileUpload = exports.sanitizeInput = exports.customValidate = exports.validateMultiple = exports.validateParams = exports.validateQuery = exports.validateBody = exports.validate = void 0;
/**
 * Validation middleware using Joi schemas
 */
/* istanbul ignore next */
cov_18iwvpj4jt().s[2]++;
const validate = (schema, property =
/* istanbul ignore next */
(cov_18iwvpj4jt().b[0][0]++, 'body')) => {
  /* istanbul ignore next */
  cov_18iwvpj4jt().f[0]++;
  cov_18iwvpj4jt().s[3]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_18iwvpj4jt().f[1]++;
    cov_18iwvpj4jt().s[4]++;
    try {
      const data =
      /* istanbul ignore next */
      (cov_18iwvpj4jt().s[5]++, req[property]);
      const {
        error,
        value
      } =
      /* istanbul ignore next */
      (cov_18iwvpj4jt().s[6]++, schema.validate(data, {
        abortEarly: false,
        stripUnknown: true,
        allowUnknown: false
      }));
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[7]++;
      if (error) {
        /* istanbul ignore next */
        cov_18iwvpj4jt().b[1][0]++;
        const errorDetails =
        /* istanbul ignore next */
        (cov_18iwvpj4jt().s[8]++, error.details.map(detail => {
          /* istanbul ignore next */
          cov_18iwvpj4jt().f[2]++;
          cov_18iwvpj4jt().s[9]++;
          return {
            field: detail.path.join('.'),
            message: detail.message,
            type: detail.type
          };
        }));
        /* istanbul ignore next */
        cov_18iwvpj4jt().s[10]++;
        res.status(400).json({
          success: false,
          message: 'Validation failed',
          error: 'VALIDATION_ERROR',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_18iwvpj4jt().b[2][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_18iwvpj4jt().b[2][1]++, 'unknown'),
          path: req.path,
          details: errorDetails
        });
        /* istanbul ignore next */
        cov_18iwvpj4jt().s[11]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_18iwvpj4jt().b[1][1]++;
      }
      // Replace the request data with validated data
      cov_18iwvpj4jt().s[12]++;
      req[property] = value;
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[13]++;
      next();
    } catch (error) {
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[14]++;
      console.error('Validation middleware error:', error);
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[15]++;
      res.status(500).json({
        success: false,
        message: 'Validation processing failed',
        error: 'VALIDATION_PROCESSING_ERROR',
        timestamp: new Date().toISOString(),
        requestId:
        /* istanbul ignore next */
        (cov_18iwvpj4jt().b[3][0]++, req.requestId) ||
        /* istanbul ignore next */
        (cov_18iwvpj4jt().b[3][1]++, 'unknown'),
        path: req.path
      });
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[16]++;
      return;
    }
  };
};
/* istanbul ignore next */
cov_18iwvpj4jt().s[17]++;
exports.validate = validate;
/**
 * Validate request body
 */
/* istanbul ignore next */
cov_18iwvpj4jt().s[18]++;
const validateBody = schema => {
  /* istanbul ignore next */
  cov_18iwvpj4jt().f[3]++;
  cov_18iwvpj4jt().s[19]++;
  return (0, exports.validate)(schema, 'body');
};
/* istanbul ignore next */
cov_18iwvpj4jt().s[20]++;
exports.validateBody = validateBody;
/**
 * Validate request query parameters
 */
/* istanbul ignore next */
cov_18iwvpj4jt().s[21]++;
const validateQuery = schema => {
  /* istanbul ignore next */
  cov_18iwvpj4jt().f[4]++;
  cov_18iwvpj4jt().s[22]++;
  return (0, exports.validate)(schema, 'query');
};
/* istanbul ignore next */
cov_18iwvpj4jt().s[23]++;
exports.validateQuery = validateQuery;
/**
 * Validate request path parameters
 */
/* istanbul ignore next */
cov_18iwvpj4jt().s[24]++;
const validateParams = schema => {
  /* istanbul ignore next */
  cov_18iwvpj4jt().f[5]++;
  cov_18iwvpj4jt().s[25]++;
  return (0, exports.validate)(schema, 'params');
};
/* istanbul ignore next */
cov_18iwvpj4jt().s[26]++;
exports.validateParams = validateParams;
/**
 * Validate multiple schemas for different properties
 */
/* istanbul ignore next */
cov_18iwvpj4jt().s[27]++;
const validateMultiple = schemas => {
  /* istanbul ignore next */
  cov_18iwvpj4jt().f[6]++;
  cov_18iwvpj4jt().s[28]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_18iwvpj4jt().f[7]++;
    cov_18iwvpj4jt().s[29]++;
    try {
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[30]++;
      // Validate body
      if (schemas.body) {
        /* istanbul ignore next */
        cov_18iwvpj4jt().b[4][0]++;
        const {
          error,
          value
        } =
        /* istanbul ignore next */
        (cov_18iwvpj4jt().s[31]++, schemas.body.validate(req.body, {
          abortEarly: false,
          stripUnknown: true,
          allowUnknown: false
        }));
        /* istanbul ignore next */
        cov_18iwvpj4jt().s[32]++;
        if (error) {
          /* istanbul ignore next */
          cov_18iwvpj4jt().b[5][0]++;
          const errorDetails =
          /* istanbul ignore next */
          (cov_18iwvpj4jt().s[33]++, error.details.map(detail => {
            /* istanbul ignore next */
            cov_18iwvpj4jt().f[8]++;
            cov_18iwvpj4jt().s[34]++;
            return {
              field: `body.${detail.path.join('.')}`,
              message: detail.message,
              type: detail.type
            };
          }));
          /* istanbul ignore next */
          cov_18iwvpj4jt().s[35]++;
          res.status(400).json({
            success: false,
            message: 'Body validation failed',
            error: 'BODY_VALIDATION_ERROR',
            timestamp: new Date().toISOString(),
            requestId:
            /* istanbul ignore next */
            (cov_18iwvpj4jt().b[6][0]++, req.requestId) ||
            /* istanbul ignore next */
            (cov_18iwvpj4jt().b[6][1]++, 'unknown'),
            path: req.path,
            details: errorDetails
          });
          /* istanbul ignore next */
          cov_18iwvpj4jt().s[36]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_18iwvpj4jt().b[5][1]++;
        }
        cov_18iwvpj4jt().s[37]++;
        req.body = value;
      } else
      /* istanbul ignore next */
      {
        cov_18iwvpj4jt().b[4][1]++;
      }
      // Validate query
      cov_18iwvpj4jt().s[38]++;
      if (schemas.query) {
        /* istanbul ignore next */
        cov_18iwvpj4jt().b[7][0]++;
        const {
          error,
          value
        } =
        /* istanbul ignore next */
        (cov_18iwvpj4jt().s[39]++, schemas.query.validate(req.query, {
          abortEarly: false,
          stripUnknown: true,
          allowUnknown: false
        }));
        /* istanbul ignore next */
        cov_18iwvpj4jt().s[40]++;
        if (error) {
          /* istanbul ignore next */
          cov_18iwvpj4jt().b[8][0]++;
          const errorDetails =
          /* istanbul ignore next */
          (cov_18iwvpj4jt().s[41]++, error.details.map(detail => {
            /* istanbul ignore next */
            cov_18iwvpj4jt().f[9]++;
            cov_18iwvpj4jt().s[42]++;
            return {
              field: `query.${detail.path.join('.')}`,
              message: detail.message,
              type: detail.type
            };
          }));
          /* istanbul ignore next */
          cov_18iwvpj4jt().s[43]++;
          res.status(400).json({
            success: false,
            message: 'Query validation failed',
            error: 'QUERY_VALIDATION_ERROR',
            timestamp: new Date().toISOString(),
            requestId:
            /* istanbul ignore next */
            (cov_18iwvpj4jt().b[9][0]++, req.requestId) ||
            /* istanbul ignore next */
            (cov_18iwvpj4jt().b[9][1]++, 'unknown'),
            path: req.path,
            details: errorDetails
          });
          /* istanbul ignore next */
          cov_18iwvpj4jt().s[44]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_18iwvpj4jt().b[8][1]++;
        }
        cov_18iwvpj4jt().s[45]++;
        req.query = value;
      } else
      /* istanbul ignore next */
      {
        cov_18iwvpj4jt().b[7][1]++;
      }
      // Validate params
      cov_18iwvpj4jt().s[46]++;
      if (schemas.params) {
        /* istanbul ignore next */
        cov_18iwvpj4jt().b[10][0]++;
        const {
          error,
          value
        } =
        /* istanbul ignore next */
        (cov_18iwvpj4jt().s[47]++, schemas.params.validate(req.params, {
          abortEarly: false,
          stripUnknown: true,
          allowUnknown: false
        }));
        /* istanbul ignore next */
        cov_18iwvpj4jt().s[48]++;
        if (error) {
          /* istanbul ignore next */
          cov_18iwvpj4jt().b[11][0]++;
          const errorDetails =
          /* istanbul ignore next */
          (cov_18iwvpj4jt().s[49]++, error.details.map(detail => {
            /* istanbul ignore next */
            cov_18iwvpj4jt().f[10]++;
            cov_18iwvpj4jt().s[50]++;
            return {
              field: `params.${detail.path.join('.')}`,
              message: detail.message,
              type: detail.type
            };
          }));
          /* istanbul ignore next */
          cov_18iwvpj4jt().s[51]++;
          res.status(400).json({
            success: false,
            message: 'Path parameters validation failed',
            error: 'PARAMS_VALIDATION_ERROR',
            timestamp: new Date().toISOString(),
            requestId:
            /* istanbul ignore next */
            (cov_18iwvpj4jt().b[12][0]++, req.requestId) ||
            /* istanbul ignore next */
            (cov_18iwvpj4jt().b[12][1]++, 'unknown'),
            path: req.path,
            details: errorDetails
          });
          /* istanbul ignore next */
          cov_18iwvpj4jt().s[52]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_18iwvpj4jt().b[11][1]++;
        }
        cov_18iwvpj4jt().s[53]++;
        req.params = value;
      } else
      /* istanbul ignore next */
      {
        cov_18iwvpj4jt().b[10][1]++;
      }
      cov_18iwvpj4jt().s[54]++;
      next();
    } catch (error) {
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[55]++;
      console.error('Multiple validation middleware error:', error);
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[56]++;
      res.status(500).json({
        success: false,
        message: 'Validation processing failed',
        error: 'VALIDATION_PROCESSING_ERROR',
        timestamp: new Date().toISOString(),
        requestId:
        /* istanbul ignore next */
        (cov_18iwvpj4jt().b[13][0]++, req.requestId) ||
        /* istanbul ignore next */
        (cov_18iwvpj4jt().b[13][1]++, 'unknown'),
        path: req.path
      });
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[57]++;
      return;
    }
  };
};
/* istanbul ignore next */
cov_18iwvpj4jt().s[58]++;
exports.validateMultiple = validateMultiple;
/**
 * Custom validation function for complex business logic
 */
/* istanbul ignore next */
cov_18iwvpj4jt().s[59]++;
const customValidate = validator => {
  /* istanbul ignore next */
  cov_18iwvpj4jt().f[11]++;
  cov_18iwvpj4jt().s[60]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_18iwvpj4jt().f[12]++;
    cov_18iwvpj4jt().s[61]++;
    try {
      const {
        isValid,
        errors
      } =
      /* istanbul ignore next */
      (cov_18iwvpj4jt().s[62]++, validator(req));
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[63]++;
      if (!isValid) {
        /* istanbul ignore next */
        cov_18iwvpj4jt().b[14][0]++;
        cov_18iwvpj4jt().s[64]++;
        res.status(400).json({
          success: false,
          message: 'Custom validation failed',
          error: 'CUSTOM_VALIDATION_ERROR',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_18iwvpj4jt().b[15][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_18iwvpj4jt().b[15][1]++, 'unknown'),
          path: req.path,
          details: errors.map(error => {
            /* istanbul ignore next */
            cov_18iwvpj4jt().f[13]++;
            cov_18iwvpj4jt().s[65]++;
            return {
              field: 'custom',
              message: error,
              type: 'custom'
            };
          })
        });
        /* istanbul ignore next */
        cov_18iwvpj4jt().s[66]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_18iwvpj4jt().b[14][1]++;
      }
      cov_18iwvpj4jt().s[67]++;
      next();
    } catch (error) {
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[68]++;
      console.error('Custom validation middleware error:', error);
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[69]++;
      res.status(500).json({
        success: false,
        message: 'Custom validation processing failed',
        error: 'CUSTOM_VALIDATION_PROCESSING_ERROR',
        timestamp: new Date().toISOString(),
        requestId:
        /* istanbul ignore next */
        (cov_18iwvpj4jt().b[16][0]++, req.requestId) ||
        /* istanbul ignore next */
        (cov_18iwvpj4jt().b[16][1]++, 'unknown'),
        path: req.path
      });
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[70]++;
      return;
    }
  };
};
/* istanbul ignore next */
cov_18iwvpj4jt().s[71]++;
exports.customValidate = customValidate;
/**
 * Sanitize input data to prevent XSS
 */
/* istanbul ignore next */
cov_18iwvpj4jt().s[72]++;
const sanitizeInput = (req, _res, next) => {
  /* istanbul ignore next */
  cov_18iwvpj4jt().f[14]++;
  cov_18iwvpj4jt().s[73]++;
  try {
    /* istanbul ignore next */
    cov_18iwvpj4jt().s[74]++;
    // Sanitize body
    if (req.body) {
      /* istanbul ignore next */
      cov_18iwvpj4jt().b[17][0]++;
      cov_18iwvpj4jt().s[75]++;
      req.body = sanitizeObject(req.body);
    } else
    /* istanbul ignore next */
    {
      cov_18iwvpj4jt().b[17][1]++;
    }
    // Sanitize query
    cov_18iwvpj4jt().s[76]++;
    if (req.query) {
      /* istanbul ignore next */
      cov_18iwvpj4jt().b[18][0]++;
      cov_18iwvpj4jt().s[77]++;
      req.query = sanitizeObject(req.query);
    } else
    /* istanbul ignore next */
    {
      cov_18iwvpj4jt().b[18][1]++;
    }
    // Sanitize params
    cov_18iwvpj4jt().s[78]++;
    if (req.params) {
      /* istanbul ignore next */
      cov_18iwvpj4jt().b[19][0]++;
      cov_18iwvpj4jt().s[79]++;
      req.params = sanitizeObject(req.params);
    } else
    /* istanbul ignore next */
    {
      cov_18iwvpj4jt().b[19][1]++;
    }
    cov_18iwvpj4jt().s[80]++;
    next();
  } catch (error) {
    /* istanbul ignore next */
    cov_18iwvpj4jt().s[81]++;
    console.error('Sanitization error:', error);
    /* istanbul ignore next */
    cov_18iwvpj4jt().s[82]++;
    next();
  }
};
/* istanbul ignore next */
cov_18iwvpj4jt().s[83]++;
exports.sanitizeInput = sanitizeInput;
/**
 * Recursively sanitize object values
 */
function sanitizeObject(obj) {
  /* istanbul ignore next */
  cov_18iwvpj4jt().f[15]++;
  cov_18iwvpj4jt().s[84]++;
  if (typeof obj === 'string') {
    /* istanbul ignore next */
    cov_18iwvpj4jt().b[20][0]++;
    cov_18iwvpj4jt().s[85]++;
    return sanitizeString(obj);
  } else
  /* istanbul ignore next */
  {
    cov_18iwvpj4jt().b[20][1]++;
  }
  cov_18iwvpj4jt().s[86]++;
  if (Array.isArray(obj)) {
    /* istanbul ignore next */
    cov_18iwvpj4jt().b[21][0]++;
    cov_18iwvpj4jt().s[87]++;
    return obj.map(item => {
      /* istanbul ignore next */
      cov_18iwvpj4jt().f[16]++;
      cov_18iwvpj4jt().s[88]++;
      return sanitizeObject(item);
    });
  } else
  /* istanbul ignore next */
  {
    cov_18iwvpj4jt().b[21][1]++;
  }
  cov_18iwvpj4jt().s[89]++;
  if (
  /* istanbul ignore next */
  (cov_18iwvpj4jt().b[23][0]++, obj !== null) &&
  /* istanbul ignore next */
  (cov_18iwvpj4jt().b[23][1]++, typeof obj === 'object')) {
    /* istanbul ignore next */
    cov_18iwvpj4jt().b[22][0]++;
    const sanitized =
    /* istanbul ignore next */
    (cov_18iwvpj4jt().s[90]++, {});
    /* istanbul ignore next */
    cov_18iwvpj4jt().s[91]++;
    for (const [key, value] of Object.entries(obj)) {
      /* istanbul ignore next */
      cov_18iwvpj4jt().s[92]++;
      sanitized[key] = sanitizeObject(value);
    }
    /* istanbul ignore next */
    cov_18iwvpj4jt().s[93]++;
    return sanitized;
  } else
  /* istanbul ignore next */
  {
    cov_18iwvpj4jt().b[22][1]++;
  }
  cov_18iwvpj4jt().s[94]++;
  return obj;
}
/**
 * Sanitize string to prevent XSS
 */
function sanitizeString(str) {
  /* istanbul ignore next */
  cov_18iwvpj4jt().f[17]++;
  cov_18iwvpj4jt().s[95]++;
  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g, '&#x2F;');
}
/**
 * Validate file upload
 * Note: This function requires multer middleware to be configured
 * and the Request type to be extended with the files property
 */
/* istanbul ignore next */
cov_18iwvpj4jt().s[96]++;
const validateFileUpload = _options => {
  /* istanbul ignore next */
  cov_18iwvpj4jt().f[18]++;
  cov_18iwvpj4jt().s[97]++;
  return (_req, _res, next) => {
    /* istanbul ignore next */
    cov_18iwvpj4jt().f[19]++;
    cov_18iwvpj4jt().s[98]++;
    // TODO: Implement file validation when multer is configured
    // For now, skip validation to avoid TypeScript errors
    console.warn('File validation middleware not yet implemented - requires multer configuration');
    /* istanbul ignore next */
    cov_18iwvpj4jt().s[99]++;
    next();
  };
};
/* istanbul ignore next */
cov_18iwvpj4jt().s[100]++;
exports.validateFileUpload = validateFileUpload;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,