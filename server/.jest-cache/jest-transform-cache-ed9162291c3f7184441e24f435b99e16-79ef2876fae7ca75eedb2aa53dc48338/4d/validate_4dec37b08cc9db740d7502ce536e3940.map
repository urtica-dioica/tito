{"version":3,"names":["cov_18iwvpj4jt","actualCoverage","s","validate","schema","property","b","f","req","res","next","data","error","value","abortEarly","stripUnknown","allowUnknown","errorDetails","details","map","detail","field","path","join","message","type","status","json","success","timestamp","Date","toISOString","requestId","console","exports","validateBody","validateQuery","validateParams","validateMultiple","schemas","body","query","params","customValidate","validator","isValid","errors","sanitizeInput","_res","sanitizeObject","obj","sanitizeString","Array","isArray","item","sanitized","key","Object","entries","str","replace","validateFileUpload","_options","_req","warn"],"sources":["/home/kim/tito/server/src/middleware/validation/validate.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { Schema } from 'joi';\nimport { ErrorResponse } from '../../utils/types/express';\n\n/**\n * Validation middleware using Joi schemas\n */\nexport const validate = (schema: Schema, property: 'body' | 'query' | 'params' = 'body') => {\n  return (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n    try {\n      const data = req[property];\n      const { error, value } = schema.validate(data, {\n        abortEarly: false,\n        stripUnknown: true,\n        allowUnknown: false\n      });\n\n      if (error) {\n        const errorDetails = error.details.map(detail => ({\n          field: detail.path.join('.'),\n          message: detail.message,\n          type: detail.type\n        }));\n\n        res.status(400).json({\n          success: false,\n          message: 'Validation failed',\n          error: 'VALIDATION_ERROR',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: errorDetails\n        });\n        return;\n      }\n\n      // Replace the request data with validated data\n      req[property] = value;\n      next();\n          } catch (error) {\n        console.error('Validation middleware error:', error);\n        \n        res.status(500).json({\n          success: false,\n          message: 'Validation processing failed',\n          error: 'VALIDATION_PROCESSING_ERROR',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n  };\n};\n\n/**\n * Validate request body\n */\nexport const validateBody = (schema: Schema) => validate(schema, 'body');\n\n/**\n * Validate request query parameters\n */\nexport const validateQuery = (schema: Schema) => validate(schema, 'query');\n\n/**\n * Validate request path parameters\n */\nexport const validateParams = (schema: Schema) => validate(schema, 'params');\n\n/**\n * Validate multiple schemas for different properties\n */\nexport const validateMultiple = (schemas: {\n  body?: Schema;\n  query?: Schema;\n  params?: Schema;\n}) => {\n  return (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n    try {\n      // Validate body\n      if (schemas.body) {\n        const { error, value } = schemas.body.validate(req.body, {\n          abortEarly: false,\n          stripUnknown: true,\n          allowUnknown: false\n        });\n\n        if (error) {\n          const errorDetails = error.details.map(detail => ({\n            field: `body.${detail.path.join('.')}`,\n            message: detail.message,\n            type: detail.type\n          }));\n\n          res.status(400).json({\n            success: false,\n            message: 'Body validation failed',\n            error: 'BODY_VALIDATION_ERROR',\n            timestamp: new Date().toISOString(),\n            requestId: req.requestId || 'unknown',\n            path: req.path,\n            details: errorDetails\n          });\n          return;\n        }\n\n        req.body = value;\n      }\n\n      // Validate query\n      if (schemas.query) {\n        const { error, value } = schemas.query.validate(req.query, {\n          abortEarly: false,\n          stripUnknown: true,\n          allowUnknown: false\n        });\n\n        if (error) {\n          const errorDetails = error.details.map(detail => ({\n            field: `query.${detail.path.join('.')}`,\n            message: detail.message,\n            type: detail.type\n          }));\n\n          res.status(400).json({\n            success: false,\n            message: 'Query validation failed',\n            error: 'QUERY_VALIDATION_ERROR',\n            timestamp: new Date().toISOString(),\n            requestId: req.requestId || 'unknown',\n            path: req.path,\n            details: errorDetails\n          });\n          return;\n        }\n\n        req.query = value;\n      }\n\n      // Validate params\n      if (schemas.params) {\n        const { error, value } = schemas.params.validate(req.params, {\n          abortEarly: false,\n          stripUnknown: true,\n          allowUnknown: false\n        });\n\n        if (error) {\n          const errorDetails = error.details.map(detail => ({\n            field: `params.${detail.path.join('.')}`,\n            message: detail.message,\n            type: detail.type\n          }));\n\n          res.status(400).json({\n            success: false,\n            message: 'Path parameters validation failed',\n            error: 'PARAMS_VALIDATION_ERROR',\n            timestamp: new Date().toISOString(),\n            requestId: req.requestId || 'unknown',\n            path: req.path,\n            details: errorDetails\n          });\n          return;\n        }\n\n        req.params = value;\n      }\n\n      next();\n    } catch (error) {\n      console.error('Multiple validation middleware error:', error);\n      \n      res.status(500).json({\n        success: false,\n        message: 'Validation processing failed',\n        error: 'VALIDATION_PROCESSING_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId || 'unknown',\n        path: req.path\n      });\n      return;\n    }\n  };\n};\n\n/**\n * Custom validation function for complex business logic\n */\nexport const customValidate = (\n  validator: (req: Request) => { isValid: boolean; errors: string[] }\n) => {\n  return (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n    try {\n      const { isValid, errors } = validator(req);\n\n      if (!isValid) {\n        res.status(400).json({\n          success: false,\n          message: 'Custom validation failed',\n          error: 'CUSTOM_VALIDATION_ERROR',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: errors.map(error => ({\n            field: 'custom',\n            message: error,\n            type: 'custom'\n          }))\n        });\n        return;\n      }\n\n      next();\n    } catch (error) {\n      console.error('Custom validation middleware error:', error);\n      \n      res.status(500).json({\n        success: false,\n        message: 'Custom validation processing failed',\n        error: 'CUSTOM_VALIDATION_PROCESSING_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId || 'unknown',\n        path: req.path\n      });\n      return;\n    }\n  };\n};\n\n/**\n * Sanitize input data to prevent XSS\n */\nexport const sanitizeInput = (req: Request, _res: Response, next: NextFunction) => {\n  try {\n    // Sanitize body\n    if (req.body) {\n      req.body = sanitizeObject(req.body);\n    }\n\n    // Sanitize query\n    if (req.query) {\n      req.query = sanitizeObject(req.query);\n    }\n\n    // Sanitize params\n    if (req.params) {\n      req.params = sanitizeObject(req.params);\n    }\n\n    next();\n  } catch (error) {\n    console.error('Sanitization error:', error);\n    next();\n  }\n};\n\n/**\n * Recursively sanitize object values\n */\nfunction sanitizeObject(obj: any): any {\n  if (typeof obj === 'string') {\n    return sanitizeString(obj);\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeObject(item));\n  }\n\n  if (obj !== null && typeof obj === 'object') {\n    const sanitized: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[key] = sanitizeObject(value);\n    }\n    return sanitized;\n  }\n\n  return obj;\n}\n\n/**\n * Sanitize string to prevent XSS\n */\nfunction sanitizeString(str: string): string {\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;');\n}\n\n/**\n * Validate file upload\n * Note: This function requires multer middleware to be configured\n * and the Request type to be extended with the files property\n */\nexport const validateFileUpload = (_options: {\n  maxSize?: number; // in bytes\n  allowedTypes?: string[];\n  maxFiles?: number;\n}) => {\n  return (_req: Request, _res: Response<ErrorResponse>, next: NextFunction): void => {\n    // TODO: Implement file validation when multer is configured\n    // For now, skip validation to avoid TypeScript errors\n    console.warn('File validation middleware not yet implemented - requires multer configuration');\n    next();\n  };\n}; "],"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","ignoreList":[]}