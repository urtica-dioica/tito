afa4775525abe8e582352ee3329cf612
"use strict";

/* istanbul ignore next */
function cov_16nb1a6weg() {
  var path = "/home/kim/tito/server/src/services/hr/leaveBalanceService.ts";
  var hash = "392d71e7f8627b9599e756b52c144ba7f8e5b8c3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/hr/leaveBalanceService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 67
        }
      },
      "4": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 65
        }
      },
      "5": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 51
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 63
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 80
        }
      },
      "8": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 78
        }
      },
      "9": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 79
        }
      },
      "10": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 83
        }
      },
      "11": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 77
        }
      },
      "12": {
        start: {
          line: 45,
          column: 24
        },
        end: {
          line: 45,
          column: 26
        }
      },
      "13": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "14": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "15": {
        start: {
          line: 48,
          column: 31
        },
        end: {
          line: 52,
          column: 18
        }
      },
      "16": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 37
        }
      },
      "17": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 59,
          column: 19
        }
      },
      "18": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 28
        }
      },
      "19": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 23
        }
      },
      "20": {
        start: {
          line: 69,
          column: 23
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "21": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "22": {
        start: {
          line: 76,
          column: 35
        },
        end: {
          line: 81,
          column: 7
        }
      },
      "23": {
        start: {
          line: 82,
          column: 36
        },
        end: {
          line: 82,
          column: 89
        }
      },
      "24": {
        start: {
          line: 83,
          column: 30
        },
        end: {
          line: 83,
          column: 50
        }
      },
      "25": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 57
        }
      },
      "26": {
        start: {
          line: 86,
          column: 31
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "27": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "28": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 114,
          column: 17
        }
      },
      "29": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 113,
          column: 21
        }
      },
      "30": {
        start: {
          line: 96,
          column: 24
        },
        end: {
          line: 112,
          column: 25
        }
      },
      "31": {
        start: {
          line: 97,
          column: 28
        },
        end: {
          line: 101,
          column: 31
        }
      },
      "32": {
        start: {
          line: 102,
          column: 28
        },
        end: {
          line: 102,
          column: 53
        }
      },
      "33": {
        start: {
          line: 105,
          column: 45
        },
        end: {
          line: 105,
          column: 144
        }
      },
      "34": {
        start: {
          line: 106,
          column: 28
        },
        end: {
          line: 106,
          column: 57
        }
      },
      "35": {
        start: {
          line: 107,
          column: 28
        },
        end: {
          line: 111,
          column: 31
        }
      },
      "36": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 120,
          column: 15
        }
      },
      "37": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 125,
          column: 15
        }
      },
      "38": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 24
        }
      },
      "39": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 22
        }
      },
      "40": {
        start: {
          line: 134,
          column: 22
        },
        end: {
          line: 134,
          column: 95
        }
      },
      "41": {
        start: {
          line: 136,
          column: 31
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "42": {
        start: {
          line: 146,
          column: 28
        },
        end: {
          line: 146,
          column: 30
        }
      },
      "43": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 148,
          column: 43
        }
      },
      "44": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 43
        }
      },
      "45": {
        start: {
          line: 149,
          column: 32
        },
        end: {
          line: 149,
          column: 98
        }
      },
      "46": {
        start: {
          line: 150,
          column: 28
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "47": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "48": {
        start: {
          line: 157,
          column: 30
        },
        end: {
          line: 157,
          column: 44
        }
      },
      "49": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "50": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 69
        }
      },
      "51": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 48
        }
      },
      "52": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 73
        }
      },
      "53": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 167,
          column: 10
        }
      },
      "54": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 91
        }
      },
      "55": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 97
        }
      },
      "56": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 96
        }
      },
      "57": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 96
        }
      },
      "58": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 101
        }
      },
      "59": {
        start: {
          line: 203,
          column: 22
        },
        end: {
          line: 216,
          column: 5
        }
      },
      "60": {
        start: {
          line: 217,
          column: 23
        },
        end: {
          line: 217,
          column: 67
        }
      },
      "61": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 225,
          column: 12
        }
      },
      "62": {
        start: {
          line: 218,
          column: 39
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "63": {
        start: {
          line: 228,
          column: 0
        },
        end: {
          line: 228,
          column: 50
        }
      },
      "64": {
        start: {
          line: 229,
          column: 0
        },
        end: {
          line: 229,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 36
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 34
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 35
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 26
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 39
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 32
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 33
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 38
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 44
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 44
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        },
        loc: {
          start: {
            line: 68,
            column: 102
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 68
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 45
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 133
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 156,
            column: 37
          },
          end: {
            line: 156,
            column: 38
          }
        },
        loc: {
          start: {
            line: 156,
            column: 46
          },
          end: {
            line: 163,
            column: 9
          }
        },
        line: 156
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 47
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 172
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 178,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        },
        loc: {
          start: {
            line: 178,
            column: 53
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 178
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 52
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 184
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 52
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 190
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 57
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 196
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 37
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 202
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 218,
            column: 31
          },
          end: {
            line: 218,
            column: 32
          }
        },
        loc: {
          start: {
            line: 218,
            column: 39
          },
          end: {
            line: 225,
            column: 9
          }
        },
        line: 218
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 68,
            column: 34
          },
          end: {
            line: 68,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 68,
            column: 49
          },
          end: {
            line: 68,
            column: 51
          }
        }],
        line: 68
      },
      "4": {
        loc: {
          start: {
            line: 68,
            column: 53
          },
          end: {
            line: 68,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 68,
            column: 64
          },
          end: {
            line: 68,
            column: 66
          }
        }],
        line: 68
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 68
          },
          end: {
            line: 68,
            column: 85
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 68,
            column: 84
          },
          end: {
            line: 68,
            column: 85
          }
        }],
        line: 68
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 87
          },
          end: {
            line: 68,
            column: 100
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 68,
            column: 99
          },
          end: {
            line: 68,
            column: 100
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 95,
            column: 20
          },
          end: {
            line: 113,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 20
          },
          end: {
            line: 113,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "8": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 143,
            column: 23
          },
          end: {
            line: 143,
            column: 49
          }
        }, {
          start: {
            line: 143,
            column: 52
          },
          end: {
            line: 143,
            column: 54
          }
        }],
        line: 143
      },
      "9": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 148,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 148,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "10": {
        loc: {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "11": {
        loc: {
          start: {
            line: 220,
            column: 37
          },
          end: {
            line: 220,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 37
          },
          end: {
            line: 220,
            column: 66
          }
        }, {
          start: {
            line: 220,
            column: 70
          },
          end: {
            line: 220,
            column: 71
          }
        }],
        line: 220
      },
      "12": {
        loc: {
          start: {
            line: 221,
            column: 33
          },
          end: {
            line: 221,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 33
          },
          end: {
            line: 221,
            column: 58
          }
        }, {
          start: {
            line: 221,
            column: 62
          },
          end: {
            line: 221,
            column: 63
          }
        }],
        line: 221
      },
      "13": {
        loc: {
          start: {
            line: 222,
            column: 38
          },
          end: {
            line: 222,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 38
          },
          end: {
            line: 222,
            column: 68
          }
        }, {
          start: {
            line: 222,
            column: 72
          },
          end: {
            line: 222,
            column: 73
          }
        }],
        line: 222
      },
      "14": {
        loc: {
          start: {
            line: 223,
            column: 34
          },
          end: {
            line: 223,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 34
          },
          end: {
            line: 223,
            column: 60
          }
        }, {
          start: {
            line: 223,
            column: 64
          },
          end: {
            line: 223,
            column: 65
          }
        }],
        line: 223
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/hr/leaveBalanceService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/services/hr/leaveBalanceService.ts"],
      sourcesContent: ["import { leaveBalanceModel, type LeaveBalance, type LeaveBalanceWithDetails, type CreateLeaveBalanceData, type UpdateLeaveBalanceData, type LeaveBalanceListParams } from '../../models/leave/LeaveBalance';\nimport { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface BulkLeaveBalanceData {\n  employeeId: string;\n  leaveType: 'vacation' | 'sick' | 'maternity' | 'other';\n  balance: number;\n}\n\nexport interface YearInitializationResult {\n  employeesProcessed: number;\n  balancesCreated: number;\n  errors: string[];\n}\n\nexport class LeaveBalanceService {\n  /**\n   * List leave balances with filtering and pagination\n   */\n  async listLeaveBalances(params: LeaveBalanceListParams): Promise<{\n    balances: LeaveBalanceWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return await leaveBalanceModel.listLeaveBalances(params);\n  }\n\n  /**\n   * Get leave balance by ID\n   */\n  async getLeaveBalanceById(id: string): Promise<LeaveBalanceWithDetails | null> {\n    return await leaveBalanceModel.findByIdWithDetails(id);\n  }\n\n  /**\n   * Create or update leave balance\n   */\n  async upsertLeaveBalance(data: CreateLeaveBalanceData): Promise<LeaveBalance> {\n    return await leaveBalanceModel.upsertLeaveBalance(data);\n  }\n\n  /**\n   * Update leave balance\n   */\n  async updateLeaveBalance(id: string, data: UpdateLeaveBalanceData): Promise<LeaveBalance | null> {\n    return await leaveBalanceModel.updateLeaveBalance(id, data);\n  }\n\n  /**\n   * Delete leave balance\n   */\n  async deleteLeaveBalance(id: string): Promise<boolean> {\n    return await leaveBalanceModel.deleteLeaveBalance(id);\n  }\n\n  /**\n   * Bulk upsert leave balances\n   */\n  async bulkUpsertLeaveBalances(balances: BulkLeaveBalanceData[]): Promise<LeaveBalance[]> {\n    const results: LeaveBalance[] = [];\n    \n    for (const balance of balances) {\n      try {\n        const result =         await leaveBalanceModel.upsertLeaveBalance({\n          employeeId: balance.employeeId,\n          leaveType: balance.leaveType,\n          balance: balance.balance\n        });\n        results.push(result);\n      } catch (error) {\n        logger.error('Error upserting leave balance', {\n          error: (error as Error).message,\n          balance\n        });\n        throw error;\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Initialize leave balances for all employees\n   */\n  async initializeLeaveBalances(\n    vacationDays: number = 15,\n    sickDays: number = 10,\n    maternityDays: number = 0,\n    otherDays: number = 0\n  ): Promise<YearInitializationResult> {\n    const result: YearInitializationResult = {\n      employeesProcessed: 0,\n      balancesCreated: 0,\n      errors: []\n    };\n\n    try {\n      // Get all active employees\n      const employeesQuery = `\n        SELECT e.id as employee_id\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        WHERE e.status = 'active' AND u.is_active = true\n      `;\n\n      const employeesResult = await getPool().query(employeesQuery);\n      const employees = employeesResult.rows;\n\n      result.employeesProcessed = employees.length;\n\n      // Define leave types and their default days\n      const leaveTypes = [\n        { type: 'vacation' as const, days: vacationDays },\n        { type: 'sick' as const, days: sickDays },\n        { type: 'maternity' as const, days: maternityDays },\n        { type: 'other' as const, days: otherDays }\n      ];\n\n      // Create leave balances for each employee\n      for (const employee of employees) {\n        for (const leaveType of leaveTypes) {\n          if (leaveType.days > 0) {\n            try {\n              await leaveBalanceModel.upsertLeaveBalance({\n                employeeId: employee.employee_id,\n                leaveType: leaveType.type,\n                balance: leaveType.days\n              });\n              result.balancesCreated++;\n            } catch (error) {\n              const errorMsg = `Failed to create ${leaveType.type} balance for employee ${employee.employee_id}: ${(error as Error).message}`;\n              result.errors.push(errorMsg);\n              logger.error('Error creating leave balance', {\n                error: (error as Error).message,\n                employeeId: employee.employee_id,\n                leaveType: leaveType.type\n              });\n            }\n          }\n        }\n      }\n\n      logger.info('Leave balance initialization completed', {\n        employeesProcessed: result.employeesProcessed,\n        balancesCreated: result.balancesCreated,\n        errors: result.errors.length\n      });\n\n    } catch (error) {\n      logger.error('Error initializing leave balances', {\n        error: (error as Error).message\n      });\n      throw error;\n    }\n\n    return result;\n  }\n\n  /**\n   * Get leave balance statistics\n   */\n  async getLeaveBalanceStats(departmentId?: string): Promise<{\n    totalEmployees: number;\n    totalLeaveDays: number;\n    usedLeaveDays: number;\n    availableLeaveDays: number;\n    byLeaveType: {\n      vacation: { total: number; used: number; available: number };\n      sick: { total: number; used: number; available: number };\n      maternity: { total: number; used: number; available: number };\n      other: { total: number; used: number; available: number };\n    };\n  }> {\n    const stats = await leaveBalanceModel.getLeaveBalanceStats(departmentId);\n\n    // Get breakdown by leave type\n    const leaveTypeQuery = `\n      SELECT \n        lb.leave_type,\n        COALESCE(SUM(lb.balance), 0) as total\n      FROM leave_balances lb\n      JOIN employees e ON lb.employee_id = e.id\n      WHERE 1=1\n      ${departmentId ? 'AND e.department_id = $1' : ''}\n      GROUP BY lb.leave_type\n    `;\n\n    const queryParams: any[] = [];\n    if (departmentId) queryParams.push(departmentId);\n\n    const leaveTypeResult = await getPool().query(leaveTypeQuery, queryParams);\n\n    const byLeaveType = {\n      vacation: { total: 0, used: 0, available: 0 },\n      sick: { total: 0, used: 0, available: 0 },\n      maternity: { total: 0, used: 0, available: 0 },\n      other: { total: 0, used: 0, available: 0 }\n    };\n\n    leaveTypeResult.rows.forEach((row: any) => {\n      const leaveType = row.leave_type as keyof typeof byLeaveType;\n      if (byLeaveType[leaveType]) {\n        byLeaveType[leaveType].total = parseFloat(row.total);\n        byLeaveType[leaveType].used = 0; // No used days tracking in current schema\n        byLeaveType[leaveType].available = parseFloat(row.total);\n      }\n    });\n\n    return {\n      ...stats,\n      byLeaveType\n    };\n  }\n\n  /**\n   * Get employee leave balances\n   */\n  async getEmployeeLeaveBalances(employeeId: string): Promise<LeaveBalanceWithDetails[]> {\n    return await leaveBalanceModel.getEmployeeLeaveBalances(employeeId);\n  }\n\n  /**\n   * Get employee leave balance summary\n   */\n  async getEmployeeLeaveBalanceSummary(employeeId: string): Promise<{\n    vacation: { total: number; used: number; available: number };\n    sick: { total: number; used: number; available: number };\n    maternity: { total: number; used: number; available: number };\n    other: { total: number; used: number; available: number };\n  }> {\n    return await leaveBalanceModel.getEmployeeLeaveBalanceSummary(employeeId);\n  }\n\n  /**\n   * Add leave days to balance\n   */\n  async addLeaveDays(employeeId: string, leaveType: 'vacation' | 'sick' | 'maternity' | 'other', days: number): Promise<LeaveBalance> {\n    return await leaveBalanceModel.addLeaveDays(employeeId, leaveType, days);\n  }\n\n  /**\n   * Use leave days from balance\n   */\n  async useLeaveDays(employeeId: string, leaveType: 'vacation' | 'sick' | 'maternity' | 'other', days: number): Promise<LeaveBalance | null> {\n    return await leaveBalanceModel.useLeaveDays(employeeId, leaveType, days);\n  }\n\n  /**\n   * Get employees without leave balances\n   */\n  async getEmployeesWithoutLeaveBalances(departmentId?: string): Promise<Array<{\n    id: string;\n    employeeId: string;\n    name: string;\n    departmentName: string | null;\n    position: string;\n  }>> {\n    return await leaveBalanceModel.getEmployeesWithoutLeaveBalances(departmentId);\n  }\n\n  /**\n   * Get leave balance templates by position\n   */\n  async getLeaveBalanceTemplates(): Promise<Array<{\n    position: string;\n    vacationDays: number;\n    sickDays: number;\n    maternityDays: number;\n    otherDays: number;\n    employeeCount: number;\n  }>> {\n    const query = `\n      SELECT \n        e.position,\n        AVG(CASE WHEN lb.leave_type = 'vacation' THEN lb.total_days ELSE 0 END) as vacation_days,\n        AVG(CASE WHEN lb.leave_type = 'sick' THEN lb.total_days ELSE 0 END) as sick_days,\n        AVG(CASE WHEN lb.leave_type = 'maternity' THEN lb.total_days ELSE 0 END) as maternity_days,\n        AVG(CASE WHEN lb.leave_type = 'other' THEN lb.total_days ELSE 0 END) as other_days,\n        COUNT(DISTINCT e.id) as employee_count\n      FROM employees e\n      LEFT JOIN leave_balances lb ON e.id = lb.employee_id\n      WHERE e.status = 'active'\n      GROUP BY e.position\n      ORDER BY e.position\n    `;\n\n    const result = await getPool().query(query);\n\n    return result.rows.map(row => ({\n      position: row.position,\n      vacationDays: Math.round(parseFloat(row.vacation_days) || 0),\n      sickDays: Math.round(parseFloat(row.sick_days) || 0),\n      maternityDays: Math.round(parseFloat(row.maternity_days) || 0),\n      otherDays: Math.round(parseFloat(row.other_days) || 0),\n      employeeCount: parseInt(row.employee_count)\n    }));\n  }\n}\n\nexport const leaveBalanceService = new LeaveBalanceService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "392d71e7f8627b9599e756b52c144ba7f8e5b8c3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_16nb1a6weg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_16nb1a6weg();
var __importDefault =
/* istanbul ignore next */
(cov_16nb1a6weg().s[0]++,
/* istanbul ignore next */
(cov_16nb1a6weg().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_16nb1a6weg().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_16nb1a6weg().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_16nb1a6weg().f[0]++;
  cov_16nb1a6weg().s[1]++;
  return /* istanbul ignore next */(cov_16nb1a6weg().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_16nb1a6weg().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_16nb1a6weg().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_16nb1a6weg().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_16nb1a6weg().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_16nb1a6weg().s[3]++;
exports.leaveBalanceService = exports.LeaveBalanceService = void 0;
const LeaveBalance_1 =
/* istanbul ignore next */
(cov_16nb1a6weg().s[4]++, require("../../models/leave/LeaveBalance"));
const database_1 =
/* istanbul ignore next */
(cov_16nb1a6weg().s[5]++, require("../../config/database"));
const logger_1 =
/* istanbul ignore next */
(cov_16nb1a6weg().s[6]++, __importDefault(require("../../utils/logger")));
class LeaveBalanceService {
  /**
   * List leave balances with filtering and pagination
   */
  async listLeaveBalances(params) {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[1]++;
    cov_16nb1a6weg().s[7]++;
    return await LeaveBalance_1.leaveBalanceModel.listLeaveBalances(params);
  }
  /**
   * Get leave balance by ID
   */
  async getLeaveBalanceById(id) {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[2]++;
    cov_16nb1a6weg().s[8]++;
    return await LeaveBalance_1.leaveBalanceModel.findByIdWithDetails(id);
  }
  /**
   * Create or update leave balance
   */
  async upsertLeaveBalance(data) {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[3]++;
    cov_16nb1a6weg().s[9]++;
    return await LeaveBalance_1.leaveBalanceModel.upsertLeaveBalance(data);
  }
  /**
   * Update leave balance
   */
  async updateLeaveBalance(id, data) {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[4]++;
    cov_16nb1a6weg().s[10]++;
    return await LeaveBalance_1.leaveBalanceModel.updateLeaveBalance(id, data);
  }
  /**
   * Delete leave balance
   */
  async deleteLeaveBalance(id) {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[5]++;
    cov_16nb1a6weg().s[11]++;
    return await LeaveBalance_1.leaveBalanceModel.deleteLeaveBalance(id);
  }
  /**
   * Bulk upsert leave balances
   */
  async bulkUpsertLeaveBalances(balances) {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[6]++;
    const results =
    /* istanbul ignore next */
    (cov_16nb1a6weg().s[12]++, []);
    /* istanbul ignore next */
    cov_16nb1a6weg().s[13]++;
    for (const balance of balances) {
      /* istanbul ignore next */
      cov_16nb1a6weg().s[14]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_16nb1a6weg().s[15]++, await LeaveBalance_1.leaveBalanceModel.upsertLeaveBalance({
          employeeId: balance.employeeId,
          leaveType: balance.leaveType,
          balance: balance.balance
        }));
        /* istanbul ignore next */
        cov_16nb1a6weg().s[16]++;
        results.push(result);
      } catch (error) {
        /* istanbul ignore next */
        cov_16nb1a6weg().s[17]++;
        logger_1.default.error('Error upserting leave balance', {
          error: error.message,
          balance
        });
        /* istanbul ignore next */
        cov_16nb1a6weg().s[18]++;
        throw error;
      }
    }
    /* istanbul ignore next */
    cov_16nb1a6weg().s[19]++;
    return results;
  }
  /**
   * Initialize leave balances for all employees
   */
  async initializeLeaveBalances(vacationDays =
  /* istanbul ignore next */
  (cov_16nb1a6weg().b[3][0]++, 15), sickDays =
  /* istanbul ignore next */
  (cov_16nb1a6weg().b[4][0]++, 10), maternityDays =
  /* istanbul ignore next */
  (cov_16nb1a6weg().b[5][0]++, 0), otherDays =
  /* istanbul ignore next */
  (cov_16nb1a6weg().b[6][0]++, 0)) {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[7]++;
    const result =
    /* istanbul ignore next */
    (cov_16nb1a6weg().s[20]++, {
      employeesProcessed: 0,
      balancesCreated: 0,
      errors: []
    });
    /* istanbul ignore next */
    cov_16nb1a6weg().s[21]++;
    try {
      // Get all active employees
      const employeesQuery =
      /* istanbul ignore next */
      (cov_16nb1a6weg().s[22]++, `
        SELECT e.id as employee_id
        FROM employees e
        JOIN users u ON e.user_id = u.id
        WHERE e.status = 'active' AND u.is_active = true
      `);
      const employeesResult =
      /* istanbul ignore next */
      (cov_16nb1a6weg().s[23]++, await (0, database_1.getPool)().query(employeesQuery));
      const employees =
      /* istanbul ignore next */
      (cov_16nb1a6weg().s[24]++, employeesResult.rows);
      /* istanbul ignore next */
      cov_16nb1a6weg().s[25]++;
      result.employeesProcessed = employees.length;
      // Define leave types and their default days
      const leaveTypes =
      /* istanbul ignore next */
      (cov_16nb1a6weg().s[26]++, [{
        type: 'vacation',
        days: vacationDays
      }, {
        type: 'sick',
        days: sickDays
      }, {
        type: 'maternity',
        days: maternityDays
      }, {
        type: 'other',
        days: otherDays
      }]);
      // Create leave balances for each employee
      /* istanbul ignore next */
      cov_16nb1a6weg().s[27]++;
      for (const employee of employees) {
        /* istanbul ignore next */
        cov_16nb1a6weg().s[28]++;
        for (const leaveType of leaveTypes) {
          /* istanbul ignore next */
          cov_16nb1a6weg().s[29]++;
          if (leaveType.days > 0) {
            /* istanbul ignore next */
            cov_16nb1a6weg().b[7][0]++;
            cov_16nb1a6weg().s[30]++;
            try {
              /* istanbul ignore next */
              cov_16nb1a6weg().s[31]++;
              await LeaveBalance_1.leaveBalanceModel.upsertLeaveBalance({
                employeeId: employee.employee_id,
                leaveType: leaveType.type,
                balance: leaveType.days
              });
              /* istanbul ignore next */
              cov_16nb1a6weg().s[32]++;
              result.balancesCreated++;
            } catch (error) {
              const errorMsg =
              /* istanbul ignore next */
              (cov_16nb1a6weg().s[33]++, `Failed to create ${leaveType.type} balance for employee ${employee.employee_id}: ${error.message}`);
              /* istanbul ignore next */
              cov_16nb1a6weg().s[34]++;
              result.errors.push(errorMsg);
              /* istanbul ignore next */
              cov_16nb1a6weg().s[35]++;
              logger_1.default.error('Error creating leave balance', {
                error: error.message,
                employeeId: employee.employee_id,
                leaveType: leaveType.type
              });
            }
          } else
          /* istanbul ignore next */
          {
            cov_16nb1a6weg().b[7][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_16nb1a6weg().s[36]++;
      logger_1.default.info('Leave balance initialization completed', {
        employeesProcessed: result.employeesProcessed,
        balancesCreated: result.balancesCreated,
        errors: result.errors.length
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_16nb1a6weg().s[37]++;
      logger_1.default.error('Error initializing leave balances', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_16nb1a6weg().s[38]++;
      throw error;
    }
    /* istanbul ignore next */
    cov_16nb1a6weg().s[39]++;
    return result;
  }
  /**
   * Get leave balance statistics
   */
  async getLeaveBalanceStats(departmentId) {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[8]++;
    const stats =
    /* istanbul ignore next */
    (cov_16nb1a6weg().s[40]++, await LeaveBalance_1.leaveBalanceModel.getLeaveBalanceStats(departmentId));
    // Get breakdown by leave type
    const leaveTypeQuery =
    /* istanbul ignore next */
    (cov_16nb1a6weg().s[41]++, `
      SELECT 
        lb.leave_type,
        COALESCE(SUM(lb.balance), 0) as total
      FROM leave_balances lb
      JOIN employees e ON lb.employee_id = e.id
      WHERE 1=1
      ${departmentId ?
    /* istanbul ignore next */
    (cov_16nb1a6weg().b[8][0]++, 'AND e.department_id = $1') :
    /* istanbul ignore next */
    (cov_16nb1a6weg().b[8][1]++, '')}
      GROUP BY lb.leave_type
    `);
    const queryParams =
    /* istanbul ignore next */
    (cov_16nb1a6weg().s[42]++, []);
    /* istanbul ignore next */
    cov_16nb1a6weg().s[43]++;
    if (departmentId) {
      /* istanbul ignore next */
      cov_16nb1a6weg().b[9][0]++;
      cov_16nb1a6weg().s[44]++;
      queryParams.push(departmentId);
    } else
    /* istanbul ignore next */
    {
      cov_16nb1a6weg().b[9][1]++;
    }
    const leaveTypeResult =
    /* istanbul ignore next */
    (cov_16nb1a6weg().s[45]++, await (0, database_1.getPool)().query(leaveTypeQuery, queryParams));
    const byLeaveType =
    /* istanbul ignore next */
    (cov_16nb1a6weg().s[46]++, {
      vacation: {
        total: 0,
        used: 0,
        available: 0
      },
      sick: {
        total: 0,
        used: 0,
        available: 0
      },
      maternity: {
        total: 0,
        used: 0,
        available: 0
      },
      other: {
        total: 0,
        used: 0,
        available: 0
      }
    });
    /* istanbul ignore next */
    cov_16nb1a6weg().s[47]++;
    leaveTypeResult.rows.forEach(row => {
      /* istanbul ignore next */
      cov_16nb1a6weg().f[9]++;
      const leaveType =
      /* istanbul ignore next */
      (cov_16nb1a6weg().s[48]++, row.leave_type);
      /* istanbul ignore next */
      cov_16nb1a6weg().s[49]++;
      if (byLeaveType[leaveType]) {
        /* istanbul ignore next */
        cov_16nb1a6weg().b[10][0]++;
        cov_16nb1a6weg().s[50]++;
        byLeaveType[leaveType].total = parseFloat(row.total);
        /* istanbul ignore next */
        cov_16nb1a6weg().s[51]++;
        byLeaveType[leaveType].used = 0; // No used days tracking in current schema
        /* istanbul ignore next */
        cov_16nb1a6weg().s[52]++;
        byLeaveType[leaveType].available = parseFloat(row.total);
      } else
      /* istanbul ignore next */
      {
        cov_16nb1a6weg().b[10][1]++;
      }
    });
    /* istanbul ignore next */
    cov_16nb1a6weg().s[53]++;
    return {
      ...stats,
      byLeaveType
    };
  }
  /**
   * Get employee leave balances
   */
  async getEmployeeLeaveBalances(employeeId) {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[10]++;
    cov_16nb1a6weg().s[54]++;
    return await LeaveBalance_1.leaveBalanceModel.getEmployeeLeaveBalances(employeeId);
  }
  /**
   * Get employee leave balance summary
   */
  async getEmployeeLeaveBalanceSummary(employeeId) {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[11]++;
    cov_16nb1a6weg().s[55]++;
    return await LeaveBalance_1.leaveBalanceModel.getEmployeeLeaveBalanceSummary(employeeId);
  }
  /**
   * Add leave days to balance
   */
  async addLeaveDays(employeeId, leaveType, days) {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[12]++;
    cov_16nb1a6weg().s[56]++;
    return await LeaveBalance_1.leaveBalanceModel.addLeaveDays(employeeId, leaveType, days);
  }
  /**
   * Use leave days from balance
   */
  async useLeaveDays(employeeId, leaveType, days) {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[13]++;
    cov_16nb1a6weg().s[57]++;
    return await LeaveBalance_1.leaveBalanceModel.useLeaveDays(employeeId, leaveType, days);
  }
  /**
   * Get employees without leave balances
   */
  async getEmployeesWithoutLeaveBalances(departmentId) {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[14]++;
    cov_16nb1a6weg().s[58]++;
    return await LeaveBalance_1.leaveBalanceModel.getEmployeesWithoutLeaveBalances(departmentId);
  }
  /**
   * Get leave balance templates by position
   */
  async getLeaveBalanceTemplates() {
    /* istanbul ignore next */
    cov_16nb1a6weg().f[15]++;
    const query =
    /* istanbul ignore next */
    (cov_16nb1a6weg().s[59]++, `
      SELECT 
        e.position,
        AVG(CASE WHEN lb.leave_type = 'vacation' THEN lb.total_days ELSE 0 END) as vacation_days,
        AVG(CASE WHEN lb.leave_type = 'sick' THEN lb.total_days ELSE 0 END) as sick_days,
        AVG(CASE WHEN lb.leave_type = 'maternity' THEN lb.total_days ELSE 0 END) as maternity_days,
        AVG(CASE WHEN lb.leave_type = 'other' THEN lb.total_days ELSE 0 END) as other_days,
        COUNT(DISTINCT e.id) as employee_count
      FROM employees e
      LEFT JOIN leave_balances lb ON e.id = lb.employee_id
      WHERE e.status = 'active'
      GROUP BY e.position
      ORDER BY e.position
    `);
    const result =
    /* istanbul ignore next */
    (cov_16nb1a6weg().s[60]++, await (0, database_1.getPool)().query(query));
    /* istanbul ignore next */
    cov_16nb1a6weg().s[61]++;
    return result.rows.map(row => {
      /* istanbul ignore next */
      cov_16nb1a6weg().f[16]++;
      cov_16nb1a6weg().s[62]++;
      return {
        position: row.position,
        vacationDays: Math.round(
        /* istanbul ignore next */
        (cov_16nb1a6weg().b[11][0]++, parseFloat(row.vacation_days)) ||
        /* istanbul ignore next */
        (cov_16nb1a6weg().b[11][1]++, 0)),
        sickDays: Math.round(
        /* istanbul ignore next */
        (cov_16nb1a6weg().b[12][0]++, parseFloat(row.sick_days)) ||
        /* istanbul ignore next */
        (cov_16nb1a6weg().b[12][1]++, 0)),
        maternityDays: Math.round(
        /* istanbul ignore next */
        (cov_16nb1a6weg().b[13][0]++, parseFloat(row.maternity_days)) ||
        /* istanbul ignore next */
        (cov_16nb1a6weg().b[13][1]++, 0)),
        otherDays: Math.round(
        /* istanbul ignore next */
        (cov_16nb1a6weg().b[14][0]++, parseFloat(row.other_days)) ||
        /* istanbul ignore next */
        (cov_16nb1a6weg().b[14][1]++, 0)),
        employeeCount: parseInt(row.employee_count)
      };
    });
  }
}
/* istanbul ignore next */
cov_16nb1a6weg().s[63]++;
exports.LeaveBalanceService = LeaveBalanceService;
/* istanbul ignore next */
cov_16nb1a6weg().s[64]++;
exports.leaveBalanceService = new LeaveBalanceService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,