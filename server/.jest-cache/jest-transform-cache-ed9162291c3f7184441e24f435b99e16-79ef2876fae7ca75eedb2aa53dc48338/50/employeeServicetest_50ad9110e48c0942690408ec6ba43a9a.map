{"file":"/home/kim/tito/server/tests/unit/services/employeeService.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/unit/services/employeeService.test.ts"],"sourcesContent":["import { EmployeeService } from '../../../src/services/employee/employeeService';\nimport { getPool } from '../../../src/config/database';\n\n// Mock the dependencies\njest.mock('../../../src/config/database');\n\nconst mockGetPool = getPool as jest.MockedFunction<typeof getPool>;\n\ndescribe('EmployeeService', () => {\n  let employeeService: EmployeeService;\n  let mockPool: any;\n\n  beforeEach(() => {\n    employeeService = new EmployeeService();\n    jest.clearAllMocks();\n\n    // Mock database pool\n    mockPool = {\n      query: jest.fn(),\n      connect: jest.fn().mockResolvedValue({\n        query: jest.fn(),\n        release: jest.fn()\n      })\n    };\n    mockGetPool.mockReturnValue(mockPool);\n  });\n\n  describe('getEmployeeIdByUserId', () => {\n    it('should return employee ID for valid user ID', async () => {\n      // Arrange\n      mockPool.query.mockResolvedValue({\n        rows: [{ id: 'emp-123' }]\n      });\n\n      // Act\n      const result = await employeeService.getEmployeeIdByUserId('user-123');\n\n      // Assert\n      expect(result).toBe('emp-123');\n      expect(mockPool.query).toHaveBeenCalledWith(\n        expect.stringMatching(/SELECT\\s+id\\s+FROM\\s+employees\\s+WHERE\\s+user_id\\s+=\\s+\\$1/),\n        ['user-123']\n      );\n    });\n\n    it('should return null if employee not found', async () => {\n      // Arrange\n      mockPool.query.mockResolvedValue({ rows: [] });\n\n      // Act\n      const result = await employeeService.getEmployeeIdByUserId('user-123');\n\n      // Assert\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getDashboard', () => {\n    const mockEmployeeInfo = {\n      id: 'emp-123',\n      name: 'John Doe',\n      employee_id: 'EMP001',\n      department: 'Engineering',\n        position: 'Software Developer',\n      hire_date: '2023-01-01',\n      profile_picture: 'profile.jpg'\n    };\n\n    const mockTodayAttendance = {\n      today_status: 'present',\n      clock_in_time: '08:30:00',\n      clock_out_time: '17:30:00',\n      total_hours: 8.5,\n      morning_clock_in: '08:30:00',\n      morning_clock_out: '12:00:00',\n      afternoon_clock_in: '13:00:00',\n      afternoon_clock_out: '17:30:00',\n      break_start: '12:00:00',\n      break_end: '13:00:00'\n    };\n\n    const mockMonthlyStats = {\n      monthly_present: 20,\n      monthly_absent: 2,\n      monthly_late: 3\n    };\n\n    const mockLeaveBalance = {\n      vacation: 10,\n      sick: 8,\n      maternity: 0,\n      other: 2\n    };\n\n    const mockRecentActivity = [\n      {\n        id: 'act-123',\n        type: 'clock_in',\n        description: 'Clocked in at 08:30',\n        timestamp: '2024-01-15T08:30:00Z',\n        status: 'success'\n      }\n    ];\n\n    it('should return employee dashboard successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [mockEmployeeInfo] }) // getEmployeeInfo\n        .mockResolvedValueOnce({ rows: [mockTodayAttendance] }) // getTodayAttendanceStatus\n        .mockResolvedValueOnce({ rows: [mockMonthlyStats] }) // getMonthlyAttendanceStats\n        .mockResolvedValueOnce({ rows: [mockLeaveBalance] }) // getLeaveBalance\n        .mockResolvedValueOnce({ rows: mockRecentActivity }) // getRecentActivity\n        .mockResolvedValueOnce({ rows: [{ total: '3' }] }) // getPendingRequestsCount\n        .mockResolvedValueOnce({ rows: [] }); // getUpcomingEvents\n\n      // Mock the getPendingRequestsCount query specifically\n      mockPool.query.mockResolvedValueOnce({ rows: [{ total: '3' }] });\n\n      // Act\n      const result = await employeeService.getDashboard('emp-123');\n\n      // Assert\n      expect(result).toEqual({\n        employee: {\n          id: 'emp-123',\n          name: 'John Doe',\n          employeeId: 'EMP001',\n          department: 'Engineering',\n          position: 'Software Developer',\n          hireDate: '2023-01-01',\n          profilePicture: 'profile.jpg'\n        },\n        attendance: {\n          todayStatus: 'present',\n          clockInTime: '08:30:00',\n          clockOutTime: '17:30:00',\n          totalHours: 8.5,\n          morningClockIn: '08:30:00',\n          morningClockOut: '12:00:00',\n          afternoonClockIn: '13:00:00',\n          afternoonClockOut: '17:30:00',\n          breakStart: '12:00:00',\n          breakEnd: '13:00:00',\n          monthlyPresent: 20,\n          monthlyAbsent: 2,\n          monthlyLate: 3\n        },\n        leaveBalance: {\n          vacation: 10,\n          sick: 8,\n          maternity: 0,\n          other: 2\n        },\n        recentActivity: [\n          {\n            id: 'act-123',\n            type: 'clock_in',\n            description: 'Clocked in at 08:30',\n            timestamp: '2024-01-15T08:30:00Z',\n            status: 'success'\n          }\n        ],\n        pendingRequests: 3,\n        upcomingEvents: []\n      });\n    });\n\n    it('should handle missing employee info gracefully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [] }) // getEmployeeInfo - no employee found\n        .mockResolvedValueOnce({ rows: [] }) // getTodayAttendanceStatus\n        .mockResolvedValueOnce({ rows: [] }) // getMonthlyAttendanceStats\n        .mockResolvedValueOnce({ rows: [] }) // getLeaveBalance\n        .mockResolvedValueOnce({ rows: [] }) // getRecentActivity\n        .mockResolvedValueOnce({ rows: [{ total: '0' }] }) // getPendingRequestsCount\n        .mockResolvedValueOnce({ rows: [] }); // getUpcomingEvents\n\n      // Mock the combined query for getPendingRequestsCount\n      mockPool.query.mockResolvedValueOnce({ rows: [{ total: '0' }] }); // getPendingRequestsCount combined query\n\n      // Act & Assert - should throw error for missing employee\n      await expect(employeeService.getDashboard('emp-123'))\n        .rejects.toThrow('Employee not found');\n    });\n  });\n\n  describe('getEmployeeProfile', () => {\n    const mockProfile = {\n      id: 'emp-123',\n      employeeId: 'EMP001',\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'john.doe@company.com',\n      phone: '+1234567890',\n      address: '123 Main St',\n      department: 'Engineering',\n      position: 'Software Developer',\n      employmentType: 'regular',\n      hireDate: '2023-01-01',\n      baseSalary: 50000,\n      status: 'active'\n    };\n\n    it('should return employee profile successfully', async () => {\n      // Arrange\n      mockPool.query.mockResolvedValue({ rows: [mockProfile] });\n\n      // Act\n      const result = await employeeService.getEmployeeProfile('emp-123');\n\n      // Assert\n      expect(result).toEqual({\n        id: 'emp-123',\n        employeeId: 'EMP001',\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john.doe@company.com',\n        phone: '+1234567890',\n        address: '123 Main St',\n        department: 'Engineering',\n        position: 'Software Developer',\n        employmentType: 'regular',\n        hireDate: '2023-01-01',\n        baseSalary: 50000,\n        status: 'active'\n      });\n    });\n\n    it('should throw error if employee not found', async () => {\n      // Arrange\n      mockPool.query.mockResolvedValue({ rows: [] });\n\n      // Act & Assert\n      await expect(employeeService.getEmployeeProfile('emp-123'))\n        .rejects.toThrow('Employee not found');\n    });\n  });\n\n  describe('updateEmployeeProfile', () => {\n    const updateData = {\n      phone: '+1234567890',\n      address: '123 Main St'\n    };\n\n    it('should update employee profile successfully', async () => {\n      // Arrange\n      mockPool.connect = jest.fn().mockResolvedValue({\n        query: jest.fn()\n          .mockResolvedValueOnce({ rows: [{ id: 'emp-123' }] }) // check employee exists\n          .mockResolvedValueOnce({ rows: [] }) // update user table\n          .mockResolvedValueOnce({ rows: [{ id: 'emp-123', first_name: 'John', last_name: 'Doe', email: 'john.doe@company.com', phone: '+1234567890', address: '123 Main St' }] }) // get updated profile\n          .mockResolvedValueOnce(undefined), // COMMIT\n        release: jest.fn()\n      });\n\n      // Act\n      const result = await employeeService.updateEmployeeProfile('emp-123', updateData);\n\n      // Assert\n      expect(result).toBeDefined();\n    });\n\n    it('should throw error if employee not found', async () => {\n      // Arrange\n      mockPool.query.mockResolvedValue({ rows: [] });\n\n      // Act & Assert\n      await expect(employeeService.updateEmployeeProfile('emp-123', updateData))\n        .rejects.toThrow('Employee not found');\n    });\n  });\n\n  describe('getAttendanceHistory', () => {\n    const mockAttendanceHistory = [\n      {\n        id: 'att-123',\n        date: '2024-01-15',\n        clockIn: '08:30:00',\n        clockOut: '17:30:00',\n        totalHours: 8.5,\n        status: 'present',\n        overtimeHours: 0,\n        notes: ''\n      }\n    ];\n\n    it('should return attendance history successfully', async () => {\n      // Arrange\n      mockPool.query.mockResolvedValue({ rows: mockAttendanceHistory });\n\n      // Act\n      const result = await employeeService.getAttendanceHistory('emp-123', '2024-01');\n\n      // Assert\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual({\n        id: 'att-123',\n        date: '2024-01-15',\n        clockIn: '08:30:00',\n        clockOut: '17:30:00',\n        totalHours: 8.5,\n        status: 'present',\n        overtimeHours: 0,\n        notes: ''\n      });\n    });\n\n    it('should use current month if month not provided', async () => {\n      // Arrange\n      // const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n      mockPool.query.mockResolvedValue({ rows: [] });\n\n      // Act\n      await employeeService.getAttendanceHistory('emp-123');\n\n      // Assert\n      expect(mockPool.query).toHaveBeenCalledWith(\n        expect.stringContaining('WHERE ar.employee_id = $1'),\n        ['emp-123']\n      );\n    });\n  });\n\n  describe('getAttendanceSummary', () => {\n    const mockSummary = {\n      total_days: 22,\n      present_days: 20,\n      absent_days: 1,\n      late_days: 1,\n      total_hours: 160,\n      average_hours: 8.0,\n      overtime_hours: 0\n    };\n\n    it('should return attendance summary successfully', async () => {\n      // Arrange\n      mockPool.query.mockResolvedValue({ rows: [mockSummary] });\n\n      // Act\n      const result = await employeeService.getAttendanceSummary('emp-123', '2024-01');\n\n      // Assert\n      expect(result).toEqual({\n        totalDays: 22,\n        presentDays: 20,\n        absentDays: 1,\n        lateDays: 1,\n        totalHours: 160,\n        averageHours: 8.0,\n        overtimeHours: 0\n      });\n    });\n  });\n\n  describe('getEmployeeRequests', () => {\n    const mockRequests = [\n      {\n        id: 'req-123',\n        type: 'time_correction',\n        status: 'pending',\n        submittedAt: '2024-01-15T10:00:00Z',\n        approverName: null,\n        approvedAt: null,\n        rejectionReason: '',\n        details: {\n          date: '2024-01-15',\n          reason: 'Forgot to clock out'\n        }\n      }\n    ];\n\n    it('should return employee requests successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [] }) // leave requests\n        .mockResolvedValueOnce({ rows: mockRequests }) // time correction requests\n        .mockResolvedValueOnce({ rows: [] }); // overtime requests\n\n      // Act\n      const result = await employeeService.getEmployeeRequests('emp-123', {\n        type: 'time_correction',\n        status: 'pending',\n        limit: 10,\n        offset: 0\n      });\n\n      // Assert\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual({\n        id: 'req-123',\n        type: 'time_correction',\n        status: 'pending',\n        submittedAt: '2024-01-15T10:00:00Z',\n        approverName: null,\n        approvedAt: null,\n        rejectionReason: '',\n        details: {\n          date: '2024-01-15',\n          reason: 'Forgot to clock out'\n        }\n      });\n    });\n  });\n\n  describe('getRequestStats', () => {\n    const mockStats = {\n      total: 10,\n      pending: 3,\n      approved: 6,\n      rejected: 1\n    };\n\n    it('should return request stats successfully', async () => {\n      // Arrange\n      mockPool.query.mockResolvedValue({ rows: [mockStats] });\n\n      // Act\n      const result = await employeeService.getRequestStats('emp-123');\n\n      // Assert\n      expect(result).toEqual({\n        total: 10,\n        pending: 3,\n        approved: 6,\n        rejected: 1\n      });\n    });\n  });\n\n  describe('getLatestPaystub', () => {\n    const mockPaystub = {\n      id: 'paystub-123',\n      payroll_period_id: 'period-123',\n      period_name: 'January 2024',\n      employee_id: 'emp-123',\n      employee_name: 'John Doe',\n      position: 'Software Developer',\n      department_name: 'Engineering',\n      base_salary: 5000,\n      total_regular_hours: 160,\n      total_overtime_hours: 0,\n      total_late_hours: 0,\n      paid_leave_hours: 0,\n      gross_pay: 5000,\n      total_deductions: 1000,\n      total_benefits: 500,\n      net_pay: 4500,\n      late_deductions: 0,\n      status: 'processed',\n      created_at: '2024-01-31T10:00:00Z'\n    };\n\n    it('should return latest paystub successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: [mockPaystub] }) // main payroll record\n        .mockResolvedValueOnce({ rows: [] }) // deductions\n        .mockResolvedValueOnce({ rows: [] }); // benefits\n\n      // Act\n      const result = await employeeService.getLatestPaystub('emp-123');\n\n      // Assert\n      expect(result).toEqual({\n        id: 'paystub-123',\n        periodName: 'January 2024',\n        periodStartDate: undefined,\n        periodEndDate: undefined,\n        employeeId: 'emp-123',\n        employeeName: 'John Doe',\n        position: 'Software Developer',\n        department: 'Engineering',\n        baseSalary: 5000,\n        totalRegularHours: 160,\n        totalOvertimeHours: 0,\n        paidLeaveHours: 0,\n        grossPay: 5000,\n        totalDeductions: 1000,\n        totalBenefits: 500,\n        netPay: 4500,\n        lateDeductions: 0,\n        deductions: [],\n        benefits: [],\n        createdAt: undefined\n      });\n    });\n  });\n\n  describe('getEmployeePaystubs', () => {\n    const mockPaystubs = [\n      {\n        id: 'paystub-123',\n        payroll_period_id: 'period-123',\n        period_name: 'January 2024',\n        period_start_date: '2024-01-01',\n        period_end_date: '2024-01-31',\n        employee_id: 'emp-123',\n        employee_name: 'John Doe',\n        position: 'Software Developer',\n        department_id: 'dept-123',\n        department_name: 'Engineering',\n        base_salary: 5000,\n        total_regular_hours: 160,\n        total_overtime_hours: 0,\n        total_late_hours: 0,\n        paid_leave_hours: 0,\n        gross_pay: 5000,\n        total_deductions: 1000,\n        total_benefits: 500,\n        net_pay: 4500,\n        late_deductions: 0,\n        status: 'processed',\n        created_at: '2024-01-31T10:00:00Z',\n        updated_at: '2024-01-31T10:00:00Z'\n      }\n    ];\n\n    it('should return employee paystubs successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: mockPaystubs }) // get paystubs\n        .mockResolvedValueOnce({ rows: [] }) // deductions for first paystub\n        .mockResolvedValueOnce({ rows: [] }); // benefits for first paystub\n\n      // Act\n      const result = await employeeService.getEmployeePaystubs('emp-123', {\n        page: 1,\n        limit: 10,\n        year: 2024\n      });\n\n      // Assert\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual({\n        id: 'paystub-123',\n        periodName: 'January 2024',\n        periodStartDate: '2024-01-01',\n        periodEndDate: '2024-01-31',\n        employeeId: 'emp-123',\n        employeeName: 'John Doe',\n        position: 'Software Developer',\n        department: 'Engineering',\n        baseSalary: 5000,\n        totalRegularHours: 160,\n        totalOvertimeHours: 0,\n        paidLeaveHours: 0,\n        grossPay: 5000,\n        totalDeductions: 1000,\n        totalBenefits: 500,\n        netPay: 4500,\n        lateDeductions: 0,\n        deductions: [],\n        benefits: [],\n        createdAt: undefined\n      });\n    });\n\n    it('should return null if no paystub found', async () => {\n      // Arrange\n      mockPool.query.mockResolvedValue({ rows: [] });\n\n      // Act\n      const result = await employeeService.getLatestPaystub('emp-123');\n\n      // Assert\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getEmployeePaystubs', () => {\n    const mockPaystubs = [\n      {\n        id: 'paystub-123',\n        payroll_period_id: 'period-123',\n        period_name: 'January 2024',\n        period_start_date: '2024-01-01',\n        period_end_date: '2024-01-31',\n        employee_id: 'emp-123',\n        employee_name: 'John Doe',\n        position: 'Software Developer',\n        department_id: 'dept-123',\n        department_name: 'Engineering',\n        base_salary: 5000,\n        total_regular_hours: 160,\n        total_overtime_hours: 0,\n        total_late_hours: 0,\n        paid_leave_hours: 0,\n        gross_pay: 5000,\n        total_deductions: 1000,\n        total_benefits: 500,\n        net_pay: 4500,\n        late_deductions: 0,\n        status: 'processed',\n        created_at: '2024-01-31T10:00:00Z',\n        updated_at: '2024-01-31T10:00:00Z'\n      }\n    ];\n\n    it('should return employee paystubs successfully', async () => {\n      // Arrange\n      mockPool.query\n        .mockResolvedValueOnce({ rows: mockPaystubs }) // get paystubs\n        .mockResolvedValueOnce({ rows: [] }) // deductions for first paystub\n        .mockResolvedValueOnce({ rows: [] }); // benefits for first paystub\n\n      // Act\n      const result = await employeeService.getEmployeePaystubs('emp-123', {\n        page: 1,\n        limit: 10,\n        year: 2024\n      });\n\n      // Assert\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual({\n        id: 'paystub-123',\n        periodName: 'January 2024',\n        periodStartDate: '2024-01-01',\n        periodEndDate: '2024-01-31',\n        employeeId: 'emp-123',\n        employeeName: 'John Doe',\n        position: 'Software Developer',\n        department: 'Engineering',\n        baseSalary: 5000,\n        totalRegularHours: 160,\n        totalOvertimeHours: 0,\n        paidLeaveHours: 0,\n        grossPay: 5000,\n        totalDeductions: 1000,\n        totalBenefits: 500,\n        netPay: 4500,\n        lateDeductions: 0,\n        deductions: [],\n        benefits: [],\n        createdAt: '2024-01-31T10:00:00Z'\n      });\n    });\n  });\n});"],"version":3}