{"version":3,"names":["cov_20p4z8xyvc","actualCoverage","logger_1","s","__importDefault","require","errorHandler","error","req","res","_next","f","statusCode","b","message","errorCode","errorContext","stack","url","method","ip","userAgent","get","requestId","timestamp","Date","toISOString","name","default","warn","code","process","env","NODE_ENV","errorResponse","success","details","status","json","exports","catchAsync","fn","next","Promise","resolve","catch","createOperationalError","Error","startsWith","isOperational","handleUnhandledRejections","on","err","exit","handleUncaughtExceptions"],"sources":["/home/kim/tito/server/src/middleware/errorHandler.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { ApiResponse } from '../utils/types/express';\nimport logger from '../utils/logger';\n\nexport interface AppError extends Error {\n  statusCode?: number;\n  status?: string;\n  isOperational?: boolean;\n  code?: string;\n  errorCode?: string;\n}\n\n/**\n * Global error handling middleware\n * Provides consistent error responses and prevents information disclosure\n */\nexport const errorHandler = (\n  error: AppError,\n  req: Request,\n  res: Response<ApiResponse>,\n  _next: NextFunction\n): void => {\n  let statusCode = error.statusCode || 500;\n  let message = error.message || 'Internal server error';\n  let errorCode = 'INTERNAL_ERROR';\n\n  // Log the error with context\n  const errorContext = {\n    message: error.message,\n    stack: error.stack,\n    url: req.url,\n    method: req.method,\n    ip: req.ip,\n    userAgent: req.get('User-Agent'),\n    requestId: req.requestId,\n    timestamp: new Date().toISOString()\n  };\n\n  // Handle different types of errors\n  if (error.name === 'ValidationError') {\n    // Joi validation error\n    statusCode = 400;\n    message = 'Validation failed';\n    errorCode = 'VALIDATION_ERROR';\n    logger.warn('Validation error:', errorContext);\n  } else if (error.name === 'UnauthorizedError') {\n    // JWT error\n    statusCode = 401;\n    message = 'Authentication failed';\n    errorCode = 'AUTHENTICATION_ERROR';\n    logger.warn('Authentication error:', errorContext);\n  } else if (error.name === 'JsonWebTokenError') {\n    statusCode = 401;\n    message = 'Invalid token';\n    errorCode = 'INVALID_TOKEN';\n    logger.warn('JWT error:', errorContext);\n  } else if (error.name === 'TokenExpiredError') {\n    statusCode = 401;\n    message = 'Token expired';\n    errorCode = 'TOKEN_EXPIRED';\n    logger.warn('Token expired:', errorContext);\n  } else if (error.name === 'CastError') {\n    // MongoDB cast error (if using MongoDB)\n    statusCode = 400;\n    message = 'Invalid data format';\n    errorCode = 'INVALID_DATA';\n    logger.warn('Cast error:', errorContext);\n  } else if (error.code === '23505') {\n    // PostgreSQL unique constraint violation\n    statusCode = 409;\n    message = 'Resource already exists';\n    errorCode = 'DUPLICATE_ENTRY';\n    logger.warn('Duplicate entry error:', errorContext);\n  } else if (error.code === '23503') {\n    // PostgreSQL foreign key constraint violation\n    statusCode = 400;\n    message = 'Invalid reference';\n    errorCode = 'INVALID_REFERENCE';\n    logger.warn('Foreign key error:', errorContext);\n  } else if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {\n    // Database connection error\n    statusCode = 503;\n    message = 'Service temporarily unavailable';\n    errorCode = 'SERVICE_UNAVAILABLE';\n    logger.error('Database connection error:', errorContext);\n  } else if (statusCode >= 500) {\n    // Log server errors\n    logger.error('Server error:', errorContext);\n  } else {\n    // Log other errors as warnings\n    logger.warn('Application error:', errorContext);\n  }\n\n  // In production, don't leak error details\n  if (process.env.NODE_ENV === 'production' && statusCode === 500) {\n    message = 'Something went wrong';\n  }\n\n  // Send error response\n  const errorResponse: ApiResponse = {\n    success: false,\n    message,\n    error: errorCode,\n    timestamp: new Date().toISOString(),\n    requestId: req.requestId\n  };\n\n  // Include additional error details in development\n  if (process.env.NODE_ENV === 'development') {\n    errorResponse.details = {\n      name: error.name,\n      stack: error.stack\n    };\n  }\n\n  res.status(statusCode).json(errorResponse);\n};\n\n/**\n * Catch async errors and pass them to error handler\n */\nexport const catchAsync = (fn: Function) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};\n\n/**\n * Create operational errors (errors we expect and can handle)\n */\nexport const createOperationalError = (\n  message: string,\n  statusCode: number,\n  errorCode?: string\n): AppError => {\n  const error: AppError = new Error(message);\n  error.statusCode = statusCode;\n  error.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';\n  error.isOperational = true;\n\n  if (errorCode) {\n    (error as any).errorCode = errorCode;\n  }\n\n  return error;\n};\n\n/**\n * Handle unhandled promise rejections\n */\nexport const handleUnhandledRejections = (): void => {\n  process.on('unhandledRejection', (err: Error) => {\n    logger.error('Unhandled Promise Rejection:', {\n      error: err.message,\n      stack: err.stack,\n      timestamp: new Date().toISOString()\n    });\n\n    // Close server gracefully\n    process.exit(1);\n  });\n};\n\n/**\n * Handle uncaught exceptions\n */\nexport const handleUncaughtExceptions = (): void => {\n  process.on('uncaughtException', (err: Error) => {\n    logger.error('Uncaught Exception:', {\n      error: err.message,\n      stack: err.stack,\n      timestamp: new Date().toISOString()\n    });\n\n    // Close server gracefully\n    process.exit(1);\n  });\n};\n"],"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","ignoreList":[]}