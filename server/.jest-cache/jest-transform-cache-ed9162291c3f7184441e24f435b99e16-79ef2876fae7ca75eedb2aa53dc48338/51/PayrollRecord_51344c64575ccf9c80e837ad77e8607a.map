{"version":3,"names":["cov_b86wzbv2j","actualCoverage","database_1","s","require","logger_1","__importDefault","PayrollRecordModel","constructor","f","pool","getPool","create","data","client","connect","query","values","payroll_period_id","employee_id","base_salary","b","total_worked_hours","hourly_rate","total_regular_hours","total_overtime_hours","total_late_hours","late_deductions","paid_leave_hours","gross_pay","net_pay","total_deductions","total_benefits","status","result","record","rows","default","info","recordId","id","employeeId","payrollPeriodId","error","message","release","findById","findByPeriodAndEmployee","findAll","params","page","limit","offset","whereClause","conditions","paramIndex","push","length","join","countQuery","countResult","total","parseInt","count","records","findAllWithEmployee","department_id","map","row","period_name","department_name","created_at","updated_at","approval_status","approval_approved_at","approval_comments","employee","employee_display_id","user","first_name","last_name","department","name","update","fields","undefined","updates","delete","deleted","rowCount","findByPayrollPeriod","getTotalNetPay","parseFloat","getTotalDeductions","exports","payrollRecordModel"],"sources":["/home/kim/tito/server/src/models/payroll/PayrollRecord.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface PayrollRecord {\n  id: string;\n  payroll_period_id: string;\n  employee_id: string;\n  base_salary: number;\n  total_worked_hours: number;\n  hourly_rate: number;\n  total_regular_hours: number;\n  total_overtime_hours: number;\n  total_late_hours: number;\n  late_deductions: number;\n  paid_leave_hours: number; // Hours from approved leave days\n  gross_pay: number;\n  net_pay: number;\n  total_deductions: number;\n  total_benefits: number;\n  status: 'draft' | 'processed' | 'paid';\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface PayrollRecordWithEmployee extends PayrollRecord {\n  period_name?: string;\n  department_id?: string;\n  department_name?: string;\n  approval_status?: 'pending' | 'approved' | 'rejected';\n  approval_approved_at?: Date;\n  approval_comments?: string;\n  employee: {\n    employee_id: string;\n    user: {\n      first_name: string;\n      last_name: string;\n    };\n    department: {\n      id?: string;\n      name: string;\n    };\n  };\n}\n\nexport interface CreatePayrollRecordData {\n  payroll_period_id: string;\n  employee_id: string;\n  base_salary: number;\n  total_worked_hours?: number;\n  hourly_rate?: number;\n  total_regular_hours?: number;\n  total_overtime_hours?: number;\n  total_late_hours?: number;\n  late_deductions?: number;\n  paid_leave_hours?: number; // Hours from approved leave days\n  gross_pay?: number;\n  net_pay?: number;\n  total_deductions?: number;\n  total_benefits?: number;\n  status?: 'draft' | 'processed' | 'paid';\n}\n\nexport interface UpdatePayrollRecordData {\n  base_salary?: number;\n  total_worked_hours?: number;\n  hourly_rate?: number;\n  total_regular_hours?: number;\n  total_overtime_hours?: number;\n  total_late_hours?: number;\n  late_deductions?: number;\n  paid_leave_hours?: number; // Hours from approved leave days\n  gross_pay?: number;\n  net_pay?: number;\n  total_deductions?: number;\n  total_benefits?: number;\n  status?: 'draft' | 'processed' | 'paid';\n}\n\nexport interface PayrollRecordListParams {\n  payroll_period_id?: string;\n  employee_id?: string;\n  department_id?: string;\n  status?: string;\n  page?: number;\n  limit?: number;\n}\n\nclass PayrollRecordModel {\n  private pool = getPool();\n\n  async create(data: CreatePayrollRecordData): Promise<PayrollRecord> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        INSERT INTO payroll_records (\n          payroll_period_id, employee_id, base_salary, total_worked_hours, \n          hourly_rate, total_regular_hours, total_overtime_hours, total_late_hours,\n          late_deductions, paid_leave_hours, gross_pay, net_pay, total_deductions, total_benefits, status\n        )\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)\n        RETURNING *\n      `;\n      const values = [\n        data.payroll_period_id,\n        data.employee_id,\n        data.base_salary,\n        data.total_worked_hours ?? 0,\n        data.hourly_rate ?? 0,\n        data.total_regular_hours ?? 0,\n        data.total_overtime_hours ?? 0,\n        data.total_late_hours ?? 0,\n        data.late_deductions ?? 0,\n        data.paid_leave_hours ?? 0,\n        data.gross_pay ?? 0,\n        data.net_pay ?? 0,\n        data.total_deductions ?? 0,\n        data.total_benefits ?? 0,\n        data.status ?? 'draft'\n      ];\n      \n      const result = await client.query(query, values);\n      const record = result.rows[0];\n      \n      logger.info('Payroll record created', { \n        recordId: record.id, \n        employeeId: record.employee_id,\n        payrollPeriodId: record.payroll_period_id\n      });\n      return record;\n    } catch (error) {\n      logger.error('Error creating payroll record', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findById(id: string): Promise<PayrollRecord | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT * FROM payroll_records WHERE id = $1';\n      const result = await client.query(query, [id]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding payroll record by ID', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findByPeriodAndEmployee(payrollPeriodId: string, employeeId: string): Promise<PayrollRecord | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT * FROM payroll_records \n        WHERE payroll_period_id = $1 AND employee_id = $2\n      `;\n      const result = await client.query(query, [payrollPeriodId, employeeId]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding payroll record by period and employee', { \n        error: (error as Error).message, \n        payrollPeriodId, \n        employeeId \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findAll(params: PayrollRecordListParams = {}): Promise<{ records: PayrollRecord[]; total: number }> {\n    const client = await this.pool.connect();\n    try {\n      const { page = 1, limit = 10, payroll_period_id, employee_id, status } = params;\n      const offset = (page - 1) * limit;\n      \n      let whereClause = '';\n      const conditions: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (payroll_period_id) {\n        conditions.push(`payroll_period_id = $${paramIndex++}`);\n        values.push(payroll_period_id);\n      }\n\n      if (employee_id) {\n        conditions.push(`employee_id = $${paramIndex++}`);\n        values.push(employee_id);\n      }\n\n      if (status) {\n        conditions.push(`status = $${paramIndex++}`);\n        values.push(status);\n      }\n\n      if (conditions.length > 0) {\n        whereClause = `WHERE ${conditions.join(' AND ')}`;\n      }\n\n      // Get total count\n      const countQuery = `SELECT COUNT(*) FROM payroll_records ${whereClause}`;\n      const countResult = await client.query(countQuery, values);\n      const total = parseInt(countResult.rows[0].count);\n\n      // Get records\n      const query = `\n        SELECT * FROM payroll_records \n        ${whereClause}\n        ORDER BY created_at DESC\n        LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n      `;\n      values.push(limit, offset);\n      \n      const result = await client.query(query, values);\n      \n      return {\n        records: result.rows,\n        total\n      };\n    } catch (error) {\n      logger.error('Error finding payroll records', { error: (error as Error).message, params });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findAllWithEmployee(params: PayrollRecordListParams = {}): Promise<{ records: PayrollRecordWithEmployee[]; total: number }> {\n    const client = await this.pool.connect();\n    try {\n      const { page = 1, limit = 10, payroll_period_id, employee_id, department_id, status } = params;\n      const offset = (page - 1) * limit;\n      \n      let whereClause = '';\n      const conditions: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (payroll_period_id) {\n        conditions.push(`pr.payroll_period_id = $${paramIndex++}`);\n        values.push(payroll_period_id);\n      }\n\n      if (employee_id) {\n        conditions.push(`pr.employee_id = $${paramIndex++}`);\n        values.push(employee_id);\n      }\n\n      if (department_id) {\n        conditions.push(`e.department_id = $${paramIndex++}`);\n        values.push(department_id);\n      }\n\n      if (status) {\n        conditions.push(`pr.status = $${paramIndex++}`);\n        values.push(status);\n      }\n\n      if (conditions.length > 0) {\n        whereClause = `WHERE ${conditions.join(' AND ')}`;\n      }\n\n      // Get total count\n      const countQuery = `\n        SELECT COUNT(*) FROM payroll_records pr\n        JOIN employees e ON pr.employee_id = e.id\n        ${whereClause}\n      `;\n      const countResult = await client.query(countQuery, values);\n      const total = parseInt(countResult.rows[0].count);\n\n      // Get records with employee info and overall period approval status\n      const query = `\n        SELECT \n          pr.*,\n          e.employee_id as employee_display_id,\n          e.department_id,\n          u.first_name,\n          u.last_name,\n          d.name as department_name,\n          pp.period_name,\n          pp.status as period_status,\n          CASE \n            WHEN pp.status = 'completed' THEN 'approved'\n            WHEN pp.status = 'sent_for_review' THEN 'pending'\n            ELSE 'pending'\n          END as approval_status,\n          NULL as approval_approved_at,\n          NULL as approval_comments\n        FROM payroll_records pr\n        JOIN employees e ON pr.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        LEFT JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n        ${whereClause}\n        ORDER BY pr.created_at DESC\n        LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n      `;\n      values.push(limit, offset);\n      \n      const result = await client.query(query, values);\n      \n      const records: PayrollRecordWithEmployee[] = result.rows.map(row => ({\n        id: row.id,\n        payroll_period_id: row.payroll_period_id,\n        employee_id: row.employee_id, // This is pr.employee_id (UUID)\n        period_name: row.period_name,\n        department_id: row.department_id,\n        department_name: row.department_name,\n        base_salary: row.base_salary,\n        total_worked_hours: row.total_worked_hours,\n        hourly_rate: row.hourly_rate,\n        total_regular_hours: row.total_regular_hours,\n        total_overtime_hours: row.total_overtime_hours,\n        total_late_hours: row.total_late_hours,\n        late_deductions: row.late_deductions,\n        paid_leave_hours: row.paid_leave_hours || 0,\n        gross_pay: row.gross_pay,\n        net_pay: row.net_pay,\n        total_deductions: row.total_deductions,\n        total_benefits: row.total_benefits,\n        status: row.status,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        approval_status: row.approval_status,\n        approval_approved_at: row.approval_approved_at,\n        approval_comments: row.approval_comments,\n        employee: {\n          employee_id: row.employee_display_id,\n          user: {\n            first_name: row.first_name,\n            last_name: row.last_name\n          },\n          department: {\n            id: row.department_id,\n            name: row.department_name\n          }\n        }\n      }));\n      \n      return {\n        records,\n        total\n      };\n    } catch (error) {\n      logger.error('Error finding payroll records with employee', { error: (error as Error).message, params });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async update(id: string, data: UpdatePayrollRecordData): Promise<PayrollRecord | null> {\n    const client = await this.pool.connect();\n    try {\n      const fields: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (data.base_salary !== undefined) {\n        fields.push(`base_salary = $${paramIndex++}`);\n        values.push(data.base_salary);\n      }\n\n      if (data.total_worked_hours !== undefined) {\n        fields.push(`total_worked_hours = $${paramIndex++}`);\n        values.push(data.total_worked_hours);\n      }\n\n      if (data.hourly_rate !== undefined) {\n        fields.push(`hourly_rate = $${paramIndex++}`);\n        values.push(data.hourly_rate);\n      }\n\n      if (data.total_regular_hours !== undefined) {\n        fields.push(`total_regular_hours = $${paramIndex++}`);\n        values.push(data.total_regular_hours);\n      }\n\n      if (data.total_overtime_hours !== undefined) {\n        fields.push(`total_overtime_hours = $${paramIndex++}`);\n        values.push(data.total_overtime_hours);\n      }\n\n      if (data.total_late_hours !== undefined) {\n        fields.push(`total_late_hours = $${paramIndex++}`);\n        values.push(data.total_late_hours);\n      }\n\n      if (data.late_deductions !== undefined) {\n        fields.push(`late_deductions = $${paramIndex++}`);\n        values.push(data.late_deductions);\n      }\n\n      if (data.paid_leave_hours !== undefined) {\n        fields.push(`paid_leave_hours = $${paramIndex++}`);\n        values.push(data.paid_leave_hours);\n      }\n\n      if (data.gross_pay !== undefined) {\n        fields.push(`gross_pay = $${paramIndex++}`);\n        values.push(data.gross_pay);\n      }\n\n      if (data.net_pay !== undefined) {\n        fields.push(`net_pay = $${paramIndex++}`);\n        values.push(data.net_pay);\n      }\n\n      if (data.total_deductions !== undefined) {\n        fields.push(`total_deductions = $${paramIndex++}`);\n        values.push(data.total_deductions);\n      }\n\n      if (data.total_benefits !== undefined) {\n        fields.push(`total_benefits = $${paramIndex++}`);\n        values.push(data.total_benefits);\n      }\n\n      if (data.status !== undefined) {\n        fields.push(`status = $${paramIndex++}`);\n        values.push(data.status);\n      }\n\n      if (fields.length === 0) {\n        return await this.findById(id);\n      }\n\n      fields.push(`updated_at = CURRENT_TIMESTAMP`);\n      values.push(id);\n\n      const query = `\n        UPDATE payroll_records \n        SET ${fields.join(', ')}\n        WHERE id = $${paramIndex}\n        RETURNING *\n      `;\n\n      const result = await client.query(query, values);\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      logger.info('Payroll record updated', { recordId: id, updates: data });\n      return result.rows[0];\n    } catch (error) {\n      logger.error('Error updating payroll record', { error: (error as Error).message, id, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async delete(id: string): Promise<boolean> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'DELETE FROM payroll_records WHERE id = $1';\n      const result = await client.query(query, [id]);\n      \n      const deleted = (result.rowCount || 0) > 0;\n      if (deleted) {\n        logger.info('Payroll record deleted', { recordId: id });\n      }\n      \n      return deleted;\n    } catch (error) {\n      logger.error('Error deleting payroll record', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findByPayrollPeriod(payrollPeriodId: string): Promise<PayrollRecord[]> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT * FROM payroll_records \n        WHERE payroll_period_id = $1\n        ORDER BY created_at ASC\n      `;\n      const result = await client.query(query, [payrollPeriodId]);\n      return result.rows;\n    } catch (error) {\n      logger.error('Error finding payroll records by period', { \n        error: (error as Error).message, \n        payrollPeriodId \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getTotalNetPay(): Promise<number> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT COALESCE(SUM(net_pay), 0) as total FROM payroll_records WHERE status = $1';\n      const result = await client.query(query, ['paid']);\n      return parseFloat(result.rows[0].total) || 0;\n    } catch (error) {\n      logger.error('Error getting total net pay', { error: (error as Error).message });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getTotalDeductions(): Promise<number> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT COALESCE(SUM(total_deductions), 0) as total FROM payroll_records WHERE status = $1';\n      const result = await client.query(query, ['paid']);\n      return parseFloat(result.rows[0].total) || 0;\n    } catch (error) {\n      logger.error('Error getting total deductions', { error: (error as Error).message });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n}\n\nexport const payrollRecordModel = new PayrollRecordModel();"],"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","ignoreList":[]}