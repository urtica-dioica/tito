034bdf1745d50dd5cb3c16cca4d11bcd
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidTokenFormat = exports.extractTokenFromHeader = exports.generateTokenPair = exports.isTokenExpired = exports.getTokenExpiration = exports.decodeToken = exports.verifyRefreshToken = exports.verifyAccessToken = exports.generateRefreshToken = exports.generateAccessToken = void 0;
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const environment_1 = require("./environment");
// Generate access token
const generateAccessToken = (payload) => {
    return jsonwebtoken_1.default.sign(payload, environment_1.config.jwt.secret, {
        expiresIn: '15m',
        issuer: 'tito-hr-system',
        audience: 'tito-hr-users'
    });
};
exports.generateAccessToken = generateAccessToken;
// Generate refresh token
const generateRefreshToken = (payload) => {
    return jsonwebtoken_1.default.sign(payload, environment_1.config.jwt.secret, {
        expiresIn: '7d',
        issuer: 'tito-hr-system',
        audience: 'tito-hr-refresh'
    });
};
exports.generateRefreshToken = generateRefreshToken;
// Verify access token
const verifyAccessToken = (token) => {
    try {
        return jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret, {
            issuer: 'tito-hr-system',
            audience: 'tito-hr-users',
        });
    }
    catch (error) {
        if (error instanceof jsonwebtoken_1.default.TokenExpiredError) {
            throw new Error('Access token expired');
        }
        else if (error instanceof jsonwebtoken_1.default.JsonWebTokenError) {
            throw new Error('Invalid access token');
        }
        else {
            throw new Error('Token verification failed');
        }
    }
};
exports.verifyAccessToken = verifyAccessToken;
// Verify refresh token
const verifyRefreshToken = (token) => {
    try {
        return jsonwebtoken_1.default.verify(token, environment_1.config.jwt.secret, {
            issuer: 'tito-hr-system',
            audience: 'tito-hr-refresh',
        });
    }
    catch (error) {
        if (error instanceof jsonwebtoken_1.default.TokenExpiredError) {
            throw new Error('Refresh token expired');
        }
        else if (error instanceof jsonwebtoken_1.default.JsonWebTokenError) {
            throw new Error('Invalid refresh token');
        }
        else {
            throw new Error('Token verification failed');
        }
    }
};
exports.verifyRefreshToken = verifyRefreshToken;
// Decode token without verification (for logging/debugging)
const decodeToken = (token) => {
    try {
        return jsonwebtoken_1.default.decode(token);
    }
    catch (error) {
        return null;
    }
};
exports.decodeToken = decodeToken;
// Get token expiration time
const getTokenExpiration = (token) => {
    try {
        const decoded = jsonwebtoken_1.default.decode(token);
        if (decoded && decoded.exp) {
            return new Date(decoded.exp * 1000);
        }
        return null;
    }
    catch (error) {
        return null;
    }
};
exports.getTokenExpiration = getTokenExpiration;
// Check if token is expired
const isTokenExpired = (token) => {
    try {
        const decoded = jsonwebtoken_1.default.decode(token);
        if (decoded && decoded.exp) {
            return Date.now() >= decoded.exp * 1000;
        }
        return true;
    }
    catch (error) {
        return true;
    }
};
exports.isTokenExpired = isTokenExpired;
// Generate token pair (access + refresh)
const generateTokenPair = (userId, email, role, tokenVersion) => {
    const accessToken = (0, exports.generateAccessToken)({ userId, email, role, tokenVersion });
    const refreshToken = (0, exports.generateRefreshToken)({ userId, tokenVersion });
    return { accessToken, refreshToken };
};
exports.generateTokenPair = generateTokenPair;
// Token utilities
const extractTokenFromHeader = (authHeader) => {
    if (!authHeader)
        return null;
    const parts = authHeader.split(' ');
    if (parts.length !== 2 || parts[0] !== 'Bearer') {
        return null;
    }
    return parts[1] || null;
};
exports.extractTokenFromHeader = extractTokenFromHeader;
// Validate token format
const isValidTokenFormat = (token) => {
    // Basic JWT format validation (3 parts separated by dots)
    const parts = token.split('.');
    return parts.length === 3 && parts.every(part => part.length > 0);
};
exports.isValidTokenFormat = isValidTokenFormat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,