465988d4299881196c4e75aaf2c78c15
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testRedisClient = exports.testDbPool = void 0;
exports.initializeTestConnections = initializeTestConnections;
exports.setupTestDatabase = setupTestDatabase;
exports.setupTestRedis = setupTestRedis;
exports.cleanupTestDatabase = cleanupTestDatabase;
exports.cleanupTestRedis = cleanupTestRedis;
// Test environment setup
process.env.NODE_ENV = 'test';
process.env.DATABASE_URL = process.env.TEST_DATABASE_URL || 'postgresql://postgres:password@localhost:5432/tito_hr_test';
process.env.REDIS_URL = process.env.TEST_REDIS_URL || 'redis://localhost:6379/1';
process.env.JWT_SECRET = 'test-jwt-secret-key';
process.env.JWT_REFRESH_SECRET = 'test-refresh-secret-key';
process.env.JWT_EXPIRES_IN = '15m';
process.env.JWT_REFRESH_EXPIRES_IN = '7d';
process.env.PORT = '3001';
// Mock services for tests
const mockRedisService_1 = require("./utils/mockRedisService");
const mockDatabaseService_1 = require("./utils/mockDatabaseService");
// Global test database connection (only for tests that need it)
let testDbPool = null;
exports.testDbPool = testDbPool;
let testRedisClient = null;
exports.testRedisClient = testRedisClient;
// Initialize connections for integration tests
async function initializeTestConnections() {
    if (!testDbPool) {
        exports.testDbPool = testDbPool = await setupTestDatabase();
    }
    if (!testRedisClient) {
        exports.testRedisClient = testRedisClient = await setupTestRedis();
    }
    return { testDbPool, testRedisClient };
}
// Only setup database connections for tests that actually need them
async function setupTestDatabase() {
    if (testDbPool)
        return testDbPool;
    // Use mock database service for tests
    exports.testDbPool = testDbPool = mockDatabaseService_1.mockDatabaseService;
    return testDbPool;
}
async function setupTestRedis() {
    if (testRedisClient)
        return testRedisClient;
    // Use mock Redis service for tests
    exports.testRedisClient = testRedisClient = mockRedisService_1.mockRedisService;
    await testRedisClient.connect();
    return testRedisClient;
}
async function cleanupTestDatabase() {
    if (!testDbPool)
        return;
    try {
        const client = await testDbPool.connect();
        try {
            // Disable foreign key checks temporarily
            await client.query('SET session_replication_role = replica;');
            // Clean all tables in reverse dependency order
            const tables = [
                'payroll_approvals',
                'payroll_deductions',
                'payroll_records',
                'payroll_periods',
                'deduction_types',
                'leave_balances',
                'leaves',
                'overtime_requests',
                'time_correction_requests',
                'attendance_sessions',
                'attendance_records',
                'id_cards',
                'system_settings',
                'employees',
                'departments',
                'users'
            ];
            for (const table of tables) {
                await client.query(`DELETE FROM ${table}`);
            }
            // Reset sequences
            await client.query('ALTER SEQUENCE users_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE departments_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE employees_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE attendance_records_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE attendance_sessions_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE time_correction_requests_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE overtime_requests_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE leaves_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE leave_balances_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE payroll_periods_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE payroll_records_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE payroll_deductions_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE deduction_types_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE payroll_approvals_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE system_settings_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE id_cards_id_seq RESTART WITH 1');
            // Re-enable foreign key checks
            await client.query('SET session_replication_role = DEFAULT;');
        }
        finally {
            client.release();
        }
    }
    catch (error) {
        console.warn('Database cleanup failed (this is expected if database is not available):', error.message);
    }
}
async function cleanupTestRedis() {
    if (!testRedisClient)
        return;
    try {
        await testRedisClient.flushDb();
    }
    catch (error) {
        console.warn('Redis cleanup failed:', error.message);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Z0JBQVMsQ0FBQztZQUNULE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQixDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLDBFQUEwRSxFQUFHLEtBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNySCxDQUFDO0FBQ0gsQ0FBQztBQUVNLEtBQUssVUFBVSxnQkFBZ0I7SUFDcEMsSUFBSSxDQUFDLGVBQWU7UUFBRSxPQUFPO0lBRTdCLElBQUksQ0FBQztRQUNILE1BQU0sZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRyxLQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEUsQ0FBQztBQUNILENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUva2ltL3RpdG8vc2VydmVyL3Rlc3RzL3NldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRlc3QgZW52aXJvbm1lbnQgc2V0dXBcbnByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xucHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMID0gcHJvY2Vzcy5lbnYuVEVTVF9EQVRBQkFTRV9VUkwgfHwgJ3Bvc3RncmVzcWw6Ly9wb3N0Z3JlczpwYXNzd29yZEBsb2NhbGhvc3Q6NTQzMi90aXRvX2hyX3Rlc3QnO1xucHJvY2Vzcy5lbnYuUkVESVNfVVJMID0gcHJvY2Vzcy5lbnYuVEVTVF9SRURJU19VUkwgfHwgJ3JlZGlzOi8vbG9jYWxob3N0OjYzNzkvMSc7XG5wcm9jZXNzLmVudi5KV1RfU0VDUkVUID0gJ3Rlc3Qtand0LXNlY3JldC1rZXknO1xucHJvY2Vzcy5lbnYuSldUX1JFRlJFU0hfU0VDUkVUID0gJ3Rlc3QtcmVmcmVzaC1zZWNyZXQta2V5JztcbnByb2Nlc3MuZW52LkpXVF9FWFBJUkVTX0lOID0gJzE1bSc7XG5wcm9jZXNzLmVudi5KV1RfUkVGUkVTSF9FWFBJUkVTX0lOID0gJzdkJztcbnByb2Nlc3MuZW52LlBPUlQgPSAnMzAwMSc7XG5cbi8vIE1vY2sgc2VydmljZXMgZm9yIHRlc3RzXG5pbXBvcnQgeyBtb2NrUmVkaXNTZXJ2aWNlIH0gZnJvbSAnLi91dGlscy9tb2NrUmVkaXNTZXJ2aWNlJztcbmltcG9ydCB7IG1vY2tEYXRhYmFzZVNlcnZpY2UgfSBmcm9tICcuL3V0aWxzL21vY2tEYXRhYmFzZVNlcnZpY2UnO1xuXG4vLyBHbG9iYWwgdGVzdCBkYXRhYmFzZSBjb25uZWN0aW9uIChvbmx5IGZvciB0ZXN0cyB0aGF0IG5lZWQgaXQpXG5sZXQgdGVzdERiUG9vbDogYW55ID0gbnVsbDtcbmxldCB0ZXN0UmVkaXNDbGllbnQ6IGFueSA9IG51bGw7XG5cbi8vIEluaXRpYWxpemUgY29ubmVjdGlvbnMgZm9yIGludGVncmF0aW9uIHRlc3RzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZVRlc3RDb25uZWN0aW9ucygpIHtcbiAgaWYgKCF0ZXN0RGJQb29sKSB7XG4gICAgdGVzdERiUG9vbCA9IGF3YWl0IHNldHVwVGVzdERhdGFiYXNlKCk7XG4gIH1cbiAgaWYgKCF0ZXN0UmVkaXNDbGllbnQpIHtcbiAgICB0ZXN0UmVkaXNDbGllbnQgPSBhd2FpdCBzZXR1cFRlc3RSZWRpcygpO1xuICB9XG4gIHJldHVybiB7IHRlc3REYlBvb2wsIHRlc3RSZWRpc0NsaWVudCB9O1xufVxuXG4vLyBPbmx5IHNldHVwIGRhdGFiYXNlIGNvbm5lY3Rpb25zIGZvciB0ZXN0cyB0aGF0IGFjdHVhbGx5IG5lZWQgdGhlbVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldHVwVGVzdERhdGFiYXNlKCkge1xuICBpZiAodGVzdERiUG9vbCkgcmV0dXJuIHRlc3REYlBvb2w7XG4gIFxuICAvLyBVc2UgbW9jayBkYXRhYmFzZSBzZXJ2aWNlIGZvciB0ZXN0c1xuICB0ZXN0RGJQb29sID0gbW9ja0RhdGFiYXNlU2VydmljZTtcbiAgXG4gIHJldHVybiB0ZXN0RGJQb29sO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0dXBUZXN0UmVkaXMoKSB7XG4gIGlmICh0ZXN0UmVkaXNDbGllbnQpIHJldHVybiB0ZXN0UmVkaXNDbGllbnQ7XG4gIFxuICAvLyBVc2UgbW9jayBSZWRpcyBzZXJ2aWNlIGZvciB0ZXN0c1xuICB0ZXN0UmVkaXNDbGllbnQgPSBtb2NrUmVkaXNTZXJ2aWNlO1xuICBhd2FpdCB0ZXN0UmVkaXNDbGllbnQuY29ubmVjdCgpO1xuICByZXR1cm4gdGVzdFJlZGlzQ2xpZW50O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xlYW51cFRlc3REYXRhYmFzZSgpIHtcbiAgaWYgKCF0ZXN0RGJQb29sKSByZXR1cm47XG4gIFxuICB0cnkge1xuICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRlc3REYlBvb2wuY29ubmVjdCgpO1xuICAgIHRyeSB7XG4gICAgICAvLyBEaXNhYmxlIGZvcmVpZ24ga2V5IGNoZWNrcyB0ZW1wb3JhcmlseVxuICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdTRVQgc2Vzc2lvbl9yZXBsaWNhdGlvbl9yb2xlID0gcmVwbGljYTsnKTtcbiAgICAgIFxuICAgICAgLy8gQ2xlYW4gYWxsIHRhYmxlcyBpbiByZXZlcnNlIGRlcGVuZGVuY3kgb3JkZXJcbiAgICAgIGNvbnN0IHRhYmxlcyA9IFtcbiAgICAgICAgJ3BheXJvbGxfYXBwcm92YWxzJyxcbiAgICAgICAgJ3BheXJvbGxfZGVkdWN0aW9ucycsIFxuICAgICAgICAncGF5cm9sbF9yZWNvcmRzJyxcbiAgICAgICAgJ3BheXJvbGxfcGVyaW9kcycsXG4gICAgICAgICdkZWR1Y3Rpb25fdHlwZXMnLFxuICAgICAgICAnbGVhdmVfYmFsYW5jZXMnLFxuICAgICAgICAnbGVhdmVzJyxcbiAgICAgICAgJ292ZXJ0aW1lX3JlcXVlc3RzJyxcbiAgICAgICAgJ3RpbWVfY29ycmVjdGlvbl9yZXF1ZXN0cycsXG4gICAgICAgICdhdHRlbmRhbmNlX3Nlc3Npb25zJyxcbiAgICAgICAgJ2F0dGVuZGFuY2VfcmVjb3JkcycsXG4gICAgICAgICdpZF9jYXJkcycsXG4gICAgICAgICdzeXN0ZW1fc2V0dGluZ3MnLFxuICAgICAgICAnZW1wbG95ZWVzJyxcbiAgICAgICAgJ2RlcGFydG1lbnRzJyxcbiAgICAgICAgJ3VzZXJzJ1xuICAgICAgXTtcblxuICAgICAgZm9yIChjb25zdCB0YWJsZSBvZiB0YWJsZXMpIHtcbiAgICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KGBERUxFVEUgRlJPTSAke3RhYmxlfWApO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXNldCBzZXF1ZW5jZXNcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQUxURVIgU0VRVUVOQ0UgdXNlcnNfaWRfc2VxIFJFU1RBUlQgV0lUSCAxJyk7XG4gICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0FMVEVSIFNFUVVFTkNFIGRlcGFydG1lbnRzX2lkX3NlcSBSRVNUQVJUIFdJVEggMScpO1xuICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdBTFRFUiBTRVFVRU5DRSBlbXBsb3llZXNfaWRfc2VxIFJFU1RBUlQgV0lUSCAxJyk7XG4gICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0FMVEVSIFNFUVVFTkNFIGF0dGVuZGFuY2VfcmVjb3Jkc19pZF9zZXEgUkVTVEFSVCBXSVRIIDEnKTtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQUxURVIgU0VRVUVOQ0UgYXR0ZW5kYW5jZV9zZXNzaW9uc19pZF9zZXEgUkVTVEFSVCBXSVRIIDEnKTtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQUxURVIgU0VRVUVOQ0UgdGltZV9jb3JyZWN0aW9uX3JlcXVlc3RzX2lkX3NlcSBSRVNUQVJUIFdJVEggMScpO1xuICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdBTFRFUiBTRVFVRU5DRSBvdmVydGltZV9yZXF1ZXN0c19pZF9zZXEgUkVTVEFSVCBXSVRIIDEnKTtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQUxURVIgU0VRVUVOQ0UgbGVhdmVzX2lkX3NlcSBSRVNUQVJUIFdJVEggMScpO1xuICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdBTFRFUiBTRVFVRU5DRSBsZWF2ZV9iYWxhbmNlc19pZF9zZXEgUkVTVEFSVCBXSVRIIDEnKTtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQUxURVIgU0VRVUVOQ0UgcGF5cm9sbF9wZXJpb2RzX2lkX3NlcSBSRVNUQVJUIFdJVEggMScpO1xuICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdBTFRFUiBTRVFVRU5DRSBwYXlyb2xsX3JlY29yZHNfaWRfc2VxIFJFU1RBUlQgV0lUSCAxJyk7XG4gICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0FMVEVSIFNFUVVFTkNFIHBheXJvbGxfZGVkdWN0aW9uc19pZF9zZXEgUkVTVEFSVCBXSVRIIDEnKTtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQUxURVIgU0VRVUVOQ0UgZGVkdWN0aW9uX3R5cGVzX2lkX3NlcSBSRVNUQVJUIFdJVEggMScpO1xuICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdBTFRFUiBTRVFVRU5DRSBwYXlyb2xsX2FwcHJvdmFsc19pZF9zZXEgUkVTVEFSVCBXSVRIIDEnKTtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQUxURVIgU0VRVUVOQ0Ugc3lzdGVtX3NldHRpbmdzX2lkX3NlcSBSRVNUQVJUIFdJVEggMScpO1xuICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdBTFRFUiBTRVFVRU5DRSBpZF9jYXJkc19pZF9zZXEgUkVTVEFSVCBXSVRIIDEnKTtcblxuICAgICAgLy8gUmUtZW5hYmxlIGZvcmVpZ24ga2V5IGNoZWNrc1xuICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdTRVQgc2Vzc2lvbl9yZXBsaWNhdGlvbl9yb2xlID0gREVGQVVMVDsnKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgY2xpZW50LnJlbGVhc2UoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS53YXJuKCdEYXRhYmFzZSBjbGVhbnVwIGZhaWxlZCAodGhpcyBpcyBleHBlY3RlZCBpZiBkYXRhYmFzZSBpcyBub3QgYXZhaWxhYmxlKTonLCAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhbnVwVGVzdFJlZGlzKCkge1xuICBpZiAoIXRlc3RSZWRpc0NsaWVudCkgcmV0dXJuO1xuICBcbiAgdHJ5IHtcbiAgICBhd2FpdCB0ZXN0UmVkaXNDbGllbnQuZmx1c2hEYigpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUud2FybignUmVkaXMgY2xlYW51cCBmYWlsZWQ6JywgKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlKTtcbiAgfVxufVxuXG4vLyBFeHBvcnQgdGVzdCB1dGlsaXRpZXNcbmV4cG9ydCB7IHRlc3REYlBvb2wsIHRlc3RSZWRpc0NsaWVudCB9OyJdLCJ2ZXJzaW9uIjozfQ==