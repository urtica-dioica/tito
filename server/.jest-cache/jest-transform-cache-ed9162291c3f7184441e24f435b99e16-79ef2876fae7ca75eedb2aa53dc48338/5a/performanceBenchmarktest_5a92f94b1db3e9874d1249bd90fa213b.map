{"file":"/home/kim/tito/server/tests/performance/performanceBenchmark.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/performance/performanceBenchmark.test.ts"],"sourcesContent":["import { PerformanceBenchmark } from './loadTestUtils';\nimport { getPool } from '../../src/config/database';\n// Mock axios for testing\nconst axios = {\n  create: () => ({\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n    patch: jest.fn(),\n    interceptors: {\n      request: { use: jest.fn() },\n      response: { use: jest.fn() }\n    }\n  })\n};\n\ndescribe('Performance Benchmark Tests', () => {\n  let benchmark: PerformanceBenchmark;\n  let pool: any;\n  let baseURL: string;\n  let authToken: string;\n\n  beforeAll(async () => {\n    benchmark = new PerformanceBenchmark();\n    pool = getPool();\n    baseURL = process.env.TEST_BASE_URL || 'http://localhost:3000';\n\n    // Get authentication token\n    try {\n      const response = await axios.create().post(`${baseURL}/api/v1/auth/login`, {\n        email: 'hr@example.com',\n        password: 'password123'\n      });\n      authToken = response.data.data.accessToken;\n    } catch (error) {\n      console.warn('Could not obtain auth token for benchmark test');\n      authToken = 'test-token';\n    }\n  });\n\n  afterAll(async () => {\n    if (pool) {\n      await pool.end();\n    }\n  });\n\n  describe('API Endpoint Performance Benchmarks', () => {\n    it('should benchmark authentication endpoints', async () => {\n      const iterations = 10;\n\n      // Benchmark login endpoint\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Login Endpoint', async () => {\n          await axios.create().post(`${baseURL}/api/v1/auth/login`, {\n            email: 'test@example.com',\n            password: 'password123'\n          });\n        });\n      }\n\n      // Benchmark profile endpoint\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Profile Endpoint', async () => {\n          await axios.create().get(`${baseURL}/api/v1/auth/profile`, {\n            headers: { 'Authorization': `Bearer ${authToken}` }\n          });\n        });\n      }\n\n      // Benchmark refresh endpoint\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Refresh Endpoint', async () => {\n          await axios.create().post(`${baseURL}/api/v1/auth/refresh`, {}, {\n            headers: { 'Cookie': 'refreshToken=test-refresh-token' }\n          });\n        });\n      }\n\n      const results = benchmark.getResults();\n      \n      console.log('\\n🔍 AUTHENTICATION ENDPOINT BENCHMARKS');\n      console.log('=====================================');\n      for (const [name, stats] of results.entries()) {\n        console.log(`${name}:`);\n        console.log(`  Average: ${stats.average.toFixed(2)}ms`);\n        console.log(`  Min: ${stats.min.toFixed(2)}ms`);\n        console.log(`  Max: ${stats.max.toFixed(2)}ms`);\n        console.log(`  Samples: ${stats.count}`);\n      }\n\n      // Performance assertions\n      expect(results.get('Login Endpoint')?.average).toBeLessThan(2000);\n      expect(results.get('Profile Endpoint')?.average).toBeLessThan(1000);\n      expect(results.get('Refresh Endpoint')?.average).toBeLessThan(1500);\n    }, 60000);\n\n    it('should benchmark payroll endpoints', async () => {\n      const iterations = 8;\n\n      // Benchmark payroll periods endpoint\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Payroll Periods', async () => {\n          await axios.create().get(`${baseURL}/api/v1/payroll/periods`, {\n            headers: { 'Authorization': `Bearer ${authToken}` },\n            params: { page: 1, limit: 10 }\n          });\n        });\n      }\n\n      // Benchmark payroll records endpoint\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Payroll Records', async () => {\n          await axios.create().get(`${baseURL}/api/v1/payroll/periods/test-period-id/records`, {\n            headers: { 'Authorization': `Bearer ${authToken}` },\n            params: { page: 1, limit: 20 }\n          });\n        });\n      }\n\n      // Benchmark payroll summary endpoint\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Payroll Summary', async () => {\n          await axios.create().get(`${baseURL}/api/v1/payroll/periods/test-period-id/summary`, {\n            headers: { 'Authorization': `Bearer ${authToken}` }\n          });\n        });\n      }\n\n      // Benchmark payroll stats endpoint\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Payroll Stats', async () => {\n          await axios.create().get(`${baseURL}/api/v1/payroll/stats`, {\n            headers: { 'Authorization': `Bearer ${authToken}` },\n            params: { period: '2024-01' }\n          });\n        });\n      }\n\n      const results = benchmark.getResults();\n      \n      console.log('\\n🔍 PAYROLL ENDPOINT BENCHMARKS');\n      console.log('==============================');\n      for (const [name, stats] of results.entries()) {\n        if (name.includes('Payroll')) {\n          console.log(`${name}:`);\n          console.log(`  Average: ${stats.average.toFixed(2)}ms`);\n          console.log(`  Min: ${stats.min.toFixed(2)}ms`);\n          console.log(`  Max: ${stats.max.toFixed(2)}ms`);\n          console.log(`  Samples: ${stats.count}`);\n        }\n      }\n\n      // Performance assertions\n      expect(results.get('Payroll Periods')?.average).toBeLessThan(2000);\n      expect(results.get('Payroll Records')?.average).toBeLessThan(3000);\n      expect(results.get('Payroll Summary')?.average).toBeLessThan(2500);\n      expect(results.get('Payroll Stats')?.average).toBeLessThan(3000);\n    }, 60000);\n\n    it('should benchmark employee endpoints', async () => {\n      const iterations = 8;\n\n      // Benchmark employee listing endpoint\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Employee Listing', async () => {\n          await axios.create().get(`${baseURL}/api/v1/hr/employees`, {\n            headers: { 'Authorization': `Bearer ${authToken}` },\n            params: { page: 1, limit: 20 }\n          });\n        });\n      }\n\n      // Benchmark employee search endpoint\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Employee Search', async () => {\n          await axios.create().get(`${baseURL}/api/v1/hr/employees`, {\n            headers: { 'Authorization': `Bearer ${authToken}` },\n            params: { search: 'test', page: 1, limit: 10 }\n          });\n        });\n      }\n\n      // Benchmark department listing endpoint\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Department Listing', async () => {\n          await axios.create().get(`${baseURL}/api/v1/hr/departments`, {\n            headers: { 'Authorization': `Bearer ${authToken}` }\n          });\n        });\n      }\n\n      const results = benchmark.getResults();\n      \n      console.log('\\n🔍 EMPLOYEE ENDPOINT BENCHMARKS');\n      console.log('===============================');\n      for (const [name, stats] of results.entries()) {\n        if (name.includes('Employee') || name.includes('Department')) {\n          console.log(`${name}:`);\n          console.log(`  Average: ${stats.average.toFixed(2)}ms`);\n          console.log(`  Min: ${stats.min.toFixed(2)}ms`);\n          console.log(`  Max: ${stats.max.toFixed(2)}ms`);\n          console.log(`  Samples: ${stats.count}`);\n        }\n      }\n\n      // Performance assertions\n      expect(results.get('Employee Listing')?.average).toBeLessThan(2000);\n      expect(results.get('Employee Search')?.average).toBeLessThan(2500);\n      expect(results.get('Department Listing')?.average).toBeLessThan(1500);\n    }, 60000);\n  });\n\n  describe('Database Query Performance Benchmarks', () => {\n    it('should benchmark database queries', async () => {\n      const iterations = 20;\n\n      // Benchmark user authentication query\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('User Auth Query', async () => {\n          await pool.query(\n            'SELECT id, email, first_name, last_name, role FROM users WHERE email = $1 AND is_active = true',\n            ['test@example.com']\n          );\n        });\n      }\n\n      // Benchmark employee listing query\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Employee List Query', async () => {\n          await pool.query(`\n            SELECT e.id, e.employee_id, e.position, u.first_name, u.last_name, u.email, d.name as department_name\n            FROM employees e\n            JOIN users u ON e.user_id = u.id\n            LEFT JOIN departments d ON e.department_id = d.id\n            WHERE e.status = 'active'\n            ORDER BY u.last_name, u.first_name\n            LIMIT $1\n          `, [20]);\n        });\n      }\n\n      // Benchmark attendance statistics query\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Attendance Stats Query', async () => {\n          await pool.query(`\n            SELECT \n              COUNT(*) as total_employees,\n              COUNT(CASE WHEN ar.status = 'present' THEN 1 END) as present_today,\n              COUNT(CASE WHEN ar.status = 'absent' THEN 1 END) as absent_today,\n              COALESCE(SUM(ar.total_hours), 0) as total_hours_today\n            FROM employees e\n            LEFT JOIN attendance_records ar ON e.id = ar.employee_id AND ar.date = CURRENT_DATE\n            WHERE e.status = 'active'\n          `);\n        });\n      }\n\n      // Benchmark payroll summary query\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Payroll Summary Query', async () => {\n          await pool.query(`\n            SELECT \n              COUNT(*) as total_employees,\n              COALESCE(SUM(pr.gross_pay), 0) as total_gross_pay,\n              COALESCE(SUM(pr.net_pay), 0) as total_net_pay,\n              COALESCE(AVG(pr.gross_pay), 0) as average_salary\n            FROM payroll_records pr\n            JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n            WHERE pp.id = $1\n          `, ['test-period-id']);\n        });\n      }\n\n      const results = benchmark.getResults();\n      \n      console.log('\\n🔍 DATABASE QUERY BENCHMARKS');\n      console.log('============================');\n      for (const [name, stats] of results.entries()) {\n        if (name.includes('Query')) {\n          console.log(`${name}:`);\n          console.log(`  Average: ${stats.average.toFixed(2)}ms`);\n          console.log(`  Min: ${stats.min.toFixed(2)}ms`);\n          console.log(`  Max: ${stats.max.toFixed(2)}ms`);\n          console.log(`  Samples: ${stats.count}`);\n        }\n      }\n\n      // Performance assertions\n      expect(results.get('User Auth Query')?.average).toBeLessThan(50);\n      expect(results.get('Employee List Query')?.average).toBeLessThan(100);\n      expect(results.get('Attendance Stats Query')?.average).toBeLessThan(150);\n      expect(results.get('Payroll Summary Query')?.average).toBeLessThan(200);\n    }, 60000);\n  });\n\n  describe('System Performance Benchmarks', () => {\n    it('should benchmark system resource usage', async () => {\n      const iterations = 5;\n\n      // Benchmark memory usage during operations\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Memory Intensive Operation', async () => {\n          // Simulate memory-intensive operation\n          const largeArray = new Array(10000).fill(0).map((_, index) => ({\n            id: index,\n            name: `Item ${index}`,\n            data: `Data for item ${index}`.repeat(10)\n          }));\n          \n          // Process the array\n          const processed = largeArray.map(item => ({\n            ...item,\n            processed: true,\n            timestamp: Date.now()\n          }));\n          \n          return processed.length;\n        });\n      }\n\n      // Benchmark CPU-intensive operations\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('CPU Intensive Operation', async () => {\n          // Simulate CPU-intensive calculation\n          let result = 0;\n          for (let j = 0; j < 100000; j++) {\n            result += Math.sqrt(j) * Math.sin(j) * Math.cos(j);\n          }\n          return result;\n        });\n      }\n\n      // Benchmark I/O operations\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('I/O Operation', async () => {\n          // Simulate I/O operation with database\n          await pool.query('SELECT COUNT(*) FROM users');\n          await pool.query('SELECT COUNT(*) FROM employees');\n          await pool.query('SELECT COUNT(*) FROM departments');\n          return true;\n        });\n      }\n\n      const results = benchmark.getResults();\n      \n      console.log('\\n🔍 SYSTEM PERFORMANCE BENCHMARKS');\n      console.log('=================================');\n      for (const [name, stats] of results.entries()) {\n        if (name.includes('Operation')) {\n          console.log(`${name}:`);\n          console.log(`  Average: ${stats.average.toFixed(2)}ms`);\n          console.log(`  Min: ${stats.min.toFixed(2)}ms`);\n          console.log(`  Max: ${stats.max.toFixed(2)}ms`);\n          console.log(`  Samples: ${stats.count}`);\n        }\n      }\n\n      // Performance assertions\n      expect(results.get('Memory Intensive Operation')?.average).toBeLessThan(1000);\n      expect(results.get('CPU Intensive Operation')?.average).toBeLessThan(500);\n      expect(results.get('I/O Operation')?.average).toBeLessThan(200);\n    }, 60000);\n  });\n\n  describe('Performance Regression Tests', () => {\n    it('should detect performance regressions', async () => {\n      const iterations = 15;\n\n      // Test critical path performance\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Critical Path - User Login', async () => {\n          // Simulate complete user login flow\n          await axios.create().post(`${baseURL}/api/v1/auth/login`, {\n            email: 'test@example.com',\n            password: 'password123'\n          });\n        });\n      }\n\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Critical Path - Dashboard Load', async () => {\n          // Simulate dashboard loading\n          await axios.create().get(`${baseURL}/api/v1/hr/employees`, {\n            headers: { 'Authorization': `Bearer ${authToken}` },\n            params: { page: 1, limit: 20 }\n          });\n        });\n      }\n\n      for (let i = 0; i < iterations; i++) {\n        await benchmark.measure('Critical Path - Payroll View', async () => {\n          // Simulate payroll view loading\n          await axios.create().get(`${baseURL}/api/v1/payroll/periods`, {\n            headers: { 'Authorization': `Bearer ${authToken}` },\n            params: { page: 1, limit: 10 }\n          });\n        });\n      }\n\n      const results = benchmark.getResults();\n      \n      console.log('\\n🔍 PERFORMANCE REGRESSION TESTS');\n      console.log('===============================');\n      for (const [name, stats] of results.entries()) {\n        if (name.includes('Critical Path')) {\n          console.log(`${name}:`);\n          console.log(`  Average: ${stats.average.toFixed(2)}ms`);\n          console.log(`  Min: ${stats.min.toFixed(2)}ms`);\n          console.log(`  Max: ${stats.max.toFixed(2)}ms`);\n          console.log(`  Samples: ${stats.count}`);\n        }\n      }\n\n      // Performance regression assertions (strict thresholds)\n      expect(results.get('Critical Path - User Login')?.average).toBeLessThan(1500);\n      expect(results.get('Critical Path - Dashboard Load')?.average).toBeLessThan(2000);\n      expect(results.get('Critical Path - Payroll View')?.average).toBeLessThan(2000);\n      \n      // Check for performance consistency (max should not be too far from average)\n      const loginStats = results.get('Critical Path - User Login');\n      const dashboardStats = results.get('Critical Path - Dashboard Load');\n      const payrollStats = results.get('Critical Path - Payroll View');\n      \n      if (loginStats) {\n        expect(loginStats.max / loginStats.average).toBeLessThan(3); // Max should not be 3x average\n      }\n      if (dashboardStats) {\n        expect(dashboardStats.max / dashboardStats.average).toBeLessThan(3);\n      }\n      if (payrollStats) {\n        expect(payrollStats.max / payrollStats.average).toBeLessThan(3);\n      }\n    }, 90000);\n  });\n\n  afterAll(() => {\n    // Generate final benchmark report\n    console.log(benchmark.generateReport());\n  });\n});\n"],"version":3}