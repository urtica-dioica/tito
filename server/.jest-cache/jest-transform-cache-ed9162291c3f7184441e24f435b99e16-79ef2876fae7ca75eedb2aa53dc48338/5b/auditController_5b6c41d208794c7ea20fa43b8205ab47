af247ab16aa58d1c7ba859ea4b7aaa1c
"use strict";

/* istanbul ignore next */
function cov_nzoyqwop2() {
  var path = "/home/kim/tito/server/src/controllers/audit/auditController.ts";
  var hash = "4244b42326f46f30e6b439957d3e9ee58405acef";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/audit/auditController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 67
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 62
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "5": {
        start: {
          line: 11,
          column: 162
        },
        end: {
          line: 11,
          column: 171
        }
      },
      "6": {
        start: {
          line: 12,
          column: 27
        },
        end: {
          line: 24,
          column: 13
        }
      },
      "7": {
        start: {
          line: 25,
          column: 27
        },
        end: {
          line: 25,
          column: 71
        }
      },
      "8": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "9": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 41,
          column: 15
        }
      },
      "10": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "11": {
        start: {
          line: 46,
          column: 27
        },
        end: {
          line: 46,
          column: 37
        }
      },
      "12": {
        start: {
          line: 47,
          column: 29
        },
        end: {
          line: 47,
          column: 72
        }
      },
      "13": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "14": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 54,
          column: 19
        }
      },
      "15": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 23
        }
      },
      "16": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 63,
          column: 15
        }
      },
      "17": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 72,
          column: 15
        }
      },
      "18": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "19": {
        start: {
          line: 77,
          column: 44
        },
        end: {
          line: 77,
          column: 54
        }
      },
      "20": {
        start: {
          line: 78,
          column: 30
        },
        end: {
          line: 78,
          column: 95
        }
      },
      "21": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 85,
          column: 15
        }
      },
      "22": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 94,
          column: 15
        }
      },
      "23": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "24": {
        start: {
          line: 99,
          column: 31
        },
        end: {
          line: 99,
          column: 41
        }
      },
      "25": {
        start: {
          line: 100,
          column: 35
        },
        end: {
          line: 100,
          column: 44
        }
      },
      "26": {
        start: {
          line: 101,
          column: 30
        },
        end: {
          line: 101,
          column: 97
        }
      },
      "27": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 108,
          column: 15
        }
      },
      "28": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 117,
          column: 15
        }
      },
      "29": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "30": {
        start: {
          line: 122,
          column: 26
        },
        end: {
          line: 122,
          column: 65
        }
      },
      "31": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 129,
          column: 15
        }
      },
      "32": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 138,
          column: 15
        }
      },
      "33": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "34": {
        start: {
          line: 143,
          column: 40
        },
        end: {
          line: 143,
          column: 48
        }
      },
      "35": {
        start: {
          line: 144,
          column: 33
        },
        end: {
          line: 144,
          column: 93
        }
      },
      "36": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 151,
          column: 15
        }
      },
      "37": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 160,
          column: 15
        }
      },
      "38": {
        start: {
          line: 164,
          column: 0
        },
        end: {
          line: 164,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 33
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 36
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 44
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 41
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 75
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 39
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 97
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 34
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 120
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 35
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 141
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 20
          },
          end: {
            line: 11,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 27
          },
          end: {
            line: 11,
            column: 28
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 11,
            column: 30
          },
          end: {
            line: 11,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 38
          },
          end: {
            line: 11,
            column: 40
          }
        }],
        line: 11
      },
      "2": {
        loc: {
          start: {
            line: 11,
            column: 116
          },
          end: {
            line: 11,
            column: 137
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 125
          },
          end: {
            line: 11,
            column: 137
          }
        }],
        line: 11
      },
      "3": {
        loc: {
          start: {
            line: 11,
            column: 139
          },
          end: {
            line: 11,
            column: 157
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 151
          },
          end: {
            line: 11,
            column: 157
          }
        }],
        line: 11
      },
      "4": {
        loc: {
          start: {
            line: 19,
            column: 27
          },
          end: {
            line: 19,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 19,
            column: 39
          },
          end: {
            line: 19,
            column: 58
          }
        }, {
          start: {
            line: 19,
            column: 61
          },
          end: {
            line: 19,
            column: 70
          }
        }],
        line: 19
      },
      "5": {
        loc: {
          start: {
            line: 20,
            column: 25
          },
          end: {
            line: 20,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 35
          },
          end: {
            line: 20,
            column: 52
          }
        }, {
          start: {
            line: 20,
            column: 55
          },
          end: {
            line: 20,
            column: 64
          }
        }],
        line: 20
      },
      "6": {
        loc: {
          start: {
            line: 38,
            column: 23
          },
          end: {
            line: 38,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 48
          },
          end: {
            line: 38,
            column: 61
          }
        }, {
          start: {
            line: 38,
            column: 64
          },
          end: {
            line: 38,
            column: 79
          }
        }],
        line: 38
      },
      "7": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "8": {
        loc: {
          start: {
            line: 69,
            column: 23
          },
          end: {
            line: 69,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 69,
            column: 48
          },
          end: {
            line: 69,
            column: 61
          }
        }, {
          start: {
            line: 69,
            column: 64
          },
          end: {
            line: 69,
            column: 79
          }
        }],
        line: 69
      },
      "9": {
        loc: {
          start: {
            line: 91,
            column: 23
          },
          end: {
            line: 91,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 91,
            column: 48
          },
          end: {
            line: 91,
            column: 61
          }
        }, {
          start: {
            line: 91,
            column: 64
          },
          end: {
            line: 91,
            column: 79
          }
        }],
        line: 91
      },
      "10": {
        loc: {
          start: {
            line: 100,
            column: 20
          },
          end: {
            line: 100,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 100,
            column: 28
          },
          end: {
            line: 100,
            column: 30
          }
        }],
        line: 100
      },
      "11": {
        loc: {
          start: {
            line: 114,
            column: 23
          },
          end: {
            line: 114,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 114,
            column: 48
          },
          end: {
            line: 114,
            column: 61
          }
        }, {
          start: {
            line: 114,
            column: 64
          },
          end: {
            line: 114,
            column: 79
          }
        }],
        line: 114
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 23
          },
          end: {
            line: 135,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 135,
            column: 48
          },
          end: {
            line: 135,
            column: 61
          }
        }, {
          start: {
            line: 135,
            column: 64
          },
          end: {
            line: 135,
            column: 79
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 143,
            column: 20
          },
          end: {
            line: 143,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 143,
            column: 33
          },
          end: {
            line: 143,
            column: 35
          }
        }],
        line: 143
      },
      "14": {
        loc: {
          start: {
            line: 157,
            column: 23
          },
          end: {
            line: 157,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 157,
            column: 48
          },
          end: {
            line: 157,
            column: 61
          }
        }, {
          start: {
            line: 157,
            column: 64
          },
          end: {
            line: 157,
            column: 79
          }
        }],
        line: 157
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/audit/auditController.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/audit/auditController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { AuditService } from '../../services/audit/auditService';\nimport { ApiResponse } from '../../utils/types/express';\n\nexport class AuditController {\n  private auditService: AuditService;\n\n  constructor() {\n    this.auditService = new AuditService();\n  }\n\n  async getAuditLogs(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const {\n        page = 1,\n        limit = 20,\n        tableName,\n        recordId,\n        action,\n        changedByUserId,\n        startDate,\n        endDate,\n        search,\n        sortBy = 'changed_at',\n        sortOrder = 'desc'\n      } = req.query;\n\n      const params = {\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        tableName: tableName as string,\n        recordId: recordId as string,\n        action: action as 'INSERT' | 'UPDATE' | 'DELETE',\n        changedByUserId: changedByUserId as string,\n        startDate: startDate ? new Date(startDate as string) : undefined,\n        endDate: endDate ? new Date(endDate as string) : undefined,\n        search: search as string,\n        sortBy: sortBy as string,\n        sortOrder: sortOrder as 'asc' | 'desc'\n      };\n\n      const result = await this.auditService.getAuditLogs(params);\n\n      res.status(200).json({\n        success: true,\n        message: 'Audit logs retrieved successfully',\n        data: result,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve audit logs',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getAuditLogById(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { id } = req.params;\n\n      const auditLog = await this.auditService.getAuditLogById(id);\n\n      if (!auditLog) {\n        res.status(404).json({\n          success: false,\n          message: 'Audit log not found',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Audit log retrieved successfully',\n        data: auditLog,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve audit log',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getAuditLogsByRecord(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { tableName, recordId } = req.params;\n\n      const auditLogs = await this.auditService.getAuditLogsByRecord(tableName, recordId);\n\n      res.status(200).json({\n        success: true,\n        message: 'Audit logs for record retrieved successfully',\n        data: auditLogs,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve audit logs for record',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getAuditLogsByUser(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { userId } = req.params;\n      const { limit = 50 } = req.query;\n\n      const auditLogs = await this.auditService.getAuditLogsByUser(\n        userId, \n        parseInt(limit as string)\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Audit logs for user retrieved successfully',\n        data: auditLogs,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve audit logs for user',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getAuditStats(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const stats = await this.auditService.getAuditStats();\n\n      res.status(200).json({\n        success: true,\n        message: 'Audit statistics retrieved successfully',\n        data: stats,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve audit statistics',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async cleanupOldLogs(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { daysToKeep = 90 } = req.body;\n\n      const deletedCount = await this.auditService.cleanupOldLogs(parseInt(daysToKeep));\n\n      res.status(200).json({\n        success: true,\n        message: 'Old audit logs cleaned up successfully',\n        data: { deletedCount },\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to cleanup old audit logs',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4244b42326f46f30e6b439957d3e9ee58405acef"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_nzoyqwop2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_nzoyqwop2();
cov_nzoyqwop2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_nzoyqwop2().s[1]++;
exports.AuditController = void 0;
const auditService_1 =
/* istanbul ignore next */
(cov_nzoyqwop2().s[2]++, require("../../services/audit/auditService"));
class AuditController {
  constructor() {
    /* istanbul ignore next */
    cov_nzoyqwop2().f[0]++;
    cov_nzoyqwop2().s[3]++;
    this.auditService = new auditService_1.AuditService();
  }
  async getAuditLogs(req, res) {
    /* istanbul ignore next */
    cov_nzoyqwop2().f[1]++;
    cov_nzoyqwop2().s[4]++;
    try {
      const {
        page =
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[0][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[1][0]++, 20),
        tableName,
        recordId,
        action,
        changedByUserId,
        startDate,
        endDate,
        search,
        sortBy =
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[2][0]++, 'changed_at'),
        sortOrder =
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[3][0]++, 'desc')
      } =
      /* istanbul ignore next */
      (cov_nzoyqwop2().s[5]++, req.query);
      const params =
      /* istanbul ignore next */
      (cov_nzoyqwop2().s[6]++, {
        page: parseInt(page),
        limit: parseInt(limit),
        tableName: tableName,
        recordId: recordId,
        action: action,
        changedByUserId: changedByUserId,
        startDate: startDate ?
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[4][0]++, new Date(startDate)) :
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[4][1]++, undefined),
        endDate: endDate ?
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[5][0]++, new Date(endDate)) :
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[5][1]++, undefined),
        search: search,
        sortBy: sortBy,
        sortOrder: sortOrder
      });
      const result =
      /* istanbul ignore next */
      (cov_nzoyqwop2().s[7]++, await this.auditService.getAuditLogs(params));
      /* istanbul ignore next */
      cov_nzoyqwop2().s[8]++;
      res.status(200).json({
        success: true,
        message: 'Audit logs retrieved successfully',
        data: result,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_nzoyqwop2().s[9]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve audit logs',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[6][0]++, error.message) :
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[6][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async getAuditLogById(req, res) {
    /* istanbul ignore next */
    cov_nzoyqwop2().f[2]++;
    cov_nzoyqwop2().s[10]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_nzoyqwop2().s[11]++, req.params);
      const auditLog =
      /* istanbul ignore next */
      (cov_nzoyqwop2().s[12]++, await this.auditService.getAuditLogById(id));
      /* istanbul ignore next */
      cov_nzoyqwop2().s[13]++;
      if (!auditLog) {
        /* istanbul ignore next */
        cov_nzoyqwop2().b[7][0]++;
        cov_nzoyqwop2().s[14]++;
        res.status(404).json({
          success: false,
          message: 'Audit log not found',
          timestamp: new Date().toISOString(),
          requestId: req.requestId
        });
        /* istanbul ignore next */
        cov_nzoyqwop2().s[15]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_nzoyqwop2().b[7][1]++;
      }
      cov_nzoyqwop2().s[16]++;
      res.status(200).json({
        success: true,
        message: 'Audit log retrieved successfully',
        data: auditLog,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_nzoyqwop2().s[17]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve audit log',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[8][0]++, error.message) :
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[8][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async getAuditLogsByRecord(req, res) {
    /* istanbul ignore next */
    cov_nzoyqwop2().f[3]++;
    cov_nzoyqwop2().s[18]++;
    try {
      const {
        tableName,
        recordId
      } =
      /* istanbul ignore next */
      (cov_nzoyqwop2().s[19]++, req.params);
      const auditLogs =
      /* istanbul ignore next */
      (cov_nzoyqwop2().s[20]++, await this.auditService.getAuditLogsByRecord(tableName, recordId));
      /* istanbul ignore next */
      cov_nzoyqwop2().s[21]++;
      res.status(200).json({
        success: true,
        message: 'Audit logs for record retrieved successfully',
        data: auditLogs,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_nzoyqwop2().s[22]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve audit logs for record',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[9][0]++, error.message) :
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[9][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async getAuditLogsByUser(req, res) {
    /* istanbul ignore next */
    cov_nzoyqwop2().f[4]++;
    cov_nzoyqwop2().s[23]++;
    try {
      const {
        userId
      } =
      /* istanbul ignore next */
      (cov_nzoyqwop2().s[24]++, req.params);
      const {
        limit =
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[10][0]++, 50)
      } =
      /* istanbul ignore next */
      (cov_nzoyqwop2().s[25]++, req.query);
      const auditLogs =
      /* istanbul ignore next */
      (cov_nzoyqwop2().s[26]++, await this.auditService.getAuditLogsByUser(userId, parseInt(limit)));
      /* istanbul ignore next */
      cov_nzoyqwop2().s[27]++;
      res.status(200).json({
        success: true,
        message: 'Audit logs for user retrieved successfully',
        data: auditLogs,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_nzoyqwop2().s[28]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve audit logs for user',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[11][0]++, error.message) :
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[11][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async getAuditStats(req, res) {
    /* istanbul ignore next */
    cov_nzoyqwop2().f[5]++;
    cov_nzoyqwop2().s[29]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_nzoyqwop2().s[30]++, await this.auditService.getAuditStats());
      /* istanbul ignore next */
      cov_nzoyqwop2().s[31]++;
      res.status(200).json({
        success: true,
        message: 'Audit statistics retrieved successfully',
        data: stats,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_nzoyqwop2().s[32]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve audit statistics',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[12][0]++, error.message) :
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[12][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  async cleanupOldLogs(req, res) {
    /* istanbul ignore next */
    cov_nzoyqwop2().f[6]++;
    cov_nzoyqwop2().s[33]++;
    try {
      const {
        daysToKeep =
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[13][0]++, 90)
      } =
      /* istanbul ignore next */
      (cov_nzoyqwop2().s[34]++, req.body);
      const deletedCount =
      /* istanbul ignore next */
      (cov_nzoyqwop2().s[35]++, await this.auditService.cleanupOldLogs(parseInt(daysToKeep)));
      /* istanbul ignore next */
      cov_nzoyqwop2().s[36]++;
      res.status(200).json({
        success: true,
        message: 'Old audit logs cleaned up successfully',
        data: {
          deletedCount
        },
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_nzoyqwop2().s[37]++;
      res.status(500).json({
        success: false,
        message: 'Failed to cleanup old audit logs',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[14][0]++, error.message) :
        /* istanbul ignore next */
        (cov_nzoyqwop2().b[14][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
}
/* istanbul ignore next */
cov_nzoyqwop2().s[38]++;
exports.AuditController = AuditController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,