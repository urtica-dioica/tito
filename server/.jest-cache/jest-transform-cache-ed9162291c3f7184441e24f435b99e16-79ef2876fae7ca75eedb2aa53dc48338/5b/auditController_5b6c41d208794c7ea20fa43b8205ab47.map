{"version":3,"names":["auditService_1","cov_nzoyqwop2","s","require","AuditController","constructor","f","auditService","AuditService","getAuditLogs","req","res","page","b","limit","tableName","recordId","action","changedByUserId","startDate","endDate","search","sortBy","sortOrder","query","params","parseInt","Date","undefined","result","status","json","success","message","data","timestamp","toISOString","requestId","error","Error","getAuditLogById","id","auditLog","getAuditLogsByRecord","auditLogs","getAuditLogsByUser","userId","getAuditStats","stats","cleanupOldLogs","daysToKeep","body","deletedCount","exports"],"sources":["/home/kim/tito/server/src/controllers/audit/auditController.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { AuditService } from '../../services/audit/auditService';\nimport { ApiResponse } from '../../utils/types/express';\n\nexport class AuditController {\n  private auditService: AuditService;\n\n  constructor() {\n    this.auditService = new AuditService();\n  }\n\n  async getAuditLogs(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const {\n        page = 1,\n        limit = 20,\n        tableName,\n        recordId,\n        action,\n        changedByUserId,\n        startDate,\n        endDate,\n        search,\n        sortBy = 'changed_at',\n        sortOrder = 'desc'\n      } = req.query;\n\n      const params = {\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        tableName: tableName as string,\n        recordId: recordId as string,\n        action: action as 'INSERT' | 'UPDATE' | 'DELETE',\n        changedByUserId: changedByUserId as string,\n        startDate: startDate ? new Date(startDate as string) : undefined,\n        endDate: endDate ? new Date(endDate as string) : undefined,\n        search: search as string,\n        sortBy: sortBy as string,\n        sortOrder: sortOrder as 'asc' | 'desc'\n      };\n\n      const result = await this.auditService.getAuditLogs(params);\n\n      res.status(200).json({\n        success: true,\n        message: 'Audit logs retrieved successfully',\n        data: result,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve audit logs',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getAuditLogById(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { id } = req.params;\n\n      const auditLog = await this.auditService.getAuditLogById(id);\n\n      if (!auditLog) {\n        res.status(404).json({\n          success: false,\n          message: 'Audit log not found',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Audit log retrieved successfully',\n        data: auditLog,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve audit log',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getAuditLogsByRecord(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { tableName, recordId } = req.params;\n\n      const auditLogs = await this.auditService.getAuditLogsByRecord(tableName, recordId);\n\n      res.status(200).json({\n        success: true,\n        message: 'Audit logs for record retrieved successfully',\n        data: auditLogs,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve audit logs for record',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getAuditLogsByUser(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { userId } = req.params;\n      const { limit = 50 } = req.query;\n\n      const auditLogs = await this.auditService.getAuditLogsByUser(\n        userId, \n        parseInt(limit as string)\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Audit logs for user retrieved successfully',\n        data: auditLogs,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve audit logs for user',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async getAuditStats(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const stats = await this.auditService.getAuditStats();\n\n      res.status(200).json({\n        success: true,\n        message: 'Audit statistics retrieved successfully',\n        data: stats,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve audit statistics',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  async cleanupOldLogs(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { daysToKeep = 90 } = req.body;\n\n      const deletedCount = await this.auditService.cleanupOldLogs(parseInt(daysToKeep));\n\n      res.status(200).json({\n        success: true,\n        message: 'Old audit logs cleaned up successfully',\n        data: { deletedCount },\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to cleanup old audit logs',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n}"],"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","ignoreList":[]}