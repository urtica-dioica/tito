{"version":3,"names":["cov_2gqibwdv11","actualCoverage","redisService_1","s","require","logger_1","__importDefault","createCacheMiddleware","config","f","req","res","next","b","condition","cacheKey","keyGenerator","method","path","Object","keys","query","length","queryString","JSON","stringify","Buffer","from","toString","substring","userSpecific","user","userId","departmentSpecific","departmentId","cachedResponse","redisService","getCache","set","ttlSeconds","json","originalJson","originalSend","send","data","setCache","catch","error","default","call","jsonData","parse","exports","createQueryCacheMiddleware","params","paramsString","cachedResult","createCacheInvalidationMiddleware","patterns","_req","forEach","pattern","clearCache","cacheConfigs","short","medium","long","department","auth","cacheUtils","invalidateUserCache","deleteUserCache","info","invalidateDepartmentCache","deleteDepartmentCache","invalidateSystemCache","getCacheStats","getKeys","memoryUsage","getMemoryUsage","totalKeys","used","peak"],"sources":["/home/kim/tito/server/src/middleware/redis/cacheMiddleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { redisService } from '../../services/redis/redisService';\nimport logger from '../../utils/logger';\n\nexport interface CacheConfig {\n  ttlSeconds: number;           // Time to live in seconds\n  keyGenerator?: (req: Request) => string; // Custom key generator\n  condition?: (req: Request, res: Response) => boolean; // When to cache\n  invalidateOn?: string[];      // Invalidate cache on specific methods\n  userSpecific?: boolean;       // Include user ID in cache key\n  departmentSpecific?: boolean; // Include department ID in cache key\n}\n\nexport interface CacheInfo {\n  cached: boolean;\n  key: string;\n  ttl: number;\n  timestamp: string;\n}\n\n/**\n * Redis-based response caching middleware\n */\nexport const createCacheMiddleware = (config: CacheConfig) => {\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // Check if we should cache this request\n      if (config.condition && !config.condition(req, res)) {\n        return next();\n      }\n\n      // Generate cache key\n      let cacheKey = config.keyGenerator ? \n        config.keyGenerator(req) : \n        `cache:${req.method}:${req.path}`;\n\n      // Add query parameters to cache key\n      if (Object.keys(req.query).length > 0) {\n        const queryString = JSON.stringify(req.query);\n        cacheKey += `:${Buffer.from(queryString).toString('base64').substring(0, 16)}`;\n      }\n\n      // Add user-specific prefix if enabled\n      if (config.userSpecific && (req as any).user?.userId) {\n        cacheKey = `user:${(req as any).user.userId}:${cacheKey}`;\n      }\n\n      // Add department-specific prefix if enabled\n      if (config.departmentSpecific && (req as any).user?.departmentId) {\n        cacheKey = `dept:${(req as any).user.departmentId}:${cacheKey}`;\n      }\n\n      // Try to get cached response\n      const cachedResponse = await redisService.getCache<any>(cacheKey);\n      \n      if (cachedResponse) {\n        // Return cached response\n        res.set({\n          'X-Cache': 'HIT',\n          'X-Cache-Key': cacheKey,\n          'X-Cache-TTL': config.ttlSeconds.toString()\n        });\n\n        res.json(cachedResponse);\n        return;\n      }\n\n      // No cache hit, intercept response to cache it\n      const originalJson = res.json;\n      const originalSend = res.send;\n\n      res.json = function(data: any) {\n        // Cache the response\n        redisService.setCache(cacheKey, data, config.ttlSeconds).catch(error => {\n          logger.error('Failed to cache response:', error);\n        });\n\n        // Set cache headers\n        res.set({\n          'X-Cache': 'MISS',\n          'X-Cache-Key': cacheKey,\n          'X-Cache-TTL': config.ttlSeconds.toString()\n        });\n\n        // Call original method\n        return originalJson.call(this, data);\n      };\n\n      res.send = function(data: any) {\n        // Try to parse as JSON for caching\n        try {\n          const jsonData = typeof data === 'string' ? JSON.parse(data) : data;\n          redisService.setCache(cacheKey, jsonData, config.ttlSeconds).catch(error => {\n            logger.error('Failed to cache response:', error);\n          });\n        } catch (error) {\n          // Not JSON, skip caching\n        }\n\n        // Set cache headers\n        res.set({\n          'X-Cache': 'MISS',\n          'X-Cache-Key': cacheKey,\n          'X-Cache-TTL': config.ttlSeconds.toString()\n        });\n\n        // Call original method\n        return originalSend.call(this, data);\n      };\n\n      next();\n    } catch (error) {\n      logger.error('Cache middleware error:', error);\n      // On error, continue without caching\n      next();\n    }\n  };\n};\n\n/**\n * Database query caching middleware\n */\nexport const createQueryCacheMiddleware = (config: CacheConfig) => {\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // Generate cache key for database queries\n      let cacheKey = `query:${req.path}`;\n      \n      if (Object.keys(req.query).length > 0) {\n        const queryString = JSON.stringify(req.query);\n        cacheKey += `:${Buffer.from(queryString).toString('base64').substring(0, 16)}`;\n      }\n\n      if (Object.keys(req.params).length > 0) {\n        const paramsString = JSON.stringify(req.params);\n        cacheKey += `:${Buffer.from(paramsString).toString('base64').substring(0, 16)}`;\n      }\n\n      // Add user-specific prefix if enabled\n      if (config.userSpecific && (req as any).user?.userId) {\n        cacheKey = `user:${(req as any).user.userId}:${cacheKey}`;\n      }\n\n      // Add department-specific prefix if enabled\n      if (config.departmentSpecific && (req as any).user?.departmentId) {\n        cacheKey = `dept:${(req as any).user.departmentId}:${cacheKey}`;\n      }\n\n      // Try to get cached query result\n      const cachedResult = await redisService.getCache<any>(cacheKey);\n      \n      if (cachedResult) {\n        res.set({\n          'X-Query-Cache': 'HIT',\n          'X-Query-Cache-Key': cacheKey,\n          'X-Query-Cache-TTL': config.ttlSeconds.toString()\n        });\n\n        res.json(cachedResult);\n        return;\n      }\n\n      // No cache hit, continue to next middleware\n      res.set({\n        'X-Query-Cache': 'MISS',\n        'X-Query-Cache-Key': cacheKey,\n        'X-Query-Cache-TTL': config.ttlSeconds.toString()\n      });\n\n      next();\n    } catch (error) {\n      logger.error('Query cache middleware error:', error);\n      next();\n    }\n  };\n};\n\n/**\n * Cache invalidation middleware\n */\nexport const createCacheInvalidationMiddleware = (patterns: string[]) => {\n  return async (_req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // Invalidate cache patterns after successful operations\n      const originalJson = res.json;\n      const originalSend = res.send;\n\n      res.json = function(data: any) {\n        // Invalidate cache patterns\n        patterns.forEach(pattern => {\n          redisService.clearCache(pattern).catch(error => {\n            logger.error(`Failed to invalidate cache pattern ${pattern}:`, error);\n          });\n        });\n\n        // Call original method\n        return originalJson.call(this, data);\n      };\n\n      res.send = function(data: any) {\n        // Invalidate cache patterns\n        patterns.forEach(pattern => {\n          redisService.clearCache(pattern).catch(error => {\n            logger.error(`Failed to invalidate cache pattern ${pattern}:`, error);\n          });\n        });\n\n        // Call original method\n        return originalSend.call(this, data);\n      };\n\n      next();\n    } catch (error) {\n      logger.error('Cache invalidation middleware error:', error);\n      next();\n    }\n  };\n};\n\n/**\n * Predefined cache configurations\n */\nexport const cacheConfigs = {\n  // Short-term cache for frequently accessed data\n  short: {\n    ttlSeconds: 300, // 5 minutes\n    userSpecific: false,\n    departmentSpecific: false\n  },\n\n  // Medium-term cache for moderately changing data\n  medium: {\n    ttlSeconds: 3600, // 1 hour\n    userSpecific: false,\n    departmentSpecific: false\n  },\n\n  // Long-term cache for rarely changing data\n  long: {\n    ttlSeconds: 86400, // 24 hours\n    userSpecific: false,\n    departmentSpecific: false\n  },\n\n  // User-specific cache\n  user: {\n    ttlSeconds: 1800, // 30 minutes\n    userSpecific: true,\n    departmentSpecific: false\n  },\n\n  // Department-specific cache\n  department: {\n    ttlSeconds: 3600, // 1 hour\n    userSpecific: false,\n    departmentSpecific: true\n  },\n\n  // Authentication cache (very short)\n  auth: {\n    ttlSeconds: 60, // 1 minute\n    userSpecific: true,\n    departmentSpecific: false\n  }\n};\n\n/**\n * Cache utility functions\n */\nexport const cacheUtils = {\n  /**\n   * Invalidate all user-specific cache\n   */\n  invalidateUserCache: async (userId: string): Promise<void> => {\n    try {\n      await redisService.deleteUserCache(userId);\n      logger.info(`Invalidated all cache for user ${userId}`);\n    } catch (error) {\n      logger.error(`Failed to invalidate user cache for ${userId}:`, error);\n    }\n  },\n\n  /**\n   * Invalidate all department-specific cache\n   */\n  invalidateDepartmentCache: async (departmentId: string): Promise<void> => {\n    try {\n      await redisService.deleteDepartmentCache(departmentId);\n      logger.info(`Invalidated all cache for department ${departmentId}`);\n    } catch (error) {\n      logger.error(`Failed to invalidate department cache for ${departmentId}:`, error);\n    }\n  },\n\n  /**\n   * Invalidate system-wide cache\n   */\n  invalidateSystemCache: async (): Promise<void> => {\n    try {\n      await redisService.clearCache('system:*');\n      logger.info('Invalidated all system cache');\n    } catch (error) {\n      logger.error('Failed to invalidate system cache:', error);\n    }\n  },\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats: async (): Promise<{ totalKeys: number; memoryUsage: { used: number; peak: number } }> => {\n    try {\n      const keys = await redisService.getKeys('*');\n      const memoryUsage = await redisService.getMemoryUsage();\n      \n      return {\n        totalKeys: keys.length,\n        memoryUsage\n      };\n    } catch (error) {\n      logger.error('Failed to get cache stats:', error);\n      return { totalKeys: 0, memoryUsage: { used: 0, peak: 0 } };\n    }\n  }\n}; "],"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","ignoreList":[]}