{"file":"/home/kim/tito/server/tests/unit/services/payrollService.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/unit/services/payrollService.test.ts"],"sourcesContent":["import { payrollService } from '../../../src/services/payroll/payrollService';\nimport { TestHelpers } from '../../utils/testHelpers';\nimport { initializeTestConnections } from '../../setup';\n\ndescribe('PayrollService', () => {\n  let testHelpers: TestHelpers;\n  let createdUserIds: string[] = [];\n  let createdEmployeeIds: string[] = [];\n  let createdDepartmentIds: string[] = [];\n\n  beforeAll(async () => {\n    const { testDbPool } = await initializeTestConnections();\n    testHelpers = new TestHelpers(testDbPool);\n  });\n\n  afterEach(async () => {\n    // Clean up created data after each test\n    for (const employeeId of createdEmployeeIds) {\n      try {\n        await testHelpers.deleteEmployee(employeeId);\n      } catch (error) {\n        // Ignore cleanup errors\n      }\n    }\n    for (const userId of createdUserIds) {\n      try {\n        await testHelpers.deleteUser(userId);\n      } catch (error) {\n        // Ignore cleanup errors\n      }\n    }\n    for (const departmentId of createdDepartmentIds) {\n      try {\n        await testHelpers.deleteDepartment(departmentId);\n      } catch (error) {\n        // Ignore cleanup errors\n      }\n    }\n    createdUserIds = [];\n    createdEmployeeIds = [];\n    createdDepartmentIds = [];\n  });\n\n  describe('getPayrollPeriods', () => {\n    it('should get payroll periods', async () => {\n      // Act\n      const result = await payrollService.getPayrollPeriods();\n\n      // Assert\n      expect(result).toHaveProperty('periods');\n      expect(result).toHaveProperty('total');\n      expect(Array.isArray(result.periods)).toBe(true);\n      expect(typeof result.total).toBe('number');\n    });\n  });\n\n  describe('getPayrollPeriod', () => {\n    it('should return null for non-existent period', async () => {\n      // Act\n      const result = await payrollService.getPayrollPeriod('non-existent-id');\n\n      // Assert\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getPayrollRecords', () => {\n    it('should get payroll records', async () => {\n      // Act\n      const result = await payrollService.getPayrollRecords();\n\n      // Assert\n      expect(result).toHaveProperty('records');\n      expect(result).toHaveProperty('total');\n      expect(Array.isArray(result.records)).toBe(true);\n      expect(typeof result.total).toBe('number');\n    });\n  });\n\n  describe('getPayrollRecord', () => {\n    it('should return null for non-existent record', async () => {\n      // Act\n      const result = await payrollService.getPayrollRecord('non-existent-id');\n\n      // Assert\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getDeductionTypes', () => {\n    it('should get deduction types', async () => {\n      // Act\n      const result = await payrollService.getDeductionTypes();\n\n      // Assert\n      expect(result).toHaveProperty('records');\n      expect(result).toHaveProperty('total');\n      expect(Array.isArray(result.records)).toBe(true);\n      expect(typeof result.total).toBe('number');\n    });\n  });\n\n  describe('getBenefitTypes', () => {\n    it('should get benefit types', async () => {\n      // Act\n      const result = await payrollService.getBenefitTypes();\n\n      // Assert\n      expect(result).toHaveProperty('records');\n      expect(result).toHaveProperty('total');\n      expect(Array.isArray(result.records)).toBe(true);\n      expect(typeof result.total).toBe('number');\n    });\n  });\n\n  describe('getEmployeeDeductionBalances', () => {\n    it('should get employee deduction balances', async () => {\n      // Act\n      const result = await payrollService.getEmployeeDeductionBalances();\n\n      // Assert\n      expect(result).toHaveProperty('records');\n      expect(result).toHaveProperty('total');\n      expect(Array.isArray(result.records)).toBe(true);\n      expect(typeof result.total).toBe('number');\n    });\n  });\n\n  describe('getEmployeeBenefits', () => {\n    it('should get employee benefits', async () => {\n      // Act\n      const result = await payrollService.getEmployeeBenefits();\n\n      // Assert\n      expect(result).toHaveProperty('records');\n      expect(result).toHaveProperty('total');\n      expect(Array.isArray(result.records)).toBe(true);\n      expect(typeof result.total).toBe('number');\n    });\n  });\n\n  describe('getPayrollStats', () => {\n    it('should get payroll statistics', async () => {\n      // Act\n      const result = await payrollService.getPayrollStats();\n\n      // Assert\n      expect(result).toHaveProperty('totalEmployees');\n      expect(result).toHaveProperty('totalPayroll');\n      expect(result).toHaveProperty('processedPeriods');\n      expect(result).toHaveProperty('pendingPeriods');\n      expect(typeof result.totalEmployees).toBe('number');\n      expect(typeof result.totalPayroll).toBe('number');\n      expect(typeof result.processedPeriods).toBe('number');\n      expect(typeof result.pendingPeriods).toBe('number');\n    });\n  });\n});"],"version":3}