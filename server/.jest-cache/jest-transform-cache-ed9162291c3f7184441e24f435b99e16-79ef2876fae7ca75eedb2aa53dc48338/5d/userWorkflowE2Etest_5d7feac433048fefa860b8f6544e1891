1a5ffcf86329e0ecd641ddb20374feef
"use strict";
/**
 * User Workflow End-to-End Tests
 *
 * Comprehensive testing of complete user workflows across all user roles
 * including HR, Department Head, Employee, and Kiosk workflows
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock axios for testing
const axios = {
    create: () => ({
        get: jest.fn(),
        post: jest.fn(),
        put: jest.fn(),
        delete: jest.fn(),
        patch: jest.fn(),
        interceptors: {
            request: { use: jest.fn() },
            response: { use: jest.fn() }
        }
    })
};
describe('User Workflow End-to-End Tests', () => {
    // let e2eSuite: E2ETestSuite;
    let config;
    beforeAll(() => {
        config = {
            baseURL: process.env.TEST_BASE_URL || 'http://localhost:3000',
            timeout: 30000,
            maxRetries: 3,
            testUsers: {
                hr: {
                    username: 'hr1',
                    password: 'HR123!',
                    role: 'hr'
                },
                departmentHead: {
                    username: 'depthead1',
                    password: 'DeptHead123!',
                    role: 'department_head'
                },
                employee: {
                    username: 'employee1',
                    password: 'Employee123!',
                    role: 'employee'
                }
            },
            testData: {
                department: {
                    name: 'Test Department E2E',
                    description: 'Test department for E2E testing'
                },
                employee: {
                    name: 'Test Employee E2E',
                    email: 'testemployee@example.com',
                    position: 'Test Position'
                },
                payroll: {
                    period: '2024-01',
                    amount: 50000
                }
            }
        };
        // e2eSuite = new E2ETestSuite(config);
    });
    describe('HR User Workflow', () => {
        it('should complete full HR user workflow', async () => {
            const startTime = Date.now();
            let hrToken;
            let departmentId;
            let employeeId;
            let payrollId;
            try {
                // Step 1: HR Login
                console.log('🔐 Step 1: HR Login');
                const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                    username: config.testUsers.hr.username,
                    password: config.testUsers.hr.password
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(loginResponse.status).toBe(200);
                expect(loginResponse.data.token).toBeDefined();
                hrToken = loginResponse.data.token;
                console.log('✅ HR login successful');
                // Step 2: Access HR Dashboard
                console.log('📊 Step 2: Access HR Dashboard');
                const dashboardResponse = await axios.create().get(`${config.baseURL}/api/v1/hr/dashboard`, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(dashboardResponse.status).toBe(200);
                console.log('✅ HR dashboard accessed successfully');
                // Step 3: Create Department
                console.log('🏢 Step 3: Create Department');
                const departmentResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/departments`, {
                    name: config.testData.department.name,
                    description: config.testData.department.description
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(departmentResponse.status).toBe(201);
                expect(departmentResponse.data.id).toBeDefined();
                departmentId = departmentResponse.data.id;
                console.log('✅ Department created successfully');
                // Step 4: Create Employee
                console.log('👤 Step 4: Create Employee');
                const employeeResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/employees`, {
                    name: config.testData.employee.name,
                    email: config.testData.employee.email,
                    position: config.testData.employee.position,
                    department_id: departmentId
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(employeeResponse.status).toBe(201);
                expect(employeeResponse.data.id).toBeDefined();
                employeeId = employeeResponse.data.id;
                console.log('✅ Employee created successfully');
                // Step 5: Generate Payroll
                console.log('💰 Step 5: Generate Payroll');
                const payrollResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/payroll/generate`, {
                    period: config.testData.payroll.period,
                    employee_ids: [employeeId]
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(payrollResponse.status).toBe(201);
                expect(payrollResponse.data.id).toBeDefined();
                payrollId = payrollResponse.data.id;
                console.log('✅ Payroll generated successfully');
                // Step 6: View Payroll Report
                console.log('📊 Step 6: View Payroll Report');
                const reportResponse = await axios.create().get(`${config.baseURL}/api/v1/hr/payroll/${payrollId}`, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(reportResponse.status).toBe(200);
                console.log('✅ Payroll report viewed successfully');
                const endTime = Date.now();
                const duration = endTime - startTime;
                console.log(`🎉 HR workflow completed successfully in ${duration}ms`);
            }
            catch (error) {
                console.error('❌ HR workflow failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 60000);
        it('should handle HR workflow error scenarios', async () => {
            let hrToken;
            try {
                // Login as HR
                const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                    username: config.testUsers.hr.username,
                    password: config.testUsers.hr.password
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(loginResponse.status).toBe(200);
                hrToken = loginResponse.data.token;
                // Try to create department with invalid data
                const invalidDeptResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/departments`, {
                    name: '', // Invalid empty name
                    description: 'Test description'
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(invalidDeptResponse.status).toBe(400);
                console.log('✅ Invalid department creation properly rejected');
                // Try to create employee with invalid email
                const invalidEmpResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/employees`, {
                    name: 'Test Employee',
                    email: 'invalid-email', // Invalid email format
                    position: 'Test Position',
                    department_id: 1
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(invalidEmpResponse.status).toBe(400);
                console.log('✅ Invalid employee creation properly rejected');
            }
            catch (error) {
                console.error('❌ HR error scenario test failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 30000);
    });
    describe('Department Head User Workflow', () => {
        it('should complete full Department Head user workflow', async () => {
            const startTime = Date.now();
            let deptHeadToken;
            try {
                // Step 1: Department Head Login
                console.log('🔐 Step 1: Department Head Login');
                const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                    username: config.testUsers.departmentHead.username,
                    password: config.testUsers.departmentHead.password
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(loginResponse.status).toBe(200);
                expect(loginResponse.data.token).toBeDefined();
                deptHeadToken = loginResponse.data.token;
                console.log('✅ Department Head login successful');
                // Step 2: View Department Dashboard
                console.log('📊 Step 2: View Department Dashboard');
                const dashboardResponse = await axios.create().get(`${config.baseURL}/api/v1/department-head/dashboard`, {
                    headers: { 'Authorization': `Bearer ${deptHeadToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(dashboardResponse.status).toBe(200);
                console.log('✅ Department dashboard accessed successfully');
                // Step 3: View Department Employees
                console.log('👥 Step 3: View Department Employees');
                const employeesResponse = await axios.create().get(`${config.baseURL}/api/v1/department-head/employees`, {
                    headers: { 'Authorization': `Bearer ${deptHeadToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(employeesResponse.status).toBe(200);
                expect(Array.isArray(employeesResponse.data)).toBe(true);
                console.log('✅ Department employees viewed successfully');
                // Step 4: View Pending Leave Requests
                console.log('📋 Step 4: View Pending Leave Requests');
                const leavesResponse = await axios.create().get(`${config.baseURL}/api/v1/department-head/leaves/pending`, {
                    headers: { 'Authorization': `Bearer ${deptHeadToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(leavesResponse.status).toBe(200);
                expect(Array.isArray(leavesResponse.data)).toBe(true);
                console.log('✅ Pending leave requests viewed successfully');
                // Step 5: Approve Leave Request (if any exist)
                if (leavesResponse.data.length > 0) {
                    console.log('✅ Step 5: Approve Leave Request');
                    const approveResponse = await axios.create().put(`${config.baseURL}/api/v1/department-head/leaves/${leavesResponse.data[0].id}/approve`, {}, {
                        headers: { 'Authorization': `Bearer ${deptHeadToken}` },
                        timeout: 10000,
                        validateStatus: () => true
                    });
                    expect(approveResponse.status).toBe(200);
                    console.log('✅ Leave request approved successfully');
                }
                else {
                    console.log('ℹ️ No leave requests to approve');
                }
                // Step 6: View Department Attendance Summary
                console.log('📊 Step 6: View Department Attendance Summary');
                const attendanceResponse = await axios.create().get(`${config.baseURL}/api/v1/department-head/attendance/summary`, {
                    headers: { 'Authorization': `Bearer ${deptHeadToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(attendanceResponse.status).toBe(200);
                console.log('✅ Department attendance summary viewed successfully');
                const endTime = Date.now();
                const duration = endTime - startTime;
                console.log(`🎉 Department Head workflow completed successfully in ${duration}ms`);
            }
            catch (error) {
                console.error('❌ Department Head workflow failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 60000);
        it('should handle Department Head workflow error scenarios', async () => {
            let deptHeadToken;
            try {
                // Login as Department Head
                const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                    username: config.testUsers.departmentHead.username,
                    password: config.testUsers.departmentHead.password
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(loginResponse.status).toBe(200);
                deptHeadToken = loginResponse.data.token;
                // Try to access HR-only endpoint
                const hrAccessResponse = await axios.create().get(`${config.baseURL}/api/v1/hr/employees`, {
                    headers: { 'Authorization': `Bearer ${deptHeadToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(hrAccessResponse.status).toBe(403);
                console.log('✅ HR endpoint access properly denied to Department Head');
                // Try to approve non-existent leave request
                const invalidLeaveResponse = await axios.create().put(`${config.baseURL}/api/v1/department-head/leaves/99999/approve`, {}, {
                    headers: { 'Authorization': `Bearer ${deptHeadToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect([404, 400]).toContain(invalidLeaveResponse.status);
                console.log('✅ Invalid leave approval properly rejected');
            }
            catch (error) {
                console.error('❌ Department Head error scenario test failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 30000);
    });
    describe('Employee User Workflow', () => {
        it('should complete full Employee user workflow', async () => {
            const startTime = Date.now();
            let employeeToken;
            // let leaveId: string;
            try {
                // Step 1: Employee Login
                console.log('🔐 Step 1: Employee Login');
                const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                    username: config.testUsers.employee.username,
                    password: config.testUsers.employee.password
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(loginResponse.status).toBe(200);
                expect(loginResponse.data.token).toBeDefined();
                employeeToken = loginResponse.data.token;
                console.log('✅ Employee login successful');
                // Step 2: View Employee Profile
                console.log('👤 Step 2: View Employee Profile');
                const profileResponse = await axios.create().get(`${config.baseURL}/api/v1/employee/profile`, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(profileResponse.status).toBe(200);
                expect(profileResponse.data).toBeDefined();
                console.log('✅ Employee profile viewed successfully');
                // Step 3: View Attendance History
                console.log('⏰ Step 3: View Attendance History');
                const attendanceResponse = await axios.create().get(`${config.baseURL}/api/v1/employee/attendance`, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(attendanceResponse.status).toBe(200);
                expect(Array.isArray(attendanceResponse.data)).toBe(true);
                console.log('✅ Attendance history viewed successfully');
                // Step 4: Submit Leave Request
                console.log('📋 Step 4: Submit Leave Request');
                const leaveResponse = await axios.create().post(`${config.baseURL}/api/v1/employee/leaves`, {
                    type: 'vacation',
                    start_date: '2024-02-01',
                    end_date: '2024-02-05',
                    reason: 'Family vacation'
                }, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(leaveResponse.status).toBe(201);
                expect(leaveResponse.data.id).toBeDefined();
                // leaveId = leaveResponse.data.id;
                console.log('✅ Leave request submitted successfully');
                // Step 5: View Leave Balance
                console.log('📊 Step 5: View Leave Balance');
                const balanceResponse = await axios.create().get(`${config.baseURL}/api/v1/employee/leave-balance`, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(balanceResponse.status).toBe(200);
                expect(balanceResponse.data).toBeDefined();
                console.log('✅ Leave balance viewed successfully');
                // Step 6: View Paystubs
                console.log('💰 Step 6: View Paystubs');
                const paystubsResponse = await axios.create().get(`${config.baseURL}/api/v1/employee/paystubs`, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(paystubsResponse.status).toBe(200);
                expect(Array.isArray(paystubsResponse.data)).toBe(true);
                console.log('✅ Paystubs viewed successfully');
                // Step 7: View ID Card
                console.log('🆔 Step 7: View ID Card');
                const idCardResponse = await axios.create().get(`${config.baseURL}/api/v1/employee/id-card`, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(idCardResponse.status).toBe(200);
                console.log('✅ ID card viewed successfully');
                const endTime = Date.now();
                const duration = endTime - startTime;
                console.log(`🎉 Employee workflow completed successfully in ${duration}ms`);
            }
            catch (error) {
                console.error('❌ Employee workflow failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 60000);
        it('should handle Employee workflow error scenarios', async () => {
            let employeeToken;
            try {
                // Login as Employee
                const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                    username: config.testUsers.employee.username,
                    password: config.testUsers.employee.password
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(loginResponse.status).toBe(200);
                employeeToken = loginResponse.data.token;
                // Try to access HR-only endpoint
                const hrAccessResponse = await axios.create().get(`${config.baseURL}/api/v1/hr/employees`, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(hrAccessResponse.status).toBe(403);
                console.log('✅ HR endpoint access properly denied to Employee');
                // Try to submit leave request with invalid dates
                const invalidLeaveResponse = await axios.create().post(`${config.baseURL}/api/v1/employee/leaves`, {
                    type: 'vacation',
                    start_date: '2024-02-05', // End date before start date
                    end_date: '2024-02-01',
                    reason: 'Invalid date range'
                }, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(invalidLeaveResponse.status).toBe(400);
                console.log('✅ Invalid leave request properly rejected');
            }
            catch (error) {
                console.error('❌ Employee error scenario test failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 30000);
    });
    describe('Kiosk User Workflow', () => {
        it('should complete full Kiosk user workflow', async () => {
            const startTime = Date.now();
            try {
                // Step 1: Scan QR Code
                console.log('📱 Step 1: Scan QR Code');
                const scanResponse = await axios.create().post(`${config.baseURL}/api/v1/kiosk/scan`, {
                    qr_code: 'test-qr-code-123'
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(scanResponse.status).toBe(200);
                expect(scanResponse.data.employee).toBeDefined();
                console.log('✅ QR code scanned successfully');
                // Step 2: Clock In
                console.log('⏰ Step 2: Clock In');
                const clockInResponse = await axios.create().post(`${config.baseURL}/api/v1/kiosk/clock-in`, {
                    employee_id: 1,
                    selfie_image: 'base64-encoded-image-data'
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(clockInResponse.status).toBe(200);
                expect(clockInResponse.data.attendance).toBeDefined();
                console.log('✅ Clock in successful');
                // Step 3: Clock Out
                console.log('⏰ Step 3: Clock Out');
                const clockOutResponse = await axios.create().post(`${config.baseURL}/api/v1/kiosk/clock-out`, {
                    employee_id: 1,
                    selfie_image: 'base64-encoded-image-data'
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(clockOutResponse.status).toBe(200);
                expect(clockOutResponse.data.attendance).toBeDefined();
                console.log('✅ Clock out successful');
                // Step 4: View Attendance Summary
                console.log('📊 Step 4: View Attendance Summary');
                const summaryResponse = await axios.create().get(`${config.baseURL}/api/v1/kiosk/attendance-summary/1`, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(summaryResponse.status).toBe(200);
                expect(summaryResponse.data).toBeDefined();
                console.log('✅ Attendance summary viewed successfully');
                const endTime = Date.now();
                const duration = endTime - startTime;
                console.log(`🎉 Kiosk workflow completed successfully in ${duration}ms`);
            }
            catch (error) {
                console.error('❌ Kiosk workflow failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 60000);
        it('should handle Kiosk workflow error scenarios', async () => {
            try {
                // Try to scan invalid QR code
                const invalidScanResponse = await axios.create().post(`${config.baseURL}/api/v1/kiosk/scan`, {
                    qr_code: 'invalid-qr-code'
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect([400, 404]).toContain(invalidScanResponse.status);
                console.log('✅ Invalid QR code properly rejected');
                // Try to clock in without scanning QR code first
                const clockInWithoutScanResponse = await axios.create().post(`${config.baseURL}/api/v1/kiosk/clock-in`, {
                    employee_id: 99999, // Non-existent employee
                    selfie_image: 'base64-encoded-image-data'
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect([400, 404]).toContain(clockInWithoutScanResponse.status);
                console.log('✅ Clock in without valid employee properly rejected');
            }
            catch (error) {
                console.error('❌ Kiosk error scenario test failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 30000);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,