f2e7f6e7081e022ad3f37a35296c01ad
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const loadTestUtils_1 = require("./loadTestUtils");
const database_1 = require("../../src/config/database");
describe('Database Performance Tests', () => {
    let dbPerformanceTest;
    let pool;
    beforeAll(async () => {
        pool = (0, database_1.getPool)();
        dbPerformanceTest = new loadTestUtils_1.DatabasePerformanceTest(pool);
    });
    afterAll(async () => {
        if (pool && typeof pool.end === 'function') {
            await pool.end();
        }
    });
    describe('User Queries Performance', () => {
        it('should perform well on user authentication queries', async () => {
            const query = `
        SELECT id, email, first_name, last_name, role, is_active, created_at
        FROM users 
        WHERE email = $1 AND is_active = true
      `;
            const params = ['test@example.com'];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 100);
            console.log('\nðŸ“Š User Authentication Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            console.log(`Total Time: ${result.totalTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(50); // Less than 50ms average
            expect(result.maxTime).toBeLessThan(200); // Less than 200ms max
        }, 30000);
        it('should perform well on concurrent user authentication queries', async () => {
            const query = `
        SELECT id, email, first_name, last_name, role, is_active, created_at
        FROM users 
        WHERE email = $1 AND is_active = true
      `;
            const params = ['test@example.com'];
            const result = await dbPerformanceTest.testConcurrentQueryPerformance(query, params, 20, // 20 concurrent queries
            10 // 10 iterations
            );
            console.log('\nðŸ“Š Concurrent User Authentication Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            console.log(`Queries Per Second: ${result.queriesPerSecond.toFixed(2)}`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(100); // Less than 100ms average
            expect(result.queriesPerSecond).toBeGreaterThan(50); // At least 50 QPS
        }, 30000);
    });
    describe('Employee Queries Performance', () => {
        it('should perform well on employee listing queries', async () => {
            const query = `
        SELECT 
          e.id,
          e.employee_id,
          e.position,
          e.employment_type,
          e.hire_date,
          e.base_salary,
          e.status,
          u.first_name,
          u.last_name,
          u.email,
          d.name as department_name
        FROM employees e
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        WHERE e.status = 'active'
        ORDER BY u.last_name, u.first_name
        LIMIT $1 OFFSET $2
      `;
            const params = [20, 0];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 50);
            console.log('\nðŸ“Š Employee Listing Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(100); // Less than 100ms average
            expect(result.maxTime).toBeLessThan(300); // Less than 300ms max
        }, 30000);
        it('should perform well on employee search queries', async () => {
            const query = `
        SELECT 
          e.id,
          e.employee_id,
          e.position,
          u.first_name,
          u.last_name,
          u.email,
          d.name as department_name
        FROM employees e
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        WHERE 
          (u.first_name ILIKE $1 OR u.last_name ILIKE $1 OR u.email ILIKE $1)
          AND e.status = 'active'
        ORDER BY u.last_name, u.first_name
        LIMIT $2
      `;
            const params = ['%test%', 10];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 30);
            console.log('\nðŸ“Š Employee Search Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(150); // Less than 150ms average
            expect(result.maxTime).toBeLessThan(500); // Less than 500ms max
        }, 30000);
    });
    describe('Attendance Queries Performance', () => {
        it('should perform well on attendance record queries', async () => {
            const query = `
        SELECT 
          ar.id,
          ar.employee_id,
          ar.date,
          ar.total_hours,
          ar.status,
          u.first_name,
          u.last_name,
          e.employee_id as employee_code
        FROM attendance_records ar
        JOIN employees e ON ar.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        WHERE ar.date BETWEEN $1 AND $2
        ORDER BY ar.date DESC, u.last_name
        LIMIT $3
      `;
            const params = ['2024-01-01', '2024-01-31', 50];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 40);
            console.log('\nðŸ“Š Attendance Record Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(200); // Less than 200ms average
            expect(result.maxTime).toBeLessThan(600); // Less than 600ms max
        }, 30000);
        it('should perform well on attendance statistics queries', async () => {
            const query = `
        SELECT 
          COUNT(*) as total_employees,
          COUNT(CASE WHEN ar.status = 'present' THEN 1 END) as present_today,
          COUNT(CASE WHEN ar.status = 'absent' THEN 1 END) as absent_today,
          COUNT(CASE WHEN ar.status = 'late' THEN 1 END) as late_today,
          COALESCE(SUM(ar.total_hours), 0) as total_hours_today,
          COALESCE(AVG(ar.total_hours), 0) as average_hours_per_employee
        FROM employees e
        LEFT JOIN attendance_records ar ON e.id = ar.employee_id 
          AND ar.date = CURRENT_DATE
        WHERE e.status = 'active'
      `;
            const result = await dbPerformanceTest.testQueryPerformance(query, [], 30);
            console.log('\nðŸ“Š Attendance Statistics Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(150); // Less than 150ms average
            expect(result.maxTime).toBeLessThan(400); // Less than 400ms max
        }, 30000);
    });
    describe('Payroll Queries Performance', () => {
        it('should perform well on payroll record queries', async () => {
            const query = `
        SELECT 
          pr.id,
          pr.employee_id,
          pr.payroll_period_id,
          pr.base_salary,
          pr.total_worked_hours,
          pr.gross_pay,
          pr.total_deductions,
          pr.net_pay,
          pr.status,
          u.first_name,
          u.last_name,
          e.employee_id as employee_code,
          pp.period_name
        FROM payroll_records pr
        JOIN employees e ON pr.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        JOIN payroll_periods pp ON pr.payroll_period_id = pp.id
        WHERE pp.id = $1
        ORDER BY u.last_name, u.first_name
        LIMIT $2 OFFSET $3
      `;
            const params = ['test-period-id', 25, 0];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 30);
            console.log('\nðŸ“Š Payroll Record Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(250); // Less than 250ms average
            expect(result.maxTime).toBeLessThan(800); // Less than 800ms max
        }, 30000);
        it('should perform well on payroll summary queries', async () => {
            const query = `
        SELECT 
          COUNT(*) as total_employees,
          COALESCE(SUM(pr.gross_pay), 0) as total_gross_pay,
          COALESCE(SUM(pr.total_deductions), 0) as total_deductions,
          COALESCE(SUM(pr.net_pay), 0) as total_net_pay,
          COALESCE(AVG(pr.gross_pay), 0) as average_salary,
          COUNT(CASE WHEN pr.status = 'processed' THEN 1 END) as processed_records,
          COUNT(CASE WHEN pr.status = 'pending' THEN 1 END) as pending_records
        FROM payroll_records pr
        JOIN payroll_periods pp ON pr.payroll_period_id = pp.id
        WHERE pp.id = $1
      `;
            const params = ['test-period-id'];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 25);
            console.log('\nðŸ“Š Payroll Summary Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(200); // Less than 200ms average
            expect(result.maxTime).toBeLessThan(600); // Less than 600ms max
        }, 30000);
    });
    describe('Department Queries Performance', () => {
        it('should perform well on department statistics queries', async () => {
            const query = `
        SELECT 
          COUNT(*) as total,
          COUNT(*) FILTER (WHERE d.is_active = true) as active,
          COUNT(*) FILTER (WHERE d.department_head_user_id IS NOT NULL) as with_heads,
          COUNT(*) FILTER (WHERE d.department_head_user_id IS NULL) as without_heads,
          COUNT(e.id) as total_employees
        FROM departments d
        LEFT JOIN employees e ON d.id = e.department_id
        WHERE d.is_active = true
      `;
            const result = await dbPerformanceTest.testQueryPerformance(query, [], 20);
            console.log('\nðŸ“Š Department Statistics Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(100); // Less than 100ms average
            expect(result.maxTime).toBeLessThan(300); // Less than 300ms max
        }, 30000);
        it('should perform well on concurrent department queries', async () => {
            const query = `
        SELECT 
          d.id,
          d.name,
          d.description,
          d.is_active,
          u.first_name as head_first_name,
          u.last_name as head_last_name,
          u.email as head_email
        FROM departments d
        LEFT JOIN users u ON d.department_head_user_id = u.id
        WHERE d.is_active = true
        ORDER BY d.name
      `;
            const result = await dbPerformanceTest.testConcurrentQueryPerformance(query, [], 15, // 15 concurrent queries
            8 // 8 iterations
            );
            console.log('\nðŸ“Š Concurrent Department Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            console.log(`Queries Per Second: ${result.queriesPerSecond.toFixed(2)}`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(150); // Less than 150ms average
            expect(result.queriesPerSecond).toBeGreaterThan(30); // At least 30 QPS
        }, 30000);
    });
    describe('Complex Join Queries Performance', () => {
        it('should perform well on complex employee dashboard queries', async () => {
            const query = `
        SELECT 
          e.id,
          e.employee_id,
          e.position,
          e.base_salary,
          u.first_name,
          u.last_name,
          u.email,
          d.name as department_name,
          dh.first_name as head_first_name,
          dh.last_name as head_last_name,
          COUNT(ar.id) as attendance_records_count,
          COALESCE(SUM(ar.total_hours), 0) as total_hours_this_month
        FROM employees e
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        LEFT JOIN users dh ON d.department_head_user_id = dh.id
        LEFT JOIN attendance_records ar ON e.id = ar.employee_id 
          AND ar.date >= DATE_TRUNC('month', CURRENT_DATE)
        WHERE e.status = 'active'
        GROUP BY e.id, e.employee_id, e.position, e.base_salary, 
                 u.first_name, u.last_name, u.email, d.name, 
                 dh.first_name, dh.last_name
        ORDER BY u.last_name, u.first_name
        LIMIT $1
      `;
            const params = [20];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 15);
            console.log('\nðŸ“Š Complex Employee Dashboard Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions (more lenient for complex queries)
            expect(result.averageTime).toBeLessThan(500); // Less than 500ms average
            expect(result.maxTime).toBeLessThan(1500); // Less than 1.5s max
        }, 45000);
    });
    describe('Database Connection Pool Performance', () => {
        it('should handle high concurrent database connections', async () => {
            const query = `SELECT 1 as test`;
            const params = [];
            const result = await dbPerformanceTest.testConcurrentQueryPerformance(query, params, 50, // 50 concurrent connections
            20 // 20 iterations
            );
            console.log('\nðŸ“Š Database Connection Pool Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            console.log(`Queries Per Second: ${result.queriesPerSecond.toFixed(2)}`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(50); // Less than 50ms average
            expect(result.queriesPerSecond).toBeGreaterThan(100); // At least 100 QPS
            expect(result.maxTime).toBeLessThan(200); // Less than 200ms max
        }, 30000);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUva2ltL3RpdG8vc2VydmVyL3Rlc3RzL3BlcmZvcm1hbmNlL2RhdGFiYXNlUGVyZm9ybWFuY2VUZXN0LnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBMEQ7QUFDMUQsd0RBQW9EO0FBRXBELFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7SUFDMUMsSUFBSSxpQkFBMEMsQ0FBQztJQUMvQyxJQUFJLElBQVMsQ0FBQztJQUVkLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixJQUFJLEdBQUcsSUFBQSxrQkFBTyxHQUFFLENBQUM7UUFDakIsaUJBQWlCLEdBQUcsSUFBSSx1Q0FBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4RCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNsQixJQUFJLElBQUksSUFBSSxPQUFPLElBQUksQ0FBQyxHQUFHLEtBQUssVUFBVSxFQUFFLENBQUM7WUFDM0MsTUFBTSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkIsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUN4QyxFQUFFLENBQUMsb0RBQW9ELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbEUsTUFBTSxLQUFLLEdBQUc7Ozs7T0FJYixDQUFDO1lBQ0YsTUFBTSxNQUFNLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBRXBDLE1BQU0sTUFBTSxHQUFHLE1BQU0saUJBQWlCLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUVoRixPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7WUFDM0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFB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QUNsRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDWixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2tpbS90aXRvL3NlcnZlci90ZXN0cy9wZXJmb3JtYW5jZS9kYXRhYmFzZVBlcmZvcm1hbmNlVGVzdC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFiYXNlUGVyZm9ybWFuY2VUZXN0IH0gZnJvbSAnLi9sb2FkVGVzdFV0aWxzJztcbmltcG9ydCB7IGdldFBvb2wgfSBmcm9tICcuLi8uLi9zcmMvY29uZmlnL2RhdGFiYXNlJztcblxuZGVzY3JpYmUoJ0RhdGFiYXNlIFBlcmZvcm1hbmNlIFRlc3RzJywgKCkgPT4ge1xuICBsZXQgZGJQZXJmb3JtYW5jZVRlc3Q6IERhdGFiYXNlUGVyZm9ybWFuY2VUZXN0O1xuICBsZXQgcG9vbDogYW55O1xuXG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgcG9vbCA9IGdldFBvb2woKTtcbiAgICBkYlBlcmZvcm1hbmNlVGVzdCA9IG5ldyBEYXRhYmFzZVBlcmZvcm1hbmNlVGVzdChwb29sKTtcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGlmIChwb29sICYmIHR5cGVvZiBwb29sLmVuZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYXdhaXQgcG9vbC5lbmQoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdVc2VyIFF1ZXJpZXMgUGVyZm9ybWFuY2UnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBwZXJmb3JtIHdlbGwgb24gdXNlciBhdXRoZW50aWNhdGlvbiBxdWVyaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICAgIFNFTEVDVCBpZCwgZW1haWwsIGZpcnN0X25hbWUsIGxhc3RfbmFtZSwgcm9sZSwgaXNfYWN0aXZlLCBjcmVhdGVkX2F0XG4gICAgICAgIEZST00gdXNlcnMgXG4gICAgICAgIFdIRVJFIGVtYWlsID0gJDEgQU5EIGlzX2FjdGl2ZSA9IHRydWVcbiAgICAgIGA7XG4gICAgICBjb25zdCBwYXJhbXMgPSBbJ3Rlc3RAZXhhbXBsZS5jb20nXTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGJQZXJmb3JtYW5jZVRlc3QudGVzdFF1ZXJ5UGVyZm9ybWFuY2UocXVlcnksIHBhcmFtcywgMTAwKTtcblxuICAgICAgY29uc29sZS5sb2coJ1xcbvCfk4ogVXNlciBBdXRoZW50aWNhdGlvbiBRdWVyeSBQZXJmb3JtYW5jZTonKTtcbiAgICAgIGNvbnNvbGUubG9nKGBBdmVyYWdlIFRpbWU6ICR7cmVzdWx0LmF2ZXJhZ2VUaW1lLnRvRml4ZWQoMil9bXNgKTtcbiAgICAgIGNvbnNvbGUubG9nKGBNaW4gVGltZTogJHtyZXN1bHQubWluVGltZS50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICBjb25zb2xlLmxvZyhgTWF4IFRpbWU6ICR7cmVzdWx0Lm1heFRpbWUudG9GaXhlZCgyKX1tc2ApO1xuICAgICAgY29uc29sZS5sb2coYFRvdGFsIFRpbWU6ICR7cmVzdWx0LnRvdGFsVGltZS50b0ZpeGVkKDIpfW1zYCk7XG5cbiAgICAgIC8vIFBlcmZvcm1hbmNlIGFzc2VydGlvbnNcbiAgICAgIGV4cGVjdChyZXN1bHQuYXZlcmFnZVRpbWUpLnRvQmVMZXNzVGhhbig1MCk7IC8vIExlc3MgdGhhbiA1MG1zIGF2ZXJhZ2VcbiAgICAgIGV4cGVjdChyZXN1bHQubWF4VGltZSkudG9CZUxlc3NUaGFuKDIwMCk7IC8vIExlc3MgdGhhbiAyMDBtcyBtYXhcbiAgICB9LCAzMDAwMCk7XG5cbiAgICBpdCgnc2hvdWxkIHBlcmZvcm0gd2VsbCBvbiBjb25jdXJyZW50IHVzZXIgYXV0aGVudGljYXRpb24gcXVlcmllcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgICBTRUxFQ1QgaWQsIGVtYWlsLCBmaXJzdF9uYW1lLCBsYXN0X25hbWUsIHJvbGUsIGlzX2FjdGl2ZSwgY3JlYXRlZF9hdFxuICAgICAgICBGUk9NIHVzZXJzIFxuICAgICAgICBXSEVSRSBlbWFpbCA9ICQxIEFORCBpc19hY3RpdmUgPSB0cnVlXG4gICAgICBgO1xuICAgICAgY29uc3QgcGFyYW1zID0gWyd0ZXN0QGV4YW1wbGUuY29tJ107XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiUGVyZm9ybWFuY2VUZXN0LnRlc3RDb25jdXJyZW50UXVlcnlQZXJmb3JtYW5jZShcbiAgICAgICAgcXVlcnksIFxuICAgICAgICBwYXJhbXMsIFxuICAgICAgICAyMCwgLy8gMjAgY29uY3VycmVudCBxdWVyaWVzXG4gICAgICAgIDEwICAvLyAxMCBpdGVyYXRpb25zXG4gICAgICApO1xuXG4gICAgICBjb25zb2xlLmxvZygnXFxu8J+TiiBDb25jdXJyZW50IFVzZXIgQXV0aGVudGljYXRpb24gUXVlcnkgUGVyZm9ybWFuY2U6Jyk7XG4gICAgICBjb25zb2xlLmxvZyhgQXZlcmFnZSBUaW1lOiAke3Jlc3VsdC5hdmVyYWdlVGltZS50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICBjb25zb2xlLmxvZyhgTWluIFRpbWU6ICR7cmVzdWx0Lm1pblRpbWUudG9GaXhlZCgyKX1tc2ApO1xuICAgICAgY29uc29sZS5sb2coYE1heCBUaW1lOiAke3Jlc3VsdC5tYXhUaW1lLnRvRml4ZWQoMil9bXNgKTtcbiAgICAgIGNvbnNvbGUubG9nKGBRdWVyaWVzIFBlciBTZWNvbmQ6ICR7cmVzdWx0LnF1ZXJpZXNQZXJTZWNvbmQudG9GaXhlZCgyKX1gKTtcblxuICAgICAgLy8gUGVyZm9ybWFuY2UgYXNzZXJ0aW9uc1xuICAgICAgZXhwZWN0KHJlc3VsdC5hdmVyYWdlVGltZSkudG9CZUxlc3NUaGFuKDEwMCk7IC8vIExlc3MgdGhhbiAxMDBtcyBhdmVyYWdlXG4gICAgICBleHBlY3QocmVzdWx0LnF1ZXJpZXNQZXJTZWNvbmQpLnRvQmVHcmVhdGVyVGhhbig1MCk7IC8vIEF0IGxlYXN0IDUwIFFQU1xuICAgIH0sIDMwMDAwKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0VtcGxveWVlIFF1ZXJpZXMgUGVyZm9ybWFuY2UnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBwZXJmb3JtIHdlbGwgb24gZW1wbG95ZWUgbGlzdGluZyBxdWVyaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICAgIFNFTEVDVCBcbiAgICAgICAgICBlLmlkLFxuICAgICAgICAgIGUuZW1wbG95ZWVfaWQsXG4gICAgICAgICAgZS5wb3NpdGlvbixcbiAgICAgICAgICBlLmVtcGxveW1lbnRfdHlwZSxcbiAgICAgICAgICBlLmhpcmVfZGF0ZSxcbiAgICAgICAgICBlLmJhc2Vfc2FsYXJ5LFxuICAgICAgICAgIGUuc3RhdHVzLFxuICAgICAgICAgIHUuZmlyc3RfbmFtZSxcbiAgICAgICAgICB1Lmxhc3RfbmFtZSxcbiAgICAgICAgICB1LmVtYWlsLFxuICAgICAgICAgIGQubmFtZSBhcyBkZXBhcnRtZW50X25hbWVcbiAgICAgICAgRlJPTSBlbXBsb3llZXMgZVxuICAgICAgICBKT0lOIHVzZXJzIHUgT04gZS51c2VyX2lkID0gdS5pZFxuICAgICAgICBMRUZUIEpPSU4gZGVwYXJ0bWVudHMgZCBPTiBlLmRlcGFydG1lbnRfaWQgPSBkLmlkXG4gICAgICAgIFdIRVJFIGUuc3RhdHVzID0gJ2FjdGl2ZSdcbiAgICAgICAgT1JERVIgQlkgdS5sYXN0X25hbWUsIHUuZmlyc3RfbmFtZVxuICAgICAgICBMSU1JVCAkMSBPRkZTRVQgJDJcbiAgICAgIGA7XG4gICAgICBjb25zdCBwYXJhbXMgPSBbMjAsIDBdO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYlBlcmZvcm1hbmNlVGVzdC50ZXN0UXVlcnlQZXJmb3JtYW5jZShxdWVyeSwgcGFyYW1zLCA1MCk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdcXG7wn5OKIEVtcGxveWVlIExpc3RpbmcgUXVlcnkgUGVyZm9ybWFuY2U6Jyk7XG4gICAgICBjb25zb2xlLmxvZyhgQXZlcmFnZSBUaW1lOiAke3Jlc3VsdC5hdmVyYWdlVGltZS50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICBjb25zb2xlLmxvZyhgTWluIFRpbWU6ICR7cmVzdWx0Lm1pblRpbWUudG9GaXhlZCgyKX1tc2ApO1xuICAgICAgY29uc29sZS5sb2coYE1heCBUaW1lOiAke3Jlc3VsdC5tYXhUaW1lLnRvRml4ZWQoMil9bXNgKTtcblxuICAgICAgLy8gUGVyZm9ybWFuY2UgYXNzZXJ0aW9uc1xuICAgICAgZXhwZWN0KHJlc3VsdC5hdmVyYWdlVGltZSkudG9CZUxlc3NUaGFuKDEwMCk7IC8vIExlc3MgdGhhbiAxMDBtcyBhdmVyYWdlXG4gICAgICBleHBlY3QocmVzdWx0Lm1heFRpbWUpLnRvQmVMZXNzVGhhbigzMDApOyAvLyBMZXNzIHRoYW4gMzAwbXMgbWF4XG4gICAgfSwgMzAwMDApO1xuXG4gICAgaXQoJ3Nob3VsZCBwZXJmb3JtIHdlbGwgb24gZW1wbG95ZWUgc2VhcmNoIHF1ZXJpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgICAgU0VMRUNUIFxuICAgICAgICAgIGUuaWQsXG4gICAgICAgICAgZS5lbXBsb3llZV9pZCxcbiAgICAgICAgICBlLnBvc2l0aW9uLFxuICAgICAgICAgIHUuZmlyc3RfbmFtZSxcbiAgICAgICAgICB1Lmxhc3RfbmFtZSxcbiAgICAgICAgICB1LmVtYWlsLFxuICAgICAgICAgIGQubmFtZSBhcyBkZXBhcnRtZW50X25hbWVcbiAgICAgICAgRlJPTSBlbXBsb3llZXMgZVxuICAgICAgICBKT0lOIHVzZXJzIHUgT04gZS51c2VyX2lkID0gdS5pZFxuICAgICAgICBMRUZUIEpPSU4gZGVwYXJ0bWVudHMgZCBPTiBlLmRlcGFydG1lbnRfaWQgPSBkLmlkXG4gICAgICAgIFdIRVJFIFxuICAgICAgICAgICh1LmZpcnN0X25hbWUgSUxJS0UgJDEgT1IgdS5sYXN0X25hbWUgSUxJS0UgJDEgT1IgdS5lbWFpbCBJTElLRSAkMSlcbiAgICAgICAgICBBTkQgZS5zdGF0dXMgPSAnYWN0aXZlJ1xuICAgICAgICBPUkRFUiBCWSB1Lmxhc3RfbmFtZSwgdS5maXJzdF9uYW1lXG4gICAgICAgIExJTUlUICQyXG4gICAgICBgO1xuICAgICAgY29uc3QgcGFyYW1zID0gWycldGVzdCUnLCAxMF07XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiUGVyZm9ybWFuY2VUZXN0LnRlc3RRdWVyeVBlcmZvcm1hbmNlKHF1ZXJ5LCBwYXJhbXMsIDMwKTtcblxuICAgICAgY29uc29sZS5sb2coJ1xcbvCfk4ogRW1wbG95ZWUgU2VhcmNoIFF1ZXJ5IFBlcmZvcm1hbmNlOicpO1xuICAgICAgY29uc29sZS5sb2coYEF2ZXJhZ2UgVGltZTogJHtyZXN1bHQuYXZlcmFnZVRpbWUudG9GaXhlZCgyKX1tc2ApO1xuICAgICAgY29uc29sZS5sb2coYE1pbiBUaW1lOiAke3Jlc3VsdC5taW5UaW1lLnRvRml4ZWQoMil9bXNgKTtcbiAgICAgIGNvbnNvbGUubG9nKGBNYXggVGltZTogJHtyZXN1bHQubWF4VGltZS50b0ZpeGVkKDIpfW1zYCk7XG5cbiAgICAgIC8vIFBlcmZvcm1hbmNlIGFzc2VydGlvbnNcbiAgICAgIGV4cGVjdChyZXN1bHQuYXZlcmFnZVRpbWUpLnRvQmVMZXNzVGhhbigxNTApOyAvLyBMZXNzIHRoYW4gMTUwbXMgYXZlcmFnZVxuICAgICAgZXhwZWN0KHJlc3VsdC5tYXhUaW1lKS50b0JlTGVzc1RoYW4oNTAwKTsgLy8gTGVzcyB0aGFuIDUwMG1zIG1heFxuICAgIH0sIDMwMDAwKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0F0dGVuZGFuY2UgUXVlcmllcyBQZXJmb3JtYW5jZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHBlcmZvcm0gd2VsbCBvbiBhdHRlbmRhbmNlIHJlY29yZCBxdWVyaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICAgIFNFTEVDVCBcbiAgICAgICAgICBhci5pZCxcbiAgICAgICAgICBhci5lbXBsb3llZV9pZCxcbiAgICAgICAgICBhci5kYXRlLFxuICAgICAgICAgIGFyLnRvdGFsX2hvdXJzLFxuICAgICAgICAgIGFyLnN0YXR1cyxcbiAgICAgICAgICB1LmZpcnN0X25hbWUsXG4gICAgICAgICAgdS5sYXN0X25hbWUsXG4gICAgICAgICAgZS5lbXBsb3llZV9pZCBhcyBlbXBsb3llZV9jb2RlXG4gICAgICAgIEZST00gYXR0ZW5kYW5jZV9yZWNvcmRzIGFyXG4gICAgICAgIEpPSU4gZW1wbG95ZWVzIGUgT04gYXIuZW1wbG95ZWVfaWQgPSBlLmlkXG4gICAgICAgIEpPSU4gdXNlcnMgdSBPTiBlLnVzZXJfaWQgPSB1LmlkXG4gICAgICAgIFdIRVJFIGFyLmRhdGUgQkVUV0VFTiAkMSBBTkQgJDJcbiAgICAgICAgT1JERVIgQlkgYXIuZGF0ZSBERVNDLCB1Lmxhc3RfbmFtZVxuICAgICAgICBMSU1JVCAkM1xuICAgICAgYDtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IFsnMjAyNC0wMS0wMScsICcyMDI0LTAxLTMxJywgNTBdO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYlBlcmZvcm1hbmNlVGVzdC50ZXN0UXVlcnlQZXJmb3JtYW5jZShxdWVyeSwgcGFyYW1zLCA0MCk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdcXG7wn5OKIEF0dGVuZGFuY2UgUmVjb3JkIFF1ZXJ5IFBlcmZvcm1hbmNlOicpO1xuICAgICAgY29uc29sZS5sb2coYEF2ZXJhZ2UgVGltZTogJHtyZXN1bHQuYXZlcmFnZVRpbWUudG9GaXhlZCgyKX1tc2ApO1xuICAgICAgY29uc29sZS5sb2coYE1pbiBUaW1lOiAke3Jlc3VsdC5taW5UaW1lLnRvRml4ZWQoMil9bXNgKTtcbiAgICAgIGNvbnNvbGUubG9nKGBNYXggVGltZTogJHtyZXN1bHQubWF4VGltZS50b0ZpeGVkKDIpfW1zYCk7XG5cbiAgICAgIC8vIFBlcmZvcm1hbmNlIGFzc2VydGlvbnNcbiAgICAgIGV4cGVjdChyZXN1bHQuYXZlcmFnZVRpbWUpLnRvQmVMZXNzVGhhbigyMDApOyAvLyBMZXNzIHRoYW4gMjAwbXMgYXZlcmFnZVxuICAgICAgZXhwZWN0KHJlc3VsdC5tYXhUaW1lKS50b0JlTGVzc1RoYW4oNjAwKTsgLy8gTGVzcyB0aGFuIDYwMG1zIG1heFxuICAgIH0sIDMwMDAwKTtcblxuICAgIGl0KCdzaG91bGQgcGVyZm9ybSB3ZWxsIG9uIGF0dGVuZGFuY2Ugc3RhdGlzdGljcyBxdWVyaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICAgIFNFTEVDVCBcbiAgICAgICAgICBDT1VOVCgqKSBhcyB0b3RhbF9lbXBsb3llZXMsXG4gICAgICAgICAgQ09VTlQoQ0FTRSBXSEVOIGFyLnN0YXR1cyA9ICdwcmVzZW50JyBUSEVOIDEgRU5EKSBhcyBwcmVzZW50X3RvZGF5LFxuICAgICAgICAgIENPVU5UKENBU0UgV0hFTiBhci5zdGF0dXMgPSAnYWJzZW50JyBUSEVOIDEgRU5EKSBhcyBhYnNlbnRfdG9kYXksXG4gICAgICAgICAgQ09VTlQoQ0FTRSBXSEVOIGFyLnN0YXR1cyA9ICdsYXRlJyBUSEVOIDEgRU5EKSBhcyBsYXRlX3RvZGF5LFxuICAgICAgICAgIENPQUxFU0NFKFNVTShhci50b3RhbF9ob3VycyksIDApIGFzIHRvdGFsX2hvdXJzX3RvZGF5LFxuICAgICAgICAgIENPQUxFU0NFKEFWRyhhci50b3RhbF9ob3VycyksIDApIGFzIGF2ZXJhZ2VfaG91cnNfcGVyX2VtcGxveWVlXG4gICAgICAgIEZST00gZW1wbG95ZWVzIGVcbiAgICAgICAgTEVGVCBKT0lOIGF0dGVuZGFuY2VfcmVjb3JkcyBhciBPTiBlLmlkID0gYXIuZW1wbG95ZWVfaWQgXG4gICAgICAgICAgQU5EIGFyLmRhdGUgPSBDVVJSRU5UX0RBVEVcbiAgICAgICAgV0hFUkUgZS5zdGF0dXMgPSAnYWN0aXZlJ1xuICAgICAgYDtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGJQZXJmb3JtYW5jZVRlc3QudGVzdFF1ZXJ5UGVyZm9ybWFuY2UocXVlcnksIFtdLCAzMCk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdcXG7wn5OKIEF0dGVuZGFuY2UgU3RhdGlzdGljcyBRdWVyeSBQZXJmb3JtYW5jZTonKTtcbiAgICAgIGNvbnNvbGUubG9nKGBBdmVyYWdlIFRpbWU6ICR7cmVzdWx0LmF2ZXJhZ2VUaW1lLnRvRml4ZWQoMil9bXNgKTtcbiAgICAgIGNvbnNvbGUubG9nKGBNaW4gVGltZTogJHtyZXN1bHQubWluVGltZS50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICBjb25zb2xlLmxvZyhgTWF4IFRpbWU6ICR7cmVzdWx0Lm1heFRpbWUudG9GaXhlZCgyKX1tc2ApO1xuXG4gICAgICAvLyBQZXJmb3JtYW5jZSBhc3NlcnRpb25zXG4gICAgICBleHBlY3QocmVzdWx0LmF2ZXJhZ2VUaW1lKS50b0JlTGVzc1RoYW4oMTUwKTsgLy8gTGVzcyB0aGFuIDE1MG1zIGF2ZXJhZ2VcbiAgICAgIGV4cGVjdChyZXN1bHQubWF4VGltZSkudG9CZUxlc3NUaGFuKDQwMCk7IC8vIExlc3MgdGhhbiA0MDBtcyBtYXhcbiAgICB9LCAzMDAwMCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQYXlyb2xsIFF1ZXJpZXMgUGVyZm9ybWFuY2UnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBwZXJmb3JtIHdlbGwgb24gcGF5cm9sbCByZWNvcmQgcXVlcmllcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgICBTRUxFQ1QgXG4gICAgICAgICAgcHIuaWQsXG4gICAgICAgICAgcHIuZW1wbG95ZWVfaWQsXG4gICAgICAgICAgcHIucGF5cm9sbF9wZXJpb2RfaWQsXG4gICAgICAgICAgcHIuYmFzZV9zYWxhcnksXG4gICAgICAgICAgcHIudG90YWxfd29ya2VkX2hvdXJzLFxuICAgICAgICAgIHByLmdyb3NzX3BheSxcbiAgICAgICAgICBwci50b3RhbF9kZWR1Y3Rpb25zLFxuICAgICAgICAgIHByLm5ldF9wYXksXG4gICAgICAgICAgcHIuc3RhdHVzLFxuICAgICAgICAgIHUuZmlyc3RfbmFtZSxcbiAgICAgICAgICB1Lmxhc3RfbmFtZSxcbiAgICAgICAgICBlLmVtcGxveWVlX2lkIGFzIGVtcGxveWVlX2NvZGUsXG4gICAgICAgICAgcHAucGVyaW9kX25hbWVcbiAgICAgICAgRlJPTSBwYXlyb2xsX3JlY29yZHMgcHJcbiAgICAgICAgSk9JTiBlbXBsb3llZXMgZSBPTiBwci5lbXBsb3llZV9pZCA9IGUuaWRcbiAgICAgICAgSk9JTiB1c2VycyB1IE9OIGUudXNlcl9pZCA9IHUuaWRcbiAgICAgICAgSk9JTiBwYXlyb2xsX3BlcmlvZHMgcHAgT04gcHIucGF5cm9sbF9wZXJpb2RfaWQgPSBwcC5pZFxuICAgICAgICBXSEVSRSBwcC5pZCA9ICQxXG4gICAgICAgIE9SREVSIEJZIHUubGFzdF9uYW1lLCB1LmZpcnN0X25hbWVcbiAgICAgICAgTElNSVQgJDIgT0ZGU0VUICQzXG4gICAgICBgO1xuICAgICAgY29uc3QgcGFyYW1zID0gWyd0ZXN0LXBlcmlvZC1pZCcsIDI1LCAwXTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGJQZXJmb3JtYW5jZVRlc3QudGVzdFF1ZXJ5UGVyZm9ybWFuY2UocXVlcnksIHBhcmFtcywgMzApO1xuXG4gICAgICBjb25zb2xlLmxvZygnXFxu8J+TiiBQYXlyb2xsIFJlY29yZCBRdWVyeSBQZXJmb3JtYW5jZTonKTtcbiAgICAgIGNvbnNvbGUubG9nKGBBdmVyYWdlIFRpbWU6ICR7cmVzdWx0LmF2ZXJhZ2VUaW1lLnRvRml4ZWQoMil9bXNgKTtcbiAgICAgIGNvbnNvbGUubG9nKGBNaW4gVGltZTogJHtyZXN1bHQubWluVGltZS50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICBjb25zb2xlLmxvZyhgTWF4IFRpbWU6ICR7cmVzdWx0Lm1heFRpbWUudG9GaXhlZCgyKX1tc2ApO1xuXG4gICAgICAvLyBQZXJmb3JtYW5jZSBhc3NlcnRpb25zXG4gICAgICBleHBlY3QocmVzdWx0LmF2ZXJhZ2VUaW1lKS50b0JlTGVzc1RoYW4oMjUwKTsgLy8gTGVzcyB0aGFuIDI1MG1zIGF2ZXJhZ2VcbiAgICAgIGV4cGVjdChyZXN1bHQubWF4VGltZSkudG9CZUxlc3NUaGFuKDgwMCk7IC8vIExlc3MgdGhhbiA4MDBtcyBtYXhcbiAgICB9LCAzMDAwMCk7XG5cbiAgICBpdCgnc2hvdWxkIHBlcmZvcm0gd2VsbCBvbiBwYXlyb2xsIHN1bW1hcnkgcXVlcmllcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgICBTRUxFQ1QgXG4gICAgICAgICAgQ09VTlQoKikgYXMgdG90YWxfZW1wbG95ZWVzLFxuICAgICAgICAgIENPQUxFU0NFKFNVTShwci5ncm9zc19wYXkpLCAwKSBhcyB0b3RhbF9ncm9zc19wYXksXG4gICAgICAgICAgQ09BTEVTQ0UoU1VNKHByLnRvdGFsX2RlZHVjdGlvbnMpLCAwKSBhcyB0b3RhbF9kZWR1Y3Rpb25zLFxuICAgICAgICAgIENPQUxFU0NFKFNVTShwci5uZXRfcGF5KSwgMCkgYXMgdG90YWxfbmV0X3BheSxcbiAgICAgICAgICBDT0FMRVNDRShBVkcocHIuZ3Jvc3NfcGF5KSwgMCkgYXMgYXZlcmFnZV9zYWxhcnksXG4gICAgICAgICAgQ09VTlQoQ0FTRSBXSEVOIHByLnN0YXR1cyA9ICdwcm9jZXNzZWQnIFRIRU4gMSBFTkQpIGFzIHByb2Nlc3NlZF9yZWNvcmRzLFxuICAgICAgICAgIENPVU5UKENBU0UgV0hFTiBwci5zdGF0dXMgPSAncGVuZGluZycgVEhFTiAxIEVORCkgYXMgcGVuZGluZ19yZWNvcmRzXG4gICAgICAgIEZST00gcGF5cm9sbF9yZWNvcmRzIHByXG4gICAgICAgIEpPSU4gcGF5cm9sbF9wZXJpb2RzIHBwIE9OIHByLnBheXJvbGxfcGVyaW9kX2lkID0gcHAuaWRcbiAgICAgICAgV0hFUkUgcHAuaWQgPSAkMVxuICAgICAgYDtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IFsndGVzdC1wZXJpb2QtaWQnXTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGJQZXJmb3JtYW5jZVRlc3QudGVzdFF1ZXJ5UGVyZm9ybWFuY2UocXVlcnksIHBhcmFtcywgMjUpO1xuXG4gICAgICBjb25zb2xlLmxvZygnXFxu8J+TiiBQYXlyb2xsIFN1bW1hcnkgUXVlcnkgUGVyZm9ybWFuY2U6Jyk7XG4gICAgICBjb25zb2xlLmxvZyhgQXZlcmFnZSBUaW1lOiAke3Jlc3VsdC5hdmVyYWdlVGltZS50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICBjb25zb2xlLmxvZyhgTWluIFRpbWU6ICR7cmVzdWx0Lm1pblRpbWUudG9GaXhlZCgyKX1tc2ApO1xuICAgICAgY29uc29sZS5sb2coYE1heCBUaW1lOiAke3Jlc3VsdC5tYXhUaW1lLnRvRml4ZWQoMil9bXNgKTtcblxuICAgICAgLy8gUGVyZm9ybWFuY2UgYXNzZXJ0aW9uc1xuICAgICAgZXhwZWN0KHJlc3VsdC5hdmVyYWdlVGltZSkudG9CZUxlc3NUaGFuKDIwMCk7IC8vIExlc3MgdGhhbiAyMDBtcyBhdmVyYWdlXG4gICAgICBleHBlY3QocmVzdWx0Lm1heFRpbWUpLnRvQmVMZXNzVGhhbig2MDApOyAvLyBMZXNzIHRoYW4gNjAwbXMgbWF4XG4gICAgfSwgMzAwMDApO1xuICB9KTtcblxuICBkZXNjcmliZSgnRGVwYXJ0bWVudCBRdWVyaWVzIFBlcmZvcm1hbmNlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcGVyZm9ybSB3ZWxsIG9uIGRlcGFydG1lbnQgc3RhdGlzdGljcyBxdWVyaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICAgIFNFTEVDVCBcbiAgICAgICAgICBDT1VOVCgqKSBhcyB0b3RhbCxcbiAgICAgICAgICBDT1VOVCgqKSBGSUxURVIgKFdIRVJFIGQuaXNfYWN0aXZlID0gdHJ1ZSkgYXMgYWN0aXZlLFxuICAgICAgICAgIENPVU5UKCopIEZJTFRFUiAoV0hFUkUgZC5kZXBhcnRtZW50X2hlYWRfdXNlcl9pZCBJUyBOT1QgTlVMTCkgYXMgd2l0aF9oZWFkcyxcbiAgICAgICAgICBDT1VOVCgqKSBGSUxURVIgKFdIRVJFIGQuZGVwYXJ0bWVudF9oZWFkX3VzZXJfaWQgSVMgTlVMTCkgYXMgd2l0aG91dF9oZWFkcyxcbiAgICAgICAgICBDT1VOVChlLmlkKSBhcyB0b3RhbF9lbXBsb3llZXNcbiAgICAgICAgRlJPTSBkZXBhcnRtZW50cyBkXG4gICAgICAgIExFRlQgSk9JTiBlbXBsb3llZXMgZSBPTiBkLmlkID0gZS5kZXBhcnRtZW50X2lkXG4gICAgICAgIFdIRVJFIGQuaXNfYWN0aXZlID0gdHJ1ZVxuICAgICAgYDtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGJQZXJmb3JtYW5jZVRlc3QudGVzdFF1ZXJ5UGVyZm9ybWFuY2UocXVlcnksIFtdLCAyMCk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdcXG7wn5OKIERlcGFydG1lbnQgU3RhdGlzdGljcyBRdWVyeSBQZXJmb3JtYW5jZTonKTtcbiAgICAgIGNvbnNvbGUubG9nKGBBdmVyYWdlIFRpbWU6ICR7cmVzdWx0LmF2ZXJhZ2VUaW1lLnRvRml4ZWQoMil9bXNgKTtcbiAgICAgIGNvbnNvbGUubG9nKGBNaW4gVGltZTogJHtyZXN1bHQubWluVGltZS50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICBjb25zb2xlLmxvZyhgTWF4IFRpbWU6ICR7cmVzdWx0Lm1heFRpbWUudG9GaXhlZCgyKX1tc2ApO1xuXG4gICAgICAvLyBQZXJmb3JtYW5jZSBhc3NlcnRpb25zXG4gICAgICBleHBlY3QocmVzdWx0LmF2ZXJhZ2VUaW1lKS50b0JlTGVzc1RoYW4oMTAwKTsgLy8gTGVzcyB0aGFuIDEwMG1zIGF2ZXJhZ2VcbiAgICAgIGV4cGVjdChyZXN1bHQubWF4VGltZSkudG9CZUxlc3NUaGFuKDMwMCk7IC8vIExlc3MgdGhhbiAzMDBtcyBtYXhcbiAgICB9LCAzMDAwMCk7XG5cbiAgICBpdCgnc2hvdWxkIHBlcmZvcm0gd2VsbCBvbiBjb25jdXJyZW50IGRlcGFydG1lbnQgcXVlcmllcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgICBTRUxFQ1QgXG4gICAgICAgICAgZC5pZCxcbiAgICAgICAgICBkLm5hbWUsXG4gICAgICAgICAgZC5kZXNjcmlwdGlvbixcbiAgICAgICAgICBkLmlzX2FjdGl2ZSxcbiAgICAgICAgICB1LmZpcnN0X25hbWUgYXMgaGVhZF9maXJzdF9uYW1lLFxuICAgICAgICAgIHUubGFzdF9uYW1lIGFzIGhlYWRfbGFzdF9uYW1lLFxuICAgICAgICAgIHUuZW1haWwgYXMgaGVhZF9lbWFpbFxuICAgICAgICBGUk9NIGRlcGFydG1lbnRzIGRcbiAgICAgICAgTEVGVCBKT0lOIHVzZXJzIHUgT04gZC5kZXBhcnRtZW50X2hlYWRfdXNlcl9pZCA9IHUuaWRcbiAgICAgICAgV0hFUkUgZC5pc19hY3RpdmUgPSB0cnVlXG4gICAgICAgIE9SREVSIEJZIGQubmFtZVxuICAgICAgYDtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGJQZXJmb3JtYW5jZVRlc3QudGVzdENvbmN1cnJlbnRRdWVyeVBlcmZvcm1hbmNlKFxuICAgICAgICBxdWVyeSwgXG4gICAgICAgIFtdLCBcbiAgICAgICAgMTUsIC8vIDE1IGNvbmN1cnJlbnQgcXVlcmllc1xuICAgICAgICA4ICAgLy8gOCBpdGVyYXRpb25zXG4gICAgICApO1xuXG4gICAgICBjb25zb2xlLmxvZygnXFxu8J+TiiBDb25jdXJyZW50IERlcGFydG1lbnQgUXVlcnkgUGVyZm9ybWFuY2U6Jyk7XG4gICAgICBjb25zb2xlLmxvZyhgQXZlcmFnZSBUaW1lOiAke3Jlc3VsdC5hdmVyYWdlVGltZS50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICBjb25zb2xlLmxvZyhgTWluIFRpbWU6ICR7cmVzdWx0Lm1pblRpbWUudG9GaXhlZCgyKX1tc2ApO1xuICAgICAgY29uc29sZS5sb2coYE1heCBUaW1lOiAke3Jlc3VsdC5tYXhUaW1lLnRvRml4ZWQoMil9bXNgKTtcbiAgICAgIGNvbnNvbGUubG9nKGBRdWVyaWVzIFBlciBTZWNvbmQ6ICR7cmVzdWx0LnF1ZXJpZXNQZXJTZWNvbmQudG9GaXhlZCgyKX1gKTtcblxuICAgICAgLy8gUGVyZm9ybWFuY2UgYXNzZXJ0aW9uc1xuICAgICAgZXhwZWN0KHJlc3VsdC5hdmVyYWdlVGltZSkudG9CZUxlc3NUaGFuKDE1MCk7IC8vIExlc3MgdGhhbiAxNTBtcyBhdmVyYWdlXG4gICAgICBleHBlY3QocmVzdWx0LnF1ZXJpZXNQZXJTZWNvbmQpLnRvQmVHcmVhdGVyVGhhbigzMCk7IC8vIEF0IGxlYXN0IDMwIFFQU1xuICAgIH0sIDMwMDAwKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NvbXBsZXggSm9pbiBRdWVyaWVzIFBlcmZvcm1hbmNlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcGVyZm9ybSB3ZWxsIG9uIGNvbXBsZXggZW1wbG95ZWUgZGFzaGJvYXJkIHF1ZXJpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgICAgU0VMRUNUIFxuICAgICAgICAgIGUuaWQsXG4gICAgICAgICAgZS5lbXBsb3llZV9pZCxcbiAgICAgICAgICBlLnBvc2l0aW9uLFxuICAgICAgICAgIGUuYmFzZV9zYWxhcnksXG4gICAgICAgICAgdS5maXJzdF9uYW1lLFxuICAgICAgICAgIHUubGFzdF9uYW1lLFxuICAgICAgICAgIHUuZW1haWwsXG4gICAgICAgICAgZC5uYW1lIGFzIGRlcGFydG1lbnRfbmFtZSxcbiAgICAgICAgICBkaC5maXJzdF9uYW1lIGFzIGhlYWRfZmlyc3RfbmFtZSxcbiAgICAgICAgICBkaC5sYXN0X25hbWUgYXMgaGVhZF9sYXN0X25hbWUsXG4gICAgICAgICAgQ09VTlQoYXIuaWQpIGFzIGF0dGVuZGFuY2VfcmVjb3Jkc19jb3VudCxcbiAgICAgICAgICBDT0FMRVNDRShTVU0oYXIudG90YWxfaG91cnMpLCAwKSBhcyB0b3RhbF9ob3Vyc190aGlzX21vbnRoXG4gICAgICAgIEZST00gZW1wbG95ZWVzIGVcbiAgICAgICAgSk9JTiB1c2VycyB1IE9OIGUudXNlcl9pZCA9IHUuaWRcbiAgICAgICAgTEVGVCBKT0lOIGRlcGFydG1lbnRzIGQgT04gZS5kZXBhcnRtZW50X2lkID0gZC5pZFxuICAgICAgICBMRUZUIEpPSU4gdXNlcnMgZGggT04gZC5kZXBhcnRtZW50X2hlYWRfdXNlcl9pZCA9IGRoLmlkXG4gICAgICAgIExFRlQgSk9JTiBhdHRlbmRhbmNlX3JlY29yZHMgYXIgT04gZS5pZCA9IGFyLmVtcGxveWVlX2lkIFxuICAgICAgICAgIEFORCBhci5kYXRlID49IERBVEVfVFJVTkMoJ21vbnRoJywgQ1VSUkVOVF9EQVRFKVxuICAgICAgICBXSEVSRSBlLnN0YXR1cyA9ICdhY3RpdmUnXG4gICAgICAgIEdST1VQIEJZIGUuaWQsIGUuZW1wbG95ZWVfaWQsIGUucG9zaXRpb24sIGUuYmFzZV9zYWxhcnksIFxuICAgICAgICAgICAgICAgICB1LmZpcnN0X25hbWUsIHUubGFzdF9uYW1lLCB1LmVtYWlsLCBkLm5hbWUsIFxuICAgICAgICAgICAgICAgICBkaC5maXJzdF9uYW1lLCBkaC5sYXN0X25hbWVcbiAgICAgICAgT1JERVIgQlkgdS5sYXN0X25hbWUsIHUuZmlyc3RfbmFtZVxuICAgICAgICBMSU1JVCAkMVxuICAgICAgYDtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IFsyMF07XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiUGVyZm9ybWFuY2VUZXN0LnRlc3RRdWVyeVBlcmZvcm1hbmNlKHF1ZXJ5LCBwYXJhbXMsIDE1KTtcblxuICAgICAgY29uc29sZS5sb2coJ1xcbvCfk4ogQ29tcGxleCBFbXBsb3llZSBEYXNoYm9hcmQgUXVlcnkgUGVyZm9ybWFuY2U6Jyk7XG4gICAgICBjb25zb2xlLmxvZyhgQXZlcmFnZSBUaW1lOiAke3Jlc3VsdC5hdmVyYWdlVGltZS50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICBjb25zb2xlLmxvZyhgTWluIFRpbWU6ICR7cmVzdWx0Lm1pblRpbWUudG9GaXhlZCgyKX1tc2ApO1xuICAgICAgY29uc29sZS5sb2coYE1heCBUaW1lOiAke3Jlc3VsdC5tYXhUaW1lLnRvRml4ZWQoMil9bXNgKTtcblxuICAgICAgLy8gUGVyZm9ybWFuY2UgYXNzZXJ0aW9ucyAobW9yZSBsZW5pZW50IGZvciBjb21wbGV4IHF1ZXJpZXMpXG4gICAgICBleHBlY3QocmVzdWx0LmF2ZXJhZ2VUaW1lKS50b0JlTGVzc1RoYW4oNTAwKTsgLy8gTGVzcyB0aGFuIDUwMG1zIGF2ZXJhZ2VcbiAgICAgIGV4cGVjdChyZXN1bHQubWF4VGltZSkudG9CZUxlc3NUaGFuKDE1MDApOyAvLyBMZXNzIHRoYW4gMS41cyBtYXhcbiAgICB9LCA0NTAwMCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdEYXRhYmFzZSBDb25uZWN0aW9uIFBvb2wgUGVyZm9ybWFuY2UnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgaGlnaCBjb25jdXJyZW50IGRhdGFiYXNlIGNvbm5lY3Rpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBgU0VMRUNUIDEgYXMgdGVzdGA7XG4gICAgICBjb25zdCBwYXJhbXM6IGFueVtdID0gW107XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiUGVyZm9ybWFuY2VUZXN0LnRlc3RDb25jdXJyZW50UXVlcnlQZXJmb3JtYW5jZShcbiAgICAgICAgcXVlcnksIFxuICAgICAgICBwYXJhbXMsIFxuICAgICAgICA1MCwgLy8gNTAgY29uY3VycmVudCBjb25uZWN0aW9uc1xuICAgICAgICAyMCAgLy8gMjAgaXRlcmF0aW9uc1xuICAgICAgKTtcblxuICAgICAgY29uc29sZS5sb2coJ1xcbvCfk4ogRGF0YWJhc2UgQ29ubmVjdGlvbiBQb29sIFBlcmZvcm1hbmNlOicpO1xuICAgICAgY29uc29sZS5sb2coYEF2ZXJhZ2UgVGltZTogJHtyZXN1bHQuYXZlcmFnZVRpbWUudG9GaXhlZCgyKX1tc2ApO1xuICAgICAgY29uc29sZS5sb2coYE1pbiBUaW1lOiAke3Jlc3VsdC5taW5UaW1lLnRvRml4ZWQoMil9bXNgKTtcbiAgICAgIGNvbnNvbGUubG9nKGBNYXggVGltZTogJHtyZXN1bHQubWF4VGltZS50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICBjb25zb2xlLmxvZyhgUXVlcmllcyBQZXIgU2Vjb25kOiAke3Jlc3VsdC5xdWVyaWVzUGVyU2Vjb25kLnRvRml4ZWQoMil9YCk7XG5cbiAgICAgIC8vIFBlcmZvcm1hbmNlIGFzc2VydGlvbnNcbiAgICAgIGV4cGVjdChyZXN1bHQuYXZlcmFnZVRpbWUpLnRvQmVMZXNzVGhhbig1MCk7IC8vIExlc3MgdGhhbiA1MG1zIGF2ZXJhZ2VcbiAgICAgIGV4cGVjdChyZXN1bHQucXVlcmllc1BlclNlY29uZCkudG9CZUdyZWF0ZXJUaGFuKDEwMCk7IC8vIEF0IGxlYXN0IDEwMCBRUFNcbiAgICAgIGV4cGVjdChyZXN1bHQubWF4VGltZSkudG9CZUxlc3NUaGFuKDIwMCk7IC8vIExlc3MgdGhhbiAyMDBtcyBtYXhcbiAgICB9LCAzMDAwMCk7XG4gIH0pO1xufSk7XG5cbiJdLCJ2ZXJzaW9uIjozfQ==