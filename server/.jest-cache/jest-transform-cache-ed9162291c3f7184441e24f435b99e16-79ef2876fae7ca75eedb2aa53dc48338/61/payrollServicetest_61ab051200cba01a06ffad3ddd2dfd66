3d76ab9fed3eeb1a8c41be66476d0f34
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const payrollService_1 = require("../../../src/services/payroll/payrollService");
const testHelpers_1 = require("../../utils/testHelpers");
const setup_1 = require("../../setup");
describe('PayrollService', () => {
    let testHelpers;
    let createdUserIds = [];
    let createdEmployeeIds = [];
    let createdDepartmentIds = [];
    beforeAll(async () => {
        const { testDbPool } = await (0, setup_1.initializeTestConnections)();
        testHelpers = new testHelpers_1.TestHelpers(testDbPool);
    });
    afterEach(async () => {
        // Clean up created data after each test
        for (const employeeId of createdEmployeeIds) {
            try {
                await testHelpers.deleteEmployee(employeeId);
            }
            catch (error) {
                // Ignore cleanup errors
            }
        }
        for (const userId of createdUserIds) {
            try {
                await testHelpers.deleteUser(userId);
            }
            catch (error) {
                // Ignore cleanup errors
            }
        }
        for (const departmentId of createdDepartmentIds) {
            try {
                await testHelpers.deleteDepartment(departmentId);
            }
            catch (error) {
                // Ignore cleanup errors
            }
        }
        createdUserIds = [];
        createdEmployeeIds = [];
        createdDepartmentIds = [];
    });
    describe('getPayrollPeriods', () => {
        it('should get payroll periods', async () => {
            // Act
            const result = await payrollService_1.payrollService.getPayrollPeriods();
            // Assert
            expect(result).toHaveProperty('periods');
            expect(result).toHaveProperty('total');
            expect(Array.isArray(result.periods)).toBe(true);
            expect(typeof result.total).toBe('number');
        });
    });
    describe('getPayrollPeriod', () => {
        it('should return null for non-existent period', async () => {
            // Act
            const result = await payrollService_1.payrollService.getPayrollPeriod('non-existent-id');
            // Assert
            expect(result).toBeNull();
        });
    });
    describe('getPayrollRecords', () => {
        it('should get payroll records', async () => {
            // Act
            const result = await payrollService_1.payrollService.getPayrollRecords();
            // Assert
            expect(result).toHaveProperty('records');
            expect(result).toHaveProperty('total');
            expect(Array.isArray(result.records)).toBe(true);
            expect(typeof result.total).toBe('number');
        });
    });
    describe('getPayrollRecord', () => {
        it('should return null for non-existent record', async () => {
            // Act
            const result = await payrollService_1.payrollService.getPayrollRecord('non-existent-id');
            // Assert
            expect(result).toBeNull();
        });
    });
    describe('getDeductionTypes', () => {
        it('should get deduction types', async () => {
            // Act
            const result = await payrollService_1.payrollService.getDeductionTypes();
            // Assert
            expect(result).toHaveProperty('records');
            expect(result).toHaveProperty('total');
            expect(Array.isArray(result.records)).toBe(true);
            expect(typeof result.total).toBe('number');
        });
    });
    describe('getBenefitTypes', () => {
        it('should get benefit types', async () => {
            // Act
            const result = await payrollService_1.payrollService.getBenefitTypes();
            // Assert
            expect(result).toHaveProperty('records');
            expect(result).toHaveProperty('total');
            expect(Array.isArray(result.records)).toBe(true);
            expect(typeof result.total).toBe('number');
        });
    });
    describe('getEmployeeDeductionBalances', () => {
        it('should get employee deduction balances', async () => {
            // Act
            const result = await payrollService_1.payrollService.getEmployeeDeductionBalances();
            // Assert
            expect(result).toHaveProperty('records');
            expect(result).toHaveProperty('total');
            expect(Array.isArray(result.records)).toBe(true);
            expect(typeof result.total).toBe('number');
        });
    });
    describe('getEmployeeBenefits', () => {
        it('should get employee benefits', async () => {
            // Act
            const result = await payrollService_1.payrollService.getEmployeeBenefits();
            // Assert
            expect(result).toHaveProperty('records');
            expect(result).toHaveProperty('total');
            expect(Array.isArray(result.records)).toBe(true);
            expect(typeof result.total).toBe('number');
        });
    });
    describe('getPayrollStats', () => {
        it('should get payroll statistics', async () => {
            // Act
            const result = await payrollService_1.payrollService.getPayrollStats();
            // Assert
            expect(result).toHaveProperty('totalEmployees');
            expect(result).toHaveProperty('totalPayroll');
            expect(result).toHaveProperty('processedPeriods');
            expect(result).toHaveProperty('pendingPeriods');
            expect(typeof result.totalEmployees).toBe('number');
            expect(typeof result.totalPayroll).toBe('number');
            expect(typeof result.processedPeriods).toBe('number');
            expect(typeof result.pendingPeriods).toBe('number');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUva2ltL3RpdG8vc2VydmVyL3Rlc3RzL3VuaXQvc2VydmljZXMvcGF5cm9sbFNlcnZpY2UudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLGlGQUE4RTtBQUM5RSx5REFBc0Q7QUFDdEQsdUNBQXdEO0FBRXhELFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDOUIsSUFBSSxXQUF3QixDQUFDO0lBQzdCLElBQUksY0FBYyxHQUFhLEVBQUUsQ0FBQztJQUNsQyxJQUFJLGtCQUFrQixHQUFhLEVBQUUsQ0FBQztJQUN0QyxJQUFJLG9CQUFvQixHQUFhLEVBQUUsQ0FBQztJQUV4QyxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sSUFBQSxpQ0FBeUIsR0FBRSxDQUFDO1FBQ3pELFdBQVcsR0FBRyxJQUFJLHlCQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsd0NBQXdDO1FBQ3hDLEtBQUssTUFBTSxVQUFVLElBQUksa0JBQWtCLEVBQUUsQ0FBQztZQUM1QyxJQUFJLENBQUM7Z0JBQ0gsTUFBTSxXQUFXLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQy9DLENBQUM7WUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO2dCQUNmLHdCQUF3QjtZQUMxQixDQUFDO1FBQ0gsQ0FBQztRQUNELEtBQUssTUFBTSxNQUFNLElBQUksY0FBYyxFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDO2dCQUNILE1BQU0sV0FBVyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN2QyxDQUFDO1lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztnQkFDZix3QkFBd0I7WUFDMUIsQ0FBQztRQUNILENBQUM7UUFDRCxLQUFLLE1BQU0sWUFBWSxJQUFJLG9CQUFvQixFQUFFLENBQUM7WUFDaEQsSUFBSSxDQUFDO2dCQUNILE1BQU0s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SSxFQUFFO1lBQzdDLE1BQU07WUFDTixNQUFNLE1BQU0sR0FBRyxNQUFNLCtCQUFjLENBQUMsZUFBZSxFQUFFLENBQUM7WUFFdEQsU0FBUztZQUNULE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNoRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDaEQsTUFBTSxDQUFDLE9BQU8sTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNwRCxNQUFNLENBQUMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxPQUFPLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN0RCxNQUFNLENBQUMsT0FBTyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9raW0vdGl0by9zZXJ2ZXIvdGVzdHMvdW5pdC9zZXJ2aWNlcy9wYXlyb2xsU2VydmljZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBheXJvbGxTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc3JjL3NlcnZpY2VzL3BheXJvbGwvcGF5cm9sbFNlcnZpY2UnO1xuaW1wb3J0IHsgVGVzdEhlbHBlcnMgfSBmcm9tICcuLi8uLi91dGlscy90ZXN0SGVscGVycyc7XG5pbXBvcnQgeyBpbml0aWFsaXplVGVzdENvbm5lY3Rpb25zIH0gZnJvbSAnLi4vLi4vc2V0dXAnO1xuXG5kZXNjcmliZSgnUGF5cm9sbFNlcnZpY2UnLCAoKSA9PiB7XG4gIGxldCB0ZXN0SGVscGVyczogVGVzdEhlbHBlcnM7XG4gIGxldCBjcmVhdGVkVXNlcklkczogc3RyaW5nW10gPSBbXTtcbiAgbGV0IGNyZWF0ZWRFbXBsb3llZUlkczogc3RyaW5nW10gPSBbXTtcbiAgbGV0IGNyZWF0ZWREZXBhcnRtZW50SWRzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyB0ZXN0RGJQb29sIH0gPSBhd2FpdCBpbml0aWFsaXplVGVzdENvbm5lY3Rpb25zKCk7XG4gICAgdGVzdEhlbHBlcnMgPSBuZXcgVGVzdEhlbHBlcnModGVzdERiUG9vbCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG4gICAgLy8gQ2xlYW4gdXAgY3JlYXRlZCBkYXRhIGFmdGVyIGVhY2ggdGVzdFxuICAgIGZvciAoY29uc3QgZW1wbG95ZWVJZCBvZiBjcmVhdGVkRW1wbG95ZWVJZHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRlc3RIZWxwZXJzLmRlbGV0ZUVtcGxveWVlKGVtcGxveWVlSWQpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gSWdub3JlIGNsZWFudXAgZXJyb3JzXG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgdXNlcklkIG9mIGNyZWF0ZWRVc2VySWRzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0ZXN0SGVscGVycy5kZWxldGVVc2VyKHVzZXJJZCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBJZ25vcmUgY2xlYW51cCBlcnJvcnNcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBkZXBhcnRtZW50SWQgb2YgY3JlYXRlZERlcGFydG1lbnRJZHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRlc3RIZWxwZXJzLmRlbGV0ZURlcGFydG1lbnQoZGVwYXJ0bWVudElkKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIElnbm9yZSBjbGVhbnVwIGVycm9yc1xuICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVkVXNlcklkcyA9IFtdO1xuICAgIGNyZWF0ZWRFbXBsb3llZUlkcyA9IFtdO1xuICAgIGNyZWF0ZWREZXBhcnRtZW50SWRzID0gW107XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRQYXlyb2xsUGVyaW9kcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGdldCBwYXlyb2xsIHBlcmlvZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBheXJvbGxTZXJ2aWNlLmdldFBheXJvbGxQZXJpb2RzKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3BlcmlvZHMnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCd0b3RhbCcpO1xuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocmVzdWx0LnBlcmlvZHMpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHR5cGVvZiByZXN1bHQudG90YWwpLnRvQmUoJ251bWJlcicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0UGF5cm9sbFBlcmlvZCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBudWxsIGZvciBub24tZXhpc3RlbnQgcGVyaW9kJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwYXlyb2xsU2VydmljZS5nZXRQYXlyb2xsUGVyaW9kKCdub24tZXhpc3RlbnQtaWQnKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlTnVsbCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0UGF5cm9sbFJlY29yZHMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZXQgcGF5cm9sbCByZWNvcmRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwYXlyb2xsU2VydmljZS5nZXRQYXlyb2xsUmVjb3JkcygpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdyZWNvcmRzJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgndG90YWwnKTtcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHJlc3VsdC5yZWNvcmRzKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LnRvdGFsKS50b0JlKCdudW1iZXInKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldFBheXJvbGxSZWNvcmQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gbnVsbCBmb3Igbm9uLWV4aXN0ZW50IHJlY29yZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGF5cm9sbFNlcnZpY2UuZ2V0UGF5cm9sbFJlY29yZCgnbm9uLWV4aXN0ZW50LWlkJyk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZU51bGwoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldERlZHVjdGlvblR5cGVzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZ2V0IGRlZHVjdGlvbiB0eXBlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGF5cm9sbFNlcnZpY2UuZ2V0RGVkdWN0aW9uVHlwZXMoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgncmVjb3JkcycpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3RvdGFsJyk7XG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXN1bHQucmVjb3JkcykpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QodHlwZW9mIHJlc3VsdC50b3RhbCkudG9CZSgnbnVtYmVyJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRCZW5lZml0VHlwZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZXQgYmVuZWZpdCB0eXBlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGF5cm9sbFNlcnZpY2UuZ2V0QmVuZWZpdFR5cGVzKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3JlY29yZHMnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCd0b3RhbCcpO1xuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocmVzdWx0LnJlY29yZHMpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHR5cGVvZiByZXN1bHQudG90YWwpLnRvQmUoJ251bWJlcicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0RW1wbG95ZWVEZWR1Y3Rpb25CYWxhbmNlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGdldCBlbXBsb3llZSBkZWR1Y3Rpb24gYmFsYW5jZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBheXJvbGxTZXJ2aWNlLmdldEVtcGxveWVlRGVkdWN0aW9uQmFsYW5jZXMoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgncmVjb3JkcycpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3RvdGFsJyk7XG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXN1bHQucmVjb3JkcykpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QodHlwZW9mIHJlc3VsdC50b3RhbCkudG9CZSgnbnVtYmVyJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRFbXBsb3llZUJlbmVmaXRzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZ2V0IGVtcGxveWVlIGJlbmVmaXRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwYXlyb2xsU2VydmljZS5nZXRFbXBsb3llZUJlbmVmaXRzKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3JlY29yZHMnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCd0b3RhbCcpO1xuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocmVzdWx0LnJlY29yZHMpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHR5cGVvZiByZXN1bHQudG90YWwpLnRvQmUoJ251bWJlcicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0UGF5cm9sbFN0YXRzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZ2V0IHBheXJvbGwgc3RhdGlzdGljcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGF5cm9sbFNlcnZpY2UuZ2V0UGF5cm9sbFN0YXRzKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3RvdGFsRW1wbG95ZWVzJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgndG90YWxQYXlyb2xsJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgncHJvY2Vzc2VkUGVyaW9kcycpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3BlbmRpbmdQZXJpb2RzJyk7XG4gICAgICBleHBlY3QodHlwZW9mIHJlc3VsdC50b3RhbEVtcGxveWVlcykudG9CZSgnbnVtYmVyJyk7XG4gICAgICBleHBlY3QodHlwZW9mIHJlc3VsdC50b3RhbFBheXJvbGwpLnRvQmUoJ251bWJlcicpO1xuICAgICAgZXhwZWN0KHR5cGVvZiByZXN1bHQucHJvY2Vzc2VkUGVyaW9kcykudG9CZSgnbnVtYmVyJyk7XG4gICAgICBleHBlY3QodHlwZW9mIHJlc3VsdC5wZW5kaW5nUGVyaW9kcykudG9CZSgnbnVtYmVyJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sInZlcnNpb24iOjN9