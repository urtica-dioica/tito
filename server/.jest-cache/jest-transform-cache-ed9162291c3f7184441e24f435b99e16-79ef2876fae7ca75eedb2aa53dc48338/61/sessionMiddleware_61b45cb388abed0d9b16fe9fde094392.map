{"version":3,"names":["cov_12c3ddd1no","actualCoverage","redisService_1","s","require","jwt_1","redis_1","logger_1","__importDefault","sessionMiddleware","req","_res","next","f","token","headers","authorization","split","b","includes","sessionId","substring","decoded","verifyAccessToken","userId","isRedisAvailable","default","warn","sessionData","redisService","getSession","email","role","firstName","lastName","isActive","lastActivity","Date","toISOString","ipAddress","ip","connection","remoteAddress","userAgent","get","setSession","info","refreshSession","session","error","exports","requireSession","res","status","json","success","message","sessionCleanup","invalidateUserSessions","pattern","clearCache","getUserActiveSessions","keys","getKeys","sessions","key","getCache","push","trackSessionActivity","catch"],"sources":["/home/kim/tito/server/src/middleware/redis/sessionMiddleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { redisService } from '../../services/redis/redisService';\nimport { verifyAccessToken } from '../../config/jwt';\nimport { isRedisAvailable } from '../../config/redis';\nimport logger from '../../utils/logger';\n\nexport interface SessionData {\n  userId: string;\n  email: string;\n  role: string;\n  firstName: string;\n  lastName: string;\n  isActive: boolean;\n  lastActivity: string;\n  ipAddress: string;\n  userAgent: string;\n}\n\nexport interface AuthenticatedRequest extends Request {\n  session?: SessionData;\n  sessionId?: string;\n}\n\n/**\n * Session middleware that manages user sessions using Redis\n */\nexport const sessionMiddleware = async (\n  req: AuthenticatedRequest,\n  _res: Response,\n  next: NextFunction\n): Promise<void> => {\n  try {\n    const token = req.headers.authorization?.split(' ')[1];\n    \n    if (!token) {\n      // No token, continue without session\n      return next();\n    }\n\n    // Skip JWT verification for development tokens\n    if (token.includes('test-token') || token.includes('dept-head-token') || token.includes('employee-token')) {\n      // For development tokens, create a mock session ID\n      const sessionId = `dev-session:${token.substring(0, 16)}`;\n      req.sessionId = sessionId;\n      return next();\n    }\n\n    // Verify the JWT token\n    const decoded = verifyAccessToken(token) as any;\n    if (!decoded || !decoded.userId) {\n      // Invalid token, continue without session\n      return next();\n    }\n\n    // Generate session ID from user ID and token\n    const sessionId = `session:${decoded.userId}:${token.substring(0, 16)}`;\n    req.sessionId = sessionId;\n\n    // Skip session management if Redis is not available (e.g., in test environment)\n    if (!isRedisAvailable()) {\n      logger.warn('Redis not available, skipping session management');\n      return next();\n    }\n\n    // Try to get existing session from Redis\n    let sessionData = await redisService.getSession<SessionData>(sessionId);\n\n    if (!sessionData) {\n      // Create new session\n      sessionData = {\n        userId: decoded.userId,\n        email: decoded.email,\n        role: decoded.role,\n        firstName: decoded.firstName,\n        lastName: decoded.lastName,\n        isActive: decoded.isActive,\n        lastActivity: new Date().toISOString(),\n        ipAddress: req.ip || req.connection.remoteAddress || 'unknown',\n        userAgent: req.get('User-Agent') || 'unknown'\n      };\n\n      // Store session in Redis with 24-hour expiry\n      await redisService.setSession(sessionId, sessionData, 86400);\n      logger.info(`New session created for user ${decoded.userId}`);\n    } else {\n      // Update last activity\n      sessionData.lastActivity = new Date().toISOString();\n      sessionData.ipAddress = req.ip || req.connection.remoteAddress || 'unknown';\n      sessionData.userAgent = req.get('User-Agent') || 'unknown';\n\n      // Refresh session expiry\n      await redisService.refreshSession(sessionId, 86400);\n    }\n\n    req.session = sessionData;\n    next();\n  } catch (error) {\n    logger.error('Session middleware error:', error);\n    // Continue without session on error\n    next();\n  }\n};\n\n/**\n * Session validation middleware - ensures valid session exists\n */\nexport const requireSession = (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n): void => {\n  if (!req.session) {\n    res.status(401).json({\n      success: false,\n      message: 'Valid session required',\n      error: 'SESSION_REQUIRED'\n    });\n    return;\n  }\n\n  // Check if session is still active\n  if (!req.session.isActive) {\n    res.status(401).json({\n      success: false,\n      message: 'Session is inactive',\n      error: 'SESSION_INACTIVE'\n    });\n    return;\n  }\n\n  next();\n};\n\n/**\n * Session cleanup middleware - removes expired sessions\n */\nexport const sessionCleanup = async (): Promise<void> => {\n  try {\n    // This would typically run as a scheduled job\n    // For now, we'll just log that it's available\n    logger.info('Session cleanup middleware available');\n  } catch (error) {\n    logger.error('Session cleanup error:', error);\n  }\n};\n\n/**\n * Invalidate user sessions (for logout, password change, etc.)\n */\nexport const invalidateUserSessions = async (userId: string): Promise<void> => {\n  try {\n    const pattern = `session:${userId}:*`;\n    await redisService.clearCache(pattern);\n    logger.info(`Invalidated all sessions for user ${userId}`);\n  } catch (error) {\n    logger.error(`Failed to invalidate sessions for user ${userId}:`, error);\n  }\n};\n\n/**\n * Get active sessions for a user\n */\nexport const getUserActiveSessions = async (userId: string): Promise<SessionData[]> => {\n  try {\n    const pattern = `session:${userId}:*`;\n    const keys = await redisService.getKeys(pattern);\n    const sessions: SessionData[] = [];\n\n    for (const key of keys) {\n      const sessionData = await redisService.getCache<SessionData>(key);\n      if (sessionData) {\n        sessions.push(sessionData);\n      }\n    }\n\n    return sessions;\n  } catch (error) {\n    logger.error(`Failed to get active sessions for user ${userId}:`, error);\n    return [];\n  }\n};\n\n/**\n * Session activity tracking middleware\n */\nexport const trackSessionActivity = (\n  req: AuthenticatedRequest,\n  _res: Response,\n  next: NextFunction\n): void => {\n  if (req.session && req.sessionId) {\n    // Update last activity in background\n    redisService.refreshSession(req.sessionId, 86400).catch(error => {\n      logger.error('Failed to refresh session activity:', error);\n    });\n  }\n  next();\n}; "],"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","ignoreList":[]}