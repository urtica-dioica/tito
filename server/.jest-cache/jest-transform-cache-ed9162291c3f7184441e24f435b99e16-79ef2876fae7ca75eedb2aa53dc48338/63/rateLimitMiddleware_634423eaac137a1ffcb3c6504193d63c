e6b4b28bca6a8905f57e57d1605faf6e
"use strict";

/* istanbul ignore next */
function cov_10o5jfi1yy() {
  var path = "/home/kim/tito/server/src/middleware/redis/rateLimitMiddleware.ts";
  var hash = "da6745e8a276b87df1bad9d0bd66e922c10bfe7e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/middleware/redis/rateLimitMiddleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 183
        }
      },
      "4": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 67
        }
      },
      "5": {
        start: {
          line: 8,
          column: 16
        },
        end: {
          line: 8,
          column: 45
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 63
        }
      },
      "7": {
        start: {
          line: 13,
          column: 29
        },
        end: {
          line: 70,
          column: 1
        }
      },
      "8": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 69,
          column: 6
        }
      },
      "9": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "10": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 20,
          column: 13
        }
      },
      "11": {
        start: {
          line: 18,
          column: 16
        },
        end: {
          line: 18,
          column: 85
        }
      },
      "12": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 30
        }
      },
      "13": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 24,
          column: 63
        }
      },
      "14": {
        start: {
          line: 26,
          column: 33
        },
        end: {
          line: 26,
          column: 125
        }
      },
      "15": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "16": {
        start: {
          line: 29,
          column: 34
        },
        end: {
          line: 29,
          column: 67
        }
      },
      "17": {
        start: {
          line: 30,
          column: 35
        },
        end: {
          line: 30,
          column: 44
        }
      },
      "18": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 37,
          column: 19
        }
      },
      "19": {
        start: {
          line: 38,
          column: 35
        },
        end: {
          line: 38,
          column: 59
        }
      },
      "20": {
        start: {
          line: 39,
          column: 32
        },
        end: {
          line: 39,
          column: 94
        }
      },
      "21": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 50,
          column: 19
        }
      },
      "22": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 23
        }
      },
      "23": {
        start: {
          line: 54,
          column: 30
        },
        end: {
          line: 54,
          column: 76
        }
      },
      "24": {
        start: {
          line: 55,
          column: 30
        },
        end: {
          line: 55,
          column: 63
        }
      },
      "25": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 60,
          column: 15
        }
      },
      "26": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 19
        }
      },
      "27": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 66
        }
      },
      "28": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 19
        }
      },
      "29": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 71,
          column: 52
        }
      },
      "30": {
        start: {
          line: 75,
          column: 28
        },
        end: {
          line: 118,
          column: 1
        }
      },
      "31": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 117,
          column: 6
        }
      },
      "32": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "33": {
        start: {
          line: 79,
          column: 27
        },
        end: {
          line: 79,
          column: 66
        }
      },
      "34": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 80,
          column: 63
        }
      },
      "35": {
        start: {
          line: 81,
          column: 33
        },
        end: {
          line: 81,
          column: 125
        }
      },
      "36": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "37": {
        start: {
          line: 83,
          column: 34
        },
        end: {
          line: 83,
          column: 67
        }
      },
      "38": {
        start: {
          line: 84,
          column: 35
        },
        end: {
          line: 84,
          column: 44
        }
      },
      "39": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 90,
          column: 19
        }
      },
      "40": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 101,
          column: 19
        }
      },
      "41": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 23
        }
      },
      "42": {
        start: {
          line: 104,
          column: 30
        },
        end: {
          line: 104,
          column: 76
        }
      },
      "43": {
        start: {
          line: 105,
          column: 30
        },
        end: {
          line: 105,
          column: 63
        }
      },
      "44": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "45": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 19
        }
      },
      "46": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 71
        }
      },
      "47": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 19
        }
      },
      "48": {
        start: {
          line: 119,
          column: 0
        },
        end: {
          line: 119,
          column: 50
        }
      },
      "49": {
        start: {
          line: 123,
          column: 34
        },
        end: {
          line: 166,
          column: 1
        }
      },
      "50": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 165,
          column: 6
        }
      },
      "51": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "52": {
        start: {
          line: 127,
          column: 33
        },
        end: {
          line: 127,
          column: 102
        }
      },
      "53": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 128,
          column: 69
        }
      },
      "54": {
        start: {
          line: 129,
          column: 33
        },
        end: {
          line: 129,
          column: 125
        }
      },
      "55": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "56": {
        start: {
          line: 131,
          column: 34
        },
        end: {
          line: 131,
          column: 67
        }
      },
      "57": {
        start: {
          line: 132,
          column: 35
        },
        end: {
          line: 132,
          column: 44
        }
      },
      "58": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 138,
          column: 19
        }
      },
      "59": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 149,
          column: 19
        }
      },
      "60": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 23
        }
      },
      "61": {
        start: {
          line: 152,
          column: 30
        },
        end: {
          line: 152,
          column: 76
        }
      },
      "62": {
        start: {
          line: 153,
          column: 30
        },
        end: {
          line: 153,
          column: 63
        }
      },
      "63": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 158,
          column: 15
        }
      },
      "64": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 19
        }
      },
      "65": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 77
        }
      },
      "66": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 19
        }
      },
      "67": {
        start: {
          line: 167,
          column: 0
        },
        end: {
          line: 167,
          column: 62
        }
      },
      "68": {
        start: {
          line: 171,
          column: 0
        },
        end: {
          line: 202,
          column: 2
        }
      },
      "69": {
        start: {
          line: 206,
          column: 25
        },
        end: {
          line: 222,
          column: 1
        }
      },
      "70": {
        start: {
          line: 207,
          column: 4
        },
        end: {
          line: 221,
          column: 5
        }
      },
      "71": {
        start: {
          line: 208,
          column: 22
        },
        end: {
          line: 208,
          column: 73
        }
      },
      "72": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 210,
          column: 24
        }
      },
      "73": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 24
        }
      },
      "74": {
        start: {
          line: 212,
          column: 22
        },
        end: {
          line: 212,
          column: 25
        }
      },
      "75": {
        start: {
          line: 213,
          column: 26
        },
        end: {
          line: 213,
          column: 52
        }
      },
      "76": {
        start: {
          line: 214,
          column: 22
        },
        end: {
          line: 214,
          column: 24
        }
      },
      "77": {
        start: {
          line: 215,
          column: 27
        },
        end: {
          line: 215,
          column: 53
        }
      },
      "78": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 55
        }
      },
      "79": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 72
        }
      },
      "80": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 20
        }
      },
      "81": {
        start: {
          line: 223,
          column: 0
        },
        end: {
          line: 223,
          column: 44
        }
      },
      "82": {
        start: {
          line: 227,
          column: 23
        },
        end: {
          line: 234,
          column: 1
        }
      },
      "83": {
        start: {
          line: 228,
          column: 4
        },
        end: {
          line: 233,
          column: 5
        }
      },
      "84": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 59
        }
      },
      "85": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 69
        }
      },
      "86": {
        start: {
          line: 235,
          column: 0
        },
        end: {
          line: 235,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 13,
            column: 30
          }
        },
        loc: {
          start: {
            line: 13,
            column: 41
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 12
          }
        },
        loc: {
          start: {
            line: 14,
            column: 37
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 14
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 75,
            column: 28
          },
          end: {
            line: 75,
            column: 29
          }
        },
        loc: {
          start: {
            line: 75,
            column: 40
          },
          end: {
            line: 118,
            column: 1
          }
        },
        line: 75
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 76,
            column: 11
          },
          end: {
            line: 76,
            column: 12
          }
        },
        loc: {
          start: {
            line: 76,
            column: 37
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 76
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 123,
            column: 34
          },
          end: {
            line: 123,
            column: 35
          }
        },
        loc: {
          start: {
            line: 123,
            column: 46
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 123
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 124,
            column: 11
          },
          end: {
            line: 124,
            column: 12
          }
        },
        loc: {
          start: {
            line: 124,
            column: 37
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 124
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 206,
            column: 25
          },
          end: {
            line: 206,
            column: 26
          }
        },
        loc: {
          start: {
            line: 206,
            column: 40
          },
          end: {
            line: 222,
            column: 1
          }
        },
        line: 206
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 227,
            column: 23
          },
          end: {
            line: 227,
            column: 24
          }
        },
        loc: {
          start: {
            line: 227,
            column: 38
          },
          end: {
            line: 234,
            column: 1
          }
        },
        line: 227
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 20,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 20,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 22,
            column: 24
          },
          end: {
            line: 24,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 23,
            column: 40
          }
        }, {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 63
          }
        }],
        line: 22
      },
      "5": {
        loc: {
          start: {
            line: 24,
            column: 30
          },
          end: {
            line: 24,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 30
          },
          end: {
            line: 24,
            column: 36
          }
        }, {
          start: {
            line: 24,
            column: 40
          },
          end: {
            line: 24,
            column: 49
          }
        }],
        line: 24
      },
      "6": {
        loc: {
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "7": {
        loc: {
          start: {
            line: 38,
            column: 35
          },
          end: {
            line: 38,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 35
          },
          end: {
            line: 38,
            column: 52
          }
        }, {
          start: {
            line: 38,
            column: 56
          },
          end: {
            line: 38,
            column: 59
          }
        }],
        line: 38
      },
      "8": {
        loc: {
          start: {
            line: 39,
            column: 32
          },
          end: {
            line: 39,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 32
          },
          end: {
            line: 39,
            column: 46
          }
        }, {
          start: {
            line: 39,
            column: 50
          },
          end: {
            line: 39,
            column: 94
          }
        }],
        line: 39
      },
      "9": {
        loc: {
          start: {
            line: 79,
            column: 27
          },
          end: {
            line: 79,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 27
          },
          end: {
            line: 79,
            column: 43
          }
        }, {
          start: {
            line: 79,
            column: 47
          },
          end: {
            line: 79,
            column: 53
          }
        }, {
          start: {
            line: 79,
            column: 57
          },
          end: {
            line: 79,
            column: 66
          }
        }],
        line: 79
      },
      "10": {
        loc: {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "11": {
        loc: {
          start: {
            line: 127,
            column: 33
          },
          end: {
            line: 127,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 33
          },
          end: {
            line: 127,
            column: 59
          }
        }, {
          start: {
            line: 127,
            column: 63
          },
          end: {
            line: 127,
            column: 89
          }
        }, {
          start: {
            line: 127,
            column: 93
          },
          end: {
            line: 127,
            column: 102
          }
        }],
        line: 127
      },
      "12": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "13": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 210,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 210,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "14": {
        loc: {
          start: {
            line: 215,
            column: 27
          },
          end: {
            line: 215,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 215,
            column: 44
          },
          end: {
            line: 215,
            column: 49
          }
        }, {
          start: {
            line: 215,
            column: 52
          },
          end: {
            line: 215,
            column: 53
          }
        }],
        line: 215
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/middleware/redis/rateLimitMiddleware.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/middleware/redis/rateLimitMiddleware.ts"],
      sourcesContent: ["import { Request, Response, NextFunction } from 'express';\nimport { redisService } from '../../services/redis/redisService';\nimport { isRedisAvailable } from '../../config/redis';\nimport logger from '../../utils/logger';\n\nexport interface RateLimitConfig {\n  windowMs: number;        // Time window in milliseconds\n  maxRequests: number;     // Maximum requests per window\n  keyGenerator?: (req: Request) => string; // Custom key generator\n  skipSuccessfulRequests?: boolean; // Skip counting successful requests\n  skipFailedRequests?: boolean;     // Skip counting failed requests\n  message?: string;        // Custom error message\n  statusCode?: number;     // Custom status code\n}\n\nexport interface RateLimitInfo {\n  limit: number;\n  remaining: number;\n  reset: number;\n  retryAfter: number;\n}\n\n/**\n * Redis-based rate limiting middleware\n */\nexport const createRedisRateLimit = (config: RateLimitConfig) => {\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // Skip rate limiting if Redis is not available (e.g., in test environment)\n      if (!isRedisAvailable()) {\n        logger.warn('Redis not available, skipping rate limiting');\n        return next();\n      }\n\n      // Generate rate limit key\n      const key = config.keyGenerator ? \n        config.keyGenerator(req) : \n        `rate_limit:${req.ip || 'unknown'}:${req.path}`;\n\n      // Check if rate limit is exceeded\n      const currentCount = await redisService.incrementRateLimit(key, Math.ceil(config.windowMs / 1000));\n      \n      if (currentCount > config.maxRequests) {\n        // Rate limit exceeded\n        const resetTime = Math.ceil(config.windowMs / 1000);\n        const retryAfter = resetTime;\n        \n        // Set rate limit headers\n        res.set({\n          'X-RateLimit-Limit': config.maxRequests.toString(),\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': resetTime.toString(),\n          'Retry-After': retryAfter.toString()\n        });\n\n        const statusCode = config.statusCode || 429;\n        const message = config.message || 'Too many requests, please try again later.';\n\n        res.status(statusCode).json({\n          success: false,\n          message,\n          error: 'RATE_LIMIT_EXCEEDED',\n          rateLimit: {\n            limit: config.maxRequests,\n            remaining: 0,\n            reset: resetTime,\n            retryAfter\n          }\n        });\n        return;\n      }\n\n      // Rate limit not exceeded, set headers\n      const remaining = Math.max(0, config.maxRequests - currentCount);\n      const resetTime = Math.ceil(config.windowMs / 1000);\n\n      res.set({\n        'X-RateLimit-Limit': config.maxRequests.toString(),\n        'X-RateLimit-Remaining': remaining.toString(),\n        'X-RateLimit-Reset': resetTime.toString()\n      });\n\n      // Continue to next middleware\n      next();\n    } catch (error) {\n      logger.error('Rate limiting error:', error);\n      // On Redis error, allow request to proceed\n      next();\n    }\n  };\n};\n\n/**\n * User-specific rate limiting (based on user ID)\n */\nexport const createUserRateLimit = (config: RateLimitConfig) => {\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // Get user ID from request (assuming it's set by auth middleware)\n      const userId = (req as any).user?.userId || req.ip || 'unknown';\n      const key = `rate_limit:user:${userId}:${req.path}`;\n\n      const currentCount = await redisService.incrementRateLimit(key, Math.ceil(config.windowMs / 1000));\n      \n      if (currentCount > config.maxRequests) {\n        const resetTime = Math.ceil(config.windowMs / 1000);\n        const retryAfter = resetTime;\n        \n        res.set({\n          'X-RateLimit-Limit': config.maxRequests.toString(),\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': resetTime.toString(),\n          'Retry-After': retryAfter.toString()\n        });\n\n        res.status(429).json({\n          success: false,\n          message: 'User rate limit exceeded',\n          error: 'USER_RATE_LIMIT_EXCEEDED',\n          rateLimit: {\n            limit: config.maxRequests,\n            remaining: 0,\n            reset: resetTime,\n            retryAfter\n          }\n        });\n        return;\n      }\n\n      const remaining = Math.max(0, config.maxRequests - currentCount);\n      const resetTime = Math.ceil(config.windowMs / 1000);\n\n      res.set({\n        'X-RateLimit-Limit': config.maxRequests.toString(),\n        'X-RateLimit-Remaining': remaining.toString(),\n        'X-RateLimit-Reset': resetTime.toString()\n      });\n\n      next();\n    } catch (error) {\n      logger.error('User rate limiting error:', error);\n      next();\n    }\n  };\n};\n\n/**\n * Department-specific rate limiting\n */\nexport const createDepartmentRateLimit = (config: RateLimitConfig) => {\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      // Get department ID from request\n      const departmentId = (req as any).user?.['departmentId'] || req.params['departmentId'] || 'unknown';\n      const key = `rate_limit:dept:${departmentId}:${req.path}`;\n\n      const currentCount = await redisService.incrementRateLimit(key, Math.ceil(config.windowMs / 1000));\n      \n      if (currentCount > config.maxRequests) {\n        const resetTime = Math.ceil(config.windowMs / 1000);\n        const retryAfter = resetTime;\n        \n        res.set({\n          'X-RateLimit-Limit': config.maxRequests.toString(),\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': resetTime.toString(),\n          'Retry-After': retryAfter.toString()\n        });\n\n        res.status(429).json({\n          success: false,\n          message: 'Department rate limit exceeded',\n          error: 'DEPARTMENT_RATE_LIMIT_EXCEEDED',\n          rateLimit: {\n            limit: config.maxRequests,\n            remaining: 0,\n            reset: resetTime,\n            retryAfter\n          }\n        });\n        return;\n      }\n\n      const remaining = Math.max(0, config.maxRequests - currentCount);\n      const resetTime = Math.ceil(config.windowMs / 1000);\n\n      res.set({\n        'X-RateLimit-Limit': config.maxRequests.toString(),\n        'X-RateLimit-Remaining': remaining.toString(),\n        'X-RateLimit-Reset': resetTime.toString()\n      });\n\n      next();\n    } catch (error) {\n      logger.error('Department rate limiting error:', error);\n      next();\n    }\n  };\n};\n\n/**\n * Predefined rate limit configurations\n */\nexport const rateLimitConfigs = {\n  // Strict rate limiting for authentication endpoints\n  auth: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 5,\n    message: 'Too many authentication attempts, please try again later.'\n  },\n\n  // Standard rate limiting for API endpoints\n  api: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 100,\n    message: 'API rate limit exceeded, please try again later.'\n  },\n\n  // User-specific rate limiting\n  user: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 50,\n    message: 'User rate limit exceeded, please try again later.'\n  },\n\n  // Department-specific rate limiting\n  department: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 200,\n    message: 'Department rate limit exceeded, please try again later.'\n  },\n\n  // File upload rate limiting\n  upload: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 10,\n    message: 'Upload rate limit exceeded, please try again later.'\n  }\n};\n\n/**\n * Get rate limit information for a key\n */\nexport const getRateLimitInfo = async (key: string): Promise<RateLimitInfo | null> => {\n  try {\n    const count = await redisService.getRateLimit(key);\n    if (count === null) return null;\n\n    // This is a simplified version - in production you'd want to store the limit and window\n    const limit = 100; // Default limit\n    const remaining = Math.max(0, limit - count);\n    const reset = 60; // Default 60 seconds\n    const retryAfter = count >= limit ? reset : 0;\n\n    return { limit, remaining, reset, retryAfter };\n  } catch (error) {\n    logger.error('Failed to get rate limit info:', error);\n    return null;\n  }\n};\n\n/**\n * Reset rate limit for a key\n */\nexport const resetRateLimit = async (key: string): Promise<void> => {\n  try {\n    await redisService.deleteCache(key);\n  } catch (error) {\n    logger.error('Failed to reset rate limit:', error);\n  }\n}; "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "da6745e8a276b87df1bad9d0bd66e922c10bfe7e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10o5jfi1yy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10o5jfi1yy();
var __importDefault =
/* istanbul ignore next */
(cov_10o5jfi1yy().s[0]++,
/* istanbul ignore next */
(cov_10o5jfi1yy().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_10o5jfi1yy().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_10o5jfi1yy().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_10o5jfi1yy().f[0]++;
  cov_10o5jfi1yy().s[1]++;
  return /* istanbul ignore next */(cov_10o5jfi1yy().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_10o5jfi1yy().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_10o5jfi1yy().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_10o5jfi1yy().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_10o5jfi1yy().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_10o5jfi1yy().s[3]++;
exports.resetRateLimit = exports.getRateLimitInfo = exports.rateLimitConfigs = exports.createDepartmentRateLimit = exports.createUserRateLimit = exports.createRedisRateLimit = void 0;
const redisService_1 =
/* istanbul ignore next */
(cov_10o5jfi1yy().s[4]++, require("../../services/redis/redisService"));
const redis_1 =
/* istanbul ignore next */
(cov_10o5jfi1yy().s[5]++, require("../../config/redis"));
const logger_1 =
/* istanbul ignore next */
(cov_10o5jfi1yy().s[6]++, __importDefault(require("../../utils/logger")));
/**
 * Redis-based rate limiting middleware
 */
/* istanbul ignore next */
cov_10o5jfi1yy().s[7]++;
const createRedisRateLimit = config => {
  /* istanbul ignore next */
  cov_10o5jfi1yy().f[1]++;
  cov_10o5jfi1yy().s[8]++;
  return async (req, res, next) => {
    /* istanbul ignore next */
    cov_10o5jfi1yy().f[2]++;
    cov_10o5jfi1yy().s[9]++;
    try {
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[10]++;
      // Skip rate limiting if Redis is not available (e.g., in test environment)
      if (!(0, redis_1.isRedisAvailable)()) {
        /* istanbul ignore next */
        cov_10o5jfi1yy().b[3][0]++;
        cov_10o5jfi1yy().s[11]++;
        logger_1.default.warn('Redis not available, skipping rate limiting');
        /* istanbul ignore next */
        cov_10o5jfi1yy().s[12]++;
        return next();
      } else
      /* istanbul ignore next */
      {
        cov_10o5jfi1yy().b[3][1]++;
      }
      // Generate rate limit key
      const key =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[13]++, config.keyGenerator ?
      /* istanbul ignore next */
      (cov_10o5jfi1yy().b[4][0]++, config.keyGenerator(req)) :
      /* istanbul ignore next */
      (cov_10o5jfi1yy().b[4][1]++, `rate_limit:${
      /* istanbul ignore next */
      (cov_10o5jfi1yy().b[5][0]++, req.ip) ||
      /* istanbul ignore next */
      (cov_10o5jfi1yy().b[5][1]++, 'unknown')}:${req.path}`));
      // Check if rate limit is exceeded
      const currentCount =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[14]++, await redisService_1.redisService.incrementRateLimit(key, Math.ceil(config.windowMs / 1000)));
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[15]++;
      if (currentCount > config.maxRequests) {
        /* istanbul ignore next */
        cov_10o5jfi1yy().b[6][0]++;
        // Rate limit exceeded
        const resetTime =
        /* istanbul ignore next */
        (cov_10o5jfi1yy().s[16]++, Math.ceil(config.windowMs / 1000));
        const retryAfter =
        /* istanbul ignore next */
        (cov_10o5jfi1yy().s[17]++, resetTime);
        // Set rate limit headers
        /* istanbul ignore next */
        cov_10o5jfi1yy().s[18]++;
        res.set({
          'X-RateLimit-Limit': config.maxRequests.toString(),
          'X-RateLimit-Remaining': '0',
          'X-RateLimit-Reset': resetTime.toString(),
          'Retry-After': retryAfter.toString()
        });
        const statusCode =
        /* istanbul ignore next */
        (cov_10o5jfi1yy().s[19]++,
        /* istanbul ignore next */
        (cov_10o5jfi1yy().b[7][0]++, config.statusCode) ||
        /* istanbul ignore next */
        (cov_10o5jfi1yy().b[7][1]++, 429));
        const message =
        /* istanbul ignore next */
        (cov_10o5jfi1yy().s[20]++,
        /* istanbul ignore next */
        (cov_10o5jfi1yy().b[8][0]++, config.message) ||
        /* istanbul ignore next */
        (cov_10o5jfi1yy().b[8][1]++, 'Too many requests, please try again later.'));
        /* istanbul ignore next */
        cov_10o5jfi1yy().s[21]++;
        res.status(statusCode).json({
          success: false,
          message,
          error: 'RATE_LIMIT_EXCEEDED',
          rateLimit: {
            limit: config.maxRequests,
            remaining: 0,
            reset: resetTime,
            retryAfter
          }
        });
        /* istanbul ignore next */
        cov_10o5jfi1yy().s[22]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_10o5jfi1yy().b[6][1]++;
      }
      // Rate limit not exceeded, set headers
      const remaining =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[23]++, Math.max(0, config.maxRequests - currentCount));
      const resetTime =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[24]++, Math.ceil(config.windowMs / 1000));
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[25]++;
      res.set({
        'X-RateLimit-Limit': config.maxRequests.toString(),
        'X-RateLimit-Remaining': remaining.toString(),
        'X-RateLimit-Reset': resetTime.toString()
      });
      // Continue to next middleware
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[26]++;
      next();
    } catch (error) {
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[27]++;
      logger_1.default.error('Rate limiting error:', error);
      // On Redis error, allow request to proceed
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[28]++;
      next();
    }
  };
};
/* istanbul ignore next */
cov_10o5jfi1yy().s[29]++;
exports.createRedisRateLimit = createRedisRateLimit;
/**
 * User-specific rate limiting (based on user ID)
 */
/* istanbul ignore next */
cov_10o5jfi1yy().s[30]++;
const createUserRateLimit = config => {
  /* istanbul ignore next */
  cov_10o5jfi1yy().f[3]++;
  cov_10o5jfi1yy().s[31]++;
  return async (req, res, next) => {
    /* istanbul ignore next */
    cov_10o5jfi1yy().f[4]++;
    cov_10o5jfi1yy().s[32]++;
    try {
      // Get user ID from request (assuming it's set by auth middleware)
      const userId =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[33]++,
      /* istanbul ignore next */
      (cov_10o5jfi1yy().b[9][0]++, req.user?.userId) ||
      /* istanbul ignore next */
      (cov_10o5jfi1yy().b[9][1]++, req.ip) ||
      /* istanbul ignore next */
      (cov_10o5jfi1yy().b[9][2]++, 'unknown'));
      const key =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[34]++, `rate_limit:user:${userId}:${req.path}`);
      const currentCount =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[35]++, await redisService_1.redisService.incrementRateLimit(key, Math.ceil(config.windowMs / 1000)));
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[36]++;
      if (currentCount > config.maxRequests) {
        /* istanbul ignore next */
        cov_10o5jfi1yy().b[10][0]++;
        const resetTime =
        /* istanbul ignore next */
        (cov_10o5jfi1yy().s[37]++, Math.ceil(config.windowMs / 1000));
        const retryAfter =
        /* istanbul ignore next */
        (cov_10o5jfi1yy().s[38]++, resetTime);
        /* istanbul ignore next */
        cov_10o5jfi1yy().s[39]++;
        res.set({
          'X-RateLimit-Limit': config.maxRequests.toString(),
          'X-RateLimit-Remaining': '0',
          'X-RateLimit-Reset': resetTime.toString(),
          'Retry-After': retryAfter.toString()
        });
        /* istanbul ignore next */
        cov_10o5jfi1yy().s[40]++;
        res.status(429).json({
          success: false,
          message: 'User rate limit exceeded',
          error: 'USER_RATE_LIMIT_EXCEEDED',
          rateLimit: {
            limit: config.maxRequests,
            remaining: 0,
            reset: resetTime,
            retryAfter
          }
        });
        /* istanbul ignore next */
        cov_10o5jfi1yy().s[41]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_10o5jfi1yy().b[10][1]++;
      }
      const remaining =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[42]++, Math.max(0, config.maxRequests - currentCount));
      const resetTime =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[43]++, Math.ceil(config.windowMs / 1000));
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[44]++;
      res.set({
        'X-RateLimit-Limit': config.maxRequests.toString(),
        'X-RateLimit-Remaining': remaining.toString(),
        'X-RateLimit-Reset': resetTime.toString()
      });
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[45]++;
      next();
    } catch (error) {
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[46]++;
      logger_1.default.error('User rate limiting error:', error);
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[47]++;
      next();
    }
  };
};
/* istanbul ignore next */
cov_10o5jfi1yy().s[48]++;
exports.createUserRateLimit = createUserRateLimit;
/**
 * Department-specific rate limiting
 */
/* istanbul ignore next */
cov_10o5jfi1yy().s[49]++;
const createDepartmentRateLimit = config => {
  /* istanbul ignore next */
  cov_10o5jfi1yy().f[5]++;
  cov_10o5jfi1yy().s[50]++;
  return async (req, res, next) => {
    /* istanbul ignore next */
    cov_10o5jfi1yy().f[6]++;
    cov_10o5jfi1yy().s[51]++;
    try {
      // Get department ID from request
      const departmentId =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[52]++,
      /* istanbul ignore next */
      (cov_10o5jfi1yy().b[11][0]++, req.user?.['departmentId']) ||
      /* istanbul ignore next */
      (cov_10o5jfi1yy().b[11][1]++, req.params['departmentId']) ||
      /* istanbul ignore next */
      (cov_10o5jfi1yy().b[11][2]++, 'unknown'));
      const key =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[53]++, `rate_limit:dept:${departmentId}:${req.path}`);
      const currentCount =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[54]++, await redisService_1.redisService.incrementRateLimit(key, Math.ceil(config.windowMs / 1000)));
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[55]++;
      if (currentCount > config.maxRequests) {
        /* istanbul ignore next */
        cov_10o5jfi1yy().b[12][0]++;
        const resetTime =
        /* istanbul ignore next */
        (cov_10o5jfi1yy().s[56]++, Math.ceil(config.windowMs / 1000));
        const retryAfter =
        /* istanbul ignore next */
        (cov_10o5jfi1yy().s[57]++, resetTime);
        /* istanbul ignore next */
        cov_10o5jfi1yy().s[58]++;
        res.set({
          'X-RateLimit-Limit': config.maxRequests.toString(),
          'X-RateLimit-Remaining': '0',
          'X-RateLimit-Reset': resetTime.toString(),
          'Retry-After': retryAfter.toString()
        });
        /* istanbul ignore next */
        cov_10o5jfi1yy().s[59]++;
        res.status(429).json({
          success: false,
          message: 'Department rate limit exceeded',
          error: 'DEPARTMENT_RATE_LIMIT_EXCEEDED',
          rateLimit: {
            limit: config.maxRequests,
            remaining: 0,
            reset: resetTime,
            retryAfter
          }
        });
        /* istanbul ignore next */
        cov_10o5jfi1yy().s[60]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_10o5jfi1yy().b[12][1]++;
      }
      const remaining =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[61]++, Math.max(0, config.maxRequests - currentCount));
      const resetTime =
      /* istanbul ignore next */
      (cov_10o5jfi1yy().s[62]++, Math.ceil(config.windowMs / 1000));
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[63]++;
      res.set({
        'X-RateLimit-Limit': config.maxRequests.toString(),
        'X-RateLimit-Remaining': remaining.toString(),
        'X-RateLimit-Reset': resetTime.toString()
      });
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[64]++;
      next();
    } catch (error) {
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[65]++;
      logger_1.default.error('Department rate limiting error:', error);
      /* istanbul ignore next */
      cov_10o5jfi1yy().s[66]++;
      next();
    }
  };
};
/* istanbul ignore next */
cov_10o5jfi1yy().s[67]++;
exports.createDepartmentRateLimit = createDepartmentRateLimit;
/**
 * Predefined rate limit configurations
 */
/* istanbul ignore next */
cov_10o5jfi1yy().s[68]++;
exports.rateLimitConfigs = {
  // Strict rate limiting for authentication endpoints
  auth: {
    windowMs: 15 * 60 * 1000,
    // 15 minutes
    maxRequests: 5,
    message: 'Too many authentication attempts, please try again later.'
  },
  // Standard rate limiting for API endpoints
  api: {
    windowMs: 60 * 1000,
    // 1 minute
    maxRequests: 100,
    message: 'API rate limit exceeded, please try again later.'
  },
  // User-specific rate limiting
  user: {
    windowMs: 60 * 1000,
    // 1 minute
    maxRequests: 50,
    message: 'User rate limit exceeded, please try again later.'
  },
  // Department-specific rate limiting
  department: {
    windowMs: 60 * 1000,
    // 1 minute
    maxRequests: 200,
    message: 'Department rate limit exceeded, please try again later.'
  },
  // File upload rate limiting
  upload: {
    windowMs: 60 * 1000,
    // 1 minute
    maxRequests: 10,
    message: 'Upload rate limit exceeded, please try again later.'
  }
};
/**
 * Get rate limit information for a key
 */
/* istanbul ignore next */
cov_10o5jfi1yy().s[69]++;
const getRateLimitInfo = async key => {
  /* istanbul ignore next */
  cov_10o5jfi1yy().f[7]++;
  cov_10o5jfi1yy().s[70]++;
  try {
    const count =
    /* istanbul ignore next */
    (cov_10o5jfi1yy().s[71]++, await redisService_1.redisService.getRateLimit(key));
    /* istanbul ignore next */
    cov_10o5jfi1yy().s[72]++;
    if (count === null) {
      /* istanbul ignore next */
      cov_10o5jfi1yy().b[13][0]++;
      cov_10o5jfi1yy().s[73]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_10o5jfi1yy().b[13][1]++;
    }
    // This is a simplified version - in production you'd want to store the limit and window
    const limit =
    /* istanbul ignore next */
    (cov_10o5jfi1yy().s[74]++, 100); // Default limit
    const remaining =
    /* istanbul ignore next */
    (cov_10o5jfi1yy().s[75]++, Math.max(0, limit - count));
    const reset =
    /* istanbul ignore next */
    (cov_10o5jfi1yy().s[76]++, 60); // Default 60 seconds
    const retryAfter =
    /* istanbul ignore next */
    (cov_10o5jfi1yy().s[77]++, count >= limit ?
    /* istanbul ignore next */
    (cov_10o5jfi1yy().b[14][0]++, reset) :
    /* istanbul ignore next */
    (cov_10o5jfi1yy().b[14][1]++, 0));
    /* istanbul ignore next */
    cov_10o5jfi1yy().s[78]++;
    return {
      limit,
      remaining,
      reset,
      retryAfter
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_10o5jfi1yy().s[79]++;
    logger_1.default.error('Failed to get rate limit info:', error);
    /* istanbul ignore next */
    cov_10o5jfi1yy().s[80]++;
    return null;
  }
};
/* istanbul ignore next */
cov_10o5jfi1yy().s[81]++;
exports.getRateLimitInfo = getRateLimitInfo;
/**
 * Reset rate limit for a key
 */
/* istanbul ignore next */
cov_10o5jfi1yy().s[82]++;
const resetRateLimit = async key => {
  /* istanbul ignore next */
  cov_10o5jfi1yy().f[8]++;
  cov_10o5jfi1yy().s[83]++;
  try {
    /* istanbul ignore next */
    cov_10o5jfi1yy().s[84]++;
    await redisService_1.redisService.deleteCache(key);
  } catch (error) {
    /* istanbul ignore next */
    cov_10o5jfi1yy().s[85]++;
    logger_1.default.error('Failed to reset rate limit:', error);
  }
};
/* istanbul ignore next */
cov_10o5jfi1yy().s[86]++;
exports.resetRateLimit = resetRateLimit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,