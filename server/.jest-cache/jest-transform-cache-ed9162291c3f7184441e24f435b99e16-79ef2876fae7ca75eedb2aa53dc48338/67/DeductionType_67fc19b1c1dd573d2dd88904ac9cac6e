06d34eebc1f6046072c5272ffc5bcb77
"use strict";

/* istanbul ignore next */
function cov_2bs4oi45qp() {
  var path = "/home/kim/tito/server/src/models/payroll/DeductionType.ts";
  var hash = "f6d217952e32275f7fa9d9ed0959f3226de78ba8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/models/payroll/DeductionType.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "6": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 46
        }
      },
      "7": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 14,
          column: 48
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "9": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 20,
          column: 7
        }
      },
      "10": {
        start: {
          line: 21,
          column: 27
        },
        end: {
          line: 27,
          column: 13
        }
      },
      "11": {
        start: {
          line: 28,
          column: 27
        },
        end: {
          line: 28,
          column: 60
        }
      },
      "12": {
        start: {
          line: 29,
          column: 34
        },
        end: {
          line: 29,
          column: 48
        }
      },
      "13": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "14": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 33
        }
      },
      "15": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 100
        }
      },
      "16": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 24
        }
      },
      "17": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 29
        }
      },
      "18": {
        start: {
          line: 45,
          column: 23
        },
        end: {
          line: 45,
          column: 48
        }
      },
      "19": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "20": {
        start: {
          line: 47,
          column: 26
        },
        end: {
          line: 47,
          column: 71
        }
      },
      "21": {
        start: {
          line: 48,
          column: 27
        },
        end: {
          line: 48,
          column: 58
        }
      },
      "22": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 42
        }
      },
      "23": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 103
        }
      },
      "24": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 24
        }
      },
      "25": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 29
        }
      },
      "26": {
        start: {
          line: 60,
          column: 23
        },
        end: {
          line: 60,
          column: 48
        }
      },
      "27": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "28": {
        start: {
          line: 62,
          column: 26
        },
        end: {
          line: 62,
          column: 73
        }
      },
      "29": {
        start: {
          line: 63,
          column: 27
        },
        end: {
          line: 63,
          column: 60
        }
      },
      "30": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 42
        }
      },
      "31": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 107
        }
      },
      "32": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 24
        }
      },
      "33": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 29
        }
      },
      "34": {
        start: {
          line: 75,
          column: 23
        },
        end: {
          line: 75,
          column: 48
        }
      },
      "35": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "36": {
        start: {
          line: 77,
          column: 56
        },
        end: {
          line: 77,
          column: 62
        }
      },
      "37": {
        start: {
          line: 78,
          column: 27
        },
        end: {
          line: 78,
          column: 45
        }
      },
      "38": {
        start: {
          line: 79,
          column: 30
        },
        end: {
          line: 79,
          column: 32
        }
      },
      "39": {
        start: {
          line: 80,
          column: 31
        },
        end: {
          line: 80,
          column: 33
        }
      },
      "40": {
        start: {
          line: 81,
          column: 27
        },
        end: {
          line: 81,
          column: 29
        }
      },
      "41": {
        start: {
          line: 82,
          column: 29
        },
        end: {
          line: 82,
          column: 30
        }
      },
      "42": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "43": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 64
        }
      },
      "44": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 39
        }
      },
      "45": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "46": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 66
        }
      },
      "47": {
        start: {
          line: 91,
          column: 31
        },
        end: {
          line: 91,
          column: 84
        }
      },
      "48": {
        start: {
          line: 92,
          column: 32
        },
        end: {
          line: 92,
          column: 70
        }
      },
      "49": {
        start: {
          line: 93,
          column: 26
        },
        end: {
          line: 93,
          column: 61
        }
      },
      "50": {
        start: {
          line: 95,
          column: 26
        },
        end: {
          line: 100,
          column: 7
        }
      },
      "51": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 39
        }
      },
      "52": {
        start: {
          line: 102,
          column: 27
        },
        end: {
          line: 102,
          column: 60
        }
      },
      "53": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 106,
          column: 14
        }
      },
      "54": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 102
        }
      },
      "55": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 24
        }
      },
      "56": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 29
        }
      },
      "57": {
        start: {
          line: 117,
          column: 23
        },
        end: {
          line: 117,
          column: 48
        }
      },
      "58": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "59": {
        start: {
          line: 119,
          column: 26
        },
        end: {
          line: 123,
          column: 7
        }
      },
      "60": {
        start: {
          line: 124,
          column: 27
        },
        end: {
          line: 124,
          column: 52
        }
      },
      "61": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 31
        }
      },
      "62": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 101
        }
      },
      "63": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 24
        }
      },
      "64": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 29
        }
      },
      "65": {
        start: {
          line: 136,
          column: 23
        },
        end: {
          line: 136,
          column: 48
        }
      },
      "66": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "67": {
        start: {
          line: 138,
          column: 27
        },
        end: {
          line: 138,
          column: 29
        }
      },
      "68": {
        start: {
          line: 139,
          column: 27
        },
        end: {
          line: 139,
          column: 29
        }
      },
      "69": {
        start: {
          line: 140,
          column: 29
        },
        end: {
          line: 140,
          column: 30
        }
      },
      "70": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 144,
          column: 13
        }
      },
      "71": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 142,
          column: 55
        }
      },
      "72": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 39
        }
      },
      "73": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "74": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 62
        }
      },
      "75": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 46
        }
      },
      "76": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 152,
          column: 13
        }
      },
      "77": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 61
        }
      },
      "78": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 45
        }
      },
      "79": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 156,
          column: 13
        }
      },
      "80": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 154,
          column: 63
        }
      },
      "81": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 47
        }
      },
      "82": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "83": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 60
        }
      },
      "84": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 44
        }
      },
      "85": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "86": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 47
        }
      },
      "87": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 58
        }
      },
      "88": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 28
        }
      },
      "89": {
        start: {
          line: 166,
          column: 26
        },
        end: {
          line: 171,
          column: 7
        }
      },
      "90": {
        start: {
          line: 172,
          column: 27
        },
        end: {
          line: 172,
          column: 60
        }
      },
      "91": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 175,
          column: 13
        }
      },
      "92": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 28
        }
      },
      "93": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 100
        }
      },
      "94": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 34
        }
      },
      "95": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 104
        }
      },
      "96": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 24
        }
      },
      "97": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 29
        }
      },
      "98": {
        start: {
          line: 188,
          column: 23
        },
        end: {
          line: 188,
          column: 48
        }
      },
      "99": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "100": {
        start: {
          line: 190,
          column: 26
        },
        end: {
          line: 190,
          column: 69
        }
      },
      "101": {
        start: {
          line: 191,
          column: 27
        },
        end: {
          line: 191,
          column: 58
        }
      },
      "102": {
        start: {
          line: 192,
          column: 28
        },
        end: {
          line: 192,
          column: 54
        }
      },
      "103": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 195,
          column: 13
        }
      },
      "104": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 89
        }
      },
      "105": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 27
        }
      },
      "106": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 98
        }
      },
      "107": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 24
        }
      },
      "108": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 29
        }
      },
      "109": {
        start: {
          line: 207,
          column: 23
        },
        end: {
          line: 207,
          column: 48
        }
      },
      "110": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "111": {
        start: {
          line: 209,
          column: 26
        },
        end: {
          line: 214,
          column: 7
        }
      },
      "112": {
        start: {
          line: 215,
          column: 27
        },
        end: {
          line: 215,
          column: 58
        }
      },
      "113": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 218,
          column: 13
        }
      },
      "114": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 28
        }
      },
      "115": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 89
        }
      },
      "116": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 34
        }
      },
      "117": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 102
        }
      },
      "118": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 24
        }
      },
      "119": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 29
        }
      },
      "120": {
        start: {
          line: 231,
          column: 23
        },
        end: {
          line: 231,
          column: 48
        }
      },
      "121": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "122": {
        start: {
          line: 233,
          column: 26
        },
        end: {
          line: 238,
          column: 7
        }
      },
      "123": {
        start: {
          line: 239,
          column: 27
        },
        end: {
          line: 239,
          column: 58
        }
      },
      "124": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 242,
          column: 13
        }
      },
      "125": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 28
        }
      },
      "126": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 87
        }
      },
      "127": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 34
        }
      },
      "128": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 100
        }
      },
      "129": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 24
        }
      },
      "130": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 29
        }
      },
      "131": {
        start: {
          line: 255,
          column: 0
        },
        end: {
          line: 255,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 23
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 13
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 23
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 44
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 27
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 59
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 31
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 74
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 23
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 116
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 135,
            column: 5
          }
        },
        loc: {
          start: {
            line: 135,
            column: 27
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 135
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 21
          },
          end: {
            line: 205,
            column: 5
          }
        },
        line: 187
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        loc: {
          start: {
            line: 206,
            column: 25
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 206
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 23
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 230
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 23,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 23,
            column: 32
          }
        }, {
          start: {
            line: 23,
            column: 36
          },
          end: {
            line: 23,
            column: 40
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 31
          }
        }, {
          start: {
            line: 24,
            column: 35
          },
          end: {
            line: 24,
            column: 39
          }
        }],
        line: 24
      },
      "5": {
        loc: {
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 25,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 25,
            column: 33
          }
        }, {
          start: {
            line: 25,
            column: 37
          },
          end: {
            line: 25,
            column: 41
          }
        }],
        line: 25
      },
      "6": {
        loc: {
          start: {
            line: 26,
            column: 16
          },
          end: {
            line: 26,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 26,
            column: 47
          },
          end: {
            line: 26,
            column: 61
          }
        }, {
          start: {
            line: 26,
            column: 64
          },
          end: {
            line: 26,
            column: 68
          }
        }],
        line: 26
      },
      "7": {
        loc: {
          start: {
            line: 49,
            column: 19
          },
          end: {
            line: 49,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 19
          },
          end: {
            line: 49,
            column: 33
          }
        }, {
          start: {
            line: 49,
            column: 37
          },
          end: {
            line: 49,
            column: 41
          }
        }],
        line: 49
      },
      "8": {
        loc: {
          start: {
            line: 64,
            column: 19
          },
          end: {
            line: 64,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 19
          },
          end: {
            line: 64,
            column: 33
          }
        }, {
          start: {
            line: 64,
            column: 37
          },
          end: {
            line: 64,
            column: 41
          }
        }],
        line: 64
      },
      "9": {
        loc: {
          start: {
            line: 74,
            column: 18
          },
          end: {
            line: 74,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 74,
            column: 27
          },
          end: {
            line: 74,
            column: 29
          }
        }],
        line: 74
      },
      "10": {
        loc: {
          start: {
            line: 77,
            column: 20
          },
          end: {
            line: 77,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 77,
            column: 28
          }
        }],
        line: 77
      },
      "11": {
        loc: {
          start: {
            line: 77,
            column: 30
          },
          end: {
            line: 77,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 77,
            column: 38
          },
          end: {
            line: 77,
            column: 40
          }
        }],
        line: 77
      },
      "12": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "13": {
        loc: {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "14": {
        loc: {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "15": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "16": {
        loc: {
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "17": {
        loc: {
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 156,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 156,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "18": {
        loc: {
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "19": {
        loc: {
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "20": {
        loc: {
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "21": {
        loc: {
          start: {
            line: 192,
            column: 29
          },
          end: {
            line: 192,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 29
          },
          end: {
            line: 192,
            column: 44
          }
        }, {
          start: {
            line: 192,
            column: 48
          },
          end: {
            line: 192,
            column: 49
          }
        }],
        line: 192
      },
      "22": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "23": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "24": {
        loc: {
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/models/payroll/DeductionType.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/models/payroll/DeductionType.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface DeductionType {\n  id: string;\n  name: string;\n  description: string | null;\n  percentage: number | null;\n  fixed_amount: number | null;\n  is_active: boolean;\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface CreateDeductionTypeData {\n  name: string;\n  description?: string | null;\n  percentage?: number | null;\n  fixed_amount?: number | null;\n  is_active?: boolean;\n}\n\nexport interface UpdateDeductionTypeData {\n  name?: string;\n  description?: string | null;\n  percentage?: number | null;\n  fixed_amount?: number | null;\n  is_active?: boolean;\n}\n\nexport interface DeductionTypeListParams {\n  is_active?: boolean;\n  page?: number;\n  limit?: number;\n}\n\nclass DeductionTypeModel {\n  private pool = getPool();\n\n  async create(data: CreateDeductionTypeData): Promise<DeductionType> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        INSERT INTO deduction_types (name, description, percentage, fixed_amount, is_active)\n        VALUES ($1, $2, $3, $4, $5)\n        RETURNING *\n      `;\n      const values = [\n        data.name,\n        data.description || null,\n        data.percentage || null,\n        data.fixed_amount || null,\n        data.is_active !== undefined ? data.is_active : true\n      ];\n      \n      const result = await client.query(query, values);\n      const deductionType = result.rows[0];\n      \n      logger.info('Deduction type created', { \n        deductionTypeId: deductionType.id, \n        name: deductionType.name \n      });\n      return deductionType;\n    } catch (error) {\n      logger.error('Error creating deduction type', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findById(id: string): Promise<DeductionType | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT * FROM deduction_types WHERE id = $1';\n      const result = await client.query(query, [id]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding deduction type by ID', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findByName(name: string): Promise<DeductionType | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT * FROM deduction_types WHERE name = $1';\n      const result = await client.query(query, [name]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding deduction type by name', { error: (error as Error).message, name });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findAll(params: DeductionTypeListParams = {}): Promise<{ records: DeductionType[]; total: number }> {\n    const client = await this.pool.connect();\n    try {\n      const { page = 1, limit = 10, is_active } = params;\n      const offset = (page - 1) * limit;\n      \n      let whereClause = '';\n      const conditions: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (is_active !== undefined) {\n        conditions.push(`is_active = $${paramIndex++}`);\n        values.push(is_active);\n      }\n\n      if (conditions.length > 0) {\n        whereClause = `WHERE ${conditions.join(' AND ')}`;\n      }\n\n      // Get total count\n      const countQuery = `SELECT COUNT(*) FROM deduction_types ${whereClause}`;\n      const countResult = await client.query(countQuery, values);\n      const total = parseInt(countResult.rows[0].count);\n\n      // Get deduction types\n      const query = `\n        SELECT * FROM deduction_types \n        ${whereClause}\n        ORDER BY name ASC\n        LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n      `;\n      values.push(limit, offset);\n      \n      const result = await client.query(query, values);\n      \n      return {\n        records: result.rows,\n        total\n      };\n    } catch (error) {\n      logger.error('Error finding deduction types', { error: (error as Error).message, params });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findActive(): Promise<DeductionType[]> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT * FROM deduction_types \n        WHERE is_active = true\n        ORDER BY name ASC\n      `;\n      const result = await client.query(query);\n      return result.rows;\n    } catch (error) {\n      logger.error('Error finding active deduction types', { error: (error as Error).message });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async update(id: string, data: UpdateDeductionTypeData): Promise<DeductionType | null> {\n    const client = await this.pool.connect();\n    try {\n      const fields: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (data.name !== undefined) {\n        fields.push(`name = $${paramIndex++}`);\n        values.push(data.name);\n      }\n\n      if (data.description !== undefined) {\n        fields.push(`description = $${paramIndex++}`);\n        values.push(data.description);\n      }\n\n      if (data.percentage !== undefined) {\n        fields.push(`percentage = $${paramIndex++}`);\n        values.push(data.percentage);\n      }\n\n      if (data.fixed_amount !== undefined) {\n        fields.push(`fixed_amount = $${paramIndex++}`);\n        values.push(data.fixed_amount);\n      }\n\n      if (data.is_active !== undefined) {\n        fields.push(`is_active = $${paramIndex++}`);\n        values.push(data.is_active);\n      }\n\n      if (fields.length === 0) {\n        return await this.findById(id);\n      }\n\n      fields.push(`updated_at = CURRENT_TIMESTAMP`);\n      values.push(id);\n\n      const query = `\n        UPDATE deduction_types \n        SET ${fields.join(', ')}\n        WHERE id = $${paramIndex}\n        RETURNING *\n      `;\n\n      const result = await client.query(query, values);\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      logger.info('Deduction type updated', { deductionTypeId: id, updates: data });\n      return result.rows[0];\n    } catch (error) {\n      logger.error('Error updating deduction type', { error: (error as Error).message, id, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async delete(id: string): Promise<boolean> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'DELETE FROM deduction_types WHERE id = $1';\n      const result = await client.query(query, [id]);\n      \n      const deleted = (result.rowCount || 0) > 0;\n      if (deleted) {\n        logger.info('Deduction type deleted', { deductionTypeId: id });\n      }\n      \n      return deleted;\n    } catch (error) {\n      logger.error('Error deleting deduction type', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async deactivate(id: string): Promise<DeductionType | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        UPDATE deduction_types \n        SET is_active = false, updated_at = CURRENT_TIMESTAMP\n        WHERE id = $1\n        RETURNING *\n      `;\n      const result = await client.query(query, [id]);\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      logger.info('Deduction type deactivated', { deductionTypeId: id });\n      return result.rows[0];\n    } catch (error) {\n      logger.error('Error deactivating deduction type', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async activate(id: string): Promise<DeductionType | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        UPDATE deduction_types \n        SET is_active = true, updated_at = CURRENT_TIMESTAMP\n        WHERE id = $1\n        RETURNING *\n      `;\n      const result = await client.query(query, [id]);\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      logger.info('Deduction type activated', { deductionTypeId: id });\n      return result.rows[0];\n    } catch (error) {\n      logger.error('Error activating deduction type', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n}\n\nexport const deductionTypeModel = new DeductionTypeModel();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f6d217952e32275f7fa9d9ed0959f3226de78ba8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2bs4oi45qp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2bs4oi45qp();
var __importDefault =
/* istanbul ignore next */
(cov_2bs4oi45qp().s[0]++,
/* istanbul ignore next */
(cov_2bs4oi45qp().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2bs4oi45qp().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2bs4oi45qp().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2bs4oi45qp().f[0]++;
  cov_2bs4oi45qp().s[1]++;
  return /* istanbul ignore next */(cov_2bs4oi45qp().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2bs4oi45qp().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2bs4oi45qp().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2bs4oi45qp().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2bs4oi45qp().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2bs4oi45qp().s[3]++;
exports.deductionTypeModel = void 0;
const database_1 =
/* istanbul ignore next */
(cov_2bs4oi45qp().s[4]++, require("../../config/database"));
const logger_1 =
/* istanbul ignore next */
(cov_2bs4oi45qp().s[5]++, __importDefault(require("../../utils/logger")));
class DeductionTypeModel {
  constructor() {
    /* istanbul ignore next */
    cov_2bs4oi45qp().f[1]++;
    cov_2bs4oi45qp().s[6]++;
    this.pool = (0, database_1.getPool)();
  }
  async create(data) {
    /* istanbul ignore next */
    cov_2bs4oi45qp().f[2]++;
    const client =
    /* istanbul ignore next */
    (cov_2bs4oi45qp().s[7]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2bs4oi45qp().s[8]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[9]++, `
        INSERT INTO deduction_types (name, description, percentage, fixed_amount, is_active)
        VALUES ($1, $2, $3, $4, $5)
        RETURNING *
      `);
      const values =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[10]++, [data.name,
      /* istanbul ignore next */
      (cov_2bs4oi45qp().b[3][0]++, data.description) ||
      /* istanbul ignore next */
      (cov_2bs4oi45qp().b[3][1]++, null),
      /* istanbul ignore next */
      (cov_2bs4oi45qp().b[4][0]++, data.percentage) ||
      /* istanbul ignore next */
      (cov_2bs4oi45qp().b[4][1]++, null),
      /* istanbul ignore next */
      (cov_2bs4oi45qp().b[5][0]++, data.fixed_amount) ||
      /* istanbul ignore next */
      (cov_2bs4oi45qp().b[5][1]++, null), data.is_active !== undefined ?
      /* istanbul ignore next */
      (cov_2bs4oi45qp().b[6][0]++, data.is_active) :
      /* istanbul ignore next */
      (cov_2bs4oi45qp().b[6][1]++, true)]);
      const result =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[11]++, await client.query(query, values));
      const deductionType =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[12]++, result.rows[0]);
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[13]++;
      logger_1.default.info('Deduction type created', {
        deductionTypeId: deductionType.id,
        name: deductionType.name
      });
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[14]++;
      return deductionType;
    } catch (error) {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[15]++;
      logger_1.default.error('Error creating deduction type', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[16]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[17]++;
      client.release();
    }
  }
  async findById(id) {
    /* istanbul ignore next */
    cov_2bs4oi45qp().f[3]++;
    const client =
    /* istanbul ignore next */
    (cov_2bs4oi45qp().s[18]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2bs4oi45qp().s[19]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[20]++, 'SELECT * FROM deduction_types WHERE id = $1');
      const result =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[21]++, await client.query(query, [id]));
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[22]++;
      return /* istanbul ignore next */(cov_2bs4oi45qp().b[7][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_2bs4oi45qp().b[7][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[23]++;
      logger_1.default.error('Error finding deduction type by ID', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[24]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[25]++;
      client.release();
    }
  }
  async findByName(name) {
    /* istanbul ignore next */
    cov_2bs4oi45qp().f[4]++;
    const client =
    /* istanbul ignore next */
    (cov_2bs4oi45qp().s[26]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2bs4oi45qp().s[27]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[28]++, 'SELECT * FROM deduction_types WHERE name = $1');
      const result =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[29]++, await client.query(query, [name]));
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[30]++;
      return /* istanbul ignore next */(cov_2bs4oi45qp().b[8][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_2bs4oi45qp().b[8][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[31]++;
      logger_1.default.error('Error finding deduction type by name', {
        error: error.message,
        name
      });
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[32]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[33]++;
      client.release();
    }
  }
  async findAll(params =
  /* istanbul ignore next */
  (cov_2bs4oi45qp().b[9][0]++, {})) {
    /* istanbul ignore next */
    cov_2bs4oi45qp().f[5]++;
    const client =
    /* istanbul ignore next */
    (cov_2bs4oi45qp().s[34]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2bs4oi45qp().s[35]++;
    try {
      const {
        page =
        /* istanbul ignore next */
        (cov_2bs4oi45qp().b[10][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_2bs4oi45qp().b[11][0]++, 10),
        is_active
      } =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[36]++, params);
      const offset =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[37]++, (page - 1) * limit);
      let whereClause =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[38]++, '');
      const conditions =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[39]++, []);
      const values =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[40]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[41]++, 1);
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[42]++;
      if (is_active !== undefined) {
        /* istanbul ignore next */
        cov_2bs4oi45qp().b[12][0]++;
        cov_2bs4oi45qp().s[43]++;
        conditions.push(`is_active = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_2bs4oi45qp().s[44]++;
        values.push(is_active);
      } else
      /* istanbul ignore next */
      {
        cov_2bs4oi45qp().b[12][1]++;
      }
      cov_2bs4oi45qp().s[45]++;
      if (conditions.length > 0) {
        /* istanbul ignore next */
        cov_2bs4oi45qp().b[13][0]++;
        cov_2bs4oi45qp().s[46]++;
        whereClause = `WHERE ${conditions.join(' AND ')}`;
      } else
      /* istanbul ignore next */
      {
        cov_2bs4oi45qp().b[13][1]++;
      }
      // Get total count
      const countQuery =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[47]++, `SELECT COUNT(*) FROM deduction_types ${whereClause}`);
      const countResult =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[48]++, await client.query(countQuery, values));
      const total =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[49]++, parseInt(countResult.rows[0].count));
      // Get deduction types
      const query =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[50]++, `
        SELECT * FROM deduction_types 
        ${whereClause}
        ORDER BY name ASC
        LIMIT $${paramIndex++} OFFSET $${paramIndex++}
      `);
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[51]++;
      values.push(limit, offset);
      const result =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[52]++, await client.query(query, values));
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[53]++;
      return {
        records: result.rows,
        total
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[54]++;
      logger_1.default.error('Error finding deduction types', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[55]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[56]++;
      client.release();
    }
  }
  async findActive() {
    /* istanbul ignore next */
    cov_2bs4oi45qp().f[6]++;
    const client =
    /* istanbul ignore next */
    (cov_2bs4oi45qp().s[57]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2bs4oi45qp().s[58]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[59]++, `
        SELECT * FROM deduction_types 
        WHERE is_active = true
        ORDER BY name ASC
      `);
      const result =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[60]++, await client.query(query));
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[61]++;
      return result.rows;
    } catch (error) {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[62]++;
      logger_1.default.error('Error finding active deduction types', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[63]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[64]++;
      client.release();
    }
  }
  async update(id, data) {
    /* istanbul ignore next */
    cov_2bs4oi45qp().f[7]++;
    const client =
    /* istanbul ignore next */
    (cov_2bs4oi45qp().s[65]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2bs4oi45qp().s[66]++;
    try {
      const fields =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[67]++, []);
      const values =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[68]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[69]++, 1);
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[70]++;
      if (data.name !== undefined) {
        /* istanbul ignore next */
        cov_2bs4oi45qp().b[14][0]++;
        cov_2bs4oi45qp().s[71]++;
        fields.push(`name = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_2bs4oi45qp().s[72]++;
        values.push(data.name);
      } else
      /* istanbul ignore next */
      {
        cov_2bs4oi45qp().b[14][1]++;
      }
      cov_2bs4oi45qp().s[73]++;
      if (data.description !== undefined) {
        /* istanbul ignore next */
        cov_2bs4oi45qp().b[15][0]++;
        cov_2bs4oi45qp().s[74]++;
        fields.push(`description = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_2bs4oi45qp().s[75]++;
        values.push(data.description);
      } else
      /* istanbul ignore next */
      {
        cov_2bs4oi45qp().b[15][1]++;
      }
      cov_2bs4oi45qp().s[76]++;
      if (data.percentage !== undefined) {
        /* istanbul ignore next */
        cov_2bs4oi45qp().b[16][0]++;
        cov_2bs4oi45qp().s[77]++;
        fields.push(`percentage = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_2bs4oi45qp().s[78]++;
        values.push(data.percentage);
      } else
      /* istanbul ignore next */
      {
        cov_2bs4oi45qp().b[16][1]++;
      }
      cov_2bs4oi45qp().s[79]++;
      if (data.fixed_amount !== undefined) {
        /* istanbul ignore next */
        cov_2bs4oi45qp().b[17][0]++;
        cov_2bs4oi45qp().s[80]++;
        fields.push(`fixed_amount = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_2bs4oi45qp().s[81]++;
        values.push(data.fixed_amount);
      } else
      /* istanbul ignore next */
      {
        cov_2bs4oi45qp().b[17][1]++;
      }
      cov_2bs4oi45qp().s[82]++;
      if (data.is_active !== undefined) {
        /* istanbul ignore next */
        cov_2bs4oi45qp().b[18][0]++;
        cov_2bs4oi45qp().s[83]++;
        fields.push(`is_active = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_2bs4oi45qp().s[84]++;
        values.push(data.is_active);
      } else
      /* istanbul ignore next */
      {
        cov_2bs4oi45qp().b[18][1]++;
      }
      cov_2bs4oi45qp().s[85]++;
      if (fields.length === 0) {
        /* istanbul ignore next */
        cov_2bs4oi45qp().b[19][0]++;
        cov_2bs4oi45qp().s[86]++;
        return await this.findById(id);
      } else
      /* istanbul ignore next */
      {
        cov_2bs4oi45qp().b[19][1]++;
      }
      cov_2bs4oi45qp().s[87]++;
      fields.push(`updated_at = CURRENT_TIMESTAMP`);
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[88]++;
      values.push(id);
      const query =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[89]++, `
        UPDATE deduction_types 
        SET ${fields.join(', ')}
        WHERE id = $${paramIndex}
        RETURNING *
      `);
      const result =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[90]++, await client.query(query, values));
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[91]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_2bs4oi45qp().b[20][0]++;
        cov_2bs4oi45qp().s[92]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2bs4oi45qp().b[20][1]++;
      }
      cov_2bs4oi45qp().s[93]++;
      logger_1.default.info('Deduction type updated', {
        deductionTypeId: id,
        updates: data
      });
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[94]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[95]++;
      logger_1.default.error('Error updating deduction type', {
        error: error.message,
        id,
        data
      });
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[96]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[97]++;
      client.release();
    }
  }
  async delete(id) {
    /* istanbul ignore next */
    cov_2bs4oi45qp().f[8]++;
    const client =
    /* istanbul ignore next */
    (cov_2bs4oi45qp().s[98]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2bs4oi45qp().s[99]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[100]++, 'DELETE FROM deduction_types WHERE id = $1');
      const result =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[101]++, await client.query(query, [id]));
      const deleted =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[102]++, (
      /* istanbul ignore next */
      (cov_2bs4oi45qp().b[21][0]++, result.rowCount) ||
      /* istanbul ignore next */
      (cov_2bs4oi45qp().b[21][1]++, 0)) > 0);
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[103]++;
      if (deleted) {
        /* istanbul ignore next */
        cov_2bs4oi45qp().b[22][0]++;
        cov_2bs4oi45qp().s[104]++;
        logger_1.default.info('Deduction type deleted', {
          deductionTypeId: id
        });
      } else
      /* istanbul ignore next */
      {
        cov_2bs4oi45qp().b[22][1]++;
      }
      cov_2bs4oi45qp().s[105]++;
      return deleted;
    } catch (error) {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[106]++;
      logger_1.default.error('Error deleting deduction type', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[107]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[108]++;
      client.release();
    }
  }
  async deactivate(id) {
    /* istanbul ignore next */
    cov_2bs4oi45qp().f[9]++;
    const client =
    /* istanbul ignore next */
    (cov_2bs4oi45qp().s[109]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2bs4oi45qp().s[110]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[111]++, `
        UPDATE deduction_types 
        SET is_active = false, updated_at = CURRENT_TIMESTAMP
        WHERE id = $1
        RETURNING *
      `);
      const result =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[112]++, await client.query(query, [id]));
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[113]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_2bs4oi45qp().b[23][0]++;
        cov_2bs4oi45qp().s[114]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2bs4oi45qp().b[23][1]++;
      }
      cov_2bs4oi45qp().s[115]++;
      logger_1.default.info('Deduction type deactivated', {
        deductionTypeId: id
      });
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[116]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[117]++;
      logger_1.default.error('Error deactivating deduction type', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[118]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[119]++;
      client.release();
    }
  }
  async activate(id) {
    /* istanbul ignore next */
    cov_2bs4oi45qp().f[10]++;
    const client =
    /* istanbul ignore next */
    (cov_2bs4oi45qp().s[120]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_2bs4oi45qp().s[121]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[122]++, `
        UPDATE deduction_types 
        SET is_active = true, updated_at = CURRENT_TIMESTAMP
        WHERE id = $1
        RETURNING *
      `);
      const result =
      /* istanbul ignore next */
      (cov_2bs4oi45qp().s[123]++, await client.query(query, [id]));
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[124]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_2bs4oi45qp().b[24][0]++;
        cov_2bs4oi45qp().s[125]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2bs4oi45qp().b[24][1]++;
      }
      cov_2bs4oi45qp().s[126]++;
      logger_1.default.info('Deduction type activated', {
        deductionTypeId: id
      });
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[127]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[128]++;
      logger_1.default.error('Error activating deduction type', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[129]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2bs4oi45qp().s[130]++;
      client.release();
    }
  }
}
/* istanbul ignore next */
cov_2bs4oi45qp().s[131]++;
exports.deductionTypeModel = new DeductionTypeModel();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,