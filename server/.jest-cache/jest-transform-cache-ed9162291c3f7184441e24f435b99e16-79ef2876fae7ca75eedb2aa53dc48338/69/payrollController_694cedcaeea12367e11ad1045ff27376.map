{"version":3,"names":["payrollService_1","cov_hzsouck27","s","require","autoPayrollService_1","express_1","logger_1","__importDefault","PayrollController","createPayrollPeriod","req","res","f","requestId","getRequestId","period_name","start_date","end_date","status","body","b","json","success","message","payrollPeriod","payrollService","Date","data","error","default","getPayrollPeriods","page","limit","startDate","endDate","query","params","parseInt","undefined","result","periods","pagination","total","pages","Math","ceil","getPayrollPeriod","id","updatePayrollPeriod","updateData","deletePayrollPeriod","deleted","generatePayrollRecords","departmentId","records","departmentResults","generatePayrollRecordsForAllDepartments","flatMap","payrollApprovalService","Promise","resolve","then","__importStar","createApprovalsForPayrollPeriod","periodId","recordCount","length","revertError","getPayrollSummary","summary","getPayrollRecords","payroll_period_id","employee_id","getPayrollRecord","record","updatePayrollRecord","approvePayrollRecord","approverId","user","userId","updatePayrollRecordStatus","includes","updatedRecord","completePayrollPeriod","completedPeriod","bulkUpdatePayrollRecordsToPaid","recordIds","updatedCount","bulkUpdatePayrollRecordsStatus","updatedRecords","reprocessPayrollRecords","markPayrollAsPaid","exportPayrollRecords","format","setHeader","toISOString","split","send","getPayrollStats","stats","createDeductionType","deductionType","getDeductionTypes","updateDeductionType","deleteDeductionType","createBenefitType","benefitType","getBenefitTypes","updateBenefitType","deleteBenefitType","getEmployeeDeductionBalances","createEmployeeDeductionBalance","balance","uploadEmployeeDeductionBalances","csvData","Array","isArray","successCount","errorCount","errors","deleteEmployeeDeductionBalance","uploadEmployeeBenefits","getEmployeeBenefits","createEmployeeBenefit","benefit","updateEmployeeBenefit","deleteEmployeeBenefit","initializePayrollPeriods","autoPayrollService","generateCurrentMonthPeriod","getExpectedMonthlyHours","expectedHours","generateDepartmentPaystubs","getPayrollRecordsByDepartmentAndPeriod","pdfBuffer","exportPeriodPaystubsPDF","exportDepartmentPaystubsPDF","exports","payrollController"],"sources":["/home/kim/tito/server/src/controllers/payroll/payrollController.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { payrollService } from '../../services/payroll/payrollService';\nimport { autoPayrollService } from '../../services/payroll/autoPayrollService';\nimport { getRequestId } from '../../utils/types/express';\nimport logger from '../../utils/logger';\n\nexport class PayrollController {\n  /**\n   * @route POST /api/v1/payroll/periods\n   * @desc Create a new payroll period\n   * @access HR Admin\n   */\n  async createPayrollPeriod(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { period_name, start_date, end_date, status } = req.body;\n\n      if (!period_name || !start_date || !end_date) {\n        res.status(400).json({\n          success: false,\n          message: 'Period name, start date, and end date are required',\n          requestId\n        });\n        return;\n      }\n\n      const payrollPeriod = await payrollService.createPayrollPeriod({\n        period_name,\n        start_date: new Date(start_date),\n        end_date: new Date(end_date),\n        status\n      });\n\n      res.status(201).json({\n        success: true,\n        message: 'Payroll period created successfully',\n        data: payrollPeriod,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error creating payroll period', { \n        error: (error as Error).message, \n        requestId,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to create payroll period',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/periods\n   * @desc Get all payroll periods\n   * @access HR Admin\n   */\n  async getPayrollPeriods(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { page, limit, status, startDate, endDate } = req.query;\n\n      const params = {\n        page: page ? parseInt(page as string) : undefined,\n        limit: limit ? parseInt(limit as string) : undefined,\n        status: status as string,\n        startDate: startDate as string,\n        endDate: endDate as string\n      };\n\n      const result = await payrollService.getPayrollPeriods(params);\n\n      res.json({\n        success: true,\n        message: 'Payroll periods retrieved successfully',\n        data: result.periods,\n        pagination: {\n          page: parseInt(page as string) || 1,\n          limit: parseInt(limit as string) || 10,\n          total: result.total,\n          pages: Math.ceil(result.total / (parseInt(limit as string) || 10))\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting payroll periods', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get payroll periods',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/periods/:id\n   * @desc Get payroll period by ID\n   * @access HR Admin\n   */\n  async getPayrollPeriod(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const payrollPeriod = await payrollService.getPayrollPeriod(id);\n\n      if (!payrollPeriod) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll period not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll period retrieved successfully',\n        data: payrollPeriod,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting payroll period', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get payroll period',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route PUT /api/v1/payroll/periods/:id\n   * @desc Update payroll period\n   * @access HR Admin\n   */\n  async updatePayrollPeriod(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n\n      const payrollPeriod = await payrollService.updatePayrollPeriod(id, updateData);\n\n      if (!payrollPeriod) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll period not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll period updated successfully',\n        data: payrollPeriod,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error updating payroll period', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to update payroll period',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route DELETE /api/v1/payroll/periods/:id\n   * @desc Delete payroll period\n   * @access HR Admin\n   */\n  async deletePayrollPeriod(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const deleted = await payrollService.deletePayrollPeriod(id);\n\n      if (!deleted) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll period not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll period deleted successfully',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error deleting payroll period', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete payroll period',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/periods/:id/generate\n   * @desc Generate payroll records for a period\n   * @access HR Admin\n   */\n  async generatePayrollRecords(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    const { id } = req.params;\n    \n    try {\n      const { departmentId } = req.query;\n\n      // Update payroll period status to 'processing'\n      await payrollService.updatePayrollPeriod(id, { status: 'processing' });\n\n      let records;\n      if (departmentId) {\n        // Generate records for specific department\n        records = await payrollService.generatePayrollRecords(id, departmentId as string);\n      } else {\n        // Generate records for all departments\n        const departmentResults = await payrollService.generatePayrollRecordsForAllDepartments(id);\n        records = departmentResults.flatMap(result => result.records);\n        \n        // Create department-specific approvals after generating records\n        const { payrollApprovalService } = await import('../../services/payroll/payrollApprovalService');\n        await payrollApprovalService.createApprovalsForPayrollPeriod(id);\n        \n        // Update payroll period status to 'sent_for_review' after successful processing\n        await payrollService.updatePayrollPeriod(id, { status: 'sent_for_review' });\n      }\n\n      res.status(201).json({\n        success: true,\n        message: 'Payroll records generated successfully',\n        data: {\n          periodId: id,\n          recordCount: records.length,\n          records\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error generating payroll records', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      // Revert status to 'draft' if processing failed\n      try {\n        await payrollService.updatePayrollPeriod(id, { status: 'draft' });\n      } catch (revertError) {\n        logger.error('Error reverting payroll period status', { \n          error: (revertError as Error).message, \n          requestId,\n          periodId: id\n        });\n      }\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to generate payroll records',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/periods/:id/summary\n   * @desc Get payroll period summary\n   * @access HR Admin\n   */\n  async getPayrollSummary(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const summary = await payrollService.getPayrollSummary(id);\n\n      res.json({\n        success: true,\n        message: 'Payroll summary retrieved successfully',\n        data: summary,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting payroll summary', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get payroll summary',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/records\n   * @desc Get payroll records\n   * @access HR Admin\n   */\n  async getPayrollRecords(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { page, limit, payroll_period_id, employee_id, status } = req.query;\n\n      const params = {\n        page: page ? parseInt(page as string) : undefined,\n        limit: limit ? parseInt(limit as string) : undefined,\n        payroll_period_id: payroll_period_id as string,\n        employee_id: employee_id as string,\n        status: status as string\n      };\n\n      const result = await payrollService.getPayrollRecords(params);\n\n      res.json({\n        success: true,\n        message: 'Payroll records retrieved successfully',\n        data: result.records,\n        pagination: {\n          page: parseInt(page as string) || 1,\n          limit: parseInt(limit as string) || 10,\n          total: result.total,\n          pages: Math.ceil(result.total / (parseInt(limit as string) || 10))\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting payroll records', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get payroll records',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/records/:id\n   * @desc Get payroll record by ID\n   * @access HR Admin\n   */\n  async getPayrollRecord(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const record = await payrollService.getPayrollRecord(id);\n\n      if (!record) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll record not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll record retrieved successfully',\n        data: record,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting payroll record', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get payroll record',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route PUT /api/v1/payroll/records/:id\n   * @desc Update payroll record\n   * @access HR Admin\n   */\n  async updatePayrollRecord(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n\n      const record = await payrollService.updatePayrollRecord(id, updateData);\n\n      if (!record) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll record not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll record updated successfully',\n        data: record,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error updating payroll record', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to update payroll record',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/records/:id/approve\n   * @desc Approve payroll record\n   * @access HR Admin\n   */\n  async approvePayrollRecord(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const approverId = req.user?.userId;\n\n      if (!approverId) {\n        res.status(401).json({\n          success: false,\n          message: 'Approver ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const record = await payrollService.approvePayrollRecord(id, approverId);\n\n      if (!record) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll record not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll record approved successfully',\n        data: record,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error approving payroll record', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to approve payroll record',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route PUT /api/v1/payroll/records/:id/status\n   * @desc Update payroll record status\n   * @access HR Admin\n   */\n  async updatePayrollRecordStatus(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n\n      if (!status || !['draft', 'processed', 'paid'].includes(status)) {\n        res.status(400).json({\n          success: false,\n          message: 'Valid status (draft, processed, paid) is required',\n          requestId\n        });\n        return;\n      }\n\n      const updatedRecord = await payrollService.updatePayrollRecordStatus(id, status);\n\n      res.json({\n        success: true,\n        message: `Payroll record status updated to ${status} successfully`,\n        data: updatedRecord,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error updating payroll record status', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to update payroll record status',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Complete payroll period (mark as completed when all departments approve)\n   */\n  async completePayrollPeriod(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const completedPeriod = await payrollService.completePayrollPeriod(id);\n\n      res.json({\n        success: true,\n        message: 'Payroll period completed successfully',\n        data: completedPeriod,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error completing payroll period', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      res.status(500).json({\n        success: false,\n        message: 'Internal server error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Bulk update payroll records to paid status\n   */\n  async bulkUpdatePayrollRecordsToPaid(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { periodId, departmentId, recordIds } = req.body;\n\n      const result = await payrollService.bulkUpdatePayrollRecordsToPaid({\n        periodId,\n        departmentId,\n        recordIds\n      });\n\n      res.json({\n        success: true,\n        message: `Successfully updated ${result.updatedCount} payroll records to paid status`,\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error bulk updating payroll records to paid', { \n        error: (error as Error).message, \n        requestId,\n        body: req.body\n      });\n      res.status(500).json({\n        success: false,\n        message: 'Internal server error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route PUT /api/v1/payroll/periods/:id/records/status\n   * @desc Bulk update payroll records status for a period\n   * @access HR Admin\n   */\n  async bulkUpdatePayrollRecordsStatus(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const { status, departmentId } = req.body;\n\n      if (!status || !['draft', 'processed', 'paid'].includes(status)) {\n        res.status(400).json({\n          success: false,\n          message: 'Valid status (draft, processed, paid) is required',\n          requestId\n        });\n        return;\n      }\n\n      const updatedRecords = await payrollService.bulkUpdatePayrollRecordsStatus(id, status, departmentId);\n\n      res.json({\n        success: true,\n        message: `Bulk updated ${updatedRecords.length} payroll records to ${status} successfully`,\n        data: {\n          updatedCount: updatedRecords.length,\n          records: updatedRecords\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error bulk updating payroll records status', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to bulk update payroll records status',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/periods/:id/reprocess\n   * @desc Reprocess payroll records for a period (clears existing and regenerates)\n   * @access HR Admin\n   */\n  async reprocessPayrollRecords(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const { departmentId } = req.query;\n\n      // Update payroll period status to 'processing'\n      await payrollService.updatePayrollPeriod(id, { status: 'processing' });\n\n      // Reprocess payroll records (clears existing and regenerates)\n      const records = await payrollService.reprocessPayrollRecords(id, departmentId as string);\n\n      // Create department-specific approvals after reprocessing\n      const { payrollApprovalService } = await import('../../services/payroll/payrollApprovalService');\n      await payrollApprovalService.createApprovalsForPayrollPeriod(id);\n      \n      // Update payroll period status to 'sent_for_review' after successful reprocessing\n      await payrollService.updatePayrollPeriod(id, { status: 'sent_for_review' });\n\n      res.status(201).json({\n        success: true,\n        message: 'Payroll records reprocessed successfully',\n        data: {\n          periodId: id,\n          recordCount: records.length,\n          records: records\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error reprocessing payroll records', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to reprocess payroll records',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/records/:id/mark-paid\n   * @desc Mark payroll record as paid\n   * @access HR Admin\n   */\n  async markPayrollAsPaid(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const record = await payrollService.markPayrollAsPaid(id);\n\n      if (!record) {\n        res.status(404).json({\n          success: false,\n          message: 'Payroll record not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Payroll record marked as paid successfully',\n        data: record,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error marking payroll as paid', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to mark payroll as paid',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/records/export\n   * @desc Export payroll records\n   * @access HR Admin\n   */\n  async exportPayrollRecords(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { format = 'csv', payroll_period_id, status } = req.query;\n      \n      const params = {\n        payroll_period_id: payroll_period_id as string,\n        status: status as string\n      };\n\n      const result = await payrollService.exportPayrollRecords(format as 'csv' | 'pdf', params);\n\n      if (format === 'csv') {\n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', `attachment; filename=\"payroll-records-${new Date().toISOString().split('T')[0]}.csv\"`);\n        res.send(result);\n      } else {\n        res.setHeader('Content-Type', 'application/pdf');\n        res.setHeader('Content-Disposition', `attachment; filename=\"payroll-records-${new Date().toISOString().split('T')[0]}.pdf\"`);\n        res.send(result);\n      }\n    } catch (error) {\n      logger.error('Error exporting payroll records', { \n        error: (error as Error).message,\n        requestId \n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to export payroll records',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/stats\n   * @desc Get payroll statistics\n   * @access HR Admin\n   */\n  async getPayrollStats(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const stats = await payrollService.getPayrollStats();\n\n      res.json({\n        success: true,\n        message: 'Payroll statistics retrieved successfully',\n        data: stats,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting payroll statistics', { \n        error: (error as Error).message, \n        requestId\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get payroll statistics',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // New endpoints for deduction types management\n  async createDeductionType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const deductionType = await payrollService.createDeductionType(req.body);\n\n      res.status(201).json({\n        success: true,\n        message: 'Deduction type created successfully',\n        data: deductionType,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error creating deduction type', { \n        error: (error as Error).message, \n        requestId,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to create deduction type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async getDeductionTypes(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const result = await payrollService.getDeductionTypes(req.query);\n\n      res.status(200).json({\n        success: true,\n        message: 'Deduction types retrieved successfully',\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting deduction types', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get deduction types',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async updateDeductionType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const deductionType = await payrollService.updateDeductionType(id, req.body);\n\n      if (!deductionType) {\n        res.status(404).json({\n          success: false,\n          message: 'Deduction type not found',\n          requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Deduction type updated successfully',\n        data: deductionType,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error updating deduction type', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to update deduction type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async deleteDeductionType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const deleted = await payrollService.deleteDeductionType(id);\n\n      if (!deleted) {\n        res.status(404).json({\n          success: false,\n          message: 'Deduction type not found',\n          requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Deduction type deleted successfully',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error deleting deduction type', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete deduction type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // New endpoints for benefit types management\n  async createBenefitType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const benefitType = await payrollService.createBenefitType(req.body);\n\n      res.status(201).json({\n        success: true,\n        message: 'Benefit type created successfully',\n        data: benefitType,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error creating benefit type', { \n        error: (error as Error).message, \n        requestId,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to create benefit type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async getBenefitTypes(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const result = await payrollService.getBenefitTypes(req.query);\n\n      res.status(200).json({\n        success: true,\n        message: 'Benefit types retrieved successfully',\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting benefit types', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get benefit types',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async updateBenefitType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n\n      const benefitType = await payrollService.updateBenefitType(id, updateData);\n\n      if (!benefitType) {\n        res.status(404).json({\n          success: false,\n          message: 'Benefit type not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Benefit type updated successfully',\n        data: benefitType,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error updating benefit type', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to update benefit type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async deleteBenefitType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const deleted = await payrollService.deleteBenefitType(id);\n\n      if (!deleted) {\n        res.status(404).json({\n          success: false,\n          message: 'Benefit type not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Benefit type deleted successfully',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error deleting benefit type', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete benefit type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // New endpoints for employee deduction balances management\n  async getEmployeeDeductionBalances(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const result = await payrollService.getEmployeeDeductionBalances(req.query);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee deduction balances retrieved successfully',\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting employee deduction balances', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get employee deduction balances',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async createEmployeeDeductionBalance(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const balance = await payrollService.createEmployeeDeductionBalance(req.body);\n\n      res.status(201).json({\n        success: true,\n        message: 'Employee deduction balance created successfully',\n        data: balance,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error creating employee deduction balance', { \n        error: (error as Error).message, \n        requestId,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to create employee deduction balance',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // CSV upload endpoint for employee deduction balances\n  async uploadEmployeeDeductionBalances(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      // Assuming CSV data is parsed and passed in req.body as an array\n      const csvData = req.body;\n      \n      if (!Array.isArray(csvData)) {\n        res.status(400).json({\n          success: false,\n          message: 'Invalid CSV data format',\n          requestId\n        });\n        return;\n      }\n\n      const result = await payrollService.uploadEmployeeDeductionBalances(csvData);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee deduction balances uploaded successfully',\n        data: {\n          successCount: result.success,\n          errorCount: result.errors.length,\n          errors: result.errors\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error uploading employee deduction balances', { \n        error: (error as Error).message, \n        requestId\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to upload employee deduction balances',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // Delete employee deduction balance\n  async deleteEmployeeDeductionBalance(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      \n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Employee deduction balance ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const deleted = await payrollService.deleteEmployeeDeductionBalance(id);\n      \n      if (!deleted) {\n        res.status(404).json({\n          success: false,\n          message: 'Employee deduction balance not found',\n          requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee deduction balance deleted successfully',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error deleting employee deduction balance', { \n        error: (error as Error).message, \n        requestId,\n        id: req.params.id\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete employee deduction balance',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // CSV upload endpoint for employee benefits\n  async uploadEmployeeBenefits(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      // Assuming CSV data is parsed and passed in req.body as an array\n      const csvData = req.body;\n      \n      if (!Array.isArray(csvData)) {\n        res.status(400).json({\n          success: false,\n          message: 'Invalid CSV data format',\n          requestId\n        });\n        return;\n      }\n\n      const result = await payrollService.uploadEmployeeBenefits(csvData);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee benefits uploaded successfully',\n        data: {\n          successCount: result.success,\n          errorCount: result.errors.length,\n          errors: result.errors\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error uploading employee benefits', { \n        error: (error as Error).message, \n        requestId\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to upload employee benefits',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  // New endpoints for employee benefits management\n  async getEmployeeBenefits(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const result = await payrollService.getEmployeeBenefits(req.query);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee benefits retrieved successfully',\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting employee benefits', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get employee benefits',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async createEmployeeBenefit(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const benefit = await payrollService.createEmployeeBenefit(req.body);\n\n      res.status(201).json({\n        success: true,\n        message: 'Employee benefit created successfully',\n        data: benefit,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error creating employee benefit', { \n        error: (error as Error).message, \n        requestId,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to create employee benefit',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async updateEmployeeBenefit(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    const { id } = req.params;\n    \n    try {\n      const benefit = await payrollService.updateEmployeeBenefit(id, req.body);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee benefit updated successfully',\n        data: benefit,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error updating employee benefit', { \n        error: (error as Error).message, \n        requestId,\n        id,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to update employee benefit',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  async deleteEmployeeBenefit(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    const { id } = req.params;\n    \n    try {\n      const deleted = await payrollService.deleteEmployeeBenefit(id);\n\n      if (deleted) {\n        res.status(200).json({\n          success: true,\n          message: 'Employee benefit deleted successfully',\n          requestId\n        });\n      } else {\n        res.status(404).json({\n          success: false,\n          message: 'Employee benefit not found',\n          requestId\n        });\n      }\n    } catch (error) {\n      logger.error('Error deleting employee benefit', { \n        error: (error as Error).message, \n        requestId,\n        id\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete employee benefit',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/initialize-periods\n   * @desc Initialize payroll periods for the current year\n   * @access HR Admin\n   */\n  async initializePayrollPeriods(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      await autoPayrollService.initializePayrollPeriods();\n      \n      res.json({\n        success: true,\n        message: 'Payroll periods initialized successfully for the current year',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error initializing payroll periods', { \n        error: (error as Error).message, \n        requestId\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to initialize payroll periods',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/generate-current-month\n   * @desc Generate payroll period for the current month only\n   * @access HR Admin\n   */\n  async generateCurrentMonthPeriod(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      await autoPayrollService.generateCurrentMonthPeriod();\n      \n      res.json({\n        success: true,\n        message: 'Current month payroll period generated successfully',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error generating current month payroll period', { \n        error: (error as Error).message, \n        requestId\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to generate current month payroll period',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/expected-hours\n   * @desc Get expected monthly hours from system settings\n   * @access HR Admin\n   */\n  async getExpectedMonthlyHours(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const expectedHours = await autoPayrollService.getExpectedMonthlyHours();\n      \n      res.json({\n        success: true,\n        message: 'Expected monthly hours retrieved successfully',\n        data: { expectedHours },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting expected monthly hours', { \n        error: (error as Error).message, \n        requestId\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get expected monthly hours',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/paystubs/department/:departmentId/period/:periodId\n   * @desc Generate PDF paystubs for a department's employees for a specific period\n   * @access HR Admin\n   */\n  async generateDepartmentPaystubs(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { departmentId, periodId } = req.params;\n\n      // Get payroll records for the department and period\n      const records = await payrollService.getPayrollRecordsByDepartmentAndPeriod(departmentId, periodId);\n      \n      if (!records || records.length === 0) {\n        res.status(404).json({\n          success: false,\n          message: 'No payroll records found for this department and period',\n          requestId\n        });\n        return;\n      }\n\n      // Generate PDF paystubs using the existing method\n      const pdfBuffer = await payrollService.exportPeriodPaystubsPDF(periodId);\n\n      // Set response headers for PDF download\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"paystubs-${departmentId}-${periodId}.pdf\"`);\n      res.setHeader('Content-Length', pdfBuffer.length);\n\n      res.send(pdfBuffer);\n    } catch (error) {\n      logger.error('Error generating department paystubs', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to generate paystubs',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Export all employee paystubs for a period as PDF\n   */\n  async exportPeriodPaystubsPDF(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Period ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const pdfBuffer = await payrollService.exportPeriodPaystubsPDF(id);\n\n      // Set headers for PDF download\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"paystubs-period-${id}.pdf\"`);\n      res.setHeader('Content-Length', pdfBuffer.length);\n\n      res.send(pdfBuffer);\n    } catch (error) {\n      logger.error('Error exporting period paystubs PDF', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to export period paystubs PDF',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/periods/:id/export/paystubs/department/pdf\n   * @desc Export department employee paystubs for a period as PDF\n   * @access Department Head\n   */\n  async exportDepartmentPaystubsPDF(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const userId = req.user?.userId;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Period ID is required',\n          requestId\n        });\n        return;\n      }\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User authentication required',\n          requestId\n        });\n        return;\n      }\n\n      const pdfBuffer = await payrollService.exportDepartmentPaystubsPDF(id, userId);\n\n      // Set headers for PDF download\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"department-paystubs-period-${id}.pdf\"`);\n      res.setHeader('Content-Length', pdfBuffer.length);\n\n      res.send(pdfBuffer);\n    } catch (error) {\n      logger.error('Error exporting department paystubs PDF', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to export department paystubs PDF',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n}\n\nexport const payrollController = new PayrollController();"],"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","ignoreList":[]}