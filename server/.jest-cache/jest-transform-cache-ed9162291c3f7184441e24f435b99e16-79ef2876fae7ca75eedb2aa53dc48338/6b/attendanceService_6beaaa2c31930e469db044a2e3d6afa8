bdaed6217320e614dd60463c6c3a2e43
"use strict";

/* istanbul ignore next */
function cov_27ag4lckmc() {
  var path = "/home/kim/tito/server/src/services/attendance/attendanceService.ts";
  var hash = "c66fd343cf787c5a6d62a04baaab7c4f52306ec9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/attendance/attendanceService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "4": {
        start: {
          line: 7,
          column: 27
        },
        end: {
          line: 7,
          column: 78
        }
      },
      "5": {
        start: {
          line: 8,
          column: 28
        },
        end: {
          line: 8,
          column: 80
        }
      },
      "6": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 9,
          column: 54
        }
      },
      "7": {
        start: {
          line: 10,
          column: 19
        },
        end: {
          line: 10,
          column: 51
        }
      },
      "8": {
        start: {
          line: 11,
          column: 17
        },
        end: {
          line: 11,
          column: 63
        }
      },
      "9": {
        start: {
          line: 12,
          column: 25
        },
        end: {
          line: 12,
          column: 62
        }
      },
      "10": {
        start: {
          line: 13,
          column: 36
        },
        end: {
          line: 13,
          column: 84
        }
      },
      "11": {
        start: {
          line: 19,
          column: 84
        },
        end: {
          line: 19,
          column: 88
        }
      },
      "12": {
        start: {
          line: 21,
          column: 25
        },
        end: {
          line: 21,
          column: 76
        }
      },
      "13": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "14": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 50
        }
      },
      "15": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "16": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 54
        }
      },
      "17": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 29,
          column: 41
        }
      },
      "18": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 35
        }
      },
      "19": {
        start: {
          line: 32,
          column: 31
        },
        end: {
          line: 32,
          column: 118
        }
      },
      "20": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "21": {
        start: {
          line: 34,
          column: 37
        },
        end: {
          line: 34,
          column: 134
        }
      },
      "22": {
        start: {
          line: 35,
          column: 31
        },
        end: {
          line: 35,
          column: 99
        }
      },
      "23": {
        start: {
          line: 35,
          column: 64
        },
        end: {
          line: 35,
          column: 98
        }
      },
      "24": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "25": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 73
        }
      },
      "26": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "27": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 46
        }
      },
      "28": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "29": {
        start: {
          line: 53,
          column: 28
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "30": {
        start: {
          line: 60,
          column: 24
        },
        end: {
          line: 60,
          column: 109
        }
      },
      "31": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "32": {
        start: {
          line: 66,
          column: 24
        },
        end: {
          line: 66,
          column: 74
        }
      },
      "33": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 73,
          column: 11
        }
      },
      "34": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 23
        }
      },
      "35": {
        start: {
          line: 80,
          column: 84
        },
        end: {
          line: 80,
          column: 88
        }
      },
      "36": {
        start: {
          line: 82,
          column: 25
        },
        end: {
          line: 82,
          column: 76
        }
      },
      "37": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "38": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 50
        }
      },
      "39": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "40": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 54
        }
      },
      "41": {
        start: {
          line: 90,
          column: 22
        },
        end: {
          line: 90,
          column: 41
        }
      },
      "42": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 35
        }
      },
      "43": {
        start: {
          line: 93,
          column: 33
        },
        end: {
          line: 93,
          column: 120
        }
      },
      "44": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "45": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 92
        }
      },
      "46": {
        start: {
          line: 98,
          column: 33
        },
        end: {
          line: 98,
          column: 132
        }
      },
      "47": {
        start: {
          line: 99,
          column: 28
        },
        end: {
          line: 99,
          column: 97
        }
      },
      "48": {
        start: {
          line: 99,
          column: 61
        },
        end: {
          line: 99,
          column: 96
        }
      },
      "49": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "50": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 70
        }
      },
      "51": {
        start: {
          line: 104,
          column: 27
        },
        end: {
          line: 104,
          column: 95
        }
      },
      "52": {
        start: {
          line: 104,
          column: 60
        },
        end: {
          line: 104,
          column: 94
        }
      },
      "53": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "54": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 74
        }
      },
      "55": {
        start: {
          line: 109,
          column: 28
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "56": {
        start: {
          line: 116,
          column: 24
        },
        end: {
          line: 116,
          column: 109
        }
      },
      "57": {
        start: {
          line: 118,
          column: 27
        },
        end: {
          line: 118,
          column: 78
        }
      },
      "58": {
        start: {
          line: 120,
          column: 28
        },
        end: {
          line: 120,
          column: 37
        }
      },
      "59": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "60": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 38
        }
      },
      "61": {
        start: {
          line: 124,
          column: 13
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "62": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 35
        }
      },
      "63": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "64": {
        start: {
          line: 131,
          column: 24
        },
        end: {
          line: 131,
          column: 74
        }
      },
      "65": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "66": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 23
        }
      },
      "67": {
        start: {
          line: 147,
          column: 25
        },
        end: {
          line: 147,
          column: 87
        }
      },
      "68": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "69": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 50
        }
      },
      "70": {
        start: {
          line: 151,
          column: 31
        },
        end: {
          line: 151,
          column: 45
        }
      },
      "71": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 44
        }
      },
      "72": {
        start: {
          line: 153,
          column: 33
        },
        end: {
          line: 153,
          column: 129
        }
      },
      "73": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "74": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 166,
          column: 14
        }
      },
      "75": {
        start: {
          line: 168,
          column: 25
        },
        end: {
          line: 168,
          column: 124
        }
      },
      "76": {
        start: {
          line: 169,
          column: 27
        },
        end: {
          line: 169,
          column: 78
        }
      },
      "77": {
        start: {
          line: 170,
          column: 31
        },
        end: {
          line: 170,
          column: 79
        }
      },
      "78": {
        start: {
          line: 170,
          column: 50
        },
        end: {
          line: 170,
          column: 78
        }
      },
      "79": {
        start: {
          line: 171,
          column: 32
        },
        end: {
          line: 171,
          column: 81
        }
      },
      "80": {
        start: {
          line: 171,
          column: 51
        },
        end: {
          line: 171,
          column: 80
        }
      },
      "81": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 183,
          column: 10
        }
      },
      "82": {
        start: {
          line: 189,
          column: 23
        },
        end: {
          line: 197,
          column: 10
        }
      },
      "83": {
        start: {
          line: 198,
          column: 24
        },
        end: {
          line: 198,
          column: 26
        }
      },
      "84": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "85": {
        start: {
          line: 200,
          column: 28
        },
        end: {
          line: 200,
          column: 91
        }
      },
      "86": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 34
        }
      },
      "87": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 209,
          column: 10
        }
      },
      "88": {
        start: {
          line: 215,
          column: 22
        },
        end: {
          line: 215,
          column: 127
        }
      },
      "89": {
        start: {
          line: 216,
          column: 29
        },
        end: {
          line: 216,
          column: 133
        }
      },
      "90": {
        start: {
          line: 217,
          column: 26
        },
        end: {
          line: 217,
          column: 106
        }
      },
      "91": {
        start: {
          line: 218,
          column: 35
        },
        end: {
          line: 218,
          column: 90
        }
      },
      "92": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 227,
          column: 10
        }
      },
      "93": {
        start: {
          line: 233,
          column: 22
        },
        end: {
          line: 246,
          column: 5
        }
      },
      "94": {
        start: {
          line: 247,
          column: 23
        },
        end: {
          line: 247,
          column: 89
        }
      },
      "95": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "96": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 52
        }
      },
      "97": {
        start: {
          line: 251,
          column: 20
        },
        end: {
          line: 251,
          column: 34
        }
      },
      "98": {
        start: {
          line: 252,
          column: 31
        },
        end: {
          line: 252,
          column: 65
        }
      },
      "99": {
        start: {
          line: 253,
          column: 33
        },
        end: {
          line: 253,
          column: 69
        }
      },
      "100": {
        start: {
          line: 254,
          column: 30
        },
        end: {
          line: 254,
          column: 63
        }
      },
      "101": {
        start: {
          line: 255,
          column: 32
        },
        end: {
          line: 255,
          column: 67
        }
      },
      "102": {
        start: {
          line: 256,
          column: 33
        },
        end: {
          line: 256,
          column: 69
        }
      },
      "103": {
        start: {
          line: 257,
          column: 31
        },
        end: {
          line: 257,
          column: 134
        }
      },
      "104": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 266,
          column: 10
        }
      },
      "105": {
        start: {
          line: 272,
          column: 25
        },
        end: {
          line: 272,
          column: 123
        }
      },
      "106": {
        start: {
          line: 274,
          column: 23
        },
        end: {
          line: 274,
          column: 105
        }
      },
      "107": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 282,
          column: 11
        }
      },
      "108": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 33
        }
      },
      "109": {
        start: {
          line: 289,
          column: 25
        },
        end: {
          line: 289,
          column: 123
        }
      },
      "110": {
        start: {
          line: 290,
          column: 23
        },
        end: {
          line: 290,
          column: 105
        }
      },
      "111": {
        start: {
          line: 291,
          column: 23
        },
        end: {
          line: 291,
          column: 85
        }
      },
      "112": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 295,
          column: 10
        }
      },
      "113": {
        start: {
          line: 301,
          column: 22
        },
        end: {
          line: 301,
          column: 32
        }
      },
      "114": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 302,
          column: 35
        }
      },
      "115": {
        start: {
          line: 303,
          column: 33
        },
        end: {
          line: 303,
          column: 120
        }
      },
      "116": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "117": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 311,
          column: 14
        }
      },
      "118": {
        start: {
          line: 313,
          column: 25
        },
        end: {
          line: 313,
          column: 124
        }
      },
      "119": {
        start: {
          line: 314,
          column: 27
        },
        end: {
          line: 314,
          column: 78
        }
      },
      "120": {
        start: {
          line: 315,
          column: 32
        },
        end: {
          line: 315,
          column: 82
        }
      },
      "121": {
        start: {
          line: 315,
          column: 53
        },
        end: {
          line: 315,
          column: 81
        }
      },
      "122": {
        start: {
          line: 316,
          column: 33
        },
        end: {
          line: 316,
          column: 84
        }
      },
      "123": {
        start: {
          line: 316,
          column: 54
        },
        end: {
          line: 316,
          column: 83
        }
      },
      "124": {
        start: {
          line: 317,
          column: 28
        },
        end: {
          line: 317,
          column: 128
        }
      },
      "125": {
        start: {
          line: 318,
          column: 29
        },
        end: {
          line: 318,
          column: 132
        }
      },
      "126": {
        start: {
          line: 319,
          column: 28
        },
        end: {
          line: 319,
          column: 76
        }
      },
      "127": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 326,
          column: 10
        }
      },
      "128": {
        start: {
          line: 332,
          column: 22
        },
        end: {
          line: 346,
          column: 5
        }
      },
      "129": {
        start: {
          line: 347,
          column: 23
        },
        end: {
          line: 347,
          column: 81
        }
      },
      "130": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "131": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 38
        }
      },
      "132": {
        start: {
          line: 351,
          column: 20
        },
        end: {
          line: 351,
          column: 34
        }
      },
      "133": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 358,
          column: 10
        }
      },
      "134": {
        start: {
          line: 364,
          column: 23
        },
        end: {
          line: 372,
          column: 10
        }
      },
      "135": {
        start: {
          line: 373,
          column: 24
        },
        end: {
          line: 373,
          column: 26
        }
      },
      "136": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "137": {
        start: {
          line: 375,
          column: 28
        },
        end: {
          line: 375,
          column: 91
        }
      },
      "138": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 34
        }
      },
      "139": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 384,
          column: 10
        }
      },
      "140": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 423,
          column: 9
        }
      },
      "141": {
        start: {
          line: 392,
          column: 26
        },
        end: {
          line: 392,
          column: 45
        }
      },
      "142": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 393,
          column: 39
        }
      },
      "143": {
        start: {
          line: 394,
          column: 37
        },
        end: {
          line: 394,
          column: 124
        }
      },
      "144": {
        start: {
          line: 395,
          column: 37
        },
        end: {
          line: 397,
          column: 20
        }
      },
      "145": {
        start: {
          line: 399,
          column: 32
        },
        end: {
          line: 402,
          column: 15
        }
      },
      "146": {
        start: {
          line: 399,
          column: 65
        },
        end: {
          line: 402,
          column: 13
        }
      },
      "147": {
        start: {
          line: 404,
          column: 31
        },
        end: {
          line: 404,
          column: 116
        }
      },
      "148": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 410,
          column: 14
        }
      },
      "149": {
        start: {
          line: 413,
          column: 12
        },
        end: {
          line: 418,
          column: 15
        }
      },
      "150": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 422,
          column: 14
        }
      },
      "151": {
        start: {
          line: 429,
          column: 97
        },
        end: {
          line: 429,
          column: 101
        }
      },
      "152": {
        start: {
          line: 431,
          column: 25
        },
        end: {
          line: 431,
          column: 76
        }
      },
      "153": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 434,
          column: 9
        }
      },
      "154": {
        start: {
          line: 433,
          column: 12
        },
        end: {
          line: 433,
          column: 50
        }
      },
      "155": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 437,
          column: 9
        }
      },
      "156": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 436,
          column: 54
        }
      },
      "157": {
        start: {
          line: 439,
          column: 27
        },
        end: {
          line: 439,
          column: 98
        }
      },
      "158": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 442,
          column: 9
        }
      },
      "159": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 441,
          column: 78
        }
      },
      "160": {
        start: {
          line: 444,
          column: 22
        },
        end: {
          line: 444,
          column: 41
        }
      },
      "161": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 445,
          column: 35
        }
      },
      "162": {
        start: {
          line: 448,
          column: 31
        },
        end: {
          line: 448,
          column: 118
        }
      },
      "163": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 458,
          column: 9
        }
      },
      "164": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 450,
          column: 46
        }
      },
      "165": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 457,
          column: 15
        }
      },
      "166": {
        start: {
          line: 462,
          column: 32
        },
        end: {
          line: 462,
          column: 36
        }
      },
      "167": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 479,
          column: 9
        }
      },
      "168": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 467,
          column: 88
        }
      },
      "169": {
        start: {
          line: 471,
          column: 32
        },
        end: {
          line: 477,
          column: 13
        }
      },
      "170": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 108
        }
      },
      "171": {
        start: {
          line: 481,
          column: 27
        },
        end: {
          line: 481,
          column: 78
        }
      },
      "172": {
        start: {
          line: 482,
          column: 28
        },
        end: {
          line: 482,
          column: 37
        }
      },
      "173": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 488,
          column: 9
        }
      },
      "174": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 484,
          column: 38
        }
      },
      "175": {
        start: {
          line: 486,
          column: 13
        },
        end: {
          line: 488,
          column: 9
        }
      },
      "176": {
        start: {
          line: 487,
          column: 12
        },
        end: {
          line: 487,
          column: 35
        }
      },
      "177": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 491,
          column: 11
        }
      },
      "178": {
        start: {
          line: 493,
          column: 24
        },
        end: {
          line: 493,
          column: 74
        }
      },
      "179": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 499,
          column: 11
        }
      },
      "180": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 500,
          column: 23
        }
      },
      "181": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 546,
          column: 9
        }
      },
      "182": {
        start: {
          line: 507,
          column: 26
        },
        end: {
          line: 507,
          column: 40
        }
      },
      "183": {
        start: {
          line: 508,
          column: 12
        },
        end: {
          line: 508,
          column: 39
        }
      },
      "184": {
        start: {
          line: 509,
          column: 37
        },
        end: {
          line: 509,
          column: 124
        }
      },
      "185": {
        start: {
          line: 510,
          column: 37
        },
        end: {
          line: 512,
          column: 20
        }
      },
      "186": {
        start: {
          line: 513,
          column: 32
        },
        end: {
          line: 516,
          column: 15
        }
      },
      "187": {
        start: {
          line: 513,
          column: 65
        },
        end: {
          line: 516,
          column: 13
        }
      },
      "188": {
        start: {
          line: 517,
          column: 32
        },
        end: {
          line: 517,
          column: 91
        }
      },
      "189": {
        start: {
          line: 518,
          column: 12
        },
        end: {
          line: 526,
          column: 13
        }
      },
      "190": {
        start: {
          line: 519,
          column: 35
        },
        end: {
          line: 519,
          column: 101
        }
      },
      "191": {
        start: {
          line: 520,
          column: 16
        },
        end: {
          line: 525,
          column: 18
        }
      },
      "192": {
        start: {
          line: 527,
          column: 12
        },
        end: {
          line: 532,
          column: 14
        }
      },
      "193": {
        start: {
          line: 535,
          column: 12
        },
        end: {
          line: 539,
          column: 15
        }
      },
      "194": {
        start: {
          line: 540,
          column: 12
        },
        end: {
          line: 545,
          column: 14
        }
      },
      "195": {
        start: {
          line: 549,
          column: 0
        },
        end: {
          line: 549,
          column: 46
        }
      },
      "196": {
        start: {
          line: 550,
          column: 0
        },
        end: {
          line: 550,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 35,
            column: 53
          },
          end: {
            line: 35,
            column: 54
          }
        },
        loc: {
          start: {
            line: 35,
            column: 64
          },
          end: {
            line: 35,
            column: 98
          }
        },
        line: 35
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 25
          },
          end: {
            line: 142,
            column: 5
          }
        },
        line: 79
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 99,
            column: 50
          },
          end: {
            line: 99,
            column: 51
          }
        },
        loc: {
          start: {
            line: 99,
            column: 61
          },
          end: {
            line: 99,
            column: 96
          }
        },
        line: 99
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 104,
            column: 49
          },
          end: {
            line: 104,
            column: 50
          }
        },
        loc: {
          start: {
            line: 104,
            column: 60
          },
          end: {
            line: 104,
            column: 94
          }
        },
        line: 104
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        loc: {
          start: {
            line: 146,
            column: 49
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 146
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 170,
            column: 45
          },
          end: {
            line: 170,
            column: 46
          }
        },
        loc: {
          start: {
            line: 170,
            column: 50
          },
          end: {
            line: 170,
            column: 78
          }
        },
        line: 170
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 171,
            column: 46
          },
          end: {
            line: 171,
            column: 47
          }
        },
        loc: {
          start: {
            line: 171,
            column: 51
          },
          end: {
            line: 171,
            column: 80
          }
        },
        line: 171
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 93
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 188
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 69
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 214
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 61
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 232
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 50
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 271
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 288,
            column: 4
          },
          end: {
            line: 288,
            column: 5
          }
        },
        loc: {
          start: {
            line: 288,
            column: 58
          },
          end: {
            line: 296,
            column: 5
          }
        },
        line: 288
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 300,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        },
        loc: {
          start: {
            line: 300,
            column: 49
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 300
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 315,
            column: 48
          },
          end: {
            line: 315,
            column: 49
          }
        },
        loc: {
          start: {
            line: 315,
            column: 53
          },
          end: {
            line: 315,
            column: 81
          }
        },
        line: 315
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 316,
            column: 49
          },
          end: {
            line: 316,
            column: 50
          }
        },
        loc: {
          start: {
            line: 316,
            column: 54
          },
          end: {
            line: 316,
            column: 83
          }
        },
        line: 316
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        },
        loc: {
          start: {
            line: 331,
            column: 35
          },
          end: {
            line: 359,
            column: 5
          }
        },
        line: 331
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 363,
            column: 4
          },
          end: {
            line: 363,
            column: 5
          }
        },
        loc: {
          start: {
            line: 363,
            column: 87
          },
          end: {
            line: 385,
            column: 5
          }
        },
        line: 363
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        loc: {
          start: {
            line: 389,
            column: 84
          },
          end: {
            line: 424,
            column: 5
          }
        },
        line: 389
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 399,
            column: 53
          },
          end: {
            line: 399,
            column: 54
          }
        },
        loc: {
          start: {
            line: 399,
            column: 65
          },
          end: {
            line: 402,
            column: 13
          }
        },
        line: 399
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 428,
            column: 4
          },
          end: {
            line: 428,
            column: 5
          }
        },
        loc: {
          start: {
            line: 428,
            column: 42
          },
          end: {
            line: 501,
            column: 5
          }
        },
        line: 428
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 505,
            column: 4
          },
          end: {
            line: 505,
            column: 5
          }
        },
        loc: {
          start: {
            line: 505,
            column: 64
          },
          end: {
            line: 547,
            column: 5
          }
        },
        line: 505
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 513,
            column: 53
          },
          end: {
            line: 513,
            column: 54
          }
        },
        loc: {
          start: {
            line: 513,
            column: 65
          },
          end: {
            line: 516,
            column: 13
          }
        },
        line: 513
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 19,
            column: 57
          },
          end: {
            line: 19,
            column: 79
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 69
          },
          end: {
            line: 19,
            column: 79
          }
        }],
        line: 19
      },
      "4": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "5": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "6": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "7": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "8": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: 45,
            column: 13
          },
          end: {
            line: 51,
            column: 9
          }
        }],
        line: 42
      },
      "9": {
        loc: {
          start: {
            line: 58,
            column: 16
          },
          end: {
            line: 58,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 16
          },
          end: {
            line: 58,
            column: 31
          }
        }, {
          start: {
            line: 58,
            column: 35
          },
          end: {
            line: 58,
            column: 54
          }
        }],
        line: 58
      },
      "10": {
        loc: {
          start: {
            line: 80,
            column: 57
          },
          end: {
            line: 80,
            column: 79
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 80,
            column: 69
          },
          end: {
            line: 80,
            column: 79
          }
        }],
        line: 80
      },
      "11": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "12": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "13": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "14": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "15": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "16": {
        loc: {
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 114,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 114,
            column: 31
          }
        }, {
          start: {
            line: 114,
            column: 35
          },
          end: {
            line: 114,
            column: 54
          }
        }],
        line: 114
      },
      "17": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: 124,
            column: 13
          },
          end: {
            line: 126,
            column: 9
          }
        }],
        line: 121
      },
      "18": {
        loc: {
          start: {
            line: 124,
            column: 13
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 13
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "19": {
        loc: {
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "20": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "21": {
        loc: {
          start: {
            line: 158,
            column: 33
          },
          end: {
            line: 158,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 33
          },
          end: {
            line: 158,
            column: 58
          }
        }, {
          start: {
            line: 158,
            column: 62
          },
          end: {
            line: 158,
            column: 64
          }
        }],
        line: 158
      },
      "22": {
        loc: {
          start: {
            line: 158,
            column: 68
          },
          end: {
            line: 158,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 68
          },
          end: {
            line: 158,
            column: 92
          }
        }, {
          start: {
            line: 158,
            column: 96
          },
          end: {
            line: 158,
            column: 98
          }
        }],
        line: 158
      },
      "23": {
        loc: {
          start: {
            line: 159,
            column: 32
          },
          end: {
            line: 159,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 32
          },
          end: {
            line: 159,
            column: 57
          }
        }, {
          start: {
            line: 159,
            column: 61
          },
          end: {
            line: 159,
            column: 65
          }
        }],
        line: 159
      },
      "24": {
        loc: {
          start: {
            line: 175,
            column: 29
          },
          end: {
            line: 175,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 29
          },
          end: {
            line: 175,
            column: 54
          }
        }, {
          start: {
            line: 175,
            column: 58
          },
          end: {
            line: 175,
            column: 60
          }
        }],
        line: 175
      },
      "25": {
        loc: {
          start: {
            line: 175,
            column: 64
          },
          end: {
            line: 175,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 64
          },
          end: {
            line: 175,
            column: 88
          }
        }, {
          start: {
            line: 175,
            column: 92
          },
          end: {
            line: 175,
            column: 94
          }
        }],
        line: 175
      },
      "26": {
        loc: {
          start: {
            line: 176,
            column: 28
          },
          end: {
            line: 176,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 28
          },
          end: {
            line: 176,
            column: 53
          }
        }, {
          start: {
            line: 176,
            column: 57
          },
          end: {
            line: 176,
            column: 61
          }
        }],
        line: 176
      },
      "27": {
        loc: {
          start: {
            line: 181,
            column: 25
          },
          end: {
            line: 181,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 25
          },
          end: {
            line: 181,
            column: 50
          }
        }, {
          start: {
            line: 181,
            column: 54
          },
          end: {
            line: 181,
            column: 58
          }
        }],
        line: 181
      },
      "28": {
        loc: {
          start: {
            line: 182,
            column: 26
          },
          end: {
            line: 182,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 26
          },
          end: {
            line: 182,
            column: 52
          }
        }, {
          start: {
            line: 182,
            column: 56
          },
          end: {
            line: 182,
            column: 60
          }
        }],
        line: 182
      },
      "29": {
        loc: {
          start: {
            line: 188,
            column: 71
          },
          end: {
            line: 188,
            column: 79
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 188,
            column: 78
          },
          end: {
            line: 188,
            column: 79
          }
        }],
        line: 188
      },
      "30": {
        loc: {
          start: {
            line: 188,
            column: 81
          },
          end: {
            line: 188,
            column: 91
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 188,
            column: 89
          },
          end: {
            line: 188,
            column: 91
          }
        }],
        line: 188
      },
      "31": {
        loc: {
          start: {
            line: 218,
            column: 35
          },
          end: {
            line: 218,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 218,
            column: 51
          },
          end: {
            line: 218,
            column: 86
          }
        }, {
          start: {
            line: 218,
            column: 89
          },
          end: {
            line: 218,
            column: 90
          }
        }],
        line: 218
      },
      "32": {
        loc: {
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "33": {
        loc: {
          start: {
            line: 252,
            column: 31
          },
          end: {
            line: 252,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 31
          },
          end: {
            line: 252,
            column: 60
          }
        }, {
          start: {
            line: 252,
            column: 64
          },
          end: {
            line: 252,
            column: 65
          }
        }],
        line: 252
      },
      "34": {
        loc: {
          start: {
            line: 253,
            column: 33
          },
          end: {
            line: 253,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 33
          },
          end: {
            line: 253,
            column: 64
          }
        }, {
          start: {
            line: 253,
            column: 68
          },
          end: {
            line: 253,
            column: 69
          }
        }],
        line: 253
      },
      "35": {
        loc: {
          start: {
            line: 254,
            column: 30
          },
          end: {
            line: 254,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 30
          },
          end: {
            line: 254,
            column: 58
          }
        }, {
          start: {
            line: 254,
            column: 62
          },
          end: {
            line: 254,
            column: 63
          }
        }],
        line: 254
      },
      "36": {
        loc: {
          start: {
            line: 255,
            column: 32
          },
          end: {
            line: 255,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 255,
            column: 32
          },
          end: {
            line: 255,
            column: 62
          }
        }, {
          start: {
            line: 255,
            column: 66
          },
          end: {
            line: 255,
            column: 67
          }
        }],
        line: 255
      },
      "37": {
        loc: {
          start: {
            line: 256,
            column: 33
          },
          end: {
            line: 256,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 33
          },
          end: {
            line: 256,
            column: 64
          }
        }, {
          start: {
            line: 256,
            column: 68
          },
          end: {
            line: 256,
            column: 69
          }
        }],
        line: 256
      },
      "38": {
        loc: {
          start: {
            line: 257,
            column: 31
          },
          end: {
            line: 257,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 257,
            column: 52
          },
          end: {
            line: 257,
            column: 130
          }
        }, {
          start: {
            line: 257,
            column: 133
          },
          end: {
            line: 257,
            column: 134
          }
        }],
        line: 257
      },
      "39": {
        loc: {
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "40": {
        loc: {
          start: {
            line: 317,
            column: 28
          },
          end: {
            line: 317,
            column: 128
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 317,
            column: 58
          },
          end: {
            line: 317,
            column: 120
          }
        }, {
          start: {
            line: 317,
            column: 124
          },
          end: {
            line: 317,
            column: 128
          }
        }],
        line: 317
      },
      "41": {
        loc: {
          start: {
            line: 317,
            column: 58
          },
          end: {
            line: 317,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 317,
            column: 58
          },
          end: {
            line: 317,
            column: 112
          }
        }, {
          start: {
            line: 317,
            column: 116
          },
          end: {
            line: 317,
            column: 120
          }
        }],
        line: 317
      },
      "42": {
        loc: {
          start: {
            line: 318,
            column: 29
          },
          end: {
            line: 318,
            column: 132
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 318,
            column: 60
          },
          end: {
            line: 318,
            column: 124
          }
        }, {
          start: {
            line: 318,
            column: 128
          },
          end: {
            line: 318,
            column: 132
          }
        }],
        line: 318
      },
      "43": {
        loc: {
          start: {
            line: 318,
            column: 60
          },
          end: {
            line: 318,
            column: 124
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 318,
            column: 60
          },
          end: {
            line: 318,
            column: 116
          }
        }, {
          start: {
            line: 318,
            column: 120
          },
          end: {
            line: 318,
            column: 124
          }
        }],
        line: 318
      },
      "44": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "45": {
        loc: {
          start: {
            line: 363,
            column: 65
          },
          end: {
            line: 363,
            column: 73
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 363,
            column: 72
          },
          end: {
            line: 363,
            column: 73
          }
        }],
        line: 363
      },
      "46": {
        loc: {
          start: {
            line: 363,
            column: 75
          },
          end: {
            line: 363,
            column: 85
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 363,
            column: 83
          },
          end: {
            line: 363,
            column: 85
          }
        }],
        line: 363
      },
      "47": {
        loc: {
          start: {
            line: 389,
            column: 60
          },
          end: {
            line: 389,
            column: 82
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 389,
            column: 72
          },
          end: {
            line: 389,
            column: 82
          }
        }],
        line: 389
      },
      "48": {
        loc: {
          start: {
            line: 395,
            column: 37
          },
          end: {
            line: 397,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 396,
            column: 18
          },
          end: {
            line: 396,
            column: 117
          }
        }, {
          start: {
            line: 397,
            column: 18
          },
          end: {
            line: 397,
            column: 20
          }
        }],
        line: 395
      },
      "49": {
        loc: {
          start: {
            line: 429,
            column: 70
          },
          end: {
            line: 429,
            column: 92
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 429,
            column: 82
          },
          end: {
            line: 429,
            column: 92
          }
        }],
        line: 429
      },
      "50": {
        loc: {
          start: {
            line: 432,
            column: 8
          },
          end: {
            line: 434,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 432,
            column: 8
          },
          end: {
            line: 434,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 432
      },
      "51": {
        loc: {
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 437,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 437,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 435
      },
      "52": {
        loc: {
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 442,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 442,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 440
      },
      "53": {
        loc: {
          start: {
            line: 441,
            column: 28
          },
          end: {
            line: 441,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 441,
            column: 28
          },
          end: {
            line: 441,
            column: 45
          }
        }, {
          start: {
            line: 441,
            column: 49
          },
          end: {
            line: 441,
            column: 76
          }
        }],
        line: 441
      },
      "54": {
        loc: {
          start: {
            line: 449,
            column: 8
          },
          end: {
            line: 458,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 449,
            column: 8
          },
          end: {
            line: 458,
            column: 9
          }
        }, {
          start: {
            line: 452,
            column: 13
          },
          end: {
            line: 458,
            column: 9
          }
        }],
        line: 449
      },
      "55": {
        loc: {
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 479,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 479,
            column: 9
          }
        }, {
          start: {
            line: 469,
            column: 13
          },
          end: {
            line: 479,
            column: 9
          }
        }],
        line: 464
      },
      "56": {
        loc: {
          start: {
            line: 476,
            column: 20
          },
          end: {
            line: 476,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 476,
            column: 20
          },
          end: {
            line: 476,
            column: 35
          }
        }, {
          start: {
            line: 476,
            column: 39
          },
          end: {
            line: 476,
            column: 58
          }
        }],
        line: 476
      },
      "57": {
        loc: {
          start: {
            line: 483,
            column: 8
          },
          end: {
            line: 488,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 483,
            column: 8
          },
          end: {
            line: 488,
            column: 9
          }
        }, {
          start: {
            line: 486,
            column: 13
          },
          end: {
            line: 488,
            column: 9
          }
        }],
        line: 483
      },
      "58": {
        loc: {
          start: {
            line: 486,
            column: 13
          },
          end: {
            line: 488,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 486,
            column: 13
          },
          end: {
            line: 488,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 486
      },
      "59": {
        loc: {
          start: {
            line: 505,
            column: 45
          },
          end: {
            line: 505,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 505,
            column: 52
          },
          end: {
            line: 505,
            column: 62
          }
        }],
        line: 505
      },
      "60": {
        loc: {
          start: {
            line: 510,
            column: 37
          },
          end: {
            line: 512,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 511,
            column: 18
          },
          end: {
            line: 511,
            column: 117
          }
        }, {
          start: {
            line: 512,
            column: 18
          },
          end: {
            line: 512,
            column: 20
          }
        }],
        line: 510
      },
      "61": {
        loc: {
          start: {
            line: 518,
            column: 12
          },
          end: {
            line: 526,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 518,
            column: 12
          },
          end: {
            line: 526,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 518
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0],
      "30": [0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0],
      "46": [0],
      "47": [0],
      "48": [0, 0],
      "49": [0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0],
      "60": [0, 0],
      "61": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/attendance/attendanceService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/services/attendance/attendanceService.ts"],
      sourcesContent: ["import { attendanceRecordModel, AttendanceRecord } from '../../models/attendance/AttendanceRecord';\nimport { attendanceSessionModel, AttendanceSession, CreateAttendanceSessionData } from '../../models/attendance/AttendanceSession';\nimport { employeeModel } from '../../models/hr/Employee';\nimport { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\nimport { \n  getNextSessionType, \n  canPerformAttendanceAction,\n  SessionType,\n  getSessionDisplayInfo \n} from '../../utils/timeValidation';\nimport { defaultHoursCalculator } from '../../utils/attendanceHoursCalculator';\n\nexport interface ClockInData {\n  employeeId: string;\n  qrCodeHash: string;\n  selfieImagePath?: string;\n  timestamp?: Date | undefined;\n}\n\nexport interface ClockOutData {\n  employeeId: string;\n  qrCodeHash: string;\n  selfieImagePath?: string;\n  timestamp?: Date | undefined;\n}\n\nexport interface TimeBasedAttendanceData {\n  employeeId: string;\n  sessionType: SessionType;\n  qrCodeHash: string;\n  selfieImagePath?: string;\n  timestamp?: Date;\n}\n\nexport interface AttendanceValidationResult {\n  canPerform: boolean;\n  reason?: string;\n  nextExpectedSession?: SessionType;\n  sessionDisplayInfo?: ReturnType<typeof getSessionDisplayInfo>;\n}\n\nexport interface AttendanceSummary {\n  employeeId: string;\n  employeeCode: string;\n  employeeName: string;\n  departmentName: string | null;\n  date: Date;\n  overallStatus: string;\n  sessions: AttendanceSession[];\n  totalHours: number;\n  clockInTime: Date | null;\n  clockOutTime: Date | null;\n}\n\nexport interface AttendanceStats {\n  totalDays: number;\n  presentDays: number;\n  lateDays: number;\n  absentDays: number;\n  partialDays: number;\n  totalHours: number;\n  averageHoursPerDay: number;\n}\n\nexport class AttendanceService {\n  /**\n   * Clock in an employee\n   */\n  async clockIn(data: ClockInData): Promise<AttendanceSummary> {\n    const { employeeId, qrCodeHash, selfieImagePath, timestamp = new Date() } = data;\n\n    // Verify employee exists and is active\n    const employee = await employeeModel.findById(employeeId);\n    if (!employee) {\n      throw new Error('Employee not found');\n    }\n\n    if (employee.status !== 'active') {\n      throw new Error('Employee is not active');\n    }\n\n    // Get today's date\n    const today = new Date(timestamp);\n    today.setHours(0, 0, 0, 0);\n\n    // Check if employee already clocked in today\n    const existingRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, today);\n    if (existingRecord) {\n      const existingSessions = await attendanceSessionModel.getSessionsByAttendanceRecord(existingRecord.id);\n      const hasClockIn = existingSessions.some(session => session.sessionType === 'clock_in');\n      \n      if (hasClockIn) {\n        throw new Error('Employee has already clocked in today');\n      }\n    }\n\n    // Create or get attendance record for today\n    let attendanceRecord: AttendanceRecord;\n    if (existingRecord) {\n      attendanceRecord = existingRecord;\n    } else {\n      attendanceRecord = await attendanceRecordModel.createAttendanceRecord({\n        employeeId,\n        date: today,\n        overallStatus: 'present'\n      });\n    }\n\n    // Create clock in session\n    const sessionData: CreateAttendanceSessionData = {\n      attendanceRecordId: attendanceRecord.id,\n      sessionType: 'clock_in',\n      timestamp,\n      qrCodeHash,\n      ...(selfieImagePath && { selfieImagePath })\n    };\n\n    const session = await attendanceSessionModel.createAttendanceSession(sessionData);\n\n    // Update overall status to present\n    await attendanceRecordModel.updateAttendanceRecord(attendanceRecord.id, {\n      overallStatus: 'present'\n    });\n\n    // Get updated attendance summary\n    const summary = await this.getAttendanceSummary(employeeId, today);\n\n    logger.info('Employee clocked in successfully', {\n      employeeId,\n      employeeCode: employee.employee_id,\n      timestamp,\n      attendanceRecordId: attendanceRecord.id,\n      sessionId: session.id\n    });\n\n    return summary;\n  }\n\n  /**\n   * Clock out an employee\n   */\n  async clockOut(data: ClockOutData): Promise<AttendanceSummary> {\n    const { employeeId, qrCodeHash, selfieImagePath, timestamp = new Date() } = data;\n\n    // Verify employee exists and is active\n    const employee = await employeeModel.findById(employeeId);\n    if (!employee) {\n      throw new Error('Employee not found');\n    }\n\n    if (employee.status !== 'active') {\n      throw new Error('Employee is not active');\n    }\n\n    // Get today's date\n    const today = new Date(timestamp);\n    today.setHours(0, 0, 0, 0);\n\n    // Get today's attendance record\n    const attendanceRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, today);\n    if (!attendanceRecord) {\n      throw new Error('No attendance record found for today. Please clock in first.');\n    }\n\n    // Check if employee already clocked out today\n    const existingSessions = await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id);\n    const hasClockOut = existingSessions.some(session => session.sessionType === 'clock_out');\n    \n    if (hasClockOut) {\n      throw new Error('Employee has already clocked out today');\n    }\n\n    // Check if employee has clocked in today\n    const hasClockIn = existingSessions.some(session => session.sessionType === 'clock_in');\n    if (!hasClockIn) {\n      throw new Error('Employee must clock in before clocking out');\n    }\n\n    // Create clock out session\n    const sessionData: CreateAttendanceSessionData = {\n      attendanceRecordId: attendanceRecord.id,\n      sessionType: 'clock_out',\n      timestamp,\n      qrCodeHash,\n      ...(selfieImagePath && { selfieImagePath })\n    };\n\n    const session = await attendanceSessionModel.createAttendanceSession(sessionData);\n\n    // Calculate total hours for the day\n    const totalHours = await this.calculateDailyHours(attendanceRecord.id);\n\n    // Update overall status based on hours worked\n    let overallStatus: 'present' | 'late' | 'absent' | 'partial' = 'present';\n    if (totalHours < 4) {\n      overallStatus = 'partial';\n    } else if (totalHours < 8) {\n      overallStatus = 'late';\n    }\n\n    await attendanceRecordModel.updateAttendanceRecord(attendanceRecord.id, {\n      overallStatus\n    });\n\n    // Get updated attendance summary\n    const summary = await this.getAttendanceSummary(employeeId, today);\n\n    logger.info('Employee clocked out successfully', {\n      employeeId,\n      employeeCode: employee.employee_id,\n      timestamp,\n      totalHours,\n      overallStatus,\n      attendanceRecordId: attendanceRecord.id,\n      sessionId: session.id\n    });\n\n    return summary;\n  }\n\n  /**\n   * Get attendance summary for an employee on a specific date\n   */\n  async getAttendanceSummary(employeeId: string, date: Date): Promise<AttendanceSummary> {\n    const employee = await employeeModel.findByIdWithDetails(employeeId);\n    if (!employee) {\n      throw new Error('Employee not found');\n    }\n\n    const normalizedDate = new Date(date);\n    normalizedDate.setHours(0, 0, 0, 0);\n\n    const attendanceRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, normalizedDate);\n    if (!attendanceRecord) {\n      return {\n        employeeId,\n        employeeCode: employee.employee_id,\n        employeeName: `${employee.user?.first_name || ''} ${employee.user?.last_name || ''}`.trim(),\n        departmentName: employee.department?.name || null,\n        date: normalizedDate,\n        overallStatus: 'absent',\n        sessions: [],\n        totalHours: 0,\n        clockInTime: null,\n        clockOutTime: null\n      };\n    }\n\n    const sessions = await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id);\n    const totalHours = await this.calculateDailyHours(attendanceRecord.id);\n\n    const clockInSession = sessions.find(s => s.sessionType === 'clock_in');\n    const clockOutSession = sessions.find(s => s.sessionType === 'clock_out');\n\n    return {\n      employeeId,\n      employeeCode: employee.employee_id,\n      employeeName: `${employee.user?.first_name || ''} ${employee.user?.last_name || ''}`.trim(),\n      departmentName: employee.department?.name || null,\n      date: normalizedDate,\n      overallStatus: attendanceRecord.overallStatus,\n      sessions,\n      totalHours,\n      clockInTime: clockInSession?.timestamp || null,\n      clockOutTime: clockOutSession?.timestamp || null\n    };\n  }\n\n  /**\n   * Get attendance history for an employee\n   */\n  async getEmployeeAttendanceHistory(\n    employeeId: string, \n    startDate: Date, \n    endDate: Date,\n    page: number = 1,\n    limit: number = 20\n  ): Promise<{\n    records: AttendanceSummary[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const result = await attendanceRecordModel.listAttendanceRecords({\n      employeeId,\n      startDate,\n      endDate,\n      page,\n      limit,\n      sortBy: 'date',\n      sortOrder: 'desc'\n    });\n\n    const records: AttendanceSummary[] = [];\n    for (const record of result.records) {\n      const summary = await this.getAttendanceSummary(record.employeeId, record.date);\n      records.push(summary);\n    }\n\n    return {\n      records,\n      total: result.total,\n      page: result.page,\n      limit: result.limit,\n      totalPages: result.totalPages\n    };\n  }\n\n  /**\n   * Get attendance statistics for an employee\n   */\n  async getEmployeeAttendanceStats(employeeId: string, startDate: Date, endDate: Date): Promise<AttendanceStats> {\n    const stats = await attendanceRecordModel.getEmployeeAttendanceStats(employeeId, startDate, endDate);\n    const sessionStats = await attendanceSessionModel.getEmployeeSessionStats(employeeId, startDate, endDate);\n\n    const totalDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    const averageHoursPerDay = totalDays > 0 ? sessionStats.totalHours / totalDays : 0;\n\n    return {\n      totalDays: stats.totalDays,\n      presentDays: stats.presentDays,\n      lateDays: stats.lateDays,\n      absentDays: stats.absentDays,\n      partialDays: stats.partialDays,\n      totalHours: sessionStats.totalHours,\n      averageHoursPerDay: Math.round(averageHoursPerDay * 100) / 100\n    };\n  }\n\n  /**\n   * Get department attendance summary\n   */\n  async getDepartmentAttendanceSummary(departmentId: string, date: Date): Promise<{\n    departmentName: string;\n    totalEmployees: number;\n    presentEmployees: number;\n    lateEmployees: number;\n    absentEmployees: number;\n    partialEmployees: number;\n    attendanceRate: number;\n  }> {\n    const query = `\n      SELECT \n        d.name as department_name,\n        COUNT(DISTINCT e.id) as total_employees,\n        COUNT(DISTINCT ar.id) FILTER (WHERE ar.overall_status = 'present') as present_employees,\n        COUNT(DISTINCT ar.id) FILTER (WHERE ar.overall_status = 'late') as late_employees,\n        COUNT(DISTINCT ar.id) FILTER (WHERE ar.overall_status = 'absent') as absent_employees,\n        COUNT(DISTINCT ar.id) FILTER (WHERE ar.overall_status = 'partial') as partial_employees\n      FROM departments d\n      JOIN employees e ON d.id = e.department_id\n      LEFT JOIN attendance_records ar ON e.id = ar.employee_id AND ar.date = $2\n      WHERE d.id = $1 AND e.status = 'active'\n      GROUP BY d.id, d.name\n    `;\n\n    const result = await getPool().query(query, [departmentId, date]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('Department not found');\n    }\n\n    const row = result.rows[0];\n    const totalEmployees = parseInt(row.total_employees) || 0;\n    const presentEmployees = parseInt(row.present_employees) || 0;\n    const lateEmployees = parseInt(row.late_employees) || 0;\n    const absentEmployees = parseInt(row.absent_employees) || 0;\n    const partialEmployees = parseInt(row.partial_employees) || 0;\n    \n    const attendanceRate = totalEmployees > 0 ? ((presentEmployees + lateEmployees + partialEmployees) / totalEmployees) * 100 : 0;\n\n    return {\n      departmentName: row.department_name,\n      totalEmployees,\n      presentEmployees,\n      lateEmployees,\n      absentEmployees,\n      partialEmployees,\n      attendanceRate: Math.round(attendanceRate * 100) / 100\n    };\n  }\n\n  /**\n   * Calculate daily hours for an attendance record using the new mathematical formulation\n   */\n  private async calculateDailyHours(attendanceRecordId: string): Promise<number> {\n    const sessions = await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecordId);\n    \n    // Use the new hours calculator\n    const result = defaultHoursCalculator.calculateFromSessions(sessions);\n    \n    logger.info('Calculated daily hours', {\n      attendanceRecordId,\n      morningHours: result.morningHours,\n      afternoonHours: result.afternoonHours,\n      totalHours: result.totalHours,\n      effectiveMorningStart: result.effectiveMorningStart,\n      effectiveAfternoonStart: result.effectiveAfternoonStart\n    });\n\n    return result.totalHours;\n  }\n\n  /**\n   * Get detailed hours calculation for an attendance record\n   */\n  async getDetailedHoursCalculation(attendanceRecordId: string): Promise<{\n    morningHours: number;\n    afternoonHours: number;\n    totalHours: number;\n    effectiveMorningStart: number | null;\n    effectiveAfternoonStart: number | null;\n    effectiveMorningEnd: number | null;\n    effectiveAfternoonEnd: number | null;\n    config: any;\n  }> {\n    const sessions = await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecordId);\n    const result = defaultHoursCalculator.calculateFromSessions(sessions);\n    const config = defaultHoursCalculator.getConfig();\n\n    return {\n      ...result,\n      config\n    };\n  }\n\n  /**\n   * Get current attendance status for an employee\n   */\n  async getCurrentAttendanceStatus(employeeId: string): Promise<{\n    isClockedIn: boolean;\n    lastClockIn: Date | null;\n    lastClockOut: Date | null;\n    todayHours: number;\n    todayStatus: string;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const attendanceRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, today);\n    \n    if (!attendanceRecord) {\n      return {\n        isClockedIn: false,\n        lastClockIn: null,\n        lastClockOut: null,\n        todayHours: 0,\n        todayStatus: 'absent'\n      };\n    }\n\n    const sessions = await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id);\n    const todayHours = await this.calculateDailyHours(attendanceRecord.id);\n\n    const clockInSessions = sessions.filter(s => s.sessionType === 'clock_in');\n    const clockOutSessions = sessions.filter(s => s.sessionType === 'clock_out');\n\n    const lastClockIn = clockInSessions.length > 0 ? (clockInSessions[clockInSessions.length - 1]?.timestamp || null) : null;\n    const lastClockOut = clockOutSessions.length > 0 ? (clockOutSessions[clockOutSessions.length - 1]?.timestamp || null) : null;\n\n    const isClockedIn = clockInSessions.length > clockOutSessions.length;\n\n    return {\n      isClockedIn,\n      lastClockIn,\n      lastClockOut,\n      todayHours,\n      todayStatus: attendanceRecord.overallStatus\n    };\n  }\n\n  /**\n   * Verify QR code for attendance\n   */\n  async verifyQRCode(qrCodeHash: string): Promise<{\n    isValid: boolean;\n    employeeId?: string;\n    employeeCode?: string;\n    employeeName?: string;\n    departmentName?: string | null;\n  }> {\n    const query = `\n      SELECT \n        e.id as employee_id,\n        e.employee_id as employee_code,\n        CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n        d.name as department_name\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      JOIN id_cards ic ON e.id = ic.employee_id\n      WHERE ic.qr_code_hash = $1 \n        AND ic.is_active = true \n        AND ic.expiry_date > CURRENT_DATE\n        AND e.status = 'active'\n    `;\n\n    const result = await getPool().query(query, [qrCodeHash]);\n    \n    if (result.rows.length === 0) {\n      return { isValid: false };\n    }\n\n    const row = result.rows[0];\n    return {\n      isValid: true,\n      employeeId: row.employee_id,\n      employeeCode: row.employee_code,\n      employeeName: row.employee_name,\n      departmentName: row.department_name\n    };\n  }\n\n  /**\n   * Get attendance records for a date range\n   */\n  async getAttendanceRecords(\n    startDate: Date,\n    endDate: Date,\n    departmentId?: string,\n    page: number = 1,\n    limit: number = 20\n  ): Promise<{\n    records: AttendanceSummary[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const result = await attendanceRecordModel.listAttendanceRecords({\n      startDate,\n      endDate,\n      departmentId,\n      page,\n      limit,\n      sortBy: 'date',\n      sortOrder: 'desc'\n    });\n\n    const records: AttendanceSummary[] = [];\n    for (const record of result.records) {\n      const summary = await this.getAttendanceSummary(record.employeeId, record.date);\n      records.push(summary);\n    }\n\n    return {\n      records,\n      total: result.total,\n      page: result.page,\n      limit: result.limit,\n      totalPages: result.totalPages\n    };\n  }\n\n  /**\n   * Validate if employee can perform attendance action\n   */\n  async validateAttendanceAction(\n    employeeId: string, \n    sessionType: SessionType, \n    timestamp: Date = new Date()\n  ): Promise<AttendanceValidationResult> {\n    try {\n      // Get today's attendance record and sessions\n      const today = new Date(timestamp);\n      today.setHours(0, 0, 0, 0);\n      \n      const attendanceRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, today);\n      const existingSessions = attendanceRecord \n        ? await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id)\n        : [];\n\n      // Convert sessions to the format expected by validation functions\n      const sessionData = existingSessions.map(session => ({\n        sessionType: session.sessionType as SessionType,\n        timestamp: session.timestamp\n      }));\n\n      // Use utility function to validate\n      const validation = canPerformAttendanceAction(sessionType, sessionData, timestamp);\n      \n      return {\n        canPerform: validation.canPerform,\n        reason: validation.reason,\n        nextExpectedSession: validation.nextExpectedSession,\n        sessionDisplayInfo: getSessionDisplayInfo(sessionType)\n      };\n    } catch (error) {\n      logger.error('Error validating attendance action', {\n        error: (error as Error).message,\n        employeeId,\n        sessionType,\n        timestamp\n      });\n      \n      return {\n        canPerform: false,\n        reason: 'Error validating attendance action'\n      };\n    }\n  }\n\n  /**\n   * Record time-based attendance (morning_in, morning_out, afternoon_in, afternoon_out)\n   */\n  async recordTimeBasedAttendance(data: TimeBasedAttendanceData): Promise<AttendanceSummary> {\n    const { employeeId, sessionType, qrCodeHash, selfieImagePath, timestamp = new Date() } = data;\n\n    // Verify employee exists and is active\n    const employee = await employeeModel.findById(employeeId);\n    if (!employee) {\n      throw new Error('Employee not found');\n    }\n\n    if (employee.status !== 'active') {\n      throw new Error('Employee is not active');\n    }\n\n    // Validate attendance action\n    const validation = await this.validateAttendanceAction(employeeId, sessionType, timestamp);\n    if (!validation.canPerform) {\n      throw new Error(validation.reason || 'Invalid attendance action');\n    }\n\n    // Get today's date\n    const today = new Date(timestamp);\n    today.setHours(0, 0, 0, 0);\n\n    // Create or get attendance record for today\n    let attendanceRecord: AttendanceRecord;\n    const existingRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, today);\n    \n    if (existingRecord) {\n      attendanceRecord = existingRecord;\n    } else {\n      attendanceRecord = await attendanceRecordModel.createAttendanceRecord({\n        employeeId,\n        date: today,\n        overallStatus: 'present'\n      });\n    }\n\n    // Check if session already exists\n    // Note: sessionType from timeValidation is different from database sessionType\n    // For now, we'll create new sessions instead of updating existing ones\n    const existingSession = null;\n\n    let session: AttendanceSession;\n\n    if (existingSession) {\n      // Update existing session - this branch is currently disabled due to type mismatch\n      // TODO: Implement proper session update logic when database schema supports time-based sessions\n      throw new Error('Session update not implemented for time-based attendance');\n    } else {\n      // Create new session\n      const sessionData: CreateAttendanceSessionData = {\n        attendanceRecordId: attendanceRecord.id,\n        sessionType: sessionType,\n        timestamp,\n        qrCodeHash,\n        ...(selfieImagePath && { selfieImagePath })\n      };\n\n      session = await attendanceSessionModel.createAttendanceSession(sessionData);\n    }\n\n    // Update overall status based on completed sessions\n    const totalHours = await this.calculateDailyHours(attendanceRecord.id);\n    let overallStatus: 'present' | 'late' | 'absent' | 'partial' = 'present';\n    \n    if (totalHours < 4) {\n      overallStatus = 'partial';\n    } else if (totalHours < 8) {\n      overallStatus = 'late';\n    }\n\n    await attendanceRecordModel.updateAttendanceRecord(attendanceRecord.id, {\n      overallStatus\n    });\n\n    // Get updated attendance summary\n    const summary = await this.getAttendanceSummary(employeeId, today);\n\n    logger.info('Time-based attendance recorded successfully', {\n      employeeId,\n      sessionType,\n      timestamp,\n      sessionId: session.id\n    });\n\n    return summary;\n  }\n\n  /**\n   * Get next expected session for employee\n   */\n  async getNextExpectedSession(employeeId: string, date: Date = new Date()): Promise<{\n    sessionType: SessionType | null;\n    displayInfo: ReturnType<typeof getSessionDisplayInfo> | null;\n    canPerform: boolean;\n    reason?: string;\n  }> {\n    try {\n      const today = new Date(date);\n      today.setHours(0, 0, 0, 0);\n      \n      const attendanceRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, today);\n      const existingSessions = attendanceRecord \n        ? await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id)\n        : [];\n\n      const sessionData = existingSessions.map(session => ({\n        sessionType: session.sessionType as SessionType,\n        timestamp: session.timestamp\n      }));\n\n      const nextSession = getNextSessionType(sessionData, date);\n      \n      if (nextSession) {\n        const validation = await this.validateAttendanceAction(employeeId, nextSession, date);\n        return {\n          sessionType: nextSession,\n          displayInfo: getSessionDisplayInfo(nextSession),\n          canPerform: validation.canPerform,\n          reason: validation.reason\n        };\n      }\n\n      return {\n        sessionType: null,\n        displayInfo: null,\n        canPerform: false,\n        reason: 'No valid session available at this time'\n      };\n    } catch (error) {\n      logger.error('Error getting next expected session', {\n        error: (error as Error).message,\n        employeeId,\n        date\n      });\n      \n      return {\n        sessionType: null,\n        displayInfo: null,\n        canPerform: false,\n        reason: 'Error determining next session'\n      };\n    }\n  }\n}\n\nexport const attendanceService = new AttendanceService();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c66fd343cf787c5a6d62a04baaab7c4f52306ec9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_27ag4lckmc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_27ag4lckmc();
var __importDefault =
/* istanbul ignore next */
(cov_27ag4lckmc().s[0]++,
/* istanbul ignore next */
(cov_27ag4lckmc().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_27ag4lckmc().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_27ag4lckmc().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_27ag4lckmc().f[0]++;
  cov_27ag4lckmc().s[1]++;
  return /* istanbul ignore next */(cov_27ag4lckmc().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_27ag4lckmc().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_27ag4lckmc().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_27ag4lckmc().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_27ag4lckmc().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_27ag4lckmc().s[3]++;
exports.attendanceService = exports.AttendanceService = void 0;
const AttendanceRecord_1 =
/* istanbul ignore next */
(cov_27ag4lckmc().s[4]++, require("../../models/attendance/AttendanceRecord"));
const AttendanceSession_1 =
/* istanbul ignore next */
(cov_27ag4lckmc().s[5]++, require("../../models/attendance/AttendanceSession"));
const Employee_1 =
/* istanbul ignore next */
(cov_27ag4lckmc().s[6]++, require("../../models/hr/Employee"));
const database_1 =
/* istanbul ignore next */
(cov_27ag4lckmc().s[7]++, require("../../config/database"));
const logger_1 =
/* istanbul ignore next */
(cov_27ag4lckmc().s[8]++, __importDefault(require("../../utils/logger")));
const timeValidation_1 =
/* istanbul ignore next */
(cov_27ag4lckmc().s[9]++, require("../../utils/timeValidation"));
const attendanceHoursCalculator_1 =
/* istanbul ignore next */
(cov_27ag4lckmc().s[10]++, require("../../utils/attendanceHoursCalculator"));
class AttendanceService {
  /**
   * Clock in an employee
   */
  async clockIn(data) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[1]++;
    const {
      employeeId,
      qrCodeHash,
      selfieImagePath,
      timestamp =
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[3][0]++, new Date())
    } =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[11]++, data);
    // Verify employee exists and is active
    const employee =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[12]++, await Employee_1.employeeModel.findById(employeeId));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[13]++;
    if (!employee) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[4][0]++;
      cov_27ag4lckmc().s[14]++;
      throw new Error('Employee not found');
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[4][1]++;
    }
    cov_27ag4lckmc().s[15]++;
    if (employee.status !== 'active') {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[5][0]++;
      cov_27ag4lckmc().s[16]++;
      throw new Error('Employee is not active');
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[5][1]++;
    }
    // Get today's date
    const today =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[17]++, new Date(timestamp));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[18]++;
    today.setHours(0, 0, 0, 0);
    // Check if employee already clocked in today
    const existingRecord =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[19]++, await AttendanceRecord_1.attendanceRecordModel.findByEmployeeAndDate(employeeId, today));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[20]++;
    if (existingRecord) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[6][0]++;
      const existingSessions =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[21]++, await AttendanceSession_1.attendanceSessionModel.getSessionsByAttendanceRecord(existingRecord.id));
      const hasClockIn =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[22]++, existingSessions.some(session => {
        /* istanbul ignore next */
        cov_27ag4lckmc().f[2]++;
        cov_27ag4lckmc().s[23]++;
        return session.sessionType === 'clock_in';
      }));
      /* istanbul ignore next */
      cov_27ag4lckmc().s[24]++;
      if (hasClockIn) {
        /* istanbul ignore next */
        cov_27ag4lckmc().b[7][0]++;
        cov_27ag4lckmc().s[25]++;
        throw new Error('Employee has already clocked in today');
      } else
      /* istanbul ignore next */
      {
        cov_27ag4lckmc().b[7][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[6][1]++;
    }
    // Create or get attendance record for today
    let attendanceRecord;
    /* istanbul ignore next */
    cov_27ag4lckmc().s[26]++;
    if (existingRecord) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[8][0]++;
      cov_27ag4lckmc().s[27]++;
      attendanceRecord = existingRecord;
    } else {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[8][1]++;
      cov_27ag4lckmc().s[28]++;
      attendanceRecord = await AttendanceRecord_1.attendanceRecordModel.createAttendanceRecord({
        employeeId,
        date: today,
        overallStatus: 'present'
      });
    }
    // Create clock in session
    const sessionData =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[29]++, {
      attendanceRecordId: attendanceRecord.id,
      sessionType: 'clock_in',
      timestamp,
      qrCodeHash,
      ...(
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[9][0]++, selfieImagePath) &&
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[9][1]++, {
        selfieImagePath
      }))
    });
    const session =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[30]++, await AttendanceSession_1.attendanceSessionModel.createAttendanceSession(sessionData));
    // Update overall status to present
    /* istanbul ignore next */
    cov_27ag4lckmc().s[31]++;
    await AttendanceRecord_1.attendanceRecordModel.updateAttendanceRecord(attendanceRecord.id, {
      overallStatus: 'present'
    });
    // Get updated attendance summary
    const summary =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[32]++, await this.getAttendanceSummary(employeeId, today));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[33]++;
    logger_1.default.info('Employee clocked in successfully', {
      employeeId,
      employeeCode: employee.employee_id,
      timestamp,
      attendanceRecordId: attendanceRecord.id,
      sessionId: session.id
    });
    /* istanbul ignore next */
    cov_27ag4lckmc().s[34]++;
    return summary;
  }
  /**
   * Clock out an employee
   */
  async clockOut(data) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[3]++;
    const {
      employeeId,
      qrCodeHash,
      selfieImagePath,
      timestamp =
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[10][0]++, new Date())
    } =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[35]++, data);
    // Verify employee exists and is active
    const employee =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[36]++, await Employee_1.employeeModel.findById(employeeId));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[37]++;
    if (!employee) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[11][0]++;
      cov_27ag4lckmc().s[38]++;
      throw new Error('Employee not found');
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[11][1]++;
    }
    cov_27ag4lckmc().s[39]++;
    if (employee.status !== 'active') {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[12][0]++;
      cov_27ag4lckmc().s[40]++;
      throw new Error('Employee is not active');
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[12][1]++;
    }
    // Get today's date
    const today =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[41]++, new Date(timestamp));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[42]++;
    today.setHours(0, 0, 0, 0);
    // Get today's attendance record
    const attendanceRecord =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[43]++, await AttendanceRecord_1.attendanceRecordModel.findByEmployeeAndDate(employeeId, today));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[44]++;
    if (!attendanceRecord) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[13][0]++;
      cov_27ag4lckmc().s[45]++;
      throw new Error('No attendance record found for today. Please clock in first.');
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[13][1]++;
    }
    // Check if employee already clocked out today
    const existingSessions =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[46]++, await AttendanceSession_1.attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id));
    const hasClockOut =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[47]++, existingSessions.some(session => {
      /* istanbul ignore next */
      cov_27ag4lckmc().f[4]++;
      cov_27ag4lckmc().s[48]++;
      return session.sessionType === 'clock_out';
    }));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[49]++;
    if (hasClockOut) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[14][0]++;
      cov_27ag4lckmc().s[50]++;
      throw new Error('Employee has already clocked out today');
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[14][1]++;
    }
    // Check if employee has clocked in today
    const hasClockIn =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[51]++, existingSessions.some(session => {
      /* istanbul ignore next */
      cov_27ag4lckmc().f[5]++;
      cov_27ag4lckmc().s[52]++;
      return session.sessionType === 'clock_in';
    }));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[53]++;
    if (!hasClockIn) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[15][0]++;
      cov_27ag4lckmc().s[54]++;
      throw new Error('Employee must clock in before clocking out');
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[15][1]++;
    }
    // Create clock out session
    const sessionData =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[55]++, {
      attendanceRecordId: attendanceRecord.id,
      sessionType: 'clock_out',
      timestamp,
      qrCodeHash,
      ...(
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[16][0]++, selfieImagePath) &&
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[16][1]++, {
        selfieImagePath
      }))
    });
    const session =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[56]++, await AttendanceSession_1.attendanceSessionModel.createAttendanceSession(sessionData));
    // Calculate total hours for the day
    const totalHours =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[57]++, await this.calculateDailyHours(attendanceRecord.id));
    // Update overall status based on hours worked
    let overallStatus =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[58]++, 'present');
    /* istanbul ignore next */
    cov_27ag4lckmc().s[59]++;
    if (totalHours < 4) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[17][0]++;
      cov_27ag4lckmc().s[60]++;
      overallStatus = 'partial';
    } else {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[17][1]++;
      cov_27ag4lckmc().s[61]++;
      if (totalHours < 8) {
        /* istanbul ignore next */
        cov_27ag4lckmc().b[18][0]++;
        cov_27ag4lckmc().s[62]++;
        overallStatus = 'late';
      } else
      /* istanbul ignore next */
      {
        cov_27ag4lckmc().b[18][1]++;
      }
    }
    /* istanbul ignore next */
    cov_27ag4lckmc().s[63]++;
    await AttendanceRecord_1.attendanceRecordModel.updateAttendanceRecord(attendanceRecord.id, {
      overallStatus
    });
    // Get updated attendance summary
    const summary =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[64]++, await this.getAttendanceSummary(employeeId, today));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[65]++;
    logger_1.default.info('Employee clocked out successfully', {
      employeeId,
      employeeCode: employee.employee_id,
      timestamp,
      totalHours,
      overallStatus,
      attendanceRecordId: attendanceRecord.id,
      sessionId: session.id
    });
    /* istanbul ignore next */
    cov_27ag4lckmc().s[66]++;
    return summary;
  }
  /**
   * Get attendance summary for an employee on a specific date
   */
  async getAttendanceSummary(employeeId, date) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[6]++;
    const employee =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[67]++, await Employee_1.employeeModel.findByIdWithDetails(employeeId));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[68]++;
    if (!employee) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[19][0]++;
      cov_27ag4lckmc().s[69]++;
      throw new Error('Employee not found');
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[19][1]++;
    }
    const normalizedDate =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[70]++, new Date(date));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[71]++;
    normalizedDate.setHours(0, 0, 0, 0);
    const attendanceRecord =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[72]++, await AttendanceRecord_1.attendanceRecordModel.findByEmployeeAndDate(employeeId, normalizedDate));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[73]++;
    if (!attendanceRecord) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[20][0]++;
      cov_27ag4lckmc().s[74]++;
      return {
        employeeId,
        employeeCode: employee.employee_id,
        employeeName: `${
        /* istanbul ignore next */
        (cov_27ag4lckmc().b[21][0]++, employee.user?.first_name) ||
        /* istanbul ignore next */
        (cov_27ag4lckmc().b[21][1]++, '')} ${
        /* istanbul ignore next */
        (cov_27ag4lckmc().b[22][0]++, employee.user?.last_name) ||
        /* istanbul ignore next */
        (cov_27ag4lckmc().b[22][1]++, '')}`.trim(),
        departmentName:
        /* istanbul ignore next */
        (cov_27ag4lckmc().b[23][0]++, employee.department?.name) ||
        /* istanbul ignore next */
        (cov_27ag4lckmc().b[23][1]++, null),
        date: normalizedDate,
        overallStatus: 'absent',
        sessions: [],
        totalHours: 0,
        clockInTime: null,
        clockOutTime: null
      };
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[20][1]++;
    }
    const sessions =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[75]++, await AttendanceSession_1.attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id));
    const totalHours =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[76]++, await this.calculateDailyHours(attendanceRecord.id));
    const clockInSession =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[77]++, sessions.find(s => {
      /* istanbul ignore next */
      cov_27ag4lckmc().f[7]++;
      cov_27ag4lckmc().s[78]++;
      return s.sessionType === 'clock_in';
    }));
    const clockOutSession =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[79]++, sessions.find(s => {
      /* istanbul ignore next */
      cov_27ag4lckmc().f[8]++;
      cov_27ag4lckmc().s[80]++;
      return s.sessionType === 'clock_out';
    }));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[81]++;
    return {
      employeeId,
      employeeCode: employee.employee_id,
      employeeName: `${
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[24][0]++, employee.user?.first_name) ||
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[24][1]++, '')} ${
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[25][0]++, employee.user?.last_name) ||
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[25][1]++, '')}`.trim(),
      departmentName:
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[26][0]++, employee.department?.name) ||
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[26][1]++, null),
      date: normalizedDate,
      overallStatus: attendanceRecord.overallStatus,
      sessions,
      totalHours,
      clockInTime:
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[27][0]++, clockInSession?.timestamp) ||
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[27][1]++, null),
      clockOutTime:
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[28][0]++, clockOutSession?.timestamp) ||
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[28][1]++, null)
    };
  }
  /**
   * Get attendance history for an employee
   */
  async getEmployeeAttendanceHistory(employeeId, startDate, endDate, page =
  /* istanbul ignore next */
  (cov_27ag4lckmc().b[29][0]++, 1), limit =
  /* istanbul ignore next */
  (cov_27ag4lckmc().b[30][0]++, 20)) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[9]++;
    const result =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[82]++, await AttendanceRecord_1.attendanceRecordModel.listAttendanceRecords({
      employeeId,
      startDate,
      endDate,
      page,
      limit,
      sortBy: 'date',
      sortOrder: 'desc'
    }));
    const records =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[83]++, []);
    /* istanbul ignore next */
    cov_27ag4lckmc().s[84]++;
    for (const record of result.records) {
      const summary =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[85]++, await this.getAttendanceSummary(record.employeeId, record.date));
      /* istanbul ignore next */
      cov_27ag4lckmc().s[86]++;
      records.push(summary);
    }
    /* istanbul ignore next */
    cov_27ag4lckmc().s[87]++;
    return {
      records,
      total: result.total,
      page: result.page,
      limit: result.limit,
      totalPages: result.totalPages
    };
  }
  /**
   * Get attendance statistics for an employee
   */
  async getEmployeeAttendanceStats(employeeId, startDate, endDate) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[10]++;
    const stats =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[88]++, await AttendanceRecord_1.attendanceRecordModel.getEmployeeAttendanceStats(employeeId, startDate, endDate));
    const sessionStats =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[89]++, await AttendanceSession_1.attendanceSessionModel.getEmployeeSessionStats(employeeId, startDate, endDate));
    const totalDays =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[90]++, Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1);
    const averageHoursPerDay =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[91]++, totalDays > 0 ?
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[31][0]++, sessionStats.totalHours / totalDays) :
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[31][1]++, 0));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[92]++;
    return {
      totalDays: stats.totalDays,
      presentDays: stats.presentDays,
      lateDays: stats.lateDays,
      absentDays: stats.absentDays,
      partialDays: stats.partialDays,
      totalHours: sessionStats.totalHours,
      averageHoursPerDay: Math.round(averageHoursPerDay * 100) / 100
    };
  }
  /**
   * Get department attendance summary
   */
  async getDepartmentAttendanceSummary(departmentId, date) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[11]++;
    const query =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[93]++, `
      SELECT 
        d.name as department_name,
        COUNT(DISTINCT e.id) as total_employees,
        COUNT(DISTINCT ar.id) FILTER (WHERE ar.overall_status = 'present') as present_employees,
        COUNT(DISTINCT ar.id) FILTER (WHERE ar.overall_status = 'late') as late_employees,
        COUNT(DISTINCT ar.id) FILTER (WHERE ar.overall_status = 'absent') as absent_employees,
        COUNT(DISTINCT ar.id) FILTER (WHERE ar.overall_status = 'partial') as partial_employees
      FROM departments d
      JOIN employees e ON d.id = e.department_id
      LEFT JOIN attendance_records ar ON e.id = ar.employee_id AND ar.date = $2
      WHERE d.id = $1 AND e.status = 'active'
      GROUP BY d.id, d.name
    `);
    const result =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[94]++, await (0, database_1.getPool)().query(query, [departmentId, date]));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[95]++;
    if (result.rows.length === 0) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[32][0]++;
      cov_27ag4lckmc().s[96]++;
      throw new Error('Department not found');
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[32][1]++;
    }
    const row =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[97]++, result.rows[0]);
    const totalEmployees =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[98]++,
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[33][0]++, parseInt(row.total_employees)) ||
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[33][1]++, 0));
    const presentEmployees =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[99]++,
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[34][0]++, parseInt(row.present_employees)) ||
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[34][1]++, 0));
    const lateEmployees =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[100]++,
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[35][0]++, parseInt(row.late_employees)) ||
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[35][1]++, 0));
    const absentEmployees =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[101]++,
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[36][0]++, parseInt(row.absent_employees)) ||
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[36][1]++, 0));
    const partialEmployees =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[102]++,
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[37][0]++, parseInt(row.partial_employees)) ||
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[37][1]++, 0));
    const attendanceRate =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[103]++, totalEmployees > 0 ?
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[38][0]++, (presentEmployees + lateEmployees + partialEmployees) / totalEmployees * 100) :
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[38][1]++, 0));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[104]++;
    return {
      departmentName: row.department_name,
      totalEmployees,
      presentEmployees,
      lateEmployees,
      absentEmployees,
      partialEmployees,
      attendanceRate: Math.round(attendanceRate * 100) / 100
    };
  }
  /**
   * Calculate daily hours for an attendance record using the new mathematical formulation
   */
  async calculateDailyHours(attendanceRecordId) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[12]++;
    const sessions =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[105]++, await AttendanceSession_1.attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecordId));
    // Use the new hours calculator
    const result =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[106]++, attendanceHoursCalculator_1.defaultHoursCalculator.calculateFromSessions(sessions));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[107]++;
    logger_1.default.info('Calculated daily hours', {
      attendanceRecordId,
      morningHours: result.morningHours,
      afternoonHours: result.afternoonHours,
      totalHours: result.totalHours,
      effectiveMorningStart: result.effectiveMorningStart,
      effectiveAfternoonStart: result.effectiveAfternoonStart
    });
    /* istanbul ignore next */
    cov_27ag4lckmc().s[108]++;
    return result.totalHours;
  }
  /**
   * Get detailed hours calculation for an attendance record
   */
  async getDetailedHoursCalculation(attendanceRecordId) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[13]++;
    const sessions =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[109]++, await AttendanceSession_1.attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecordId));
    const result =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[110]++, attendanceHoursCalculator_1.defaultHoursCalculator.calculateFromSessions(sessions));
    const config =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[111]++, attendanceHoursCalculator_1.defaultHoursCalculator.getConfig());
    /* istanbul ignore next */
    cov_27ag4lckmc().s[112]++;
    return {
      ...result,
      config
    };
  }
  /**
   * Get current attendance status for an employee
   */
  async getCurrentAttendanceStatus(employeeId) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[14]++;
    const today =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[113]++, new Date());
    /* istanbul ignore next */
    cov_27ag4lckmc().s[114]++;
    today.setHours(0, 0, 0, 0);
    const attendanceRecord =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[115]++, await AttendanceRecord_1.attendanceRecordModel.findByEmployeeAndDate(employeeId, today));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[116]++;
    if (!attendanceRecord) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[39][0]++;
      cov_27ag4lckmc().s[117]++;
      return {
        isClockedIn: false,
        lastClockIn: null,
        lastClockOut: null,
        todayHours: 0,
        todayStatus: 'absent'
      };
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[39][1]++;
    }
    const sessions =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[118]++, await AttendanceSession_1.attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id));
    const todayHours =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[119]++, await this.calculateDailyHours(attendanceRecord.id));
    const clockInSessions =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[120]++, sessions.filter(s => {
      /* istanbul ignore next */
      cov_27ag4lckmc().f[15]++;
      cov_27ag4lckmc().s[121]++;
      return s.sessionType === 'clock_in';
    }));
    const clockOutSessions =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[122]++, sessions.filter(s => {
      /* istanbul ignore next */
      cov_27ag4lckmc().f[16]++;
      cov_27ag4lckmc().s[123]++;
      return s.sessionType === 'clock_out';
    }));
    const lastClockIn =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[124]++, clockInSessions.length > 0 ?
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[40][0]++,
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[41][0]++, clockInSessions[clockInSessions.length - 1]?.timestamp) ||
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[41][1]++, null)) :
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[40][1]++, null));
    const lastClockOut =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[125]++, clockOutSessions.length > 0 ?
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[42][0]++,
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[43][0]++, clockOutSessions[clockOutSessions.length - 1]?.timestamp) ||
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[43][1]++, null)) :
    /* istanbul ignore next */
    (cov_27ag4lckmc().b[42][1]++, null));
    const isClockedIn =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[126]++, clockInSessions.length > clockOutSessions.length);
    /* istanbul ignore next */
    cov_27ag4lckmc().s[127]++;
    return {
      isClockedIn,
      lastClockIn,
      lastClockOut,
      todayHours,
      todayStatus: attendanceRecord.overallStatus
    };
  }
  /**
   * Verify QR code for attendance
   */
  async verifyQRCode(qrCodeHash) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[17]++;
    const query =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[128]++, `
      SELECT 
        e.id as employee_id,
        e.employee_id as employee_code,
        CONCAT(u.first_name, ' ', u.last_name) as employee_name,
        d.name as department_name
      FROM employees e
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      JOIN id_cards ic ON e.id = ic.employee_id
      WHERE ic.qr_code_hash = $1 
        AND ic.is_active = true 
        AND ic.expiry_date > CURRENT_DATE
        AND e.status = 'active'
    `);
    const result =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[129]++, await (0, database_1.getPool)().query(query, [qrCodeHash]));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[130]++;
    if (result.rows.length === 0) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[44][0]++;
      cov_27ag4lckmc().s[131]++;
      return {
        isValid: false
      };
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[44][1]++;
    }
    const row =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[132]++, result.rows[0]);
    /* istanbul ignore next */
    cov_27ag4lckmc().s[133]++;
    return {
      isValid: true,
      employeeId: row.employee_id,
      employeeCode: row.employee_code,
      employeeName: row.employee_name,
      departmentName: row.department_name
    };
  }
  /**
   * Get attendance records for a date range
   */
  async getAttendanceRecords(startDate, endDate, departmentId, page =
  /* istanbul ignore next */
  (cov_27ag4lckmc().b[45][0]++, 1), limit =
  /* istanbul ignore next */
  (cov_27ag4lckmc().b[46][0]++, 20)) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[18]++;
    const result =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[134]++, await AttendanceRecord_1.attendanceRecordModel.listAttendanceRecords({
      startDate,
      endDate,
      departmentId,
      page,
      limit,
      sortBy: 'date',
      sortOrder: 'desc'
    }));
    const records =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[135]++, []);
    /* istanbul ignore next */
    cov_27ag4lckmc().s[136]++;
    for (const record of result.records) {
      const summary =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[137]++, await this.getAttendanceSummary(record.employeeId, record.date));
      /* istanbul ignore next */
      cov_27ag4lckmc().s[138]++;
      records.push(summary);
    }
    /* istanbul ignore next */
    cov_27ag4lckmc().s[139]++;
    return {
      records,
      total: result.total,
      page: result.page,
      limit: result.limit,
      totalPages: result.totalPages
    };
  }
  /**
   * Validate if employee can perform attendance action
   */
  async validateAttendanceAction(employeeId, sessionType, timestamp =
  /* istanbul ignore next */
  (cov_27ag4lckmc().b[47][0]++, new Date())) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[19]++;
    cov_27ag4lckmc().s[140]++;
    try {
      // Get today's attendance record and sessions
      const today =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[141]++, new Date(timestamp));
      /* istanbul ignore next */
      cov_27ag4lckmc().s[142]++;
      today.setHours(0, 0, 0, 0);
      const attendanceRecord =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[143]++, await AttendanceRecord_1.attendanceRecordModel.findByEmployeeAndDate(employeeId, today));
      const existingSessions =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[144]++, attendanceRecord ?
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[48][0]++, await AttendanceSession_1.attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id)) :
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[48][1]++, []));
      // Convert sessions to the format expected by validation functions
      const sessionData =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[145]++, existingSessions.map(session => {
        /* istanbul ignore next */
        cov_27ag4lckmc().f[20]++;
        cov_27ag4lckmc().s[146]++;
        return {
          sessionType: session.sessionType,
          timestamp: session.timestamp
        };
      }));
      // Use utility function to validate
      const validation =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[147]++, (0, timeValidation_1.canPerformAttendanceAction)(sessionType, sessionData, timestamp));
      /* istanbul ignore next */
      cov_27ag4lckmc().s[148]++;
      return {
        canPerform: validation.canPerform,
        reason: validation.reason,
        nextExpectedSession: validation.nextExpectedSession,
        sessionDisplayInfo: (0, timeValidation_1.getSessionDisplayInfo)(sessionType)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_27ag4lckmc().s[149]++;
      logger_1.default.error('Error validating attendance action', {
        error: error.message,
        employeeId,
        sessionType,
        timestamp
      });
      /* istanbul ignore next */
      cov_27ag4lckmc().s[150]++;
      return {
        canPerform: false,
        reason: 'Error validating attendance action'
      };
    }
  }
  /**
   * Record time-based attendance (morning_in, morning_out, afternoon_in, afternoon_out)
   */
  async recordTimeBasedAttendance(data) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[21]++;
    const {
      employeeId,
      sessionType,
      qrCodeHash,
      selfieImagePath,
      timestamp =
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[49][0]++, new Date())
    } =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[151]++, data);
    // Verify employee exists and is active
    const employee =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[152]++, await Employee_1.employeeModel.findById(employeeId));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[153]++;
    if (!employee) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[50][0]++;
      cov_27ag4lckmc().s[154]++;
      throw new Error('Employee not found');
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[50][1]++;
    }
    cov_27ag4lckmc().s[155]++;
    if (employee.status !== 'active') {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[51][0]++;
      cov_27ag4lckmc().s[156]++;
      throw new Error('Employee is not active');
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[51][1]++;
    }
    // Validate attendance action
    const validation =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[157]++, await this.validateAttendanceAction(employeeId, sessionType, timestamp));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[158]++;
    if (!validation.canPerform) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[52][0]++;
      cov_27ag4lckmc().s[159]++;
      throw new Error(
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[53][0]++, validation.reason) ||
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[53][1]++, 'Invalid attendance action'));
    } else
    /* istanbul ignore next */
    {
      cov_27ag4lckmc().b[52][1]++;
    }
    // Get today's date
    const today =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[160]++, new Date(timestamp));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[161]++;
    today.setHours(0, 0, 0, 0);
    // Create or get attendance record for today
    let attendanceRecord;
    const existingRecord =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[162]++, await AttendanceRecord_1.attendanceRecordModel.findByEmployeeAndDate(employeeId, today));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[163]++;
    if (existingRecord) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[54][0]++;
      cov_27ag4lckmc().s[164]++;
      attendanceRecord = existingRecord;
    } else {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[54][1]++;
      cov_27ag4lckmc().s[165]++;
      attendanceRecord = await AttendanceRecord_1.attendanceRecordModel.createAttendanceRecord({
        employeeId,
        date: today,
        overallStatus: 'present'
      });
    }
    // Check if session already exists
    // Note: sessionType from timeValidation is different from database sessionType
    // For now, we'll create new sessions instead of updating existing ones
    const existingSession =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[166]++, null);
    let session;
    /* istanbul ignore next */
    cov_27ag4lckmc().s[167]++;
    if (existingSession) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[55][0]++;
      cov_27ag4lckmc().s[168]++;
      // Update existing session - this branch is currently disabled due to type mismatch
      // TODO: Implement proper session update logic when database schema supports time-based sessions
      throw new Error('Session update not implemented for time-based attendance');
    } else {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[55][1]++;
      // Create new session
      const sessionData =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[169]++, {
        attendanceRecordId: attendanceRecord.id,
        sessionType: sessionType,
        timestamp,
        qrCodeHash,
        ...(
        /* istanbul ignore next */
        (cov_27ag4lckmc().b[56][0]++, selfieImagePath) &&
        /* istanbul ignore next */
        (cov_27ag4lckmc().b[56][1]++, {
          selfieImagePath
        }))
      });
      /* istanbul ignore next */
      cov_27ag4lckmc().s[170]++;
      session = await AttendanceSession_1.attendanceSessionModel.createAttendanceSession(sessionData);
    }
    // Update overall status based on completed sessions
    const totalHours =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[171]++, await this.calculateDailyHours(attendanceRecord.id));
    let overallStatus =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[172]++, 'present');
    /* istanbul ignore next */
    cov_27ag4lckmc().s[173]++;
    if (totalHours < 4) {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[57][0]++;
      cov_27ag4lckmc().s[174]++;
      overallStatus = 'partial';
    } else {
      /* istanbul ignore next */
      cov_27ag4lckmc().b[57][1]++;
      cov_27ag4lckmc().s[175]++;
      if (totalHours < 8) {
        /* istanbul ignore next */
        cov_27ag4lckmc().b[58][0]++;
        cov_27ag4lckmc().s[176]++;
        overallStatus = 'late';
      } else
      /* istanbul ignore next */
      {
        cov_27ag4lckmc().b[58][1]++;
      }
    }
    /* istanbul ignore next */
    cov_27ag4lckmc().s[177]++;
    await AttendanceRecord_1.attendanceRecordModel.updateAttendanceRecord(attendanceRecord.id, {
      overallStatus
    });
    // Get updated attendance summary
    const summary =
    /* istanbul ignore next */
    (cov_27ag4lckmc().s[178]++, await this.getAttendanceSummary(employeeId, today));
    /* istanbul ignore next */
    cov_27ag4lckmc().s[179]++;
    logger_1.default.info('Time-based attendance recorded successfully', {
      employeeId,
      sessionType,
      timestamp,
      sessionId: session.id
    });
    /* istanbul ignore next */
    cov_27ag4lckmc().s[180]++;
    return summary;
  }
  /**
   * Get next expected session for employee
   */
  async getNextExpectedSession(employeeId, date =
  /* istanbul ignore next */
  (cov_27ag4lckmc().b[59][0]++, new Date())) {
    /* istanbul ignore next */
    cov_27ag4lckmc().f[22]++;
    cov_27ag4lckmc().s[181]++;
    try {
      const today =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[182]++, new Date(date));
      /* istanbul ignore next */
      cov_27ag4lckmc().s[183]++;
      today.setHours(0, 0, 0, 0);
      const attendanceRecord =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[184]++, await AttendanceRecord_1.attendanceRecordModel.findByEmployeeAndDate(employeeId, today));
      const existingSessions =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[185]++, attendanceRecord ?
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[60][0]++, await AttendanceSession_1.attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id)) :
      /* istanbul ignore next */
      (cov_27ag4lckmc().b[60][1]++, []));
      const sessionData =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[186]++, existingSessions.map(session => {
        /* istanbul ignore next */
        cov_27ag4lckmc().f[23]++;
        cov_27ag4lckmc().s[187]++;
        return {
          sessionType: session.sessionType,
          timestamp: session.timestamp
        };
      }));
      const nextSession =
      /* istanbul ignore next */
      (cov_27ag4lckmc().s[188]++, (0, timeValidation_1.getNextSessionType)(sessionData, date));
      /* istanbul ignore next */
      cov_27ag4lckmc().s[189]++;
      if (nextSession) {
        /* istanbul ignore next */
        cov_27ag4lckmc().b[61][0]++;
        const validation =
        /* istanbul ignore next */
        (cov_27ag4lckmc().s[190]++, await this.validateAttendanceAction(employeeId, nextSession, date));
        /* istanbul ignore next */
        cov_27ag4lckmc().s[191]++;
        return {
          sessionType: nextSession,
          displayInfo: (0, timeValidation_1.getSessionDisplayInfo)(nextSession),
          canPerform: validation.canPerform,
          reason: validation.reason
        };
      } else
      /* istanbul ignore next */
      {
        cov_27ag4lckmc().b[61][1]++;
      }
      cov_27ag4lckmc().s[192]++;
      return {
        sessionType: null,
        displayInfo: null,
        canPerform: false,
        reason: 'No valid session available at this time'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_27ag4lckmc().s[193]++;
      logger_1.default.error('Error getting next expected session', {
        error: error.message,
        employeeId,
        date
      });
      /* istanbul ignore next */
      cov_27ag4lckmc().s[194]++;
      return {
        sessionType: null,
        displayInfo: null,
        canPerform: false,
        reason: 'Error determining next session'
      };
    }
  }
}
/* istanbul ignore next */
cov_27ag4lckmc().s[195]++;
exports.AttendanceService = AttendanceService;
/* istanbul ignore next */
cov_27ag4lckmc().s[196]++;
exports.attendanceService = new AttendanceService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,