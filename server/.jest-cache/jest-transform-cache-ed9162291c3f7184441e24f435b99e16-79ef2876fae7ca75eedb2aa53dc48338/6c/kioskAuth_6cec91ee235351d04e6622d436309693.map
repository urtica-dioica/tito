{"version":3,"names":["jwt_1","cov_2hpyk0ixs2","s","require","authService_1","getRequestId","req","f","b","requestId","kioskAuth","res","next","method","path","qrCode","query","status","json","success","message","error","timestamp","Date","toISOString","token","extractTokenFromHeader","headers","authorization","result","authService","validateToken","user","data","kioskApiKey","validKioskKeys","process","env","KIOSK_API_KEYS","split","includes","kioskContext","authenticated","apiKey","type","exports","requireUserAuth","requireKioskAuth"],"sources":["/home/kim/tito/server/src/middleware/auth/kioskAuth.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { extractTokenFromHeader } from '../../config/jwt';\nimport { authService } from '../../services/auth/authService';\nimport { ApiResponse } from '../../utils/types/express';\n\n/**\n * Helper function to get request ID safely\n */\nconst getRequestId = (req: Request): string => {\n  return req.requestId || 'unknown';\n};\n\n/**\n * Kiosk authentication middleware - supports both JWT and kiosk API key authentication\n * For kiosk operations, we allow:\n * 1. Regular JWT authentication for logged-in users\n * 2. Kiosk API key authentication for kiosk devices\n * 3. Limited public access for QR verification\n */\nexport const kioskAuth = async (\n  req: Request,\n  res: Response<ApiResponse>,\n  next: NextFunction\n): Promise<void> => {\n  try {\n    // Handle CORS preflight requests\n    if (req.method === 'OPTIONS') {\n      next();\n      return;\n    }\n\n    // For QR verification, allow limited public access\n    if (req.path === '/verify-qr' && req.method === 'GET') {\n      // Still validate the request has a QR code parameter\n      const { qrCode } = req.query;\n      if (!qrCode || typeof qrCode !== 'string') {\n        res.status(400).json({\n          success: false,\n          message: 'QR code is required for verification',\n          error: 'MISSING_QR_CODE',\n          timestamp: new Date().toISOString(),\n          requestId: getRequestId(req)\n        });\n        return;\n      }\n      next();\n      return;\n    }\n\n    // Try JWT authentication first\n    const token = extractTokenFromHeader(req.headers.authorization);\n\n    if (token) {\n      try {\n        const result = await authService.validateToken(token);\n\n        if (result.success) {\n          // Set user info in request for authenticated users\n          req.user = result.data?.user;\n          next();\n          return;\n        }\n      } catch (error) {\n        // JWT validation failed, continue to kiosk auth\n      }\n    }\n\n    // Check for kiosk API key in headers\n    const kioskApiKey = req.headers['x-kiosk-api-key'] as string;\n\n    if (kioskApiKey) {\n      // Validate kiosk API key (this should be stored securely, e.g., in environment variables)\n      const validKioskKeys = process.env.KIOSK_API_KEYS?.split(',') || [];\n\n      if (validKioskKeys.includes(kioskApiKey)) {\n        // Set kiosk context in request\n        req.kioskContext = {\n          authenticated: true,\n          apiKey: kioskApiKey,\n          type: 'kiosk_device'\n        };\n        next();\n        return;\n      }\n    }\n\n    // If we reach here, authentication failed\n    res.status(401).json({\n      success: false,\n      message: 'Authentication required for kiosk operations',\n      error: 'AUTHENTICATION_REQUIRED',\n      timestamp: new Date().toISOString(),\n      requestId: getRequestId(req)\n    });\n\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: 'Authentication service error',\n      error: 'AUTH_SERVICE_ERROR',\n      timestamp: new Date().toISOString(),\n      requestId: getRequestId(req)\n    });\n  }\n};\n\n/**\n * Middleware to require authenticated user (not just kiosk device)\n */\nexport const requireUserAuth = (\n  req: Request,\n  res: Response<ApiResponse>,\n  next: NextFunction\n): void => {\n  if (!req.user) {\n    res.status(401).json({\n      success: false,\n      message: 'User authentication required',\n      error: 'USER_AUTH_REQUIRED',\n      timestamp: new Date().toISOString(),\n      requestId: getRequestId(req)\n    });\n    return;\n  }\n  next();\n};\n\n/**\n * Middleware to require kiosk device authentication\n */\nexport const requireKioskAuth = (\n  req: Request,\n  res: Response<ApiResponse>,\n  next: NextFunction\n): void => {\n  if (!req.kioskContext?.authenticated) {\n    res.status(401).json({\n      success: false,\n      message: 'Kiosk device authentication required',\n      error: 'KIOSK_AUTH_REQUIRED',\n      timestamp: new Date().toISOString(),\n      requestId: getRequestId(req)\n    });\n    return;\n  }\n  next();\n};\n"],"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","ignoreList":[]}