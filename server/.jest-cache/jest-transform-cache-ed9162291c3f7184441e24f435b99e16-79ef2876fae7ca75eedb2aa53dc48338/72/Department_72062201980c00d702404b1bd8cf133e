31edaa366597213e136e8fee49966451
"use strict";

/* istanbul ignore next */
function cov_8bamqxdyo() {
  var path = "/home/kim/tito/server/src/models/hr/Department.ts";
  var hash = "4d513211874f2ca46ea6805c61922363c7bb18e9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/models/hr/Department.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 59
        }
      },
      "2": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 51
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 46
        }
      },
      "4": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 17,
          column: 5
        }
      },
      "5": {
        start: {
          line: 18,
          column: 23
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "7": {
        start: {
          line: 25,
          column: 27
        },
        end: {
          line: 25,
          column: 63
        }
      },
      "8": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 34
        }
      },
      "9": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 24
        }
      },
      "10": {
        start: {
          line: 36,
          column: 22
        },
        end: {
          line: 36,
          column: 63
        }
      },
      "11": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "12": {
        start: {
          line: 38,
          column: 27
        },
        end: {
          line: 38,
          column: 61
        }
      },
      "13": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 42
        }
      },
      "14": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 24
        }
      },
      "15": {
        start: {
          line: 49,
          column: 22
        },
        end: {
          line: 49,
          column: 65
        }
      },
      "16": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "17": {
        start: {
          line: 51,
          column: 27
        },
        end: {
          line: 51,
          column: 63
        }
      },
      "18": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 42
        }
      },
      "19": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 24
        }
      },
      "20": {
        start: {
          line: 62,
          column: 22
        },
        end: {
          line: 76,
          column: 5
        }
      },
      "21": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "22": {
        start: {
          line: 78,
          column: 27
        },
        end: {
          line: 78,
          column: 61
        }
      },
      "23": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "24": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 28
        }
      },
      "25": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 38
        }
      },
      "26": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 99,
          column: 14
        }
      },
      "27": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 24
        }
      },
      "28": {
        start: {
          line: 109,
          column: 23
        },
        end: {
          line: 109,
          column: 25
        }
      },
      "29": {
        start: {
          line: 110,
          column: 23
        },
        end: {
          line: 110,
          column: 25
        }
      },
      "30": {
        start: {
          line: 111,
          column: 25
        },
        end: {
          line: 111,
          column: 26
        }
      },
      "31": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "32": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 51
        }
      },
      "33": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 35
        }
      },
      "34": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "35": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 58
        }
      },
      "36": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 42
        }
      },
      "37": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "38": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 70
        }
      },
      "39": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 54
        }
      },
      "40": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "41": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 56
        }
      },
      "42": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 40
        }
      },
      "43": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "44": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 37
        }
      },
      "45": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 53
        }
      },
      "46": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 32
        }
      },
      "47": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 24
        }
      },
      "48": {
        start: {
          line: 134,
          column: 22
        },
        end: {
          line: 139,
          column: 5
        }
      },
      "49": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "50": {
        start: {
          line: 141,
          column: 27
        },
        end: {
          line: 141,
          column: 63
        }
      },
      "51": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 42
        }
      },
      "52": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 24
        }
      },
      "53": {
        start: {
          line: 153,
          column: 29
        },
        end: {
          line: 153,
          column: 56
        }
      },
      "54": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "55": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 78
        }
      },
      "56": {
        start: {
          line: 157,
          column: 22
        },
        end: {
          line: 157,
          column: 61
        }
      },
      "57": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "58": {
        start: {
          line: 159,
          column: 27
        },
        end: {
          line: 159,
          column: 61
        }
      },
      "59": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 65
        }
      },
      "60": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 24
        }
      },
      "61": {
        start: {
          line: 170,
          column: 22
        },
        end: {
          line: 184,
          column: 5
        }
      },
      "62": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "63": {
        start: {
          line: 186,
          column: 27
        },
        end: {
          line: 186,
          column: 55
        }
      },
      "64": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 203,
          column: 16
        }
      },
      "65": {
        start: {
          line: 187,
          column: 43
        },
        end: {
          line: 203,
          column: 13
        }
      },
      "66": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 24
        }
      },
      "67": {
        start: {
          line: 213,
          column: 22
        },
        end: {
          line: 228,
          column: 5
        }
      },
      "68": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "69": {
        start: {
          line: 230,
          column: 27
        },
        end: {
          line: 230,
          column: 55
        }
      },
      "70": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 247,
          column: 16
        }
      },
      "71": {
        start: {
          line: 231,
          column: 43
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "72": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 24
        }
      },
      "73": {
        start: {
          line: 257,
          column: 22
        },
        end: {
          line: 257,
          column: 84
        }
      },
      "74": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "75": {
        start: {
          line: 259,
          column: 27
        },
        end: {
          line: 259,
          column: 65
        }
      },
      "76": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 42
        }
      },
      "77": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 24
        }
      },
      "78": {
        start: {
          line: 270,
          column: 22
        },
        end: {
          line: 270,
          column: 96
        }
      },
      "79": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "80": {
        start: {
          line: 272,
          column: 27
        },
        end: {
          line: 272,
          column: 81
        }
      },
      "81": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 42
        }
      },
      "82": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 24
        }
      },
      "83": {
        start: {
          line: 283,
          column: 22
        },
        end: {
          line: 283,
          column: 77
        }
      },
      "84": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "85": {
        start: {
          line: 285,
          column: 27
        },
        end: {
          line: 285,
          column: 63
        }
      },
      "86": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 50
        }
      },
      "87": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 24
        }
      },
      "88": {
        start: {
          line: 296,
          column: 22
        },
        end: {
          line: 298,
          column: 57
        }
      },
      "89": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "90": {
        start: {
          line: 300,
          column: 27
        },
        end: {
          line: 302,
          column: 54
        }
      },
      "91": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 42
        }
      },
      "92": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 24
        }
      },
      "93": {
        start: {
          line: 314,
          column: 26
        },
        end: {
          line: 314,
          column: 64
        }
      },
      "94": {
        start: {
          line: 315,
          column: 27
        },
        end: {
          line: 315,
          column: 69
        }
      },
      "95": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 318,
          column: 9
        }
      },
      "96": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 46
        }
      },
      "97": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "98": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 67
        }
      },
      "99": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 88
        }
      },
      "100": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 86
        }
      },
      "101": {
        start: {
          line: 332,
          column: 0
        },
        end: {
          line: 332,
          column: 42
        }
      },
      "102": {
        start: {
          line: 334,
          column: 0
        },
        end: {
          line: 334,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 33
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 23
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 35
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 27
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 48
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 31
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 61
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 37
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 108
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        loc: {
          start: {
            line: 151,
            column: 31
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 151
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        loc: {
          start: {
            line: 169,
            column: 31
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 169
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 187,
            column: 35
          },
          end: {
            line: 187,
            column: 36
          }
        },
        loc: {
          start: {
            line: 187,
            column: 43
          },
          end: {
            line: 203,
            column: 13
          }
        },
        line: 187
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 34
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 212
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 231,
            column: 35
          },
          end: {
            line: 231,
            column: 36
          }
        },
        loc: {
          start: {
            line: 231,
            column: 43
          },
          end: {
            line: 247,
            column: 13
          }
        },
        line: 231
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 39
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 256
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 37
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 269
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 36
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 282
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        },
        loc: {
          start: {
            line: 295,
            column: 38
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 295
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 312,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        loc: {
          start: {
            line: 312,
            column: 53
          },
          end: {
            line: 324,
            column: 5
          }
        },
        line: 312
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 328,
            column: 5
          }
        },
        loc: {
          start: {
            line: 328,
            column: 45
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 328
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 20,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 20,
            column: 28
          }
        }, {
          start: {
            line: 20,
            column: 32
          },
          end: {
            line: 20,
            column: 36
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 21,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 21,
            column: 40
          }
        }, {
          start: {
            line: 21,
            column: 44
          },
          end: {
            line: 21,
            column: 48
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 22,
            column: 43
          },
          end: {
            line: 22,
            column: 57
          }
        }, {
          start: {
            line: 22,
            column: 60
          },
          end: {
            line: 22,
            column: 64
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 19
          },
          end: {
            line: 39,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 19
          },
          end: {
            line: 39,
            column: 33
          }
        }, {
          start: {
            line: 39,
            column: 37
          },
          end: {
            line: 39,
            column: 41
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 52,
            column: 19
          },
          end: {
            line: 52,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 19
          },
          end: {
            line: 52,
            column: 33
          }
        }, {
          start: {
            line: 52,
            column: 37
          },
          end: {
            line: 52,
            column: 41
          }
        }],
        line: 52
      },
      "5": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "6": {
        loc: {
          start: {
            line: 91,
            column: 33
          },
          end: {
            line: 97,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 91,
            column: 52
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: 97,
            column: 20
          },
          end: {
            line: 97,
            column: 24
          }
        }],
        line: 91
      },
      "7": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "8": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "9": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "10": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "11": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "12": {
        loc: {
          start: {
            line: 142,
            column: 19
          },
          end: {
            line: 142,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 19
          },
          end: {
            line: 142,
            column: 33
          }
        }, {
          start: {
            line: 142,
            column: 37
          },
          end: {
            line: 142,
            column: 41
          }
        }],
        line: 142
      },
      "13": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "14": {
        loc: {
          start: {
            line: 160,
            column: 19
          },
          end: {
            line: 160,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 160,
            column: 37
          },
          end: {
            line: 160,
            column: 56
          }
        }, {
          start: {
            line: 160,
            column: 59
          },
          end: {
            line: 160,
            column: 64
          }
        }],
        line: 160
      },
      "15": {
        loc: {
          start: {
            line: 195,
            column: 33
          },
          end: {
            line: 201,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 52
          },
          end: {
            line: 201,
            column: 17
          }
        }, {
          start: {
            line: 201,
            column: 20
          },
          end: {
            line: 201,
            column: 29
          }
        }],
        line: 195
      },
      "16": {
        loc: {
          start: {
            line: 239,
            column: 33
          },
          end: {
            line: 245,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 239,
            column: 52
          },
          end: {
            line: 245,
            column: 17
          }
        }, {
          start: {
            line: 245,
            column: 20
          },
          end: {
            line: 245,
            column: 29
          }
        }],
        line: 239
      },
      "17": {
        loc: {
          start: {
            line: 260,
            column: 19
          },
          end: {
            line: 260,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 19
          },
          end: {
            line: 260,
            column: 33
          }
        }, {
          start: {
            line: 260,
            column: 37
          },
          end: {
            line: 260,
            column: 41
          }
        }],
        line: 260
      },
      "18": {
        loc: {
          start: {
            line: 296,
            column: 22
          },
          end: {
            line: 298,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 297,
            column: 14
          },
          end: {
            line: 297,
            column: 70
          }
        }, {
          start: {
            line: 298,
            column: 14
          },
          end: {
            line: 298,
            column: 57
          }
        }],
        line: 296
      },
      "19": {
        loc: {
          start: {
            line: 300,
            column: 27
          },
          end: {
            line: 302,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 18
          },
          end: {
            line: 301,
            column: 65
          }
        }, {
          start: {
            line: 302,
            column: 18
          },
          end: {
            line: 302,
            column: 54
          }
        }],
        line: 300
      },
      "20": {
        loc: {
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 318,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 318,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "21": {
        loc: {
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/models/hr/Department.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/models/hr/Department.ts"],
      sourcesContent: ["import { Pool } from 'pg';\nimport { getPool } from '../../config/database';\n\nexport interface Department {\n  id: string;\n  name: string;\n  description: string | null;\n  department_head_user_id: string | null;\n  is_active: boolean;\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface CreateDepartmentData {\n  name: string;\n  description?: string;\n  department_head_user_id?: string;\n  is_active?: boolean;\n}\n\nexport interface UpdateDepartmentData {\n  name?: string;\n  description?: string;\n  department_head_user_id?: string | null;\n  is_active?: boolean;\n}\n\nexport interface DepartmentWithHead extends Department {\n  department_head?: {\n    id: string;\n    email: string;\n    first_name: string;\n    last_name: string;\n    role: string;\n  } | null | undefined;\n  employee_count: number;\n}\n\nexport class DepartmentModel {\n  private pool: Pool;\n\n  constructor() {\n    this.pool = getPool();\n  }\n\n  /**\n   * Create new department\n   */\n  async createDepartment(data: CreateDepartmentData): Promise<Department> {\n    const query = `\n      INSERT INTO departments (name, description, department_head_user_id, is_active)\n      VALUES ($1, $2, $3, $4)\n      RETURNING *\n    `;\n\n    const values = [\n      data.name,\n      data.description || null,\n      data.department_head_user_id || null,\n      data.is_active !== undefined ? data.is_active : true\n    ];\n\n    try {\n      const result = await this.pool.query(query, values);\n      return result.rows[0];\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get department by ID\n   */\n  async findById(id: string): Promise<Department | null> {\n    const query = 'SELECT * FROM departments WHERE id = $1';\n    \n    try {\n      const result = await this.pool.query(query, [id]);\n      return result.rows[0] || null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get department by name\n   */\n  async findByName(name: string): Promise<Department | null> {\n    const query = 'SELECT * FROM departments WHERE name = $1';\n    \n    try {\n      const result = await this.pool.query(query, [name]);\n      return result.rows[0] || null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get department with head information\n   */\n  async findByIdWithHead(id: string): Promise<DepartmentWithHead | null> {\n    const query = `\n      SELECT \n        d.*,\n        u.id as head_user_id,\n        u.email as head_email,\n        u.first_name as head_first_name,\n        u.last_name as head_last_name,\n        u.role as head_role,\n        COUNT(e.id) as employee_count\n      FROM departments d\n      LEFT JOIN users u ON d.department_head_user_id = u.id\n      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'\n      WHERE d.id = $1\n      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name, u.role\n    `;\n\n    try {\n      const result = await this.pool.query(query, [id]);\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      const row = result.rows[0];\n      \n      return {\n        id: row.id,\n        name: row.name,\n        description: row.description,\n        department_head_user_id: row.department_head_user_id,\n        is_active: row.is_active,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        department_head: row.head_user_id ? {\n          id: row.head_user_id,\n          email: row.head_email,\n          first_name: row.head_first_name,\n          last_name: row.head_last_name,\n          role: row.head_role\n        } : null,\n        employee_count: parseInt(row.employee_count)\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update department\n   */\n  async updateDepartment(id: string, data: UpdateDepartmentData): Promise<Department | null> {\n    const fields = [];\n    const values = [];\n    let paramCount = 1;\n\n    if (data.name !== undefined) {\n      fields.push(`name = $${paramCount++}`);\n      values.push(data.name);\n    }\n    if (data.description !== undefined) {\n      fields.push(`description = $${paramCount++}`);\n      values.push(data.description);\n    }\n    if (data.department_head_user_id !== undefined) {\n      fields.push(`department_head_user_id = $${paramCount++}`);\n      values.push(data.department_head_user_id);\n    }\n    if (data.is_active !== undefined) {\n      fields.push(`is_active = $${paramCount++}`);\n      values.push(data.is_active);\n    }\n\n    if (fields.length === 0) {\n      return this.findById(id);\n    }\n\n    fields.push(`updated_at = $${paramCount++}`);\n    values.push(new Date());\n    values.push(id);\n\n    const query = `\n      UPDATE departments \n      SET ${fields.join(', ')}\n      WHERE id = $${paramCount}\n      RETURNING *\n    `;\n\n    try {\n      const result = await this.pool.query(query, values);\n      return result.rows[0] || null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Delete department\n   */\n  async deleteDepartment(id: string): Promise<boolean> {\n    // Check if department has employees\n    const hasEmployees = await this.hasEmployees(id);\n    if (hasEmployees) {\n      throw new Error('Cannot delete department with active employees');\n    }\n\n    const query = 'DELETE FROM departments WHERE id = $1';\n    \n    try {\n      const result = await this.pool.query(query, [id]);\n      return result.rowCount ? result.rowCount > 0 : false;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * List all departments\n   */\n  async listAllDepartments(): Promise<DepartmentWithHead[]> {\n    const query = `\n      SELECT \n        d.*,\n        u.id as head_user_id,\n        u.email as head_email,\n        u.first_name as head_first_name,\n        u.last_name as head_last_name,\n        u.role as head_role,\n        COUNT(e.id) as employee_count\n      FROM departments d\n      LEFT JOIN users u ON d.department_head_user_id = u.id\n      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'\n      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name, u.role\n      ORDER BY d.name\n    `;\n\n    try {\n      const result = await this.pool.query(query);\n      \n      return result.rows.map(row => ({\n        id: row.id,\n        name: row.name,\n        description: row.description,\n        department_head_user_id: row.department_head_user_id,\n        is_active: row.is_active,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        department_head: row.head_user_id ? {\n          id: row.head_user_id,\n          email: row.head_email,\n          first_name: row.head_first_name,\n          last_name: row.head_last_name,\n          role: row.head_role\n        } : undefined,\n        employee_count: parseInt(row.employee_count)\n      }));\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * List active departments only\n   */\n  async listActiveDepartments(): Promise<DepartmentWithHead[]> {\n    const query = `\n      SELECT \n        d.*,\n        u.id as head_user_id,\n        u.email as head_email,\n        u.first_name as head_first_name,\n        u.last_name as head_last_name,\n        u.role as head_role,\n        COUNT(e.id) as employee_count\n      FROM departments d\n      LEFT JOIN users u ON d.department_head_user_id = u.id\n      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'\n      WHERE d.is_active = true\n      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name, u.role\n      ORDER BY d.name\n    `;\n\n    try {\n      const result = await this.pool.query(query);\n      \n      return result.rows.map(row => ({\n        id: row.id,\n        name: row.name,\n        description: row.description,\n        department_head_user_id: row.department_head_user_id,\n        is_active: row.is_active,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        department_head: row.head_user_id ? {\n          id: row.head_user_id,\n          email: row.head_email,\n          first_name: row.head_first_name,\n          last_name: row.head_last_name,\n          role: row.head_role\n        } : undefined,\n        employee_count: parseInt(row.employee_count)\n      }));\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get department by department head user ID\n   */\n  async findByDepartmentHead(userId: string): Promise<Department | null> {\n    const query = 'SELECT * FROM departments WHERE department_head_user_id = $1';\n    \n    try {\n      const result = await this.pool.query(query, [userId]);\n      return result.rows[0] || null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Check if department has employees\n   */\n  async hasEmployees(departmentId: string): Promise<boolean> {\n    const query = 'SELECT 1 FROM employees WHERE department_id = $1 AND status = $2 LIMIT 1';\n    \n    try {\n      const result = await this.pool.query(query, [departmentId, 'active']);\n      return result.rows.length > 0;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get total department count\n   */\n  async getTotalDepartmentCount(): Promise<number> {\n    const query = 'SELECT COUNT(*) FROM departments WHERE is_active = $1';\n    \n    try {\n      const result = await this.pool.query(query, [true]);\n      return parseInt(result.rows[0].count);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Check if department name exists\n   */\n  async nameExists(name: string, excludeId?: string): Promise<boolean> {\n    const query = excludeId \n      ? 'SELECT 1 FROM departments WHERE name = $1 AND id != $2'\n      : 'SELECT 1 FROM departments WHERE name = $1';\n    \n    try {\n      const result = excludeId \n        ? await this.pool.query(query, [name, excludeId])\n        : await this.pool.query(query, [name]);\n      return result.rows.length > 0;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Assign department head\n   */\n  async assignDepartmentHead(departmentId: string, userId: string): Promise<Department | null> {\n    // First verify the user has department_head role\n    const userQuery = 'SELECT role FROM users WHERE id = $1';\n    const userResult = await this.pool.query(userQuery, [userId]);\n    \n    if (userResult.rows.length === 0) {\n      throw new Error('User not found');\n    }\n    \n    if (userResult.rows[0].role !== 'department_head') {\n      throw new Error('User must have department_head role');\n    }\n\n    // Update the department\n    return this.updateDepartment(departmentId, { department_head_user_id: userId });\n  }\n\n  /**\n   * Remove department head\n   */\n  async removeDepartmentHead(departmentId: string): Promise<Department | null> {\n    return this.updateDepartment(departmentId, { department_head_user_id: null });\n  }\n}\n\n// Export singleton instance\nexport const departmentModel = new DepartmentModel(); "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4d513211874f2ca46ea6805c61922363c7bb18e9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_8bamqxdyo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_8bamqxdyo();
cov_8bamqxdyo().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_8bamqxdyo().s[1]++;
exports.departmentModel = exports.DepartmentModel = void 0;
const database_1 =
/* istanbul ignore next */
(cov_8bamqxdyo().s[2]++, require("../../config/database"));
class DepartmentModel {
  constructor() {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[0]++;
    cov_8bamqxdyo().s[3]++;
    this.pool = (0, database_1.getPool)();
  }
  /**
   * Create new department
   */
  async createDepartment(data) {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[1]++;
    const query =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[4]++, `
      INSERT INTO departments (name, description, department_head_user_id, is_active)
      VALUES ($1, $2, $3, $4)
      RETURNING *
    `);
    const values =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[5]++, [data.name,
    /* istanbul ignore next */
    (cov_8bamqxdyo().b[0][0]++, data.description) ||
    /* istanbul ignore next */
    (cov_8bamqxdyo().b[0][1]++, null),
    /* istanbul ignore next */
    (cov_8bamqxdyo().b[1][0]++, data.department_head_user_id) ||
    /* istanbul ignore next */
    (cov_8bamqxdyo().b[1][1]++, null), data.is_active !== undefined ?
    /* istanbul ignore next */
    (cov_8bamqxdyo().b[2][0]++, data.is_active) :
    /* istanbul ignore next */
    (cov_8bamqxdyo().b[2][1]++, true)]);
    /* istanbul ignore next */
    cov_8bamqxdyo().s[6]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_8bamqxdyo().s[7]++, await this.pool.query(query, values));
      /* istanbul ignore next */
      cov_8bamqxdyo().s[8]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_8bamqxdyo().s[9]++;
      throw error;
    }
  }
  /**
   * Get department by ID
   */
  async findById(id) {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[2]++;
    const query =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[10]++, 'SELECT * FROM departments WHERE id = $1');
    /* istanbul ignore next */
    cov_8bamqxdyo().s[11]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_8bamqxdyo().s[12]++, await this.pool.query(query, [id]));
      /* istanbul ignore next */
      cov_8bamqxdyo().s[13]++;
      return /* istanbul ignore next */(cov_8bamqxdyo().b[3][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_8bamqxdyo().b[3][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_8bamqxdyo().s[14]++;
      throw error;
    }
  }
  /**
   * Get department by name
   */
  async findByName(name) {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[3]++;
    const query =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[15]++, 'SELECT * FROM departments WHERE name = $1');
    /* istanbul ignore next */
    cov_8bamqxdyo().s[16]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_8bamqxdyo().s[17]++, await this.pool.query(query, [name]));
      /* istanbul ignore next */
      cov_8bamqxdyo().s[18]++;
      return /* istanbul ignore next */(cov_8bamqxdyo().b[4][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_8bamqxdyo().b[4][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_8bamqxdyo().s[19]++;
      throw error;
    }
  }
  /**
   * Get department with head information
   */
  async findByIdWithHead(id) {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[4]++;
    const query =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[20]++, `
      SELECT 
        d.*,
        u.id as head_user_id,
        u.email as head_email,
        u.first_name as head_first_name,
        u.last_name as head_last_name,
        u.role as head_role,
        COUNT(e.id) as employee_count
      FROM departments d
      LEFT JOIN users u ON d.department_head_user_id = u.id
      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'
      WHERE d.id = $1
      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name, u.role
    `);
    /* istanbul ignore next */
    cov_8bamqxdyo().s[21]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_8bamqxdyo().s[22]++, await this.pool.query(query, [id]));
      /* istanbul ignore next */
      cov_8bamqxdyo().s[23]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_8bamqxdyo().b[5][0]++;
        cov_8bamqxdyo().s[24]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_8bamqxdyo().b[5][1]++;
      }
      const row =
      /* istanbul ignore next */
      (cov_8bamqxdyo().s[25]++, result.rows[0]);
      /* istanbul ignore next */
      cov_8bamqxdyo().s[26]++;
      return {
        id: row.id,
        name: row.name,
        description: row.description,
        department_head_user_id: row.department_head_user_id,
        is_active: row.is_active,
        created_at: row.created_at,
        updated_at: row.updated_at,
        department_head: row.head_user_id ?
        /* istanbul ignore next */
        (cov_8bamqxdyo().b[6][0]++, {
          id: row.head_user_id,
          email: row.head_email,
          first_name: row.head_first_name,
          last_name: row.head_last_name,
          role: row.head_role
        }) :
        /* istanbul ignore next */
        (cov_8bamqxdyo().b[6][1]++, null),
        employee_count: parseInt(row.employee_count)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_8bamqxdyo().s[27]++;
      throw error;
    }
  }
  /**
   * Update department
   */
  async updateDepartment(id, data) {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[5]++;
    const fields =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[28]++, []);
    const values =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[29]++, []);
    let paramCount =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[30]++, 1);
    /* istanbul ignore next */
    cov_8bamqxdyo().s[31]++;
    if (data.name !== undefined) {
      /* istanbul ignore next */
      cov_8bamqxdyo().b[7][0]++;
      cov_8bamqxdyo().s[32]++;
      fields.push(`name = $${paramCount++}`);
      /* istanbul ignore next */
      cov_8bamqxdyo().s[33]++;
      values.push(data.name);
    } else
    /* istanbul ignore next */
    {
      cov_8bamqxdyo().b[7][1]++;
    }
    cov_8bamqxdyo().s[34]++;
    if (data.description !== undefined) {
      /* istanbul ignore next */
      cov_8bamqxdyo().b[8][0]++;
      cov_8bamqxdyo().s[35]++;
      fields.push(`description = $${paramCount++}`);
      /* istanbul ignore next */
      cov_8bamqxdyo().s[36]++;
      values.push(data.description);
    } else
    /* istanbul ignore next */
    {
      cov_8bamqxdyo().b[8][1]++;
    }
    cov_8bamqxdyo().s[37]++;
    if (data.department_head_user_id !== undefined) {
      /* istanbul ignore next */
      cov_8bamqxdyo().b[9][0]++;
      cov_8bamqxdyo().s[38]++;
      fields.push(`department_head_user_id = $${paramCount++}`);
      /* istanbul ignore next */
      cov_8bamqxdyo().s[39]++;
      values.push(data.department_head_user_id);
    } else
    /* istanbul ignore next */
    {
      cov_8bamqxdyo().b[9][1]++;
    }
    cov_8bamqxdyo().s[40]++;
    if (data.is_active !== undefined) {
      /* istanbul ignore next */
      cov_8bamqxdyo().b[10][0]++;
      cov_8bamqxdyo().s[41]++;
      fields.push(`is_active = $${paramCount++}`);
      /* istanbul ignore next */
      cov_8bamqxdyo().s[42]++;
      values.push(data.is_active);
    } else
    /* istanbul ignore next */
    {
      cov_8bamqxdyo().b[10][1]++;
    }
    cov_8bamqxdyo().s[43]++;
    if (fields.length === 0) {
      /* istanbul ignore next */
      cov_8bamqxdyo().b[11][0]++;
      cov_8bamqxdyo().s[44]++;
      return this.findById(id);
    } else
    /* istanbul ignore next */
    {
      cov_8bamqxdyo().b[11][1]++;
    }
    cov_8bamqxdyo().s[45]++;
    fields.push(`updated_at = $${paramCount++}`);
    /* istanbul ignore next */
    cov_8bamqxdyo().s[46]++;
    values.push(new Date());
    /* istanbul ignore next */
    cov_8bamqxdyo().s[47]++;
    values.push(id);
    const query =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[48]++, `
      UPDATE departments 
      SET ${fields.join(', ')}
      WHERE id = $${paramCount}
      RETURNING *
    `);
    /* istanbul ignore next */
    cov_8bamqxdyo().s[49]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_8bamqxdyo().s[50]++, await this.pool.query(query, values));
      /* istanbul ignore next */
      cov_8bamqxdyo().s[51]++;
      return /* istanbul ignore next */(cov_8bamqxdyo().b[12][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_8bamqxdyo().b[12][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_8bamqxdyo().s[52]++;
      throw error;
    }
  }
  /**
   * Delete department
   */
  async deleteDepartment(id) {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[6]++;
    // Check if department has employees
    const hasEmployees =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[53]++, await this.hasEmployees(id));
    /* istanbul ignore next */
    cov_8bamqxdyo().s[54]++;
    if (hasEmployees) {
      /* istanbul ignore next */
      cov_8bamqxdyo().b[13][0]++;
      cov_8bamqxdyo().s[55]++;
      throw new Error('Cannot delete department with active employees');
    } else
    /* istanbul ignore next */
    {
      cov_8bamqxdyo().b[13][1]++;
    }
    const query =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[56]++, 'DELETE FROM departments WHERE id = $1');
    /* istanbul ignore next */
    cov_8bamqxdyo().s[57]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_8bamqxdyo().s[58]++, await this.pool.query(query, [id]));
      /* istanbul ignore next */
      cov_8bamqxdyo().s[59]++;
      return result.rowCount ?
      /* istanbul ignore next */
      (cov_8bamqxdyo().b[14][0]++, result.rowCount > 0) :
      /* istanbul ignore next */
      (cov_8bamqxdyo().b[14][1]++, false);
    } catch (error) {
      /* istanbul ignore next */
      cov_8bamqxdyo().s[60]++;
      throw error;
    }
  }
  /**
   * List all departments
   */
  async listAllDepartments() {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[7]++;
    const query =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[61]++, `
      SELECT 
        d.*,
        u.id as head_user_id,
        u.email as head_email,
        u.first_name as head_first_name,
        u.last_name as head_last_name,
        u.role as head_role,
        COUNT(e.id) as employee_count
      FROM departments d
      LEFT JOIN users u ON d.department_head_user_id = u.id
      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'
      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name, u.role
      ORDER BY d.name
    `);
    /* istanbul ignore next */
    cov_8bamqxdyo().s[62]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_8bamqxdyo().s[63]++, await this.pool.query(query));
      /* istanbul ignore next */
      cov_8bamqxdyo().s[64]++;
      return result.rows.map(row => {
        /* istanbul ignore next */
        cov_8bamqxdyo().f[8]++;
        cov_8bamqxdyo().s[65]++;
        return {
          id: row.id,
          name: row.name,
          description: row.description,
          department_head_user_id: row.department_head_user_id,
          is_active: row.is_active,
          created_at: row.created_at,
          updated_at: row.updated_at,
          department_head: row.head_user_id ?
          /* istanbul ignore next */
          (cov_8bamqxdyo().b[15][0]++, {
            id: row.head_user_id,
            email: row.head_email,
            first_name: row.head_first_name,
            last_name: row.head_last_name,
            role: row.head_role
          }) :
          /* istanbul ignore next */
          (cov_8bamqxdyo().b[15][1]++, undefined),
          employee_count: parseInt(row.employee_count)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_8bamqxdyo().s[66]++;
      throw error;
    }
  }
  /**
   * List active departments only
   */
  async listActiveDepartments() {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[9]++;
    const query =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[67]++, `
      SELECT 
        d.*,
        u.id as head_user_id,
        u.email as head_email,
        u.first_name as head_first_name,
        u.last_name as head_last_name,
        u.role as head_role,
        COUNT(e.id) as employee_count
      FROM departments d
      LEFT JOIN users u ON d.department_head_user_id = u.id
      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'
      WHERE d.is_active = true
      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name, u.role
      ORDER BY d.name
    `);
    /* istanbul ignore next */
    cov_8bamqxdyo().s[68]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_8bamqxdyo().s[69]++, await this.pool.query(query));
      /* istanbul ignore next */
      cov_8bamqxdyo().s[70]++;
      return result.rows.map(row => {
        /* istanbul ignore next */
        cov_8bamqxdyo().f[10]++;
        cov_8bamqxdyo().s[71]++;
        return {
          id: row.id,
          name: row.name,
          description: row.description,
          department_head_user_id: row.department_head_user_id,
          is_active: row.is_active,
          created_at: row.created_at,
          updated_at: row.updated_at,
          department_head: row.head_user_id ?
          /* istanbul ignore next */
          (cov_8bamqxdyo().b[16][0]++, {
            id: row.head_user_id,
            email: row.head_email,
            first_name: row.head_first_name,
            last_name: row.head_last_name,
            role: row.head_role
          }) :
          /* istanbul ignore next */
          (cov_8bamqxdyo().b[16][1]++, undefined),
          employee_count: parseInt(row.employee_count)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_8bamqxdyo().s[72]++;
      throw error;
    }
  }
  /**
   * Get department by department head user ID
   */
  async findByDepartmentHead(userId) {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[11]++;
    const query =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[73]++, 'SELECT * FROM departments WHERE department_head_user_id = $1');
    /* istanbul ignore next */
    cov_8bamqxdyo().s[74]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_8bamqxdyo().s[75]++, await this.pool.query(query, [userId]));
      /* istanbul ignore next */
      cov_8bamqxdyo().s[76]++;
      return /* istanbul ignore next */(cov_8bamqxdyo().b[17][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_8bamqxdyo().b[17][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_8bamqxdyo().s[77]++;
      throw error;
    }
  }
  /**
   * Check if department has employees
   */
  async hasEmployees(departmentId) {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[12]++;
    const query =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[78]++, 'SELECT 1 FROM employees WHERE department_id = $1 AND status = $2 LIMIT 1');
    /* istanbul ignore next */
    cov_8bamqxdyo().s[79]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_8bamqxdyo().s[80]++, await this.pool.query(query, [departmentId, 'active']));
      /* istanbul ignore next */
      cov_8bamqxdyo().s[81]++;
      return result.rows.length > 0;
    } catch (error) {
      /* istanbul ignore next */
      cov_8bamqxdyo().s[82]++;
      throw error;
    }
  }
  /**
   * Get total department count
   */
  async getTotalDepartmentCount() {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[13]++;
    const query =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[83]++, 'SELECT COUNT(*) FROM departments WHERE is_active = $1');
    /* istanbul ignore next */
    cov_8bamqxdyo().s[84]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_8bamqxdyo().s[85]++, await this.pool.query(query, [true]));
      /* istanbul ignore next */
      cov_8bamqxdyo().s[86]++;
      return parseInt(result.rows[0].count);
    } catch (error) {
      /* istanbul ignore next */
      cov_8bamqxdyo().s[87]++;
      throw error;
    }
  }
  /**
   * Check if department name exists
   */
  async nameExists(name, excludeId) {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[14]++;
    const query =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[88]++, excludeId ?
    /* istanbul ignore next */
    (cov_8bamqxdyo().b[18][0]++, 'SELECT 1 FROM departments WHERE name = $1 AND id != $2') :
    /* istanbul ignore next */
    (cov_8bamqxdyo().b[18][1]++, 'SELECT 1 FROM departments WHERE name = $1'));
    /* istanbul ignore next */
    cov_8bamqxdyo().s[89]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_8bamqxdyo().s[90]++, excludeId ?
      /* istanbul ignore next */
      (cov_8bamqxdyo().b[19][0]++, await this.pool.query(query, [name, excludeId])) :
      /* istanbul ignore next */
      (cov_8bamqxdyo().b[19][1]++, await this.pool.query(query, [name])));
      /* istanbul ignore next */
      cov_8bamqxdyo().s[91]++;
      return result.rows.length > 0;
    } catch (error) {
      /* istanbul ignore next */
      cov_8bamqxdyo().s[92]++;
      throw error;
    }
  }
  /**
   * Assign department head
   */
  async assignDepartmentHead(departmentId, userId) {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[15]++;
    // First verify the user has department_head role
    const userQuery =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[93]++, 'SELECT role FROM users WHERE id = $1');
    const userResult =
    /* istanbul ignore next */
    (cov_8bamqxdyo().s[94]++, await this.pool.query(userQuery, [userId]));
    /* istanbul ignore next */
    cov_8bamqxdyo().s[95]++;
    if (userResult.rows.length === 0) {
      /* istanbul ignore next */
      cov_8bamqxdyo().b[20][0]++;
      cov_8bamqxdyo().s[96]++;
      throw new Error('User not found');
    } else
    /* istanbul ignore next */
    {
      cov_8bamqxdyo().b[20][1]++;
    }
    cov_8bamqxdyo().s[97]++;
    if (userResult.rows[0].role !== 'department_head') {
      /* istanbul ignore next */
      cov_8bamqxdyo().b[21][0]++;
      cov_8bamqxdyo().s[98]++;
      throw new Error('User must have department_head role');
    } else
    /* istanbul ignore next */
    {
      cov_8bamqxdyo().b[21][1]++;
    }
    // Update the department
    cov_8bamqxdyo().s[99]++;
    return this.updateDepartment(departmentId, {
      department_head_user_id: userId
    });
  }
  /**
   * Remove department head
   */
  async removeDepartmentHead(departmentId) {
    /* istanbul ignore next */
    cov_8bamqxdyo().f[16]++;
    cov_8bamqxdyo().s[100]++;
    return this.updateDepartment(departmentId, {
      department_head_user_id: null
    });
  }
}
/* istanbul ignore next */
cov_8bamqxdyo().s[101]++;
exports.DepartmentModel = DepartmentModel;
// Export singleton instance
/* istanbul ignore next */
cov_8bamqxdyo().s[102]++;
exports.departmentModel = new DepartmentModel();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,