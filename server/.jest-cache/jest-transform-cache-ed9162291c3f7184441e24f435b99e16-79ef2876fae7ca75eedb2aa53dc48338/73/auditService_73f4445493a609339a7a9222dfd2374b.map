{"version":3,"names":["AuditLog_1","cov_1n7z2ckb73","s","require","AuditService","constructor","f","auditLogModel","AuditLogModel","logAction","data","createAuditLog","getAuditLogs","params","b","result","listAuditLogs","logsWithUsers","Promise","all","logs","map","log","changedByUser","changedByUserId","UserModel","resolve","then","__importStar","userModel","user","findById","id","email","firstName","first_name","lastName","last_name","role","error","getAuditLogById","getAuditLogsByRecord","tableName","recordId","getAuditLogsByUser","userId","limit","getAuditStats","basicStats","topUsersQuery","getPool","pool","topUsersResult","query","topUsers","rows","row","user_id","userName","count","parseInt","cleanupOldLogs","daysToKeep","deleteOldAuditLogs","logUserAction","action","oldData","newData","logSystemAction","exports"],"sources":["/home/kim/tito/server/src/services/audit/auditService.ts"],"sourcesContent":["import { AuditLogModel, CreateAuditLogData, AuditLog, AuditLogListParams } from '../../models/audit/AuditLog';\n\nexport interface AuditLogWithUser extends AuditLog {\n  changedByUser?: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n  } | null;\n}\n\nexport interface AuditStats {\n  totalLogs: number;\n  logsByAction: Array<{ action: string; count: number }>;\n  logsByTable: Array<{ tableName: string; count: number }>;\n  recentActivity: number;\n  topUsers: Array<{ userId: string; userName: string; count: number }>;\n}\n\nexport class AuditService {\n  private auditLogModel: AuditLogModel;\n\n  constructor() {\n    this.auditLogModel = new AuditLogModel();\n  }\n\n  async logAction(data: CreateAuditLogData): Promise<AuditLog> {\n    return await this.auditLogModel.createAuditLog(data);\n  }\n\n  async getAuditLogs(params: AuditLogListParams = {}): Promise<{\n    logs: AuditLogWithUser[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const result = await this.auditLogModel.listAuditLogs(params);\n    \n    // Enhance logs with user information\n    const logsWithUsers = await Promise.all(\n      result.logs.map(async (log) => {\n        let changedByUser = null;\n        if (log.changedByUserId) {\n          try {\n            // Import here to avoid circular dependency\n            const { UserModel } = await import('../../models/auth/User');\n            const userModel = new UserModel();\n            const user = await userModel.findById(log.changedByUserId);\n            if (user) {\n              changedByUser = {\n                id: user.id,\n                email: user.email,\n                firstName: user.first_name,\n                lastName: user.last_name,\n                role: user.role\n              };\n            }\n          } catch (error) {\n            // User might not exist, continue without user info\n          }\n        }\n        \n        return {\n          ...log,\n          changedByUser\n        };\n      })\n    );\n\n    return {\n      ...result,\n      logs: logsWithUsers\n    };\n  }\n\n  async getAuditLogById(id: string): Promise<AuditLogWithUser | null> {\n    const log = await this.auditLogModel.findById(id);\n    if (!log) {\n      return null;\n    }\n\n    let changedByUser = null;\n    if (log.changedByUserId) {\n      try {\n        const { UserModel } = await import('../../models/auth/User');\n        const userModel = new UserModel();\n        const user = await userModel.findById(log.changedByUserId);\n        if (user) {\n          changedByUser = {\n            id: user.id,\n            email: user.email,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            role: user.role\n          };\n        }\n      } catch (error) {\n        // User might not exist, continue without user info\n      }\n    }\n\n    return {\n      ...log,\n      changedByUser\n    };\n  }\n\n  async getAuditLogsByRecord(tableName: string, recordId: string): Promise<AuditLogWithUser[]> {\n    const logs = await this.auditLogModel.getAuditLogsByRecord(tableName, recordId);\n    \n    const logsWithUsers = await Promise.all(\n      logs.map(async (log) => {\n        let changedByUser = null;\n        if (log.changedByUserId) {\n          try {\n            const { UserModel } = await import('../../models/auth/User');\n            const userModel = new UserModel();\n            const user = await userModel.findById(log.changedByUserId);\n            if (user) {\n              changedByUser = {\n                id: user.id,\n                email: user.email,\n                firstName: user.first_name,\n                lastName: user.last_name,\n                role: user.role\n              };\n            }\n          } catch (error) {\n            // User might not exist, continue without user info\n          }\n        }\n        \n        return {\n          ...log,\n          changedByUser\n        };\n      })\n    );\n\n    return logsWithUsers;\n  }\n\n  async getAuditLogsByUser(userId: string, limit: number = 50): Promise<AuditLogWithUser[]> {\n    const logs = await this.auditLogModel.getAuditLogsByUser(userId, limit);\n    \n    const logsWithUsers = await Promise.all(\n      logs.map(async (log) => {\n        let changedByUser = null;\n        if (log.changedByUserId) {\n          try {\n            const { UserModel } = await import('../../models/auth/User');\n            const userModel = new UserModel();\n            const user = await userModel.findById(log.changedByUserId);\n            if (user) {\n              changedByUser = {\n                id: user.id,\n                email: user.email,\n                firstName: user.first_name,\n                lastName: user.last_name,\n                role: user.role\n              };\n            }\n          } catch (error) {\n            // User might not exist, continue without user info\n          }\n        }\n        \n        return {\n          ...log,\n          changedByUser\n        };\n      })\n    );\n\n    return logsWithUsers;\n  }\n\n  async getAuditStats(): Promise<AuditStats> {\n    const basicStats = await this.auditLogModel.getAuditStats();\n    \n    // Get top users by activity\n    const topUsersQuery = `\n      SELECT \n        changed_by_user_id as user_id,\n        u.email,\n        u.first_name,\n        u.last_name,\n        COUNT(*) as count\n      FROM audit_log al\n      LEFT JOIN users u ON al.changed_by_user_id = u.id\n      WHERE changed_by_user_id IS NOT NULL\n      GROUP BY changed_by_user_id, u.email, u.first_name, u.last_name\n      ORDER BY count DESC\n      LIMIT 10\n    `;\n    \n    const { getPool } = await import('../../config/database');\n    const pool = getPool();\n    const topUsersResult = await pool.query(topUsersQuery);\n    \n    const topUsers = topUsersResult.rows.map(row => ({\n      userId: row.user_id,\n      userName: `${row.first_name} ${row.last_name} (${row.email})`,\n      count: parseInt(row.count)\n    }));\n\n    return {\n      ...basicStats,\n      topUsers\n    };\n  }\n\n  async cleanupOldLogs(daysToKeep: number = 90): Promise<number> {\n    return await this.auditLogModel.deleteOldAuditLogs(daysToKeep);\n  }\n\n  // Helper method to log user actions\n  async logUserAction(\n    userId: string,\n    tableName: string,\n    recordId: string,\n    action: 'INSERT' | 'UPDATE' | 'DELETE',\n    oldData?: any,\n    newData?: any\n  ): Promise<void> {\n    await this.logAction({\n      tableName,\n      recordId,\n      action,\n      oldData,\n      newData,\n      changedByUserId: userId\n    });\n  }\n\n  // Helper method to log system actions\n  async logSystemAction(\n    tableName: string,\n    recordId: string,\n    action: 'INSERT' | 'UPDATE' | 'DELETE',\n    oldData?: any,\n    newData?: any\n  ): Promise<void> {\n    await this.logAction({\n      tableName,\n      recordId,\n      action,\n      oldData,\n      newData\n      // No changedByUserId for system actions\n    });\n  }\n}"],"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","ignoreList":[]}