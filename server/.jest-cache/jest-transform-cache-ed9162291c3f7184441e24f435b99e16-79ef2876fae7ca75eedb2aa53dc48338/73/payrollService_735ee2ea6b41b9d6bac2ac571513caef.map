{"version":3,"names":["PayrollPeriod_1","cov_u5rw4oz9l","s","require","PayrollRecord_1","PayrollDeduction_1","DeductionType_1","EmployeeDeductionBalance_1","BenefitType_1","EmployeeBenefit_1","Employee_1","database_1","leavePolicies_1","AttendanceSession_1","logger_1","__importDefault","attendanceHoursCalculator_1","PayrollService","createPayrollPeriod","data","f","start_date","end_date","b","Error","overlappingPeriods","payrollPeriodModel","findByDateRange","length","period","create","default","info","periodId","id","periodName","period_name","error","message","getPayrollPeriods","params","findAll","getPayrollPeriod","findById","updatePayrollPeriod","update","deletePayrollPeriod","records","payrollRecordModel","findByPayrollPeriod","delete","calculateEmployeePayroll","employeeId","payrollPeriodId","employee","employeeModel","findByIdWithDetails","startDate","Date","endDate","expectedWorkingDays","calculateWorkingDays","expectedHours","attendanceData","calculateAttendanceHours","totalWorkedHours","totalRegularHours","totalOvertimeHours","totalLateHours","paidLeaveHours","getPaidLeaveHours","baseSalary","base_salary","Number","hourlyRate","lateDeductions","employeeDeductionBalances","employeeDeductionBalanceModel","findActiveByEmployee","employeeDeductions","totalEmployeeDeductions","balance","monthlyAmount","monthly_deduction_amount","remainingBalance","remaining_balance","actualDeduction","Math","min","push","type","deduction_type_name","amount","employeeBenefits","employeeBenefitModel","benefits","totalBenefits","benefit","benefitAmount","benefit_type","name","totalPaidHours","grossPay","netPay","payrollData","employee_id","user","first_name","last_name","department","totalDeductions","generatePayrollRecords","departmentId","employees","status","department_id","employeeIds","map","emp","payrollCalculations","Promise","all","existingRecords","getPool","query","existingRecordMap","Map","rows","record","i","existingRecordId","get","updatedRecord","total_worked_hours","hourly_rate","total_regular_hours","total_overtime_hours","total_late_hours","late_deductions","paid_leave_hours","gross_pay","net_pay","total_deductions","total_benefits","newRecord","payroll_period_id","processPayrollDeductionsBulk","recordCount","deductionOperations","recordId","deductions","recordIds","op","deductionInserts","operation","deduction","deductionType","deductionTypeModel","findByName","payroll_record_id","deduction_type_id","values","_","index","join","flatMap","d","findByEmployee","find","is_active","getPayrollRecords","findAllWithEmployee","updatePayrollRecordStatus","completePayrollPeriod","updatedPeriod","bulkUpdatePayrollRecordsToPaid","options","resolve","then","__importStar","pool","whereClause","paramIndex","updateQuery","result","updatedCount","rowCount","checkAndCompletePayrollPeriod","checkQuery","total_records","paid_records","parseInt","bulkUpdatePayrollRecordsStatus","updatedRecords","reprocessPayrollRecords","payrollDeductionModel","deleteByPayrollRecord","deletedCount","PayrollApprovalService","payrollApprovalService","resetApprovalStatusForPeriod","newRecords","newRecordCount","getPayrollRecord","updatePayrollRecord","getPayrollSummary","recordsWithDeductions","totalEmployees","totalGrossPay","reduce","sum","processedRecords","pendingRecords","total_deductions_calculated","totalNetPay","summary","approvePayrollRecord","approverId","markPayrollAsPaid","exportPayrollRecords","format","generateCSV","generatePDF","headers","employeeName","hoursWorked","createdAt","toLocaleDateString","csvContent","row","field","content","Buffer","from","getPayrollStats","getTotalEmployeeCount","totalPayrollResult","getTotalNetPay","totalPayroll","processedPeriods","countByStatus","pendingPeriods","createDeductionType","getDeductionTypes","updateDeductionType","deleteDeductionType","createBenefitType","benefitTypeModel","getBenefitTypes","updateBenefitType","deleteBenefitType","getEmployeeDeductionBalances","createEmployeeDeductionBalance","updateEmployeeDeductionBalance","deleteEmployeeDeductionBalance","getEmployeeBenefits","createEmployeeBenefit","updateEmployeeBenefit","deleteEmployeeBenefit","uploadEmployeeBenefits","csvData","errors","successData","employee_name","benefit_type_name","benefit_type_id","findByEmployeeId","benefitType","existingRecord","findByEmployeeAndBenefitTypeAndDate","benefitData","parseFloat","bulkCreate","success","uploadEmployeeDeductionBalances","findByEmployeeAndDeductionTypeAndDate","balanceData","original_amount","workingDays","currentDate","getDay","setDate","getDate","attendanceQuery","attendanceRecords","totalWorkingDays","sessions","attendanceSessionModel","getSessionsByAttendanceRecord","hoursResult","defaultHoursCalculator","calculateFromSessions","totalHours","date","morningHours","afternoonHours","regularHours","overtimeHours","max","effectiveMorningStart","effectiveAfternoonStart","round","generatePayrollRecordsForAllDepartments","departmentsQuery","departmentsResult","departmentResults","getPayrollRecordsByDepartmentAndPeriod","leaveQuery","leave","leaveType","leave_type","leaveDays","total_days","isLeaveTypePaid","days","paymentPercentage","getLeavePaymentPercentage","maxPaidDaysPerYear","getMaxPaidDaysPerYear","paidDays","requestedDays","paidHours","totalDays","leaveCount","exportPeriodPaystubsPDF","PDFDocument","doc","margin","buffers","on","bind","limit","fontSize","text","align","formatDate","moveDown","addPaystubPage","end","reject","pdfBuffer","concat","exportDepartmentPaystubsPDF","userId","DepartmentHeadService","departmentHeadService","getDepartmentInfo","formatCurrency","undefined","num","isNaN","isFinite","toFixed","addPage","underline","lateHours","leavePay","page","height","toUpperCase","exports","payrollService"],"sources":["/home/kim/tito/server/src/services/payroll/payrollService.ts"],"sourcesContent":["import { payrollPeriodModel, PayrollPeriod, CreatePayrollPeriodData } from '../../models/payroll/PayrollPeriod';\nimport { payrollRecordModel, PayrollRecord, PayrollRecordWithEmployee } from '../../models/payroll/PayrollRecord';\nimport { payrollDeductionModel } from '../../models/payroll/PayrollDeduction';\nimport { deductionTypeModel } from '../../models/payroll/DeductionType';\nimport { employeeDeductionBalanceModel } from '../../models/payroll/EmployeeDeductionBalance';\nimport { benefitTypeModel } from '../../models/payroll/BenefitType';\nimport { employeeBenefitModel } from '../../models/payroll/EmployeeBenefit';\nimport { employeeModel } from '../../models/hr/Employee';\nimport { getPool } from '../../config/database';\nimport { isLeaveTypePaid, getLeavePaymentPercentage, getMaxPaidDaysPerYear } from '../../config/leavePolicies';\n// import { attendanceRecordModel } from '../../models/attendance/AttendanceRecord';\nimport { attendanceSessionModel } from '../../models/attendance/AttendanceSession';\n// import { overtimeRequestModel } from '../../models/attendance/OvertimeRequest';\n// import { systemSettingsModel } from '../../models/hr/SystemSettings'; // Temporarily disabled\nimport logger from '../../utils/logger';\nimport { defaultHoursCalculator } from '../../utils/attendanceHoursCalculator';\n\nexport interface PayrollCalculationData {\n  employeeId: string;\n  payrollPeriodId: string;\n  baseSalary: number;\n  totalWorkedHours: number;\n  totalRegularHours: number;\n  totalOvertimeHours: number;\n  totalLateHours: number;\n  lateDeductions: number;\n  employeeDeductions: Array<{\n    type: string;\n    amount: number;\n    remainingBalance: number;\n  }>;\n  employeeBenefits: Array<{\n    type: string;\n    amount: number;\n  }>;\n}\n\nexport interface PayrollSummary {\n  period: PayrollPeriod;\n  totalEmployees: number;\n  totalGrossPay: number;\n  totalDeductions: number;\n  totalNetPay: number;\n  processedRecords: number;\n  pendingRecords: number;\n}\n\nexport interface EmployeePayrollData {\n  employee: {\n    id: string;\n    employee_id: string;\n    name: string;\n    department: string;\n  };\n  baseSalary: number;\n  totalWorkedHours: number;\n  totalRegularHours: number;\n  totalOvertimeHours: number;\n  totalLateHours: number;\n  lateDeductions: number;\n  hourlyRate: number;\n  grossPay: number;\n  employeeDeductions: Array<{\n    type: string;\n    amount: number;\n    remainingBalance: number;\n  }>;\n  employeeBenefits: Array<{\n    type: string;\n    amount: number;\n  }>;\n  totalDeductions: number;\n  totalBenefits: number;\n  netPay: number;\n  paidLeaveHours: number; // Hours from approved leave days\n}\n\nclass PayrollService {\n  async createPayrollPeriod(data: CreatePayrollPeriodData): Promise<PayrollPeriod> {\n    try {\n      // Validate date range\n      if (data.start_date >= data.end_date) {\n        throw new Error('Start date must be before end date');\n      }\n\n      // Check for overlapping periods\n      const overlappingPeriods = await payrollPeriodModel.findByDateRange(data.start_date, data.end_date);\n      if (overlappingPeriods.length > 0) {\n        throw new Error('Payroll period overlaps with existing period');\n      }\n\n      const period = await payrollPeriodModel.create(data);\n      logger.info('Payroll period created', { periodId: period.id, periodName: period.period_name });\n      return period;\n    } catch (error) {\n      logger.error('Error creating payroll period', { error: (error as Error).message, data });\n      throw error;\n    }\n  }\n\n  async getPayrollPeriods(params: any = {}): Promise<{ periods: PayrollPeriod[]; total: number }> {\n    try {\n      return await payrollPeriodModel.findAll(params);\n    } catch (error) {\n      logger.error('Error getting payroll periods', { error: (error as Error).message, params });\n      throw error;\n    }\n  }\n\n  async getPayrollPeriod(id: string): Promise<PayrollPeriod | null> {\n    try {\n      return await payrollPeriodModel.findById(id);\n    } catch (error) {\n      logger.error('Error getting payroll period', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  async updatePayrollPeriod(id: string, data: any): Promise<PayrollPeriod | null> {\n    try {\n      return await payrollPeriodModel.update(id, data);\n    } catch (error) {\n      logger.error('Error updating payroll period', { error: (error as Error).message, id, data });\n      throw error;\n    }\n  }\n\n  async deletePayrollPeriod(id: string): Promise<boolean> {\n    try {\n      // Check if period has payroll records\n      const records = await payrollRecordModel.findByPayrollPeriod(id);\n      if (records.length > 0) {\n        throw new Error('Cannot delete payroll period with existing records');\n      }\n\n      return await payrollPeriodModel.delete(id);\n    } catch (error) {\n      logger.error('Error deleting payroll period', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  async calculateEmployeePayroll(employeeId: string, payrollPeriodId: string): Promise<EmployeePayrollData> {\n    try {\n      // Get employee data\n      const employee = await employeeModel.findByIdWithDetails(employeeId);\n      if (!employee) {\n        throw new Error('Employee not found');\n      }\n\n      // Get payroll period\n      const period = await payrollPeriodModel.findById(payrollPeriodId);\n      if (!period) {\n        throw new Error('Payroll period not found');\n      }\n\n      // Calculate expected working days for the month\n      const startDate = new Date(period.start_date);\n      const endDate = new Date(period.end_date);\n      const expectedWorkingDays = this.calculateWorkingDays(startDate, endDate);\n      const expectedHours = expectedWorkingDays * 8; // 8 hours per working day\n\n      // Get attendance data using the mathematical formulation\n      // This uses grace periods, session caps, and proper morning/afternoon calculations\n      const attendanceData = await this.calculateAttendanceHours(\n        employeeId, \n        period.start_date, \n        period.end_date\n      );\n      \n      const totalWorkedHours = attendanceData.totalWorkedHours;\n      const totalRegularHours = attendanceData.totalRegularHours;\n      const totalOvertimeHours = attendanceData.totalOvertimeHours;\n      const totalLateHours = attendanceData.totalLateHours;\n\n      // Get approved leave days for the payroll period\n      const paidLeaveHours = await this.getPaidLeaveHours(employeeId, startDate, endDate);\n\n      // Debug logging for payroll calculation\n      logger.info('Payroll calculation debug', {\n        employeeId,\n        payrollPeriodId,\n        attendanceData: attendanceData,\n        totalWorkedHours,\n        totalRegularHours,\n        totalOvertimeHours,\n        totalLateHours,\n        expectedHours,\n        baseSalary: employee.base_salary\n      });\n\n      // Parse base salary\n      const baseSalary = Number(employee.base_salary) || 0;\n\n      // Calculate hourly rate\n      const hourlyRate = baseSalary / expectedHours;\n\n      // Calculate late deductions\n      const lateDeductions = totalLateHours * hourlyRate;\n\n      // Get employee-specific deduction balances\n      const employeeDeductionBalances = await employeeDeductionBalanceModel.findActiveByEmployee(employeeId);\n      \n      // Apply employee deductions (until balance reaches zero)\n      const employeeDeductions: Array<{ type: string; amount: number; remainingBalance: number }> = [];\n      let totalEmployeeDeductions = 0;\n\n      for (const balance of employeeDeductionBalances) {\n        // Calculate actual deduction (minimum of monthly amount or remaining balance)\n        const monthlyAmount = Number(balance.monthly_deduction_amount) || 0;\n        const remainingBalance = Number(balance.remaining_balance) || 0;\n        const actualDeduction = Math.min(monthlyAmount, remainingBalance);\n        \n        if (actualDeduction > 0) {\n          employeeDeductions.push({\n            type: balance.deduction_type_name || 'Unknown',\n            amount: actualDeduction,\n            remainingBalance: remainingBalance - actualDeduction\n          });\n          totalEmployeeDeductions += actualDeduction;\n        }\n      }\n\n      // Get employee benefits\n      const employeeBenefits = await employeeBenefitModel.findActiveByEmployee(employeeId);\n      \n      const benefits: Array<{ type: string; amount: number }> = [];\n      let totalBenefits = 0;\n\n      for (const benefit of employeeBenefits) {\n        const benefitAmount = Number(benefit.amount) || 0;\n        benefits.push({\n          type: benefit.benefit_type?.name || 'Unknown',\n          amount: benefitAmount\n        });\n        totalBenefits += benefitAmount;\n      }\n\n      // Calculate gross pay based on worked hours + paid leave hours: (total paid hours / total working hours in month) * base salary\n      // Include approved leave days as paid time\n      const totalPaidHours = totalWorkedHours + paidLeaveHours;\n      const grossPay = expectedHours > 0 ? (totalPaidHours / expectedHours) * baseSalary : 0;\n      \n      // Calculate net pay: gross pay + benefits - deductions\n      const netPay = grossPay + totalBenefits - totalEmployeeDeductions - lateDeductions;\n\n      // Debug logging for gross pay calculation\n      logger.info('Gross pay calculation debug', {\n        employeeId,\n        totalWorkedHours,\n        paidLeaveHours,\n        totalPaidHours,\n        expectedHours,\n        baseSalary,\n        grossPay,\n        totalBenefits,\n        totalEmployeeDeductions,\n        lateDeductions,\n        netPay\n      });\n\n      const payrollData: EmployeePayrollData = {\n        employee: {\n          id: employee.id,\n          employee_id: employee.employee_id,\n          name: `${employee.user.first_name} ${employee.user.last_name}`,\n          department: employee.department?.name || 'N/A'\n        },\n        baseSalary: baseSalary, // Full monthly base salary\n        totalWorkedHours,\n        totalRegularHours,\n        totalOvertimeHours,\n        totalLateHours,\n        lateDeductions,\n        hourlyRate,\n        grossPay,\n        employeeDeductions,\n        employeeBenefits: benefits,\n        totalDeductions: totalEmployeeDeductions,\n        totalBenefits,\n        netPay,\n        paidLeaveHours // Add paid leave hours to the response\n      };\n\n      logger.info('Employee payroll calculated', { \n        employeeId, \n        payrollPeriodId, \n        baseSalary: employee.base_salary,\n        totalDeductions: totalEmployeeDeductions,\n        totalBenefits,\n        netPay \n      });\n\n      return payrollData;\n    } catch (error) {\n      logger.error('Error calculating employee payroll', { \n        error: (error as Error).message, \n        employeeId, \n        payrollPeriodId \n      });\n      throw error;\n    }\n  }\n\n  async generatePayrollRecords(payrollPeriodId: string, departmentId?: string): Promise<PayrollRecord[]> {\n    try {\n      // Get active employees - either all or filtered by department\n      const employees = departmentId\n        ? await employeeModel.findAll({ status: 'active', department_id: departmentId })\n        : await employeeModel.findAll({ status: 'active' });\n\n      if (employees.employees.length === 0) {\n        return [];\n      }\n\n      const employeeIds = employees.employees.map(emp => emp.id);\n      const records: PayrollRecord[] = [];\n\n      // Bulk calculate payroll data for all employees\n      const payrollCalculations = await Promise.all(\n        employees.employees.map(employee =>\n          this.calculateEmployeePayroll(employee.id, payrollPeriodId)\n        )\n      );\n\n      // Check existing records in bulk\n      const existingRecords = await getPool().query(`\n        SELECT id, employee_id\n        FROM payroll_records\n        WHERE payroll_period_id = $1 AND employee_id = ANY($2)\n      `, [payrollPeriodId, employeeIds]);\n\n      const existingRecordMap = new Map(\n        existingRecords.rows.map(record => [record.employee_id, record.id])\n      );\n\n      // Process each employee\n      for (let i = 0; i < employees.employees.length; i++) {\n        const employee = employees.employees[i];\n        const payrollData = payrollCalculations[i];\n        const existingRecordId = existingRecordMap.get(employee.id);\n\n        if (existingRecordId) {\n          // Update existing record\n          const updatedRecord = await payrollRecordModel.update(existingRecordId, {\n            base_salary: payrollData.baseSalary,\n            total_worked_hours: payrollData.totalWorkedHours,\n            hourly_rate: payrollData.hourlyRate,\n            total_regular_hours: payrollData.totalRegularHours,\n            total_overtime_hours: payrollData.totalOvertimeHours,\n            total_late_hours: payrollData.totalLateHours,\n            late_deductions: payrollData.lateDeductions,\n            paid_leave_hours: payrollData.paidLeaveHours,\n            gross_pay: payrollData.grossPay,\n            net_pay: payrollData.netPay,\n            total_deductions: payrollData.totalDeductions,\n            total_benefits: payrollData.totalBenefits,\n            status: 'draft'\n          });\n\n          if (updatedRecord) {\n            records.push(updatedRecord);\n          }\n        } else {\n          // Create new record\n          const newRecord = await payrollRecordModel.create({\n            payroll_period_id: payrollPeriodId,\n            employee_id: employee.id,\n            base_salary: payrollData.baseSalary,\n            total_worked_hours: payrollData.totalWorkedHours,\n            hourly_rate: payrollData.hourlyRate,\n            total_regular_hours: payrollData.totalRegularHours,\n            total_overtime_hours: payrollData.totalOvertimeHours,\n            total_late_hours: payrollData.totalLateHours,\n            late_deductions: payrollData.lateDeductions,\n            paid_leave_hours: payrollData.paidLeaveHours,\n            gross_pay: payrollData.grossPay,\n            net_pay: payrollData.netPay,\n            total_deductions: payrollData.totalDeductions,\n            total_benefits: payrollData.totalBenefits,\n            status: 'draft'\n          });\n\n          records.push(newRecord);\n        }\n      }\n\n      // Bulk process deductions and balances\n      await this.processPayrollDeductionsBulk(records, payrollCalculations, employees.employees);\n\n      logger.info('Payroll records generated', {\n        payrollPeriodId,\n        recordCount: records.length\n      });\n\n      return records;\n    } catch (error) {\n      logger.error('Error generating payroll records', {\n        error: (error as Error).message,\n        payrollPeriodId\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Process payroll deductions in bulk to avoid N+1 queries\n   */\n  private async processPayrollDeductionsBulk(\n    records: PayrollRecord[],\n    payrollCalculations: any[],\n    employees: any[]\n  ): Promise<void> {\n    // Collect all deduction operations\n    const deductionOperations: Array<{\n      recordId: string;\n      employeeId: string;\n      deductions: any[];\n    }> = [];\n\n    for (let i = 0; i < records.length; i++) {\n      const record = records[i];\n      const payrollData = payrollCalculations[i];\n      const employee = employees[i];\n\n      if (payrollData.employeeDeductions.length > 0) {\n        deductionOperations.push({\n          recordId: record.id,\n          employeeId: employee.id,\n          deductions: payrollData.employeeDeductions\n        });\n      }\n    }\n\n    if (deductionOperations.length === 0) {\n      return;\n    }\n\n    // Bulk delete existing deductions\n    const recordIds = deductionOperations.map(op => op.recordId);\n    await getPool().query(\n      'DELETE FROM payroll_deductions WHERE payroll_record_id = ANY($1)',\n      [recordIds]\n    );\n\n    // Bulk create new deductions\n    const deductionInserts = [];\n    for (const operation of deductionOperations) {\n      for (const deduction of operation.deductions) {\n        const deductionType = await deductionTypeModel.findByName(deduction.type);\n        if (deductionType) {\n          deductionInserts.push({\n            payroll_record_id: operation.recordId,\n            deduction_type_id: deductionType.id,\n            name: deduction.type,\n            amount: deduction.amount\n          });\n        }\n      }\n    }\n\n    if (deductionInserts.length > 0) {\n      const values = deductionInserts.map((_, index) =>\n        `($${index * 4 + 1}, $${index * 4 + 2}, $${index * 4 + 3}, $${index * 4 + 4})`\n      ).join(', ');\n\n      const params = deductionInserts.flatMap(d => [\n        d.payroll_record_id, d.deduction_type_id, d.name, d.amount\n      ]);\n\n      await getPool().query(`\n        INSERT INTO payroll_deductions (payroll_record_id, deduction_type_id, name, amount)\n        VALUES ${values}\n      `, params);\n    }\n\n    // Bulk update employee deduction balances\n    for (const operation of deductionOperations) {\n      for (const deduction of operation.deductions) {\n        const deductionType = await deductionTypeModel.findByName(deduction.type);\n        if (deductionType) {\n          const employeeDeductionBalances = await employeeDeductionBalanceModel.findByEmployee(operation.employeeId);\n          const balance = employeeDeductionBalances.find(b => b.deduction_type_id === deductionType.id);\n\n          if (balance) {\n            await employeeDeductionBalanceModel.update(balance.id, {\n              remaining_balance: deduction.remainingBalance,\n              is_active: deduction.remainingBalance > 0\n            });\n          }\n        }\n      }\n    }\n  }\n\n  async getPayrollRecords(params: any = {}): Promise<{ records: PayrollRecordWithEmployee[]; total: number }> {\n    try {\n      return await payrollRecordModel.findAllWithEmployee(params);\n    } catch (error) {\n      logger.error('Error getting payroll records', { error: (error as Error).message, params });\n      throw error;\n    }\n  }\n\n  /**\n   * Update payroll record status\n   */\n  async updatePayrollRecordStatus(recordId: string, status: 'draft' | 'processed' | 'paid'): Promise<PayrollRecord> {\n    try {\n      const updatedRecord = await payrollRecordModel.update(recordId, { status });\n      if (!updatedRecord) {\n        throw new Error('Payroll record not found');\n      }\n\n      logger.info('Payroll record status updated', {\n        recordId,\n        status,\n        employeeId: updatedRecord.employee_id\n      });\n\n      return updatedRecord;\n    } catch (error) {\n      logger.error('Error updating payroll record status', { \n        error: (error as Error).message, \n        recordId, \n        status \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Mark payroll period as completed (when all departments have approved)\n   */\n  async completePayrollPeriod(periodId: string): Promise<PayrollPeriod> {\n    try {\n      const updatedPeriod = await payrollPeriodModel.update(periodId, { status: 'completed' });\n      if (!updatedPeriod) {\n        throw new Error('Payroll period not found');\n      }\n\n      logger.info('Payroll period marked as completed', {\n        periodId,\n        periodName: updatedPeriod.period_name\n      });\n\n      return updatedPeriod;\n    } catch (error) {\n      logger.error('Error completing payroll period', { \n        error: (error as Error).message, \n        periodId \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Bulk update payroll records to paid status\n   */\n  async bulkUpdatePayrollRecordsToPaid(options: {\n    periodId?: string;\n    departmentId?: string;\n    recordIds?: string[];\n  }): Promise<{ updatedCount: number }> {\n    try {\n      const { getPool } = await import('../../config/database');\n      const pool = getPool();\n\n      let whereClause = '';\n      const params: any[] = [];\n      let paramIndex = 1;\n\n      if (options.periodId) {\n        whereClause += ` WHERE payroll_period_id = $${paramIndex}`;\n        params.push(options.periodId);\n        paramIndex++;\n      }\n\n      if (options.departmentId) {\n        whereClause += options.periodId ? ' AND' : ' WHERE';\n        whereClause += ` employee_id IN (SELECT id FROM employees WHERE department_id = $${paramIndex})`;\n        params.push(options.departmentId);\n        paramIndex++;\n      }\n\n      if (options.recordIds && options.recordIds.length > 0) {\n        whereClause += options.periodId || options.departmentId ? ' AND' : ' WHERE';\n        whereClause += ` id = ANY($${paramIndex})`;\n        params.push(options.recordIds);\n        paramIndex++;\n      }\n\n      const updateQuery = `\n        UPDATE payroll_records \n        SET status = 'paid', updated_at = CURRENT_TIMESTAMP\n        ${whereClause}\n      `;\n\n      const result = await pool.query(updateQuery, params);\n\n      logger.info('Bulk updated payroll records to paid', {\n        updatedCount: result.rowCount,\n        options\n      });\n\n      // If updating by periodId, check if all records in the period are now paid\n      if (options.periodId) {\n        await this.checkAndCompletePayrollPeriod(options.periodId);\n      }\n\n      return { updatedCount: result.rowCount || 0 };\n    } catch (error) {\n      logger.error('Error bulk updating payroll records to paid', { \n        error: (error as Error).message, \n        options \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Check if all payroll records in a period are paid and auto-complete the period\n   */\n  async checkAndCompletePayrollPeriod(periodId: string): Promise<void> {\n    try {\n      const { getPool } = await import('../../config/database');\n      const pool = getPool();\n\n      // Check if all records in the period are paid\n      const checkQuery = `\n        SELECT \n          COUNT(*) as total_records,\n          COUNT(CASE WHEN status = 'paid' THEN 1 END) as paid_records\n        FROM payroll_records \n        WHERE payroll_period_id = $1\n      `;\n      \n      const result = await pool.query(checkQuery, [periodId]);\n      const { total_records, paid_records } = result.rows[0];\n      \n      // If all records are paid, complete the period\n      if (total_records > 0 && parseInt(total_records) === parseInt(paid_records)) {\n        await this.completePayrollPeriod(periodId);\n        logger.info(`Auto-completed payroll period ${periodId} - all records are paid`);\n      }\n    } catch (error) {\n      logger.error('Error checking and completing payroll period', { \n        error: (error as Error).message, \n        periodId \n      });\n    }\n  }\n\n\n\n\n  /**\n   * Bulk update payroll records status for a period\n   */\n  async bulkUpdatePayrollRecordsStatus(\n    payrollPeriodId: string, \n    status: 'draft' | 'processed' | 'paid',\n    departmentId?: string\n  ): Promise<PayrollRecord[]> {\n    try {\n      // Get all records for the period\n      const { records } = await payrollRecordModel.findAllWithEmployee({\n        payroll_period_id: payrollPeriodId,\n        department_id: departmentId\n      });\n\n      // Update each record\n      const updatedRecords: PayrollRecord[] = [];\n      for (const record of records) {\n        const updatedRecord = await payrollRecordModel.update(record.id, { status });\n        if (updatedRecord) {\n          updatedRecords.push(updatedRecord);\n        }\n      }\n\n      logger.info('Bulk payroll records status updated', {\n        payrollPeriodId,\n        status,\n        departmentId,\n        updatedCount: updatedRecords.length\n      });\n\n      return updatedRecords;\n    } catch (error) {\n      logger.error('Error bulk updating payroll records status', { \n        error: (error as Error).message, \n        payrollPeriodId, \n        status,\n        departmentId\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Reprocess payroll records for a period (clears existing records and regenerates)\n   */\n  async reprocessPayrollRecords(payrollPeriodId: string, departmentId?: string): Promise<PayrollRecord[]> {\n    try {\n      logger.info('Starting payroll reprocessing', {\n        payrollPeriodId,\n        departmentId\n      });\n\n      // First, delete existing payroll records for this period\n      const existingRecords = await payrollRecordModel.findAllWithEmployee({\n        payroll_period_id: payrollPeriodId,\n        department_id: departmentId\n      });\n\n      for (const record of existingRecords.records) {\n        // Delete associated payroll deductions first\n        await payrollDeductionModel.deleteByPayrollRecord(record.id);\n        // Delete the payroll record\n        await payrollRecordModel.delete(record.id);\n      }\n\n      logger.info('Cleared existing payroll records', {\n        payrollPeriodId,\n        departmentId,\n        deletedCount: existingRecords.records.length\n      });\n\n      // Reset approval status for this period (if reprocessing all departments)\n      if (!departmentId) {\n        const { PayrollApprovalService } = await import('./payrollApprovalService');\n        const payrollApprovalService = new PayrollApprovalService();\n        await payrollApprovalService.resetApprovalStatusForPeriod(payrollPeriodId);\n        logger.info('Reset approval status for payroll period', { payrollPeriodId });\n      }\n\n      // Now regenerate the payroll records\n      const newRecords = await this.generatePayrollRecords(payrollPeriodId, departmentId);\n\n      logger.info('Payroll reprocessing completed', {\n        payrollPeriodId,\n        departmentId,\n        newRecordCount: newRecords.length\n      });\n\n      return newRecords;\n    } catch (error) {\n      logger.error('Error reprocessing payroll records', { \n        error: (error as Error).message, \n        payrollPeriodId, \n        departmentId\n      });\n      throw error;\n    }\n  }\n\n  async getPayrollRecord(id: string): Promise<PayrollRecord | null> {\n    try {\n      return await payrollRecordModel.findById(id);\n    } catch (error) {\n      logger.error('Error getting payroll record', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  async updatePayrollRecord(id: string, data: any): Promise<PayrollRecord | null> {\n    try {\n      return await payrollRecordModel.update(id, data);\n    } catch (error) {\n      logger.error('Error updating payroll record', { error: (error as Error).message, id, data });\n      throw error;\n    }\n  }\n\n  async getPayrollSummary(payrollPeriodId: string): Promise<PayrollSummary> {\n    try {\n      const period = await payrollPeriodModel.findById(payrollPeriodId);\n      if (!period) {\n        throw new Error('Payroll period not found');\n      }\n\n      // Optimized query to get records with deductions in a single query\n      const recordsWithDeductions = await getPool().query(`\n        SELECT\n          pr.*,\n          COALESCE(SUM(pd.amount), 0) as total_deductions_calculated\n        FROM payroll_records pr\n        LEFT JOIN payroll_deductions pd ON pr.id = pd.payroll_record_id\n        WHERE pr.payroll_period_id = $1\n        GROUP BY pr.id\n      `, [payrollPeriodId]);\n\n      const records = recordsWithDeductions.rows;\n\n      const totalEmployees = records.length;\n      const totalGrossPay = records.reduce((sum, record) => sum + Number(record.gross_pay), 0);\n\n      let totalDeductions = 0;\n      let processedRecords = 0;\n      let pendingRecords = 0;\n\n      for (const record of records) {\n        totalDeductions += Number(record.total_deductions_calculated);\n\n        if (record.status === 'processed' || record.status === 'paid') {\n          processedRecords++;\n        } else {\n          pendingRecords++;\n        }\n      }\n\n      const totalNetPay = totalGrossPay - totalDeductions;\n\n      const summary: PayrollSummary = {\n        period,\n        totalEmployees,\n        totalGrossPay,\n        totalDeductions,\n        totalNetPay,\n        processedRecords,\n        pendingRecords\n      };\n\n      logger.info('Payroll summary generated', { \n        payrollPeriodId, \n        totalEmployees, \n        totalNetPay \n      });\n\n      return summary;\n    } catch (error) {\n      logger.error('Error getting payroll summary', { \n        error: (error as Error).message, \n        payrollPeriodId \n      });\n      throw error;\n    }\n  }\n\n  async approvePayrollRecord(recordId: string, approverId: string): Promise<PayrollRecord | null> {\n    try {\n      const record = await payrollRecordModel.update(recordId, { status: 'processed' });\n      \n      if (record) {\n        logger.info('Payroll record approved', { recordId, approverId });\n      }\n\n      return record;\n    } catch (error) {\n      logger.error('Error approving payroll record', { \n        error: (error as Error).message, \n        recordId, \n        approverId \n      });\n      throw error;\n    }\n  }\n\n  async markPayrollAsPaid(recordId: string): Promise<PayrollRecord | null> {\n    try {\n      const record = await payrollRecordModel.update(recordId, { status: 'paid' });\n      \n      if (record) {\n        logger.info('Payroll record marked as paid', { recordId });\n      }\n\n      return record;\n    } catch (error) {\n      logger.error('Error marking payroll as paid', { \n        error: (error as Error).message, \n        recordId \n      });\n      throw error;\n    }\n  }\n\n  async exportPayrollRecords(format: 'csv' | 'pdf', params: any = {}): Promise<string | Buffer> {\n    try {\n      const records = await payrollRecordModel.findAllWithEmployee(params);\n      \n      if (format === 'csv') {\n        return this.generateCSV(records.records);\n      } else {\n        return this.generatePDF(records.records);\n      }\n    } catch (error) {\n      logger.error('Error exporting payroll records', { \n        error: (error as Error).message, \n        format,\n        params \n      });\n      throw error;\n    }\n  }\n\n  private generateCSV(records: any[]): string {\n    const headers = [\n      'Employee ID',\n      'Employee Name',\n      'Period',\n      'Base Salary',\n      'Hours Worked',\n      'Gross Pay',\n      'Deductions',\n      'Benefits',\n      'Net Pay',\n      'Status',\n      'Created At'\n    ];\n\n    const rows = records.map(record => [\n      record.employeeId,\n      record.employeeName || 'N/A',\n      record.periodName || 'N/A',\n      record.baseSalary || 0,\n      record.hoursWorked || 0,\n      record.grossPay || 0,\n      record.totalDeductions || 0,\n      record.totalBenefits || 0,\n      record.netPay || 0,\n      record.status || 'draft',\n      record.createdAt ? new Date(record.createdAt).toLocaleDateString() : 'N/A'\n    ]);\n\n    const csvContent = [headers, ...rows]\n      .map(row => row.map(field => `\"${field}\"`).join(','))\n      .join('\\n');\n\n    return csvContent;\n  }\n\n  private generatePDF(records: any[]): Buffer {\n    // For now, return a simple text representation\n    // In a real implementation, you would use a PDF library like puppeteer or pdfkit\n    const content = records.map(record => \n      `${record.employeeName || 'N/A'} - ${record.periodName || 'N/A'} - ₱${record.netPay || 0}`\n    ).join('\\n');\n    \n    return Buffer.from(content, 'utf-8');\n  }\n\n  async getPayrollStats(): Promise<{\n    totalEmployees: number;\n    totalPayroll: number;\n    processedPeriods: number;\n    pendingPeriods: number;\n  }> {\n    try {\n      // Get total employees\n      const totalEmployees = await employeeModel.getTotalEmployeeCount();\n      \n      // Get total payroll (sum of all net pay from completed records)\n      const totalPayrollResult = await payrollRecordModel.getTotalNetPay();\n      const totalPayroll = totalPayrollResult || 0;\n      \n      // Get processed periods (completed status)\n      const processedPeriods = await payrollPeriodModel.countByStatus(['completed']);\n      \n      // Get pending periods (draft status)\n      const pendingPeriods = await payrollPeriodModel.countByStatus(['draft']);\n\n      return {\n        totalEmployees,\n        totalPayroll,\n        processedPeriods,\n        pendingPeriods\n      };\n    } catch (error) {\n      logger.error('Error getting payroll statistics', { \n        error: (error as Error).message \n      });\n      throw error;\n    }\n  }\n\n  // New methods for deduction types management\n  async createDeductionType(data: any): Promise<any> {\n    try {\n      return await deductionTypeModel.create(data);\n    } catch (error) {\n      logger.error('Error creating deduction type', { error: (error as Error).message, data });\n      throw error;\n    }\n  }\n\n  async getDeductionTypes(params: any = {}): Promise<{ records: any[]; total: number }> {\n    try {\n      return await deductionTypeModel.findAll(params);\n    } catch (error) {\n      logger.error('Error getting deduction types', { error: (error as Error).message, params });\n      throw error;\n    }\n  }\n\n  async updateDeductionType(id: string, data: any): Promise<any> {\n    try {\n      return await deductionTypeModel.update(id, data);\n    } catch (error) {\n      logger.error('Error updating deduction type', { error: (error as Error).message, id, data });\n      throw error;\n    }\n  }\n\n  async deleteDeductionType(id: string): Promise<boolean> {\n    try {\n      return await deductionTypeModel.delete(id);\n    } catch (error) {\n      logger.error('Error deleting deduction type', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  // New methods for benefit types management\n  async createBenefitType(data: any): Promise<any> {\n    try {\n      return await benefitTypeModel.create(data);\n    } catch (error) {\n      logger.error('Error creating benefit type', { error: (error as Error).message, data });\n      throw error;\n    }\n  }\n\n  async getBenefitTypes(params: any = {}): Promise<{ records: any[]; total: number }> {\n    try {\n      return await benefitTypeModel.findAll(params);\n    } catch (error) {\n      logger.error('Error getting benefit types', { error: (error as Error).message, params });\n      throw error;\n    }\n  }\n\n  async updateBenefitType(id: string, data: any): Promise<any> {\n    try {\n      return await benefitTypeModel.update(id, data);\n    } catch (error) {\n      logger.error('Error updating benefit type', { error: (error as Error).message, id, data });\n      throw error;\n    }\n  }\n\n  async deleteBenefitType(id: string): Promise<boolean> {\n    try {\n      return await benefitTypeModel.delete(id);\n    } catch (error) {\n      logger.error('Error deleting benefit type', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  // New methods for employee deduction balances management\n  async getEmployeeDeductionBalances(params: any = {}): Promise<{ records: any[]; total: number }> {\n    try {\n      return await employeeDeductionBalanceModel.findAll(params);\n    } catch (error) {\n      logger.error('Error getting employee deduction balances', { error: (error as Error).message, params });\n      throw error;\n    }\n  }\n\n  async createEmployeeDeductionBalance(data: any): Promise<any> {\n    try {\n      return await employeeDeductionBalanceModel.create(data);\n    } catch (error) {\n      logger.error('Error creating employee deduction balance', { error: (error as Error).message, data });\n      throw error;\n    }\n  }\n\n  async updateEmployeeDeductionBalance(id: string, data: any): Promise<any> {\n    try {\n      return await employeeDeductionBalanceModel.update(id, data);\n    } catch (error) {\n      logger.error('Error updating employee deduction balance', { error: (error as Error).message, id, data });\n      throw error;\n    }\n  }\n\n  async deleteEmployeeDeductionBalance(id: string): Promise<boolean> {\n    try {\n      return await employeeDeductionBalanceModel.delete(id);\n    } catch (error) {\n      logger.error('Error deleting employee deduction balance', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  // New methods for employee benefits management\n  async getEmployeeBenefits(params: any = {}): Promise<{ records: any[]; total: number }> {\n    try {\n      return await employeeBenefitModel.findAll(params);\n    } catch (error) {\n      logger.error('Error getting employee benefits', { error: (error as Error).message, params });\n      throw error;\n    }\n  }\n\n  async createEmployeeBenefit(data: any): Promise<any> {\n    try {\n      return await employeeBenefitModel.create(data);\n    } catch (error) {\n      logger.error('Error creating employee benefit', { error: (error as Error).message, data });\n      throw error;\n    }\n  }\n\n  async updateEmployeeBenefit(id: string, data: any): Promise<any> {\n    try {\n      return await employeeBenefitModel.update(id, data);\n    } catch (error) {\n      logger.error('Error updating employee benefit', { error: (error as Error).message, id, data });\n      throw error;\n    }\n  }\n\n  async deleteEmployeeBenefit(id: string): Promise<boolean> {\n    try {\n      return await employeeBenefitModel.delete(id);\n    } catch (error) {\n      logger.error('Error deleting employee benefit', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  // CSV upload for employee benefits\n  async uploadEmployeeBenefits(csvData: any[]): Promise<{ success: number; errors: any[] }> {\n    try {\n      const errors: any[] = [];\n      const successData: any[] = [];\n\n      for (let i = 0; i < csvData.length; i++) {\n        const row = csvData[i];\n        try {\n          // Validate required fields\n          if (!row.employee_name || !row.employee_id || !row.benefit_type_name || !row.benefit_type_id || !row.amount) {\n            errors.push({\n              row: i + 1,\n              error: 'Missing required fields: employee_name, employee_id, benefit_type_name, benefit_type_id, amount'\n            });\n            continue;\n          }\n\n          // Find employee by employee_id\n          const employee = await employeeModel.findByEmployeeId(row.employee_id);\n          if (!employee) {\n            errors.push({\n              row: i + 1,\n              error: `Employee not found: ${row.employee_id}`\n            });\n            continue;\n          }\n\n          // Find benefit type by UUID\n          const benefitType = await benefitTypeModel.findById(row.benefit_type_id);\n          if (!benefitType) {\n            errors.push({\n              row: i + 1,\n              error: `Benefit type not found: ${row.benefit_type_id}`\n            });\n            continue;\n          }\n\n          // Check if record already exists (unique constraint: employee_id, benefit_type_id, start_date)\n          const existingRecord = await employeeBenefitModel.findByEmployeeAndBenefitTypeAndDate(\n            employee.id, \n            benefitType.id, \n            new Date(row.start_date || new Date())\n          );\n          \n          if (existingRecord) {\n            errors.push({\n              row: i + 1,\n              error: `Record already exists for employee ${row.employee_id} with benefit type ${row.benefit_type_name} on ${row.start_date}`\n            });\n            continue;\n          }\n\n          // Prepare data for creation\n          const benefitData = {\n            employee_id: employee.id,\n            benefit_type_id: benefitType.id,\n            amount: parseFloat(row.amount),\n            start_date: new Date(row.start_date || new Date()),\n            end_date: row.end_date ? new Date(row.end_date) : null,\n            is_active: row.is_active !== 'false'\n          };\n\n          successData.push(benefitData);\n        } catch (error) {\n          errors.push({\n            row: i + 1,\n            error: (error as Error).message\n          });\n        }\n      }\n\n      // Bulk create successful records\n      if (successData.length > 0) {\n        await employeeBenefitModel.bulkCreate(successData);\n      }\n\n      logger.info('Employee benefits uploaded', { \n        success: successData.length, \n        errors: errors.length \n      });\n\n      return {\n        success: successData.length,\n        errors\n      };\n    } catch (error) {\n      logger.error('Error uploading employee benefits', { error: (error as Error).message });\n      throw error;\n    }\n  }\n\n  // CSV upload for employee deduction balances\n  async uploadEmployeeDeductionBalances(csvData: any[]): Promise<{ success: number; errors: any[] }> {\n    try {\n      const errors: any[] = [];\n      const successData: any[] = [];\n\n      for (let i = 0; i < csvData.length; i++) {\n        const row = csvData[i];\n        try {\n          // Validate required fields\n          if (!row.employee_name || !row.employee_id || !row.deduction_type_name || !row.remaining_balance) {\n            errors.push({\n              row: i + 1,\n              error: 'Missing required fields: employee_name, employee_id, deduction_type_name, remaining_balance'\n            });\n            continue;\n          }\n\n          // Find employee by employee_id\n          const employee = await employeeModel.findByEmployeeId(row.employee_id);\n          if (!employee) {\n            errors.push({\n              row: i + 1,\n              error: `Employee not found: ${row.employee_id}`\n            });\n            continue;\n          }\n\n          // Find deduction type by UUID\n          const deductionType = await deductionTypeModel.findById(row.deduction_type_id);\n          if (!deductionType) {\n            errors.push({\n              row: i + 1,\n              error: `Deduction type not found: ${row.deduction_type_id}`\n            });\n            continue;\n          }\n\n          // Check if record already exists (unique constraint: employee_id, deduction_type_id, start_date)\n          const existingRecord = await employeeDeductionBalanceModel.findByEmployeeAndDeductionTypeAndDate(\n            employee.id, \n            deductionType.id, \n            new Date(row.start_date || new Date())\n          );\n          \n          if (existingRecord) {\n            errors.push({\n              row: i + 1,\n              error: `Record already exists for employee ${row.employee_id} with deduction type ${row.deduction_type_name} on ${row.start_date}`\n            });\n            continue;\n          }\n\n          // Prepare data for creation\n          const balanceData = {\n            employee_id: employee.id,\n            deduction_type_id: deductionType.id,\n            original_amount: parseFloat(row.remaining_balance),\n            remaining_balance: parseFloat(row.remaining_balance),\n            monthly_deduction_amount: parseFloat(row.monthly_deduction_amount || '0'),\n            start_date: new Date(row.start_date || new Date()),\n            end_date: row.end_date ? new Date(row.end_date) : null,\n            is_active: row.is_active !== 'false'\n          };\n\n          successData.push(balanceData);\n        } catch (error) {\n          errors.push({\n            row: i + 1,\n            error: (error as Error).message\n          });\n        }\n      }\n\n      // Bulk create successful records\n      if (successData.length > 0) {\n        await employeeDeductionBalanceModel.bulkCreate(successData);\n      }\n\n      logger.info('Employee deduction balances uploaded', { \n        success: successData.length, \n        errors: errors.length \n      });\n\n      return {\n        success: successData.length,\n        errors\n      };\n    } catch (error) {\n      logger.error('Error uploading employee deduction balances', { error: (error as Error).message });\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate working days between two dates (excluding weekends)\n   * @param startDate Start date\n   * @param endDate End date\n   * @returns Number of working days\n   */\n  private calculateWorkingDays(startDate: Date, endDate: Date): number {\n    let workingDays = 0;\n    const currentDate = new Date(startDate);\n    \n    while (currentDate <= endDate) {\n      // Check if it's not a weekend (Saturday = 6, Sunday = 0)\n      if (currentDate.getDay() !== 0 && currentDate.getDay() !== 6) {\n        workingDays++;\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    \n    return workingDays;\n  }\n\n  /**\n   * Calculate attendance hours using the mathematical formulation\n   */\n  private async calculateAttendanceHours(employeeId: string, startDate: Date, endDate: Date): Promise<{\n    totalWorkedHours: number;\n    totalRegularHours: number;\n    totalOvertimeHours: number;\n    totalLateHours: number;\n    totalWorkingDays: number;\n  }> {\n    const pool = getPool();\n    \n    // Get all attendance records for the period\n    const attendanceQuery = `\n      SELECT ar.id, ar.date, ar.overall_status\n      FROM attendance_records ar\n      WHERE ar.employee_id = $1 \n        AND ar.date >= $2 \n        AND ar.date <= $3\n        AND ar.overall_status IN ('present', 'late', 'partial')\n      ORDER BY ar.date\n    `;\n\n    const result = await pool.query(attendanceQuery, [employeeId, startDate, endDate]);\n    const attendanceRecords = result.rows;\n\n    let totalWorkedHours = 0;\n    let totalRegularHours = 0;\n    let totalOvertimeHours = 0;\n    let totalLateHours = 0;\n    let totalWorkingDays = attendanceRecords.length;\n\n    // Calculate hours for each attendance record using the new formula\n    for (const record of attendanceRecords) {\n      const sessions = await attendanceSessionModel.getSessionsByAttendanceRecord(record.id);\n      const hoursResult = defaultHoursCalculator.calculateFromSessions(sessions);\n\n      totalWorkedHours += hoursResult.totalHours;\n\n      // Calculate regular and overtime hours (8 hours per day is regular)\n      if (hoursResult.totalHours <= 8) {\n        totalRegularHours += hoursResult.totalHours;\n      } else {\n        totalRegularHours += 8;\n        totalOvertimeHours += (hoursResult.totalHours - 8);\n      }\n\n      // Log the calculation for debugging\n      logger.info('Payroll hours calculation', {\n        employeeId,\n        date: record.date,\n        morningHours: hoursResult.morningHours,\n        afternoonHours: hoursResult.afternoonHours,\n        totalHours: hoursResult.totalHours,\n        regularHours: Math.min(hoursResult.totalHours, 8),\n        overtimeHours: Math.max(0, hoursResult.totalHours - 8),\n        effectiveMorningStart: hoursResult.effectiveMorningStart,\n        effectiveAfternoonStart: hoursResult.effectiveAfternoonStart\n      });\n    }\n\n    return {\n      totalWorkedHours: Math.round(totalWorkedHours * 100) / 100,\n      totalRegularHours: Math.round(totalRegularHours * 100) / 100,\n      totalOvertimeHours: Math.round(totalOvertimeHours * 100) / 100, // Fixed: was hardcoded to 0\n      totalLateHours: Math.round(totalLateHours * 100) / 100,\n      totalWorkingDays\n    };\n  }\n\n  /**\n   * Generate payroll records for all departments\n   * This creates separate payroll records for each department\n   */\n  async generatePayrollRecordsForAllDepartments(payrollPeriodId: string): Promise<{ departmentId: string; records: PayrollRecord[] }[]> {\n    try {\n      // Get all departments with active employees\n      const { getPool } = await import('../../config/database');\n      const pool = getPool();\n      \n      const departmentsQuery = `\n        SELECT DISTINCT d.id, d.name\n        FROM departments d\n        INNER JOIN employees e ON d.id = e.department_id\n        WHERE e.status = 'active' AND d.is_active = true\n        ORDER BY d.name\n      `;\n      \n      const departmentsResult = await pool.query(departmentsQuery);\n      const departmentResults: { departmentId: string; records: PayrollRecord[] }[] = [];\n\n      // Generate payroll records for each department\n      for (const department of departmentsResult.rows) {\n        const records = await this.generatePayrollRecords(payrollPeriodId, department.id);\n        departmentResults.push({\n          departmentId: department.id,\n          records\n        });\n        \n        logger.info(`Generated ${records.length} payroll records for department: ${department.name}`);\n      }\n\n      return departmentResults;\n    } catch (error) {\n      logger.error('Error generating payroll records for all departments:', error);\n      throw error;\n    }\n  }\n\n  async getPayrollRecordsByDepartmentAndPeriod(departmentId: string, periodId: string): Promise<PayrollRecord[]> {\n    try {\n      const { getPool } = await import('../../config/database');\n      const pool = getPool();\n      \n      const query = `\n        SELECT \n          pr.*,\n          u.first_name,\n          u.last_name,\n          e.employee_id,\n          e.position,\n          e.department_id,\n          d.name as department_name,\n          pp.period_name\n        FROM payroll_records pr\n        INNER JOIN employees e ON pr.employee_id = e.id\n        INNER JOIN users u ON e.user_id = u.id\n        INNER JOIN departments d ON e.department_id = d.id\n        INNER JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n        WHERE pr.payroll_period_id = $1 AND e.department_id = $2\n        ORDER BY u.first_name, u.last_name\n      `;\n      \n      const result = await pool.query(query, [periodId, departmentId]);\n      return result.rows;\n    } catch (error) {\n      logger.error('Error getting payroll records by department and period:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get paid leave hours for an employee within a payroll period\n   * This method uses the leave payment policies to determine which leave types are paid\n   * and calculates the total hours with proper payment percentages\n   */\n  private async getPaidLeaveHours(employeeId: string, startDate: Date, endDate: Date): Promise<number> {\n    try {\n      const { getPool } = await import('../../config/database');\n      const pool = getPool();\n\n      // Get all approved leave days within the payroll period\n      const leaveQuery = `\n        SELECT \n          leave_type,\n          start_date,\n          end_date,\n          (end_date - start_date + 1) as total_days\n        FROM leaves\n        WHERE employee_id = $1 \n          AND status = 'approved'\n          AND (\n            (start_date <= $2 AND end_date >= $3) OR  -- Leave spans the period\n            (start_date >= $3 AND start_date <= $2) OR  -- Leave starts within period\n            (end_date >= $3 AND end_date <= $2)  -- Leave ends within period\n          )\n      `;\n\n      const result = await pool.query(leaveQuery, [\n        employeeId,\n        endDate,\n        startDate\n      ]);\n\n      let totalPaidHours = 0;\n      \n      for (const leave of result.rows) {\n        const leaveType = leave.leave_type;\n        const leaveDays = parseFloat(leave.total_days) || 0;\n        \n        // Check if this leave type is paid\n        if (!isLeaveTypePaid(leaveType)) {\n          logger.info('Unpaid leave skipped', {\n            employeeId,\n            leaveType,\n            days: leaveDays\n          });\n          continue;\n        }\n\n        // Get payment percentage for this leave type\n        const paymentPercentage = getLeavePaymentPercentage(leaveType);\n        const maxPaidDaysPerYear = getMaxPaidDaysPerYear(leaveType);\n        \n        // Calculate paid days (considering yearly limits if applicable)\n        let paidDays = leaveDays;\n        if (maxPaidDaysPerYear) {\n          // TODO: Implement yearly limit checking (would need to track used days per year)\n          // For now, we'll use the full leave days\n          logger.info('Yearly limit check not implemented yet', {\n            leaveType,\n            maxPaidDaysPerYear,\n            requestedDays: leaveDays\n          });\n        }\n        \n        // Calculate paid hours with payment percentage\n        const paidHours = (paidDays * 8 * paymentPercentage) / 100; // 8 hours per working day\n        totalPaidHours += paidHours;\n        \n        logger.info('Paid leave calculated', {\n          employeeId,\n          leaveType,\n          startDate: leave.start_date,\n          endDate: leave.end_date,\n          totalDays: leaveDays,\n          paidDays,\n          paymentPercentage,\n          paidHours,\n          maxPaidDaysPerYear\n        });\n      }\n\n      logger.info('Total paid leave hours calculated', {\n        employeeId,\n        startDate,\n        endDate,\n        totalPaidHours,\n        leaveCount: result.rows.length\n      });\n\n      return totalPaidHours;\n    } catch (error) {\n      logger.error('Error calculating paid leave hours', {\n        error: (error as Error).message,\n        employeeId,\n        startDate,\n        endDate\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Export all employee paystubs for a period as PDF\n   */\n  async exportPeriodPaystubsPDF(periodId: string): Promise<Buffer> {\n    try {\n      const PDFDocument = require('pdfkit');\n      const doc = new PDFDocument({ margin: 50 });\n      const buffers: Buffer[] = [];\n\n      doc.on('data', buffers.push.bind(buffers));\n\n      // Get payroll period information\n      const period = await payrollPeriodModel.findById(periodId);\n      if (!period) {\n        throw new Error('Payroll period not found');\n      }\n\n      // Get all payroll records for the period\n      const result = await payrollRecordModel.findAllWithEmployee({ payroll_period_id: periodId, limit: 1000 });\n      const records = result.records;\n\n      // Add title page\n      doc.fontSize(20).text('PAYROLL PAYSTUBS', { align: 'center' });\n      doc.fontSize(16).text(`Period: ${period.period_name}`, { align: 'center' });\n      doc.fontSize(12).text(`From: ${this.formatDate(period.start_date)} To: ${this.formatDate(period.end_date)}`, { align: 'center' });\n      doc.moveDown(2);\n\n      // Generate paystub for each employee\n      for (const record of records) {\n        try {\n          this.addPaystubPage(doc, record, period);\n        } catch (error) {\n          logger.error('Error adding paystub page', { \n            error: (error as Error).message, \n            recordId: record.id,\n            employeeId: record.employee_id\n          });\n          // Continue with next record instead of failing completely\n        }\n      }\n\n      doc.end();\n\n      return new Promise((resolve, reject) => {\n        doc.on('end', () => {\n          const pdfBuffer = Buffer.concat(buffers);\n          resolve(pdfBuffer);\n        });\n        doc.on('error', reject);\n      });\n    } catch (error) {\n      logger.error('Error exporting period paystubs PDF', { \n        error: (error as Error).message, \n        periodId \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Export department employee paystubs for a period as PDF\n   */\n  async exportDepartmentPaystubsPDF(periodId: string, userId: string): Promise<Buffer> {\n    try {\n      const PDFDocument = require('pdfkit');\n      const doc = new PDFDocument({ margin: 50 });\n      const buffers: Buffer[] = [];\n\n      doc.on('data', buffers.push.bind(buffers));\n\n      // Get department head's department\n      const { DepartmentHeadService } = await import('../department-head/departmentHeadService');\n      const departmentHeadService = new DepartmentHeadService();\n      const department = await departmentHeadService.getDepartmentInfo(userId);\n      \n      if (!department) {\n        throw new Error('Department not found for user');\n      }\n\n      // Get payroll period information\n      const period = await payrollPeriodModel.findById(periodId);\n      if (!period) {\n        throw new Error('Payroll period not found');\n      }\n\n      // Get payroll records for the department\n      const result = await payrollRecordModel.findAllWithEmployee({ \n        payroll_period_id: periodId,\n        department_id: department.id,\n        limit: 1000\n      });\n      const records = result.records;\n\n      // Add title page\n      doc.fontSize(20).text('DEPARTMENT PAYROLL PAYSTUBS', { align: 'center' });\n      doc.fontSize(16).text(`Department: ${department.name}`, { align: 'center' });\n      doc.fontSize(16).text(`Period: ${period.period_name}`, { align: 'center' });\n      doc.fontSize(12).text(`From: ${this.formatDate(period.start_date)} To: ${this.formatDate(period.end_date)}`, { align: 'center' });\n      doc.moveDown(2);\n\n      // Generate paystub for each employee\n      for (const record of records) {\n        try {\n          this.addPaystubPage(doc, record, period);\n        } catch (error) {\n          logger.error('Error adding paystub page', { \n            error: (error as Error).message, \n            recordId: record.id,\n            employeeId: record.employee_id\n          });\n          // Continue with next record instead of failing completely\n        }\n      }\n\n      doc.end();\n\n      return new Promise((resolve, reject) => {\n        doc.on('end', () => {\n          const pdfBuffer = Buffer.concat(buffers);\n          resolve(pdfBuffer);\n        });\n        doc.on('error', reject);\n      });\n    } catch (error) {\n      logger.error('Error exporting department paystubs PDF', { \n        error: (error as Error).message, \n        periodId,\n        userId \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Helper function to safely format numbers for PDF\n   */\n  private formatCurrency(amount: any): string {\n    try {\n      if (amount === null || amount === undefined) return '₱0.00';\n      const num = Number(amount);\n      if (isNaN(num) || !isFinite(num)) return '₱0.00';\n      return `₱${num.toFixed(2)}`;\n    } catch (error) {\n      return '₱0.00';\n    }\n  }\n\n  /**\n   * Helper function to safely format dates for PDF\n   */\n  private formatDate(date: any): string {\n    try {\n      if (!date) return 'N/A';\n      return new Date(date).toLocaleDateString();\n    } catch (error) {\n      return 'N/A';\n    }\n  }\n\n  /**\n   * Add a paystub page to the PDF document\n   */\n  private addPaystubPage(doc: any, record: PayrollRecordWithEmployee, period: any): void {\n    // Add new page for each employee\n    doc.addPage();\n\n    // Employee Information\n    doc.fontSize(18).text('PAYSTUB', { align: 'center' });\n    doc.moveDown(1);\n\n    doc.fontSize(12);\n    doc.text(`Employee ID: ${record.employee.employee_id}`, 50, 100);\n    doc.text(`Name: ${record.employee.user.first_name} ${record.employee.user.last_name}`, 50, 120);\n    doc.text(`Department: ${record.employee.department.name}`, 50, 140);\n    doc.text(`Pay Period: ${period.period_name}`, 50, 180);\n    doc.text(`Period: ${this.formatDate(period.start_date)} - ${this.formatDate(period.end_date)}`, 50, 200);\n\n    // Hours Worked Section\n    doc.moveDown(2);\n    doc.fontSize(14).text('HOURS WORKED', { underline: true });\n    doc.moveDown(0.5);\n    \n    doc.fontSize(12);\n    const regularHours = Number(record.total_regular_hours) || 0;\n    const overtimeHours = Number(record.total_overtime_hours) || 0;\n    const lateHours = Number(record.total_late_hours) || 0;\n    const paidLeaveHours = Number(record.paid_leave_hours) || 0;\n    const totalHours = regularHours + overtimeHours + paidLeaveHours;\n    \n    doc.text(`Regular Hours: ${regularHours}`, 50);\n    doc.text(`Overtime Hours: ${overtimeHours}`, 50);\n    doc.text(`Late Hours: ${lateHours}`, 50);\n    doc.text(`Paid Leave Hours: ${paidLeaveHours}`, 50);\n    doc.text(`Total Hours: ${totalHours}`, 50);\n\n    // Earnings Section\n    doc.moveDown(1);\n    doc.fontSize(14).text('EARNINGS', { underline: true });\n    doc.moveDown(0.5);\n    \n    doc.fontSize(12);\n    doc.text(`Base Salary: ${this.formatCurrency(record.base_salary)}`, 50);\n    \n    // Calculate Leave Pay\n    const hourlyRate = Number(record.hourly_rate) || 0;\n    const leavePay = paidLeaveHours * hourlyRate;\n    if (leavePay > 0) {\n      doc.text(`Leave Pay: ${this.formatCurrency(leavePay)}`, 50);\n    }\n    \n    doc.text(`Benefits: ${this.formatCurrency(record.total_benefits)}`, 50);\n    doc.text(`Gross Pay: ${this.formatCurrency(record.gross_pay)}`, 50);\n\n    // Deductions Section\n    doc.moveDown(1);\n    doc.fontSize(14).text('DEDUCTIONS', { underline: true });\n    doc.moveDown(0.5);\n    \n    doc.fontSize(12);\n    doc.text(`Late Deductions: ${this.formatCurrency(record.late_deductions)}`, 50);\n    doc.text(`Total Deductions: ${this.formatCurrency(record.total_deductions)}`, 50);\n\n    // Net Pay Section\n    doc.moveDown(1);\n    doc.fontSize(16).text(`NET PAY: ${this.formatCurrency(record.net_pay)}`, 50, { underline: true });\n\n    // Footer\n    doc.fontSize(10);\n    doc.text(`Generated on: ${this.formatDate(new Date())}`, 50, doc.page.height - 100);\n    doc.text(`Status: ${record.status?.toUpperCase()}`, 50, doc.page.height - 80);\n  }\n}\n\nexport const payrollService = new PayrollService();"],"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","ignoreList":[]}