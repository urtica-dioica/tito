{"version":3,"names":["database_1","cov_1s70sfzt35","s","require","PayrollPeriod_1","logger_1","__importDefault","AutoPayrollService","constructor","f","pool","getPool","generateYearlyPayrollPeriods","year","b","Date","getFullYear","client","connect","existingPeriods","payrollPeriodModel","findAll","page","limit","existingYearPeriods","periods","filter","period","periodYear","start_date","length","default","info","existingCount","month","startDate","endDate","workingDays","calculateWorkingDaysInMonth","expectedHours","periodName","toLocaleDateString","push","period_name","end_date","status","working_days","expected_hours","periodData","create","error","message","release","generateCurrentMonthPeriod","now","currentYear","currentMonth","getMonth","generateMonthlyPayrollPeriod","getExpectedMonthlyHours","result","query","rows","parseInt","setting_value","currentDate","dayOfWeek","getDay","setDate","getDate","initializePayrollPeriods","findByDateRange","exports","autoPayrollService"],"sources":["/home/kim/tito/server/src/services/payroll/autoPayrollService.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport { payrollPeriodModel } from '../../models/payroll/PayrollPeriod';\nimport logger from '../../utils/logger';\n\nexport class AutoPayrollService {\n  private pool = getPool();\n\n  /**\n   * Generate payroll periods for the current year\n   * Creates 12 monthly periods automatically\n   */\n  async generateYearlyPayrollPeriods(year: number = new Date().getFullYear()): Promise<void> {\n    const client = await this.pool.connect();\n    \n    try {\n      // Check if periods already exist for this year\n      const existingPeriods = await payrollPeriodModel.findAll({\n        page: 1,\n        limit: 100\n      });\n\n      const existingYearPeriods = existingPeriods.periods.filter((period: any) => {\n        const periodYear = new Date(period.start_date).getFullYear();\n        return periodYear === year;\n      });\n\n      if (existingYearPeriods.length > 0) {\n        logger.info(`Payroll periods for year ${year} already exist`, {\n          existingCount: existingYearPeriods.length\n        });\n        return;\n      }\n\n      // Generate 12 monthly periods\n      const periods = [];\n      for (let month = 0; month < 12; month++) {\n        const startDate = new Date(year, month, 1);\n        const endDate = new Date(year, month + 1, 0); // Last day of the month\n        \n        // Calculate actual working days in this month\n        const workingDays = this.calculateWorkingDaysInMonth(year, month);\n        \n        // Calculate expected hours for this specific month\n        const expectedHours = workingDays * 8; // 8 hours per working day\n\n        const periodName = startDate.toLocaleDateString('en-US', { \n          month: 'long', \n          year: 'numeric' \n        });\n\n        periods.push({\n          period_name: periodName,\n          start_date: startDate,\n          end_date: endDate,\n          status: 'draft' as const,\n          // Store month-specific working days and expected hours\n          working_days: workingDays,\n          expected_hours: expectedHours\n        });\n      }\n\n      // Create all periods\n      for (const periodData of periods) {\n        try {\n          await payrollPeriodModel.create(periodData);\n          logger.info(`Created payroll period: ${periodData.period_name}`, {\n            startDate: periodData.start_date,\n            endDate: periodData.end_date,\n            workingDays: periodData.working_days,\n            expectedHours: periodData.expected_hours\n          });\n        } catch (error) {\n          logger.error(`Failed to create payroll period: ${periodData.period_name}`, {\n            error: (error as Error).message,\n            periodData\n          });\n        }\n      }\n\n      logger.info(`Successfully generated ${periods.length} payroll periods for year ${year}`);\n\n    } catch (error) {\n      logger.error('Error generating yearly payroll periods', {\n        error: (error as Error).message,\n        year\n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Generate payroll period for the current month\n   */\n  async generateCurrentMonthPeriod(): Promise<void> {\n    const now = new Date();\n    const currentYear = now.getFullYear();\n    const currentMonth = now.getMonth(); // 0-based month (0 = January, 11 = December)\n    \n    try {\n      await this.generateMonthlyPayrollPeriod(currentYear, currentMonth);\n      logger.info('Current month payroll period generated successfully');\n    } catch (error) {\n      logger.error('Failed to generate current month payroll period', {\n        error: (error as Error).message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get expected monthly hours from system settings\n   */\n  async getExpectedMonthlyHours(): Promise<number> {\n    const client = await this.pool.connect();\n    \n    try {\n      const result = await client.query(\n        'SELECT setting_value FROM system_settings WHERE setting_key = $1',\n        ['expected_monthly_hours']\n      );\n\n      if (result.rows.length === 0) {\n        return 176; // Default value\n      }\n\n      return parseInt(result.rows[0].setting_value);\n    } catch (error) {\n      logger.error('Error getting expected monthly hours', {\n        error: (error as Error).message\n      });\n      return 176; // Default value\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Calculate working days in a month (excluding weekends)\n   */\n  calculateWorkingDaysInMonth(year: number, month: number): number {\n    const startDate = new Date(year, month, 1);\n    const endDate = new Date(year, month + 1, 0);\n    \n    let workingDays = 0;\n    const currentDate = new Date(startDate);\n    \n    while (currentDate <= endDate) {\n      const dayOfWeek = currentDate.getDay();\n      // Count Monday (1) through Friday (5) as working days\n      if (dayOfWeek >= 1 && dayOfWeek <= 5) {\n        workingDays++;\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    \n    return workingDays;\n  }\n\n  /**\n   * Initialize payroll periods for the current year if they don't exist\n   * This should be called on system startup or when needed\n   */\n  async initializePayrollPeriods(): Promise<void> {\n    const currentYear = new Date().getFullYear();\n    \n    try {\n      await this.generateYearlyPayrollPeriods(currentYear);\n      logger.info('Payroll periods initialization completed');\n    } catch (error) {\n      logger.error('Failed to initialize payroll periods', {\n        error: (error as Error).message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate payroll period for a specific month\n   */\n  async generateMonthlyPayrollPeriod(year: number, month: number): Promise<void> {\n    const startDate = new Date(year, month, 1);\n    const endDate = new Date(year, month + 1, 0); // Last day of the month\n    \n    // Calculate actual working days in this month\n    const workingDays = this.calculateWorkingDaysInMonth(year, month);\n    \n    // Calculate expected hours for this specific month\n    const expectedHours = workingDays * 8; // 8 hours per working day\n\n    const periodName = startDate.toLocaleDateString('en-US', { \n      month: 'long', \n      year: 'numeric' \n    });\n\n    try {\n      // Check if period already exists\n      const existingPeriods = await payrollPeriodModel.findByDateRange(startDate, endDate);\n      if (existingPeriods.length > 0) {\n        logger.info(`Payroll period for ${periodName} already exists`);\n        return;\n      }\n\n      // Create the payroll period\n      const periodData = {\n        period_name: periodName,\n        start_date: startDate,\n        end_date: endDate,\n        working_days: workingDays,\n        expected_hours: expectedHours,\n        status: 'draft' as const\n      };\n\n      await payrollPeriodModel.create(periodData);\n      logger.info(`Created payroll period for ${periodName}`);\n    } catch (error) {\n      logger.error(`Failed to create payroll period for ${periodName}`, {\n        error: (error as Error).message\n      });\n      throw error;\n    }\n  }\n}\n\nexport const autoPayrollService = new AutoPayrollService();\n"],"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","ignoreList":[]}