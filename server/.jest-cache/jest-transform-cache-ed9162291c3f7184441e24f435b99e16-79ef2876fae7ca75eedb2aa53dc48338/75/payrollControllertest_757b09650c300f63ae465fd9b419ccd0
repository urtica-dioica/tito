30efff416c2c0b112da53d53c491166c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the dependencies
jest.mock('../../../src/services/payroll/payrollService');
jest.mock('../../../src/services/payroll/autoPayrollService');
jest.mock('../../../src/utils/types/express');
const payrollController_1 = require("../../../src/controllers/payroll/payrollController");
const payrollService_1 = require("../../../src/services/payroll/payrollService");
const express_1 = require("../../../src/utils/types/express");
const mockPayrollService = payrollService_1.payrollService;
const mockGetRequestId = express_1.getRequestId;
describe('PayrollController', () => {
    let payrollController;
    let mockRequest;
    let mockResponse;
    beforeEach(() => {
        payrollController = new payrollController_1.PayrollController();
        jest.clearAllMocks();
        // Mock request object
        mockRequest = {
            body: {},
            params: {},
            query: {},
            user: {
                userId: 'hr-user-123',
                email: 'hr@example.com',
                role: 'hr',
                tokenVersion: 1
            }
        };
        // Mock response object
        mockResponse = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn().mockReturnThis(),
            download: jest.fn().mockReturnThis()
        };
        // Mock getRequestId
        mockGetRequestId.mockReturnValue('test-request-123');
    });
    describe('createPayrollPeriod', () => {
        it('should create payroll period successfully', async () => {
            // Arrange
            mockRequest.body = {
                period_name: 'January 2024',
                start_date: '2024-01-01',
                end_date: '2024-01-31',
                status: 'draft'
            };
            const mockPayrollPeriod = {
                id: 'period-123',
                period_name: 'January 2024',
                start_date: new Date('2024-01-01'),
                end_date: new Date('2024-01-31'),
                status: 'draft',
                created_at: new Date(),
                updated_at: new Date()
            };
            mockPayrollService.createPayrollPeriod.mockResolvedValue(mockPayrollPeriod);
            // Act
            await payrollController.createPayrollPeriod(mockRequest, mockResponse);
            // Assert
            expect(mockPayrollService.createPayrollPeriod).toHaveBeenCalledWith({
                period_name: 'January 2024',
                start_date: new Date('2024-01-01'),
                end_date: new Date('2024-01-31'),
                status: 'draft'
            });
            expect(mockResponse.status).toHaveBeenCalledWith(201);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Payroll period created successfully',
                data: mockPayrollPeriod,
                requestId: 'test-request-123'
            });
        });
        it('should return 400 for missing required fields', async () => {
            // Arrange
            mockRequest.body = {
                period_name: 'January 2024'
                // start_date and end_date missing
            };
            // Act
            await payrollController.createPayrollPeriod(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Period name, start date, and end date are required',
                requestId: 'test-request-123'
            });
            expect(mockPayrollService.createPayrollPeriod).not.toHaveBeenCalled();
        });
        it('should handle service errors', async () => {
            // Arrange
            mockRequest.body = {
                period_name: 'January 2024',
                start_date: '2024-01-01',
                end_date: '2024-01-31'
            };
            mockPayrollService.createPayrollPeriod.mockRejectedValue(new Error('Database error'));
            // Act
            await payrollController.createPayrollPeriod(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(500);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Failed to create payroll period',
                requestId: 'test-request-123'
            });
        });
    });
    describe('getPayrollPeriods', () => {
        it('should get payroll periods successfully', async () => {
            // Arrange
            mockRequest.query = {
                page: '1',
                limit: '10',
                status: 'active'
            };
            const mockPeriods = [
                {
                    id: 'period-1',
                    period_name: 'January 2024',
                    start_date: new Date('2024-01-01'),
                    end_date: new Date('2024-01-31'),
                    status: 'processing',
                    created_at: new Date(),
                    updated_at: new Date()
                },
                {
                    id: 'period-2',
                    period_name: 'February 2024',
                    start_date: new Date('2024-02-01'),
                    end_date: new Date('2024-02-29'),
                    status: 'processing',
                    created_at: new Date(),
                    updated_at: new Date()
                }
            ];
            mockPayrollService.getPayrollPeriods.mockResolvedValue({
                periods: mockPeriods,
                total: 2
            });
            // Act
            await payrollController.getPayrollPeriods(mockRequest, mockResponse);
            // Assert
            expect(mockPayrollService.getPayrollPeriods).toHaveBeenCalledWith({
                page: 1,
                limit: 10,
                status: 'active'
            });
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Payroll periods retrieved successfully',
                data: {
                    periods: mockPeriods,
                    pagination: {
                        page: 1,
                        limit: 10,
                        total: 2,
                        totalPages: 1
                    }
                },
                requestId: 'test-request-123'
            });
        });
        it('should handle service errors', async () => {
            // Arrange
            mockRequest.query = {};
            mockPayrollService.getPayrollPeriods.mockRejectedValue(new Error('Database error'));
            // Act
            await payrollController.getPayrollPeriods(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(500);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Failed to retrieve payroll periods',
                requestId: 'test-request-123'
            });
        });
    });
    describe('getPayrollPeriod', () => {
        it('should get payroll period successfully', async () => {
            // Arrange
            mockRequest.params = {
                id: 'period-123'
            };
            const mockPeriod = {
                id: 'period-123',
                period_name: 'January 2024',
                start_date: new Date('2024-01-01'),
                end_date: new Date('2024-01-31'),
                status: 'processing',
                created_at: new Date(),
                updated_at: new Date()
            };
            mockPayrollService.getPayrollPeriod.mockResolvedValue(mockPeriod);
            // Act
            await payrollController.getPayrollPeriod(mockRequest, mockResponse);
            // Assert
            expect(mockPayrollService.getPayrollPeriod).toHaveBeenCalledWith('period-123');
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Payroll period retrieved successfully',
                data: mockPeriod,
                requestId: 'test-request-123'
            });
        });
        it('should return 404 if period not found', async () => {
            // Arrange
            mockRequest.params = {
                id: 'nonexistent-period'
            };
            mockPayrollService.getPayrollPeriod.mockResolvedValue(null);
            // Act
            await payrollController.getPayrollPeriod(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(404);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Payroll period not found',
                requestId: 'test-request-123'
            });
        });
    });
    describe('updatePayrollPeriod', () => {
        it('should update payroll period successfully', async () => {
            // Arrange
            mockRequest.params = {
                id: 'period-123'
            };
            mockRequest.body = {
                period_name: 'Updated January 2024',
                status: 'active'
            };
            const mockUpdatedPeriod = {
                id: 'period-123',
                period_name: 'Updated January 2024',
                start_date: new Date('2024-01-01'),
                end_date: new Date('2024-01-31'),
                status: 'processing',
                created_at: new Date(),
                updated_at: new Date()
            };
            mockPayrollService.updatePayrollPeriod.mockResolvedValue(mockUpdatedPeriod);
            // Act
            await payrollController.updatePayrollPeriod(mockRequest, mockResponse);
            // Assert
            expect(mockPayrollService.updatePayrollPeriod).toHaveBeenCalledWith('period-123', {
                period_name: 'Updated January 2024',
                status: 'active'
            });
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Payroll period updated successfully',
                data: mockUpdatedPeriod,
                requestId: 'test-request-123'
            });
        });
        it('should return 404 if period not found', async () => {
            // Arrange
            mockRequest.params = {
                id: 'nonexistent-period'
            };
            mockRequest.body = {
                period_name: 'Updated Period'
            };
            mockPayrollService.updatePayrollPeriod.mockResolvedValue(null);
            // Act
            await payrollController.updatePayrollPeriod(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(404);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Payroll period not found',
                requestId: 'test-request-123'
            });
        });
    });
    describe('deletePayrollPeriod', () => {
        it('should delete payroll period successfully', async () => {
            // Arrange
            mockRequest.params = {
                id: 'period-123'
            };
            mockPayrollService.deletePayrollPeriod.mockResolvedValue(true);
            // Act
            await payrollController.deletePayrollPeriod(mockRequest, mockResponse);
            // Assert
            expect(mockPayrollService.deletePayrollPeriod).toHaveBeenCalledWith('period-123');
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Payroll period deleted successfully',
                requestId: 'test-request-123'
            });
        });
        it('should return 404 if period not found', async () => {
            // Arrange
            mockRequest.params = {
                id: 'nonexistent-period'
            };
            mockPayrollService.deletePayrollPeriod.mockResolvedValue(false);
            // Act
            await payrollController.deletePayrollPeriod(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(404);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Payroll period not found',
                requestId: 'test-request-123'
            });
        });
    });
    describe('generatePayrollRecords', () => {
        it('should generate payroll records successfully', async () => {
            // Arrange
            mockRequest.params = {
                periodId: 'period-123'
            };
            const mockResult = [
                {
                    id: 'record-1',
                    payroll_period_id: 'period-123',
                    employee_id: 'emp-1',
                    base_salary: 50000,
                    total_worked_hours: 160,
                    hourly_rate: 312.5,
                    total_regular_hours: 160,
                    total_overtime_hours: 0,
                    total_late_hours: 0,
                    late_deductions: 0,
                    paid_leave_hours: 0,
                    gross_pay: 50000,
                    net_pay: 45000,
                    total_deductions: 5000,
                    total_benefits: 0,
                    status: 'draft',
                    created_at: new Date(),
                    updated_at: new Date()
                }
            ];
            mockPayrollService.generatePayrollRecords.mockResolvedValue(mockResult);
            // Act
            await payrollController.generatePayrollRecords(mockRequest, mockResponse);
            // Assert
            expect(mockPayrollService.generatePayrollRecords).toHaveBeenCalledWith('period-123');
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Payroll records generated successfully',
                data: mockResult,
                requestId: 'test-request-123'
            });
        });
        it('should handle generation errors', async () => {
            // Arrange
            mockRequest.params = {
                periodId: 'period-123'
            };
            const mockResult = [];
            mockPayrollService.generatePayrollRecords.mockResolvedValue(mockResult);
            // Act
            await payrollController.generatePayrollRecords(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Failed to generate payroll records',
                data: mockResult,
                requestId: 'test-request-123'
            });
        });
    });
    describe('getPayrollSummary', () => {
        it('should get payroll summary successfully', async () => {
            // Arrange
            mockRequest.params = {
                periodId: 'period-123'
            };
            const mockSummary = {
                period: {
                    id: 'period-123',
                    period_name: 'January 2024',
                    start_date: new Date('2024-01-01'),
                    end_date: new Date('2024-01-31'),
                    status: 'processing',
                    created_at: new Date(),
                    updated_at: new Date()
                },
                totalEmployees: 25,
                totalGrossPay: 125000,
                totalDeductions: 25000,
                totalNetPay: 100000,
                processedRecords: 25,
                pendingRecords: 0
            };
            mockPayrollService.getPayrollSummary.mockResolvedValue(mockSummary);
            // Act
            await payrollController.getPayrollSummary(mockRequest, mockResponse);
            // Assert
            expect(mockPayrollService.getPayrollSummary).toHaveBeenCalledWith('period-123');
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Payroll summary retrieved successfully',
                data: mockSummary,
                requestId: 'test-request-123'
            });
        });
        it('should handle service errors', async () => {
            // Arrange
            mockRequest.params = {
                periodId: 'period-123'
            };
            mockPayrollService.getPayrollSummary.mockRejectedValue(new Error('Database error'));
            // Act
            await payrollController.getPayrollSummary(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(500);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Failed to retrieve payroll summary',
                requestId: 'test-request-123'
            });
        });
    });
    describe('getPayrollRecords', () => {
        it('should get payroll records successfully', async () => {
            // Arrange
            mockRequest.params = {
                periodId: 'period-123'
            };
            mockRequest.query = {
                page: '1',
                limit: '10',
                status: 'processed'
            };
            const mockRecords = [
                {
                    id: 'record-1',
                    payroll_period_id: 'period-123',
                    employee_id: 'emp-1',
                    base_salary: 50000,
                    total_worked_hours: 160,
                    hourly_rate: 312.5,
                    total_regular_hours: 160,
                    total_overtime_hours: 0,
                    total_late_hours: 0,
                    late_deductions: 0,
                    paid_leave_hours: 0,
                    gross_pay: 5000,
                    net_pay: 4000,
                    total_deductions: 1000,
                    total_benefits: 0,
                    status: 'processed',
                    created_at: new Date(),
                    updated_at: new Date(),
                    employee: {
                        employee_id: 'emp-1',
                        user: {
                            first_name: 'John',
                            last_name: 'Doe'
                        },
                        department: {
                            id: 'dept-1',
                            name: 'Engineering'
                        }
                    }
                },
                {
                    id: 'record-2',
                    payroll_period_id: 'period-123',
                    employee_id: 'emp-2',
                    base_salary: 60000,
                    total_worked_hours: 160,
                    hourly_rate: 375,
                    total_regular_hours: 160,
                    total_overtime_hours: 0,
                    total_late_hours: 0,
                    late_deductions: 0,
                    paid_leave_hours: 0,
                    gross_pay: 6000,
                    net_pay: 4800,
                    total_deductions: 1200,
                    total_benefits: 0,
                    status: 'processed',
                    created_at: new Date(),
                    updated_at: new Date(),
                    employee: {
                        employee_id: 'emp-2',
                        user: {
                            first_name: 'Jane',
                            last_name: 'Smith'
                        },
                        department: {
                            id: 'dept-1',
                            name: 'Engineering'
                        }
                    }
                }
            ];
            mockPayrollService.getPayrollRecords.mockResolvedValue({
                records: mockRecords,
                total: 2
            });
            // Act
            await payrollController.getPayrollRecords(mockRequest, mockResponse);
            // Assert
            expect(mockPayrollService.getPayrollRecords).toHaveBeenCalledWith('period-123', {
                page: 1,
                limit: 10,
                status: 'processed'
            });
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Payroll records retrieved successfully',
                data: {
                    records: mockRecords,
                    pagination: {
                        page: 1,
                        limit: 10,
                        total: 2,
                        totalPages: 1
                    }
                },
                requestId: 'test-request-123'
            });
        });
    });
    describe('getPayrollRecord', () => {
        it('should get payroll record successfully', async () => {
            // Arrange
            mockRequest.params = {
                id: 'record-123'
            };
            const mockRecord = {
                id: 'record-123',
                payroll_period_id: 'period-123',
                employee_id: 'emp-123',
                base_salary: 50000,
                total_worked_hours: 160,
                hourly_rate: 312.5,
                total_regular_hours: 160,
                total_overtime_hours: 0,
                total_late_hours: 0,
                late_deductions: 0,
                paid_leave_hours: 0,
                gross_pay: 5000,
                net_pay: 4000,
                total_deductions: 1000,
                total_benefits: 0,
                status: 'processed',
                created_at: new Date(),
                updated_at: new Date()
            };
            mockPayrollService.getPayrollRecord.mockResolvedValue(mockRecord);
            // Act
            await payrollController.getPayrollRecord(mockRequest, mockResponse);
            // Assert
            expect(mockPayrollService.getPayrollRecord).toHaveBeenCalledWith('record-123');
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Payroll record retrieved successfully',
                data: mockRecord,
                requestId: 'test-request-123'
            });
        });
        it('should return 404 if record not found', async () => {
            // Arrange
            mockRequest.params = {
                id: 'nonexistent-record'
            };
            mockPayrollService.getPayrollRecord.mockResolvedValue(null);
            // Act
            await payrollController.getPayrollRecord(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(404);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Payroll record not found',
                requestId: 'test-request-123'
            });
        });
    });
    describe('updatePayrollRecord', () => {
        it('should update payroll record successfully', async () => {
            // Arrange
            mockRequest.params = {
                id: 'record-123'
            };
            mockRequest.body = {
                gross_pay: 5500,
                total_deductions: 1100,
                net_pay: 4400
            };
            const mockUpdatedRecord = {
                id: 'record-123',
                payroll_period_id: 'period-123',
                employee_id: 'emp-123',
                base_salary: 50000,
                total_worked_hours: 160,
                hourly_rate: 312.5,
                total_regular_hours: 160,
                total_overtime_hours: 0,
                total_late_hours: 0,
                late_deductions: 0,
                paid_leave_hours: 0,
                gross_pay: 5500,
                net_pay: 4400,
                total_deductions: 1100,
                total_benefits: 0,
                status: 'processed',
                created_at: new Date(),
                updated_at: new Date()
            };
            mockPayrollService.updatePayrollRecord.mockResolvedValue(mockUpdatedRecord);
            // Act
            await payrollController.updatePayrollRecord(mockRequest, mockResponse);
            // Assert
            expect(mockPayrollService.updatePayrollRecord).toHaveBeenCalledWith('record-123', {
                gross_pay: 5500,
                total_deductions: 1100,
                net_pay: 4400
            });
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Payroll record updated successfully',
                data: mockUpdatedRecord,
                requestId: 'test-request-123'
            });
        });
        it('should return 404 if record not found', async () => {
            // Arrange
            mockRequest.params = {
                id: 'nonexistent-record'
            };
            mockRequest.body = {
                gross_pay: 5500
            };
            mockPayrollService.updatePayrollRecord.mockResolvedValue(null);
            // Act
            await payrollController.updatePayrollRecord(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(404);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Payroll record not found',
                requestId: 'test-request-123'
            });
        });
    });
    describe('approvePayrollRecord', () => {
        it('should approve payroll record successfully', async () => {
            // Arrange
            mockRequest.params = {
                id: 'record-123'
            };
            mockRequest.body = {
                comments: 'Approved for payment'
            };
            const mockApprovedRecord = {
                id: 'record-123',
                payroll_period_id: 'period-123',
                employee_id: 'emp-123',
                base_salary: 50000,
                total_worked_hours: 160,
                hourly_rate: 312.5,
                total_regular_hours: 160,
                total_overtime_hours: 0,
                total_late_hours: 0,
                late_deductions: 0,
                paid_leave_hours: 0,
                gross_pay: 50000,
                net_pay: 45000,
                total_deductions: 5000,
                total_benefits: 0,
                status: 'processed',
                created_at: new Date(),
                updated_at: new Date()
            };
            mockPayrollService.approvePayrollRecord.mockResolvedValue(mockApprovedRecord);
            // Act
            await payrollController.approvePayrollRecord(mockRequest, mockResponse);
            // Assert
            expect(mockPayrollService.approvePayrollRecord).toHaveBeenCalledWith('record-123', {
                comments: 'Approved for payment'
            });
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Payroll record approved successfully',
                data: mockApprovedRecord,
                requestId: 'test-request-123'
            });
        });
        it('should return 404 if record not found', async () => {
            // Arrange
            mockRequest.params = {
                id: 'nonexistent-record'
            };
            mockRequest.body = {
                comments: 'Approved'
            };
            mockPayrollService.approvePayrollRecord.mockResolvedValue(null);
            // Act
            await payrollController.approvePayrollRecord(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(404);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Payroll record not found',
                requestId: 'test-request-123'
            });
        });
    });
    describe('markPayrollAsPaid', () => {
        it('should mark payroll as paid successfully', async () => {
            // Arrange
            mockRequest.params = {
                id: 'record-123'
            };
            mockRequest.body = {
                payment_date: '2024-01-31',
                payment_method: 'bank_transfer',
                transaction_id: 'TXN-123456'
            };
            const mockPaidRecord = {
                id: 'record-123',
                payroll_period_id: 'period-123',
                employee_id: 'emp-123',
                base_salary: 50000,
                total_worked_hours: 160,
                hourly_rate: 312.5,
                total_regular_hours: 160,
                total_overtime_hours: 0,
                total_late_hours: 0,
                late_deductions: 0,
                paid_leave_hours: 0,
                gross_pay: 50000,
                net_pay: 45000,
                total_deductions: 5000,
                total_benefits: 0,
                status: 'paid',
                created_at: new Date(),
                updated_at: new Date()
            };
            mockPayrollService.markPayrollAsPaid.mockResolvedValue(mockPaidRecord);
            // Act
            await payrollController.markPayrollAsPaid(mockRequest, mockResponse);
            // Assert
            expect(mockPayrollService.markPayrollAsPaid).toHaveBeenCalledWith('record-123', {
                payment_date: new Date('2024-01-31'),
                payment_method: 'bank_transfer',
                transaction_id: 'TXN-123456'
            });
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Payroll marked as paid successfully',
                data: mockPaidRecord,
                requestId: 'test-request-123'
            });
        });
        it('should return 400 for missing payment information', async () => {
            // Arrange
            mockRequest.params = {
                id: 'record-123'
            };
            mockRequest.body = {
                payment_date: '2024-01-31'
                // payment_method and transaction_id missing
            };
            // Act
            await payrollController.markPayrollAsPaid(mockRequest, mockResponse);
            // Assert
            expect(mockResponse.status).toHaveBeenCalledWith(400);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: false,
                message: 'Payment date, method, and transaction ID are required',
                requestId: 'test-request-123'
            });
            expect(mockPayrollService.markPayrollAsPaid).not.toHaveBeenCalled();
        });
    });
    describe('getPayrollStats', () => {
        it('should get payroll stats successfully', async () => {
            // Arrange
            mockRequest.query = {
                period: '2024-01'
            };
            const mockStats = {
                totalEmployees: 25,
                totalPayroll: 1500000,
                processedPeriods: 11,
                pendingPeriods: 1
            };
            mockPayrollService.getPayrollStats.mockResolvedValue(mockStats);
            // Act
            await payrollController.getPayrollStats(mockRequest, mockResponse);
            // Assert
            expect(mockPayrollService.getPayrollStats).toHaveBeenCalledWith({
                period: '2024-01'
            });
            expect(mockResponse.status).toHaveBeenCalledWith(200);
            expect(mockResponse.json).toHaveBeenCalledWith({
                success: true,
                message: 'Payroll statistics retrieved successfully',
                data: mockStats,
                requestId: 'test-request-123'
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,