{"file":"/home/kim/tito/server/tests/performance/databasePerformanceTest.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/performance/databasePerformanceTest.test.ts"],"sourcesContent":["import { DatabasePerformanceTest } from './loadTestUtils';\nimport { getPool } from '../../src/config/database';\n\ndescribe('Database Performance Tests', () => {\n  let dbPerformanceTest: DatabasePerformanceTest;\n  let pool: any;\n\n  beforeAll(async () => {\n    pool = getPool();\n    dbPerformanceTest = new DatabasePerformanceTest(pool);\n  });\n\n  afterAll(async () => {\n    if (pool) {\n      await pool.end();\n    }\n  });\n\n  describe('User Queries Performance', () => {\n    it('should perform well on user authentication queries', async () => {\n      const query = `\n        SELECT id, email, first_name, last_name, role, is_active, created_at\n        FROM users \n        WHERE email = $1 AND is_active = true\n      `;\n      const params = ['test@example.com'];\n\n      const result = await dbPerformanceTest.testQueryPerformance(query, params, 100);\n\n      console.log('\\n📊 User Authentication Query Performance:');\n      console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);\n      console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);\n      console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);\n      console.log(`Total Time: ${result.totalTime.toFixed(2)}ms`);\n\n      // Performance assertions\n      expect(result.averageTime).toBeLessThan(50); // Less than 50ms average\n      expect(result.maxTime).toBeLessThan(200); // Less than 200ms max\n    }, 30000);\n\n    it('should perform well on concurrent user authentication queries', async () => {\n      const query = `\n        SELECT id, email, first_name, last_name, role, is_active, created_at\n        FROM users \n        WHERE email = $1 AND is_active = true\n      `;\n      const params = ['test@example.com'];\n\n      const result = await dbPerformanceTest.testConcurrentQueryPerformance(\n        query, \n        params, \n        20, // 20 concurrent queries\n        10  // 10 iterations\n      );\n\n      console.log('\\n📊 Concurrent User Authentication Query Performance:');\n      console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);\n      console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);\n      console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);\n      console.log(`Queries Per Second: ${result.queriesPerSecond.toFixed(2)}`);\n\n      // Performance assertions\n      expect(result.averageTime).toBeLessThan(100); // Less than 100ms average\n      expect(result.queriesPerSecond).toBeGreaterThan(50); // At least 50 QPS\n    }, 30000);\n  });\n\n  describe('Employee Queries Performance', () => {\n    it('should perform well on employee listing queries', async () => {\n      const query = `\n        SELECT \n          e.id,\n          e.employee_id,\n          e.position,\n          e.employment_type,\n          e.hire_date,\n          e.base_salary,\n          e.status,\n          u.first_name,\n          u.last_name,\n          u.email,\n          d.name as department_name\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        WHERE e.status = 'active'\n        ORDER BY u.last_name, u.first_name\n        LIMIT $1 OFFSET $2\n      `;\n      const params = [20, 0];\n\n      const result = await dbPerformanceTest.testQueryPerformance(query, params, 50);\n\n      console.log('\\n📊 Employee Listing Query Performance:');\n      console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);\n      console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);\n      console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);\n\n      // Performance assertions\n      expect(result.averageTime).toBeLessThan(100); // Less than 100ms average\n      expect(result.maxTime).toBeLessThan(300); // Less than 300ms max\n    }, 30000);\n\n    it('should perform well on employee search queries', async () => {\n      const query = `\n        SELECT \n          e.id,\n          e.employee_id,\n          e.position,\n          u.first_name,\n          u.last_name,\n          u.email,\n          d.name as department_name\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        WHERE \n          (u.first_name ILIKE $1 OR u.last_name ILIKE $1 OR u.email ILIKE $1)\n          AND e.status = 'active'\n        ORDER BY u.last_name, u.first_name\n        LIMIT $2\n      `;\n      const params = ['%test%', 10];\n\n      const result = await dbPerformanceTest.testQueryPerformance(query, params, 30);\n\n      console.log('\\n📊 Employee Search Query Performance:');\n      console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);\n      console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);\n      console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);\n\n      // Performance assertions\n      expect(result.averageTime).toBeLessThan(150); // Less than 150ms average\n      expect(result.maxTime).toBeLessThan(500); // Less than 500ms max\n    }, 30000);\n  });\n\n  describe('Attendance Queries Performance', () => {\n    it('should perform well on attendance record queries', async () => {\n      const query = `\n        SELECT \n          ar.id,\n          ar.employee_id,\n          ar.date,\n          ar.total_hours,\n          ar.status,\n          u.first_name,\n          u.last_name,\n          e.employee_id as employee_code\n        FROM attendance_records ar\n        JOIN employees e ON ar.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        WHERE ar.date BETWEEN $1 AND $2\n        ORDER BY ar.date DESC, u.last_name\n        LIMIT $3\n      `;\n      const params = ['2024-01-01', '2024-01-31', 50];\n\n      const result = await dbPerformanceTest.testQueryPerformance(query, params, 40);\n\n      console.log('\\n📊 Attendance Record Query Performance:');\n      console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);\n      console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);\n      console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);\n\n      // Performance assertions\n      expect(result.averageTime).toBeLessThan(200); // Less than 200ms average\n      expect(result.maxTime).toBeLessThan(600); // Less than 600ms max\n    }, 30000);\n\n    it('should perform well on attendance statistics queries', async () => {\n      const query = `\n        SELECT \n          COUNT(*) as total_employees,\n          COUNT(CASE WHEN ar.status = 'present' THEN 1 END) as present_today,\n          COUNT(CASE WHEN ar.status = 'absent' THEN 1 END) as absent_today,\n          COUNT(CASE WHEN ar.status = 'late' THEN 1 END) as late_today,\n          COALESCE(SUM(ar.total_hours), 0) as total_hours_today,\n          COALESCE(AVG(ar.total_hours), 0) as average_hours_per_employee\n        FROM employees e\n        LEFT JOIN attendance_records ar ON e.id = ar.employee_id \n          AND ar.date = CURRENT_DATE\n        WHERE e.status = 'active'\n      `;\n\n      const result = await dbPerformanceTest.testQueryPerformance(query, [], 30);\n\n      console.log('\\n📊 Attendance Statistics Query Performance:');\n      console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);\n      console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);\n      console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);\n\n      // Performance assertions\n      expect(result.averageTime).toBeLessThan(150); // Less than 150ms average\n      expect(result.maxTime).toBeLessThan(400); // Less than 400ms max\n    }, 30000);\n  });\n\n  describe('Payroll Queries Performance', () => {\n    it('should perform well on payroll record queries', async () => {\n      const query = `\n        SELECT \n          pr.id,\n          pr.employee_id,\n          pr.payroll_period_id,\n          pr.base_salary,\n          pr.total_worked_hours,\n          pr.gross_pay,\n          pr.total_deductions,\n          pr.net_pay,\n          pr.status,\n          u.first_name,\n          u.last_name,\n          e.employee_id as employee_code,\n          pp.period_name\n        FROM payroll_records pr\n        JOIN employees e ON pr.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n        WHERE pp.id = $1\n        ORDER BY u.last_name, u.first_name\n        LIMIT $2 OFFSET $3\n      `;\n      const params = ['test-period-id', 25, 0];\n\n      const result = await dbPerformanceTest.testQueryPerformance(query, params, 30);\n\n      console.log('\\n📊 Payroll Record Query Performance:');\n      console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);\n      console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);\n      console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);\n\n      // Performance assertions\n      expect(result.averageTime).toBeLessThan(250); // Less than 250ms average\n      expect(result.maxTime).toBeLessThan(800); // Less than 800ms max\n    }, 30000);\n\n    it('should perform well on payroll summary queries', async () => {\n      const query = `\n        SELECT \n          COUNT(*) as total_employees,\n          COALESCE(SUM(pr.gross_pay), 0) as total_gross_pay,\n          COALESCE(SUM(pr.total_deductions), 0) as total_deductions,\n          COALESCE(SUM(pr.net_pay), 0) as total_net_pay,\n          COALESCE(AVG(pr.gross_pay), 0) as average_salary,\n          COUNT(CASE WHEN pr.status = 'processed' THEN 1 END) as processed_records,\n          COUNT(CASE WHEN pr.status = 'pending' THEN 1 END) as pending_records\n        FROM payroll_records pr\n        JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n        WHERE pp.id = $1\n      `;\n      const params = ['test-period-id'];\n\n      const result = await dbPerformanceTest.testQueryPerformance(query, params, 25);\n\n      console.log('\\n📊 Payroll Summary Query Performance:');\n      console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);\n      console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);\n      console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);\n\n      // Performance assertions\n      expect(result.averageTime).toBeLessThan(200); // Less than 200ms average\n      expect(result.maxTime).toBeLessThan(600); // Less than 600ms max\n    }, 30000);\n  });\n\n  describe('Department Queries Performance', () => {\n    it('should perform well on department statistics queries', async () => {\n      const query = `\n        SELECT \n          COUNT(*) as total,\n          COUNT(*) FILTER (WHERE d.is_active = true) as active,\n          COUNT(*) FILTER (WHERE d.department_head_user_id IS NOT NULL) as with_heads,\n          COUNT(*) FILTER (WHERE d.department_head_user_id IS NULL) as without_heads,\n          COUNT(e.id) as total_employees\n        FROM departments d\n        LEFT JOIN employees e ON d.id = e.department_id\n        WHERE d.is_active = true\n      `;\n\n      const result = await dbPerformanceTest.testQueryPerformance(query, [], 20);\n\n      console.log('\\n📊 Department Statistics Query Performance:');\n      console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);\n      console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);\n      console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);\n\n      // Performance assertions\n      expect(result.averageTime).toBeLessThan(100); // Less than 100ms average\n      expect(result.maxTime).toBeLessThan(300); // Less than 300ms max\n    }, 30000);\n\n    it('should perform well on concurrent department queries', async () => {\n      const query = `\n        SELECT \n          d.id,\n          d.name,\n          d.description,\n          d.is_active,\n          u.first_name as head_first_name,\n          u.last_name as head_last_name,\n          u.email as head_email\n        FROM departments d\n        LEFT JOIN users u ON d.department_head_user_id = u.id\n        WHERE d.is_active = true\n        ORDER BY d.name\n      `;\n\n      const result = await dbPerformanceTest.testConcurrentQueryPerformance(\n        query, \n        [], \n        15, // 15 concurrent queries\n        8   // 8 iterations\n      );\n\n      console.log('\\n📊 Concurrent Department Query Performance:');\n      console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);\n      console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);\n      console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);\n      console.log(`Queries Per Second: ${result.queriesPerSecond.toFixed(2)}`);\n\n      // Performance assertions\n      expect(result.averageTime).toBeLessThan(150); // Less than 150ms average\n      expect(result.queriesPerSecond).toBeGreaterThan(30); // At least 30 QPS\n    }, 30000);\n  });\n\n  describe('Complex Join Queries Performance', () => {\n    it('should perform well on complex employee dashboard queries', async () => {\n      const query = `\n        SELECT \n          e.id,\n          e.employee_id,\n          e.position,\n          e.base_salary,\n          u.first_name,\n          u.last_name,\n          u.email,\n          d.name as department_name,\n          dh.first_name as head_first_name,\n          dh.last_name as head_last_name,\n          COUNT(ar.id) as attendance_records_count,\n          COALESCE(SUM(ar.total_hours), 0) as total_hours_this_month\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        LEFT JOIN users dh ON d.department_head_user_id = dh.id\n        LEFT JOIN attendance_records ar ON e.id = ar.employee_id \n          AND ar.date >= DATE_TRUNC('month', CURRENT_DATE)\n        WHERE e.status = 'active'\n        GROUP BY e.id, e.employee_id, e.position, e.base_salary, \n                 u.first_name, u.last_name, u.email, d.name, \n                 dh.first_name, dh.last_name\n        ORDER BY u.last_name, u.first_name\n        LIMIT $1\n      `;\n      const params = [20];\n\n      const result = await dbPerformanceTest.testQueryPerformance(query, params, 15);\n\n      console.log('\\n📊 Complex Employee Dashboard Query Performance:');\n      console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);\n      console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);\n      console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);\n\n      // Performance assertions (more lenient for complex queries)\n      expect(result.averageTime).toBeLessThan(500); // Less than 500ms average\n      expect(result.maxTime).toBeLessThan(1500); // Less than 1.5s max\n    }, 45000);\n  });\n\n  describe('Database Connection Pool Performance', () => {\n    it('should handle high concurrent database connections', async () => {\n      const query = `SELECT 1 as test`;\n      const params: any[] = [];\n\n      const result = await dbPerformanceTest.testConcurrentQueryPerformance(\n        query, \n        params, \n        50, // 50 concurrent connections\n        20  // 20 iterations\n      );\n\n      console.log('\\n📊 Database Connection Pool Performance:');\n      console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);\n      console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);\n      console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);\n      console.log(`Queries Per Second: ${result.queriesPerSecond.toFixed(2)}`);\n\n      // Performance assertions\n      expect(result.averageTime).toBeLessThan(50); // Less than 50ms average\n      expect(result.queriesPerSecond).toBeGreaterThan(100); // At least 100 QPS\n      expect(result.maxTime).toBeLessThan(200); // Less than 200ms max\n    }, 30000);\n  });\n});\n\n"],"version":3}