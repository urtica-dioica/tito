4bb84d62a0ab262e319a1d75d5f1da97
"use strict";

/* istanbul ignore next */
function cov_lbjl9qlp2() {
  var path = "/home/kim/tito/server/src/controllers/hr/systemController.ts";
  var hash = "6b5da39ea03d03c603ece208872722caa8765cf5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/hr/systemController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "4": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 7,
          column: 66
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "6": {
        start: {
          line: 9,
          column: 18
        },
        end: {
          line: 9,
          column: 54
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "8": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 34,
          column: 13
        }
      },
      "9": {
        start: {
          line: 17,
          column: 34
        },
        end: {
          line: 17,
          column: 66
        }
      },
      "10": {
        start: {
          line: 18,
          column: 33
        },
        end: {
          line: 18,
          column: 77
        }
      },
      "11": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 24,
          column: 19
        }
      },
      "12": {
        start: {
          line: 27,
          column: 34
        },
        end: {
          line: 27,
          column: 66
        }
      },
      "13": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 109
        }
      },
      "14": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 33,
          column: 19
        }
      },
      "15": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 76,
          column: 10
        }
      },
      "16": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "17": {
        start: {
          line: 41,
          column: 34
        },
        end: {
          line: 41,
          column: 66
        }
      },
      "18": {
        start: {
          line: 42,
          column: 32
        },
        end: {
          line: 42,
          column: 42
        }
      },
      "19": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 50,
          column: 17
        }
      },
      "20": {
        start: {
          line: 44,
          column: 20
        },
        end: {
          line: 48,
          column: 23
        }
      },
      "21": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 27
        }
      },
      "22": {
        start: {
          line: 51,
          column: 32
        },
        end: {
          line: 51,
          column: 78
        }
      },
      "23": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 59,
          column: 17
        }
      },
      "24": {
        start: {
          line: 53,
          column: 20
        },
        end: {
          line: 57,
          column: 23
        }
      },
      "25": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 58,
          column: 27
        }
      },
      "26": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 65,
          column: 19
        }
      },
      "27": {
        start: {
          line: 68,
          column: 34
        },
        end: {
          line: 68,
          column: 66
        }
      },
      "28": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 108
        }
      },
      "29": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 74,
          column: 19
        }
      },
      "30": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 110,
          column: 10
        }
      },
      "31": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "32": {
        start: {
          line: 82,
          column: 34
        },
        end: {
          line: 82,
          column: 66
        }
      },
      "33": {
        start: {
          line: 83,
          column: 29
        },
        end: {
          line: 83,
          column: 37
        }
      },
      "34": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 92,
          column: 17
        }
      },
      "35": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 90,
          column: 23
        }
      },
      "36": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 91,
          column: 27
        }
      },
      "37": {
        start: {
          line: 93,
          column: 32
        },
        end: {
          line: 93,
          column: 82
        }
      },
      "38": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 99,
          column: 19
        }
      },
      "39": {
        start: {
          line: 102,
          column: 34
        },
        end: {
          line: 102,
          column: 66
        }
      },
      "40": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 111
        }
      },
      "41": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 108,
          column: 19
        }
      },
      "42": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 145,
          column: 10
        }
      },
      "43": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 144,
          column: 13
        }
      },
      "44": {
        start: {
          line: 116,
          column: 34
        },
        end: {
          line: 116,
          column: 66
        }
      },
      "45": {
        start: {
          line: 117,
          column: 32
        },
        end: {
          line: 117,
          column: 42
        }
      },
      "46": {
        start: {
          line: 118,
          column: 29
        },
        end: {
          line: 118,
          column: 37
        }
      },
      "47": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 126,
          column: 17
        }
      },
      "48": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 124,
          column: 23
        }
      },
      "49": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 125,
          column: 27
        }
      },
      "50": {
        start: {
          line: 127,
          column: 32
        },
        end: {
          line: 127,
          column: 87
        }
      },
      "51": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 133,
          column: 19
        }
      },
      "52": {
        start: {
          line: 136,
          column: 34
        },
        end: {
          line: 136,
          column: 66
        }
      },
      "53": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 137,
          column: 111
        }
      },
      "54": {
        start: {
          line: 138,
          column: 35
        },
        end: {
          line: 138,
          column: 91
        }
      },
      "55": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 143,
          column: 19
        }
      },
      "56": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 178,
          column: 10
        }
      },
      "57": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 177,
          column: 13
        }
      },
      "58": {
        start: {
          line: 151,
          column: 34
        },
        end: {
          line: 151,
          column: 66
        }
      },
      "59": {
        start: {
          line: 152,
          column: 32
        },
        end: {
          line: 152,
          column: 42
        }
      },
      "60": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 160,
          column: 17
        }
      },
      "61": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 158,
          column: 23
        }
      },
      "62": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 159,
          column: 27
        }
      },
      "63": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 66
        }
      },
      "64": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 166,
          column: 19
        }
      },
      "65": {
        start: {
          line: 169,
          column: 34
        },
        end: {
          line: 169,
          column: 66
        }
      },
      "66": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 111
        }
      },
      "67": {
        start: {
          line: 171,
          column: 35
        },
        end: {
          line: 171,
          column: 91
        }
      },
      "68": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 176,
          column: 19
        }
      },
      "69": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 202,
          column: 10
        }
      },
      "70": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "71": {
        start: {
          line: 184,
          column: 34
        },
        end: {
          line: 184,
          column: 66
        }
      },
      "72": {
        start: {
          line: 185,
          column: 30
        },
        end: {
          line: 185,
          column: 71
        }
      },
      "73": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 191,
          column: 19
        }
      },
      "74": {
        start: {
          line: 194,
          column: 34
        },
        end: {
          line: 194,
          column: 66
        }
      },
      "75": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 111
        }
      },
      "76": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 200,
          column: 19
        }
      },
      "77": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 226,
          column: 10
        }
      },
      "78": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "79": {
        start: {
          line: 208,
          column: 34
        },
        end: {
          line: 208,
          column: 66
        }
      },
      "80": {
        start: {
          line: 209,
          column: 31
        },
        end: {
          line: 209,
          column: 73
        }
      },
      "81": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 215,
          column: 19
        }
      },
      "82": {
        start: {
          line: 218,
          column: 34
        },
        end: {
          line: 218,
          column: 66
        }
      },
      "83": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 107
        }
      },
      "84": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 224,
          column: 19
        }
      },
      "85": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 65
        }
      },
      "86": {
        start: {
          line: 230,
          column: 0
        },
        end: {
          line: 230,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 15,
            column: 34
          }
        },
        loc: {
          start: {
            line: 15,
            column: 53
          },
          end: {
            line: 35,
            column: 9
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 39,
            column: 32
          },
          end: {
            line: 39,
            column: 33
          }
        },
        loc: {
          start: {
            line: 39,
            column: 52
          },
          end: {
            line: 76,
            column: 9
          }
        },
        line: 39
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 80,
            column: 35
          },
          end: {
            line: 80,
            column: 36
          }
        },
        loc: {
          start: {
            line: 80,
            column: 55
          },
          end: {
            line: 110,
            column: 9
          }
        },
        line: 80
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 114,
            column: 35
          },
          end: {
            line: 114,
            column: 36
          }
        },
        loc: {
          start: {
            line: 114,
            column: 55
          },
          end: {
            line: 145,
            column: 9
          }
        },
        line: 114
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 149,
            column: 35
          },
          end: {
            line: 149,
            column: 36
          }
        },
        loc: {
          start: {
            line: 149,
            column: 55
          },
          end: {
            line: 178,
            column: 9
          }
        },
        line: 149
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 182,
            column: 30
          },
          end: {
            line: 182,
            column: 31
          }
        },
        loc: {
          start: {
            line: 182,
            column: 50
          },
          end: {
            line: 202,
            column: 9
          }
        },
        line: 182
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 206,
            column: 31
          },
          end: {
            line: 206,
            column: 32
          }
        },
        loc: {
          start: {
            line: 206,
            column: 51
          },
          end: {
            line: 226,
            column: 9
          }
        },
        line: 206
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 29
          },
          end: {
            line: 31,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 29
          },
          end: {
            line: 31,
            column: 42
          }
        }, {
          start: {
            line: 31,
            column: 46
          },
          end: {
            line: 31,
            column: 77
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "5": {
        loc: {
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 29
          },
          end: {
            line: 72,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 29
          },
          end: {
            line: 72,
            column: 42
          }
        }, {
          start: {
            line: 72,
            column: 46
          },
          end: {
            line: 72,
            column: 76
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 92,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 92,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "8": {
        loc: {
          start: {
            line: 85,
            column: 20
          },
          end: {
            line: 85,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 20
          },
          end: {
            line: 85,
            column: 36
          }
        }, {
          start: {
            line: 85,
            column: 40
          },
          end: {
            line: 85,
            column: 58
          }
        }],
        line: 85
      },
      "9": {
        loc: {
          start: {
            line: 106,
            column: 29
          },
          end: {
            line: 106,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 29
          },
          end: {
            line: 106,
            column: 42
          }
        }, {
          start: {
            line: 106,
            column: 46
          },
          end: {
            line: 106,
            column: 79
          }
        }],
        line: 106
      },
      "10": {
        loc: {
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 126,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 126,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "11": {
        loc: {
          start: {
            line: 138,
            column: 35
          },
          end: {
            line: 138,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 82
          },
          end: {
            line: 138,
            column: 85
          }
        }, {
          start: {
            line: 138,
            column: 88
          },
          end: {
            line: 138,
            column: 91
          }
        }],
        line: 138
      },
      "12": {
        loc: {
          start: {
            line: 141,
            column: 29
          },
          end: {
            line: 141,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 141,
            column: 29
          },
          end: {
            line: 141,
            column: 42
          }
        }, {
          start: {
            line: 141,
            column: 46
          },
          end: {
            line: 141,
            column: 79
          }
        }],
        line: 141
      },
      "13": {
        loc: {
          start: {
            line: 153,
            column: 16
          },
          end: {
            line: 160,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 16
          },
          end: {
            line: 160,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "14": {
        loc: {
          start: {
            line: 171,
            column: 35
          },
          end: {
            line: 171,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 82
          },
          end: {
            line: 171,
            column: 85
          }
        }, {
          start: {
            line: 171,
            column: 88
          },
          end: {
            line: 171,
            column: 91
          }
        }],
        line: 171
      },
      "15": {
        loc: {
          start: {
            line: 174,
            column: 29
          },
          end: {
            line: 174,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 29
          },
          end: {
            line: 174,
            column: 42
          }
        }, {
          start: {
            line: 174,
            column: 46
          },
          end: {
            line: 174,
            column: 79
          }
        }],
        line: 174
      },
      "16": {
        loc: {
          start: {
            line: 198,
            column: 29
          },
          end: {
            line: 198,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 29
          },
          end: {
            line: 198,
            column: 42
          }
        }, {
          start: {
            line: 198,
            column: 46
          },
          end: {
            line: 198,
            column: 79
          }
        }],
        line: 198
      },
      "17": {
        loc: {
          start: {
            line: 222,
            column: 29
          },
          end: {
            line: 222,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 29
          },
          end: {
            line: 222,
            column: 42
          }
        }, {
          start: {
            line: 222,
            column: 46
          },
          end: {
            line: 222,
            column: 75
          }
        }],
        line: 222
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/hr/systemController.ts",
      mappings: ";;;;;;AACA,mEAAkH;AAClH,gEAAwC;AACxC,uDAAyD;AAEzD,MAAa,gBAAgB;IAG3B;QAIA;;WAEG;QACH,sBAAiB,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAiB,EAAE;YACvE,IAAI,CAAC;gBACH,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBAEpC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC;gBAE9D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,wCAAwC;oBACjD,IAAI,EAAE,QAAQ;oBACd,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBACpC,gBAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;gBAE9F,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAG,KAAe,CAAC,OAAO,IAAI,+BAA+B;oBACpE,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC;QAEF;;WAEG;QACH,qBAAgB,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAiB,EAAE;YACtE,IAAI,CAAC;gBACH,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBACpC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;gBAE3B,IAAI,CAAC,GAAG,EAAE,CAAC;oBACT,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBACnB,OAAO,EAAE,KAAK;wBACd,OAAO,EAAE,yBAAyB;wBAClC,SAAS;qBACV,CAAC,CAAC;oBACH,OAAO;gBACT,CAAC;gBAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAE/D,IAAI,CAAC,OAAO,EAAE,CAAC;oBACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBACnB,OAAO,EAAE,KAAK;wBACd,OAAO,EAAE,0BAA0B;wBACnC,SAAS;qBACV,CAAC,CAAC;oBACH,OAAO;gBACT,CAAC;gBAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,uCAAuC;oBAChD,IAAI,EAAE,OAAO;oBACb,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBACpC,gBAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;gBAE7F,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAG,KAAe,CAAC,OAAO,IAAI,8BAA8B;oBACnE,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC;QAEF;;WAEG;QACH,wBAAmB,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAiB,EAAE;YACzE,IAAI,CAAC;gBACH,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBACpC,MAAM,IAAI,GAA4B,GAAG,CAAC,IAAI,CAAC;gBAE/C,2BAA2B;gBAC3B,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;oBAC3C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBACnB,OAAO,EAAE,KAAK;wBACd,OAAO,EAAE,oCAAoC;wBAC7C,SAAS;qBACV,CAAC,CAAC;oBACH,OAAO;gBACT,CAAC;gBAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;gBAEnE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,qCAAqC;oBAC9C,IAAI,EAAE,OAAO;oBACb,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBACpC,gBAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;gBAEhG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAG,KAAe,CAAC,OAAO,IAAI,iCAAiC;oBACtE,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC;QAEF;;WAEG;QACH,wBAAmB,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAiB,EAAE;YACzE,IAAI,CAAC;gBACH,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBACpC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;gBAC3B,MAAM,IAAI,GAA4B,GAAG,CAAC,IAAI,CAAC;gBAE/C,IAAI,CAAC,GAAG,EAAE,CAAC;oBACT,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBACnB,OAAO,EAAE,KAAK;wBACd,OAAO,EAAE,yBAAyB;wBAClC,SAAS;qBACV,CAAC,CAAC;oBACH,OAAO;gBACT,CAAC;gBAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;gBAExE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,qCAAqC;oBAC9C,IAAI,EAAE,OAAO;oBACb,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBACpC,gBAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;gBAEhG,MAAM,UAAU,GAAI,KAAe,CAAC,OAAO,KAAK,0BAA0B,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;gBACvF,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,KAAK;oBACd,OAAO,EAAG,KAAe,CAAC,OAAO,IAAI,iCAAiC;oBACtE,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC;QAEF;;WAEG;QACH,wBAAmB,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAiB,EAAE;YACzE,IAAI,CAAC;gBACH,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBACpC,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;gBAE3B,IAAI,CAAC,GAAG,EAAE,CAAC;oBACT,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBACnB,OAAO,EAAE,KAAK;wBACd,OAAO,EAAE,yBAAyB;wBAClC,SAAS;qBACV,CAAC,CAAC;oBACH,OAAO;gBACT,CAAC;gBAED,MAAM,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;gBAElD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,qCAAqC;oBAC9C,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBACpC,gBAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;gBAEhG,MAAM,UAAU,GAAI,KAAe,CAAC,OAAO,KAAK,0BAA0B,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;gBACvF,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,KAAK;oBACd,OAAO,EAAG,KAAe,CAAC,OAAO,IAAI,iCAAiC;oBACtE,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC;QAEF;;WAEG;QACH,mBAAc,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAiB,EAAE;YACpE,IAAI,CAAC;gBACH,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBAEpC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;gBAExD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,0CAA0C;oBACnD,IAAI,EAAE,KAAK;oBACX,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBACpC,gBAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;gBAEhG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAG,KAAe,CAAC,OAAO,IAAI,iCAAiC;oBACtE,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC;QAEF;;WAEG;QACH,oBAAe,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAiB,EAAE;YACrE,IAAI,CAAC;gBACH,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBAEpC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC;gBAE1D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,sCAAsC;oBAC/C,IAAI,EAAE,MAAM;oBACZ,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,SAAS,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,CAAC;gBACpC,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;gBAE5F,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAG,KAAe,CAAC,OAAO,IAAI,6BAA6B;oBAClE,SAAS;iBACV,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC;QAlPA,IAAI,CAAC,aAAa,GAAG,IAAI,6BAAa,EAAE,CAAC;IAC3C,CAAC;CAkPF;AAvPD,4CAuPC",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/hr/systemController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { SystemService, CreateSystemSettingData, UpdateSystemSettingData } from '../../services/hr/systemService';\nimport logger from '../../utils/logger';\nimport { getRequestId } from '../../utils/types/express';\n\nexport class SystemController {\n  private systemService: SystemService;\n\n  constructor() {\n    this.systemService = new SystemService();\n  }\n\n  /**\n   * Get all system settings\n   */\n  getSystemSettings = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n\n      const settings = await this.systemService.getSystemSettings();\n\n      res.status(200).json({\n        success: true,\n        message: 'System settings retrieved successfully',\n        data: settings,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to get system settings', { error: (error as Error).message, requestId });\n      \n      res.status(400).json({\n        success: false,\n        message: (error as Error).message || 'Failed to get system settings',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Get system setting by key\n   */\n  getSystemSetting = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const { key } = req.params;\n\n      if (!key) {\n        res.status(400).json({\n          success: false,\n          message: 'Setting key is required',\n          requestId\n        });\n        return;\n      }\n\n      const setting = await this.systemService.getSystemSetting(key);\n\n      if (!setting) {\n        res.status(404).json({\n          success: false,\n          message: 'System setting not found',\n          requestId\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'System setting retrieved successfully',\n        data: setting,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to get system setting', { error: (error as Error).message, requestId });\n      \n      res.status(400).json({\n        success: false,\n        message: (error as Error).message || 'Failed to get system setting',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Create new system setting\n   */\n  createSystemSetting = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const data: CreateSystemSettingData = req.body;\n\n      // Validate required fields\n      if (!data.settingKey || !data.settingValue) {\n        res.status(400).json({\n          success: false,\n          message: 'Setting key and value are required',\n          requestId\n        });\n        return;\n      }\n\n      const setting = await this.systemService.createSystemSetting(data);\n\n      res.status(201).json({\n        success: true,\n        message: 'System setting created successfully',\n        data: setting,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to create system setting', { error: (error as Error).message, requestId });\n      \n      res.status(400).json({\n        success: false,\n        message: (error as Error).message || 'Failed to create system setting',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Update system setting\n   */\n  updateSystemSetting = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const { key } = req.params;\n      const data: UpdateSystemSettingData = req.body;\n\n      if (!key) {\n        res.status(400).json({\n          success: false,\n          message: 'Setting key is required',\n          requestId\n        });\n        return;\n      }\n\n      const setting = await this.systemService.updateSystemSetting(key, data);\n\n      res.status(200).json({\n        success: true,\n        message: 'System setting updated successfully',\n        data: setting,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to update system setting', { error: (error as Error).message, requestId });\n      \n      const statusCode = (error as Error).message === 'System setting not found' ? 404 : 400;\n      res.status(statusCode).json({\n        success: false,\n        message: (error as Error).message || 'Failed to update system setting',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Delete system setting\n   */\n  deleteSystemSetting = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const { key } = req.params;\n\n      if (!key) {\n        res.status(400).json({\n          success: false,\n          message: 'Setting key is required',\n          requestId\n        });\n        return;\n      }\n\n      await this.systemService.deleteSystemSetting(key);\n\n      res.status(200).json({\n        success: true,\n        message: 'System setting deleted successfully',\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to delete system setting', { error: (error as Error).message, requestId });\n      \n      const statusCode = (error as Error).message === 'System setting not found' ? 404 : 400;\n      res.status(statusCode).json({\n        success: false,\n        message: (error as Error).message || 'Failed to delete system setting',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Get system statistics\n   */\n  getSystemStats = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n\n      const stats = await this.systemService.getSystemStats();\n\n      res.status(200).json({\n        success: true,\n        message: 'System statistics retrieved successfully',\n        data: stats,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to get system statistics', { error: (error as Error).message, requestId });\n      \n      res.status(400).json({\n        success: false,\n        message: (error as Error).message || 'Failed to get system statistics',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Get system health status\n   */\n  getSystemHealth = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n\n      const health = await this.systemService.getSystemHealth();\n\n      res.status(200).json({\n        success: true,\n        message: 'System health retrieved successfully',\n        data: health,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to get system health', { error: (error as Error).message, requestId });\n      \n      res.status(400).json({\n        success: false,\n        message: (error as Error).message || 'Failed to get system health',\n        requestId\n      });\n    }\n  };\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6b5da39ea03d03c603ece208872722caa8765cf5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_lbjl9qlp2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_lbjl9qlp2();
var __importDefault =
/* istanbul ignore next */
(cov_lbjl9qlp2().s[0]++,
/* istanbul ignore next */
(cov_lbjl9qlp2().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_lbjl9qlp2().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_lbjl9qlp2().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_lbjl9qlp2().f[0]++;
  cov_lbjl9qlp2().s[1]++;
  return /* istanbul ignore next */(cov_lbjl9qlp2().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_lbjl9qlp2().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_lbjl9qlp2().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_lbjl9qlp2().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_lbjl9qlp2().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_lbjl9qlp2().s[3]++;
exports.SystemController = void 0;
const systemService_1 =
/* istanbul ignore next */
(cov_lbjl9qlp2().s[4]++, require("../../services/hr/systemService"));
const logger_1 =
/* istanbul ignore next */
(cov_lbjl9qlp2().s[5]++, __importDefault(require("../../utils/logger")));
const express_1 =
/* istanbul ignore next */
(cov_lbjl9qlp2().s[6]++, require("../../utils/types/express"));
class SystemController {
  constructor() {
    /* istanbul ignore next */
    cov_lbjl9qlp2().f[1]++;
    cov_lbjl9qlp2().s[7]++;
    /**
     * Get all system settings
     */
    this.getSystemSettings = async (req, res) => {
      /* istanbul ignore next */
      cov_lbjl9qlp2().f[2]++;
      cov_lbjl9qlp2().s[8]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[9]++, (0, express_1.getRequestId)(req));
        const settings =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[10]++, await this.systemService.getSystemSettings());
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[11]++;
        res.status(200).json({
          success: true,
          message: 'System settings retrieved successfully',
          data: settings,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[12]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[13]++;
        logger_1.default.error('Failed to get system settings', {
          error: error.message,
          requestId
        });
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[14]++;
        res.status(400).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[3][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[3][1]++, 'Failed to get system settings'),
          requestId
        });
      }
    };
    /**
     * Get system setting by key
     */
    /* istanbul ignore next */
    cov_lbjl9qlp2().s[15]++;
    this.getSystemSetting = async (req, res) => {
      /* istanbul ignore next */
      cov_lbjl9qlp2().f[3]++;
      cov_lbjl9qlp2().s[16]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[17]++, (0, express_1.getRequestId)(req));
        const {
          key
        } =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[18]++, req.params);
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[19]++;
        if (!key) {
          /* istanbul ignore next */
          cov_lbjl9qlp2().b[4][0]++;
          cov_lbjl9qlp2().s[20]++;
          res.status(400).json({
            success: false,
            message: 'Setting key is required',
            requestId
          });
          /* istanbul ignore next */
          cov_lbjl9qlp2().s[21]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_lbjl9qlp2().b[4][1]++;
        }
        const setting =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[22]++, await this.systemService.getSystemSetting(key));
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[23]++;
        if (!setting) {
          /* istanbul ignore next */
          cov_lbjl9qlp2().b[5][0]++;
          cov_lbjl9qlp2().s[24]++;
          res.status(404).json({
            success: false,
            message: 'System setting not found',
            requestId
          });
          /* istanbul ignore next */
          cov_lbjl9qlp2().s[25]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_lbjl9qlp2().b[5][1]++;
        }
        cov_lbjl9qlp2().s[26]++;
        res.status(200).json({
          success: true,
          message: 'System setting retrieved successfully',
          data: setting,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[27]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[28]++;
        logger_1.default.error('Failed to get system setting', {
          error: error.message,
          requestId
        });
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[29]++;
        res.status(400).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[6][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[6][1]++, 'Failed to get system setting'),
          requestId
        });
      }
    };
    /**
     * Create new system setting
     */
    /* istanbul ignore next */
    cov_lbjl9qlp2().s[30]++;
    this.createSystemSetting = async (req, res) => {
      /* istanbul ignore next */
      cov_lbjl9qlp2().f[4]++;
      cov_lbjl9qlp2().s[31]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[32]++, (0, express_1.getRequestId)(req));
        const data =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[33]++, req.body);
        // Validate required fields
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[34]++;
        if (
        /* istanbul ignore next */
        (cov_lbjl9qlp2().b[8][0]++, !data.settingKey) ||
        /* istanbul ignore next */
        (cov_lbjl9qlp2().b[8][1]++, !data.settingValue)) {
          /* istanbul ignore next */
          cov_lbjl9qlp2().b[7][0]++;
          cov_lbjl9qlp2().s[35]++;
          res.status(400).json({
            success: false,
            message: 'Setting key and value are required',
            requestId
          });
          /* istanbul ignore next */
          cov_lbjl9qlp2().s[36]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_lbjl9qlp2().b[7][1]++;
        }
        const setting =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[37]++, await this.systemService.createSystemSetting(data));
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[38]++;
        res.status(201).json({
          success: true,
          message: 'System setting created successfully',
          data: setting,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[39]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[40]++;
        logger_1.default.error('Failed to create system setting', {
          error: error.message,
          requestId
        });
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[41]++;
        res.status(400).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[9][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[9][1]++, 'Failed to create system setting'),
          requestId
        });
      }
    };
    /**
     * Update system setting
     */
    /* istanbul ignore next */
    cov_lbjl9qlp2().s[42]++;
    this.updateSystemSetting = async (req, res) => {
      /* istanbul ignore next */
      cov_lbjl9qlp2().f[5]++;
      cov_lbjl9qlp2().s[43]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[44]++, (0, express_1.getRequestId)(req));
        const {
          key
        } =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[45]++, req.params);
        const data =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[46]++, req.body);
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[47]++;
        if (!key) {
          /* istanbul ignore next */
          cov_lbjl9qlp2().b[10][0]++;
          cov_lbjl9qlp2().s[48]++;
          res.status(400).json({
            success: false,
            message: 'Setting key is required',
            requestId
          });
          /* istanbul ignore next */
          cov_lbjl9qlp2().s[49]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_lbjl9qlp2().b[10][1]++;
        }
        const setting =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[50]++, await this.systemService.updateSystemSetting(key, data));
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[51]++;
        res.status(200).json({
          success: true,
          message: 'System setting updated successfully',
          data: setting,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[52]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[53]++;
        logger_1.default.error('Failed to update system setting', {
          error: error.message,
          requestId
        });
        const statusCode =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[54]++, error.message === 'System setting not found' ?
        /* istanbul ignore next */
        (cov_lbjl9qlp2().b[11][0]++, 404) :
        /* istanbul ignore next */
        (cov_lbjl9qlp2().b[11][1]++, 400));
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[55]++;
        res.status(statusCode).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[12][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[12][1]++, 'Failed to update system setting'),
          requestId
        });
      }
    };
    /**
     * Delete system setting
     */
    /* istanbul ignore next */
    cov_lbjl9qlp2().s[56]++;
    this.deleteSystemSetting = async (req, res) => {
      /* istanbul ignore next */
      cov_lbjl9qlp2().f[6]++;
      cov_lbjl9qlp2().s[57]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[58]++, (0, express_1.getRequestId)(req));
        const {
          key
        } =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[59]++, req.params);
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[60]++;
        if (!key) {
          /* istanbul ignore next */
          cov_lbjl9qlp2().b[13][0]++;
          cov_lbjl9qlp2().s[61]++;
          res.status(400).json({
            success: false,
            message: 'Setting key is required',
            requestId
          });
          /* istanbul ignore next */
          cov_lbjl9qlp2().s[62]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_lbjl9qlp2().b[13][1]++;
        }
        cov_lbjl9qlp2().s[63]++;
        await this.systemService.deleteSystemSetting(key);
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[64]++;
        res.status(200).json({
          success: true,
          message: 'System setting deleted successfully',
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[65]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[66]++;
        logger_1.default.error('Failed to delete system setting', {
          error: error.message,
          requestId
        });
        const statusCode =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[67]++, error.message === 'System setting not found' ?
        /* istanbul ignore next */
        (cov_lbjl9qlp2().b[14][0]++, 404) :
        /* istanbul ignore next */
        (cov_lbjl9qlp2().b[14][1]++, 400));
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[68]++;
        res.status(statusCode).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[15][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[15][1]++, 'Failed to delete system setting'),
          requestId
        });
      }
    };
    /**
     * Get system statistics
     */
    /* istanbul ignore next */
    cov_lbjl9qlp2().s[69]++;
    this.getSystemStats = async (req, res) => {
      /* istanbul ignore next */
      cov_lbjl9qlp2().f[7]++;
      cov_lbjl9qlp2().s[70]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[71]++, (0, express_1.getRequestId)(req));
        const stats =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[72]++, await this.systemService.getSystemStats());
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[73]++;
        res.status(200).json({
          success: true,
          message: 'System statistics retrieved successfully',
          data: stats,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[74]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[75]++;
        logger_1.default.error('Failed to get system statistics', {
          error: error.message,
          requestId
        });
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[76]++;
        res.status(400).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[16][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[16][1]++, 'Failed to get system statistics'),
          requestId
        });
      }
    };
    /**
     * Get system health status
     */
    /* istanbul ignore next */
    cov_lbjl9qlp2().s[77]++;
    this.getSystemHealth = async (req, res) => {
      /* istanbul ignore next */
      cov_lbjl9qlp2().f[8]++;
      cov_lbjl9qlp2().s[78]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[79]++, (0, express_1.getRequestId)(req));
        const health =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[80]++, await this.systemService.getSystemHealth());
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[81]++;
        res.status(200).json({
          success: true,
          message: 'System health retrieved successfully',
          data: health,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_lbjl9qlp2().s[82]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[83]++;
        logger_1.default.error('Failed to get system health', {
          error: error.message,
          requestId
        });
        /* istanbul ignore next */
        cov_lbjl9qlp2().s[84]++;
        res.status(400).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[17][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_lbjl9qlp2().b[17][1]++, 'Failed to get system health'),
          requestId
        });
      }
    };
    /* istanbul ignore next */
    cov_lbjl9qlp2().s[85]++;
    this.systemService = new systemService_1.SystemService();
  }
}
/* istanbul ignore next */
cov_lbjl9qlp2().s[86]++;
exports.SystemController = SystemController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,