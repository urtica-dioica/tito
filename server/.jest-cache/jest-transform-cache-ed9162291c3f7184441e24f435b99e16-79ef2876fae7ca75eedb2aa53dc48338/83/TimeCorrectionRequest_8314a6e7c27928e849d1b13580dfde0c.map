{"version":3,"names":["database_1","cov_f2zyppeqh","s","require","TimeCorrectionRequestModel","createTimeCorrectionRequest","data","f","query","result","getPool","employeeId","requestDate","sessionType","b","requestedTime","reason","row","rows","requestedClockIn","requestedClockOut","findById","id","length","findByIdWithDetails","updateTimeCorrectionRequest","updateFields","updateValues","paramIndex","status","undefined","push","approvedBy","approvedAt","join","listTimeCorrectionRequests","params","page","limit","departmentId","startDate","endDate","search","sortBy","sortOrder","allowedSortColumns","validSortBy","includes","validSortOrder","toLowerCase","toUpperCase","offset","whereConditions","queryParams","whereClause","countQuery","countResult","total","parseInt","dataQuery","requests","totalPages","Math","ceil","getPendingRequestsForDepartmentHead","departmentHeadUserId","getTimeCorrectionRequestStats","stats","totalRequests","total_requests","pendingRequests","pending_requests","approvedRequests","approved_requests","rejectedRequests","rejected_requests","deleteTimeCorrectionRequest","rowCount","getTimeCorrectionRequestCount","count","exports","timeCorrectionRequestModel"],"sources":["/home/kim/tito/server/src/models/attendance/TimeCorrectionRequest.ts"],"sourcesContent":["import { getPool } from '../../config/database';\n\nexport interface TimeCorrectionRequest {\n  id: string;\n  employeeId: string;\n  requestDate: Date;\n  sessionType: 'morning_in' | 'morning_out' | 'afternoon_in' | 'afternoon_out';\n  requestedTime: Date;\n  reason: string;\n  status: 'pending' | 'approved' | 'rejected';\n  approvedBy: string | null;\n  approvedAt: Date | null;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface TimeCorrectionRequestWithDetails extends TimeCorrectionRequest {\n  employeeCode: string;\n  employeeName: string;\n  departmentName: string | null;\n  approverName: string | null;\n}\n\nexport interface CreateTimeCorrectionRequestData {\n  employeeId: string;\n  requestDate: Date;\n  sessionType: 'morning_in' | 'morning_out' | 'afternoon_in' | 'afternoon_out';\n  requestedTime: Date;\n  reason: string;\n}\n\nexport interface UpdateTimeCorrectionRequestData {\n  status?: 'pending' | 'approved' | 'rejected';\n  approvedBy?: string;\n  approvedAt?: Date;\n}\n\nexport interface TimeCorrectionRequestListParams {\n  page?: number | undefined;\n  limit?: number | undefined;\n  employeeId?: string | undefined;\n  departmentId?: string | undefined;\n  status?: 'pending' | 'approved' | 'rejected' | undefined;\n  sessionType?: 'morning_in' | 'morning_out' | 'afternoon_in' | 'afternoon_out' | undefined;\n  startDate?: Date | undefined;\n  endDate?: Date | undefined;\n  search?: string | undefined;\n  sortBy?: string | undefined;\n  sortOrder?: 'asc' | 'desc' | undefined;\n}\n\nexport class TimeCorrectionRequestModel {\n  /**\n   * Create a new time correction request\n   */\n  async createTimeCorrectionRequest(data: CreateTimeCorrectionRequestData): Promise<TimeCorrectionRequest> {\n    const query = `\n      INSERT INTO time_correction_requests (employee_id, correction_date, session_type, requested_clock_in, requested_clock_out, reason)\n      VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING \n        id,\n        employee_id as \"employeeId\",\n        correction_date as \"requestDate\",\n        session_type as \"sessionType\",\n        requested_clock_in as \"requestedClockIn\",\n        requested_clock_out as \"requestedClockOut\",\n        reason,\n        status,\n        approver_id as \"approvedBy\",\n        approved_at as \"approvedAt\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n    `;\n\n    const result = await getPool().query(query, [\n      data.employeeId,\n      data.requestDate,\n      data.sessionType,\n      (data.sessionType === 'morning_in' || data.sessionType === 'afternoon_in') ? data.requestedTime : null,\n      (data.sessionType === 'morning_out' || data.sessionType === 'afternoon_out') ? data.requestedTime : null,\n      data.reason\n    ]);\n\n    // Transform the result to match the interface\n    const row = result.rows[0];\n    return {\n      ...row,\n      requestedTime: (data.sessionType === 'morning_in' || data.sessionType === 'afternoon_in') ? row.requestedClockIn : row.requestedClockOut\n    };\n  }\n\n  /**\n   * Get time correction request by ID\n   */\n  async findById(id: string): Promise<TimeCorrectionRequest | null> {\n    const query = `\n      SELECT \n        id,\n        employee_id as \"employeeId\",\n        correction_date as \"requestDate\",\n        session_type as \"sessionType\",\n        requested_clock_in as \"requestedClockIn\",\n        requested_clock_out as \"requestedClockOut\",\n        reason,\n        status,\n        approver_id as \"approvedBy\",\n        approved_at as \"approvedAt\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM time_correction_requests\n      WHERE id = $1\n    `;\n\n    const result = await getPool().query(query, [id]);\n    if (result.rows.length === 0) {\n      return null;\n    }\n\n    // Transform the result to match the interface\n    const row = result.rows[0];\n    return {\n      ...row,\n      requestedTime: (row.sessionType === 'morning_in' || row.sessionType === 'afternoon_in') ? row.requestedClockIn : row.requestedClockOut\n    };\n  }\n\n  /**\n   * Get time correction request with details\n   */\n  async findByIdWithDetails(id: string): Promise<TimeCorrectionRequestWithDetails | null> {\n    const query = `\n      SELECT \n        tcr.id,\n        tcr.employee_id as \"employeeId\",\n        tcr.correction_date as \"requestDate\",\n        tcr.session_type as \"sessionType\",\n        CASE \n          WHEN tcr.session_type IN ('morning_in', 'afternoon_in') THEN tcr.requested_clock_in\n          WHEN tcr.session_type IN ('morning_out', 'afternoon_out') THEN tcr.requested_clock_out\n        END as \"requestedTime\",\n        tcr.reason,\n        tcr.status,\n        tcr.approver_id as \"approvedBy\",\n        tcr.approved_at as \"approvedAt\",\n        tcr.created_at as \"createdAt\",\n        tcr.updated_at as \"updatedAt\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\",\n        CONCAT(approver.first_name, ' ', approver.last_name) as \"approverName\"\n      FROM time_correction_requests tcr\n      JOIN employees e ON tcr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n              LEFT JOIN users approver ON tcr.approver_id = approver.id\n      WHERE tcr.id = $1\n    `;\n\n    const result = await getPool().query(query, [id]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Update time correction request\n   */\n  async updateTimeCorrectionRequest(id: string, data: UpdateTimeCorrectionRequestData): Promise<TimeCorrectionRequest | null> {\n    const updateFields: string[] = [];\n    const updateValues: any[] = [];\n    let paramIndex = 1;\n\n    if (data.status !== undefined) {\n      updateFields.push(`status = $${paramIndex}`);\n      updateValues.push(data.status);\n      paramIndex++;\n    }\n\n    if (data.approvedBy !== undefined) {\n              updateFields.push(`approver_id = $${paramIndex}`);\n      updateValues.push(data.approvedBy);\n      paramIndex++;\n    }\n\n    if (data.approvedAt !== undefined) {\n      updateFields.push(`approved_at = $${paramIndex}`);\n      updateValues.push(data.approvedAt);\n      paramIndex++;\n    }\n\n    if (updateFields.length === 0) {\n      return this.findById(id);\n    }\n\n    updateFields.push(`updated_at = CURRENT_TIMESTAMP`);\n    updateValues.push(id);\n\n    const query = `\n      UPDATE time_correction_requests \n      SET ${updateFields.join(', ')}\n      WHERE id = $${paramIndex}\n      RETURNING \n        id,\n        employee_id as \"employeeId\",\n        correction_date as \"requestDate\",\n        session_type as \"sessionType\",\n        requested_clock_in as \"requestedClockIn\",\n        requested_clock_out as \"requestedClockOut\",\n        reason,\n        status,\n        approver_id as \"approvedBy\",\n        approved_at as \"approvedAt\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n    `;\n\n    const result = await getPool().query(query, updateValues);\n    if (result.rows.length === 0) {\n      return null;\n    }\n\n    // Transform the result to match the interface\n    const row = result.rows[0];\n    return {\n      ...row,\n      requestedTime: (row.sessionType === 'morning_in' || row.sessionType === 'afternoon_in') ? row.requestedClockIn : row.requestedClockOut\n    };\n  }\n\n  /**\n   * List time correction requests with filtering and pagination\n   */\n  async listTimeCorrectionRequests(params: TimeCorrectionRequestListParams = {}): Promise<{\n    requests: TimeCorrectionRequestWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      employeeId,\n      departmentId,\n      status,\n      sessionType,\n      startDate,\n      endDate,\n      search,\n      sortBy = 'created_at',\n      sortOrder = 'desc'\n    } = params;\n\n    // Validate sortBy parameter to prevent SQL injection\n    const allowedSortColumns = ['created_at', 'updated_at', 'correction_date', 'status'];\n    const validSortBy = allowedSortColumns.includes(sortBy) ? sortBy : 'created_at';\n    \n    // Validate sortOrder parameter\n    const validSortOrder = ['asc', 'desc'].includes(sortOrder.toLowerCase()) ? sortOrder.toUpperCase() : 'DESC';\n\n    const offset = (page - 1) * limit;\n    const whereConditions: string[] = [];\n    const queryParams: any[] = [];\n    let paramIndex = 1;\n\n    // Build WHERE conditions\n    if (employeeId) {\n      whereConditions.push(`tcr.employee_id = $${paramIndex}`);\n      queryParams.push(employeeId);\n      paramIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`e.department_id = $${paramIndex}`);\n      queryParams.push(departmentId);\n      paramIndex++;\n    }\n\n    if (status) {\n      whereConditions.push(`tcr.status = $${paramIndex}`);\n      queryParams.push(status);\n      paramIndex++;\n    }\n\n    if (sessionType) {\n      whereConditions.push(`tcr.session_type = $${paramIndex}`);\n      queryParams.push(sessionType);\n      paramIndex++;\n    }\n\n    if (startDate) {\n      whereConditions.push(`tcr.correction_date >= $${paramIndex}`);\n      queryParams.push(startDate);\n      paramIndex++;\n    }\n\n    if (endDate) {\n      whereConditions.push(`tcr.correction_date <= $${paramIndex}`);\n      queryParams.push(endDate);\n      paramIndex++;\n    }\n\n    if (search) {\n      whereConditions.push(`(CONCAT(u.first_name, ' ', u.last_name) ILIKE $${paramIndex} OR e.employee_id ILIKE $${paramIndex} OR tcr.reason ILIKE $${paramIndex})`);\n      queryParams.push(`%${search}%`);\n      paramIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM time_correction_requests tcr\n      JOIN employees e ON tcr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n    `;\n\n    const countResult = await getPool().query(countQuery, queryParams);\n    const total = parseInt(countResult.rows[0].total);\n\n    // Data query\n    const dataQuery = `\n      SELECT \n        tcr.id,\n        tcr.employee_id as \"employeeId\",\n        tcr.correction_date as \"requestDate\",\n        tcr.session_type as \"sessionType\",\n        CASE \n          WHEN tcr.session_type IN ('morning_in', 'afternoon_in') THEN tcr.requested_clock_in\n          WHEN tcr.session_type IN ('morning_out', 'afternoon_out') THEN tcr.requested_clock_out\n        END as \"requestedTime\",\n        tcr.reason,\n        tcr.status,\n        tcr.approver_id as \"approvedBy\",\n        tcr.approved_at as \"approvedAt\",\n        tcr.created_at as \"createdAt\",\n        tcr.updated_at as \"updatedAt\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\",\n        CONCAT(approver.first_name, ' ', approver.last_name) as \"approverName\"\n      FROM time_correction_requests tcr\n      JOIN employees e ON tcr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n              LEFT JOIN users approver ON tcr.approver_id = approver.id\n      ${whereClause}\n      ORDER BY tcr.${validSortBy} ${validSortOrder}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    queryParams.push(limit, offset);\n    const result = await getPool().query(dataQuery, queryParams);\n\n    return {\n      requests: result.rows,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  /**\n   * Get pending requests for a department head\n   */\n  async getPendingRequestsForDepartmentHead(departmentHeadUserId: string): Promise<TimeCorrectionRequestWithDetails[]> {\n    const query = `\n      SELECT \n        tcr.id,\n        tcr.employee_id as \"employeeId\",\n        tcr.correction_date as \"requestDate\",\n        tcr.session_type as \"sessionType\",\n        CASE \n          WHEN tcr.session_type IN ('morning_in', 'afternoon_in') THEN tcr.requested_clock_in\n          WHEN tcr.session_type IN ('morning_out', 'afternoon_out') THEN tcr.requested_clock_out\n        END as \"requestedTime\",\n        tcr.reason,\n        tcr.status,\n        tcr.approver_id as \"approvedBy\",\n        tcr.approved_at as \"approvedAt\",\n        tcr.created_at as \"createdAt\",\n        tcr.updated_at as \"updatedAt\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\",\n        CONCAT(approver.first_name, ' ', approver.last_name) as \"approverName\"\n      FROM time_correction_requests tcr\n      JOIN employees e ON tcr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      JOIN departments d ON e.department_id = d.id\n              LEFT JOIN users approver ON tcr.approver_id = approver.id\n      WHERE d.department_head_user_id = $1\n        AND tcr.status = 'pending'\n      ORDER BY tcr.created_at ASC\n    `;\n\n    const result = await getPool().query(query, [departmentHeadUserId]);\n    return result.rows;\n  }\n\n  /**\n   * Get time correction request statistics\n   */\n  async getTimeCorrectionRequestStats(employeeId?: string, departmentId?: string): Promise<{\n    totalRequests: number;\n    pendingRequests: number;\n    approvedRequests: number;\n    rejectedRequests: number;\n  }> {\n    const whereConditions: string[] = [];\n    const queryParams: any[] = [];\n    let paramIndex = 1;\n\n    if (employeeId) {\n      whereConditions.push(`employee_id = $${paramIndex}`);\n      queryParams.push(employeeId);\n      paramIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`employee_id IN (SELECT id FROM employees WHERE department_id = $${paramIndex})`);\n      queryParams.push(departmentId);\n      paramIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    const query = `\n      SELECT \n        COUNT(*) as total_requests,\n        COUNT(*) FILTER (WHERE status = 'pending') as pending_requests,\n        COUNT(*) FILTER (WHERE status = 'approved') as approved_requests,\n        COUNT(*) FILTER (WHERE status = 'rejected') as rejected_requests\n      FROM time_correction_requests\n      ${whereClause}\n    `;\n\n    const result = await getPool().query(query, queryParams);\n    const stats = result.rows[0];\n\n    return {\n      totalRequests: parseInt(stats.total_requests) || 0,\n      pendingRequests: parseInt(stats.pending_requests) || 0,\n      approvedRequests: parseInt(stats.approved_requests) || 0,\n      rejectedRequests: parseInt(stats.rejected_requests) || 0\n    };\n  }\n\n  /**\n   * Delete time correction request\n   */\n  async deleteTimeCorrectionRequest(id: string): Promise<boolean> {\n    const query = 'DELETE FROM time_correction_requests WHERE id = $1';\n    const result = await getPool().query(query, [id]);\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  /**\n   * Get time correction request count\n   */\n  async getTimeCorrectionRequestCount(): Promise<number> {\n    const query = 'SELECT COUNT(*) as count FROM time_correction_requests';\n    const result = await getPool().query(query);\n    return parseInt(result.rows[0].count);\n  }\n}\n\nexport const timeCorrectionRequestModel = new TimeCorrectionRequestModel();"],"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","ignoreList":[]}