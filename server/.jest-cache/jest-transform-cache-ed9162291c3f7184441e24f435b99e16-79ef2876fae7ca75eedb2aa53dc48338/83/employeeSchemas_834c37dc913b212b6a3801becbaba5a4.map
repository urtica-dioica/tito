{"version":3,"names":["cov_1fgg36rfgj","actualCoverage","joi_1","s","__importDefault","require","exports","createEmployeeSchema","default","object","user_id","string","uuid","required","messages","department_id","allow","optional","position","min","max","employment_type","valid","hire_date","date","base_salary","number","positive","status","updateEmployeeSchema","employeeIdSchema","id","employeeUserIdSchema","employeeEmployeeIdSchema","employee_id","pattern","listEmployeesSchema","page","integer","limit","search"],"sources":["/home/kim/tito/server/src/utils/validation/employeeSchemas.ts"],"sourcesContent":["import Joi from 'joi';\n\nexport const createEmployeeSchema = Joi.object({\n  user_id: Joi.string().uuid().required().messages({\n    'string.guid': 'User ID must be a valid UUID',\n    'any.required': 'User ID is required'\n  }),\n  department_id: Joi.string().uuid().allow(null).optional().messages({\n    'string.guid': 'Department ID must be a valid UUID'\n  }),\n  position: Joi.string().min(2).max(100).required().messages({\n    'string.min': 'Position must be at least 2 characters long',\n    'string.max': 'Position must not exceed 100 characters',\n    'any.required': 'Position is required'\n  }),\n  employment_type: Joi.string().valid('regular', 'contractual', 'jo').required().messages({\n    'any.only': 'Employment type must be one of: regular, contractual, jo',\n    'any.required': 'Employment type is required'\n  }),\n  hire_date: Joi.date().max('now').required().messages({\n    'date.max': 'Hire date cannot be in the future',\n    'any.required': 'Hire date is required'\n  }),\n  base_salary: Joi.number().positive().min(10000).max(1000000).required().messages({\n    'number.base': 'Base salary must be a number',\n    'number.positive': 'Base salary must be positive',\n    'number.min': 'Base salary must be at least 10,000',\n    'number.max': 'Base salary cannot exceed 1,000,000',\n    'any.required': 'Base salary is required'\n  }),\n  status: Joi.string().valid('active', 'inactive', 'terminated', 'on_leave').default('active').messages({\n    'any.only': 'Status must be one of: active, inactive, terminated, on_leave'\n  })\n});\n\nexport const updateEmployeeSchema = Joi.object({\n  department_id: Joi.string().uuid().allow(null).optional().messages({\n    'string.guid': 'Department ID must be a valid UUID'\n  }),\n  position: Joi.string().min(2).max(100).optional().messages({\n    'string.min': 'Position must be at least 2 characters long',\n    'string.max': 'Position must not exceed 100 characters'\n  }),\n  employment_type: Joi.string().valid('regular', 'contractual', 'jo').optional().messages({\n    'any.only': 'Employment type must be one of: regular, contractual, jo'\n  }),\n  hire_date: Joi.date().max('now').optional().messages({\n    'date.max': 'Hire date cannot be in the future'\n  }),\n  base_salary: Joi.number().positive().min(10000).max(1000000).optional().messages({\n    'number.base': 'Base salary must be a number',\n    'number.positive': 'Base salary must be positive',\n    'number.min': 'Base salary must be at least 10,000',\n    'number.max': 'Base salary cannot exceed 1,000,000'\n  }),\n  status: Joi.string().valid('active', 'inactive', 'terminated', 'on_leave').optional().messages({\n    'any.only': 'Status must be one of: active, inactive, terminated, on_leave'\n  })\n});\n\nexport const employeeIdSchema = Joi.object({\n  id: Joi.string().uuid().required().messages({\n    'string.guid': 'Employee ID must be a valid UUID',\n    'any.required': 'Employee ID is required'\n  })\n});\n\nexport const employeeUserIdSchema = Joi.object({\n  user_id: Joi.string().uuid().required().messages({\n    'string.guid': 'User ID must be a valid UUID',\n    'any.required': 'User ID is required'\n  })\n});\n\nexport const employeeEmployeeIdSchema = Joi.object({\n  employee_id: Joi.string().pattern(/^EMP\\d{6}$/).required().messages({\n    'string.pattern.base': 'Employee ID must be in format EMP000000',\n    'any.required': 'Employee ID is required'\n  })\n});\n\nexport const listEmployeesSchema = Joi.object({\n  page: Joi.number().integer().min(1).default(1).messages({\n    'number.base': 'Page must be a number',\n    'number.integer': 'Page must be an integer',\n    'number.min': 'Page must be at least 1'\n  }),\n  limit: Joi.number().integer().min(1).max(100).default(20).messages({\n    'number.base': 'Limit must be a number',\n    'number.integer': 'Limit must be an integer',\n    'number.min': 'Limit must be at least 1',\n    'number.max': 'Limit cannot exceed 100'\n  }),\n  department_id: Joi.string().uuid().optional().messages({\n    'string.guid': 'Department ID must be a valid UUID'\n  }),\n  status: Joi.string().valid('active', 'inactive', 'terminated', 'on_leave').optional().messages({\n    'any.only': 'Status must be one of: active, inactive, terminated, on_leave'\n  }),\n  search: Joi.string().min(1).max(100).optional().messages({\n    'string.min': 'Search term must be at least 1 character',\n    'string.max': 'Search term cannot exceed 100 characters'\n  })\n}); "],"mappings":"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","ignoreList":[]}