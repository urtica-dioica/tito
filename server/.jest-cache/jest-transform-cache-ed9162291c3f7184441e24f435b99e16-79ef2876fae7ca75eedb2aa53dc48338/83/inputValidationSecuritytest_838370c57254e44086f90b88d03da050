2c31d6fc13b83ddffaabe849c24e91c6
"use strict";
/**
 * Input Validation Security Tests
 *
 * Comprehensive testing of input validation and sanitization, including:
 * - SQL injection prevention
 * - XSS prevention
 * - Input sanitization
 * - File upload security
 * - Data validation
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock axios for testing
const axios = {
    create: () => ({
        get: jest.fn(),
        post: jest.fn(),
        put: jest.fn(),
        delete: jest.fn(),
        patch: jest.fn(),
        interceptors: {
            request: { use: jest.fn() },
            response: { use: jest.fn() }
        }
    })
};
describe('Input Validation Security Tests', () => {
    let config;
    let authToken;
    beforeAll(async () => {
        config = {
            baseURL: process.env.TEST_BASE_URL || 'http://localhost:3000',
            timeout: 30000,
            maxRetries: 3,
            testUser: {
                username: 'testuser',
                password: 'TestPassword123!',
                role: 'employee'
            },
            adminUser: {
                username: 'admin',
                password: 'AdminPassword123!',
                role: 'hr'
            }
        };
        // securitySuite = new SecurityTestSuite(config);
        // Get authentication token
        try {
            const response = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                username: 'testuser',
                password: 'TestPassword123!'
            }, {
                timeout: 10000,
                validateStatus: () => true
            });
            if (response.status === 200) {
                authToken = response.data.token;
            }
        }
        catch (error) {
            console.warn('Could not obtain auth token, some tests may be skipped');
        }
    });
    describe('SQL Injection Prevention', () => {
        const sqlInjectionPayloads = [
            "' OR '1'='1",
            "'; DROP TABLE users; --",
            "' UNION SELECT * FROM users --",
            "1' OR 1=1 --",
            "admin'--",
            "' OR 1=1 LIMIT 1 --",
            "1'; INSERT INTO users VALUES ('hacker', 'password'); --",
            "' OR 'x'='x",
            "1' AND (SELECT COUNT(*) FROM users) > 0 --",
            "' OR EXISTS(SELECT * FROM users) --",
            "1'; UPDATE users SET password='hacked' WHERE id=1; --",
            "' OR 1=1 ORDER BY 1 --",
            "1'; DELETE FROM users WHERE id=1; --",
            "' OR 1=1 GROUP BY 1 --",
            "1'; CREATE TABLE hacked (id INT); --"
        ];
        it('should prevent SQL injection in login endpoint', async () => {
            for (const payload of sqlInjectionPayloads) {
                const response = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                    username: payload,
                    password: payload
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                // Should not return SQL error messages
                const responseText = JSON.stringify(response.data).toLowerCase();
                const sqlErrorIndicators = [
                    'sql syntax',
                    'mysql error',
                    'postgresql error',
                    'database error',
                    'syntax error',
                    'unexpected end',
                    'column does not exist',
                    'table does not exist',
                    'relation does not exist'
                ];
                const hasSQLError = sqlErrorIndicators.some(indicator => responseText.includes(indicator));
                expect(hasSQLError).toBe(false);
                console.log(`✅ SQL injection prevented for payload: ${payload.substring(0, 20)}...`);
            }
        }, 60000);
        it('should prevent SQL injection in search endpoints', async () => {
            if (!authToken) {
                console.log('⚠️ Skipping test - no auth token available');
                return;
            }
            const searchEndpoints = [
                '/api/v1/employees/search',
                '/api/v1/departments/search',
                '/api/v1/payroll/search'
            ];
            for (const endpoint of searchEndpoints) {
                for (const payload of sqlInjectionPayloads.slice(0, 5)) { // Test first 5 payloads
                    const response = await axios.create().post(`${config.baseURL}${endpoint}`, {
                        query: payload,
                        search: payload,
                        filter: payload
                    }, {
                        headers: {
                            'Authorization': `Bearer ${authToken}`
                        },
                        timeout: 10000,
                        validateStatus: () => true
                    });
                    // Should not return SQL error messages
                    const responseText = JSON.stringify(response.data).toLowerCase();
                    const sqlErrorIndicators = [
                        'sql syntax',
                        'mysql error',
                        'postgresql error',
                        'database error',
                        'syntax error'
                    ];
                    const hasSQLError = sqlErrorIndicators.some(indicator => responseText.includes(indicator));
                    expect(hasSQLError).toBe(false);
                    console.log(`✅ SQL injection prevented in ${endpoint} for payload: ${payload.substring(0, 20)}...`);
                }
            }
        }, 60000);
        it('should prevent SQL injection in filter parameters', async () => {
            if (!authToken) {
                console.log('⚠️ Skipping test - no auth token available');
                return;
            }
            const filterEndpoints = [
                '/api/v1/employees?department_id=1',
                '/api/v1/payroll?employee_id=1',
                '/api/v1/attendance?date=2024-01-01'
            ];
            for (const endpoint of filterEndpoints) {
                for (const payload of sqlInjectionPayloads.slice(0, 3)) { // Test first 3 payloads
                    const maliciousEndpoint = endpoint.replace(/=(\d+)/, `=${payload}`);
                    const response = await axios.create().get(`${config.baseURL}${maliciousEndpoint}`, {
                        headers: {
                            'Authorization': `Bearer ${authToken}`
                        },
                        timeout: 10000,
                        validateStatus: () => true
                    });
                    // Should not return SQL error messages
                    const responseText = JSON.stringify(response.data).toLowerCase();
                    const sqlErrorIndicators = [
                        'sql syntax',
                        'mysql error',
                        'postgresql error',
                        'database error'
                    ];
                    const hasSQLError = sqlErrorIndicators.some(indicator => responseText.includes(indicator));
                    expect(hasSQLError).toBe(false);
                    console.log(`✅ SQL injection prevented in filter parameter for ${endpoint}`);
                }
            }
        }, 60000);
    });
    describe('XSS Prevention', () => {
        const xssPayloads = [
            '<script>alert("XSS")</script>',
            '<img src=x onerror=alert("XSS")>',
            'javascript:alert("XSS")',
            '<svg onload=alert("XSS")>',
            '<iframe src="javascript:alert(\'XSS\')"></iframe>',
            '<body onload=alert("XSS")>',
            '<input onfocus=alert("XSS") autofocus>',
            '<select onfocus=alert("XSS") autofocus>',
            '<textarea onfocus=alert("XSS") autofocus>',
            '<keygen onfocus=alert("XSS") autofocus>',
            '<video onloadstart=alert("XSS")>',
            '<audio onloadstart=alert("XSS")>',
            '<details open ontoggle=alert("XSS")>',
            '<marquee onstart=alert("XSS")>',
            '<object data="javascript:alert(\'XSS\')">'
        ];
        it('should prevent XSS in employee data endpoints', async () => {
            if (!authToken) {
                console.log('⚠️ Skipping test - no auth token available');
                return;
            }
            const employeeEndpoints = [
                '/api/v1/employees',
                '/api/v1/employee/profile'
            ];
            for (const endpoint of employeeEndpoints) {
                for (const payload of xssPayloads.slice(0, 5)) { // Test first 5 payloads
                    const response = await axios.create().post(`${config.baseURL}${endpoint}`, {
                        name: payload,
                        description: payload,
                        notes: payload,
                        comment: payload
                    }, {
                        headers: {
                            'Authorization': `Bearer ${authToken}`
                        },
                        timeout: 10000,
                        validateStatus: () => true
                    });
                    // Check if payload is reflected in response without proper encoding
                    const responseText = JSON.stringify(response.data);
                    const hasUnencodedScript = responseText.includes('<script>') ||
                        responseText.includes('javascript:') ||
                        responseText.includes('onerror=') ||
                        responseText.includes('onload=');
                    expect(hasUnencodedScript).toBe(false);
                    console.log(`✅ XSS prevented in ${endpoint} for payload: ${payload.substring(0, 20)}...`);
                }
            }
        }, 60000);
        it('should prevent XSS in search and filter inputs', async () => {
            if (!authToken) {
                console.log('⚠️ Skipping test - no auth token available');
                return;
            }
            const searchEndpoints = [
                '/api/v1/employees/search',
                '/api/v1/departments/search',
                '/api/v1/payroll/search'
            ];
            for (const endpoint of searchEndpoints) {
                for (const payload of xssPayloads.slice(0, 3)) { // Test first 3 payloads
                    const response = await axios.create().post(`${config.baseURL}${endpoint}`, {
                        query: payload,
                        search: payload,
                        filter: payload
                    }, {
                        headers: {
                            'Authorization': `Bearer ${authToken}`
                        },
                        timeout: 10000,
                        validateStatus: () => true
                    });
                    // Check if payload is reflected in response without proper encoding
                    const responseText = JSON.stringify(response.data);
                    const hasUnencodedScript = responseText.includes('<script>') ||
                        responseText.includes('javascript:') ||
                        responseText.includes('onerror=');
                    expect(hasUnencodedScript).toBe(false);
                    console.log(`✅ XSS prevented in search ${endpoint} for payload: ${payload.substring(0, 20)}...`);
                }
            }
        }, 60000);
        it('should prevent XSS in URL parameters', async () => {
            if (!authToken) {
                console.log('⚠️ Skipping test - no auth token available');
                return;
            }
            for (const payload of xssPayloads.slice(0, 3)) { // Test first 3 payloads
                const encodedPayload = encodeURIComponent(payload);
                const response = await axios.create().get(`${config.baseURL}/api/v1/employees?search=${encodedPayload}`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    },
                    timeout: 10000,
                    validateStatus: () => true
                });
                // Check if payload is reflected in response without proper encoding
                const responseText = JSON.stringify(response.data);
                const hasUnencodedScript = responseText.includes('<script>') ||
                    responseText.includes('javascript:') ||
                    responseText.includes('onerror=');
                expect(hasUnencodedScript).toBe(false);
                console.log(`✅ XSS prevented in URL parameter for payload: ${payload.substring(0, 20)}...`);
            }
        }, 30000);
    });
    describe('Input Sanitization', () => {
        it('should sanitize HTML content in text fields', async () => {
            if (!authToken) {
                console.log('⚠️ Skipping test - no auth token available');
                return;
            }
            const htmlContent = [
                '<b>Bold text</b>',
                '<i>Italic text</i>',
                '<u>Underlined text</u>',
                '<a href="http://example.com">Link</a>',
                '<img src="image.jpg" alt="Image">',
                '<div>Div content</div>',
                '<span>Span content</span>',
                '<p>Paragraph content</p>'
            ];
            for (const html of htmlContent) {
                const response = await axios.create().post(`${config.baseURL}/api/v1/employees`, {
                    name: html,
                    description: html,
                    notes: html
                }, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    },
                    timeout: 10000,
                    validateStatus: () => true
                });
                if (response.status === 200 || response.status === 201) {
                    // Check if HTML tags are properly sanitized
                    const responseText = JSON.stringify(response.data);
                    const hasUnsanitizedHTML = responseText.includes('<b>') ||
                        responseText.includes('<i>') ||
                        responseText.includes('<u>') ||
                        responseText.includes('<a href=') ||
                        responseText.includes('<img src=');
                    // HTML should be either sanitized or rejected
                    expect(hasUnsanitizedHTML).toBe(false);
                    console.log(`✅ HTML content sanitized for: ${html.substring(0, 20)}...`);
                }
            }
        }, 30000);
        it('should validate and sanitize email addresses', async () => {
            const invalidEmails = [
                'invalid-email',
                '@example.com',
                'user@',
                'user..name@example.com',
                'user@.com',
                'user@example..com',
                'user name@example.com',
                'user@example com',
                'user@example.com.',
                'user@example.com,'
            ];
            for (const email of invalidEmails) {
                const response = await axios.create().post(`${config.baseURL}/api/v1/employees`, {
                    name: 'Test Employee',
                    email: email
                }, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    },
                    timeout: 10000,
                    validateStatus: () => true
                });
                // Should reject invalid email addresses
                expect([400, 422]).toContain(response.status);
                console.log(`✅ Invalid email rejected: ${email}`);
            }
        }, 30000);
        it('should validate and sanitize phone numbers', async () => {
            const invalidPhones = [
                'invalid-phone',
                '123',
                '123-456-789-0123-4567',
                'abc-def-ghij',
                '+1-800-INVALID',
                '123.456.789.0123',
                '123/456/7890',
                '123 456 789 0123'
            ];
            for (const phone of invalidPhones) {
                const response = await axios.create().post(`${config.baseURL}/api/v1/employees`, {
                    name: 'Test Employee',
                    phone: phone
                }, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    },
                    timeout: 10000,
                    validateStatus: () => true
                });
                // Should reject invalid phone numbers
                expect([400, 422]).toContain(response.status);
                console.log(`✅ Invalid phone rejected: ${phone}`);
            }
        }, 30000);
    });
    describe('File Upload Security', () => {
        it('should validate file types for uploads', async () => {
            if (!authToken) {
                console.log('⚠️ Skipping test - no auth token available');
                return;
            }
            const maliciousFiles = [
                { name: 'malicious.exe', type: 'application/x-executable' },
                { name: 'script.js', type: 'application/javascript' },
                { name: 'virus.bat', type: 'application/x-batch' },
                { name: 'backdoor.php', type: 'application/x-php' },
                { name: 'shell.sh', type: 'application/x-sh' }
            ];
            for (const file of maliciousFiles) {
                const formData = new FormData();
                formData.append('file', new Blob(['malicious content'], { type: file.type }), file.name);
                const response = await axios.create().post(`${config.baseURL}/api/v1/upload`, formData, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'multipart/form-data'
                    },
                    timeout: 10000,
                    validateStatus: () => true
                });
                // Should reject malicious file types
                expect([400, 415]).toContain(response.status);
                console.log(`✅ Malicious file type rejected: ${file.name}`);
            }
        }, 30000);
        it('should validate file sizes for uploads', async () => {
            if (!authToken) {
                console.log('⚠️ Skipping test - no auth token available');
                return;
            }
            // Create a large file (simulate with large content)
            const largeContent = 'x'.repeat(10 * 1024 * 1024); // 10MB
            const formData = new FormData();
            formData.append('file', new Blob([largeContent], { type: 'text/plain' }), 'large-file.txt');
            const response = await axios.create().post(`${config.baseURL}/api/v1/upload`, formData, {
                headers: {
                    'Authorization': `Bearer ${authToken}`,
                    'Content-Type': 'multipart/form-data'
                },
                timeout: 30000,
                validateStatus: () => true
            });
            // Should reject files that are too large
            expect([400, 413]).toContain(response.status);
            console.log('✅ Large file correctly rejected');
        }, 60000);
        it('should scan uploaded files for malicious content', async () => {
            if (!authToken) {
                console.log('⚠️ Skipping test - no auth token available');
                return;
            }
            const maliciousContent = [
                '<?php system($_GET["cmd"]); ?>',
                '<script>alert("XSS")</script>',
                '#!/bin/bash\nrm -rf /',
                'eval("malicious code")',
                'document.cookie="admin=true"'
            ];
            for (const content of maliciousContent) {
                const formData = new FormData();
                formData.append('file', new Blob([content], { type: 'text/plain' }), 'malicious.txt');
                const response = await axios.create().post(`${config.baseURL}/api/v1/upload`, formData, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'multipart/form-data'
                    },
                    timeout: 10000,
                    validateStatus: () => true
                });
                // Should reject files with malicious content
                expect([400, 422]).toContain(response.status);
                console.log(`✅ Malicious content rejected: ${content.substring(0, 20)}...`);
            }
        }, 30000);
    });
    describe('Data Validation', () => {
        it('should validate required fields', async () => {
            if (!authToken) {
                console.log('⚠️ Skipping test - no auth token available');
                return;
            }
            const requiredFields = [
                { name: 'name', value: '' },
                { name: 'email', value: '' },
                { name: 'position', value: '' },
                { name: 'department_id', value: null }
            ];
            for (const field of requiredFields) {
                const data = {
                    name: 'Test Employee',
                    email: 'test@example.com',
                    position: 'Developer',
                    department_id: 1
                };
                // Remove the required field
                delete data[field.name];
                const response = await axios.create().post(`${config.baseURL}/api/v1/employees`, data, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    },
                    timeout: 10000,
                    validateStatus: () => true
                });
                // Should reject requests with missing required fields
                expect([400, 422]).toContain(response.status);
                console.log(`✅ Missing required field rejected: ${field.name}`);
            }
        }, 30000);
        it('should validate data types', async () => {
            if (!authToken) {
                console.log('⚠️ Skipping test - no auth token available');
                return;
            }
            const invalidDataTypes = [
                { name: 'department_id', value: 'not-a-number' },
                { name: 'salary', value: 'not-a-number' },
                { name: 'hire_date', value: 'not-a-date' },
                { name: 'is_active', value: 'not-a-boolean' }
            ];
            for (const field of invalidDataTypes) {
                const data = {
                    name: 'Test Employee',
                    email: 'test@example.com',
                    position: 'Developer',
                    department_id: 1
                };
                data[field.name] = field.value;
                const response = await axios.create().post(`${config.baseURL}/api/v1/employees`, data, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    },
                    timeout: 10000,
                    validateStatus: () => true
                });
                // Should reject requests with invalid data types
                expect([400, 422]).toContain(response.status);
                console.log(`✅ Invalid data type rejected: ${field.name} = ${field.value}`);
            }
        }, 30000);
        it('should validate data ranges and constraints', async () => {
            if (!authToken) {
                console.log('⚠️ Skipping test - no auth token available');
                return;
            }
            const invalidRanges = [
                { name: 'salary', value: -1000 },
                { name: 'salary', value: 999999999 },
                { name: 'age', value: -5 },
                { name: 'age', value: 200 },
                { name: 'department_id', value: 0 },
                { name: 'department_id', value: -1 }
            ];
            for (const field of invalidRanges) {
                const data = {
                    name: 'Test Employee',
                    email: 'test@example.com',
                    position: 'Developer',
                    department_id: 1
                };
                data[field.name] = field.value;
                const response = await axios.create().post(`${config.baseURL}/api/v1/employees`, data, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    },
                    timeout: 10000,
                    validateStatus: () => true
                });
                // Should reject requests with invalid ranges
                expect([400, 422]).toContain(response.status);
                console.log(`✅ Invalid range rejected: ${field.name} = ${field.value}`);
            }
        }, 30000);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,