f1413ba2fccd6958cad2dc9c7cd65036
"use strict";

/* istanbul ignore next */
function cov_2hpyk0ixs2() {
  var path = "/home/kim/tito/server/src/middleware/auth/kioskAuth.ts";
  var hash = "43fc26f649dfb7e1008152092e3e40a6b021d21e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/middleware/auth/kioskAuth.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 80
        }
      },
      "2": {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 41
        }
      },
      "3": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 64
        }
      },
      "4": {
        start: {
          line: 9,
          column: 21
        },
        end: {
          line: 11,
          column: 1
        }
      },
      "5": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 38
        }
      },
      "6": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 93,
          column: 1
        }
      },
      "7": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "8": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "9": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 19
        }
      },
      "10": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 19
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "12": {
        start: {
          line: 29,
          column: 31
        },
        end: {
          line: 29,
          column: 40
        }
      },
      "13": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "14": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 37,
          column: 19
        }
      },
      "15": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 23
        }
      },
      "16": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 19
        }
      },
      "17": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 19
        }
      },
      "18": {
        start: {
          line: 44,
          column: 22
        },
        end: {
          line: 44,
          column: 82
        }
      },
      "19": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "20": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "21": {
        start: {
          line: 47,
          column: 31
        },
        end: {
          line: 47,
          column: 83
        }
      },
      "22": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 53,
          column: 17
        }
      },
      "23": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 49
        }
      },
      "24": {
        start: {
          line: 51,
          column: 20
        },
        end: {
          line: 51,
          column: 27
        }
      },
      "25": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 52,
          column: 27
        }
      },
      "26": {
        start: {
          line: 60,
          column: 28
        },
        end: {
          line: 60,
          column: 58
        }
      },
      "27": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "28": {
        start: {
          line: 63,
          column: 35
        },
        end: {
          line: 63,
          column: 79
        }
      },
      "29": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "30": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 70,
          column: 18
        }
      },
      "31": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 23
        }
      },
      "32": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 23
        }
      },
      "33": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "34": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 91,
          column: 11
        }
      },
      "35": {
        start: {
          line: 94,
          column: 0
        },
        end: {
          line: 94,
          column: 30
        }
      },
      "36": {
        start: {
          line: 98,
          column: 24
        },
        end: {
          line: 110,
          column: 1
        }
      },
      "37": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "38": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 106,
          column: 11
        }
      },
      "39": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 15
        }
      },
      "40": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 109,
          column: 11
        }
      },
      "41": {
        start: {
          line: 111,
          column: 0
        },
        end: {
          line: 111,
          column: 42
        }
      },
      "42": {
        start: {
          line: 115,
          column: 25
        },
        end: {
          line: 127,
          column: 1
        }
      },
      "43": {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 125,
          column: 5
        }
      },
      "44": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 123,
          column: 11
        }
      },
      "45": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "46": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 11
        }
      },
      "47": {
        start: {
          line: 128,
          column: 0
        },
        end: {
          line: 128,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 21
          },
          end: {
            line: 9,
            column: 22
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 44
          },
          end: {
            line: 93,
            column: 1
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 98,
            column: 24
          },
          end: {
            line: 98,
            column: 25
          }
        },
        loc: {
          start: {
            line: 98,
            column: 44
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 98
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 115,
            column: 25
          },
          end: {
            line: 115,
            column: 26
          }
        },
        loc: {
          start: {
            line: 115,
            column: 45
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 115
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 11
          },
          end: {
            line: 10,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 11
          },
          end: {
            line: 10,
            column: 24
          }
        }, {
          start: {
            line: 10,
            column: 28
          },
          end: {
            line: 10,
            column: 37
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 27,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 27,
            column: 37
          }
        }, {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 27,
            column: 61
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "5": {
        loc: {
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 23
          }
        }, {
          start: {
            line: 30,
            column: 27
          },
          end: {
            line: 30,
            column: 53
          }
        }],
        line: 30
      },
      "6": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "7": {
        loc: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 53,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 53,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "8": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "9": {
        loc: {
          start: {
            line: 63,
            column: 35
          },
          end: {
            line: 63,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 35
          },
          end: {
            line: 63,
            column: 73
          }
        }, {
          start: {
            line: 63,
            column: 77
          },
          end: {
            line: 63,
            column: 79
          }
        }],
        line: 63
      },
      "10": {
        loc: {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "11": {
        loc: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "12": {
        loc: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/middleware/auth/kioskAuth.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/middleware/auth/kioskAuth.ts"],
      sourcesContent: ["import { Request, Response, NextFunction } from 'express';\nimport { extractTokenFromHeader } from '../../config/jwt';\nimport { authService } from '../../services/auth/authService';\nimport { ApiResponse } from '../../utils/types/express';\n\n/**\n * Helper function to get request ID safely\n */\nconst getRequestId = (req: Request): string => {\n  return req.requestId || 'unknown';\n};\n\n/**\n * Kiosk authentication middleware - supports both JWT and kiosk API key authentication\n * For kiosk operations, we allow:\n * 1. Regular JWT authentication for logged-in users\n * 2. Kiosk API key authentication for kiosk devices\n * 3. Limited public access for QR verification\n */\nexport const kioskAuth = async (\n  req: Request,\n  res: Response<ApiResponse>,\n  next: NextFunction\n): Promise<void> => {\n  try {\n    // Handle CORS preflight requests\n    if (req.method === 'OPTIONS') {\n      next();\n      return;\n    }\n\n    // For QR verification, allow limited public access\n    if (req.path === '/verify-qr' && req.method === 'GET') {\n      // Still validate the request has a QR code parameter\n      const { qrCode } = req.query;\n      if (!qrCode || typeof qrCode !== 'string') {\n        res.status(400).json({\n          success: false,\n          message: 'QR code is required for verification',\n          error: 'MISSING_QR_CODE',\n          timestamp: new Date().toISOString(),\n          requestId: getRequestId(req)\n        });\n        return;\n      }\n      next();\n      return;\n    }\n\n    // Try JWT authentication first\n    const token = extractTokenFromHeader(req.headers.authorization);\n\n    if (token) {\n      try {\n        const result = await authService.validateToken(token);\n\n        if (result.success) {\n          // Set user info in request for authenticated users\n          req.user = result.data?.user;\n          next();\n          return;\n        }\n      } catch (error) {\n        // JWT validation failed, continue to kiosk auth\n      }\n    }\n\n    // Check for kiosk API key in headers\n    const kioskApiKey = req.headers['x-kiosk-api-key'] as string;\n\n    if (kioskApiKey) {\n      // Validate kiosk API key (this should be stored securely, e.g., in environment variables)\n      const validKioskKeys = process.env.KIOSK_API_KEYS?.split(',') || [];\n\n      if (validKioskKeys.includes(kioskApiKey)) {\n        // Set kiosk context in request\n        req.kioskContext = {\n          authenticated: true,\n          apiKey: kioskApiKey,\n          type: 'kiosk_device'\n        };\n        next();\n        return;\n      }\n    }\n\n    // If we reach here, authentication failed\n    res.status(401).json({\n      success: false,\n      message: 'Authentication required for kiosk operations',\n      error: 'AUTHENTICATION_REQUIRED',\n      timestamp: new Date().toISOString(),\n      requestId: getRequestId(req)\n    });\n\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: 'Authentication service error',\n      error: 'AUTH_SERVICE_ERROR',\n      timestamp: new Date().toISOString(),\n      requestId: getRequestId(req)\n    });\n  }\n};\n\n/**\n * Middleware to require authenticated user (not just kiosk device)\n */\nexport const requireUserAuth = (\n  req: Request,\n  res: Response<ApiResponse>,\n  next: NextFunction\n): void => {\n  if (!req.user) {\n    res.status(401).json({\n      success: false,\n      message: 'User authentication required',\n      error: 'USER_AUTH_REQUIRED',\n      timestamp: new Date().toISOString(),\n      requestId: getRequestId(req)\n    });\n    return;\n  }\n  next();\n};\n\n/**\n * Middleware to require kiosk device authentication\n */\nexport const requireKioskAuth = (\n  req: Request,\n  res: Response<ApiResponse>,\n  next: NextFunction\n): void => {\n  if (!req.kioskContext?.authenticated) {\n    res.status(401).json({\n      success: false,\n      message: 'Kiosk device authentication required',\n      error: 'KIOSK_AUTH_REQUIRED',\n      timestamp: new Date().toISOString(),\n      requestId: getRequestId(req)\n    });\n    return;\n  }\n  next();\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "43fc26f649dfb7e1008152092e3e40a6b021d21e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2hpyk0ixs2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2hpyk0ixs2();
cov_2hpyk0ixs2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2hpyk0ixs2().s[1]++;
exports.requireKioskAuth = exports.requireUserAuth = exports.kioskAuth = void 0;
const jwt_1 =
/* istanbul ignore next */
(cov_2hpyk0ixs2().s[2]++, require("../../config/jwt"));
const authService_1 =
/* istanbul ignore next */
(cov_2hpyk0ixs2().s[3]++, require("../../services/auth/authService"));
/**
 * Helper function to get request ID safely
 */
/* istanbul ignore next */
cov_2hpyk0ixs2().s[4]++;
const getRequestId = req => {
  /* istanbul ignore next */
  cov_2hpyk0ixs2().f[0]++;
  cov_2hpyk0ixs2().s[5]++;
  return /* istanbul ignore next */(cov_2hpyk0ixs2().b[0][0]++, req.requestId) ||
  /* istanbul ignore next */
  (cov_2hpyk0ixs2().b[0][1]++, 'unknown');
};
/**
 * Kiosk authentication middleware - supports both JWT and kiosk API key authentication
 * For kiosk operations, we allow:
 * 1. Regular JWT authentication for logged-in users
 * 2. Kiosk API key authentication for kiosk devices
 * 3. Limited public access for QR verification
 */
/* istanbul ignore next */
cov_2hpyk0ixs2().s[6]++;
const kioskAuth = async (req, res, next) => {
  /* istanbul ignore next */
  cov_2hpyk0ixs2().f[1]++;
  cov_2hpyk0ixs2().s[7]++;
  try {
    /* istanbul ignore next */
    cov_2hpyk0ixs2().s[8]++;
    // Handle CORS preflight requests
    if (req.method === 'OPTIONS') {
      /* istanbul ignore next */
      cov_2hpyk0ixs2().b[1][0]++;
      cov_2hpyk0ixs2().s[9]++;
      next();
      /* istanbul ignore next */
      cov_2hpyk0ixs2().s[10]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2hpyk0ixs2().b[1][1]++;
    }
    // For QR verification, allow limited public access
    cov_2hpyk0ixs2().s[11]++;
    if (
    /* istanbul ignore next */
    (cov_2hpyk0ixs2().b[3][0]++, req.path === '/verify-qr') &&
    /* istanbul ignore next */
    (cov_2hpyk0ixs2().b[3][1]++, req.method === 'GET')) {
      /* istanbul ignore next */
      cov_2hpyk0ixs2().b[2][0]++;
      // Still validate the request has a QR code parameter
      const {
        qrCode
      } =
      /* istanbul ignore next */
      (cov_2hpyk0ixs2().s[12]++, req.query);
      /* istanbul ignore next */
      cov_2hpyk0ixs2().s[13]++;
      if (
      /* istanbul ignore next */
      (cov_2hpyk0ixs2().b[5][0]++, !qrCode) ||
      /* istanbul ignore next */
      (cov_2hpyk0ixs2().b[5][1]++, typeof qrCode !== 'string')) {
        /* istanbul ignore next */
        cov_2hpyk0ixs2().b[4][0]++;
        cov_2hpyk0ixs2().s[14]++;
        res.status(400).json({
          success: false,
          message: 'QR code is required for verification',
          error: 'MISSING_QR_CODE',
          timestamp: new Date().toISOString(),
          requestId: getRequestId(req)
        });
        /* istanbul ignore next */
        cov_2hpyk0ixs2().s[15]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2hpyk0ixs2().b[4][1]++;
      }
      cov_2hpyk0ixs2().s[16]++;
      next();
      /* istanbul ignore next */
      cov_2hpyk0ixs2().s[17]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2hpyk0ixs2().b[2][1]++;
    }
    // Try JWT authentication first
    const token =
    /* istanbul ignore next */
    (cov_2hpyk0ixs2().s[18]++, (0, jwt_1.extractTokenFromHeader)(req.headers.authorization));
    /* istanbul ignore next */
    cov_2hpyk0ixs2().s[19]++;
    if (token) {
      /* istanbul ignore next */
      cov_2hpyk0ixs2().b[6][0]++;
      cov_2hpyk0ixs2().s[20]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_2hpyk0ixs2().s[21]++, await authService_1.authService.validateToken(token));
        /* istanbul ignore next */
        cov_2hpyk0ixs2().s[22]++;
        if (result.success) {
          /* istanbul ignore next */
          cov_2hpyk0ixs2().b[7][0]++;
          cov_2hpyk0ixs2().s[23]++;
          // Set user info in request for authenticated users
          req.user = result.data?.user;
          /* istanbul ignore next */
          cov_2hpyk0ixs2().s[24]++;
          next();
          /* istanbul ignore next */
          cov_2hpyk0ixs2().s[25]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_2hpyk0ixs2().b[7][1]++;
        }
      } catch (error) {
        // JWT validation failed, continue to kiosk auth
      }
    } else
    /* istanbul ignore next */
    {
      cov_2hpyk0ixs2().b[6][1]++;
    }
    // Check for kiosk API key in headers
    const kioskApiKey =
    /* istanbul ignore next */
    (cov_2hpyk0ixs2().s[26]++, req.headers['x-kiosk-api-key']);
    /* istanbul ignore next */
    cov_2hpyk0ixs2().s[27]++;
    if (kioskApiKey) {
      /* istanbul ignore next */
      cov_2hpyk0ixs2().b[8][0]++;
      // Validate kiosk API key (this should be stored securely, e.g., in environment variables)
      const validKioskKeys =
      /* istanbul ignore next */
      (cov_2hpyk0ixs2().s[28]++,
      /* istanbul ignore next */
      (cov_2hpyk0ixs2().b[9][0]++, process.env.KIOSK_API_KEYS?.split(',')) ||
      /* istanbul ignore next */
      (cov_2hpyk0ixs2().b[9][1]++, []));
      /* istanbul ignore next */
      cov_2hpyk0ixs2().s[29]++;
      if (validKioskKeys.includes(kioskApiKey)) {
        /* istanbul ignore next */
        cov_2hpyk0ixs2().b[10][0]++;
        cov_2hpyk0ixs2().s[30]++;
        // Set kiosk context in request
        req.kioskContext = {
          authenticated: true,
          apiKey: kioskApiKey,
          type: 'kiosk_device'
        };
        /* istanbul ignore next */
        cov_2hpyk0ixs2().s[31]++;
        next();
        /* istanbul ignore next */
        cov_2hpyk0ixs2().s[32]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2hpyk0ixs2().b[10][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2hpyk0ixs2().b[8][1]++;
    }
    // If we reach here, authentication failed
    cov_2hpyk0ixs2().s[33]++;
    res.status(401).json({
      success: false,
      message: 'Authentication required for kiosk operations',
      error: 'AUTHENTICATION_REQUIRED',
      timestamp: new Date().toISOString(),
      requestId: getRequestId(req)
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2hpyk0ixs2().s[34]++;
    res.status(500).json({
      success: false,
      message: 'Authentication service error',
      error: 'AUTH_SERVICE_ERROR',
      timestamp: new Date().toISOString(),
      requestId: getRequestId(req)
    });
  }
};
/* istanbul ignore next */
cov_2hpyk0ixs2().s[35]++;
exports.kioskAuth = kioskAuth;
/**
 * Middleware to require authenticated user (not just kiosk device)
 */
/* istanbul ignore next */
cov_2hpyk0ixs2().s[36]++;
const requireUserAuth = (req, res, next) => {
  /* istanbul ignore next */
  cov_2hpyk0ixs2().f[2]++;
  cov_2hpyk0ixs2().s[37]++;
  if (!req.user) {
    /* istanbul ignore next */
    cov_2hpyk0ixs2().b[11][0]++;
    cov_2hpyk0ixs2().s[38]++;
    res.status(401).json({
      success: false,
      message: 'User authentication required',
      error: 'USER_AUTH_REQUIRED',
      timestamp: new Date().toISOString(),
      requestId: getRequestId(req)
    });
    /* istanbul ignore next */
    cov_2hpyk0ixs2().s[39]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_2hpyk0ixs2().b[11][1]++;
  }
  cov_2hpyk0ixs2().s[40]++;
  next();
};
/* istanbul ignore next */
cov_2hpyk0ixs2().s[41]++;
exports.requireUserAuth = requireUserAuth;
/**
 * Middleware to require kiosk device authentication
 */
/* istanbul ignore next */
cov_2hpyk0ixs2().s[42]++;
const requireKioskAuth = (req, res, next) => {
  /* istanbul ignore next */
  cov_2hpyk0ixs2().f[3]++;
  cov_2hpyk0ixs2().s[43]++;
  if (!req.kioskContext?.authenticated) {
    /* istanbul ignore next */
    cov_2hpyk0ixs2().b[12][0]++;
    cov_2hpyk0ixs2().s[44]++;
    res.status(401).json({
      success: false,
      message: 'Kiosk device authentication required',
      error: 'KIOSK_AUTH_REQUIRED',
      timestamp: new Date().toISOString(),
      requestId: getRequestId(req)
    });
    /* istanbul ignore next */
    cov_2hpyk0ixs2().s[45]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_2hpyk0ixs2().b[12][1]++;
  }
  cov_2hpyk0ixs2().s[46]++;
  next();
};
/* istanbul ignore next */
cov_2hpyk0ixs2().s[47]++;
exports.requireKioskAuth = requireKioskAuth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,