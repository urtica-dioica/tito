6e430948d9f403a9bf6c86229725893d
"use strict";

/* istanbul ignore next */
function cov_o02dghz0s() {
  var path = "/home/kim/tito/server/src/utils/imageProcessor.ts";
  var hash = "cad0f06af1cb8a0251d9daf4963b9b08dfa93141";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/utils/imageProcessor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 32
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 58
        }
      },
      "5": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 47
        }
      },
      "6": {
        start: {
          line: 9,
          column: 22
        },
        end: {
          line: 9,
          column: 54
        }
      },
      "7": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "8": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 61
        }
      },
      "9": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 81
        }
      },
      "10": {
        start: {
          line: 29,
          column: 26
        },
        end: {
          line: 29,
          column: 72
        }
      },
      "11": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 30,
          column: 31
        }
      },
      "12": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 79
        }
      },
      "13": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "14": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 41,
          column: 13
        }
      },
      "15": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 61
        }
      },
      "16": {
        start: {
          line: 43,
          column: 28
        },
        end: {
          line: 43,
          column: 85
        }
      },
      "17": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "18": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 63
        }
      },
      "19": {
        start: {
          line: 47,
          column: 45
        },
        end: {
          line: 47,
          column: 52
        }
      },
      "20": {
        start: {
          line: 48,
          column: 29
        },
        end: {
          line: 48,
          column: 49
        }
      },
      "21": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "22": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 71
        }
      },
      "23": {
        start: {
          line: 54,
          column: 27
        },
        end: {
          line: 54,
          column: 59
        }
      },
      "24": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "25": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 101
        }
      },
      "26": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 41
        }
      },
      "27": {
        start: {
          line: 62,
          column: 29
        },
        end: {
          line: 62,
          column: 75
        }
      },
      "28": {
        start: {
          line: 63,
          column: 29
        },
        end: {
          line: 63,
          column: 75
        }
      },
      "29": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 65
        }
      },
      "30": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 70,
          column: 14
        }
      },
      "31": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 67
        }
      },
      "32": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 123
        }
      },
      "33": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "34": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 54
        }
      },
      "35": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 65
        }
      },
      "36": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "37": {
        start: {
          line: 94,
          column: 27
        },
        end: {
          line: 94,
          column: 70
        }
      },
      "38": {
        start: {
          line: 95,
          column: 29
        },
        end: {
          line: 95,
          column: 63
        }
      },
      "39": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 74
        }
      },
      "40": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 64
        }
      },
      "41": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 24
        }
      },
      "42": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 107,
          column: 66
        }
      },
      "43": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "44": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 36
        }
      },
      "45": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 35
        }
      },
      "46": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 36
        }
      },
      "47": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 36
        }
      },
      "48": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "49": {
        start: {
          line: 125,
          column: 34
        },
        end: {
          line: 125,
          column: 81
        }
      },
      "50": {
        start: {
          line: 126,
          column: 31
        },
        end: {
          line: 126,
          column: 41
        }
      },
      "51": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 69
        }
      },
      "52": {
        start: {
          line: 128,
          column: 26
        },
        end: {
          line: 128,
          column: 75
        }
      },
      "53": {
        start: {
          line: 129,
          column: 31
        },
        end: {
          line: 129,
          column: 32
        }
      },
      "54": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 139,
          column: 13
        }
      },
      "55": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 138,
          column: 17
        }
      },
      "56": {
        start: {
          line: 132,
          column: 37
        },
        end: {
          line: 132,
          column: 79
        }
      },
      "57": {
        start: {
          line: 133,
          column: 34
        },
        end: {
          line: 133,
          column: 73
        }
      },
      "58": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 137,
          column: 21
        }
      },
      "59": {
        start: {
          line: 135,
          column: 24
        },
        end: {
          line: 135,
          column: 63
        }
      },
      "60": {
        start: {
          line: 136,
          column: 24
        },
        end: {
          line: 136,
          column: 39
        }
      },
      "61": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 32
        }
      },
      "62": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 67
        }
      },
      "63": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 21
        }
      },
      "64": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "65": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "66": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 78
        }
      },
      "67": {
        start: {
          line: 155,
          column: 28
        },
        end: {
          line: 155,
          column: 85
        }
      },
      "68": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "69": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 80
        }
      },
      "70": {
        start: {
          line: 159,
          column: 45
        },
        end: {
          line: 159,
          column: 52
        }
      },
      "71": {
        start: {
          line: 160,
          column: 29
        },
        end: {
          line: 160,
          column: 49
        }
      },
      "72": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "73": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 88
        }
      },
      "74": {
        start: {
          line: 164,
          column: 27
        },
        end: {
          line: 164,
          column: 59
        }
      },
      "75": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "76": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 169,
          column: 18
        }
      },
      "77": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 175,
          column: 14
        }
      },
      "78": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 181,
          column: 14
        }
      },
      "79": {
        start: {
          line: 185,
          column: 0
        },
        end: {
          line: 185,
          column: 40
        }
      },
      "80": {
        start: {
          line: 186,
          column: 0
        },
        end: {
          line: 186,
          column: 61
        }
      },
      "81": {
        start: {
          line: 187,
          column: 0
        },
        end: {
          line: 187,
          column: 62
        }
      },
      "82": {
        start: {
          line: 188,
          column: 0
        },
        end: {
          line: 188,
          column: 86
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 53
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 73
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 45
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 80
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 50
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 92
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 41
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 106
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 37
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 123
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 43
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 150
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 39,
            column: 16
          },
          end: {
            line: 39,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 16
          },
          end: {
            line: 39,
            column: 27
          }
        }, {
          start: {
            line: 39,
            column: 31
          },
          end: {
            line: 39,
            column: 68
          }
        }],
        line: 39
      },
      "5": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "6": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "7": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "8": {
        loc: {
          start: {
            line: 74,
            column: 63
          },
          end: {
            line: 74,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 74,
            column: 88
          },
          end: {
            line: 74,
            column: 101
          }
        }, {
          start: {
            line: 74,
            column: 104
          },
          end: {
            line: 74,
            column: 119
          }
        }],
        line: 74
      },
      "9": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 109,
            column: 24
          }
        }, {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 111,
            column: 36
          }
        }, {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 113,
            column: 35
          }
        }, {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 115,
            column: 36
          }
        }, {
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 117,
            column: 36
          }
        }],
        line: 108
      },
      "10": {
        loc: {
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "11": {
        loc: {
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 137,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 137,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "12": {
        loc: {
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "13": {
        loc: {
          start: {
            line: 152,
            column: 16
          },
          end: {
            line: 152,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 16
          },
          end: {
            line: 152,
            column: 27
          }
        }, {
          start: {
            line: 152,
            column: 31
          },
          end: {
            line: 152,
            column: 68
          }
        }],
        line: 152
      },
      "14": {
        loc: {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "15": {
        loc: {
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "16": {
        loc: {
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "17": {
        loc: {
          start: {
            line: 180,
            column: 23
          },
          end: {
            line: 180,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 48
          },
          end: {
            line: 180,
            column: 61
          }
        }, {
          start: {
            line: 180,
            column: 64
          },
          end: {
            line: 180,
            column: 90
          }
        }],
        line: 180
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/utils/imageProcessor.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/utils/imageProcessor.ts"],
      sourcesContent: ["import fs from 'fs/promises';\nimport path from 'path';\nimport { config } from '../config/environment';\n\n/**\n * Image processing utility for handling selfie images\n */\nexport class ImageProcessor {\n  private static readonly UPLOAD_DIR = config.upload.path;\n  private static readonly MAX_SIZE = config.upload.maxSize;\n  private static readonly ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n\n  /**\n   * Ensure upload directory exists\n   */\n  private static async ensureUploadDir(): Promise<void> {\n    try {\n      await fs.access(this.UPLOAD_DIR);\n    } catch {\n      await fs.mkdir(this.UPLOAD_DIR, { recursive: true });\n    }\n  }\n\n  /**\n   * Generate unique filename for selfie image\n   */\n  private static generateFilename(employeeId: string, sessionType: string): string {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const extension = 'jpg'; // Default to jpg for selfies\n    return `selfie_${employeeId}_${sessionType}_${timestamp}.${extension}`;\n  }\n\n  /**\n   * Process and save base64 selfie image\n   */\n  static async processSelfieImage(\n    base64Data: string, \n    employeeId: string, \n    sessionType: string\n  ): Promise<{\n    filePath: string;\n    fileName: string;\n    fileSize: number;\n  }> {\n    try {\n      // Validate base64 data\n      if (!base64Data || !base64Data.startsWith('data:image/')) {\n        throw new Error('Invalid base64 image data');\n      }\n\n      // Extract image data and metadata\n      const matches = base64Data.match(/^data:image\\/([a-zA-Z]+);base64,(.+)$/);\n      if (!matches) {\n        throw new Error('Invalid base64 image format');\n      }\n\n      const [, imageType, imageData] = matches;\n      const mimeType = `image/${imageType}`;\n\n      // Validate image type\n      if (!this.ALLOWED_TYPES.includes(mimeType)) {\n        throw new Error(`Unsupported image type: ${mimeType}`);\n      }\n\n      // Convert base64 to buffer\n      const buffer = Buffer.from(imageData, 'base64');\n      \n      // Validate file size\n      if (buffer.length > this.MAX_SIZE) {\n        throw new Error(`Image size exceeds maximum allowed size of ${this.MAX_SIZE} bytes`);\n      }\n\n      // Ensure upload directory exists\n      await this.ensureUploadDir();\n\n      // Generate filename and file path\n      const fileName = this.generateFilename(employeeId, sessionType);\n      const filePath = path.join(this.UPLOAD_DIR, fileName);\n\n      // Save file\n      await fs.writeFile(filePath, buffer);\n\n      return {\n        filePath,\n        fileName,\n        fileSize: buffer.length\n      };\n    } catch (error) {\n      console.error('Error processing selfie image:', error);\n      throw new Error(`Failed to process selfie image: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Delete selfie image file\n   */\n  static async deleteSelfieImage(filePath: string): Promise<void> {\n    try {\n      await fs.unlink(filePath);\n    } catch (error) {\n      console.error('Error deleting selfie image:', error);\n      // Don't throw error for file deletion failures\n    }\n  }\n\n  /**\n   * Get selfie image as base64 (for API responses)\n   */\n  static async getSelfieImageAsBase64(filePath: string): Promise<string | null> {\n    try {\n      const buffer = await fs.readFile(filePath);\n      const mimeType = this.getMimeTypeFromPath(filePath);\n      return `data:${mimeType};base64,${buffer.toString('base64')}`;\n    } catch (error) {\n      console.error('Error reading selfie image:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get MIME type from file path\n   */\n  private static getMimeTypeFromPath(filePath: string): string {\n    const ext = path.extname(filePath).toLowerCase();\n    switch (ext) {\n      case '.jpg':\n      case '.jpeg':\n        return 'image/jpeg';\n      case '.png':\n        return 'image/png';\n      case '.webp':\n        return 'image/webp';\n      default:\n        return 'image/jpeg';\n    }\n  }\n\n  /**\n   * Clean up old selfie images based on retention policy\n   */\n  static async cleanupOldSelfies(): Promise<number> {\n    try {\n      const retentionDays = config.upload.selfieRetentionDays;\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n\n      const files = await fs.readdir(this.UPLOAD_DIR);\n      let deletedCount = 0;\n\n      for (const file of files) {\n        if (file.startsWith('selfie_')) {\n          const filePath = path.join(this.UPLOAD_DIR, file);\n          const stats = await fs.stat(filePath);\n          \n          if (stats.mtime < cutoffDate) {\n            await this.deleteSelfieImage(filePath);\n            deletedCount++;\n          }\n        }\n      }\n\n      return deletedCount;\n    } catch (error) {\n      console.error('Error cleaning up old selfies:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Validate base64 image data\n   */\n  static validateBase64Image(base64Data: string): {\n    isValid: boolean;\n    error?: string;\n    mimeType?: string;\n    size?: number;\n  } {\n    try {\n      if (!base64Data || !base64Data.startsWith('data:image/')) {\n        return { isValid: false, error: 'Invalid base64 image data' };\n      }\n\n      const matches = base64Data.match(/^data:image\\/([a-zA-Z]+);base64,(.+)$/);\n      if (!matches) {\n        return { isValid: false, error: 'Invalid base64 image format' };\n      }\n\n      const [, imageType, imageData] = matches;\n      const mimeType = `image/${imageType}`;\n\n      if (!this.ALLOWED_TYPES.includes(mimeType)) {\n        return { isValid: false, error: `Unsupported image type: ${mimeType}` };\n      }\n\n      const buffer = Buffer.from(imageData, 'base64');\n      if (buffer.length > this.MAX_SIZE) {\n        return { \n          isValid: false, \n          error: `Image size exceeds maximum allowed size of ${this.MAX_SIZE} bytes` \n        };\n      }\n\n      return {\n        isValid: true,\n        mimeType,\n        size: buffer.length\n      };\n    } catch (error) {\n      return { \n        isValid: false, \n        error: error instanceof Error ? error.message : 'Unknown validation error' \n      };\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cad0f06af1cb8a0251d9daf4963b9b08dfa93141"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_o02dghz0s = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_o02dghz0s();
var __importDefault =
/* istanbul ignore next */
(cov_o02dghz0s().s[0]++,
/* istanbul ignore next */
(cov_o02dghz0s().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_o02dghz0s().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_o02dghz0s().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_o02dghz0s().f[0]++;
  cov_o02dghz0s().s[1]++;
  return /* istanbul ignore next */(cov_o02dghz0s().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_o02dghz0s().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_o02dghz0s().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_o02dghz0s().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_o02dghz0s().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_o02dghz0s().s[3]++;
exports.ImageProcessor = void 0;
const promises_1 =
/* istanbul ignore next */
(cov_o02dghz0s().s[4]++, __importDefault(require("fs/promises")));
const path_1 =
/* istanbul ignore next */
(cov_o02dghz0s().s[5]++, __importDefault(require("path")));
const environment_1 =
/* istanbul ignore next */
(cov_o02dghz0s().s[6]++, require("../config/environment"));
/**
 * Image processing utility for handling selfie images
 */
class ImageProcessor {
  /**
   * Ensure upload directory exists
   */
  static async ensureUploadDir() {
    /* istanbul ignore next */
    cov_o02dghz0s().f[1]++;
    cov_o02dghz0s().s[7]++;
    try {
      /* istanbul ignore next */
      cov_o02dghz0s().s[8]++;
      await promises_1.default.access(this.UPLOAD_DIR);
    } catch {
      /* istanbul ignore next */
      cov_o02dghz0s().s[9]++;
      await promises_1.default.mkdir(this.UPLOAD_DIR, {
        recursive: true
      });
    }
  }
  /**
   * Generate unique filename for selfie image
   */
  static generateFilename(employeeId, sessionType) {
    /* istanbul ignore next */
    cov_o02dghz0s().f[2]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_o02dghz0s().s[10]++, new Date().toISOString().replace(/[:.]/g, '-'));
    const extension =
    /* istanbul ignore next */
    (cov_o02dghz0s().s[11]++, 'jpg'); // Default to jpg for selfies
    /* istanbul ignore next */
    cov_o02dghz0s().s[12]++;
    return `selfie_${employeeId}_${sessionType}_${timestamp}.${extension}`;
  }
  /**
   * Process and save base64 selfie image
   */
  static async processSelfieImage(base64Data, employeeId, sessionType) {
    /* istanbul ignore next */
    cov_o02dghz0s().f[3]++;
    cov_o02dghz0s().s[13]++;
    try {
      /* istanbul ignore next */
      cov_o02dghz0s().s[14]++;
      // Validate base64 data
      if (
      /* istanbul ignore next */
      (cov_o02dghz0s().b[4][0]++, !base64Data) ||
      /* istanbul ignore next */
      (cov_o02dghz0s().b[4][1]++, !base64Data.startsWith('data:image/'))) {
        /* istanbul ignore next */
        cov_o02dghz0s().b[3][0]++;
        cov_o02dghz0s().s[15]++;
        throw new Error('Invalid base64 image data');
      } else
      /* istanbul ignore next */
      {
        cov_o02dghz0s().b[3][1]++;
      }
      // Extract image data and metadata
      const matches =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[16]++, base64Data.match(/^data:image\/([a-zA-Z]+);base64,(.+)$/));
      /* istanbul ignore next */
      cov_o02dghz0s().s[17]++;
      if (!matches) {
        /* istanbul ignore next */
        cov_o02dghz0s().b[5][0]++;
        cov_o02dghz0s().s[18]++;
        throw new Error('Invalid base64 image format');
      } else
      /* istanbul ignore next */
      {
        cov_o02dghz0s().b[5][1]++;
      }
      const [, imageType, imageData] =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[19]++, matches);
      const mimeType =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[20]++, `image/${imageType}`);
      // Validate image type
      /* istanbul ignore next */
      cov_o02dghz0s().s[21]++;
      if (!this.ALLOWED_TYPES.includes(mimeType)) {
        /* istanbul ignore next */
        cov_o02dghz0s().b[6][0]++;
        cov_o02dghz0s().s[22]++;
        throw new Error(`Unsupported image type: ${mimeType}`);
      } else
      /* istanbul ignore next */
      {
        cov_o02dghz0s().b[6][1]++;
      }
      // Convert base64 to buffer
      const buffer =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[23]++, Buffer.from(imageData, 'base64'));
      // Validate file size
      /* istanbul ignore next */
      cov_o02dghz0s().s[24]++;
      if (buffer.length > this.MAX_SIZE) {
        /* istanbul ignore next */
        cov_o02dghz0s().b[7][0]++;
        cov_o02dghz0s().s[25]++;
        throw new Error(`Image size exceeds maximum allowed size of ${this.MAX_SIZE} bytes`);
      } else
      /* istanbul ignore next */
      {
        cov_o02dghz0s().b[7][1]++;
      }
      // Ensure upload directory exists
      cov_o02dghz0s().s[26]++;
      await this.ensureUploadDir();
      // Generate filename and file path
      const fileName =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[27]++, this.generateFilename(employeeId, sessionType));
      const filePath =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[28]++, path_1.default.join(this.UPLOAD_DIR, fileName));
      // Save file
      /* istanbul ignore next */
      cov_o02dghz0s().s[29]++;
      await promises_1.default.writeFile(filePath, buffer);
      /* istanbul ignore next */
      cov_o02dghz0s().s[30]++;
      return {
        filePath,
        fileName,
        fileSize: buffer.length
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_o02dghz0s().s[31]++;
      console.error('Error processing selfie image:', error);
      /* istanbul ignore next */
      cov_o02dghz0s().s[32]++;
      throw new Error(`Failed to process selfie image: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_o02dghz0s().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_o02dghz0s().b[8][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Delete selfie image file
   */
  static async deleteSelfieImage(filePath) {
    /* istanbul ignore next */
    cov_o02dghz0s().f[4]++;
    cov_o02dghz0s().s[33]++;
    try {
      /* istanbul ignore next */
      cov_o02dghz0s().s[34]++;
      await promises_1.default.unlink(filePath);
    } catch (error) {
      /* istanbul ignore next */
      cov_o02dghz0s().s[35]++;
      console.error('Error deleting selfie image:', error);
      // Don't throw error for file deletion failures
    }
  }
  /**
   * Get selfie image as base64 (for API responses)
   */
  static async getSelfieImageAsBase64(filePath) {
    /* istanbul ignore next */
    cov_o02dghz0s().f[5]++;
    cov_o02dghz0s().s[36]++;
    try {
      const buffer =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[37]++, await promises_1.default.readFile(filePath));
      const mimeType =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[38]++, this.getMimeTypeFromPath(filePath));
      /* istanbul ignore next */
      cov_o02dghz0s().s[39]++;
      return `data:${mimeType};base64,${buffer.toString('base64')}`;
    } catch (error) {
      /* istanbul ignore next */
      cov_o02dghz0s().s[40]++;
      console.error('Error reading selfie image:', error);
      /* istanbul ignore next */
      cov_o02dghz0s().s[41]++;
      return null;
    }
  }
  /**
   * Get MIME type from file path
   */
  static getMimeTypeFromPath(filePath) {
    /* istanbul ignore next */
    cov_o02dghz0s().f[6]++;
    const ext =
    /* istanbul ignore next */
    (cov_o02dghz0s().s[42]++, path_1.default.extname(filePath).toLowerCase());
    /* istanbul ignore next */
    cov_o02dghz0s().s[43]++;
    switch (ext) {
      case '.jpg':
        /* istanbul ignore next */
        cov_o02dghz0s().b[9][0]++;
      case '.jpeg':
        /* istanbul ignore next */
        cov_o02dghz0s().b[9][1]++;
        cov_o02dghz0s().s[44]++;
        return 'image/jpeg';
      case '.png':
        /* istanbul ignore next */
        cov_o02dghz0s().b[9][2]++;
        cov_o02dghz0s().s[45]++;
        return 'image/png';
      case '.webp':
        /* istanbul ignore next */
        cov_o02dghz0s().b[9][3]++;
        cov_o02dghz0s().s[46]++;
        return 'image/webp';
      default:
        /* istanbul ignore next */
        cov_o02dghz0s().b[9][4]++;
        cov_o02dghz0s().s[47]++;
        return 'image/jpeg';
    }
  }
  /**
   * Clean up old selfie images based on retention policy
   */
  static async cleanupOldSelfies() {
    /* istanbul ignore next */
    cov_o02dghz0s().f[7]++;
    cov_o02dghz0s().s[48]++;
    try {
      const retentionDays =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[49]++, environment_1.config.upload.selfieRetentionDays);
      const cutoffDate =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[50]++, new Date());
      /* istanbul ignore next */
      cov_o02dghz0s().s[51]++;
      cutoffDate.setDate(cutoffDate.getDate() - retentionDays);
      const files =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[52]++, await promises_1.default.readdir(this.UPLOAD_DIR));
      let deletedCount =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[53]++, 0);
      /* istanbul ignore next */
      cov_o02dghz0s().s[54]++;
      for (const file of files) {
        /* istanbul ignore next */
        cov_o02dghz0s().s[55]++;
        if (file.startsWith('selfie_')) {
          /* istanbul ignore next */
          cov_o02dghz0s().b[10][0]++;
          const filePath =
          /* istanbul ignore next */
          (cov_o02dghz0s().s[56]++, path_1.default.join(this.UPLOAD_DIR, file));
          const stats =
          /* istanbul ignore next */
          (cov_o02dghz0s().s[57]++, await promises_1.default.stat(filePath));
          /* istanbul ignore next */
          cov_o02dghz0s().s[58]++;
          if (stats.mtime < cutoffDate) {
            /* istanbul ignore next */
            cov_o02dghz0s().b[11][0]++;
            cov_o02dghz0s().s[59]++;
            await this.deleteSelfieImage(filePath);
            /* istanbul ignore next */
            cov_o02dghz0s().s[60]++;
            deletedCount++;
          } else
          /* istanbul ignore next */
          {
            cov_o02dghz0s().b[11][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_o02dghz0s().b[10][1]++;
        }
      }
      /* istanbul ignore next */
      cov_o02dghz0s().s[61]++;
      return deletedCount;
    } catch (error) {
      /* istanbul ignore next */
      cov_o02dghz0s().s[62]++;
      console.error('Error cleaning up old selfies:', error);
      /* istanbul ignore next */
      cov_o02dghz0s().s[63]++;
      return 0;
    }
  }
  /**
   * Validate base64 image data
   */
  static validateBase64Image(base64Data) {
    /* istanbul ignore next */
    cov_o02dghz0s().f[8]++;
    cov_o02dghz0s().s[64]++;
    try {
      /* istanbul ignore next */
      cov_o02dghz0s().s[65]++;
      if (
      /* istanbul ignore next */
      (cov_o02dghz0s().b[13][0]++, !base64Data) ||
      /* istanbul ignore next */
      (cov_o02dghz0s().b[13][1]++, !base64Data.startsWith('data:image/'))) {
        /* istanbul ignore next */
        cov_o02dghz0s().b[12][0]++;
        cov_o02dghz0s().s[66]++;
        return {
          isValid: false,
          error: 'Invalid base64 image data'
        };
      } else
      /* istanbul ignore next */
      {
        cov_o02dghz0s().b[12][1]++;
      }
      const matches =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[67]++, base64Data.match(/^data:image\/([a-zA-Z]+);base64,(.+)$/));
      /* istanbul ignore next */
      cov_o02dghz0s().s[68]++;
      if (!matches) {
        /* istanbul ignore next */
        cov_o02dghz0s().b[14][0]++;
        cov_o02dghz0s().s[69]++;
        return {
          isValid: false,
          error: 'Invalid base64 image format'
        };
      } else
      /* istanbul ignore next */
      {
        cov_o02dghz0s().b[14][1]++;
      }
      const [, imageType, imageData] =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[70]++, matches);
      const mimeType =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[71]++, `image/${imageType}`);
      /* istanbul ignore next */
      cov_o02dghz0s().s[72]++;
      if (!this.ALLOWED_TYPES.includes(mimeType)) {
        /* istanbul ignore next */
        cov_o02dghz0s().b[15][0]++;
        cov_o02dghz0s().s[73]++;
        return {
          isValid: false,
          error: `Unsupported image type: ${mimeType}`
        };
      } else
      /* istanbul ignore next */
      {
        cov_o02dghz0s().b[15][1]++;
      }
      const buffer =
      /* istanbul ignore next */
      (cov_o02dghz0s().s[74]++, Buffer.from(imageData, 'base64'));
      /* istanbul ignore next */
      cov_o02dghz0s().s[75]++;
      if (buffer.length > this.MAX_SIZE) {
        /* istanbul ignore next */
        cov_o02dghz0s().b[16][0]++;
        cov_o02dghz0s().s[76]++;
        return {
          isValid: false,
          error: `Image size exceeds maximum allowed size of ${this.MAX_SIZE} bytes`
        };
      } else
      /* istanbul ignore next */
      {
        cov_o02dghz0s().b[16][1]++;
      }
      cov_o02dghz0s().s[77]++;
      return {
        isValid: true,
        mimeType,
        size: buffer.length
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_o02dghz0s().s[78]++;
      return {
        isValid: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_o02dghz0s().b[17][0]++, error.message) :
        /* istanbul ignore next */
        (cov_o02dghz0s().b[17][1]++, 'Unknown validation error')
      };
    }
  }
}
/* istanbul ignore next */
cov_o02dghz0s().s[79]++;
exports.ImageProcessor = ImageProcessor;
/* istanbul ignore next */
cov_o02dghz0s().s[80]++;
ImageProcessor.UPLOAD_DIR = environment_1.config.upload.path;
/* istanbul ignore next */
cov_o02dghz0s().s[81]++;
ImageProcessor.MAX_SIZE = environment_1.config.upload.maxSize;
/* istanbul ignore next */
cov_o02dghz0s().s[82]++;
ImageProcessor.ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,