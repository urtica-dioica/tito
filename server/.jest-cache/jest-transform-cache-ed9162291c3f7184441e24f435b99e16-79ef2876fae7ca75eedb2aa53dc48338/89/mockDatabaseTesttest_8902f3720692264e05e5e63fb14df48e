4925800f100c0ef1905182930ebb7318
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mockDatabaseService_1 = require("../../utils/mockDatabaseService");
describe('Mock Database Service', () => {
    it('should handle COUNT queries correctly', async () => {
        // Test COUNT query
        const result = await mockDatabaseService_1.mockDatabaseService.query('SELECT COUNT(*) FROM payroll_periods');
        console.log('COUNT query result:', JSON.stringify(result, null, 2));
        expect(result).toBeDefined();
        expect(result.rows).toBeDefined();
        expect(result.rows.length).toBe(1);
        expect(result.rows[0]).toBeDefined();
        expect(result.rows[0].count).toBeDefined();
        expect(typeof result.rows[0].count).toBe('string');
    });
    it('should handle COUNT queries with WHERE clauses', async () => {
        // Test COUNT query with WHERE clause
        const result = await mockDatabaseService_1.mockDatabaseService.query('SELECT COUNT(*) FROM payroll_periods WHERE status = $1', ['draft']);
        expect(result).toBeDefined();
        expect(result.rows).toBeDefined();
        expect(result.rows.length).toBe(1);
        expect(result.rows[0]).toBeDefined();
        expect(result.rows[0].count).toBeDefined();
        expect(typeof result.rows[0].count).toBe('string');
    });
    it('should handle INSERT queries', async () => {
        // Test INSERT query
        const result = await mockDatabaseService_1.mockDatabaseService.query('INSERT INTO payroll_periods (period_name, start_date, end_date, status) VALUES ($1, $2, $3, $4)', ['Test Period', '2025-01-01', '2025-01-31', 'draft']);
        expect(result).toBeDefined();
        expect(result.rows).toBeDefined();
        expect(result.rows.length).toBe(1);
        expect(result.rows[0].id).toBeDefined();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUva2ltL3RpdG8vc2VydmVyL3Rlc3RzL3VuaXQvc2VydmljZXMvbW9ja0RhdGFiYXNlVGVzdC50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEseUVBQXNFO0FBRXRFLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3JELG1CQUFtQjtRQUNuQixNQUFNLE1BQU0sR0FBRyxNQUFNLHlDQUFtQixDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1FBRXZGLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFcEUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDM0MsTUFBTSxDQUFDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0RBQWdELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDOUQscUNBQXFDO1FBQ3JDLE1BQU0sTUFBTSxHQUFHLE1BQU0seUNBQW1CLENBQUMsS0FBSyxDQUFDLHdEQUF3RCxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUVwSCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDN0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNsQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNyQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMzQyxNQUFNLENBQUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM1QyxvQkFBb0I7UUFDcEIsTUFBTSxNQUFNLEdBQUcsTUFBTSx5Q0FBbUIsQ0FBQyxLQUFLLENBQzVDLGlHQUFpRyxFQUNqRyxDQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUNyRCxDQUFDO1FBRUYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzFDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUva2ltL3RpdG8vc2VydmVyL3Rlc3RzL3VuaXQvc2VydmljZXMvbW9ja0RhdGFiYXNlVGVzdC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1vY2tEYXRhYmFzZVNlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9tb2NrRGF0YWJhc2VTZXJ2aWNlJztcblxuZGVzY3JpYmUoJ01vY2sgRGF0YWJhc2UgU2VydmljZScsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgQ09VTlQgcXVlcmllcyBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gVGVzdCBDT1VOVCBxdWVyeVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1vY2tEYXRhYmFzZVNlcnZpY2UucXVlcnkoJ1NFTEVDVCBDT1VOVCgqKSBGUk9NIHBheXJvbGxfcGVyaW9kcycpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCdDT1VOVCBxdWVyeSByZXN1bHQ6JywgSlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCAyKSk7XG4gICAgXG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QocmVzdWx0LnJvd3MpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHJlc3VsdC5yb3dzLmxlbmd0aCkudG9CZSgxKTtcbiAgICBleHBlY3QocmVzdWx0LnJvd3NbMF0pLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHJlc3VsdC5yb3dzWzBdLmNvdW50KS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LnJvd3NbMF0uY291bnQpLnRvQmUoJ3N0cmluZycpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBDT1VOVCBxdWVyaWVzIHdpdGggV0hFUkUgY2xhdXNlcycsIGFzeW5jICgpID0+IHtcbiAgICAvLyBUZXN0IENPVU5UIHF1ZXJ5IHdpdGggV0hFUkUgY2xhdXNlXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9ja0RhdGFiYXNlU2VydmljZS5xdWVyeSgnU0VMRUNUIENPVU5UKCopIEZST00gcGF5cm9sbF9wZXJpb2RzIFdIRVJFIHN0YXR1cyA9ICQxJywgWydkcmFmdCddKTtcbiAgICBcbiAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChyZXN1bHQucm93cykudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QocmVzdWx0LnJvd3MubGVuZ3RoKS50b0JlKDEpO1xuICAgIGV4cGVjdChyZXN1bHQucm93c1swXSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QocmVzdWx0LnJvd3NbMF0uY291bnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHR5cGVvZiByZXN1bHQucm93c1swXS5jb3VudCkudG9CZSgnc3RyaW5nJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFuZGxlIElOU0VSVCBxdWVyaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIFRlc3QgSU5TRVJUIHF1ZXJ5XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9ja0RhdGFiYXNlU2VydmljZS5xdWVyeShcbiAgICAgICdJTlNFUlQgSU5UTyBwYXlyb2xsX3BlcmlvZHMgKHBlcmlvZF9uYW1lLCBzdGFydF9kYXRlLCBlbmRfZGF0ZSwgc3RhdHVzKSBWQUxVRVMgKCQxLCAkMiwgJDMsICQ0KScsXG4gICAgICBbJ1Rlc3QgUGVyaW9kJywgJzIwMjUtMDEtMDEnLCAnMjAyNS0wMS0zMScsICdkcmFmdCddXG4gICAgKTtcbiAgICBcbiAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChyZXN1bHQucm93cykudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QocmVzdWx0LnJvd3MubGVuZ3RoKS50b0JlKDEpO1xuICAgIGV4cGVjdChyZXN1bHQucm93c1swXS5pZCkudG9CZURlZmluZWQoKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==