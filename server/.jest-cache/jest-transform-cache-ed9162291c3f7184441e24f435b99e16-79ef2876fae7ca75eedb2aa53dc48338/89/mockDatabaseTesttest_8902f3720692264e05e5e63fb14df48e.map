{"file":"/home/kim/tito/server/tests/unit/services/mockDatabaseTest.test.ts","mappings":";;AAAA,yEAAsE;AAEtE,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,mBAAmB;QACnB,MAAM,MAAM,GAAG,MAAM,yCAAmB,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAEvF,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAEpE,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QAClC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QACrC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3C,MAAM,CAAC,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,qCAAqC;QACrC,MAAM,MAAM,GAAG,MAAM,yCAAmB,CAAC,KAAK,CAAC,wDAAwD,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QAEpH,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QAClC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QACrC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3C,MAAM,CAAC,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,oBAAoB;QACpB,MAAM,MAAM,GAAG,MAAM,yCAAmB,CAAC,KAAK,CAC5C,iGAAiG,EACjG,CAAC,aAAa,EAAE,YAAY,EAAE,YAAY,EAAE,OAAO,CAAC,CACrD,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QAClC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/kim/tito/server/tests/unit/services/mockDatabaseTest.test.ts"],"sourcesContent":["import { mockDatabaseService } from '../../utils/mockDatabaseService';\n\ndescribe('Mock Database Service', () => {\n  it('should handle COUNT queries correctly', async () => {\n    // Test COUNT query\n    const result = await mockDatabaseService.query('SELECT COUNT(*) FROM payroll_periods');\n    \n    console.log('COUNT query result:', JSON.stringify(result, null, 2));\n    \n    expect(result).toBeDefined();\n    expect(result.rows).toBeDefined();\n    expect(result.rows.length).toBe(1);\n    expect(result.rows[0]).toBeDefined();\n    expect(result.rows[0].count).toBeDefined();\n    expect(typeof result.rows[0].count).toBe('string');\n  });\n\n  it('should handle COUNT queries with WHERE clauses', async () => {\n    // Test COUNT query with WHERE clause\n    const result = await mockDatabaseService.query('SELECT COUNT(*) FROM payroll_periods WHERE status = $1', ['draft']);\n    \n    expect(result).toBeDefined();\n    expect(result.rows).toBeDefined();\n    expect(result.rows.length).toBe(1);\n    expect(result.rows[0]).toBeDefined();\n    expect(result.rows[0].count).toBeDefined();\n    expect(typeof result.rows[0].count).toBe('string');\n  });\n\n  it('should handle INSERT queries', async () => {\n    // Test INSERT query\n    const result = await mockDatabaseService.query(\n      'INSERT INTO payroll_periods (period_name, start_date, end_date, status) VALUES ($1, $2, $3, $4)',\n      ['Test Period', '2025-01-01', '2025-01-31', 'draft']\n    );\n    \n    expect(result).toBeDefined();\n    expect(result.rows).toBeDefined();\n    expect(result.rows.length).toBe(1);\n    expect(result.rows[0].id).toBeDefined();\n  });\n});\n"],"version":3}