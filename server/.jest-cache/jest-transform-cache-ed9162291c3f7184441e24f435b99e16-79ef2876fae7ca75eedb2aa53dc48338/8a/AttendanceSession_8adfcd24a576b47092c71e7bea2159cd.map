{"version":3,"names":["cov_27s7xsdp9m","actualCoverage","s","database_1","require","imageProcessor_1","AttendanceSessionModel","createAttendanceSession","data","f","clockIn","clockOut","b","sessionType","timestamp","selfieImagePath","selfieImageUrl","selfieTakenAt","startsWith","employeeQuery","employeeResult","getPool","query","attendanceRecordId","rows","length","employee_code","processedImage","ImageProcessor","processSelfieImage","filePath","fileName","Date","error","console","result","qrCodeHash","findById","id","findByIdWithDetails","getSessionsByAttendanceRecord","getLatestSessionByEmployeeAndDate","employeeId","date","updateAttendanceSession","updateFields","updateValues","paramIndex","undefined","currentSession","push","join","listAttendanceSessions","params","page","limit","departmentId","startDate","endDate","search","sortBy","sortOrder","offset","whereConditions","queryParams","whereClause","countQuery","countResult","total","parseInt","dataQuery","toUpperCase","sessions","totalPages","Math","ceil","calculateSessionHours","clock_in_time","clock_out_time","hours","getTime","max","getEmployeeSessionStats","stats","totalDays","averageHoursPerDay","parseFloat","total_hours","totalSessions","total_sessions","clockInSessions","clock_in_sessions","clockOutSessions","clock_out_sessions","totalHours","round","deleteAttendanceSession","rowCount","getAttendanceSessionCount","count","exports","attendanceSessionModel"],"sources":["/home/kim/tito/server/src/models/attendance/AttendanceSession.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport { ImageProcessor } from '../../utils/imageProcessor';\n\nexport interface AttendanceSession {\n  id: string;\n  attendanceRecordId: string;\n  sessionType: 'clock_in' | 'clock_out' | 'morning_in' | 'morning_out' | 'afternoon_in' | 'afternoon_out' | 'overtime';\n  timestamp: Date;\n  selfieImagePath: string | null;\n  qrCodeHash: string | null;\n  calculatedHours: number;\n  createdAt: Date;\n}\n\nexport interface AttendanceSessionWithDetails extends AttendanceSession {\n  employeeId: string;\n  employeeCode: string;\n  employeeName: string;\n  departmentName: string | null;\n  date: Date;\n  overallStatus: string;\n}\n\nexport interface CreateAttendanceSessionData {\n  attendanceRecordId: string;\n  sessionType: 'clock_in' | 'clock_out' | 'morning_in' | 'morning_out' | 'afternoon_in' | 'afternoon_out' | 'overtime';\n  timestamp: Date;\n  selfieImagePath?: string;\n  qrCodeHash?: string;\n}\n\nexport interface UpdateAttendanceSessionData {\n  timestamp?: Date;\n  selfieImagePath?: string;\n  qrCodeHash?: string;\n}\n\nexport interface AttendanceSessionListParams {\n  page?: number | undefined;\n  limit?: number | undefined;\n  employeeId?: string | undefined;\n  departmentId?: string | undefined;\n  sessionType?: 'clock_in' | 'clock_out' | 'morning_in' | 'morning_out' | 'afternoon_in' | 'afternoon_out' | 'overtime' | undefined;\n  startDate?: Date | undefined;\n  endDate?: Date | undefined;\n  search?: string | undefined;\n  sortBy?: string | undefined;\n  sortOrder?: 'asc' | 'desc' | undefined;\n}\n\nexport class AttendanceSessionModel {\n  /**\n   * Create a new attendance session\n   */\n  async createAttendanceSession(data: CreateAttendanceSessionData): Promise<AttendanceSession> {\n    // Map time-based session types to clock_in/clock_out fields\n    let clockIn: Date | null = null;\n    let clockOut: Date | null = null;\n    \n    if (data.sessionType === 'clock_in' || data.sessionType === 'morning_in' || data.sessionType === 'afternoon_in') {\n      clockIn = data.timestamp;\n    } else if (data.sessionType === 'clock_out' || data.sessionType === 'morning_out' || data.sessionType === 'afternoon_out' || data.sessionType === 'overtime') {\n      clockOut = data.timestamp;\n    }\n\n    // Process selfie image if provided\n    let selfieImagePath: string | null = null;\n    let selfieImageUrl: string | null = null;\n    let selfieTakenAt: Date | null = null;\n\n    if (data.selfieImagePath) {\n      try {\n        // Check if it's base64 data or already a file path\n        if (data.selfieImagePath.startsWith('data:image/')) {\n          // Get employee ID from attendance record for filename generation\n          const employeeQuery = `\n            SELECT ar.employee_id, e.employee_id as employee_code\n            FROM attendance_records ar\n            JOIN employees e ON ar.employee_id = e.id\n            WHERE ar.id = $1\n          `;\n          const employeeResult = await getPool().query(employeeQuery, [data.attendanceRecordId]);\n          \n          if (employeeResult.rows.length > 0) {\n            const { employee_code } = employeeResult.rows[0];\n            const processedImage = await ImageProcessor.processSelfieImage(\n              data.selfieImagePath,\n              employee_code,\n              data.sessionType\n            );\n            \n            selfieImagePath = processedImage.filePath;\n            selfieImageUrl = `/uploads/${processedImage.fileName}`;\n            selfieTakenAt = new Date();\n          }\n        } else {\n          // Assume it's already a file path\n          selfieImagePath = data.selfieImagePath;\n          selfieImageUrl = data.selfieImagePath;\n          selfieTakenAt = new Date();\n        }\n      } catch (error) {\n        console.error('Error processing selfie image:', error);\n        // Continue without selfie if processing fails\n      }\n    }\n\n    const query = `\n      INSERT INTO attendance_sessions (\n        attendance_record_id, \n        session_type, \n        clock_in, \n        clock_out, \n        selfie_image_path, \n        selfie_image_url,\n        selfie_taken_at,\n        qr_code_hash\n      )\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n      RETURNING \n        id,\n        attendance_record_id as \"attendanceRecordId\",\n        session_type as \"sessionType\",\n        COALESCE(clock_in, clock_out) as \"timestamp\",\n        selfie_image_path as \"selfieImagePath\",\n        qr_code_hash as \"qrCodeHash\",\n        calculated_hours as \"calculatedHours\",\n        created_at as \"createdAt\"\n    `;\n\n    const result = await getPool().query(query, [\n      data.attendanceRecordId,\n      data.sessionType,\n      clockIn ? clockIn : null,\n      clockOut ? clockOut : null,\n      selfieImagePath,\n      selfieImageUrl,\n      selfieTakenAt ? selfieTakenAt : null,\n      data.qrCodeHash || null\n    ]);\n\n    return result.rows[0];\n  }\n\n  /**\n   * Get attendance session by ID\n   */\n  async findById(id: string): Promise<AttendanceSession | null> {\n    const query = `\n      SELECT \n        id,\n        attendance_record_id as \"attendanceRecordId\",\n        session_type as \"sessionType\",\n        COALESCE(clock_in, clock_out) as \"timestamp\",\n        selfie_image_path as \"selfieImagePath\",\n        qr_code_hash as \"qrCodeHash\",\n        calculated_hours as \"calculatedHours\",\n        created_at as \"createdAt\"\n      FROM attendance_sessions\n      WHERE id = $1\n    `;\n\n    const result = await getPool().query(query, [id]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Get attendance session with details\n   */\n  async findByIdWithDetails(id: string): Promise<AttendanceSessionWithDetails | null> {\n    const query = `\n      SELECT \n        s.id,\n        s.attendance_record_id as \"attendanceRecordId\",\n        s.session_type as \"sessionType\",\n        COALESCE(s.clock_in, s.clock_out) as \"timestamp\",\n        s.selfie_image_path as \"selfieImagePath\",\n        s.qr_code_hash as \"qrCodeHash\",\n        s.calculated_hours as \"calculatedHours\",\n        s.created_at as \"createdAt\",\n        ar.employee_id as \"employeeId\",\n        ar.date,\n        ar.overall_status as \"overallStatus\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\"\n      FROM attendance_sessions s\n      JOIN attendance_records ar ON s.attendance_record_id = ar.id\n      JOIN employees e ON ar.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE s.id = $1\n    `;\n\n    const result = await getPool().query(query, [id]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Get sessions for an attendance record\n   */\n  async getSessionsByAttendanceRecord(attendanceRecordId: string): Promise<AttendanceSession[]> {\n    const query = `\n      SELECT \n        id,\n        attendance_record_id as \"attendanceRecordId\",\n        session_type as \"sessionType\",\n        COALESCE(clock_in, clock_out) as \"timestamp\",\n        selfie_image_path as \"selfieImagePath\",\n        qr_code_hash as \"qrCodeHash\",\n        calculated_hours as \"calculatedHours\",\n        created_at as \"createdAt\"\n      FROM attendance_sessions\n      WHERE attendance_record_id = $1\n      ORDER BY COALESCE(clock_in, clock_out)\n    `;\n\n    const result = await getPool().query(query, [attendanceRecordId]);\n    return result.rows;\n  }\n\n  /**\n   * Get latest session for an employee on a specific date\n   */\n  async getLatestSessionByEmployeeAndDate(employeeId: string, date: Date): Promise<AttendanceSession | null> {\n    const query = `\n      SELECT \n        s.id,\n        s.attendance_record_id as \"attendanceRecordId\",\n        s.session_type as \"sessionType\",\n        COALESCE(s.clock_in, s.clock_out) as \"timestamp\",\n        s.selfie_image_path as \"selfieImagePath\",\n        s.qr_code_hash as \"qrCodeHash\",\n        s.calculated_hours as \"calculatedHours\",\n        s.created_at as \"createdAt\"\n      FROM attendance_sessions s\n      JOIN attendance_records ar ON s.attendance_record_id = ar.id\n      WHERE ar.employee_id = $1 AND ar.date = $2\n      ORDER BY COALESCE(s.clock_in, s.clock_out) DESC\n      LIMIT 1\n    `;\n\n    const result = await getPool().query(query, [employeeId, date]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Update attendance session\n   */\n  async updateAttendanceSession(id: string, data: UpdateAttendanceSessionData): Promise<AttendanceSession | null> {\n    const updateFields: string[] = [];\n    const updateValues: any[] = [];\n    let paramIndex = 1;\n\n    if (data.timestamp !== undefined) {\n      // Get the current session to determine if it's clock_in or clock_out\n      const currentSession = await this.findById(id);\n      if (currentSession) {\n        if (currentSession.sessionType === 'clock_in' || currentSession.sessionType === 'morning_in' || currentSession.sessionType === 'afternoon_in') {\n          updateFields.push(`clock_in = $${paramIndex}`);\n        } else {\n          updateFields.push(`clock_out = $${paramIndex}`);\n        }\n        updateValues.push(data.timestamp);\n        paramIndex++;\n      }\n    }\n\n    if (data.selfieImagePath !== undefined) {\n      updateFields.push(`selfie_image_path = $${paramIndex}`);\n      updateValues.push(data.selfieImagePath);\n      paramIndex++;\n    }\n\n    if (data.qrCodeHash !== undefined) {\n      updateFields.push(`qr_code_hash = $${paramIndex}`);\n      updateValues.push(data.qrCodeHash);\n      paramIndex++;\n    }\n\n    if (updateFields.length === 0) {\n      return this.findById(id);\n    }\n\n    updateValues.push(id);\n\n    const query = `\n      UPDATE attendance_sessions \n      SET ${updateFields.join(', ')}\n      WHERE id = $${paramIndex}\n      RETURNING \n        id,\n        attendance_record_id as \"attendanceRecordId\",\n        session_type as \"sessionType\",\n        COALESCE(clock_in, clock_out) as \"timestamp\",\n        selfie_image_path as \"selfieImagePath\",\n        qr_code_hash as \"qrCodeHash\",\n        calculated_hours as \"calculatedHours\",\n        created_at as \"createdAt\"\n    `;\n\n    const result = await getPool().query(query, updateValues);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * List attendance sessions with filtering and pagination\n   */\n  async listAttendanceSessions(params: AttendanceSessionListParams = {}): Promise<{\n    sessions: AttendanceSessionWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      employeeId,\n      departmentId,\n      sessionType,\n      startDate,\n      endDate,\n      search,\n      sortBy = 'timestamp',\n      sortOrder = 'desc'\n    } = params;\n\n    const offset = (page - 1) * limit;\n    const whereConditions: string[] = [];\n    const queryParams: any[] = [];\n    let paramIndex = 1;\n\n    // Build WHERE conditions\n    if (employeeId) {\n      whereConditions.push(`ar.employee_id = $${paramIndex}`);\n      queryParams.push(employeeId);\n      paramIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`e.department_id = $${paramIndex}`);\n      queryParams.push(departmentId);\n      paramIndex++;\n    }\n\n    if (sessionType) {\n      whereConditions.push(`s.session_type = $${paramIndex}`);\n      queryParams.push(sessionType);\n      paramIndex++;\n    }\n\n    if (startDate) {\n      whereConditions.push(`ar.date >= $${paramIndex}`);\n      queryParams.push(startDate);\n      paramIndex++;\n    }\n\n    if (endDate) {\n      whereConditions.push(`ar.date <= $${paramIndex}`);\n      queryParams.push(endDate);\n      paramIndex++;\n    }\n\n    if (search) {\n      whereConditions.push(`(CONCAT(u.first_name, ' ', u.last_name) ILIKE $${paramIndex} OR e.employee_id ILIKE $${paramIndex})`);\n      queryParams.push(`%${search}%`);\n      paramIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM attendance_sessions s\n      JOIN attendance_records ar ON s.attendance_record_id = ar.id\n      JOIN employees e ON ar.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n    `;\n\n    const countResult = await getPool().query(countQuery, queryParams);\n    const total = parseInt(countResult.rows[0].total);\n\n    // Data query\n    const dataQuery = `\n      SELECT \n        s.id,\n        s.attendance_record_id as \"attendanceRecordId\",\n        s.session_type as \"sessionType\",\n        COALESCE(s.clock_in, s.clock_out) as \"timestamp\",\n        s.selfie_image_path as \"selfieImagePath\",\n        s.qr_code_hash as \"qrCodeHash\",\n        s.calculated_hours as \"calculatedHours\",\n        s.created_at as \"createdAt\",\n        ar.employee_id as \"employeeId\",\n        ar.date,\n        ar.overall_status as \"overallStatus\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\"\n      FROM attendance_sessions s\n      JOIN attendance_records ar ON s.attendance_record_id = ar.id\n      JOIN employees e ON ar.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n      ORDER BY ${sortBy === 'timestamp' ? 'COALESCE(s.clock_in, s.clock_out)' : `s.${sortBy}`} ${sortOrder.toUpperCase()}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    queryParams.push(limit, offset);\n    const result = await getPool().query(dataQuery, queryParams);\n\n    return {\n      sessions: result.rows,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  /**\n   * Calculate hours between clock in and clock out sessions\n   */\n  async calculateSessionHours(attendanceRecordId: string): Promise<number> {\n    const query = `\n      SELECT \n        clock_in.clock_in as clock_in_time,\n        clock_out.clock_out as clock_out_time\n      FROM attendance_sessions clock_in\n      JOIN attendance_sessions clock_out ON clock_in.attendance_record_id = clock_out.attendance_record_id\n      WHERE clock_in.attendance_record_id = $1\n        AND clock_in.clock_in IS NOT NULL\n        AND clock_out.clock_out IS NOT NULL\n        AND clock_in.clock_in < clock_out.clock_out\n      ORDER BY clock_in.clock_in DESC, clock_out.clock_out ASC\n      LIMIT 1\n    `;\n\n    const result = await getPool().query(query, [attendanceRecordId]);\n    \n    if (result.rows.length === 0) {\n      return 0;\n    }\n\n    const { clock_in_time, clock_out_time } = result.rows[0];\n    const hours = (new Date(clock_out_time).getTime() - new Date(clock_in_time).getTime()) / (1000 * 60 * 60);\n    \n    return Math.max(0, hours);\n  }\n\n  /**\n   * Get session statistics for an employee\n   */\n  async getEmployeeSessionStats(employeeId: string, startDate: Date, endDate: Date): Promise<{\n    totalSessions: number;\n    clockInSessions: number;\n    clockOutSessions: number;\n    totalHours: number;\n    averageHoursPerDay: number;\n  }> {\n    const query = `\n      SELECT \n        COUNT(*) as total_sessions,\n        COUNT(*) FILTER (WHERE session_type = 'clock_in') as clock_in_sessions,\n        COUNT(*) FILTER (WHERE session_type = 'clock_out') as clock_out_sessions,\n        COALESCE(SUM(calculated_hours), 0) as total_hours\n      FROM attendance_sessions s\n      JOIN attendance_records ar ON s.attendance_record_id = ar.id\n      WHERE ar.employee_id = $1 \n        AND ar.date >= $2 \n        AND ar.date <= $3\n    `;\n\n    const result = await getPool().query(query, [employeeId, startDate, endDate]);\n    const stats = result.rows[0];\n\n    const totalDays = Math.max(1, Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)));\n    const averageHoursPerDay = parseFloat(stats.total_hours) / totalDays;\n\n    return {\n      totalSessions: parseInt(stats.total_sessions) || 0,\n      clockInSessions: parseInt(stats.clock_in_sessions) || 0,\n      clockOutSessions: parseInt(stats.clock_out_sessions) || 0,\n      totalHours: parseFloat(stats.total_hours) || 0,\n      averageHoursPerDay: Math.round(averageHoursPerDay * 100) / 100\n    };\n  }\n\n  /**\n   * Delete attendance session\n   */\n  async deleteAttendanceSession(id: string): Promise<boolean> {\n    const query = 'DELETE FROM attendance_sessions WHERE id = $1';\n    const result = await getPool().query(query, [id]);\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  /**\n   * Get attendance session count\n   */\n  async getAttendanceSessionCount(): Promise<number> {\n    const query = 'SELECT COUNT(*) as count FROM attendance_sessions';\n    const result = await getPool().query(query);\n    return parseInt(result.rows[0].count);\n  }\n}\n\nexport const attendanceSessionModel = new AttendanceSessionModel();"],"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","ignoreList":[]}