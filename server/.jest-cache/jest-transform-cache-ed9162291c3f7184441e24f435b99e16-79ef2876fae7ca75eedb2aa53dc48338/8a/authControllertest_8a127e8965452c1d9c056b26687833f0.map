{"file":"/home/kim/tito/server/tests/unit/controllers/authController.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/unit/controllers/authController.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { AuthController } from '../../../src/controllers/auth/authController';\nimport { authService } from '../../../src/services/auth/authService';\nimport { userModel } from '../../../src/models/auth/User';\nimport { USER_ROLES } from '../../../src/utils/constants/roles';\n\n// Mock the dependencies\njest.mock('../../../src/services/auth/authService');\njest.mock('../../../src/models/auth/User');\n\nconst mockAuthService = authService as jest.Mocked<typeof authService>;\nconst mockUserModel = userModel as jest.Mocked<typeof userModel>;\n\ndescribe('AuthController', () => {\n  let authController: AuthController;\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n\n  beforeEach(() => {\n    authController = new AuthController();\n    jest.clearAllMocks();\n\n    // Mock request object\n    mockRequest = {\n      body: {},\n      params: {},\n      query: {},\n      requestId: 'test-request-123',\n      user: undefined\n    };\n\n    // Mock response object\n    mockResponse = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis(),\n      cookie: jest.fn().mockReturnThis(),\n      clearCookie: jest.fn().mockReturnThis()\n    };\n  });\n\n  describe('login', () => {\n    it('should login successfully with valid credentials', async () => {\n      // Arrange\n      mockRequest.body = {\n        email: 'test@example.com',\n        password: 'password123'\n      };\n\n      const mockAuthResult = {\n        success: true,\n        message: 'Login successful',\n        data: {\n          user: {\n            userId: 'user-123',\n            email: 'test@example.com',\n            firstName: 'John',\n            lastName: 'Doe',\n            role: USER_ROLES.EMPLOYEE\n          },\n          accessToken: 'access-token-123',\n          refreshToken: 'refresh-token-123'\n        }\n      };\n\n      mockAuthService.login.mockResolvedValue(mockAuthResult);\n\n      // Act\n      await authController.login(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockAuthService.login).toHaveBeenCalledWith({\n        email: 'test@example.com',\n        password: 'password123'\n      });\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Login successful',\n        data: mockAuthResult.data,\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      // Note: The controller doesn't set cookies, it returns the token in the response data\n    });\n\n    it('should return 400 for missing credentials', async () => {\n      // Arrange\n      mockRequest.body = {\n        email: 'test@example.com'\n        // password missing\n      };\n\n      // Act\n      await authController.login(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Email and password are required',\n        error: 'MISSING_CREDENTIALS',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockAuthService.login).not.toHaveBeenCalled();\n    });\n\n    it('should return 401 for invalid credentials', async () => {\n      // Arrange\n      mockRequest.body = {\n        email: 'test@example.com',\n        password: 'wrongpassword'\n      };\n\n      const mockAuthResult = {\n        success: false,\n        message: 'Invalid credentials',\n        error: 'INVALID_CREDENTIALS'\n      };\n\n      mockAuthService.login.mockResolvedValue(mockAuthResult);\n\n      // Act\n      await authController.login(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Invalid credentials',\n        error: 'INVALID_CREDENTIALS',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should handle service errors gracefully', async () => {\n      // Arrange\n      mockRequest.body = {\n        email: 'test@example.com',\n        password: 'password123'\n      };\n\n      mockAuthService.login.mockRejectedValue(new Error('Database connection failed'));\n\n      // Act\n      await authController.login(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Login failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('logout', () => {\n    it('should logout successfully', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n\n      mockAuthService.logout.mockResolvedValue({\n        success: true,\n        message: 'Logout successful'\n      });\n\n      // Act\n      await authController.logout(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockAuthService.logout).toHaveBeenCalledWith('user-123');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Logout successful',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should handle logout errors', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n\n      mockAuthService.logout.mockRejectedValue(new Error('Logout failed'));\n\n      // Act\n      await authController.logout(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Logout failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('refreshToken', () => {\n    it('should refresh token successfully', async () => {\n      // Arrange\n      mockRequest.body = {\n        refreshToken: 'valid-refresh-token'\n      };\n\n      const mockAuthResult = {\n        success: true,\n        message: 'Token refreshed successfully',\n        data: {\n          accessToken: 'new-access-token',\n          refreshToken: 'new-refresh-token'\n        }\n      };\n\n      mockAuthService.refreshToken.mockResolvedValue(mockAuthResult);\n\n      // Act\n      await authController.refreshToken(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockAuthService.refreshToken).toHaveBeenCalledWith('valid-refresh-token');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Token refreshed successfully',\n        data: mockAuthResult.data,\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 400 for missing refresh token', async () => {\n      // Arrange\n      mockRequest.body = {};\n\n      // Act\n      await authController.refreshToken(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Refresh token is required',\n        error: 'MISSING_REFRESH_TOKEN',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockAuthService.refreshToken).not.toHaveBeenCalled();\n    });\n\n    it('should return 401 for invalid refresh token', async () => {\n      // Arrange\n      mockRequest.body = {\n        refreshToken: 'invalid-refresh-token'\n      };\n\n      const mockAuthResult = {\n        success: false,\n        message: 'Invalid refresh token',\n        error: 'INVALID_REFRESH_TOKEN'\n      };\n\n      mockAuthService.refreshToken.mockResolvedValue(mockAuthResult);\n\n      // Act\n      await authController.refreshToken(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Invalid refresh token',\n        error: 'INVALID_REFRESH_TOKEN',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('changePassword', () => {\n    it('should change password successfully', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.body = {\n        currentPassword: 'oldpassword',\n        newPassword: 'newpassword123'\n      };\n\n      const mockResult = {\n        success: true,\n        message: 'Password changed successfully'\n      };\n\n      mockAuthService.changePassword.mockResolvedValue(mockResult);\n\n      // Act\n      await authController.changePassword(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockAuthService.changePassword).toHaveBeenCalledWith('user-123', 'oldpassword', 'newpassword123');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Password changed successfully',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 400 for missing password fields', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.body = {\n        currentPassword: 'oldpassword'\n        // newPassword missing\n      };\n\n      // Act\n      await authController.changePassword(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Current password and new password are required',\n        error: 'MISSING_PASSWORDS',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockAuthService.changePassword).not.toHaveBeenCalled();\n    });\n\n    it('should return 401 for incorrect current password', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.body = {\n        currentPassword: 'wrongpassword',\n        newPassword: 'newpassword123'\n      };\n\n      const mockResult = {\n        success: false,\n        message: 'Current password is incorrect',\n        error: 'INCORRECT_CURRENT_PASSWORD'\n      };\n\n      mockAuthService.changePassword.mockResolvedValue(mockResult);\n\n      // Act\n      await authController.changePassword(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Current password is incorrect',\n        error: 'INCORRECT_CURRENT_PASSWORD',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('requestPasswordReset', () => {\n    it('should request password reset successfully', async () => {\n      // Arrange\n      mockRequest.body = {\n        email: 'test@example.com'\n      };\n\n      const mockResult = {\n        success: true,\n        message: 'Password reset email sent'\n      };\n\n      mockAuthService.requestPasswordReset.mockResolvedValue(mockResult);\n\n      // Act\n      await authController.requestPasswordReset(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockAuthService.requestPasswordReset).toHaveBeenCalledWith('test@example.com');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Password reset email sent',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 400 for missing email', async () => {\n      // Arrange\n      mockRequest.body = {};\n\n      // Act\n      await authController.requestPasswordReset(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Email is required',\n        error: 'MISSING_EMAIL',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockAuthService.requestPasswordReset).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('resetPassword', () => {\n    it('should reset password successfully', async () => {\n      // Arrange\n      mockRequest.body = {\n        email: 'test@example.com',\n        resetToken: 'valid-reset-token',\n        newPassword: 'newpassword123'\n      };\n\n      const mockResult = {\n        success: true,\n        message: 'Password reset successfully'\n      };\n\n      mockAuthService.resetPassword.mockResolvedValue(mockResult);\n\n      // Act\n      await authController.resetPassword(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockAuthService.resetPassword).toHaveBeenCalledWith('test@example.com', 'valid-reset-token', 'newpassword123');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Password reset successfully',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 400 for missing fields', async () => {\n      // Arrange\n      mockRequest.body = {\n        token: 'valid-reset-token'\n        // newPassword missing\n      };\n\n      // Act\n      await authController.resetPassword(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Email, reset token, and new password are required',\n        error: 'MISSING_RESET_DATA',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockAuthService.resetPassword).not.toHaveBeenCalled();\n    });\n\n    it('should return 400 for invalid token', async () => {\n      // Arrange\n      mockRequest.body = {\n        email: 'test@example.com',\n        resetToken: 'invalid-token',\n        newPassword: 'newpassword123'\n      };\n\n      const mockResult = {\n        success: false,\n        message: 'Invalid or expired reset token',\n        error: 'INVALID_TOKEN'\n      };\n\n      mockAuthService.resetPassword.mockResolvedValue(mockResult);\n\n      // Act\n      await authController.resetPassword(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Invalid or expired reset token',\n        error: 'INVALID_TOKEN',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('setupPassword', () => {\n    it('should setup password successfully', async () => {\n      // Arrange\n      mockRequest.body = {\n        token: 'valid-setup-token',\n        password: 'newpassword123'\n      };\n\n      const mockResult = {\n        success: true,\n        message: 'Password setup successfully'\n      };\n\n      mockAuthService.setupPassword.mockResolvedValue(mockResult);\n\n      // Act\n      await authController.setupPassword(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockAuthService.setupPassword).toHaveBeenCalledWith('valid-setup-token', 'newpassword123');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Password setup successfully',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 400 for missing fields', async () => {\n      // Arrange\n      mockRequest.body = {\n        token: 'valid-setup-token'\n        // password missing\n      };\n\n      // Act\n      await authController.setupPassword(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Setup token and password are required',\n        error: 'MISSING_SETUP_DATA',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockAuthService.setupPassword).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('getProfile', () => {\n    it('should get user profile successfully', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n\n      const mockProfile = {\n        id: 'user-123',\n        email: 'test@example.com',\n        first_name: 'John',\n        last_name: 'Doe',\n        role: USER_ROLES.EMPLOYEE,\n        is_active: true,\n        created_at: new Date('2023-01-01T00:00:00Z'),\n        updated_at: new Date('2023-01-01T00:00:00Z')\n      };\n\n      const mockResult = {\n        success: true,\n        message: 'Profile retrieved successfully',\n        data: mockProfile\n      };\n\n      mockAuthService.getUserProfile.mockResolvedValue(mockResult);\n\n      // Act\n      await authController.getProfile(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockAuthService.getUserProfile).toHaveBeenCalledWith('user-123');\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Profile retrieved successfully',\n        data: mockProfile,\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 404 if user not found', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n\n      const mockResult = {\n        success: false,\n        message: 'User not found',\n        error: 'USER_NOT_FOUND'\n      };\n\n      mockAuthService.getUserProfile.mockResolvedValue(mockResult);\n\n      // Act\n      await authController.getProfile(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'User not found',\n        error: 'USER_NOT_FOUND',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('updateProfile', () => {\n    it('should update profile successfully', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.body = {\n        firstName: 'Jane',\n        lastName: 'Smith',\n        email: 'test@example.com'\n      };\n\n      const mockResult = {\n        success: true,\n        message: 'Profile updated successfully',\n        data: {\n          id: 'user-123',\n          email: 'test@example.com',\n          first_name: 'Jane',\n          last_name: 'Smith',\n          role: USER_ROLES.EMPLOYEE,\n          is_active: true,\n          created_at: new Date('2023-01-01T00:00:00Z'),\n          updated_at: new Date('2023-01-01T00:00:00Z')\n        }\n      };\n\n      mockAuthService.updateUserProfile.mockResolvedValue(mockResult);\n\n      // Act\n      await authController.updateProfile(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockAuthService.updateUserProfile).toHaveBeenCalledWith('user-123', {\n        firstName: 'Jane',\n        lastName: 'Smith',\n        email: 'test@example.com'\n      });\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Profile updated successfully',\n        data: mockResult.data,\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 400 for invalid update data', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.body = {\n        email: 'invalid-email' // Invalid email format\n      };\n\n      // Act\n      await authController.updateProfile(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'All fields are required',\n        error: 'MISSING_FIELDS',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockAuthService.updateUserProfile).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('createUser', () => {\n    it('should create user successfully (HR role)', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'hr-user-123',\n        email: 'hr@example.com',\n        role: USER_ROLES.HR,\n        tokenVersion: 1\n      };\n      mockRequest.body = {\n        email: 'newuser@example.com',\n        password: 'password123',\n        first_name: 'New',\n        last_name: 'User',\n        role: USER_ROLES.EMPLOYEE\n      };\n\n      const mockNewUser = {\n        id: 'new-user-123',\n        email: 'newuser@example.com',\n        first_name: 'New',\n        last_name: 'User',\n        role: USER_ROLES.EMPLOYEE,\n        is_active: true,\n        created_at: new Date('2023-01-01T00:00:00Z'),\n        updated_at: new Date('2023-01-01T00:00:00Z')\n      };\n\n      mockUserModel.createUser.mockResolvedValue(mockNewUser);\n\n      // Act\n      await authController.createUser(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockUserModel.createUser).toHaveBeenCalledWith({\n        email: 'newuser@example.com',\n        password: 'password123',\n        first_name: 'New',\n        last_name: 'User',\n        role: USER_ROLES.EMPLOYEE\n      });\n      expect(mockResponse.status).toHaveBeenCalledWith(201);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'User created successfully',\n        data: { user: mockNewUser },\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 403 for non-HR users', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.body = {\n        email: 'newuser@example.com',\n        firstName: 'New',\n        lastName: 'User',\n        role: USER_ROLES.EMPLOYEE\n        // Missing password field\n      };\n\n      // Act\n      await authController.createUser(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'All fields are required',\n        error: 'MISSING_FIELDS',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockUserModel.createUser).not.toHaveBeenCalled();\n    });\n\n    it('should return 400 for missing required fields', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'hr-user-123',\n        email: 'hr@example.com',\n        role: USER_ROLES.HR,\n        tokenVersion: 1\n      };\n      mockRequest.body = {\n        email: 'newuser@example.com'\n        // firstName and lastName missing\n      };\n\n      // Act\n      await authController.createUser(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'All fields are required',\n        error: 'MISSING_FIELDS',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockUserModel.createUser).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('getAllUsers', () => {\n    it('should get all users successfully (HR role)', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'hr-user-123',\n        email: 'hr@example.com',\n        role: USER_ROLES.HR,\n        tokenVersion: 1\n      };\n      mockRequest.query = {\n        page: '1',\n        limit: '10'\n      };\n\n      const mockUsers = [\n        {\n          id: 'user-1',\n          email: 'user1@example.com',\n          first_name: 'User',\n          last_name: 'One',\n          role: USER_ROLES.EMPLOYEE,\n          is_active: true,\n          created_at: new Date('2023-01-01T00:00:00Z'),\n          updated_at: new Date('2023-01-01T00:00:00Z')\n        },\n        {\n          id: 'user-2',\n          email: 'user2@example.com',\n          first_name: 'User',\n          last_name: 'Two',\n          role: USER_ROLES.DEPARTMENT_HEAD,\n          is_active: true,\n          created_at: new Date('2023-01-01T00:00:00Z'),\n          updated_at: new Date('2023-01-01T00:00:00Z')\n        }\n      ];\n\n      mockUserModel.listAllUsers.mockResolvedValue(mockUsers);\n\n      // Act\n      await authController.getAllUsers(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockUserModel.listAllUsers).toHaveBeenCalledWith();\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Users retrieved successfully',\n        data: {\n          users: mockUsers\n        },\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 403 for non-HR users', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n\n      const mockUsers: any[] = [];\n\n      mockUserModel.listAllUsers.mockResolvedValue(mockUsers);\n\n      // Act\n      await authController.getAllUsers(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Users retrieved successfully',\n        data: {\n          users: mockUsers\n        },\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockUserModel.listAllUsers).toHaveBeenCalledWith();\n    });\n  });\n\n  describe('updateUser', () => {\n    it('should update user successfully (HR role)', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'hr-user-123',\n        email: 'hr@example.com',\n        role: USER_ROLES.HR,\n        tokenVersion: 1\n      };\n      mockRequest.params = {\n        id: 'user-123'\n      };\n      mockRequest.body = {\n        firstName: 'Updated',\n        lastName: 'Name'\n      };\n\n      const mockUpdatedUser = {\n        id: 'user-123',\n        email: 'user@example.com',\n        first_name: 'Updated',\n        last_name: 'Name',\n        role: USER_ROLES.EMPLOYEE,\n        is_active: true,\n        created_at: new Date('2023-01-01T00:00:00Z'),\n        updated_at: new Date('2023-01-01T00:00:00Z')\n      };\n\n      const mockResult = {\n        success: true,\n        message: 'User updated successfully',\n        data: mockUpdatedUser\n      };\n\n      mockAuthService.updateUser.mockResolvedValue(mockResult);\n\n      // Act\n      await authController.updateUser(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockAuthService.updateUser).toHaveBeenCalledWith('user-123', {\n        firstName: 'Updated',\n        lastName: 'Name',\n        email: undefined,\n        role: undefined,\n        isActive: undefined\n      });\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'User updated successfully',\n        data: mockResult.data,\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 403 for non-HR users', async () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.params = {\n        id: 'user-456'\n      };\n      mockRequest.body = {\n        firstName: 'Updated'\n      };\n\n      mockAuthService.updateUser.mockRejectedValue(new Error('Update failed'));\n\n      // Act\n      await authController.updateUser(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Failed to update user',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockAuthService.updateUser).toHaveBeenCalledWith('user-456', {\n        firstName: 'Updated',\n        lastName: undefined,\n        email: undefined,\n        role: undefined,\n        isActive: undefined\n      });\n    });\n  });\n});\n"],"version":3}