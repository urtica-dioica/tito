4297accf3fc01cc9a0dfe9a496bb57ea
"use strict";

/* istanbul ignore next */
function cov_1k09f2hf7v() {
  var path = "/home/kim/tito/server/src/services/redis/redisService.ts";
  var hash = "ae9754f386b338797cac1fb17714d72525cf2b89";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/redis/redisService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 134
        }
      },
      "4": {
        start: {
          line: 7,
          column: 16
        },
        end: {
          line: 7,
          column: 45
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "6": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "7": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 52
        }
      },
      "8": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 46
        }
      },
      "9": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "10": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 19,
          column: 13
        }
      },
      "11": {
        start: {
          line: 18,
          column: 16
        },
        end: {
          line: 18,
          column: 44
        }
      },
      "12": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 73
        }
      },
      "13": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 37
        }
      },
      "14": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "15": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 31,
          column: 13
        }
      },
      "16": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 41
        }
      },
      "17": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 78
        }
      },
      "18": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "19": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 44
        }
      },
      "20": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 64
        }
      },
      "21": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 24
        }
      },
      "22": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "23": {
        start: {
          line: 49,
          column: 36
        },
        end: {
          line: 49,
          column: 57
        }
      },
      "24": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "25": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 74
        }
      },
      "26": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 60
        }
      },
      "27": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 81
        }
      },
      "28": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 24
        }
      },
      "29": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "30": {
        start: {
          line: 64,
          column: 26
        },
        end: {
          line: 64,
          column: 52
        }
      },
      "31": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 52
        }
      },
      "32": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 81
        }
      },
      "33": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 24
        }
      },
      "34": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "35": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 39
        }
      },
      "36": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 84
        }
      },
      "37": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 24
        }
      },
      "38": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "39": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "40": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 84,
          column: 60
        }
      },
      "41": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 87,
          column: 17
        }
      },
      "42": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 48
        }
      },
      "43": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 44
        }
      },
      "44": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 68
        }
      },
      "45": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 24
        }
      },
      "46": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "47": {
        start: {
          line: 100,
          column: 27
        },
        end: {
          line: 100,
          column: 56
        }
      },
      "48": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 32
        }
      },
      "49": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 87
        }
      },
      "50": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 25
        }
      },
      "51": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "52": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 54
        }
      },
      "53": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 82
        }
      },
      "54": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 24
        }
      },
      "55": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 119,
          column: 42
        }
      },
      "56": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 58
        }
      },
      "57": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 123,
          column: 42
        }
      },
      "58": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 40
        }
      },
      "59": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 127,
          column: 42
        }
      },
      "60": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 36
        }
      },
      "61": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 131,
          column: 42
        }
      },
      "62": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 43
        }
      },
      "63": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "64": {
        start: {
          line: 137,
          column: 33
        },
        end: {
          line: 137,
          column: 60
        }
      },
      "65": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "66": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 61
        }
      },
      "67": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 32
        }
      },
      "68": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 92
        }
      },
      "69": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 21
        }
      },
      "70": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "71": {
        start: {
          line: 150,
          column: 26
        },
        end: {
          line: 150,
          column: 52
        }
      },
      "72": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 47
        }
      },
      "73": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 86
        }
      },
      "74": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 21
        }
      },
      "75": {
        start: {
          line: 160,
          column: 25
        },
        end: {
          line: 160,
          column: 48
        }
      },
      "76": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 57
        }
      },
      "77": {
        start: {
          line: 164,
          column: 25
        },
        end: {
          line: 164,
          column: 48
        }
      },
      "78": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 45
        }
      },
      "79": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "80": {
        start: {
          line: 169,
          column: 29
        },
        end: {
          line: 169,
          column: 52
        }
      },
      "81": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 45
        }
      },
      "82": {
        start: {
          line: 173,
          column: 28
        },
        end: {
          line: 173,
          column: 46
        }
      },
      "83": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 43
        }
      },
      "84": {
        start: {
          line: 179,
          column: 25
        },
        end: {
          line: 179,
          column: 54
        }
      },
      "85": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 57
        }
      },
      "86": {
        start: {
          line: 183,
          column: 25
        },
        end: {
          line: 183,
          column: 54
        }
      },
      "87": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 45
        }
      },
      "88": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "89": {
        start: {
          line: 188,
          column: 29
        },
        end: {
          line: 188,
          column: 58
        }
      },
      "90": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 45
        }
      },
      "91": {
        start: {
          line: 192,
          column: 28
        },
        end: {
          line: 192,
          column: 52
        }
      },
      "92": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 43
        }
      },
      "93": {
        start: {
          line: 198,
          column: 25
        },
        end: {
          line: 198,
          column: 40
        }
      },
      "94": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 57
        }
      },
      "95": {
        start: {
          line: 202,
          column: 25
        },
        end: {
          line: 202,
          column: 40
        }
      },
      "96": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 51
        }
      },
      "97": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "98": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "99": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 213,
          column: 18
        }
      },
      "100": {
        start: {
          line: 215,
          column: 31
        },
        end: {
          line: 215,
          column: 48
        }
      },
      "101": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 229,
          column: 13
        }
      },
      "102": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 221,
          column: 18
        }
      },
      "103": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 228,
          column: 18
        }
      },
      "104": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 236,
          column: 14
        }
      },
      "105": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "106": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 51
        }
      },
      "107": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 88
        }
      },
      "108": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 22
        }
      },
      "109": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "110": {
        start: {
          line: 251,
          column: 25
        },
        end: {
          line: 251,
          column: 57
        }
      },
      "111": {
        start: {
          line: 252,
          column: 26
        },
        end: {
          line: 252,
          column: 42
        }
      },
      "112": {
        start: {
          line: 253,
          column: 23
        },
        end: {
          line: 253,
          column: 24
        }
      },
      "113": {
        start: {
          line: 254,
          column: 23
        },
        end: {
          line: 254,
          column: 24
        }
      },
      "114": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 268,
          column: 13
        }
      },
      "115": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 267,
          column: 17
        }
      },
      "116": {
        start: {
          line: 257,
          column: 34
        },
        end: {
          line: 257,
          column: 49
        }
      },
      "117": {
        start: {
          line: 258,
          column: 20
        },
        end: {
          line: 260,
          column: 21
        }
      },
      "118": {
        start: {
          line: 259,
          column: 24
        },
        end: {
          line: 259,
          column: 50
        }
      },
      "119": {
        start: {
          line: 262,
          column: 21
        },
        end: {
          line: 267,
          column: 17
        }
      },
      "120": {
        start: {
          line: 263,
          column: 34
        },
        end: {
          line: 263,
          column: 49
        }
      },
      "121": {
        start: {
          line: 264,
          column: 20
        },
        end: {
          line: 266,
          column: 21
        }
      },
      "122": {
        start: {
          line: 265,
          column: 24
        },
        end: {
          line: 265,
          column: 50
        }
      },
      "123": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 34
        }
      },
      "124": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 73
        }
      },
      "125": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 40
        }
      },
      "126": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 32
        }
      },
      "127": {
        start: {
          line: 281,
          column: 0
        },
        end: {
          line: 281,
          column: 36
        }
      },
      "128": {
        start: {
          line: 283,
          column: 0
        },
        end: {
          line: 283,
          column: 42
        }
      },
      "129": {
        start: {
          line: 285,
          column: 17
        },
        end: {
          line: 287,
          column: 1
        }
      },
      "130": {
        start: {
          line: 286,
          column: 4
        },
        end: {
          line: 286,
          column: 64
        }
      },
      "131": {
        start: {
          line: 288,
          column: 0
        },
        end: {
          line: 288,
          column: 28
        }
      },
      "132": {
        start: {
          line: 289,
          column: 17
        },
        end: {
          line: 291,
          column: 1
        }
      },
      "133": {
        start: {
          line: 290,
          column: 4
        },
        end: {
          line: 290,
          column: 52
        }
      },
      "134": {
        start: {
          line: 292,
          column: 0
        },
        end: {
          line: 292,
          column: 28
        }
      },
      "135": {
        start: {
          line: 293,
          column: 20
        },
        end: {
          line: 295,
          column: 1
        }
      },
      "136": {
        start: {
          line: 294,
          column: 4
        },
        end: {
          line: 294,
          column: 48
        }
      },
      "137": {
        start: {
          line: 296,
          column: 0
        },
        end: {
          line: 296,
          column: 34
        }
      },
      "138": {
        start: {
          line: 297,
          column: 19
        },
        end: {
          line: 299,
          column: 1
        }
      },
      "139": {
        start: {
          line: 298,
          column: 4
        },
        end: {
          line: 298,
          column: 51
        }
      },
      "140": {
        start: {
          line: 300,
          column: 0
        },
        end: {
          line: 300,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 23
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 27
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 17
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 37
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 43
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 47
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 24
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 62
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 27
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 72
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 30
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 81
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 22
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 98
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 34
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 108
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 64
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 118
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 122,
            column: 5
          }
        },
        loc: {
          start: {
            line: 122,
            column: 32
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 122
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 35
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 126
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 55
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 130
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 135,
            column: 5
          }
        },
        loc: {
          start: {
            line: 135,
            column: 54
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 135
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        loc: {
          start: {
            line: 148,
            column: 28
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 148
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 55
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 159
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        },
        loc: {
          start: {
            line: 163,
            column: 36
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 163
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 39
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 167
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 178,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        },
        loc: {
          start: {
            line: 178,
            column: 67
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 178
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 48
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 182
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 51
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 186
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        loc: {
          start: {
            line: 197,
            column: 49
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 197
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 30
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 201
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        loc: {
          start: {
            line: 206,
            column: 24
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 206
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 27
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 240
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        loc: {
          start: {
            line: 249,
            column: 27
          },
          end: {
            line: 275,
            column: 5
          }
        },
        line: 249
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 277,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        },
        loc: {
          start: {
            line: 277,
            column: 26
          },
          end: {
            line: 279,
            column: 5
          }
        },
        line: 277
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 285,
            column: 17
          },
          end: {
            line: 285,
            column: 18
          }
        },
        loc: {
          start: {
            line: 285,
            column: 51
          },
          end: {
            line: 287,
            column: 1
          }
        },
        line: 285
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 289,
            column: 17
          },
          end: {
            line: 289,
            column: 18
          }
        },
        loc: {
          start: {
            line: 289,
            column: 32
          },
          end: {
            line: 291,
            column: 1
          }
        },
        line: 289
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 293,
            column: 20
          },
          end: {
            line: 293,
            column: 21
          }
        },
        loc: {
          start: {
            line: 293,
            column: 35
          },
          end: {
            line: 295,
            column: 1
          }
        },
        line: 293
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 297,
            column: 19
          },
          end: {
            line: 297,
            column: 20
          }
        },
        loc: {
          start: {
            line: 297,
            column: 38
          },
          end: {
            line: 299,
            column: 1
          }
        },
        line: 297
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 19,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 19,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 17,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 17,
            column: 33
          }
        }, {
          start: {
            line: 17,
            column: 37
          },
          end: {
            line: 17,
            column: 56
          }
        }],
        line: 17
      },
      "5": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "6": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        }, {
          start: {
            line: 53,
            column: 17
          },
          end: {
            line: 55,
            column: 13
          }
        }],
        line: 50
      },
      "7": {
        loc: {
          start: {
            line: 65,
            column: 19
          },
          end: {
            line: 65,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 27
          },
          end: {
            line: 65,
            column: 44
          }
        }, {
          start: {
            line: 65,
            column: 47
          },
          end: {
            line: 65,
            column: 51
          }
        }],
        line: 65
      },
      "8": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        }, {
          start: {
            line: 89,
            column: 17
          },
          end: {
            line: 91,
            column: 13
          }
        }],
        line: 83
      },
      "9": {
        loc: {
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "10": {
        loc: {
          start: {
            line: 118,
            column: 45
          },
          end: {
            line: 118,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 118,
            column: 58
          },
          end: {
            line: 118,
            column: 62
          }
        }],
        line: 118
      },
      "11": {
        loc: {
          start: {
            line: 130,
            column: 36
          },
          end: {
            line: 130,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 130,
            column: 49
          },
          end: {
            line: 130,
            column: 53
          }
        }],
        line: 130
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 34
          },
          end: {
            line: 135,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 135,
            column: 50
          },
          end: {
            line: 135,
            column: 52
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "14": {
        loc: {
          start: {
            line: 151,
            column: 19
          },
          end: {
            line: 151,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 151,
            column: 27
          },
          end: {
            line: 151,
            column: 42
          }
        }, {
          start: {
            line: 151,
            column: 45
          },
          end: {
            line: 151,
            column: 46
          }
        }],
        line: 151
      },
      "15": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: 172,
            column: 13
          },
          end: {
            line: 175,
            column: 9
          }
        }],
        line: 168
      },
      "16": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        }, {
          start: {
            line: 191,
            column: 13
          },
          end: {
            line: 194,
            column: 9
          }
        }],
        line: 187
      },
      "17": {
        loc: {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "18": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        }, {
          start: {
            line: 223,
            column: 17
          },
          end: {
            line: 229,
            column: 13
          }
        }],
        line: 216
      },
      "19": {
        loc: {
          start: {
            line: 234,
            column: 55
          },
          end: {
            line: 234,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 234,
            column: 80
          },
          end: {
            line: 234,
            column: 93
          }
        }, {
          start: {
            line: 234,
            column: 96
          },
          end: {
            line: 234,
            column: 111
          }
        }],
        line: 234
      },
      "20": {
        loc: {
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 267,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 267,
            column: 17
          }
        }, {
          start: {
            line: 262,
            column: 21
          },
          end: {
            line: 267,
            column: 17
          }
        }],
        line: 256
      },
      "21": {
        loc: {
          start: {
            line: 258,
            column: 20
          },
          end: {
            line: 260,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 20
          },
          end: {
            line: 260,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "22": {
        loc: {
          start: {
            line: 262,
            column: 21
          },
          end: {
            line: 267,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 21
          },
          end: {
            line: 267,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "23": {
        loc: {
          start: {
            line: 264,
            column: 20
          },
          end: {
            line: 266,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 20
          },
          end: {
            line: 266,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/redis/redisService.ts",
      mappings: ";;;;;;AACA,8CAAoD;AACpD,gEAAwC;AAExC,MAAa,YAAY;IAIvB;QAFQ,gBAAW,GAAY,KAAK,CAAC;QAGnC,IAAI,CAAC,MAAM,GAAG,IAAA,sBAAc,GAAE,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,OAAO;QACX,IAAI,CAAC;YACH,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;gBAC7C,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YAC9B,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACnD,iCAAiC;YACjC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,KAAK,CAAC,UAAU;QACd,IAAI,CAAC;YACH,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;gBACrB,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YAC3B,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC;IAED,KAAK,CAAC,IAAI;QACR,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QAClC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;YAC1C,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,mBAAmB;IACnB,KAAK,CAAC,QAAQ,CAAC,GAAW,EAAE,KAAU,EAAE,UAAmB;QACzD,IAAI,CAAC;YACH,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC9C,IAAI,UAAU,EAAE,CAAC;gBACf,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;YAC5D,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;YAC3D,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,QAAQ,CAAI,GAAW;QAC3B,IAAI,CAAC;YACH,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACzC,OAAO,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC1C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,+BAA+B,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;YAC3D,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,GAAW;QAC3B,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,kCAAkC,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;YAC9D,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,OAAgB;QAC/B,IAAI,CAAC;YACH,IAAI,OAAO,EAAE,CAAC;gBACZ,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC7C,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACpB,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC9B,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YAC9B,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YAC9C,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,GAAW;QACtB,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7C,OAAO,MAAM,KAAK,CAAC,CAAC;QACtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,qCAAqC,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;YACjE,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,GAAW,EAAE,UAAkB;QAC1C,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QAC5C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,gCAAgC,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;YAC5D,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,qBAAqB;IACrB,KAAK,CAAC,UAAU,CAAC,SAAiB,EAAE,WAAgB,EAAE,aAAqB,IAAI;QAC7E,MAAM,GAAG,GAAG,WAAW,SAAS,EAAE,CAAC;QACnC,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,UAAU,CAAI,SAAiB;QACnC,MAAM,GAAG,GAAG,WAAW,SAAS,EAAE,CAAC;QACnC,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAI,GAAG,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,SAAiB;QACnC,MAAM,GAAG,GAAG,WAAW,SAAS,EAAE,CAAC;QACnC,MAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,SAAiB,EAAE,aAAqB,IAAI;QAC/D,MAAM,GAAG,GAAG,WAAW,SAAS,EAAE,CAAC;QACnC,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;IACrC,CAAC;IAED,gBAAgB;IAChB,KAAK,CAAC,kBAAkB,CAAC,GAAW,EAAE,gBAAwB,EAAE;QAC9D,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEjD,IAAI,YAAY,KAAK,CAAC,EAAE,CAAC;gBACvB,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;YAC/C,CAAC;YAED,OAAO,YAAY,CAAC;QACtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,0CAA0C,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;YACtE,OAAO,CAAC,CAAC;QACX,CAAC;IACH,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,GAAW;QAC5B,IAAI,CAAC;YACH,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACzC,OAAO,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,oCAAoC,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;YAChE,OAAO,CAAC,CAAC;QACX,CAAC;IACH,CAAC;IAED,wBAAwB;IACxB,KAAK,CAAC,YAAY,CAAC,MAAc,EAAE,GAAW,EAAE,KAAU,EAAE,UAAmB;QAC7E,MAAM,QAAQ,GAAG,QAAQ,MAAM,IAAI,GAAG,EAAE,CAAC;QACzC,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,YAAY,CAAI,MAAc,EAAE,GAAW;QAC/C,MAAM,QAAQ,GAAG,QAAQ,MAAM,IAAI,GAAG,EAAE,CAAC;QACzC,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAI,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,MAAc,EAAE,GAAY;QAChD,IAAI,GAAG,EAAE,CAAC;YACR,MAAM,QAAQ,GAAG,QAAQ,MAAM,IAAI,GAAG,EAAE,CAAC;YACzC,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC;aAAM,CAAC;YACN,MAAM,OAAO,GAAG,QAAQ,MAAM,IAAI,CAAC;YACnC,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IAED,8BAA8B;IAC9B,KAAK,CAAC,kBAAkB,CAAC,YAAoB,EAAE,GAAW,EAAE,KAAU,EAAE,UAAmB;QACzF,MAAM,QAAQ,GAAG,QAAQ,YAAY,IAAI,GAAG,EAAE,CAAC;QAC/C,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAI,YAAoB,EAAE,GAAW;QAC3D,MAAM,QAAQ,GAAG,QAAQ,YAAY,IAAI,GAAG,EAAE,CAAC;QAC/C,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAI,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,YAAoB,EAAE,GAAY;QAC5D,IAAI,GAAG,EAAE,CAAC;YACR,MAAM,QAAQ,GAAG,QAAQ,YAAY,IAAI,GAAG,EAAE,CAAC;YAC/C,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC;aAAM,CAAC;YACN,MAAM,OAAO,GAAG,QAAQ,YAAY,IAAI,CAAC;YACzC,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IAED,sBAAsB;IACtB,KAAK,CAAC,cAAc,CAAC,GAAW,EAAE,KAAU,EAAE,UAAmB;QAC/D,MAAM,QAAQ,GAAG,UAAU,GAAG,EAAE,CAAC;QACjC,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,cAAc,CAAI,GAAW;QACjC,MAAM,QAAQ,GAAG,UAAU,GAAG,EAAE,CAAC;QACjC,OAAO,MAAM,IAAI,CAAC,cAAc,CAAI,QAAQ,CAAC,CAAC;IAChD,CAAC;IAED,eAAe;IACf,KAAK,CAAC,WAAW;QACf,IAAI,CAAC;YACH,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACtB,OAAO;oBACL,MAAM,EAAE,cAAc;oBACtB,OAAO,EAAE,+BAA+B;oBACxC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACpC,CAAC;YACJ,CAAC;YAED,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YACrC,IAAI,UAAU,KAAK,MAAM,EAAE,CAAC;gBAC1B,OAAO;oBACL,MAAM,EAAE,SAAS;oBACjB,OAAO,EAAE,+BAA+B;oBACxC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACpC,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,OAAO;oBACL,MAAM,EAAE,WAAW;oBACnB,OAAO,EAAE,yCAAyC;oBAClD,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACpC,CAAC;YACJ,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO;gBACL,MAAM,EAAE,OAAO;gBACf,OAAO,EAAE,8BAA8B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE;gBACjG,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC;QACJ,CAAC;IACH,CAAC;IAED,kBAAkB;IAClB,KAAK,CAAC,OAAO,CAAC,OAAe;QAC3B,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,kCAAkC,OAAO,GAAG,EAAE,KAAK,CAAC,CAAC;YAClE,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC/B,IAAI,IAAI,GAAG,CAAC,CAAC;YACb,IAAI,IAAI,GAAG,CAAC,CAAC;YAEb,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE,CAAC;oBACpC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC9B,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;wBACb,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC5B,CAAC;gBACH,CAAC;qBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAE,CAAC;oBAChD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC9B,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;wBACb,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC5B,CAAC;gBACH,CAAC;YACH,CAAC;YAED,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QACxB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACnD,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;QAC9B,CAAC;IACH,CAAC;IAED,oBAAoB;IACpB,mBAAmB;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;CACF;AA7RD,oCA6RC;AAED,4BAA4B;AACf,QAAA,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;AAE/C,sDAAsD;AAC/C,MAAM,QAAQ,GAAG,KAAK,EAAE,GAAW,EAAE,KAAU,EAAE,UAAmB,EAAiB,EAAE;IAC5F,MAAM,oBAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;AACtD,CAAC,CAAC;AAFW,QAAA,QAAQ,YAEnB;AAEK,MAAM,QAAQ,GAAG,KAAK,EAAK,GAAW,EAAqB,EAAE;IAClE,OAAO,MAAM,oBAAY,CAAC,QAAQ,CAAI,GAAG,CAAC,CAAC;AAC7C,CAAC,CAAC;AAFW,QAAA,QAAQ,YAEnB;AAEK,MAAM,WAAW,GAAG,KAAK,EAAE,GAAW,EAAiB,EAAE;IAC9D,MAAM,oBAAY,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;AACtC,CAAC,CAAC;AAFW,QAAA,WAAW,eAEtB;AAEK,MAAM,UAAU,GAAG,KAAK,EAAE,OAAgB,EAAiB,EAAE;IAClE,MAAM,oBAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AACzC,CAAC,CAAC;AAFW,QAAA,UAAU,cAErB",
      names: [],
      sources: ["/home/kim/tito/server/src/services/redis/redisService.ts"],
      sourcesContent: ["import { RedisClientType } from 'redis';\nimport { getRedisClient } from '../../config/redis';\nimport logger from '../../utils/logger';\n\nexport class RedisService {\n  private client: RedisClientType;\n  private isConnected: boolean = false;\n\n  constructor() {\n    this.client = getRedisClient();\n    this.isConnected = this.client.isOpen;\n  }\n\n  async connect(): Promise<void> {\n    try {\n      if (!this.isConnected && !this.client.isOpen) {\n        await this.client.connect();\n      }\n    } catch (error) {\n      logger.error('Failed to connect to Redis:', error);\n      // Don't throw error, just log it\n      this.isConnected = false;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    try {\n      if (this.isConnected) {\n        await this.client.quit();\n      }\n    } catch (error) {\n      logger.error('Failed to disconnect from Redis:', error);\n    }\n  }\n\n  async ping(): Promise<string> {\n    try {\n      return await this.client.ping();\n    } catch (error) {\n      logger.error('Redis ping failed:', error);\n      throw error;\n    }\n  }\n\n  // Cache Management\n  async setCache(key: string, value: any, ttlSeconds?: number): Promise<void> {\n    try {\n      const serializedValue = JSON.stringify(value);\n      if (ttlSeconds) {\n        await this.client.setEx(key, ttlSeconds, serializedValue);\n      } else {\n        await this.client.set(key, serializedValue);\n      }\n    } catch (error) {\n      logger.error(`Failed to set cache for key ${key}:`, error);\n      throw error;\n    }\n  }\n\n  async getCache<T>(key: string): Promise<T | null> {\n    try {\n      const value = await this.client.get(key);\n      return value ? JSON.parse(value) : null;\n    } catch (error) {\n      logger.error(`Failed to get cache for key ${key}:`, error);\n      return null;\n    }\n  }\n\n  async deleteCache(key: string): Promise<void> {\n    try {\n      await this.client.del(key);\n    } catch (error) {\n      logger.error(`Failed to delete cache for key ${key}:`, error);\n      throw error;\n    }\n  }\n\n  async clearCache(pattern?: string): Promise<void> {\n    try {\n      if (pattern) {\n        const keys = await this.client.keys(pattern);\n        if (keys.length > 0) {\n          await this.client.del(keys);\n        }\n      } else {\n        await this.client.flushDb();\n      }\n    } catch (error) {\n      logger.error('Failed to clear cache:', error);\n      throw error;\n    }\n  }\n\n  async exists(key: string): Promise<boolean> {\n    try {\n      const result = await this.client.exists(key);\n      return result === 1;\n    } catch (error) {\n      logger.error(`Failed to check existence for key ${key}:`, error);\n      return false;\n    }\n  }\n\n  async expire(key: string, ttlSeconds: number): Promise<void> {\n    try {\n      await this.client.expire(key, ttlSeconds);\n    } catch (error) {\n      logger.error(`Failed to set expiry for key ${key}:`, error);\n      throw error;\n    }\n  }\n\n  // Session Management\n  async setSession(sessionId: string, sessionData: any, ttlSeconds: number = 3600): Promise<void> {\n    const key = `session:${sessionId}`;\n    await this.setCache(key, sessionData, ttlSeconds);\n  }\n\n  async getSession<T>(sessionId: string): Promise<T | null> {\n    const key = `session:${sessionId}`;\n    return await this.getCache<T>(key);\n  }\n\n  async deleteSession(sessionId: string): Promise<void> {\n    const key = `session:${sessionId}`;\n    await this.deleteCache(key);\n  }\n\n  async refreshSession(sessionId: string, ttlSeconds: number = 3600): Promise<void> {\n    const key = `session:${sessionId}`;\n    await this.expire(key, ttlSeconds);\n  }\n\n  // Rate Limiting\n  async incrementRateLimit(key: string, windowSeconds: number = 60): Promise<number> {\n    try {\n      const currentCount = await this.client.incr(key);\n      \n      if (currentCount === 1) {\n        await this.client.expire(key, windowSeconds);\n      }\n      \n      return currentCount;\n    } catch (error) {\n      logger.error(`Failed to increment rate limit for key ${key}:`, error);\n      return 0;\n    }\n  }\n\n  async getRateLimit(key: string): Promise<number> {\n    try {\n      const count = await this.client.get(key);\n      return count ? parseInt(count) : 0;\n    } catch (error) {\n      logger.error(`Failed to get rate limit for key ${key}:`, error);\n      return 0;\n    }\n  }\n\n  // User-specific caching\n  async setUserCache(userId: string, key: string, value: any, ttlSeconds?: number): Promise<void> {\n    const cacheKey = `user:${userId}:${key}`;\n    await this.setCache(cacheKey, value, ttlSeconds);\n  }\n\n  async getUserCache<T>(userId: string, key: string): Promise<T | null> {\n    const cacheKey = `user:${userId}:${key}`;\n    return await this.getCache<T>(cacheKey);\n  }\n\n  async deleteUserCache(userId: string, key?: string): Promise<void> {\n    if (key) {\n      const cacheKey = `user:${userId}:${key}`;\n      await this.deleteCache(cacheKey);\n    } else {\n      const pattern = `user:${userId}:*`;\n      await this.clearCache(pattern);\n    }\n  }\n\n  // Department-specific caching\n  async setDepartmentCache(departmentId: string, key: string, value: any, ttlSeconds?: number): Promise<void> {\n    const cacheKey = `dept:${departmentId}:${key}`;\n    await this.setCache(cacheKey, value, ttlSeconds);\n  }\n\n  async getDepartmentCache<T>(departmentId: string, key: string): Promise<T | null> {\n    const cacheKey = `dept:${departmentId}:${key}`;\n    return await this.getCache<T>(cacheKey);\n  }\n\n  async deleteDepartmentCache(departmentId: string, key?: string): Promise<void> {\n    if (key) {\n      const cacheKey = `dept:${departmentId}:${key}`;\n      await this.deleteCache(cacheKey);\n    } else {\n      const pattern = `dept:${departmentId}:*`;\n      await this.clearCache(pattern);\n    }\n  }\n\n  // System-wide caching\n  async setSystemCache(key: string, value: any, ttlSeconds?: number): Promise<void> {\n    const cacheKey = `system:${key}`;\n    await this.setCache(cacheKey, value, ttlSeconds);\n  }\n\n  async getSystemCache<T>(key: string): Promise<T | null> {\n    const cacheKey = `system:${key}`;\n    return await this.getSystemCache<T>(cacheKey);\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: string; message: string; timestamp: string }> {\n    try {\n      if (!this.isConnected) {\n        return {\n          status: 'disconnected',\n          message: 'Redis client is not connected',\n          timestamp: new Date().toISOString()\n        };\n      }\n\n      const pingResult = await this.ping();\n      if (pingResult === 'PONG') {\n        return {\n          status: 'healthy',\n          message: 'Redis is responding correctly',\n          timestamp: new Date().toISOString()\n        };\n      } else {\n        return {\n          status: 'unhealthy',\n          message: 'Redis ping returned unexpected response',\n          timestamp: new Date().toISOString()\n        };\n      }\n    } catch (error) {\n      return {\n        status: 'error',\n        message: `Redis health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  // Utility methods\n  async getKeys(pattern: string): Promise<string[]> {\n    try {\n      return await this.client.keys(pattern);\n    } catch (error) {\n      logger.error(`Failed to get keys for pattern ${pattern}:`, error);\n      return [];\n    }\n  }\n\n  async getMemoryUsage(): Promise<{ used: number; peak: number }> {\n    try {\n      const info = await this.client.info('memory');\n      const lines = info.split('\\n');\n      let used = 0;\n      let peak = 0;\n\n      for (const line of lines) {\n        if (line.startsWith('used_memory:')) {\n          const parts = line.split(':');\n          if (parts[1]) {\n            used = parseInt(parts[1]);\n          }\n        } else if (line.startsWith('used_memory_peak:')) {\n          const parts = line.split(':');\n          if (parts[1]) {\n            peak = parseInt(parts[1]);\n          }\n        }\n      }\n\n      return { used, peak };\n    } catch (error) {\n      logger.error('Failed to get memory usage:', error);\n      return { used: 0, peak: 0 };\n    }\n  }\n\n  // Connection status\n  getConnectionStatus(): boolean {\n    return this.isConnected;\n  }\n}\n\n// Export singleton instance\nexport const redisService = new RedisService();\n\n// Export utility functions for backward compatibility\nexport const setCache = async (key: string, value: any, ttlSeconds?: number): Promise<void> => {\n  await redisService.setCache(key, value, ttlSeconds);\n};\n\nexport const getCache = async <T>(key: string): Promise<T | null> => {\n  return await redisService.getCache<T>(key);\n};\n\nexport const deleteCache = async (key: string): Promise<void> => {\n  await redisService.deleteCache(key);\n};\n\nexport const clearCache = async (pattern?: string): Promise<void> => {\n  await redisService.clearCache(pattern);\n}; "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ae9754f386b338797cac1fb17714d72525cf2b89"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1k09f2hf7v = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1k09f2hf7v();
var __importDefault =
/* istanbul ignore next */
(cov_1k09f2hf7v().s[0]++,
/* istanbul ignore next */
(cov_1k09f2hf7v().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1k09f2hf7v().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1k09f2hf7v().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1k09f2hf7v().f[0]++;
  cov_1k09f2hf7v().s[1]++;
  return /* istanbul ignore next */(cov_1k09f2hf7v().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1k09f2hf7v().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1k09f2hf7v().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1k09f2hf7v().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1k09f2hf7v().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1k09f2hf7v().s[3]++;
exports.clearCache = exports.deleteCache = exports.getCache = exports.setCache = exports.redisService = exports.RedisService = void 0;
const redis_1 =
/* istanbul ignore next */
(cov_1k09f2hf7v().s[4]++, require("../../config/redis"));
const logger_1 =
/* istanbul ignore next */
(cov_1k09f2hf7v().s[5]++, __importDefault(require("../../utils/logger")));
class RedisService {
  constructor() {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[1]++;
    cov_1k09f2hf7v().s[6]++;
    this.isConnected = false;
    /* istanbul ignore next */
    cov_1k09f2hf7v().s[7]++;
    this.client = (0, redis_1.getRedisClient)();
    /* istanbul ignore next */
    cov_1k09f2hf7v().s[8]++;
    this.isConnected = this.client.isOpen;
  }
  async connect() {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[2]++;
    cov_1k09f2hf7v().s[9]++;
    try {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[10]++;
      if (
      /* istanbul ignore next */
      (cov_1k09f2hf7v().b[4][0]++, !this.isConnected) &&
      /* istanbul ignore next */
      (cov_1k09f2hf7v().b[4][1]++, !this.client.isOpen)) {
        /* istanbul ignore next */
        cov_1k09f2hf7v().b[3][0]++;
        cov_1k09f2hf7v().s[11]++;
        await this.client.connect();
      } else
      /* istanbul ignore next */
      {
        cov_1k09f2hf7v().b[3][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[12]++;
      logger_1.default.error('Failed to connect to Redis:', error);
      // Don't throw error, just log it
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[13]++;
      this.isConnected = false;
    }
  }
  async disconnect() {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[3]++;
    cov_1k09f2hf7v().s[14]++;
    try {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[15]++;
      if (this.isConnected) {
        /* istanbul ignore next */
        cov_1k09f2hf7v().b[5][0]++;
        cov_1k09f2hf7v().s[16]++;
        await this.client.quit();
      } else
      /* istanbul ignore next */
      {
        cov_1k09f2hf7v().b[5][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[17]++;
      logger_1.default.error('Failed to disconnect from Redis:', error);
    }
  }
  async ping() {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[4]++;
    cov_1k09f2hf7v().s[18]++;
    try {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[19]++;
      return await this.client.ping();
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[20]++;
      logger_1.default.error('Redis ping failed:', error);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[21]++;
      throw error;
    }
  }
  // Cache Management
  async setCache(key, value, ttlSeconds) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[5]++;
    cov_1k09f2hf7v().s[22]++;
    try {
      const serializedValue =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[23]++, JSON.stringify(value));
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[24]++;
      if (ttlSeconds) {
        /* istanbul ignore next */
        cov_1k09f2hf7v().b[6][0]++;
        cov_1k09f2hf7v().s[25]++;
        await this.client.setEx(key, ttlSeconds, serializedValue);
      } else {
        /* istanbul ignore next */
        cov_1k09f2hf7v().b[6][1]++;
        cov_1k09f2hf7v().s[26]++;
        await this.client.set(key, serializedValue);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[27]++;
      logger_1.default.error(`Failed to set cache for key ${key}:`, error);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[28]++;
      throw error;
    }
  }
  async getCache(key) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[6]++;
    cov_1k09f2hf7v().s[29]++;
    try {
      const value =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[30]++, await this.client.get(key));
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[31]++;
      return value ?
      /* istanbul ignore next */
      (cov_1k09f2hf7v().b[7][0]++, JSON.parse(value)) :
      /* istanbul ignore next */
      (cov_1k09f2hf7v().b[7][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[32]++;
      logger_1.default.error(`Failed to get cache for key ${key}:`, error);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[33]++;
      return null;
    }
  }
  async deleteCache(key) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[7]++;
    cov_1k09f2hf7v().s[34]++;
    try {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[35]++;
      await this.client.del(key);
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[36]++;
      logger_1.default.error(`Failed to delete cache for key ${key}:`, error);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[37]++;
      throw error;
    }
  }
  async clearCache(pattern) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[8]++;
    cov_1k09f2hf7v().s[38]++;
    try {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[39]++;
      if (pattern) {
        /* istanbul ignore next */
        cov_1k09f2hf7v().b[8][0]++;
        const keys =
        /* istanbul ignore next */
        (cov_1k09f2hf7v().s[40]++, await this.client.keys(pattern));
        /* istanbul ignore next */
        cov_1k09f2hf7v().s[41]++;
        if (keys.length > 0) {
          /* istanbul ignore next */
          cov_1k09f2hf7v().b[9][0]++;
          cov_1k09f2hf7v().s[42]++;
          await this.client.del(keys);
        } else
        /* istanbul ignore next */
        {
          cov_1k09f2hf7v().b[9][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_1k09f2hf7v().b[8][1]++;
        cov_1k09f2hf7v().s[43]++;
        await this.client.flushDb();
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[44]++;
      logger_1.default.error('Failed to clear cache:', error);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[45]++;
      throw error;
    }
  }
  async exists(key) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[9]++;
    cov_1k09f2hf7v().s[46]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[47]++, await this.client.exists(key));
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[48]++;
      return result === 1;
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[49]++;
      logger_1.default.error(`Failed to check existence for key ${key}:`, error);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[50]++;
      return false;
    }
  }
  async expire(key, ttlSeconds) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[10]++;
    cov_1k09f2hf7v().s[51]++;
    try {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[52]++;
      await this.client.expire(key, ttlSeconds);
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[53]++;
      logger_1.default.error(`Failed to set expiry for key ${key}:`, error);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[54]++;
      throw error;
    }
  }
  // Session Management
  async setSession(sessionId, sessionData, ttlSeconds =
  /* istanbul ignore next */
  (cov_1k09f2hf7v().b[10][0]++, 3600)) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[11]++;
    const key =
    /* istanbul ignore next */
    (cov_1k09f2hf7v().s[55]++, `session:${sessionId}`);
    /* istanbul ignore next */
    cov_1k09f2hf7v().s[56]++;
    await this.setCache(key, sessionData, ttlSeconds);
  }
  async getSession(sessionId) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[12]++;
    const key =
    /* istanbul ignore next */
    (cov_1k09f2hf7v().s[57]++, `session:${sessionId}`);
    /* istanbul ignore next */
    cov_1k09f2hf7v().s[58]++;
    return await this.getCache(key);
  }
  async deleteSession(sessionId) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[13]++;
    const key =
    /* istanbul ignore next */
    (cov_1k09f2hf7v().s[59]++, `session:${sessionId}`);
    /* istanbul ignore next */
    cov_1k09f2hf7v().s[60]++;
    await this.deleteCache(key);
  }
  async refreshSession(sessionId, ttlSeconds =
  /* istanbul ignore next */
  (cov_1k09f2hf7v().b[11][0]++, 3600)) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[14]++;
    const key =
    /* istanbul ignore next */
    (cov_1k09f2hf7v().s[61]++, `session:${sessionId}`);
    /* istanbul ignore next */
    cov_1k09f2hf7v().s[62]++;
    await this.expire(key, ttlSeconds);
  }
  // Rate Limiting
  async incrementRateLimit(key, windowSeconds =
  /* istanbul ignore next */
  (cov_1k09f2hf7v().b[12][0]++, 60)) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[15]++;
    cov_1k09f2hf7v().s[63]++;
    try {
      const currentCount =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[64]++, await this.client.incr(key));
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[65]++;
      if (currentCount === 1) {
        /* istanbul ignore next */
        cov_1k09f2hf7v().b[13][0]++;
        cov_1k09f2hf7v().s[66]++;
        await this.client.expire(key, windowSeconds);
      } else
      /* istanbul ignore next */
      {
        cov_1k09f2hf7v().b[13][1]++;
      }
      cov_1k09f2hf7v().s[67]++;
      return currentCount;
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[68]++;
      logger_1.default.error(`Failed to increment rate limit for key ${key}:`, error);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[69]++;
      return 0;
    }
  }
  async getRateLimit(key) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[16]++;
    cov_1k09f2hf7v().s[70]++;
    try {
      const count =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[71]++, await this.client.get(key));
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[72]++;
      return count ?
      /* istanbul ignore next */
      (cov_1k09f2hf7v().b[14][0]++, parseInt(count)) :
      /* istanbul ignore next */
      (cov_1k09f2hf7v().b[14][1]++, 0);
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[73]++;
      logger_1.default.error(`Failed to get rate limit for key ${key}:`, error);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[74]++;
      return 0;
    }
  }
  // User-specific caching
  async setUserCache(userId, key, value, ttlSeconds) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[17]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1k09f2hf7v().s[75]++, `user:${userId}:${key}`);
    /* istanbul ignore next */
    cov_1k09f2hf7v().s[76]++;
    await this.setCache(cacheKey, value, ttlSeconds);
  }
  async getUserCache(userId, key) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[18]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1k09f2hf7v().s[77]++, `user:${userId}:${key}`);
    /* istanbul ignore next */
    cov_1k09f2hf7v().s[78]++;
    return await this.getCache(cacheKey);
  }
  async deleteUserCache(userId, key) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[19]++;
    cov_1k09f2hf7v().s[79]++;
    if (key) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().b[15][0]++;
      const cacheKey =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[80]++, `user:${userId}:${key}`);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[81]++;
      await this.deleteCache(cacheKey);
    } else {
      /* istanbul ignore next */
      cov_1k09f2hf7v().b[15][1]++;
      const pattern =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[82]++, `user:${userId}:*`);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[83]++;
      await this.clearCache(pattern);
    }
  }
  // Department-specific caching
  async setDepartmentCache(departmentId, key, value, ttlSeconds) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[20]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1k09f2hf7v().s[84]++, `dept:${departmentId}:${key}`);
    /* istanbul ignore next */
    cov_1k09f2hf7v().s[85]++;
    await this.setCache(cacheKey, value, ttlSeconds);
  }
  async getDepartmentCache(departmentId, key) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[21]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1k09f2hf7v().s[86]++, `dept:${departmentId}:${key}`);
    /* istanbul ignore next */
    cov_1k09f2hf7v().s[87]++;
    return await this.getCache(cacheKey);
  }
  async deleteDepartmentCache(departmentId, key) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[22]++;
    cov_1k09f2hf7v().s[88]++;
    if (key) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().b[16][0]++;
      const cacheKey =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[89]++, `dept:${departmentId}:${key}`);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[90]++;
      await this.deleteCache(cacheKey);
    } else {
      /* istanbul ignore next */
      cov_1k09f2hf7v().b[16][1]++;
      const pattern =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[91]++, `dept:${departmentId}:*`);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[92]++;
      await this.clearCache(pattern);
    }
  }
  // System-wide caching
  async setSystemCache(key, value, ttlSeconds) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[23]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1k09f2hf7v().s[93]++, `system:${key}`);
    /* istanbul ignore next */
    cov_1k09f2hf7v().s[94]++;
    await this.setCache(cacheKey, value, ttlSeconds);
  }
  async getSystemCache(key) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[24]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1k09f2hf7v().s[95]++, `system:${key}`);
    /* istanbul ignore next */
    cov_1k09f2hf7v().s[96]++;
    return await this.getSystemCache(cacheKey);
  }
  // Health check
  async healthCheck() {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[25]++;
    cov_1k09f2hf7v().s[97]++;
    try {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[98]++;
      if (!this.isConnected) {
        /* istanbul ignore next */
        cov_1k09f2hf7v().b[17][0]++;
        cov_1k09f2hf7v().s[99]++;
        return {
          status: 'disconnected',
          message: 'Redis client is not connected',
          timestamp: new Date().toISOString()
        };
      } else
      /* istanbul ignore next */
      {
        cov_1k09f2hf7v().b[17][1]++;
      }
      const pingResult =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[100]++, await this.ping());
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[101]++;
      if (pingResult === 'PONG') {
        /* istanbul ignore next */
        cov_1k09f2hf7v().b[18][0]++;
        cov_1k09f2hf7v().s[102]++;
        return {
          status: 'healthy',
          message: 'Redis is responding correctly',
          timestamp: new Date().toISOString()
        };
      } else {
        /* istanbul ignore next */
        cov_1k09f2hf7v().b[18][1]++;
        cov_1k09f2hf7v().s[103]++;
        return {
          status: 'unhealthy',
          message: 'Redis ping returned unexpected response',
          timestamp: new Date().toISOString()
        };
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[104]++;
      return {
        status: 'error',
        message: `Redis health check failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1k09f2hf7v().b[19][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1k09f2hf7v().b[19][1]++, 'Unknown error')}`,
        timestamp: new Date().toISOString()
      };
    }
  }
  // Utility methods
  async getKeys(pattern) {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[26]++;
    cov_1k09f2hf7v().s[105]++;
    try {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[106]++;
      return await this.client.keys(pattern);
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[107]++;
      logger_1.default.error(`Failed to get keys for pattern ${pattern}:`, error);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[108]++;
      return [];
    }
  }
  async getMemoryUsage() {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[27]++;
    cov_1k09f2hf7v().s[109]++;
    try {
      const info =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[110]++, await this.client.info('memory'));
      const lines =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[111]++, info.split('\n'));
      let used =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[112]++, 0);
      let peak =
      /* istanbul ignore next */
      (cov_1k09f2hf7v().s[113]++, 0);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[114]++;
      for (const line of lines) {
        /* istanbul ignore next */
        cov_1k09f2hf7v().s[115]++;
        if (line.startsWith('used_memory:')) {
          /* istanbul ignore next */
          cov_1k09f2hf7v().b[20][0]++;
          const parts =
          /* istanbul ignore next */
          (cov_1k09f2hf7v().s[116]++, line.split(':'));
          /* istanbul ignore next */
          cov_1k09f2hf7v().s[117]++;
          if (parts[1]) {
            /* istanbul ignore next */
            cov_1k09f2hf7v().b[21][0]++;
            cov_1k09f2hf7v().s[118]++;
            used = parseInt(parts[1]);
          } else
          /* istanbul ignore next */
          {
            cov_1k09f2hf7v().b[21][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_1k09f2hf7v().b[20][1]++;
          cov_1k09f2hf7v().s[119]++;
          if (line.startsWith('used_memory_peak:')) {
            /* istanbul ignore next */
            cov_1k09f2hf7v().b[22][0]++;
            const parts =
            /* istanbul ignore next */
            (cov_1k09f2hf7v().s[120]++, line.split(':'));
            /* istanbul ignore next */
            cov_1k09f2hf7v().s[121]++;
            if (parts[1]) {
              /* istanbul ignore next */
              cov_1k09f2hf7v().b[23][0]++;
              cov_1k09f2hf7v().s[122]++;
              peak = parseInt(parts[1]);
            } else
            /* istanbul ignore next */
            {
              cov_1k09f2hf7v().b[23][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_1k09f2hf7v().b[22][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[123]++;
      return {
        used,
        peak
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[124]++;
      logger_1.default.error('Failed to get memory usage:', error);
      /* istanbul ignore next */
      cov_1k09f2hf7v().s[125]++;
      return {
        used: 0,
        peak: 0
      };
    }
  }
  // Connection status
  getConnectionStatus() {
    /* istanbul ignore next */
    cov_1k09f2hf7v().f[28]++;
    cov_1k09f2hf7v().s[126]++;
    return this.isConnected;
  }
}
/* istanbul ignore next */
cov_1k09f2hf7v().s[127]++;
exports.RedisService = RedisService;
// Export singleton instance
/* istanbul ignore next */
cov_1k09f2hf7v().s[128]++;
exports.redisService = new RedisService();
// Export utility functions for backward compatibility
/* istanbul ignore next */
cov_1k09f2hf7v().s[129]++;
const setCache = async (key, value, ttlSeconds) => {
  /* istanbul ignore next */
  cov_1k09f2hf7v().f[29]++;
  cov_1k09f2hf7v().s[130]++;
  await exports.redisService.setCache(key, value, ttlSeconds);
};
/* istanbul ignore next */
cov_1k09f2hf7v().s[131]++;
exports.setCache = setCache;
/* istanbul ignore next */
cov_1k09f2hf7v().s[132]++;
const getCache = async key => {
  /* istanbul ignore next */
  cov_1k09f2hf7v().f[30]++;
  cov_1k09f2hf7v().s[133]++;
  return await exports.redisService.getCache(key);
};
/* istanbul ignore next */
cov_1k09f2hf7v().s[134]++;
exports.getCache = getCache;
/* istanbul ignore next */
cov_1k09f2hf7v().s[135]++;
const deleteCache = async key => {
  /* istanbul ignore next */
  cov_1k09f2hf7v().f[31]++;
  cov_1k09f2hf7v().s[136]++;
  await exports.redisService.deleteCache(key);
};
/* istanbul ignore next */
cov_1k09f2hf7v().s[137]++;
exports.deleteCache = deleteCache;
/* istanbul ignore next */
cov_1k09f2hf7v().s[138]++;
const clearCache = async pattern => {
  /* istanbul ignore next */
  cov_1k09f2hf7v().f[32]++;
  cov_1k09f2hf7v().s[139]++;
  await exports.redisService.clearCache(pattern);
};
/* istanbul ignore next */
cov_1k09f2hf7v().s[140]++;
exports.clearCache = clearCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,