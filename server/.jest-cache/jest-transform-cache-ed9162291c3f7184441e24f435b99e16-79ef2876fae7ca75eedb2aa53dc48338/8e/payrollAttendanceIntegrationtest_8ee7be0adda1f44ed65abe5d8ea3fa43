fafe906711d8c8849cfc82a3f37a520b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const payrollService_1 = require("../../src/services/payroll/payrollService");
const attendanceService_1 = require("../../src/services/attendance/attendanceService");
const testHelpers_1 = require("../utils/testHelpers");
const setup_1 = require("../setup");
(0, globals_1.describe)('Payroll-Attendance Integration', () => {
    let testHelpers;
    let createdUserIds = [];
    let createdEmployeeIds = [];
    let createdDepartmentIds = [];
    (0, globals_1.beforeAll)(async () => {
        const { testDbPool } = await (0, setup_1.initializeTestConnections)();
        testHelpers = new testHelpers_1.TestHelpers(testDbPool);
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up created data after each test
        for (const employeeId of createdEmployeeIds) {
            await testHelpers.deleteEmployee(employeeId).catch(() => { });
        }
        for (const userId of createdUserIds) {
            await testHelpers.deleteUser(userId).catch(() => { });
        }
        for (const departmentId of createdDepartmentIds) {
            await testHelpers.deleteDepartment(departmentId).catch(() => { });
        }
        createdEmployeeIds = [];
        createdUserIds = [];
        createdDepartmentIds = [];
    });
    (0, globals_1.describe)('Employee Lifecycle Integration', () => {
        (0, globals_1.it)('should handle complete employee workflow from attendance to payroll', async () => {
            // 1. Create department
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            // 2. Create employee
            const employee = await testHelpers.createTestEmployee({
                departmentId: department.id,
                employmentType: 'regular',
                baseSalary: 50000
            });
            createdEmployeeIds.push(employee.id);
            createdUserIds.push(employee.userId);
            // 3. Test payroll operations (without creating period)
            // 4. Test attendance operations
            const clockInData = {
                employeeId: employee.id,
                qrCodeHash: 'test-qr-hash',
                timestamp: new Date('2025-01-15T08:00:00Z'),
                selfieImagePath: '/uploads/selfies/test-selfie.jpg'
            };
            const attendanceResult = await attendanceService_1.attendanceService.clockIn(clockInData);
            (0, globals_1.expect)(attendanceResult).toHaveProperty('employeeId');
            (0, globals_1.expect)(attendanceResult.employeeId).toBe(employee.id);
            // 5. Test payroll operations
            const payrollPeriods = await payrollService_1.payrollService.getPayrollPeriods();
            (0, globals_1.expect)(payrollPeriods).toHaveProperty('periods');
            (0, globals_1.expect)(Array.isArray(payrollPeriods.periods)).toBe(true);
            const payrollRecords = await payrollService_1.payrollService.getPayrollRecords();
            (0, globals_1.expect)(payrollRecords).toHaveProperty('records');
            (0, globals_1.expect)(Array.isArray(payrollRecords.records)).toBe(true);
            // 6. Test attendance history
            const attendanceHistory = await attendanceService_1.attendanceService.getEmployeeAttendanceHistory(employee.id, new Date('2025-01-01'), new Date('2025-01-31'));
            (0, globals_1.expect)(attendanceHistory).toHaveProperty('records');
            (0, globals_1.expect)(attendanceHistory).toHaveProperty('total');
            (0, globals_1.expect)(Array.isArray(attendanceHistory.records)).toBe(true);
            // 7. Test payroll statistics
            const payrollStats = await payrollService_1.payrollService.getPayrollStats();
            (0, globals_1.expect)(payrollStats).toHaveProperty('totalEmployees');
            (0, globals_1.expect)(payrollStats).toHaveProperty('totalPayroll');
            (0, globals_1.expect)(typeof payrollStats.totalEmployees).toBe('number');
            (0, globals_1.expect)(typeof payrollStats.totalPayroll).toBe('number');
        });
        (0, globals_1.it)('should handle multiple employees in same department', async () => {
            // 1. Create department
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            // 2. Create multiple employees
            const employees = [];
            for (let i = 0; i < 3; i++) {
                const employee = await testHelpers.createTestEmployee({
                    departmentId: department.id,
                    employmentType: 'regular',
                    baseSalary: 40000 + (i * 10000)
                });
                employees.push(employee);
                createdEmployeeIds.push(employee.id);
                createdUserIds.push(employee.userId);
            }
            // 3. Test attendance for each employee
            for (const employee of employees) {
                const clockInData = {
                    employeeId: employee.id,
                    qrCodeHash: `test-qr-hash-${employee.id}`,
                    timestamp: new Date('2025-01-15T08:00:00Z'),
                    selfieImagePath: `/uploads/selfies/test-selfie-${employee.id}.jpg`
                };
                const attendanceResult = await attendanceService_1.attendanceService.clockIn(clockInData);
                (0, globals_1.expect)(attendanceResult.employeeId).toBe(employee.id);
            }
            // 4. Test payroll operations with multiple employees
            const payrollStats = await payrollService_1.payrollService.getPayrollStats();
            (0, globals_1.expect)(payrollStats.totalEmployees).toBeGreaterThanOrEqual(0);
            // 5. Test attendance records for all employees
            const attendanceRecords = await attendanceService_1.attendanceService.getAttendanceRecords(new Date('2025-01-01'), new Date('2025-01-31'));
            (0, globals_1.expect)(attendanceRecords).toHaveProperty('records');
            (0, globals_1.expect)(attendanceRecords).toHaveProperty('total');
            (0, globals_1.expect)(Array.isArray(attendanceRecords.records)).toBe(true);
        });
    });
    (0, globals_1.describe)('Data Consistency Integration', () => {
        (0, globals_1.it)('should maintain data consistency between attendance and payroll', async () => {
            // 1. Create test data
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            const employee = await testHelpers.createTestEmployee({
                departmentId: department.id,
                employmentType: 'regular',
                baseSalary: 60000
            });
            createdEmployeeIds.push(employee.id);
            createdUserIds.push(employee.userId);
            // 2. Record attendance
            const clockInData = {
                employeeId: employee.id,
                qrCodeHash: 'test-qr-hash',
                timestamp: new Date('2025-01-15T08:00:00Z'),
                selfieImagePath: '/uploads/selfies/test-selfie.jpg'
            };
            const attendanceResult = await attendanceService_1.attendanceService.clockIn(clockInData);
            (0, globals_1.expect)(attendanceResult.employeeId).toBe(employee.id);
            // 3. Verify attendance data
            const attendanceSummary = await attendanceService_1.attendanceService.getAttendanceSummary(employee.id, new Date('2025-01-15'));
            (0, globals_1.expect)(attendanceSummary.employeeId).toBe(employee.id);
            (0, globals_1.expect)(attendanceSummary.date).toBeDefined();
            // 4. Verify payroll data consistency
            const payrollRecords = await payrollService_1.payrollService.getPayrollRecords();
            (0, globals_1.expect)(payrollRecords).toHaveProperty('records');
            (0, globals_1.expect)(Array.isArray(payrollRecords.records)).toBe(true);
            // 5. Test current attendance status
            const currentStatus = await attendanceService_1.attendanceService.getCurrentAttendanceStatus(employee.id);
            (0, globals_1.expect)(currentStatus).toHaveProperty('isClockedIn');
            (0, globals_1.expect)(currentStatus).toHaveProperty('todayHours');
            (0, globals_1.expect)(typeof currentStatus.isClockedIn).toBe('boolean');
            (0, globals_1.expect)(typeof currentStatus.todayHours).toBe('number');
        });
        (0, globals_1.it)('should handle error scenarios gracefully', async () => {
            // Test with non-existent employee
            const nonExistentEmployeeId = 'non-existent-id';
            // Should handle gracefully
            await (0, globals_1.expect)(attendanceService_1.attendanceService.getAttendanceSummary(nonExistentEmployeeId, new Date('2025-01-15'))).resolves.toBeDefined();
            await (0, globals_1.expect)(attendanceService_1.attendanceService.getCurrentAttendanceStatus(nonExistentEmployeeId)).resolves.toBeDefined();
            // Test with invalid dates
            const invalidDate = new Date('invalid-date');
            await (0, globals_1.expect)(attendanceService_1.attendanceService.getEmployeeAttendanceHistory(nonExistentEmployeeId, invalidDate, invalidDate)).resolves.toBeDefined();
        });
    });
    (0, globals_1.describe)('Service Interaction Patterns', () => {
        (0, globals_1.it)('should support concurrent operations', async () => {
            // 1. Create test data
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            const employee = await testHelpers.createTestEmployee({
                departmentId: department.id,
                employmentType: 'regular',
                baseSalary: 55000
            });
            createdEmployeeIds.push(employee.id);
            createdUserIds.push(employee.userId);
            // 2. Perform concurrent operations
            const promises = [
                attendanceService_1.attendanceService.getCurrentAttendanceStatus(employee.id),
                payrollService_1.payrollService.getPayrollStats(),
                attendanceService_1.attendanceService.getEmployeeAttendanceStats(employee.id, new Date('2025-01-01'), new Date('2025-01-31')),
                payrollService_1.payrollService.getDeductionTypes(),
                payrollService_1.payrollService.getBenefitTypes()
            ];
            const results = await Promise.all(promises);
            // 3. Verify all operations completed successfully
            (0, globals_1.expect)(results).toHaveLength(5);
            results.forEach(result => {
                (0, globals_1.expect)(result).toBeDefined();
            });
            // 4. Verify specific result types
            (0, globals_1.expect)(results[0]).toHaveProperty('isClockedIn');
            (0, globals_1.expect)(results[1]).toHaveProperty('totalEmployees');
            (0, globals_1.expect)(results[2]).toHaveProperty('totalWorkedHours');
            (0, globals_1.expect)(results[3]).toHaveProperty('records');
            (0, globals_1.expect)(results[4]).toHaveProperty('records');
        });
        (0, globals_1.it)('should handle service dependencies correctly', async () => {
            // 1. Create test data
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            const employee = await testHelpers.createTestEmployee({
                departmentId: department.id,
                employmentType: 'regular',
                baseSalary: 45000
            });
            createdEmployeeIds.push(employee.id);
            createdUserIds.push(employee.userId);
            // 2. Test service dependency chain
            // Attendance -> Employee -> Department -> Payroll
            const attendanceStatus = await attendanceService_1.attendanceService.getCurrentAttendanceStatus(employee.id);
            (0, globals_1.expect)(attendanceStatus).toBeDefined();
            const attendanceHistory = await attendanceService_1.attendanceService.getEmployeeAttendanceHistory(employee.id, new Date('2025-01-01'), new Date('2025-01-31'));
            (0, globals_1.expect)(attendanceHistory).toBeDefined();
            const payrollStats = await payrollService_1.payrollService.getPayrollStats();
            (0, globals_1.expect)(payrollStats).toBeDefined();
            // 3. Verify data relationships
            (0, globals_1.expect)(attendanceStatus).toHaveProperty('isClockedIn');
            (0, globals_1.expect)(attendanceHistory).toHaveProperty('records');
            (0, globals_1.expect)(payrollStats).toHaveProperty('totalEmployees');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,