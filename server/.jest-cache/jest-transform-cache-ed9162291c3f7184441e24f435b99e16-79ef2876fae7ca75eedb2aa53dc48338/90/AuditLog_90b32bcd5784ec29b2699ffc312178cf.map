{"version":3,"names":["cov_al9khyywq","actualCoverage","s","database_1","require","AuditLogModel","constructor","f","pool","getPool","createAuditLog","data","query","values","tableName","recordId","action","oldData","b","JSON","stringify","newData","changedByUserId","result","mapRowToAuditLog","rows","findById","id","length","listAuditLogs","params","page","limit","startDate","endDate","search","sortBy","sortOrder","offset","whereConditions","valueIndex","push","whereClause","join","countQuery","countResult","total","parseInt","count","toUpperCase","logs","map","row","totalPages","Math","ceil","getAuditLogsByRecord","getAuditLogsByUser","userId","getAuditStats","totalQuery","totalResult","totalLogs","actionQuery","actionResult","tableQuery","tableResult","recentQuery","recentResult","recentActivity","logsByAction","logsByTable","deleteOldAuditLogs","daysToKeep","rowCount","table_name","record_id","old_data","parse","new_data","changed_by_user_id","changedAt","changed_at","exports"],"sources":["/home/kim/tito/server/src/models/audit/AuditLog.ts"],"sourcesContent":["import { Pool } from 'pg';\nimport { getPool } from '../../config/database';\n\nexport interface AuditLog {\n  id: string;\n  tableName: string;\n  recordId: string;\n  action: 'INSERT' | 'UPDATE' | 'DELETE';\n  oldData: any | null;\n  newData: any | null;\n  changedByUserId: string | null;\n  changedAt: Date;\n}\n\nexport interface CreateAuditLogData {\n  tableName: string;\n  recordId: string;\n  action: 'INSERT' | 'UPDATE' | 'DELETE';\n  oldData?: any;\n  newData?: any;\n  changedByUserId?: string;\n}\n\nexport interface AuditLogListParams {\n  page?: number;\n  limit?: number;\n  tableName?: string;\n  recordId?: string;\n  action?: 'INSERT' | 'UPDATE' | 'DELETE';\n  changedByUserId?: string;\n  startDate?: Date;\n  endDate?: Date;\n  search?: string;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport class AuditLogModel {\n  private pool: Pool;\n\n  constructor() {\n    this.pool = getPool();\n  }\n\n  async createAuditLog(data: CreateAuditLogData): Promise<AuditLog> {\n    const query = `\n      INSERT INTO audit_log (\n        table_name, record_id, action, old_data, new_data, changed_by_user_id\n      ) VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING *\n    `;\n\n    const values = [\n      data.tableName,\n      data.recordId,\n      data.action,\n      data.oldData ? JSON.stringify(data.oldData) : null,\n      data.newData ? JSON.stringify(data.newData) : null,\n      data.changedByUserId || null\n    ];\n\n    const result = await this.pool.query(query, values);\n    return this.mapRowToAuditLog(result.rows[0]);\n  }\n\n  async findById(id: string): Promise<AuditLog | null> {\n    const query = 'SELECT * FROM audit_log WHERE id = $1';\n    const result = await this.pool.query(query, [id]);\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n    \n    return this.mapRowToAuditLog(result.rows[0]);\n  }\n\n  async listAuditLogs(params: AuditLogListParams = {}): Promise<{\n    logs: AuditLog[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      tableName,\n      recordId,\n      action,\n      changedByUserId,\n      startDate,\n      endDate,\n      search,\n      sortBy = 'changed_at',\n      sortOrder = 'desc'\n    } = params;\n\n    const offset = (page - 1) * limit;\n    let whereConditions: string[] = [];\n    let values: any[] = [];\n    let valueIndex = 1;\n\n    // Build WHERE conditions\n    if (tableName) {\n      whereConditions.push(`table_name = $${valueIndex}`);\n      values.push(tableName);\n      valueIndex++;\n    }\n\n    if (recordId) {\n      whereConditions.push(`record_id = $${valueIndex}`);\n      values.push(recordId);\n      valueIndex++;\n    }\n\n    if (action) {\n      whereConditions.push(`action = $${valueIndex}`);\n      values.push(action);\n      valueIndex++;\n    }\n\n    if (changedByUserId) {\n      whereConditions.push(`changed_by_user_id = $${valueIndex}`);\n      values.push(changedByUserId);\n      valueIndex++;\n    }\n\n    if (startDate) {\n      whereConditions.push(`changed_at >= $${valueIndex}`);\n      values.push(startDate);\n      valueIndex++;\n    }\n\n    if (endDate) {\n      whereConditions.push(`changed_at <= $${valueIndex}`);\n      values.push(endDate);\n      valueIndex++;\n    }\n\n    if (search) {\n      whereConditions.push(`(\n        table_name ILIKE $${valueIndex} OR \n        action ILIKE $${valueIndex} OR\n        old_data::text ILIKE $${valueIndex} OR\n        new_data::text ILIKE $${valueIndex}\n      )`);\n      values.push(`%${search}%`);\n      valueIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Count query\n    const countQuery = `SELECT COUNT(*) FROM audit_log ${whereClause}`;\n    const countResult = await this.pool.query(countQuery, values);\n    const total = parseInt(countResult.rows[0].count);\n\n    // Main query\n    const query = `\n      SELECT * FROM audit_log \n      ${whereClause}\n      ORDER BY ${sortBy} ${sortOrder.toUpperCase()}\n      LIMIT $${valueIndex} OFFSET $${valueIndex + 1}\n    `;\n    values.push(limit, offset);\n\n    const result = await this.pool.query(query, values);\n    const logs = result.rows.map(row => this.mapRowToAuditLog(row));\n\n    return {\n      logs,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  async getAuditLogsByRecord(tableName: string, recordId: string): Promise<AuditLog[]> {\n    const query = `\n      SELECT * FROM audit_log \n      WHERE table_name = $1 AND record_id = $2 \n      ORDER BY changed_at DESC\n    `;\n    \n    const result = await this.pool.query(query, [tableName, recordId]);\n    return result.rows.map(row => this.mapRowToAuditLog(row));\n  }\n\n  async getAuditLogsByUser(userId: string, limit: number = 50): Promise<AuditLog[]> {\n    const query = `\n      SELECT * FROM audit_log \n      WHERE changed_by_user_id = $1 \n      ORDER BY changed_at DESC \n      LIMIT $2\n    `;\n    \n    const result = await this.pool.query(query, [userId, limit]);\n    return result.rows.map(row => this.mapRowToAuditLog(row));\n  }\n\n  async getAuditStats(): Promise<{\n    totalLogs: number;\n    logsByAction: Array<{ action: string; count: number }>;\n    logsByTable: Array<{ tableName: string; count: number }>;\n    recentActivity: number;\n  }> {\n    const totalQuery = 'SELECT COUNT(*) FROM audit_log';\n    const totalResult = await this.pool.query(totalQuery);\n    const totalLogs = parseInt(totalResult.rows[0].count);\n\n    const actionQuery = `\n      SELECT action, COUNT(*) as count \n      FROM audit_log \n      GROUP BY action \n      ORDER BY count DESC\n    `;\n    const actionResult = await this.pool.query(actionQuery);\n\n    const tableQuery = `\n      SELECT table_name, COUNT(*) as count \n      FROM audit_log \n      GROUP BY table_name \n      ORDER BY count DESC\n    `;\n    const tableResult = await this.pool.query(tableQuery);\n\n    const recentQuery = `\n      SELECT COUNT(*) FROM audit_log \n      WHERE changed_at >= NOW() - INTERVAL '24 hours'\n    `;\n    const recentResult = await this.pool.query(recentQuery);\n    const recentActivity = parseInt(recentResult.rows[0].count);\n\n    return {\n      totalLogs,\n      logsByAction: actionResult.rows,\n      logsByTable: tableResult.rows,\n      recentActivity\n    };\n  }\n\n  async deleteOldAuditLogs(daysToKeep: number = 90): Promise<number> {\n    const query = `\n      DELETE FROM audit_log \n      WHERE changed_at < NOW() - INTERVAL '${daysToKeep} days'\n    `;\n    \n    const result = await this.pool.query(query);\n    return result.rowCount || 0;\n  }\n\n  private mapRowToAuditLog(row: any): AuditLog {\n    return {\n      id: row.id,\n      tableName: row.table_name,\n      recordId: row.record_id,\n      action: row.action,\n      oldData: row.old_data ? JSON.parse(row.old_data) : null,\n      newData: row.new_data ? JSON.parse(row.new_data) : null,\n      changedByUserId: row.changed_by_user_id,\n      changedAt: row.changed_at\n    };\n  }\n}"],"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","ignoreList":[]}