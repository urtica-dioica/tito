{"version":3,"names":["cov_10irvu8xep","actualCoverage","database_1","s","require","logger_1","__importDefault","EmployeeDeductionBalanceModel","constructor","f","pool","getPool","create","data","client","connect","query","values","employee_id","deduction_type_id","original_amount","remaining_balance","monthly_deduction_amount","start_date","b","end_date","is_active","result","record","rows","default","info","recordId","id","employeeId","deductionTypeId","error","message","release","findById","findByEmployee","findActiveByEmployee","map","row","parseFloat","created_at","updated_at","deduction_type_name","findByEmployeeAndDeductionTypeAndDate","startDate","findAll","params","page","limit","offset","whereClause","conditions","paramIndex","push","undefined","length","join","countQuery","countResult","total","parseInt","count","records","update","fields","updates","delete","deleted","rowCount","bulkCreate","item","exports","employeeDeductionBalanceModel"],"sources":["/home/kim/tito/server/src/models/payroll/EmployeeDeductionBalance.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface EmployeeDeductionBalance {\n  id: string;\n  employee_id: string;\n  deduction_type_id: string;\n  original_amount: number;\n  remaining_balance: number;\n  monthly_deduction_amount: number;\n  start_date: Date;\n  end_date?: Date;\n  is_active: boolean;\n  created_at: Date;\n  updated_at: Date;\n  deduction_type_name?: string; // Added for joined queries\n}\n\nexport interface CreateEmployeeDeductionBalanceData {\n  employee_id: string;\n  deduction_type_id: string;\n  original_amount: number;\n  remaining_balance: number;\n  monthly_deduction_amount: number;\n  start_date: Date;\n  end_date?: Date;\n  is_active?: boolean;\n}\n\nexport interface UpdateEmployeeDeductionBalanceData {\n  original_amount?: number;\n  remaining_balance?: number;\n  monthly_deduction_amount?: number;\n  start_date?: Date;\n  end_date?: Date;\n  is_active?: boolean;\n}\n\nexport interface EmployeeDeductionBalanceListParams {\n  employee_id?: string;\n  deduction_type_id?: string;\n  is_active?: boolean;\n  page?: number;\n  limit?: number;\n}\n\nclass EmployeeDeductionBalanceModel {\n  private pool = getPool();\n\n  async create(data: CreateEmployeeDeductionBalanceData): Promise<EmployeeDeductionBalance> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        INSERT INTO employee_deduction_balances (\n          employee_id, deduction_type_id, original_amount, remaining_balance,\n          monthly_deduction_amount, start_date, end_date, is_active\n        )\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n        RETURNING *\n      `;\n      const values = [\n        data.employee_id,\n        data.deduction_type_id,\n        data.original_amount,\n        data.remaining_balance,\n        data.monthly_deduction_amount,\n        data.start_date,\n        data.end_date || null,\n        data.is_active ?? true\n      ];\n      \n      const result = await client.query(query, values);\n      const record = result.rows[0];\n      \n      logger.info('Employee deduction balance created', { \n        recordId: record.id, \n        employeeId: record.employee_id,\n        deductionTypeId: record.deduction_type_id\n      });\n      return record;\n    } catch (error) {\n      logger.error('Error creating employee deduction balance', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findById(id: string): Promise<EmployeeDeductionBalance | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT * FROM employee_deduction_balances WHERE id = $1';\n      const result = await client.query(query, [id]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding employee deduction balance by ID', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findByEmployee(employeeId: string): Promise<EmployeeDeductionBalance[]> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT edb.*, dt.name as deduction_type_name\n        FROM employee_deduction_balances edb\n        JOIN deduction_types dt ON edb.deduction_type_id = dt.id\n        WHERE edb.employee_id = $1\n        ORDER BY edb.created_at DESC\n      `;\n      const result = await client.query(query, [employeeId]);\n      return result.rows;\n    } catch (error) {\n      logger.error('Error finding employee deduction balances by employee', { \n        error: (error as Error).message, \n        employeeId \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findActiveByEmployee(employeeId: string): Promise<EmployeeDeductionBalance[]> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT edb.*, dt.name as deduction_type_name\n        FROM employee_deduction_balances edb\n        JOIN deduction_types dt ON edb.deduction_type_id = dt.id\n        WHERE edb.employee_id = $1 \n        AND edb.is_active = true\n        AND edb.remaining_balance > 0\n        ORDER BY edb.created_at DESC\n      `;\n      const result = await client.query(query, [employeeId]);\n      return result.rows.map(row => ({\n        id: row.id,\n        employee_id: row.employee_id,\n        deduction_type_id: row.deduction_type_id,\n        original_amount: parseFloat(row.original_amount) || 0,\n        remaining_balance: parseFloat(row.remaining_balance) || 0,\n        monthly_deduction_amount: parseFloat(row.monthly_deduction_amount) || 0,\n        start_date: row.start_date,\n        end_date: row.end_date,\n        is_active: row.is_active,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        deduction_type_name: row.deduction_type_name\n      }));\n    } catch (error) {\n      logger.error('Error finding active employee deduction balances', { \n        error: (error as Error).message, \n        employeeId \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findByEmployeeAndDeductionTypeAndDate(employeeId: string, deductionTypeId: string, startDate: Date): Promise<EmployeeDeductionBalance | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT * FROM employee_deduction_balances \n        WHERE employee_id = $1 \n        AND deduction_type_id = $2 \n        AND start_date = $3\n      `;\n      const result = await client.query(query, [employeeId, deductionTypeId, startDate]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding employee deduction balance by employee, deduction type, and date', { \n        error: (error as Error).message, \n        employeeId, \n        deductionTypeId, \n        startDate \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findAll(params: EmployeeDeductionBalanceListParams = {}): Promise<{ records: EmployeeDeductionBalance[]; total: number }> {\n    const client = await this.pool.connect();\n    try {\n      const { page = 1, limit = 10, employee_id, deduction_type_id, is_active } = params;\n      const offset = (page - 1) * limit;\n      \n      let whereClause = '';\n      const conditions: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (employee_id) {\n        conditions.push(`employee_id = $${paramIndex++}`);\n        values.push(employee_id);\n      }\n\n      if (deduction_type_id) {\n        conditions.push(`deduction_type_id = $${paramIndex++}`);\n        values.push(deduction_type_id);\n      }\n\n      if (is_active !== undefined) {\n        conditions.push(`is_active = $${paramIndex++}`);\n        values.push(is_active);\n      }\n\n      if (conditions.length > 0) {\n        whereClause = `WHERE ${conditions.join(' AND ')}`;\n      }\n\n      // Get total count\n      const countQuery = `SELECT COUNT(*) FROM employee_deduction_balances ${whereClause}`;\n      const countResult = await client.query(countQuery, values);\n      const total = parseInt(countResult.rows[0].count);\n\n      // Get records\n      const query = `\n        SELECT edb.*, dt.name as deduction_type_name, e.employee_id as employee_number, u.first_name, u.last_name\n        FROM employee_deduction_balances edb\n        JOIN deduction_types dt ON edb.deduction_type_id = dt.id\n        JOIN employees e ON edb.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        ${whereClause}\n        ORDER BY edb.created_at DESC\n        LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n      `;\n      values.push(limit, offset);\n      \n      const result = await client.query(query, values);\n      \n      return {\n        records: result.rows,\n        total\n      };\n    } catch (error) {\n      logger.error('Error finding employee deduction balances', { error: (error as Error).message, params });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async update(id: string, data: UpdateEmployeeDeductionBalanceData): Promise<EmployeeDeductionBalance | null> {\n    const client = await this.pool.connect();\n    try {\n      const fields: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (data.original_amount !== undefined) {\n        fields.push(`original_amount = $${paramIndex++}`);\n        values.push(data.original_amount);\n      }\n\n      if (data.remaining_balance !== undefined) {\n        fields.push(`remaining_balance = $${paramIndex++}`);\n        values.push(data.remaining_balance);\n      }\n\n      if (data.monthly_deduction_amount !== undefined) {\n        fields.push(`monthly_deduction_amount = $${paramIndex++}`);\n        values.push(data.monthly_deduction_amount);\n      }\n\n      if (data.start_date !== undefined) {\n        fields.push(`start_date = $${paramIndex++}`);\n        values.push(data.start_date);\n      }\n\n      if (data.end_date !== undefined) {\n        fields.push(`end_date = $${paramIndex++}`);\n        values.push(data.end_date);\n      }\n\n      if (data.is_active !== undefined) {\n        fields.push(`is_active = $${paramIndex++}`);\n        values.push(data.is_active);\n      }\n\n      if (fields.length === 0) {\n        return await this.findById(id);\n      }\n\n      fields.push(`updated_at = CURRENT_TIMESTAMP`);\n      values.push(id);\n\n      const query = `\n        UPDATE employee_deduction_balances \n        SET ${fields.join(', ')}\n        WHERE id = $${paramIndex}\n        RETURNING *\n      `;\n\n      const result = await client.query(query, values);\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      logger.info('Employee deduction balance updated', { recordId: id, updates: data });\n      return result.rows[0];\n    } catch (error) {\n      logger.error('Error updating employee deduction balance', { error: (error as Error).message, id, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async delete(id: string): Promise<boolean> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'DELETE FROM employee_deduction_balances WHERE id = $1';\n      const result = await client.query(query, [id]);\n      \n      const deleted = (result.rowCount || 0) > 0;\n      if (deleted) {\n        logger.info('Employee deduction balance deleted', { recordId: id });\n      }\n      \n      return deleted;\n    } catch (error) {\n      logger.error('Error deleting employee deduction balance', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async bulkCreate(data: CreateEmployeeDeductionBalanceData[]): Promise<EmployeeDeductionBalance[]> {\n    const client = await this.pool.connect();\n    try {\n      await client.query('BEGIN');\n      \n      const records: EmployeeDeductionBalance[] = [];\n      \n      for (const item of data) {\n        const query = `\n          INSERT INTO employee_deduction_balances (\n            employee_id, deduction_type_id, original_amount, remaining_balance,\n            monthly_deduction_amount, start_date, end_date, is_active\n          )\n          VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n          RETURNING *\n        `;\n        const values = [\n          item.employee_id,\n          item.deduction_type_id,\n          item.original_amount,\n          item.remaining_balance,\n          item.monthly_deduction_amount,\n          item.start_date,\n          item.end_date || null,\n          item.is_active ?? true\n        ];\n        \n        const result = await client.query(query, values);\n        records.push(result.rows[0]);\n      }\n      \n      await client.query('COMMIT');\n      \n      logger.info('Employee deduction balances bulk created', { count: records.length });\n      return records;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Error bulk creating employee deduction balances', { error: (error as Error).message });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n}\n\nexport const employeeDeductionBalanceModel = new EmployeeDeductionBalanceModel();\n"],"mappingsoDM;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApDN,MAAAE,UAAA;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAAC,OAAA;AACA,MAAAC,QAAA;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAAG,eAAA,CAAAF,OAAA;AA6CA,MAAMG,6BAA6B;EAAnCC,YAAA;IAAA;IAAAR,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAG,CAAA;IACU,KAAAO,IAAI,GAAG,IAAAR,UAAA,CAAAS,OAAO,GAAE;EA4U1B;EA1UE,MAAMC,MAAMA,CAACC,IAAwC;IAAA;IAAAb,cAAA,GAAAS,CAAA;IACnD,MAAMK,MAAM;IAAA;IAAA,CAAAd,cAAA,GAAAG,CAAA,OAAG,MAAM,IAAI,CAACO,IAAI,CAACK,OAAO,EAAE;IAAC;IAAAf,cAAA,GAAAG,CAAA;IACzC,IAAI;MACF,MAAMa,KAAK;MAAA;MAAA,CAAAhB,cAAA,GAAAG,CAAA,OAAG;;;;;;;OAOb;MACD,MAAMc,MAAM;MAAA;MAAA,CAAAjB,cAAA,GAAAG,CAAA,QAAG,CACbU,IAAI,CAACK,WAAW,EAChBL,IAAI,CAACM,iBAAiB,EACtBN,IAAI,CAACO,eAAe,EACpBP,IAAI,CAACQ,iBAAiB,EACtBR,IAAI,CAACS,wBAAwB,EAC7BT,IAAI,CAACU,UAAU;MACf;MAAA,CAAAvB,cAAA,GAAAwB,CAAA,UAAAX,IAAI,CAACY,QAAQ;MAAA;MAAA,CAAAzB,cAAA,GAAAwB,CAAA,UAAI,IAAI;MACrB;MAAA,CAAAxB,cAAA,GAAAwB,CAAA,UAAAX,IAAI,CAACa,SAAS;MAAA;MAAA,CAAA1B,cAAA,GAAAwB,CAAA,UAAI,IAAI,EACvB;MAED,MAAMG,MAAM;MAAA;MAAA,CAAA3B,cAAA,GAAAG,CAAA,QAAG,MAAMW,MAAM,CAACE,KAAK,CAACA,KAAK,EAAEC,MAAM,CAAC;MAChD,MAAMW,MAAM;MAAA;MAAA,CAAA5B,cAAA,GAAAG,CAAA,QAAGwB,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;MAAC;MAAA7B,cAAA,GAAAG,CAAA;MAE9BE,QAAA,CAAAyB,OAAM,CAACC,IAAI,CAAC,oCAAoC,EAAE;QAChDC,QAAQ,EAAEJ,MAAM,CAACK,EAAE;QACnBC,UAAU,EAAEN,MAAM,CAACV,WAAW;QAC9BiB,eAAe,EAAEP,MAAM,CAACT;OACzB,CAAC;MAAC;MAAAnB,cAAA,GAAAG,CAAA;MACH,OAAOyB,MAAM;IACf,CAAC,CAAC,OAAOQ,KAAK,EAAE;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACdE,QAAA,CAAAyB,OAAM,CAACM,KAAK,CAAC,2CAA2C,EAAE;QAAEA,KAAK,EAAGA,KAAe,CAACC,OAAO;QAAExB;MAAI,CAAE,CAAC;MAAC;MAAAb,cAAA,GAAAG,CAAA;MACrG,MAAMiC,KAAK;IACb,CAAC,SAAS;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACRW,MAAM,CAACwB,OAAO,EAAE;IAClB;EACF;EAEA,MAAMC,QAAQA,CAACN,EAAU;IAAA;IAAAjC,cAAA,GAAAS,CAAA;IACvB,MAAMK,MAAM;IAAA;IAAA,CAAAd,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACO,IAAI,CAACK,OAAO,EAAE;IAAC;IAAAf,cAAA,GAAAG,CAAA;IACzC,IAAI;MACF,MAAMa,KAAK;MAAA;MAAA,CAAAhB,cAAA,GAAAG,CAAA,QAAG,yDAAyD;MACvE,MAAMwB,MAAM;MAAA;MAAA,CAAA3B,cAAA,GAAAG,CAAA,QAAG,MAAMW,MAAM,CAACE,KAAK,CAACA,KAAK,EAAE,CAACiB,EAAE,CAAC,CAAC;MAAC;MAAAjC,cAAA,GAAAG,CAAA;MAC/C,OAAO,2BAAAH,cAAA,GAAAwB,CAAA,UAAAG,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;MAAA;MAAA,CAAA7B,cAAA,GAAAwB,CAAA,UAAI,IAAI;IAC/B,CAAC,CAAC,OAAOY,KAAK,EAAE;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACdE,QAAA,CAAAyB,OAAM,CAACM,KAAK,CAAC,gDAAgD,EAAE;QAAEA,KAAK,EAAGA,KAAe,CAACC,OAAO;QAAEJ;MAAE,CAAE,CAAC;MAAC;MAAAjC,cAAA,GAAAG,CAAA;MACxG,MAAMiC,KAAK;IACb,CAAC,SAAS;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACRW,MAAM,CAACwB,OAAO,EAAE;IAClB;EACF;EAEA,MAAME,cAAcA,CAACN,UAAkB;IAAA;IAAAlC,cAAA,GAAAS,CAAA;IACrC,MAAMK,MAAM;IAAA;IAAA,CAAAd,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACO,IAAI,CAACK,OAAO,EAAE;IAAC;IAAAf,cAAA,GAAAG,CAAA;IACzC,IAAI;MACF,MAAMa,KAAK;MAAA;MAAA,CAAAhB,cAAA,GAAAG,CAAA,QAAG;;;;;;OAMb;MACD,MAAMwB,MAAM;MAAA;MAAA,CAAA3B,cAAA,GAAAG,CAAA,QAAG,MAAMW,MAAM,CAACE,KAAK,CAACA,KAAK,EAAE,CAACkB,UAAU,CAAC,CAAC;MAAC;MAAAlC,cAAA,GAAAG,CAAA;MACvD,OAAOwB,MAAM,CAACE,IAAI;IACpB,CAAC,CAAC,OAAOO,KAAK,EAAE;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACdE,QAAA,CAAAyB,OAAM,CAACM,KAAK,CAAC,uDAAuD,EAAE;QACpEA,KAAK,EAAGA,KAAe,CAACC,OAAO;QAC/BH;OACD,CAAC;MAAC;MAAAlC,cAAA,GAAAG,CAAA;MACH,MAAMiC,KAAK;IACb,CAAC,SAAS;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACRW,MAAM,CAACwB,OAAO,EAAE;IAClB;EACF;EAEA,MAAMG,oBAAoBA,CAACP,UAAkB;IAAA;IAAAlC,cAAA,GAAAS,CAAA;IAC3C,MAAMK,MAAM;IAAA;IAAA,CAAAd,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACO,IAAI,CAACK,OAAO,EAAE;IAAC;IAAAf,cAAA,GAAAG,CAAA;IACzC,IAAI;MACF,MAAMa,KAAK;MAAA;MAAA,CAAAhB,cAAA,GAAAG,CAAA,QAAG;;;;;;;;OAQb;MACD,MAAMwB,MAAM;MAAA;MAAA,CAAA3B,cAAA,GAAAG,CAAA,QAAG,MAAMW,MAAM,CAACE,KAAK,CAACA,KAAK,EAAE,CAACkB,UAAU,CAAC,CAAC;MAAC;MAAAlC,cAAA,GAAAG,CAAA;MACvD,OAAOwB,MAAM,CAACE,IAAI,CAACa,GAAG,CAACC,GAAG,IAAK;QAAA;QAAA3C,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QAAA;UAC7B8B,EAAE,EAAEU,GAAG,CAACV,EAAE;UACVf,WAAW,EAAEyB,GAAG,CAACzB,WAAW;UAC5BC,iBAAiB,EAAEwB,GAAG,CAACxB,iBAAiB;UACxCC,eAAe;UAAE;UAAA,CAAApB,cAAA,GAAAwB,CAAA,UAAAoB,UAAU,CAACD,GAAG,CAACvB,eAAe,CAAC;UAAA;UAAA,CAAApB,cAAA,GAAAwB,CAAA,UAAI,CAAC;UACrDH,iBAAiB;UAAE;UAAA,CAAArB,cAAA,GAAAwB,CAAA,UAAAoB,UAAU,CAACD,GAAG,CAACtB,iBAAiB,CAAC;UAAA;UAAA,CAAArB,cAAA,GAAAwB,CAAA,UAAI,CAAC;UACzDF,wBAAwB;UAAE;UAAA,CAAAtB,cAAA,GAAAwB,CAAA,UAAAoB,UAAU,CAACD,GAAG,CAACrB,wBAAwB,CAAC;UAAA;UAAA,CAAAtB,cAAA,GAAAwB,CAAA,UAAI,CAAC;UACvED,UAAU,EAAEoB,GAAG,CAACpB,UAAU;UAC1BE,QAAQ,EAAEkB,GAAG,CAAClB,QAAQ;UACtBC,SAAS,EAAEiB,GAAG,CAACjB,SAAS;UACxBmB,UAAU,EAAEF,GAAG,CAACE,UAAU;UAC1BC,UAAU,EAAEH,GAAG,CAACG,UAAU;UAC1BC,mBAAmB,EAAEJ,GAAG,CAACI;SAC1B;OAAC,CAAC;IACL,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACdE,QAAA,CAAAyB,OAAM,CAACM,KAAK,CAAC,kDAAkD,EAAE;QAC/DA,KAAK,EAAGA,KAAe,CAACC,OAAO;QAC/BH;OACD,CAAC;MAAC;MAAAlC,cAAA,GAAAG,CAAA;MACH,MAAMiC,KAAK;IACb,CAAC,SAAS;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACRW,MAAM,CAACwB,OAAO,EAAE;IAClB;EACF;EAEA,MAAMU,qCAAqCA,CAACd,UAAkB,EAAEC,eAAuB,EAAEc,SAAe;IAAA;IAAAjD,cAAA,GAAAS,CAAA;IACtG,MAAMK,MAAM;IAAA;IAAA,CAAAd,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACO,IAAI,CAACK,OAAO,EAAE;IAAC;IAAAf,cAAA,GAAAG,CAAA;IACzC,IAAI;MACF,MAAMa,KAAK;MAAA;MAAA,CAAAhB,cAAA,GAAAG,CAAA,QAAG;;;;;OAKb;MACD,MAAMwB,MAAM;MAAA;MAAA,CAAA3B,cAAA,GAAAG,CAAA,QAAG,MAAMW,MAAM,CAACE,KAAK,CAACA,KAAK,EAAE,CAACkB,UAAU,EAAEC,eAAe,EAAEc,SAAS,CAAC,CAAC;MAAC;MAAAjD,cAAA,GAAAG,CAAA;MACnF,OAAO,2BAAAH,cAAA,GAAAwB,CAAA,UAAAG,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;MAAA;MAAA,CAAA7B,cAAA,GAAAwB,CAAA,UAAI,IAAI;IAC/B,CAAC,CAAC,OAAOY,KAAK,EAAE;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACdE,QAAA,CAAAyB,OAAM,CAACM,KAAK,CAAC,gFAAgF,EAAE;QAC7FA,KAAK,EAAGA,KAAe,CAACC,OAAO;QAC/BH,UAAU;QACVC,eAAe;QACfc;OACD,CAAC;MAAC;MAAAjD,cAAA,GAAAG,CAAA;MACH,MAAMiC,KAAK;IACb,CAAC,SAAS;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACRW,MAAM,CAACwB,OAAO,EAAE;IAClB;EACF;EAEA,MAAMY,OAAOA,CAACC,MAAA;EAAA;EAAA,CAAAnD,cAAA,GAAAwB,CAAA,WAA6C,EAAE;IAAA;IAAAxB,cAAA,GAAAS,CAAA;IAC3D,MAAMK,MAAM;IAAA;IAAA,CAAAd,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACO,IAAI,CAACK,OAAO,EAAE;IAAC;IAAAf,cAAA,GAAAG,CAAA;IACzC,IAAI;MACF,MAAM;QAAEiD,IAAI;QAAA;QAAA,CAAApD,cAAA,GAAAwB,CAAA,WAAG,CAAC;QAAE6B,KAAK;QAAA;QAAA,CAAArD,cAAA,GAAAwB,CAAA,WAAG,EAAE;QAAEN,WAAW;QAAEC,iBAAiB;QAAEO;MAAS,CAAE;MAAA;MAAA,CAAA1B,cAAA,GAAAG,CAAA,QAAGgD,MAAM;MAClF,MAAMG,MAAM;MAAA;MAAA,CAAAtD,cAAA,GAAAG,CAAA,QAAG,CAACiD,IAAI,GAAG,CAAC,IAAIC,KAAK;MAEjC,IAAIE,WAAW;MAAA;MAAA,CAAAvD,cAAA,GAAAG,CAAA,QAAG,EAAE;MACpB,MAAMqD,UAAU;MAAA;MAAA,CAAAxD,cAAA,GAAAG,CAAA,QAAa,EAAE;MAC/B,MAAMc,MAAM;MAAA;MAAA,CAAAjB,cAAA,GAAAG,CAAA,QAAU,EAAE;MACxB,IAAIsD,UAAU;MAAA;MAAA,CAAAzD,cAAA,GAAAG,CAAA,QAAG,CAAC;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAEnB,IAAIe,WAAW,EAAE;QAAA;QAAAlB,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAG,CAAA;QACfqD,UAAU,CAACE,IAAI,CAAC,kBAAkBD,UAAU,EAAE,EAAE,CAAC;QAAC;QAAAzD,cAAA,GAAAG,CAAA;QAClDc,MAAM,CAACyC,IAAI,CAACxC,WAAW,CAAC;MAC1B,CAAC;MAAA;MAAA;QAAAlB,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAG,CAAA;MAED,IAAIgB,iBAAiB,EAAE;QAAA;QAAAnB,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAG,CAAA;QACrBqD,UAAU,CAACE,IAAI,CAAC,wBAAwBD,UAAU,EAAE,EAAE,CAAC;QAAC;QAAAzD,cAAA,GAAAG,CAAA;QACxDc,MAAM,CAACyC,IAAI,CAACvC,iBAAiB,CAAC;MAChC,CAAC;MAAA;MAAA;QAAAnB,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAG,CAAA;MAED,IAAIuB,SAAS,KAAKiC,SAAS,EAAE;QAAA;QAAA3D,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAG,CAAA;QAC3BqD,UAAU,CAACE,IAAI,CAAC,gBAAgBD,UAAU,EAAE,EAAE,CAAC;QAAC;QAAAzD,cAAA,GAAAG,CAAA;QAChDc,MAAM,CAACyC,IAAI,CAAChC,SAAS,CAAC;MACxB,CAAC;MAAA;MAAA;QAAA1B,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAG,CAAA;MAED,IAAIqD,UAAU,CAACI,MAAM,GAAG,CAAC,EAAE;QAAA;QAAA5D,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAG,CAAA;QACzBoD,WAAW,GAAG,SAASC,UAAU,CAACK,IAAI,CAAC,OAAO,CAAC,EAAE;MACnD,CAAC;MAAA;MAAA;QAAA7D,cAAA,GAAAwB,CAAA;MAAA;MAED;MACA,MAAMsC,UAAU;MAAA;MAAA,CAAA9D,cAAA,GAAAG,CAAA,QAAG,oDAAoDoD,WAAW,EAAE;MACpF,MAAMQ,WAAW;MAAA;MAAA,CAAA/D,cAAA,GAAAG,CAAA,QAAG,MAAMW,MAAM,CAACE,KAAK,CAAC8C,UAAU,EAAE7C,MAAM,CAAC;MAC1D,MAAM+C,KAAK;MAAA;MAAA,CAAAhE,cAAA,GAAAG,CAAA,QAAG8D,QAAQ,CAACF,WAAW,CAAClC,IAAI,CAAC,CAAC,CAAC,CAACqC,KAAK,CAAC;MAEjD;MACA,MAAMlD,KAAK;MAAA;MAAA,CAAAhB,cAAA,GAAAG,CAAA,QAAG;;;;;;UAMVoD,WAAW;;iBAEJE,UAAU,EAAE,YAAYA,UAAU,EAAE;OAC9C;MAAC;MAAAzD,cAAA,GAAAG,CAAA;MACFc,MAAM,CAACyC,IAAI,CAACL,KAAK,EAAEC,MAAM,CAAC;MAE1B,MAAM3B,MAAM;MAAA;MAAA,CAAA3B,cAAA,GAAAG,CAAA,QAAG,MAAMW,MAAM,CAACE,KAAK,CAACA,KAAK,EAAEC,MAAM,CAAC;MAAC;MAAAjB,cAAA,GAAAG,CAAA;MAEjD,OAAO;QACLgE,OAAO,EAAExC,MAAM,CAACE,IAAI;QACpBmC;OACD;IACH,CAAC,CAAC,OAAO5B,KAAK,EAAE;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACdE,QAAA,CAAAyB,OAAM,CAACM,KAAK,CAAC,2CAA2C,EAAE;QAAEA,KAAK,EAAGA,KAAe,CAACC,OAAO;QAAEc;MAAM,CAAE,CAAC;MAAC;MAAAnD,cAAA,GAAAG,CAAA;MACvG,MAAMiC,KAAK;IACb,CAAC,SAAS;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACRW,MAAM,CAACwB,OAAO,EAAE;IAClB;EACF;EAEA,MAAM8B,MAAMA,CAACnC,EAAU,EAAEpB,IAAwC;IAAA;IAAAb,cAAA,GAAAS,CAAA;IAC/D,MAAMK,MAAM;IAAA;IAAA,CAAAd,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACO,IAAI,CAACK,OAAO,EAAE;IAAC;IAAAf,cAAA,GAAAG,CAAA;IACzC,IAAI;MACF,MAAMkE,MAAM;MAAA;MAAA,CAAArE,cAAA,GAAAG,CAAA,QAAa,EAAE;MAC3B,MAAMc,MAAM;MAAA;MAAA,CAAAjB,cAAA,GAAAG,CAAA,QAAU,EAAE;MACxB,IAAIsD,UAAU;MAAA;MAAA,CAAAzD,cAAA,GAAAG,CAAA,QAAG,CAAC;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAEnB,IAAIU,IAAI,CAACO,eAAe,KAAKuC,SAAS,EAAE;QAAA;QAAA3D,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAG,CAAA;QACtCkE,MAAM,CAACX,IAAI,CAAC,sBAAsBD,UAAU,EAAE,EAAE,CAAC;QAAC;QAAAzD,cAAA,GAAAG,CAAA;QAClDc,MAAM,CAACyC,IAAI,CAAC7C,IAAI,CAACO,eAAe,CAAC;MACnC,CAAC;MAAA;MAAA;QAAApB,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAG,CAAA;MAED,IAAIU,IAAI,CAACQ,iBAAiB,KAAKsC,SAAS,EAAE;QAAA;QAAA3D,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAG,CAAA;QACxCkE,MAAM,CAACX,IAAI,CAAC,wBAAwBD,UAAU,EAAE,EAAE,CAAC;QAAC;QAAAzD,cAAA,GAAAG,CAAA;QACpDc,MAAM,CAACyC,IAAI,CAAC7C,IAAI,CAACQ,iBAAiB,CAAC;MACrC,CAAC;MAAA;MAAA;QAAArB,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAG,CAAA;MAED,IAAIU,IAAI,CAACS,wBAAwB,KAAKqC,SAAS,EAAE;QAAA;QAAA3D,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAG,CAAA;QAC/CkE,MAAM,CAACX,IAAI,CAAC,+BAA+BD,UAAU,EAAE,EAAE,CAAC;QAAC;QAAAzD,cAAA,GAAAG,CAAA;QAC3Dc,MAAM,CAACyC,IAAI,CAAC7C,IAAI,CAACS,wBAAwB,CAAC;MAC5C,CAAC;MAAA;MAAA;QAAAtB,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAG,CAAA;MAED,IAAIU,IAAI,CAACU,UAAU,KAAKoC,SAAS,EAAE;QAAA;QAAA3D,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAG,CAAA;QACjCkE,MAAM,CAACX,IAAI,CAAC,iBAAiBD,UAAU,EAAE,EAAE,CAAC;QAAC;QAAAzD,cAAA,GAAAG,CAAA;QAC7Cc,MAAM,CAACyC,IAAI,CAAC7C,IAAI,CAACU,UAAU,CAAC;MAC9B,CAAC;MAAA;MAAA;QAAAvB,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAG,CAAA;MAED,IAAIU,IAAI,CAACY,QAAQ,KAAKkC,SAAS,EAAE;QAAA;QAAA3D,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAG,CAAA;QAC/BkE,MAAM,CAACX,IAAI,CAAC,eAAeD,UAAU,EAAE,EAAE,CAAC;QAAC;QAAAzD,cAAA,GAAAG,CAAA;QAC3Cc,MAAM,CAACyC,IAAI,CAAC7C,IAAI,CAACY,QAAQ,CAAC;MAC5B,CAAC;MAAA;MAAA;QAAAzB,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAG,CAAA;MAED,IAAIU,IAAI,CAACa,SAAS,KAAKiC,SAAS,EAAE;QAAA;QAAA3D,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAG,CAAA;QAChCkE,MAAM,CAACX,IAAI,CAAC,gBAAgBD,UAAU,EAAE,EAAE,CAAC;QAAC;QAAAzD,cAAA,GAAAG,CAAA;QAC5Cc,MAAM,CAACyC,IAAI,CAAC7C,IAAI,CAACa,SAAS,CAAC;MAC7B,CAAC;MAAA;MAAA;QAAA1B,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAG,CAAA;MAED,IAAIkE,MAAM,CAACT,MAAM,KAAK,CAAC,EAAE;QAAA;QAAA5D,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAG,CAAA;QACvB,OAAO,MAAM,IAAI,CAACoC,QAAQ,CAACN,EAAE,CAAC;MAChC,CAAC;MAAA;MAAA;QAAAjC,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAG,CAAA;MAEDkE,MAAM,CAACX,IAAI,CAAC,gCAAgC,CAAC;MAAC;MAAA1D,cAAA,GAAAG,CAAA;MAC9Cc,MAAM,CAACyC,IAAI,CAACzB,EAAE,CAAC;MAEf,MAAMjB,KAAK;MAAA;MAAA,CAAAhB,cAAA,GAAAG,CAAA,SAAG;;cAENkE,MAAM,CAACR,IAAI,CAAC,IAAI,CAAC;sBACTJ,UAAU;;OAEzB;MAED,MAAM9B,MAAM;MAAA;MAAA,CAAA3B,cAAA,GAAAG,CAAA,SAAG,MAAMW,MAAM,CAACE,KAAK,CAACA,KAAK,EAAEC,MAAM,CAAC;MAAC;MAAAjB,cAAA,GAAAG,CAAA;MAEjD,IAAIwB,MAAM,CAACE,IAAI,CAAC+B,MAAM,KAAK,CAAC,EAAE;QAAA;QAAA5D,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAG,CAAA;QAC5B,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAG,CAAA;MAEDE,QAAA,CAAAyB,OAAM,CAACC,IAAI,CAAC,oCAAoC,EAAE;QAAEC,QAAQ,EAAEC,EAAE;QAAEqC,OAAO,EAAEzD;MAAI,CAAE,CAAC;MAAC;MAAAb,cAAA,GAAAG,CAAA;MACnF,OAAOwB,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOO,KAAK,EAAE;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACdE,QAAA,CAAAyB,OAAM,CAACM,KAAK,CAAC,2CAA2C,EAAE;QAAEA,KAAK,EAAGA,KAAe,CAACC,OAAO;QAAEJ,EAAE;QAAEpB;MAAI,CAAE,CAAC;MAAC;MAAAb,cAAA,GAAAG,CAAA;MACzG,MAAMiC,KAAK;IACb,CAAC,SAAS;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACRW,MAAM,CAACwB,OAAO,EAAE;IAClB;EACF;EAEA,MAAMiC,MAAMA,CAACtC,EAAU;IAAA;IAAAjC,cAAA,GAAAS,CAAA;IACrB,MAAMK,MAAM;IAAA;IAAA,CAAAd,cAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAACO,IAAI,CAACK,OAAO,EAAE;IAAC;IAAAf,cAAA,GAAAG,CAAA;IACzC,IAAI;MACF,MAAMa,KAAK;MAAA;MAAA,CAAAhB,cAAA,GAAAG,CAAA,SAAG,uDAAuD;MACrE,MAAMwB,MAAM;MAAA;MAAA,CAAA3B,cAAA,GAAAG,CAAA,SAAG,MAAMW,MAAM,CAACE,KAAK,CAACA,KAAK,EAAE,CAACiB,EAAE,CAAC,CAAC;MAE9C,MAAMuC,OAAO;MAAA;MAAA,CAAAxE,cAAA,GAAAG,CAAA,SAAG;MAAC;MAAA,CAAAH,cAAA,GAAAwB,CAAA,WAAAG,MAAM,CAAC8C,QAAQ;MAAA;MAAA,CAAAzE,cAAA,GAAAwB,CAAA,WAAI,CAAC,KAAI,CAAC;MAAC;MAAAxB,cAAA,GAAAG,CAAA;MAC3C,IAAIqE,OAAO,EAAE;QAAA;QAAAxE,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAG,CAAA;QACXE,QAAA,CAAAyB,OAAM,CAACC,IAAI,CAAC,oCAAoC,EAAE;UAAEC,QAAQ,EAAEC;QAAE,CAAE,CAAC;MACrE,CAAC;MAAA;MAAA;QAAAjC,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAG,CAAA;MAED,OAAOqE,OAAO;IAChB,CAAC,CAAC,OAAOpC,KAAK,EAAE;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACdE,QAAA,CAAAyB,OAAM,CAACM,KAAK,CAAC,2CAA2C,EAAE;QAAEA,KAAK,EAAGA,KAAe,CAACC,OAAO;QAAEJ;MAAE,CAAE,CAAC;MAAC;MAAAjC,cAAA,GAAAG,CAAA;MACnG,MAAMiC,KAAK;IACb,CAAC,SAAS;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACRW,MAAM,CAACwB,OAAO,EAAE;IAClB;EACF;EAEA,MAAMoC,UAAUA,CAAC7D,IAA0C;IAAA;IAAAb,cAAA,GAAAS,CAAA;IACzD,MAAMK,MAAM;IAAA;IAAA,CAAAd,cAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAACO,IAAI,CAACK,OAAO,EAAE;IAAC;IAAAf,cAAA,GAAAG,CAAA;IACzC,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,MAAMW,MAAM,CAACE,KAAK,CAAC,OAAO,CAAC;MAE3B,MAAMmD,OAAO;MAAA;MAAA,CAAAnE,cAAA,GAAAG,CAAA,SAA+B,EAAE;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAE/C,KAAK,MAAMwE,IAAI,IAAI9D,IAAI,EAAE;QACvB,MAAMG,KAAK;QAAA;QAAA,CAAAhB,cAAA,GAAAG,CAAA,SAAG;;;;;;;SAOb;QACD,MAAMc,MAAM;QAAA;QAAA,CAAAjB,cAAA,GAAAG,CAAA,SAAG,CACbwE,IAAI,CAACzD,WAAW,EAChByD,IAAI,CAACxD,iBAAiB,EACtBwD,IAAI,CAACvD,eAAe,EACpBuD,IAAI,CAACtD,iBAAiB,EACtBsD,IAAI,CAACrD,wBAAwB,EAC7BqD,IAAI,CAACpD,UAAU;QACf;QAAA,CAAAvB,cAAA,GAAAwB,CAAA,WAAAmD,IAAI,CAAClD,QAAQ;QAAA;QAAA,CAAAzB,cAAA,GAAAwB,CAAA,WAAI,IAAI;QACrB;QAAA,CAAAxB,cAAA,GAAAwB,CAAA,WAAAmD,IAAI,CAACjD,SAAS;QAAA;QAAA,CAAA1B,cAAA,GAAAwB,CAAA,WAAI,IAAI,EACvB;QAED,MAAMG,MAAM;QAAA;QAAA,CAAA3B,cAAA,GAAAG,CAAA,SAAG,MAAMW,MAAM,CAACE,KAAK,CAACA,KAAK,EAAEC,MAAM,CAAC;QAAC;QAAAjB,cAAA,GAAAG,CAAA;QACjDgE,OAAO,CAACT,IAAI,CAAC/B,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;MAC9B;MAAC;MAAA7B,cAAA,GAAAG,CAAA;MAED,MAAMW,MAAM,CAACE,KAAK,CAAC,QAAQ,CAAC;MAAC;MAAAhB,cAAA,GAAAG,CAAA;MAE7BE,QAAA,CAAAyB,OAAM,CAACC,IAAI,CAAC,0CAA0C,EAAE;QAAEmC,KAAK,EAAEC,OAAO,CAACP;MAAM,CAAE,CAAC;MAAC;MAAA5D,cAAA,GAAAG,CAAA;MACnF,OAAOgE,OAAO;IAChB,CAAC,CAAC,OAAO/B,KAAK,EAAE;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACd,MAAMW,MAAM,CAACE,KAAK,CAAC,UAAU,CAAC;MAAC;MAAAhB,cAAA,GAAAG,CAAA;MAC/BE,QAAA,CAAAyB,OAAM,CAACM,KAAK,CAAC,iDAAiD,EAAE;QAAEA,KAAK,EAAGA,KAAe,CAACC;MAAO,CAAE,CAAC;MAAC;MAAArC,cAAA,GAAAG,CAAA;MACrG,MAAMiC,KAAK;IACb,CAAC,SAAS;MAAA;MAAApC,cAAA,GAAAG,CAAA;MACRW,MAAM,CAACwB,OAAO,EAAE;IAClB;EACF;;AACD;AAAAtC,cAAA,GAAAG,CAAA;AAEYyE,OAAA,CAAAC,6BAA6B,GAAG,IAAItE,6BAA6B,EAAE","ignoreList":[]}