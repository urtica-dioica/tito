{"file":"/home/kim/tito/server/tests/performance/authLoadTest.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/performance/authLoadTest.test.ts"],"sourcesContent":["import { LoadTestRunner, LoadTestConfig, LoadTestResult } from './loadTestUtils';\n// Mock axios for testing\ninterface AxiosResponse {\n  status: number;\n  data: any;\n}\n\nconst axios = {\n  create: () => ({\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n    patch: jest.fn(),\n    interceptors: {\n      request: { use: jest.fn() },\n      response: { use: jest.fn() }\n    }\n  })\n};\n\ndescribe('Authentication Load Tests', () => {\n  let loadTestRunner: LoadTestRunner;\n  let baseURL: string;\n\n  beforeAll(() => {\n    baseURL = process.env.TEST_BASE_URL || 'http://localhost:3000';\n    \n    const config: LoadTestConfig = {\n      baseURL,\n      concurrentUsers: 10,\n      requestsPerUser: 5,\n      rampUpTime: 2000, // 2 seconds\n      testDuration: 30000, // 30 seconds\n      timeout: 10000 // 10 seconds\n    };\n    \n    loadTestRunner = new LoadTestRunner(config);\n  });\n\n  describe('Login Endpoint Load Test', () => {\n    it('should handle concurrent login requests', async () => {\n      const testCredentials = {\n        email: 'test@example.com',\n        password: 'password123'\n      };\n\n      const requestFunction = async (axios: any): Promise<AxiosResponse> => {\n        return axios.post('/api/v1/auth/login', testCredentials);\n      };\n\n      const result: LoadTestResult = await loadTestRunner.runLoadTest(\n        requestFunction,\n        'Login Endpoint Load Test'\n      );\n\n      // Performance assertions\n      expect(result.averageResponseTime).toBeLessThan(2000); // Less than 2 seconds\n      expect(result.errorRate).toBeLessThan(0.05); // Less than 5% error rate\n      expect(result.requestsPerSecond).toBeGreaterThan(5); // At least 5 RPS\n      \n      console.log(loadTestRunner.generateReport(result, 'Login Endpoint Load Test'));\n    }, 60000); // 60 second timeout\n  });\n\n  describe('Token Validation Load Test', () => {\n    let authToken: string;\n\n    beforeAll(async () => {\n      // Get a valid token for testing\n      try {\n        const response = await axios.create().post(`${baseURL}/api/v1/auth/login`, {\n          email: 'test@example.com',\n          password: 'password123'\n        });\n        authToken = response.data.data.accessToken;\n      } catch (error) {\n        console.warn('Could not obtain auth token for load test');\n        authToken = 'invalid-token';\n      }\n    });\n\n    it('should handle concurrent token validation requests', async () => {\n      const requestFunction = async (axios: any): Promise<AxiosResponse> => {\n        return axios.get('/api/v1/auth/profile', {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          }\n        });\n      };\n\n      const result: LoadTestResult = await loadTestRunner.runLoadTest(\n        requestFunction,\n        'Token Validation Load Test'\n      );\n\n      // Performance assertions\n      expect(result.averageResponseTime).toBeLessThan(1000); // Less than 1 second\n      expect(result.errorRate).toBeLessThan(0.1); // Less than 10% error rate\n      expect(result.requestsPerSecond).toBeGreaterThan(10); // At least 10 RPS\n      \n      console.log(loadTestRunner.generateReport(result, 'Token Validation Load Test'));\n    }, 60000);\n  });\n\n  describe('Refresh Token Load Test', () => {\n    let refreshToken: string;\n\n    beforeAll(async () => {\n      // Get a valid refresh token for testing\n      try {\n        const response = await axios.create().post(`${baseURL}/api/v1/auth/login`, {\n          email: 'test@example.com',\n          password: 'password123'\n        });\n        refreshToken = response.data.data.refreshToken;\n      } catch (error) {\n        console.warn('Could not obtain refresh token for load test');\n        refreshToken = 'invalid-refresh-token';\n      }\n    });\n\n    it('should handle concurrent refresh token requests', async () => {\n      const requestFunction = async (axios: any): Promise<AxiosResponse> => {\n        return axios.post('/api/v1/auth/refresh', {}, {\n          headers: {\n            'Cookie': `refreshToken=${refreshToken}`\n          }\n        });\n      };\n\n      const result: LoadTestResult = await loadTestRunner.runLoadTest(\n        requestFunction,\n        'Refresh Token Load Test'\n      );\n\n      // Performance assertions\n      expect(result.averageResponseTime).toBeLessThan(1500); // Less than 1.5 seconds\n      expect(result.errorRate).toBeLessThan(0.1); // Less than 10% error rate\n      expect(result.requestsPerSecond).toBeGreaterThan(8); // At least 8 RPS\n      \n      console.log(loadTestRunner.generateReport(result, 'Refresh Token Load Test'));\n    }, 60000);\n  });\n\n  describe('High Load Authentication Test', () => {\n    it('should handle high concurrent load on authentication endpoints', async () => {\n      const highLoadConfig: LoadTestConfig = {\n        baseURL,\n        concurrentUsers: 50,\n        requestsPerUser: 10,\n        rampUpTime: 5000, // 5 seconds\n        testDuration: 60000, // 60 seconds\n        timeout: 15000 // 15 seconds\n      };\n\n      const highLoadRunner = new LoadTestRunner(highLoadConfig);\n\n      const testCredentials = {\n        email: 'test@example.com',\n        password: 'password123'\n      };\n\n      const requestFunction = async (axios: any): Promise<AxiosResponse> => {\n        return axios.post('/api/v1/auth/login', testCredentials);\n      };\n\n      const result: LoadTestResult = await highLoadRunner.runLoadTest(\n        requestFunction,\n        'High Load Authentication Test'\n      );\n\n      // High load performance assertions\n      expect(result.averageResponseTime).toBeLessThan(3000); // Less than 3 seconds\n      expect(result.errorRate).toBeLessThan(0.1); // Less than 10% error rate\n      expect(result.requestsPerSecond).toBeGreaterThan(20); // At least 20 RPS\n      expect(result.totalRequests).toBe(500); // 50 users * 10 requests each\n      \n      console.log(highLoadRunner.generateReport(result, 'High Load Authentication Test'));\n    }, 120000); // 2 minute timeout\n  });\n\n  describe('Authentication Stress Test', () => {\n    it('should handle stress conditions on authentication endpoints', async () => {\n      const stressConfig: LoadTestConfig = {\n        baseURL,\n        concurrentUsers: 100,\n        requestsPerUser: 20,\n        rampUpTime: 10000, // 10 seconds\n        testDuration: 120000, // 2 minutes\n        timeout: 20000 // 20 seconds\n      };\n\n      const stressRunner = new LoadTestRunner(stressConfig);\n\n      const testCredentials = {\n        email: 'test@example.com',\n        password: 'password123'\n      };\n\n      const requestFunction = async (axios: any): Promise<AxiosResponse> => {\n        return axios.post('/api/v1/auth/login', testCredentials);\n      };\n\n      const result: LoadTestResult = await stressRunner.runLoadTest(\n        requestFunction,\n        'Authentication Stress Test'\n      );\n\n      // Stress test performance assertions (more lenient)\n      expect(result.averageResponseTime).toBeLessThan(5000); // Less than 5 seconds\n      expect(result.errorRate).toBeLessThan(0.2); // Less than 20% error rate\n      expect(result.requestsPerSecond).toBeGreaterThan(10); // At least 10 RPS\n      expect(result.totalRequests).toBe(2000); // 100 users * 20 requests each\n      \n      console.log(stressRunner.generateReport(result, 'Authentication Stress Test'));\n    }, 180000); // 3 minute timeout\n  });\n\n  describe('Authentication Endpoint Comparison', () => {\n    it('should compare performance across different authentication endpoints', async () => {\n      const endpoints = [\n        { name: 'Login', path: '/api/v1/auth/login', method: 'POST' },\n        { name: 'Profile', path: '/api/v1/auth/profile', method: 'GET' },\n        { name: 'Refresh', path: '/api/v1/auth/refresh', method: 'POST' }\n      ];\n\n      const results: { [key: string]: LoadTestResult } = {};\n\n      for (const endpoint of endpoints) {\n        const requestFunction = async (axios: any): Promise<AxiosResponse> => {\n          const data = endpoint.method === 'POST' ? \n            (endpoint.path.includes('login') ? \n              { email: 'test@example.com', password: 'password123' } : \n              {}) : \n            undefined;\n\n          const config: any = {\n            method: endpoint.method.toLowerCase(),\n            url: endpoint.path\n          };\n\n          if (data) {\n            config.data = data;\n          }\n\n          if (endpoint.path.includes('profile')) {\n            config.headers = {\n              'Authorization': 'Bearer test-token'\n            };\n          }\n\n          if (endpoint.path.includes('refresh')) {\n            config.headers = {\n              'Cookie': 'refreshToken=test-refresh-token'\n            };\n          }\n\n          return axios(config);\n        };\n\n        const result = await loadTestRunner.runLoadTest(\n          requestFunction,\n          `${endpoint.name} Endpoint Performance`\n        );\n\n        results[endpoint.name] = result;\n      }\n\n      // Compare results\n      console.log('\\n📊 AUTHENTICATION ENDPOINT COMPARISON');\n      console.log('=====================================');\n      \n      for (const [name, result] of Object.entries(results)) {\n        console.log(`\\n${name}:`);\n        console.log(`  Average Response Time: ${result.averageResponseTime.toFixed(2)}ms`);\n        console.log(`  Error Rate: ${(result.errorRate * 100).toFixed(2)}%`);\n        console.log(`  Requests/Second: ${result.requestsPerSecond.toFixed(2)}`);\n      }\n\n      // Assertions for endpoint comparison\n      expect(results.Login.averageResponseTime).toBeLessThan(2000);\n      expect(results.Profile.averageResponseTime).toBeLessThan(1000);\n      expect(results.Refresh.averageResponseTime).toBeLessThan(1500);\n    }, 180000);\n  });\n});\n"],"version":3}