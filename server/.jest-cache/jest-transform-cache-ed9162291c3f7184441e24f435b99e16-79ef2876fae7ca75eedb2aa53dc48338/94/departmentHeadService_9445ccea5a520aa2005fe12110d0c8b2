ceef27f7f06b9a87606a8285273c3e87
"use strict";

/* istanbul ignore next */
function cov_2fzkt7wlwo() {
  var path = "/home/kim/tito/server/src/services/department-head/departmentHeadService.ts";
  var hash = "4272d038957e9e583c26348ca10f63b3c014166f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/department-head/departmentHeadService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 22
        },
        end: {
          line: 37,
          column: 1
        }
      },
      "36": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 62
        }
      },
      "37": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 38,
          column: 62
        }
      },
      "38": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 39
        }
      },
      "39": {
        start: {
          line: 40,
          column: 19
        },
        end: {
          line: 40,
          column: 51
        }
      },
      "40": {
        start: {
          line: 41,
          column: 19
        },
        end: {
          line: 41,
          column: 54
        }
      },
      "41": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 42,
          column: 73
        }
      },
      "42": {
        start: {
          line: 43,
          column: 17
        },
        end: {
          line: 43,
          column: 63
        }
      },
      "43": {
        start: {
          line: 44,
          column: 22
        },
        end: {
          line: 44,
          column: 52
        }
      },
      "44": {
        start: {
          line: 45,
          column: 29
        },
        end: {
          line: 45,
          column: 73
        }
      },
      "45": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "46": {
        start: {
          line: 53,
          column: 31
        },
        end: {
          line: 53,
          column: 69
        }
      },
      "47": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "48": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 89
        }
      },
      "49": {
        start: {
          line: 58,
          column: 36
        },
        end: {
          line: 58,
          column: 85
        }
      },
      "50": {
        start: {
          line: 60,
          column: 35
        },
        end: {
          line: 60,
          column: 78
        }
      },
      "51": {
        start: {
          line: 62,
          column: 38
        },
        end: {
          line: 62,
          column: 89
        }
      },
      "52": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 73,
          column: 14
        }
      },
      "53": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 98
        }
      },
      "54": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 24
        }
      },
      "55": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "56": {
        start: {
          line: 85,
          column: 31
        },
        end: {
          line: 85,
          column: 69
        }
      },
      "57": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "58": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 89
        }
      },
      "59": {
        start: {
          line: 89,
          column: 27
        },
        end: {
          line: 89,
          column: 61
        }
      },
      "60": {
        start: {
          line: 90,
          column: 24
        },
        end: {
          line: 114,
          column: 7
        }
      },
      "61": {
        start: {
          line: 115,
          column: 32
        },
        end: {
          line: 115,
          column: 47
        }
      },
      "62": {
        start: {
          line: 116,
          column: 29
        },
        end: {
          line: 116,
          column: 30
        }
      },
      "63": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "64": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 60
        }
      },
      "65": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 49
        }
      },
      "66": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 124,
          column: 13
        }
      },
      "67": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 142
        }
      },
      "68": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 56
        }
      },
      "69": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 106
        }
      },
      "70": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 52
        }
      },
      "71": {
        start: {
          line: 127,
          column: 27
        },
        end: {
          line: 127,
          column: 84
        }
      },
      "72": {
        start: {
          line: 129,
          column: 29
        },
        end: {
          line: 134,
          column: 7
        }
      },
      "73": {
        start: {
          line: 135,
          column: 32
        },
        end: {
          line: 135,
          column: 47
        }
      },
      "74": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 139,
          column: 13
        }
      },
      "75": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 137,
          column: 51
        }
      },
      "76": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 49
        }
      },
      "77": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 143,
          column: 13
        }
      },
      "78": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 183
        }
      },
      "79": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 142,
          column: 56
        }
      },
      "80": {
        start: {
          line: 144,
          column: 32
        },
        end: {
          line: 144,
          column: 94
        }
      },
      "81": {
        start: {
          line: 145,
          column: 26
        },
        end: {
          line: 145,
          column: 61
        }
      },
      "82": {
        start: {
          line: 146,
          column: 30
        },
        end: {
          line: 161,
          column: 15
        }
      },
      "83": {
        start: {
          line: 146,
          column: 56
        },
        end: {
          line: 161,
          column: 13
        }
      },
      "84": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 170,
          column: 14
        }
      },
      "85": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 93
        }
      },
      "86": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 24
        }
      },
      "87": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "88": {
        start: {
          line: 182,
          column: 31
        },
        end: {
          line: 182,
          column: 69
        }
      },
      "89": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "90": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 89
        }
      },
      "91": {
        start: {
          line: 186,
          column: 29
        },
        end: {
          line: 186,
          column: 80
        }
      },
      "92": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "93": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 54
        }
      },
      "94": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "95": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 79
        }
      },
      "96": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 28
        }
      },
      "97": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 101
        }
      },
      "98": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 24
        }
      },
      "99": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "100": {
        start: {
          line: 206,
          column: 31
        },
        end: {
          line: 206,
          column: 69
        }
      },
      "101": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 209,
          column: 13
        }
      },
      "102": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 89
        }
      },
      "103": {
        start: {
          line: 210,
          column: 27
        },
        end: {
          line: 210,
          column: 61
        }
      },
      "104": {
        start: {
          line: 211,
          column: 29
        },
        end: {
          line: 211,
          column: 31
        }
      },
      "105": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 103
        }
      },
      "106": {
        start: {
          line: 215,
          column: 36
        },
        end: {
          line: 215,
          column: 101
        }
      },
      "107": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 224,
          column: 14
        }
      },
      "108": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 89
        }
      },
      "109": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 24
        }
      },
      "110": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "111": {
        start: {
          line: 236,
          column: 31
        },
        end: {
          line: 236,
          column: 69
        }
      },
      "112": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "113": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 89
        }
      },
      "114": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 250,
          column: 14
        }
      },
      "115": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 88
        }
      },
      "116": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 24
        }
      },
      "117": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "118": {
        start: {
          line: 262,
          column: 31
        },
        end: {
          line: 262,
          column: 69
        }
      },
      "119": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 265,
          column: 13
        }
      },
      "120": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 89
        }
      },
      "121": {
        start: {
          line: 267,
          column: 39
        },
        end: {
          line: 273,
          column: 7
        }
      },
      "122": {
        start: {
          line: 274,
          column: 35
        },
        end: {
          line: 274,
          column: 109
        }
      },
      "123": {
        start: {
          line: 276,
          column: 36
        },
        end: {
          line: 285,
          column: 7
        }
      },
      "124": {
        start: {
          line: 286,
          column: 32
        },
        end: {
          line: 286,
          column: 59
        }
      },
      "125": {
        start: {
          line: 287,
          column: 37
        },
        end: {
          line: 287,
          column: 121
        }
      },
      "126": {
        start: {
          line: 289,
          column: 33
        },
        end: {
          line: 289,
          column: 82
        }
      },
      "127": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 300,
          column: 14
        }
      },
      "128": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 94
        }
      },
      "129": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 24
        }
      },
      "130": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "131": {
        start: {
          line: 312,
          column: 31
        },
        end: {
          line: 312,
          column: 69
        }
      },
      "132": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 315,
          column: 13
        }
      },
      "133": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 314,
          column: 89
        }
      },
      "134": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 323,
          column: 14
        }
      },
      "135": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 91
        }
      },
      "136": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 24
        }
      },
      "137": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 353,
          column: 9
        }
      },
      "138": {
        start: {
          line: 335,
          column: 31
        },
        end: {
          line: 335,
          column: 69
        }
      },
      "139": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 338,
          column: 13
        }
      },
      "140": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 337,
          column: 89
        }
      },
      "141": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 348,
          column: 14
        }
      },
      "142": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 88
        }
      },
      "143": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 352,
          column: 24
        }
      },
      "144": {
        start: {
          line: 359,
          column: 22
        },
        end: {
          line: 369,
          column: 5
        }
      },
      "145": {
        start: {
          line: 370,
          column: 23
        },
        end: {
          line: 370,
          column: 77
        }
      },
      "146": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 371,
          column: 38
        }
      },
      "147": {
        start: {
          line: 377,
          column: 22
        },
        end: {
          line: 388,
          column: 5
        }
      },
      "148": {
        start: {
          line: 389,
          column: 23
        },
        end: {
          line: 389,
          column: 83
        }
      },
      "149": {
        start: {
          line: 390,
          column: 20
        },
        end: {
          line: 390,
          column: 34
        }
      },
      "150": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 396,
          column: 10
        }
      },
      "151": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 467,
          column: 9
        }
      },
      "152": {
        start: {
          line: 404,
          column: 41
        },
        end: {
          line: 416,
          column: 7
        }
      },
      "153": {
        start: {
          line: 418,
          column: 34
        },
        end: {
          line: 430,
          column: 7
        }
      },
      "154": {
        start: {
          line: 432,
          column: 31
        },
        end: {
          line: 444,
          column: 7
        }
      },
      "155": {
        start: {
          line: 445,
          column: 73
        },
        end: {
          line: 449,
          column: 14
        }
      },
      "156": {
        start: {
          line: 451,
          column: 34
        },
        end: {
          line: 456,
          column: 29
        }
      },
      "157": {
        start: {
          line: 455,
          column: 29
        },
        end: {
          line: 455,
          column: 84
        }
      },
      "158": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 462,
          column: 16
        }
      },
      "159": {
        start: {
          line: 457,
          column: 50
        },
        end: {
          line: 462,
          column: 13
        }
      },
      "160": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 94
        }
      },
      "161": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 22
        }
      },
      "162": {
        start: {
          line: 473,
          column: 22
        },
        end: {
          line: 473,
          column: 60
        }
      },
      "163": {
        start: {
          line: 474,
          column: 22
        },
        end: {
          line: 483,
          column: 5
        }
      },
      "164": {
        start: {
          line: 484,
          column: 23
        },
        end: {
          line: 484,
          column: 90
        }
      },
      "165": {
        start: {
          line: 485,
          column: 20
        },
        end: {
          line: 485,
          column: 34
        }
      },
      "166": {
        start: {
          line: 486,
          column: 8
        },
        end: {
          line: 490,
          column: 10
        }
      },
      "167": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 496,
          column: 54
        }
      },
      "168": {
        start: {
          line: 502,
          column: 27
        },
        end: {
          line: 502,
          column: 65
        }
      },
      "169": {
        start: {
          line: 503,
          column: 8
        },
        end: {
          line: 505,
          column: 9
        }
      },
      "170": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 504,
          column: 52
        }
      },
      "171": {
        start: {
          line: 506,
          column: 22
        },
        end: {
          line: 514,
          column: 5
        }
      },
      "172": {
        start: {
          line: 515,
          column: 23
        },
        end: {
          line: 515,
          column: 84
        }
      },
      "173": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 516,
          column: 30
        }
      },
      "174": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 583,
          column: 9
        }
      },
      "175": {
        start: {
          line: 523,
          column: 31
        },
        end: {
          line: 523,
          column: 69
        }
      },
      "176": {
        start: {
          line: 524,
          column: 12
        },
        end: {
          line: 526,
          column: 13
        }
      },
      "177": {
        start: {
          line: 525,
          column: 16
        },
        end: {
          line: 525,
          column: 56
        }
      },
      "178": {
        start: {
          line: 528,
          column: 37
        },
        end: {
          line: 566,
          column: 7
        }
      },
      "179": {
        start: {
          line: 567,
          column: 27
        },
        end: {
          line: 567,
          column: 99
        }
      },
      "180": {
        start: {
          line: 568,
          column: 12
        },
        end: {
          line: 578,
          column: 16
        }
      },
      "181": {
        start: {
          line: 568,
          column: 43
        },
        end: {
          line: 578,
          column: 13
        }
      },
      "182": {
        start: {
          line: 581,
          column: 12
        },
        end: {
          line: 581,
          column: 93
        }
      },
      "183": {
        start: {
          line: 582,
          column: 12
        },
        end: {
          line: 582,
          column: 22
        }
      },
      "184": {
        start: {
          line: 589,
          column: 27
        },
        end: {
          line: 589,
          column: 65
        }
      },
      "185": {
        start: {
          line: 590,
          column: 8
        },
        end: {
          line: 592,
          column: 9
        }
      },
      "186": {
        start: {
          line: 591,
          column: 12
        },
        end: {
          line: 591,
          column: 52
        }
      },
      "187": {
        start: {
          line: 593,
          column: 21
        },
        end: {
          line: 593,
          column: 46
        }
      },
      "188": {
        start: {
          line: 594,
          column: 23
        },
        end: {
          line: 594,
          column: 55
        }
      },
      "189": {
        start: {
          line: 595,
          column: 8
        },
        end: {
          line: 767,
          column: 9
        }
      },
      "190": {
        start: {
          line: 597,
          column: 34
        },
        end: {
          line: 597,
          column: 58
        }
      },
      "191": {
        start: {
          line: 598,
          column: 30
        },
        end: {
          line: 598,
          column: 45
        }
      },
      "192": {
        start: {
          line: 599,
          column: 29
        },
        end: {
          line: 599,
          column: 30
        }
      },
      "193": {
        start: {
          line: 601,
          column: 12
        },
        end: {
          line: 605,
          column: 13
        }
      },
      "194": {
        start: {
          line: 602,
          column: 16
        },
        end: {
          line: 602,
          column: 70
        }
      },
      "195": {
        start: {
          line: 603,
          column: 16
        },
        end: {
          line: 603,
          column: 46
        }
      },
      "196": {
        start: {
          line: 604,
          column: 16
        },
        end: {
          line: 604,
          column: 29
        }
      },
      "197": {
        start: {
          line: 607,
          column: 12
        },
        end: {
          line: 611,
          column: 13
        }
      },
      "198": {
        start: {
          line: 608,
          column: 16
        },
        end: {
          line: 608,
          column: 64
        }
      },
      "199": {
        start: {
          line: 609,
          column: 16
        },
        end: {
          line: 609,
          column: 48
        }
      },
      "200": {
        start: {
          line: 610,
          column: 16
        },
        end: {
          line: 610,
          column: 29
        }
      },
      "201": {
        start: {
          line: 613,
          column: 34
        },
        end: {
          line: 698,
          column: 7
        }
      },
      "202": {
        start: {
          line: 700,
          column: 31
        },
        end: {
          line: 724,
          column: 7
        }
      },
      "203": {
        start: {
          line: 726,
          column: 12
        },
        end: {
          line: 726,
          column: 51
        }
      },
      "204": {
        start: {
          line: 727,
          column: 50
        },
        end: {
          line: 730,
          column: 14
        }
      },
      "205": {
        start: {
          line: 731,
          column: 26
        },
        end: {
          line: 731,
          column: 69
        }
      },
      "206": {
        start: {
          line: 732,
          column: 31
        },
        end: {
          line: 732,
          column: 62
        }
      },
      "207": {
        start: {
          line: 734,
          column: 29
        },
        end: {
          line: 753,
          column: 15
        }
      },
      "208": {
        start: {
          line: 734,
          column: 61
        },
        end: {
          line: 753,
          column: 13
        }
      },
      "209": {
        start: {
          line: 754,
          column: 12
        },
        end: {
          line: 762,
          column: 14
        }
      },
      "210": {
        start: {
          line: 765,
          column: 12
        },
        end: {
          line: 765,
          column: 90
        }
      },
      "211": {
        start: {
          line: 766,
          column: 12
        },
        end: {
          line: 766,
          column: 24
        }
      },
      "212": {
        start: {
          line: 773,
          column: 27
        },
        end: {
          line: 773,
          column: 65
        }
      },
      "213": {
        start: {
          line: 774,
          column: 8
        },
        end: {
          line: 776,
          column: 9
        }
      },
      "214": {
        start: {
          line: 775,
          column: 12
        },
        end: {
          line: 775,
          column: 52
        }
      },
      "215": {
        start: {
          line: 777,
          column: 21
        },
        end: {
          line: 777,
          column: 46
        }
      },
      "216": {
        start: {
          line: 778,
          column: 8
        },
        end: {
          line: 825,
          column: 9
        }
      },
      "217": {
        start: {
          line: 780,
          column: 31
        },
        end: {
          line: 807,
          column: 7
        }
      },
      "218": {
        start: {
          line: 808,
          column: 27
        },
        end: {
          line: 808,
          column: 72
        }
      },
      "219": {
        start: {
          line: 809,
          column: 26
        },
        end: {
          line: 809,
          column: 40
        }
      },
      "220": {
        start: {
          line: 810,
          column: 12
        },
        end: {
          line: 815,
          column: 14
        }
      },
      "221": {
        start: {
          line: 818,
          column: 12
        },
        end: {
          line: 818,
          column: 86
        }
      },
      "222": {
        start: {
          line: 819,
          column: 12
        },
        end: {
          line: 824,
          column: 14
        }
      },
      "223": {
        start: {
          line: 831,
          column: 21
        },
        end: {
          line: 831,
          column: 46
        }
      },
      "224": {
        start: {
          line: 832,
          column: 8
        },
        end: {
          line: 891,
          column: 9
        }
      },
      "225": {
        start: {
          line: 834,
          column: 34
        },
        end: {
          line: 834,
          column: 82
        }
      },
      "226": {
        start: {
          line: 835,
          column: 31
        },
        end: {
          line: 835,
          column: 68
        }
      },
      "227": {
        start: {
          line: 836,
          column: 40
        },
        end: {
          line: 836,
          column: 95
        }
      },
      "228": {
        start: {
          line: 837,
          column: 72
        },
        end: {
          line: 841,
          column: 14
        }
      },
      "229": {
        start: {
          line: 842,
          column: 30
        },
        end: {
          line: 842,
          column: 34
        }
      },
      "230": {
        start: {
          line: 843,
          column: 12
        },
        end: {
          line: 851,
          column: 13
        }
      },
      "231": {
        start: {
          line: 844,
          column: 16
        },
        end: {
          line: 844,
          column: 41
        }
      },
      "232": {
        start: {
          line: 846,
          column: 17
        },
        end: {
          line: 851,
          column: 13
        }
      },
      "233": {
        start: {
          line: 847,
          column: 16
        },
        end: {
          line: 847,
          column: 38
        }
      },
      "234": {
        start: {
          line: 849,
          column: 17
        },
        end: {
          line: 851,
          column: 13
        }
      },
      "235": {
        start: {
          line: 850,
          column: 16
        },
        end: {
          line: 850,
          column: 48
        }
      },
      "236": {
        start: {
          line: 852,
          column: 12
        },
        end: {
          line: 854,
          column: 13
        }
      },
      "237": {
        start: {
          line: 853,
          column: 16
        },
        end: {
          line: 853,
          column: 53
        }
      },
      "238": {
        start: {
          line: 856,
          column: 12
        },
        end: {
          line: 885,
          column: 13
        }
      },
      "239": {
        start: {
          line: 857,
          column: 44
        },
        end: {
          line: 857,
          column: 134
        }
      },
      "240": {
        start: {
          line: 857,
          column: 79
        },
        end: {
          line: 857,
          column: 133
        }
      },
      "241": {
        start: {
          line: 858,
          column: 40
        },
        end: {
          line: 858,
          column: 61
        }
      },
      "242": {
        start: {
          line: 859,
          column: 16
        },
        end: {
          line: 864,
          column: 19
        }
      },
      "243": {
        start: {
          line: 866,
          column: 17
        },
        end: {
          line: 885,
          column: 13
        }
      },
      "244": {
        start: {
          line: 867,
          column: 41
        },
        end: {
          line: 867,
          column: 123
        }
      },
      "245": {
        start: {
          line: 867,
          column: 76
        },
        end: {
          line: 867,
          column: 122
        }
      },
      "246": {
        start: {
          line: 868,
          column: 37
        },
        end: {
          line: 868,
          column: 55
        }
      },
      "247": {
        start: {
          line: 869,
          column: 16
        },
        end: {
          line: 874,
          column: 19
        }
      },
      "248": {
        start: {
          line: 876,
          column: 17
        },
        end: {
          line: 885,
          column: 13
        }
      },
      "249": {
        start: {
          line: 877,
          column: 50
        },
        end: {
          line: 877,
          column: 146
        }
      },
      "250": {
        start: {
          line: 877,
          column: 85
        },
        end: {
          line: 877,
          column: 145
        }
      },
      "251": {
        start: {
          line: 878,
          column: 46
        },
        end: {
          line: 878,
          column: 73
        }
      },
      "252": {
        start: {
          line: 879,
          column: 16
        },
        end: {
          line: 884,
          column: 19
        }
      },
      "253": {
        start: {
          line: 886,
          column: 12
        },
        end: {
          line: 886,
          column: 108
        }
      },
      "254": {
        start: {
          line: 889,
          column: 12
        },
        end: {
          line: 889,
          column: 93
        }
      },
      "255": {
        start: {
          line: 890,
          column: 12
        },
        end: {
          line: 890,
          column: 24
        }
      },
      "256": {
        start: {
          line: 897,
          column: 21
        },
        end: {
          line: 897,
          column: 46
        }
      },
      "257": {
        start: {
          line: 898,
          column: 8
        },
        end: {
          line: 957,
          column: 9
        }
      },
      "258": {
        start: {
          line: 900,
          column: 34
        },
        end: {
          line: 900,
          column: 82
        }
      },
      "259": {
        start: {
          line: 901,
          column: 31
        },
        end: {
          line: 901,
          column: 68
        }
      },
      "260": {
        start: {
          line: 902,
          column: 40
        },
        end: {
          line: 902,
          column: 95
        }
      },
      "261": {
        start: {
          line: 903,
          column: 72
        },
        end: {
          line: 907,
          column: 14
        }
      },
      "262": {
        start: {
          line: 908,
          column: 30
        },
        end: {
          line: 908,
          column: 34
        }
      },
      "263": {
        start: {
          line: 909,
          column: 12
        },
        end: {
          line: 917,
          column: 13
        }
      },
      "264": {
        start: {
          line: 910,
          column: 16
        },
        end: {
          line: 910,
          column: 41
        }
      },
      "265": {
        start: {
          line: 912,
          column: 17
        },
        end: {
          line: 917,
          column: 13
        }
      },
      "266": {
        start: {
          line: 913,
          column: 16
        },
        end: {
          line: 913,
          column: 38
        }
      },
      "267": {
        start: {
          line: 915,
          column: 17
        },
        end: {
          line: 917,
          column: 13
        }
      },
      "268": {
        start: {
          line: 916,
          column: 16
        },
        end: {
          line: 916,
          column: 48
        }
      },
      "269": {
        start: {
          line: 918,
          column: 12
        },
        end: {
          line: 920,
          column: 13
        }
      },
      "270": {
        start: {
          line: 919,
          column: 16
        },
        end: {
          line: 919,
          column: 53
        }
      },
      "271": {
        start: {
          line: 922,
          column: 12
        },
        end: {
          line: 951,
          column: 13
        }
      },
      "272": {
        start: {
          line: 923,
          column: 44
        },
        end: {
          line: 923,
          column: 134
        }
      },
      "273": {
        start: {
          line: 923,
          column: 79
        },
        end: {
          line: 923,
          column: 133
        }
      },
      "274": {
        start: {
          line: 924,
          column: 40
        },
        end: {
          line: 924,
          column: 61
        }
      },
      "275": {
        start: {
          line: 925,
          column: 16
        },
        end: {
          line: 930,
          column: 19
        }
      },
      "276": {
        start: {
          line: 932,
          column: 17
        },
        end: {
          line: 951,
          column: 13
        }
      },
      "277": {
        start: {
          line: 933,
          column: 41
        },
        end: {
          line: 933,
          column: 123
        }
      },
      "278": {
        start: {
          line: 933,
          column: 76
        },
        end: {
          line: 933,
          column: 122
        }
      },
      "279": {
        start: {
          line: 934,
          column: 37
        },
        end: {
          line: 934,
          column: 55
        }
      },
      "280": {
        start: {
          line: 935,
          column: 16
        },
        end: {
          line: 940,
          column: 19
        }
      },
      "281": {
        start: {
          line: 942,
          column: 17
        },
        end: {
          line: 951,
          column: 13
        }
      },
      "282": {
        start: {
          line: 943,
          column: 50
        },
        end: {
          line: 943,
          column: 146
        }
      },
      "283": {
        start: {
          line: 943,
          column: 85
        },
        end: {
          line: 943,
          column: 145
        }
      },
      "284": {
        start: {
          line: 944,
          column: 46
        },
        end: {
          line: 944,
          column: 73
        }
      },
      "285": {
        start: {
          line: 945,
          column: 16
        },
        end: {
          line: 950,
          column: 19
        }
      },
      "286": {
        start: {
          line: 952,
          column: 12
        },
        end: {
          line: 952,
          column: 155
        }
      },
      "287": {
        start: {
          line: 955,
          column: 12
        },
        end: {
          line: 955,
          column: 101
        }
      },
      "288": {
        start: {
          line: 956,
          column: 12
        },
        end: {
          line: 956,
          column: 24
        }
      },
      "289": {
        start: {
          line: 963,
          column: 27
        },
        end: {
          line: 963,
          column: 65
        }
      },
      "290": {
        start: {
          line: 964,
          column: 8
        },
        end: {
          line: 966,
          column: 9
        }
      },
      "291": {
        start: {
          line: 965,
          column: 12
        },
        end: {
          line: 965,
          column: 52
        }
      },
      "292": {
        start: {
          line: 967,
          column: 8
        },
        end: {
          line: 1009,
          column: 9
        }
      },
      "293": {
        start: {
          line: 969,
          column: 26
        },
        end: {
          line: 986,
          column: 7
        }
      },
      "294": {
        start: {
          line: 987,
          column: 27
        },
        end: {
          line: 987,
          column: 96
        }
      },
      "295": {
        start: {
          line: 988,
          column: 12
        },
        end: {
          line: 1004,
          column: 16
        }
      },
      "296": {
        start: {
          line: 988,
          column: 46
        },
        end: {
          line: 1004,
          column: 13
        }
      },
      "297": {
        start: {
          line: 1007,
          column: 12
        },
        end: {
          line: 1007,
          column: 76
        }
      },
      "298": {
        start: {
          line: 1008,
          column: 12
        },
        end: {
          line: 1008,
          column: 22
        }
      },
      "299": {
        start: {
          line: 1015,
          column: 27
        },
        end: {
          line: 1015,
          column: 65
        }
      },
      "300": {
        start: {
          line: 1016,
          column: 8
        },
        end: {
          line: 1018,
          column: 9
        }
      },
      "301": {
        start: {
          line: 1017,
          column: 12
        },
        end: {
          line: 1017,
          column: 52
        }
      },
      "302": {
        start: {
          line: 1019,
          column: 8
        },
        end: {
          line: 1071,
          column: 9
        }
      },
      "303": {
        start: {
          line: 1022,
          column: 26
        },
        end: {
          line: 1039,
          column: 7
        }
      },
      "304": {
        start: {
          line: 1040,
          column: 27
        },
        end: {
          line: 1040,
          column: 98
        }
      },
      "305": {
        start: {
          line: 1042,
          column: 12
        },
        end: {
          line: 1066,
          column: 16
        }
      },
      "306": {
        start: {
          line: 1042,
          column: 46
        },
        end: {
          line: 1066,
          column: 13
        }
      },
      "307": {
        start: {
          line: 1069,
          column: 12
        },
        end: {
          line: 1069,
          column: 76
        }
      },
      "308": {
        start: {
          line: 1070,
          column: 12
        },
        end: {
          line: 1070,
          column: 22
        }
      },
      "309": {
        start: {
          line: 1077,
          column: 27
        },
        end: {
          line: 1077,
          column: 65
        }
      },
      "310": {
        start: {
          line: 1078,
          column: 8
        },
        end: {
          line: 1080,
          column: 9
        }
      },
      "311": {
        start: {
          line: 1079,
          column: 12
        },
        end: {
          line: 1079,
          column: 52
        }
      },
      "312": {
        start: {
          line: 1081,
          column: 8
        },
        end: {
          line: 1132,
          column: 9
        }
      },
      "313": {
        start: {
          line: 1083,
          column: 39
        },
        end: {
          line: 1087,
          column: 7
        }
      },
      "314": {
        start: {
          line: 1088,
          column: 35
        },
        end: {
          line: 1088,
          column: 109
        }
      },
      "315": {
        start: {
          line: 1089,
          column: 35
        },
        end: {
          line: 1089,
          column: 73
        }
      },
      "316": {
        start: {
          line: 1091,
          column: 33
        },
        end: {
          line: 1091,
          column: 43
        }
      },
      "317": {
        start: {
          line: 1092,
          column: 33
        },
        end: {
          line: 1092,
          column: 97
        }
      },
      "318": {
        start: {
          line: 1093,
          column: 31
        },
        end: {
          line: 1093,
          column: 99
        }
      },
      "319": {
        start: {
          line: 1094,
          column: 34
        },
        end: {
          line: 1102,
          column: 7
        }
      },
      "320": {
        start: {
          line: 1103,
          column: 35
        },
        end: {
          line: 1103,
          column: 130
        }
      },
      "321": {
        start: {
          line: 1104,
          column: 34
        },
        end: {
          line: 1104,
          column: 84
        }
      },
      "322": {
        start: {
          line: 1106,
          column: 33
        },
        end: {
          line: 1113,
          column: 7
        }
      },
      "323": {
        start: {
          line: 1114,
          column: 34
        },
        end: {
          line: 1114,
          column: 95
        }
      },
      "324": {
        start: {
          line: 1115,
          column: 37
        },
        end: {
          line: 1115,
          column: 86
        }
      },
      "325": {
        start: {
          line: 1116,
          column: 38
        },
        end: {
          line: 1116,
          column: 88
        }
      },
      "326": {
        start: {
          line: 1117,
          column: 12
        },
        end: {
          line: 1122,
          column: 14
        }
      },
      "327": {
        start: {
          line: 1125,
          column: 12
        },
        end: {
          line: 1125,
          column: 79
        }
      },
      "328": {
        start: {
          line: 1126,
          column: 12
        },
        end: {
          line: 1131,
          column: 14
        }
      },
      "329": {
        start: {
          line: 1138,
          column: 27
        },
        end: {
          line: 1138,
          column: 65
        }
      },
      "330": {
        start: {
          line: 1139,
          column: 8
        },
        end: {
          line: 1141,
          column: 9
        }
      },
      "331": {
        start: {
          line: 1140,
          column: 12
        },
        end: {
          line: 1140,
          column: 52
        }
      },
      "332": {
        start: {
          line: 1142,
          column: 8
        },
        end: {
          line: 1212,
          column: 9
        }
      },
      "333": {
        start: {
          line: 1144,
          column: 30
        },
        end: {
          line: 1144,
          column: 95
        }
      },
      "334": {
        start: {
          line: 1146,
          column: 41
        },
        end: {
          line: 1206,
          column: 15
        }
      },
      "335": {
        start: {
          line: 1148,
          column: 37
        },
        end: {
          line: 1161,
          column: 11
        }
      },
      "336": {
        start: {
          line: 1162,
          column: 38
        },
        end: {
          line: 1162,
          column: 132
        }
      },
      "337": {
        start: {
          line: 1163,
          column: 39
        },
        end: {
          line: 1181,
          column: 19
        }
      },
      "338": {
        start: {
          line: 1163,
          column: 73
        },
        end: {
          line: 1181,
          column: 17
        }
      },
      "339": {
        start: {
          line: 1183,
          column: 39
        },
        end: {
          line: 1183,
          column: 60
        }
      },
      "340": {
        start: {
          line: 1184,
          column: 36
        },
        end: {
          line: 1184,
          column: 105
        }
      },
      "341": {
        start: {
          line: 1184,
          column: 75
        },
        end: {
          line: 1184,
          column: 101
        }
      },
      "342": {
        start: {
          line: 1185,
          column: 38
        },
        end: {
          line: 1185,
          column: 109
        }
      },
      "343": {
        start: {
          line: 1185,
          column: 77
        },
        end: {
          line: 1185,
          column: 105
        }
      },
      "344": {
        start: {
          line: 1186,
          column: 40
        },
        end: {
          line: 1186,
          column: 118
        }
      },
      "345": {
        start: {
          line: 1186,
          column: 79
        },
        end: {
          line: 1186,
          column: 114
        }
      },
      "346": {
        start: {
          line: 1187,
          column: 38
        },
        end: {
          line: 1187,
          column: 114
        }
      },
      "347": {
        start: {
          line: 1187,
          column: 77
        },
        end: {
          line: 1187,
          column: 110
        }
      },
      "348": {
        start: {
          line: 1188,
          column: 16
        },
        end: {
          line: 1205,
          column: 18
        }
      },
      "349": {
        start: {
          line: 1207,
          column: 12
        },
        end: {
          line: 1207,
          column: 40
        }
      },
      "350": {
        start: {
          line: 1210,
          column: 12
        },
        end: {
          line: 1210,
          column: 78
        }
      },
      "351": {
        start: {
          line: 1211,
          column: 12
        },
        end: {
          line: 1211,
          column: 22
        }
      },
      "352": {
        start: {
          line: 1218,
          column: 8
        },
        end: {
          line: 1263,
          column: 9
        }
      },
      "353": {
        start: {
          line: 1220,
          column: 29
        },
        end: {
          line: 1220,
          column: 76
        }
      },
      "354": {
        start: {
          line: 1221,
          column: 12
        },
        end: {
          line: 1223,
          column: 13
        }
      },
      "355": {
        start: {
          line: 1222,
          column: 16
        },
        end: {
          line: 1222,
          column: 72
        }
      },
      "356": {
        start: {
          line: 1225,
          column: 31
        },
        end: {
          line: 1229,
          column: 13
        }
      },
      "357": {
        start: {
          line: 1230,
          column: 36
        },
        end: {
          line: 1230,
          column: 108
        }
      },
      "358": {
        start: {
          line: 1231,
          column: 12
        },
        end: {
          line: 1257,
          column: 13
        }
      },
      "359": {
        start: {
          line: 1233,
          column: 16
        },
        end: {
          line: 1249,
          column: 17
        }
      },
      "360": {
        start: {
          line: 1234,
          column: 20
        },
        end: {
          line: 1234,
          column: 161
        }
      },
      "361": {
        start: {
          line: 1236,
          column: 40
        },
        end: {
          line: 1236,
          column: 122
        }
      },
      "362": {
        start: {
          line: 1236,
          column: 75
        },
        end: {
          line: 1236,
          column: 121
        }
      },
      "363": {
        start: {
          line: 1237,
          column: 33
        },
        end: {
          line: 1237,
          column: 42
        }
      },
      "364": {
        start: {
          line: 1238,
          column: 47
        },
        end: {
          line: 1246,
          column: 11
        }
      },
      "365": {
        start: {
          line: 1247,
          column: 20
        },
        end: {
          line: 1247,
          column: 108
        }
      },
      "366": {
        start: {
          line: 1248,
          column: 20
        },
        end: {
          line: 1248,
          column: 122
        }
      },
      "367": {
        start: {
          line: 1251,
          column: 16
        },
        end: {
          line: 1251,
          column: 135
        }
      },
      "368": {
        start: {
          line: 1252,
          column: 51
        },
        end: {
          line: 1252,
          column: 145
        }
      },
      "369": {
        start: {
          line: 1252,
          column: 86
        },
        end: {
          line: 1252,
          column: 144
        }
      },
      "370": {
        start: {
          line: 1253,
          column: 47
        },
        end: {
          line: 1253,
          column: 75
        }
      },
      "371": {
        start: {
          line: 1254,
          column: 16
        },
        end: {
          line: 1254,
          column: 105
        }
      },
      "372": {
        start: {
          line: 1255,
          column: 16
        },
        end: {
          line: 1255,
          column: 108
        }
      },
      "373": {
        start: {
          line: 1256,
          column: 16
        },
        end: {
          line: 1256,
          column: 28
        }
      },
      "374": {
        start: {
          line: 1258,
          column: 12
        },
        end: {
          line: 1258,
          column: 25
        }
      },
      "375": {
        start: {
          line: 1261,
          column: 12
        },
        end: {
          line: 1261,
          column: 70
        }
      },
      "376": {
        start: {
          line: 1262,
          column: 12
        },
        end: {
          line: 1262,
          column: 24
        }
      },
      "377": {
        start: {
          line: 1269,
          column: 20
        },
        end: {
          line: 1269,
          column: 30
        }
      },
      "378": {
        start: {
          line: 1270,
          column: 8
        },
        end: {
          line: 1279,
          column: 9
        }
      },
      "379": {
        start: {
          line: 1272,
          column: 16
        },
        end: {
          line: 1272,
          column: 87
        }
      },
      "380": {
        start: {
          line: 1274,
          column: 16
        },
        end: {
          line: 1274,
          column: 84
        }
      },
      "381": {
        start: {
          line: 1276,
          column: 16
        },
        end: {
          line: 1276,
          column: 71
        }
      },
      "382": {
        start: {
          line: 1278,
          column: 16
        },
        end: {
          line: 1278,
          column: 88
        }
      },
      "383": {
        start: {
          line: 1282,
          column: 0
        },
        end: {
          line: 1282,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 35,
            column: 56
          },
          end: {
            line: 35,
            column: 57
          }
        },
        loc: {
          start: {
            line: 35,
            column: 71
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 35
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 31
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 50
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 50
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 83
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 146,
            column: 46
          },
          end: {
            line: 146,
            column: 47
          }
        },
        loc: {
          start: {
            line: 146,
            column: 56
          },
          end: {
            line: 161,
            column: 13
          }
        },
        line: 146
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 49
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 180
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 46
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 204
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 215,
            column: 26
          },
          end: {
            line: 215,
            column: 27
          }
        },
        loc: {
          start: {
            line: 215,
            column: 36
          },
          end: {
            line: 215,
            column: 101
          }
        },
        line: 215
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 45
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 234
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        loc: {
          start: {
            line: 260,
            column: 45
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 260
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 48
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 310
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 333,
            column: 4
          },
          end: {
            line: 333,
            column: 5
          }
        },
        loc: {
          start: {
            line: 333,
            column: 45
          },
          end: {
            line: 354,
            column: 5
          }
        },
        line: 333
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 358,
            column: 4
          },
          end: {
            line: 358,
            column: 5
          }
        },
        loc: {
          start: {
            line: 358,
            column: 38
          },
          end: {
            line: 372,
            column: 5
          }
        },
        line: 358
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 376,
            column: 4
          },
          end: {
            line: 376,
            column: 5
          }
        },
        loc: {
          start: {
            line: 376,
            column: 48
          },
          end: {
            line: 397,
            column: 5
          }
        },
        line: 376
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 401,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 401,
            column: 42
          },
          end: {
            line: 468,
            column: 5
          }
        },
        line: 401
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 455,
            column: 19
          },
          end: {
            line: 455,
            column: 20
          }
        },
        loc: {
          start: {
            line: 455,
            column: 29
          },
          end: {
            line: 455,
            column: 84
          }
        },
        line: 455
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 457,
            column: 37
          },
          end: {
            line: 457,
            column: 38
          }
        },
        loc: {
          start: {
            line: 457,
            column: 50
          },
          end: {
            line: 462,
            column: 13
          }
        },
        line: 457
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 472,
            column: 4
          },
          end: {
            line: 472,
            column: 5
          }
        },
        loc: {
          start: {
            line: 472,
            column: 50
          },
          end: {
            line: 491,
            column: 5
          }
        },
        line: 472
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 495,
            column: 4
          },
          end: {
            line: 495,
            column: 5
          }
        },
        loc: {
          start: {
            line: 495,
            column: 36
          },
          end: {
            line: 497,
            column: 5
          }
        },
        line: 495
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 501,
            column: 4
          },
          end: {
            line: 501,
            column: 5
          }
        },
        loc: {
          start: {
            line: 501,
            column: 35
          },
          end: {
            line: 517,
            column: 5
          }
        },
        line: 501
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 521,
            column: 4
          },
          end: {
            line: 521,
            column: 5
          }
        },
        loc: {
          start: {
            line: 521,
            column: 41
          },
          end: {
            line: 584,
            column: 5
          }
        },
        line: 521
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 568,
            column: 35
          },
          end: {
            line: 568,
            column: 36
          }
        },
        loc: {
          start: {
            line: 568,
            column: 43
          },
          end: {
            line: 578,
            column: 13
          }
        },
        line: 568
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 588,
            column: 4
          },
          end: {
            line: 588,
            column: 5
          }
        },
        loc: {
          start: {
            line: 588,
            column: 38
          },
          end: {
            line: 768,
            column: 5
          }
        },
        line: 588
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 734,
            column: 53
          },
          end: {
            line: 734,
            column: 54
          }
        },
        loc: {
          start: {
            line: 734,
            column: 61
          },
          end: {
            line: 753,
            column: 13
          }
        },
        line: 734
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 772,
            column: 4
          },
          end: {
            line: 772,
            column: 5
          }
        },
        loc: {
          start: {
            line: 772,
            column: 34
          },
          end: {
            line: 826,
            column: 5
          }
        },
        line: 772
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 830,
            column: 4
          },
          end: {
            line: 830,
            column: 5
          }
        },
        loc: {
          start: {
            line: 830,
            column: 44
          },
          end: {
            line: 892,
            column: 5
          }
        },
        line: 830
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 857,
            column: 73
          },
          end: {
            line: 857,
            column: 74
          }
        },
        loc: {
          start: {
            line: 857,
            column: 79
          },
          end: {
            line: 857,
            column: 133
          }
        },
        line: 857
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 867,
            column: 70
          },
          end: {
            line: 867,
            column: 71
          }
        },
        loc: {
          start: {
            line: 867,
            column: 76
          },
          end: {
            line: 867,
            column: 122
          }
        },
        line: 867
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 877,
            column: 79
          },
          end: {
            line: 877,
            column: 80
          }
        },
        loc: {
          start: {
            line: 877,
            column: 85
          },
          end: {
            line: 877,
            column: 145
          }
        },
        line: 877
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 896,
            column: 4
          },
          end: {
            line: 896,
            column: 5
          }
        },
        loc: {
          start: {
            line: 896,
            column: 51
          },
          end: {
            line: 958,
            column: 5
          }
        },
        line: 896
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 923,
            column: 73
          },
          end: {
            line: 923,
            column: 74
          }
        },
        loc: {
          start: {
            line: 923,
            column: 79
          },
          end: {
            line: 923,
            column: 133
          }
        },
        line: 923
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 933,
            column: 70
          },
          end: {
            line: 933,
            column: 71
          }
        },
        loc: {
          start: {
            line: 933,
            column: 76
          },
          end: {
            line: 933,
            column: 122
          }
        },
        line: 933
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 943,
            column: 79
          },
          end: {
            line: 943,
            column: 80
          }
        },
        loc: {
          start: {
            line: 943,
            column: 85
          },
          end: {
            line: 943,
            column: 145
          }
        },
        line: 943
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 962,
            column: 4
          },
          end: {
            line: 962,
            column: 5
          }
        },
        loc: {
          start: {
            line: 962,
            column: 36
          },
          end: {
            line: 1010,
            column: 5
          }
        },
        line: 962
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 988,
            column: 35
          },
          end: {
            line: 988,
            column: 36
          }
        },
        loc: {
          start: {
            line: 988,
            column: 46
          },
          end: {
            line: 1004,
            column: 13
          }
        },
        line: 988
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 1014,
            column: 4
          },
          end: {
            line: 1014,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1014,
            column: 46
          },
          end: {
            line: 1072,
            column: 5
          }
        },
        line: 1014
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 1042,
            column: 35
          },
          end: {
            line: 1042,
            column: 36
          }
        },
        loc: {
          start: {
            line: 1042,
            column: 46
          },
          end: {
            line: 1066,
            column: 13
          }
        },
        line: 1042
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 1076,
            column: 4
          },
          end: {
            line: 1076,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1076,
            column: 34
          },
          end: {
            line: 1133,
            column: 5
          }
        },
        line: 1076
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 1137,
            column: 4
          },
          end: {
            line: 1137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1137,
            column: 38
          },
          end: {
            line: 1213,
            column: 5
          }
        },
        line: 1137
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 1146,
            column: 73
          },
          end: {
            line: 1146,
            column: 74
          }
        },
        loc: {
          start: {
            line: 1146,
            column: 93
          },
          end: {
            line: 1206,
            column: 13
          }
        },
        line: 1146
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 1163,
            column: 62
          },
          end: {
            line: 1163,
            column: 63
          }
        },
        loc: {
          start: {
            line: 1163,
            column: 73
          },
          end: {
            line: 1181,
            column: 17
          }
        },
        line: 1163
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 1184,
            column: 58
          },
          end: {
            line: 1184,
            column: 59
          }
        },
        loc: {
          start: {
            line: 1184,
            column: 75
          },
          end: {
            line: 1184,
            column: 101
          }
        },
        line: 1184
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 1185,
            column: 60
          },
          end: {
            line: 1185,
            column: 61
          }
        },
        loc: {
          start: {
            line: 1185,
            column: 77
          },
          end: {
            line: 1185,
            column: 105
          }
        },
        line: 1185
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 1186,
            column: 62
          },
          end: {
            line: 1186,
            column: 63
          }
        },
        loc: {
          start: {
            line: 1186,
            column: 79
          },
          end: {
            line: 1186,
            column: 114
          }
        },
        line: 1186
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 1187,
            column: 60
          },
          end: {
            line: 1187,
            column: 61
          }
        },
        loc: {
          start: {
            line: 1187,
            column: 77
          },
          end: {
            line: 1187,
            column: 110
          }
        },
        line: 1187
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 1217,
            column: 4
          },
          end: {
            line: 1217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1217,
            column: 71
          },
          end: {
            line: 1264,
            column: 5
          }
        },
        line: 1217
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 1236,
            column: 69
          },
          end: {
            line: 1236,
            column: 70
          }
        },
        loc: {
          start: {
            line: 1236,
            column: 75
          },
          end: {
            line: 1236,
            column: 121
          }
        },
        line: 1236
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 1252,
            column: 80
          },
          end: {
            line: 1252,
            column: 81
          }
        },
        loc: {
          start: {
            line: 1252,
            column: 86
          },
          end: {
            line: 1252,
            column: 144
          }
        },
        line: 1252
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 1268,
            column: 4
          },
          end: {
            line: 1268,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1268,
            column: 27
          },
          end: {
            line: 1280,
            column: 5
          }
        },
        line: 1268
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 35,
            column: 22
          },
          end: {
            line: 37,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 23
          },
          end: {
            line: 35,
            column: 27
          }
        }, {
          start: {
            line: 35,
            column: 31
          },
          end: {
            line: 35,
            column: 51
          }
        }, {
          start: {
            line: 35,
            column: 56
          },
          end: {
            line: 37,
            column: 1
          }
        }],
        line: 35
      },
      "18": {
        loc: {
          start: {
            line: 36,
            column: 11
          },
          end: {
            line: 36,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 37
          },
          end: {
            line: 36,
            column: 40
          }
        }, {
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 36,
            column: 61
          }
        }],
        line: 36
      },
      "19": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 15
          }
        }, {
          start: {
            line: 36,
            column: 19
          },
          end: {
            line: 36,
            column: 33
          }
        }],
        line: 36
      },
      "20": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "21": {
        loc: {
          start: {
            line: 67,
            column: 33
          },
          end: {
            line: 67,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 33
          },
          end: {
            line: 67,
            column: 55
          }
        }, {
          start: {
            line: 67,
            column: 59
          },
          end: {
            line: 67,
            column: 61
          }
        }],
        line: 67
      },
      "22": {
        loc: {
          start: {
            line: 68,
            column: 35
          },
          end: {
            line: 68,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 35
          },
          end: {
            line: 68,
            column: 59
          }
        }, {
          start: {
            line: 68,
            column: 63
          },
          end: {
            line: 68,
            column: 64
          }
        }],
        line: 68
      },
      "23": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "24": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "25": {
        loc: {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "26": {
        loc: {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "27": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "28": {
        loc: {
          start: {
            line: 157,
            column: 28
          },
          end: {
            line: 157,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 28
          },
          end: {
            line: 157,
            column: 55
          }
        }, {
          start: {
            line: 157,
            column: 59
          },
          end: {
            line: 157,
            column: 60
          }
        }],
        line: 157
      },
      "29": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "30": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "31": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "32": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "33": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "34": {
        loc: {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 265,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 265,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "35": {
        loc: {
          start: {
            line: 293,
            column: 32
          },
          end: {
            line: 295,
            column: 23
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 294,
            column: 22
          },
          end: {
            line: 294,
            column: 135
          }
        }, {
          start: {
            line: 295,
            column: 22
          },
          end: {
            line: 295,
            column: 23
          }
        }],
        line: 293
      },
      "36": {
        loc: {
          start: {
            line: 313,
            column: 12
          },
          end: {
            line: 315,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 12
          },
          end: {
            line: 315,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "37": {
        loc: {
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "38": {
        loc: {
          start: {
            line: 371,
            column: 15
          },
          end: {
            line: 371,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 371,
            column: 15
          },
          end: {
            line: 371,
            column: 29
          }
        }, {
          start: {
            line: 371,
            column: 33
          },
          end: {
            line: 371,
            column: 37
          }
        }],
        line: 371
      },
      "39": {
        loc: {
          start: {
            line: 487,
            column: 26
          },
          end: {
            line: 487,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 487,
            column: 26
          },
          end: {
            line: 487,
            column: 47
          }
        }, {
          start: {
            line: 487,
            column: 51
          },
          end: {
            line: 487,
            column: 52
          }
        }],
        line: 487
      },
      "40": {
        loc: {
          start: {
            line: 488,
            column: 25
          },
          end: {
            line: 488,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 488,
            column: 25
          },
          end: {
            line: 488,
            column: 45
          }
        }, {
          start: {
            line: 488,
            column: 49
          },
          end: {
            line: 488,
            column: 50
          }
        }],
        line: 488
      },
      "41": {
        loc: {
          start: {
            line: 489,
            column: 23
          },
          end: {
            line: 489,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 489,
            column: 23
          },
          end: {
            line: 489,
            column: 41
          }
        }, {
          start: {
            line: 489,
            column: 45
          },
          end: {
            line: 489,
            column: 46
          }
        }],
        line: 489
      },
      "42": {
        loc: {
          start: {
            line: 503,
            column: 8
          },
          end: {
            line: 505,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 503,
            column: 8
          },
          end: {
            line: 505,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 503
      },
      "43": {
        loc: {
          start: {
            line: 524,
            column: 12
          },
          end: {
            line: 526,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 524,
            column: 12
          },
          end: {
            line: 526,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 524
      },
      "44": {
        loc: {
          start: {
            line: 573,
            column: 32
          },
          end: {
            line: 573,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 573,
            column: 32
          },
          end: {
            line: 573,
            column: 63
          }
        }, {
          start: {
            line: 573,
            column: 67
          },
          end: {
            line: 573,
            column: 68
          }
        }],
        line: 573
      },
      "45": {
        loc: {
          start: {
            line: 574,
            column: 34
          },
          end: {
            line: 574,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 574,
            column: 34
          },
          end: {
            line: 574,
            column: 67
          }
        }, {
          start: {
            line: 574,
            column: 71
          },
          end: {
            line: 574,
            column: 72
          }
        }],
        line: 574
      },
      "46": {
        loc: {
          start: {
            line: 575,
            column: 31
          },
          end: {
            line: 575,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 575,
            column: 31
          },
          end: {
            line: 575,
            column: 60
          }
        }, {
          start: {
            line: 575,
            column: 64
          },
          end: {
            line: 575,
            column: 65
          }
        }],
        line: 575
      },
      "47": {
        loc: {
          start: {
            line: 576,
            column: 33
          },
          end: {
            line: 576,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 576,
            column: 33
          },
          end: {
            line: 576,
            column: 64
          }
        }, {
          start: {
            line: 576,
            column: 68
          },
          end: {
            line: 576,
            column: 69
          }
        }],
        line: 576
      },
      "48": {
        loc: {
          start: {
            line: 590,
            column: 8
          },
          end: {
            line: 592,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 590,
            column: 8
          },
          end: {
            line: 592,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 590
      },
      "49": {
        loc: {
          start: {
            line: 601,
            column: 12
          },
          end: {
            line: 605,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 601,
            column: 12
          },
          end: {
            line: 605,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 601
      },
      "50": {
        loc: {
          start: {
            line: 607,
            column: 12
          },
          end: {
            line: 611,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 607,
            column: 12
          },
          end: {
            line: 611,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 607
      },
      "51": {
        loc: {
          start: {
            line: 695,
            column: 10
          },
          end: {
            line: 695,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 695,
            column: 39
          },
          end: {
            line: 695,
            column: 88
          }
        }, {
          start: {
            line: 695,
            column: 91
          },
          end: {
            line: 695,
            column: 93
          }
        }],
        line: 695
      },
      "52": {
        loc: {
          start: {
            line: 723,
            column: 10
          },
          end: {
            line: 723,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 723,
            column: 39
          },
          end: {
            line: 723,
            column: 88
          }
        }, {
          start: {
            line: 723,
            column: 91
          },
          end: {
            line: 723,
            column: 93
          }
        }],
        line: 723
      },
      "53": {
        loc: {
          start: {
            line: 731,
            column: 35
          },
          end: {
            line: 731,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 731,
            column: 35
          },
          end: {
            line: 731,
            column: 61
          }
        }, {
          start: {
            line: 731,
            column: 65
          },
          end: {
            line: 731,
            column: 68
          }
        }],
        line: 731
      },
      "54": {
        loc: {
          start: {
            line: 743,
            column: 30
          },
          end: {
            line: 743,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 743,
            column: 48
          },
          end: {
            line: 743,
            column: 65
          }
        }, {
          start: {
            line: 743,
            column: 68
          },
          end: {
            line: 743,
            column: 72
          }
        }],
        line: 743
      },
      "55": {
        loc: {
          start: {
            line: 774,
            column: 8
          },
          end: {
            line: 776,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 774,
            column: 8
          },
          end: {
            line: 776,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 774
      },
      "56": {
        loc: {
          start: {
            line: 811,
            column: 23
          },
          end: {
            line: 811,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 811,
            column: 23
          },
          end: {
            line: 811,
            column: 44
          }
        }, {
          start: {
            line: 811,
            column: 48
          },
          end: {
            line: 811,
            column: 49
          }
        }],
        line: 811
      },
      "57": {
        loc: {
          start: {
            line: 812,
            column: 25
          },
          end: {
            line: 812,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 812,
            column: 25
          },
          end: {
            line: 812,
            column: 48
          }
        }, {
          start: {
            line: 812,
            column: 52
          },
          end: {
            line: 812,
            column: 53
          }
        }],
        line: 812
      },
      "58": {
        loc: {
          start: {
            line: 813,
            column: 26
          },
          end: {
            line: 813,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 813,
            column: 26
          },
          end: {
            line: 813,
            column: 50
          }
        }, {
          start: {
            line: 813,
            column: 54
          },
          end: {
            line: 813,
            column: 55
          }
        }],
        line: 813
      },
      "59": {
        loc: {
          start: {
            line: 814,
            column: 26
          },
          end: {
            line: 814,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 814,
            column: 26
          },
          end: {
            line: 814,
            column: 50
          }
        }, {
          start: {
            line: 814,
            column: 54
          },
          end: {
            line: 814,
            column: 55
          }
        }],
        line: 814
      },
      "60": {
        loc: {
          start: {
            line: 843,
            column: 12
          },
          end: {
            line: 851,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 843,
            column: 12
          },
          end: {
            line: 851,
            column: 13
          }
        }, {
          start: {
            line: 846,
            column: 17
          },
          end: {
            line: 851,
            column: 13
          }
        }],
        line: 843
      },
      "61": {
        loc: {
          start: {
            line: 846,
            column: 17
          },
          end: {
            line: 851,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 846,
            column: 17
          },
          end: {
            line: 851,
            column: 13
          }
        }, {
          start: {
            line: 849,
            column: 17
          },
          end: {
            line: 851,
            column: 13
          }
        }],
        line: 846
      },
      "62": {
        loc: {
          start: {
            line: 849,
            column: 17
          },
          end: {
            line: 851,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 849,
            column: 17
          },
          end: {
            line: 851,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 849
      },
      "63": {
        loc: {
          start: {
            line: 852,
            column: 12
          },
          end: {
            line: 854,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 852,
            column: 12
          },
          end: {
            line: 854,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 852
      },
      "64": {
        loc: {
          start: {
            line: 856,
            column: 12
          },
          end: {
            line: 885,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 856,
            column: 12
          },
          end: {
            line: 885,
            column: 13
          }
        }, {
          start: {
            line: 866,
            column: 17
          },
          end: {
            line: 885,
            column: 13
          }
        }],
        line: 856
      },
      "65": {
        loc: {
          start: {
            line: 866,
            column: 17
          },
          end: {
            line: 885,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 866,
            column: 17
          },
          end: {
            line: 885,
            column: 13
          }
        }, {
          start: {
            line: 876,
            column: 17
          },
          end: {
            line: 885,
            column: 13
          }
        }],
        line: 866
      },
      "66": {
        loc: {
          start: {
            line: 876,
            column: 17
          },
          end: {
            line: 885,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 876,
            column: 17
          },
          end: {
            line: 885,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 876
      },
      "67": {
        loc: {
          start: {
            line: 909,
            column: 12
          },
          end: {
            line: 917,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 909,
            column: 12
          },
          end: {
            line: 917,
            column: 13
          }
        }, {
          start: {
            line: 912,
            column: 17
          },
          end: {
            line: 917,
            column: 13
          }
        }],
        line: 909
      },
      "68": {
        loc: {
          start: {
            line: 912,
            column: 17
          },
          end: {
            line: 917,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 912,
            column: 17
          },
          end: {
            line: 917,
            column: 13
          }
        }, {
          start: {
            line: 915,
            column: 17
          },
          end: {
            line: 917,
            column: 13
          }
        }],
        line: 912
      },
      "69": {
        loc: {
          start: {
            line: 915,
            column: 17
          },
          end: {
            line: 917,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 915,
            column: 17
          },
          end: {
            line: 917,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 915
      },
      "70": {
        loc: {
          start: {
            line: 918,
            column: 12
          },
          end: {
            line: 920,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 918,
            column: 12
          },
          end: {
            line: 920,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 918
      },
      "71": {
        loc: {
          start: {
            line: 922,
            column: 12
          },
          end: {
            line: 951,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 922,
            column: 12
          },
          end: {
            line: 951,
            column: 13
          }
        }, {
          start: {
            line: 932,
            column: 17
          },
          end: {
            line: 951,
            column: 13
          }
        }],
        line: 922
      },
      "72": {
        loc: {
          start: {
            line: 929,
            column: 30
          },
          end: {
            line: 929,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 929,
            column: 30
          },
          end: {
            line: 929,
            column: 36
          }
        }, {
          start: {
            line: 929,
            column: 40
          },
          end: {
            line: 929,
            column: 69
          }
        }],
        line: 929
      },
      "73": {
        loc: {
          start: {
            line: 932,
            column: 17
          },
          end: {
            line: 951,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 932,
            column: 17
          },
          end: {
            line: 951,
            column: 13
          }
        }, {
          start: {
            line: 942,
            column: 17
          },
          end: {
            line: 951,
            column: 13
          }
        }],
        line: 932
      },
      "74": {
        loc: {
          start: {
            line: 939,
            column: 30
          },
          end: {
            line: 939,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 939,
            column: 30
          },
          end: {
            line: 939,
            column: 36
          }
        }, {
          start: {
            line: 939,
            column: 40
          },
          end: {
            line: 939,
            column: 69
          }
        }],
        line: 939
      },
      "75": {
        loc: {
          start: {
            line: 942,
            column: 17
          },
          end: {
            line: 951,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 942,
            column: 17
          },
          end: {
            line: 951,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 942
      },
      "76": {
        loc: {
          start: {
            line: 949,
            column: 30
          },
          end: {
            line: 949,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 949,
            column: 30
          },
          end: {
            line: 949,
            column: 36
          }
        }, {
          start: {
            line: 949,
            column: 40
          },
          end: {
            line: 949,
            column: 69
          }
        }],
        line: 949
      },
      "77": {
        loc: {
          start: {
            line: 952,
            column: 121
          },
          end: {
            line: 952,
            column: 151
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 952,
            column: 121
          },
          end: {
            line: 952,
            column: 127
          }
        }, {
          start: {
            line: 952,
            column: 131
          },
          end: {
            line: 952,
            column: 151
          }
        }],
        line: 952
      },
      "78": {
        loc: {
          start: {
            line: 964,
            column: 8
          },
          end: {
            line: 966,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 964,
            column: 8
          },
          end: {
            line: 966,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 964
      },
      "79": {
        loc: {
          start: {
            line: 993,
            column: 24
          },
          end: {
            line: 993,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 993,
            column: 24
          },
          end: {
            line: 993,
            column: 46
          }
        }, {
          start: {
            line: 993,
            column: 50
          },
          end: {
            line: 993,
            column: 63
          }
        }],
        line: 993
      },
      "80": {
        loc: {
          start: {
            line: 996,
            column: 32
          },
          end: {
            line: 996,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 996,
            column: 32
          },
          end: {
            line: 996,
            column: 64
          }
        }, {
          start: {
            line: 996,
            column: 68
          },
          end: {
            line: 996,
            column: 69
          }
        }],
        line: 996
      },
      "81": {
        loc: {
          start: {
            line: 997,
            column: 29
          },
          end: {
            line: 997,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 997,
            column: 29
          },
          end: {
            line: 997,
            column: 60
          }
        }, {
          start: {
            line: 997,
            column: 64
          },
          end: {
            line: 997,
            column: 65
          }
        }],
        line: 997
      },
      "82": {
        loc: {
          start: {
            line: 1016,
            column: 8
          },
          end: {
            line: 1018,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1016,
            column: 8
          },
          end: {
            line: 1018,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1016
      },
      "83": {
        loc: {
          start: {
            line: 1058,
            column: 32
          },
          end: {
            line: 1058,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1058,
            column: 32
          },
          end: {
            line: 1058,
            column: 55
          }
        }, {
          start: {
            line: 1058,
            column: 59
          },
          end: {
            line: 1058,
            column: 60
          }
        }],
        line: 1058
      },
      "84": {
        loc: {
          start: {
            line: 1078,
            column: 8
          },
          end: {
            line: 1080,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1078,
            column: 8
          },
          end: {
            line: 1080,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1078
      },
      "85": {
        loc: {
          start: {
            line: 1139,
            column: 8
          },
          end: {
            line: 1141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1139,
            column: 8
          },
          end: {
            line: 1141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1139
      },
      "86": {
        loc: {
          start: {
            line: 1184,
            column: 82
          },
          end: {
            line: 1184,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1184,
            column: 82
          },
          end: {
            line: 1184,
            column: 95
          }
        }, {
          start: {
            line: 1184,
            column: 99
          },
          end: {
            line: 1184,
            column: 100
          }
        }],
        line: 1184
      },
      "87": {
        loc: {
          start: {
            line: 1185,
            column: 84
          },
          end: {
            line: 1185,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1185,
            column: 84
          },
          end: {
            line: 1185,
            column: 99
          }
        }, {
          start: {
            line: 1185,
            column: 103
          },
          end: {
            line: 1185,
            column: 104
          }
        }],
        line: 1185
      },
      "88": {
        loc: {
          start: {
            line: 1186,
            column: 86
          },
          end: {
            line: 1186,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1186,
            column: 86
          },
          end: {
            line: 1186,
            column: 108
          }
        }, {
          start: {
            line: 1186,
            column: 112
          },
          end: {
            line: 1186,
            column: 113
          }
        }],
        line: 1186
      },
      "89": {
        loc: {
          start: {
            line: 1187,
            column: 84
          },
          end: {
            line: 1187,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1187,
            column: 84
          },
          end: {
            line: 1187,
            column: 104
          }
        }, {
          start: {
            line: 1187,
            column: 108
          },
          end: {
            line: 1187,
            column: 109
          }
        }],
        line: 1187
      },
      "90": {
        loc: {
          start: {
            line: 1201,
            column: 36
          },
          end: {
            line: 1201,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1201,
            column: 36
          },
          end: {
            line: 1201,
            column: 61
          }
        }, {
          start: {
            line: 1201,
            column: 65
          },
          end: {
            line: 1201,
            column: 85
          }
        }],
        line: 1201
      },
      "91": {
        loc: {
          start: {
            line: 1221,
            column: 12
          },
          end: {
            line: 1223,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1221,
            column: 12
          },
          end: {
            line: 1223,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1221
      },
      "92": {
        loc: {
          start: {
            line: 1221,
            column: 16
          },
          end: {
            line: 1221,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1221,
            column: 16
          },
          end: {
            line: 1221,
            column: 25
          }
        }, {
          start: {
            line: 1221,
            column: 29
          },
          end: {
            line: 1221,
            column: 59
          }
        }],
        line: 1221
      },
      "93": {
        loc: {
          start: {
            line: 1231,
            column: 12
          },
          end: {
            line: 1257,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1231,
            column: 12
          },
          end: {
            line: 1257,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1231
      },
      "94": {
        loc: {
          start: {
            line: 1233,
            column: 16
          },
          end: {
            line: 1249,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1233,
            column: 16
          },
          end: {
            line: 1249,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1233
      },
      "95": {
        loc: {
          start: {
            line: 1270,
            column: 8
          },
          end: {
            line: 1279,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 1271,
            column: 12
          },
          end: {
            line: 1272,
            column: 87
          }
        }, {
          start: {
            line: 1273,
            column: 12
          },
          end: {
            line: 1274,
            column: 84
          }
        }, {
          start: {
            line: 1275,
            column: 12
          },
          end: {
            line: 1276,
            column: 71
          }
        }, {
          start: {
            line: 1277,
            column: 12
          },
          end: {
            line: 1278,
            column: 88
          }
        }],
        line: 1270
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0,
      "378": 0,
      "379": 0,
      "380": 0,
      "381": 0,
      "382": 0,
      "383": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0, 0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/department-head/departmentHeadService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/services/department-head/departmentHeadService.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\nimport { EmployeeModel } from '../../models/hr/Employee';\nimport { PayrollApprovalModel } from '../../models/payroll/PayrollApproval';\nimport logger from '../../utils/logger';\n\nconst employeeModel = new EmployeeModel();\nconst payrollApprovalModel = new PayrollApprovalModel();\n\nexport interface DepartmentHeadDashboard {\n  department: {\n    id: string;\n    name: string;\n    description: string;\n    employeeCount: number;\n  };\n  pendingRequests: {\n    timeCorrections: number;\n    overtime: number;\n    leaves: number;\n    total: number;\n  };\n  recentActivity: Array<{\n    type: 'time_correction' | 'overtime' | 'leave';\n    employeeName: string;\n    date: string;\n    status: string;\n  }>;\n  attendanceSummary: {\n    presentToday: number;\n    absentToday: number;\n    lateToday: number;\n  };\n}\n\nexport interface DepartmentEmployee {\n  id: string;\n  employeeId: string;\n  user: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  position: string;\n  employmentType: string;\n  hireDate: string;\n  status: string;\n  lastAttendance?: string;\n}\n\nexport interface PendingRequest {\n  id: string;\n  type: 'time_correction' | 'overtime' | 'leave';\n  employee: {\n    id: string;\n    employeeId: string;\n    name: string;\n  };\n  requestDate: string;\n  details: any;\n  status: string;\n  createdAt: string;\n}\n\nexport interface DepartmentStats {\n  totalEmployees: number;\n  activeEmployees: number;\n  attendanceRate: number;\n  averageHours: number;\n  pendingRequests: number;\n  approvedRequests: number;\n  rejectedRequests: number;\n}\n\nexport class DepartmentHeadService {\n  /**\n   * Get department head dashboard data\n   */\n  async getDashboard(userId: string): Promise<DepartmentHeadDashboard> {\n    try {\n      // Get department information\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      // Get pending requests count\n      const pendingRequests = await this.getPendingRequestsCount(department.id);\n\n      // Get recent activity\n      const recentActivity = await this.getRecentActivity(department.id);\n\n      // Get attendance summary for today\n      const attendanceSummary = await this.getTodayAttendanceSummary(department.id);\n\n      return {\n        department: {\n          id: department.id,\n          name: department.name,\n          description: department.description || '',\n          employeeCount: department.employeeCount || 0\n        },\n        pendingRequests,\n        recentActivity,\n        attendanceSummary\n      };\n    } catch (error) {\n      logger.error('Error getting department head dashboard:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get department employees\n   */\n  async getDepartmentEmployees(\n    userId: string,\n    options: {\n      page: number;\n      limit: number;\n      status?: string;\n      search?: string;\n    }\n  ): Promise<{ data: DepartmentEmployee[]; pagination: any }> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      const offset = (options.page - 1) * options.limit;\n      \n      let query = `\n        SELECT \n          e.id,\n          e.employee_id,\n          e.position,\n          e.employment_type,\n          e.base_salary,\n          e.hire_date,\n          e.status,\n          u.id as user_id,\n          u.first_name,\n          u.last_name,\n          u.email,\n          ar.date as last_attendance\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN LATERAL (\n          SELECT date\n          FROM attendance_records ar\n          WHERE ar.employee_id = e.id\n          ORDER BY ar.date DESC\n          LIMIT 1\n        ) ar ON true\n        WHERE e.department_id = $1\n      `;\n\n      const queryParams: any[] = [department.id];\n      let paramCount = 2;\n\n      if (options.status) {\n        query += ` AND e.status = $${paramCount++}`;\n        queryParams.push(options.status);\n      }\n\n      if (options.search) {\n        query += ` AND (u.first_name ILIKE $${paramCount} OR u.last_name ILIKE $${paramCount} OR e.employee_id ILIKE $${paramCount})`;\n        queryParams.push(`%${options.search}%`);\n      }\n\n      query += ` ORDER BY u.first_name, u.last_name LIMIT $${paramCount++} OFFSET $${paramCount++}`;\n      queryParams.push(options.limit, offset);\n\n      const result = await getPool().query(query, queryParams);\n\n      // Get total count\n      let countQuery = `\n        SELECT COUNT(*) as total\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        WHERE e.department_id = $1\n      `;\n      const countParams: any[] = [department.id];\n\n      if (options.status) {\n        countQuery += ` AND e.status = $2`;\n        countParams.push(options.status);\n      }\n\n      if (options.search) {\n        countQuery += ` AND (u.first_name ILIKE $${countParams.length + 1} OR u.last_name ILIKE $${countParams.length + 1} OR e.employee_id ILIKE $${countParams.length + 1})`;\n        countParams.push(`%${options.search}%`);\n      }\n\n      const countResult = await getPool().query(countQuery, countParams);\n      const total = parseInt(countResult.rows[0].total);\n\n      const employees: DepartmentEmployee[] = result.rows.map((row: any) => ({\n        id: row.id,\n        employeeId: row.employee_id,\n        user: {\n          id: row.user_id,\n          firstName: row.first_name,\n          lastName: row.last_name,\n          email: row.email\n        },\n        position: row.position,\n        employmentType: row.employment_type,\n        baseSalary: parseFloat(row.base_salary) || 0,\n        hireDate: row.hire_date,\n        status: row.status,\n        lastAttendance: row.last_attendance\n      }));\n\n      return {\n        data: employees,\n        pagination: {\n          page: options.page,\n          limit: options.limit,\n          total,\n          pages: Math.ceil(total / options.limit)\n        }\n      };\n    } catch (error) {\n      logger.error('Error getting department employees:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get employee details\n   */\n  async getEmployeeDetails(userId: string, employeeId: string): Promise<any> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      const employee = await employeeModel.findByIdWithDetails(employeeId);\n      if (!employee) {\n        throw new Error('Employee not found');\n      }\n\n      // Verify employee belongs to department head's department\n      if (employee.department_id !== department.id) {\n        throw new Error('Employee does not belong to your department');\n      }\n\n      return employee;\n    } catch (error) {\n      logger.error('Error getting employee details:', { error, userId, employeeId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get pending requests for approval\n   */\n  async getPendingRequests(\n    userId: string,\n    options: {\n      type?: string;\n      page: number;\n      limit: number;\n    }\n  ): Promise<{ data: PendingRequest[]; pagination: any }> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      const offset = (options.page - 1) * options.limit;\n      const requests: PendingRequest[] = [];\n\n      // For now, return empty array as the models need to be extended with department-specific methods\n      // This would be implemented by adding findPendingByDepartment methods to the respective models\n\n      // Sort by creation date (newest first)\n      requests.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n      return {\n        data: requests.slice(offset, offset + options.limit),\n        pagination: {\n          page: options.page,\n          limit: options.limit,\n          total: requests.length,\n          pages: Math.ceil(requests.length / options.limit)\n        }\n      };\n    } catch (error) {\n      logger.error('Error getting pending requests:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get request history\n   */\n  async getRequestHistory(\n    userId: string,\n    options: {\n      type?: string;\n      page: number;\n      limit: number;\n      status?: string;\n      startDate?: string;\n      endDate?: string;\n    }\n  ): Promise<{ data: PendingRequest[]; pagination: any }> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      // This would be similar to getPendingRequests but with different filters\n      // For now, return empty data as the models need to be extended\n      return {\n        data: [],\n        pagination: {\n          page: options.page,\n          limit: options.limit,\n          total: 0,\n          pages: 0\n        }\n      };\n    } catch (error) {\n      logger.error('Error getting request history:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get department statistics\n   */\n  async getDepartmentStats(userId: string, period: string): Promise<DepartmentStats> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      // Get basic employee counts\n      const employeeCountQuery = `\n        SELECT \n          COUNT(*) as total,\n          COUNT(*) FILTER (WHERE status = 'active') as active\n        FROM employees \n        WHERE department_id = $1\n      `;\n      const employeeResult = await getPool().query(employeeCountQuery, [department.id]);\n\n      // Get attendance rate for the period\n      const attendanceQuery = `\n        SELECT \n          COUNT(DISTINCT ar.employee_id) as present_employees,\n          COUNT(DISTINCT e.id) as total_employees\n        FROM employees e\n        LEFT JOIN attendance_records ar ON e.id = ar.employee_id \n          AND ar.created_at >= $2\n          AND ar.status = 'present'\n        WHERE e.department_id = $1 AND e.status = 'active'\n      `;\n      \n      const periodStart = this.getPeriodStart(period);\n      const attendanceResult = await getPool().query(attendanceQuery, [department.id, periodStart]);\n\n      // Get pending requests count\n      const pendingCount = await this.getPendingRequestsCount(department.id);\n\n      return {\n        totalEmployees: parseInt(employeeResult.rows[0].total),\n        activeEmployees: parseInt(employeeResult.rows[0].active),\n        attendanceRate: attendanceResult.rows[0].total_employees > 0 \n          ? (parseInt(attendanceResult.rows[0].present_employees) / parseInt(attendanceResult.rows[0].total_employees)) * 100\n          : 0,\n        averageHours: 0, // Would need more complex calculation\n        pendingRequests: pendingCount.total,\n        approvedRequests: 0, // Would need to query approval history\n        rejectedRequests: 0 // Would need to query approval history\n      };\n    } catch (error) {\n      logger.error('Error getting department statistics:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get attendance summary for department\n   */\n  async getAttendanceSummary(\n    userId: string,\n    options: {\n      startDate?: string;\n      endDate?: string;\n      employeeId?: string;\n    }\n  ): Promise<any> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      // Implementation would depend on specific requirements\n      return {\n        summary: 'Attendance summary data',\n        period: {\n          startDate: options.startDate,\n          endDate: options.endDate\n        }\n      };\n    } catch (error) {\n      logger.error('Error getting attendance summary:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get payroll summary for department\n   */\n  async getPayrollSummary(\n    userId: string,\n    options: {\n      periodId?: string;\n      page: number;\n      limit: number;\n    }\n  ): Promise<{ data: any[]; pagination: any }> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      // Implementation would depend on specific requirements\n      return {\n        data: [],\n        pagination: {\n          page: options.page,\n          limit: options.limit,\n          total: 0,\n          pages: 0\n        }\n      };\n    } catch (error) {\n      logger.error('Error getting payroll summary:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Helper method to get department by department head user ID\n   */\n  private async getDepartmentByHead(userId: string): Promise<any> {\n    const query = `\n      SELECT \n        d.id,\n        d.name,\n        d.description,\n        COUNT(e.id) as employee_count\n      FROM departments d\n      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'\n      WHERE d.department_head_user_id = $1 AND d.is_active = true\n      GROUP BY d.id, d.name, d.description\n    `;\n    \n    const result = await getPool().query(query, [userId]);\n    return result.rows[0] || null;\n  }\n\n  /**\n   * Helper method to get pending requests count\n   */\n  private async getPendingRequestsCount(departmentId: string): Promise<{\n    timeCorrections: number;\n    overtime: number;\n    leaves: number;\n    total: number;\n  }> {\n    const query = `\n      SELECT \n        (SELECT COUNT(*) FROM time_correction_requests tcr\n         JOIN employees e ON tcr.employee_id = e.id\n         WHERE e.department_id = $1 AND tcr.status = 'pending') as time_corrections,\n        (SELECT COUNT(*) FROM overtime_requests otr\n         JOIN employees e ON otr.employee_id = e.id\n         WHERE e.department_id = $1 AND otr.status = 'pending') as overtime,\n        (SELECT COUNT(*) FROM leaves l\n         JOIN employees e ON l.employee_id = e.id\n         WHERE e.department_id = $1 AND l.status = 'pending') as leaves\n    `;\n    \n    const result = await getPool().query(query, [departmentId]);\n    const row = result.rows[0];\n    \n    return {\n      timeCorrections: parseInt(row.time_corrections),\n      overtime: parseInt(row.overtime),\n      leaves: parseInt(row.leaves),\n      total: parseInt(row.time_corrections) + parseInt(row.overtime) + parseInt(row.leaves)\n    };\n  }\n\n  /**\n   * Helper method to get recent activity\n   */\n  private async getRecentActivity(departmentId: string): Promise<Array<{\n    type: 'time_correction' | 'overtime' | 'leave';\n    employeeName: string;\n    date: string;\n    status: string;\n  }>> {\n    try {\n      // Get recent time correction requests\n      const timeCorrectionsQuery = `\n        SELECT \n          'time_correction' as type,\n          CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n          tcr.created_at as date,\n          tcr.status\n        FROM time_correction_requests tcr\n        JOIN employees e ON tcr.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        WHERE e.department_id = $1\n        ORDER BY tcr.created_at DESC\n        LIMIT 5\n      `;\n\n      // Get recent overtime requests\n      const overtimeQuery = `\n        SELECT \n          'overtime' as type,\n          CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n          otr.created_at as date,\n          otr.status\n        FROM overtime_requests otr\n        JOIN employees e ON otr.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        WHERE e.department_id = $1\n        ORDER BY otr.created_at DESC\n        LIMIT 5\n      `;\n\n      // Get recent leave requests\n      const leaveQuery = `\n        SELECT \n          'leave' as type,\n          CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n          l.created_at as date,\n          l.status\n        FROM leaves l\n        JOIN employees e ON l.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        WHERE e.department_id = $1\n        ORDER BY l.created_at DESC\n        LIMIT 5\n      `;\n\n      const [timeCorrectionsResult, overtimeResult, leaveResult] = await Promise.all([\n        getPool().query(timeCorrectionsQuery, [departmentId]),\n        getPool().query(overtimeQuery, [departmentId]),\n        getPool().query(leaveQuery, [departmentId])\n      ]);\n\n      // Combine all results and sort by date\n      const allActivities = [\n        ...timeCorrectionsResult.rows,\n        ...overtimeResult.rows,\n        ...leaveResult.rows\n      ].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n       .slice(0, 10); // Get top 10 most recent activities\n\n      return allActivities.map(activity => ({\n        type: activity.type as 'time_correction' | 'overtime' | 'leave',\n        employeeName: activity.employee_name,\n        date: activity.date,\n        status: activity.status\n      }));\n    } catch (error) {\n      logger.error('Error getting recent activity:', { error, departmentId });\n      return [];\n    }\n  }\n\n  /**\n   * Helper method to get today's attendance summary\n   */\n  private async getTodayAttendanceSummary(departmentId: string): Promise<{\n    presentToday: number;\n    absentToday: number;\n    lateToday: number;\n  }> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    const query = `\n      SELECT \n        COUNT(*) FILTER (WHERE ar.overall_status = 'present') as present,\n        COUNT(*) FILTER (WHERE ar.overall_status = 'absent') as absent,\n        COUNT(*) FILTER (WHERE ar.overall_status = 'late') as late\n      FROM employees e\n      LEFT JOIN attendance_records ar ON e.id = ar.employee_id \n        AND DATE(ar.date) = $2\n      WHERE e.department_id = $1 AND e.status = 'active'\n    `;\n    \n    const result = await getPool().query(query, [departmentId, today]);\n    const row = result.rows[0];\n    \n    return {\n      presentToday: parseInt(row.present) || 0,\n      absentToday: parseInt(row.absent) || 0,\n      lateToday: parseInt(row.late) || 0\n    };\n  }\n\n  /**\n   * Get department info for department head\n   */\n  async getDepartmentInfo(userId: string): Promise<any> {\n    return await this.getDepartmentByHead(userId);\n  }\n\n  /**\n   * Get employee statistics for department\n   */\n  async getEmployeeStats(userId: string): Promise<any> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    const query = `\n      SELECT \n        COUNT(*) as total_employees,\n        COUNT(*) FILTER (WHERE status = 'active') as active_employees,\n        COUNT(*) FILTER (WHERE status = 'inactive') as inactive_employees,\n        AVG(base_salary) as average_salary\n      FROM employees \n      WHERE department_id = $1\n    `;\n    \n    const result = await getPool().query(query, [department.id]);\n    return result.rows[0];\n  }\n\n  /**\n   * Get employee performance statistics\n   */\n  async getEmployeePerformance(userId: string): Promise<any[]> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found');\n      }\n\n      // Get employee performance data with attendance statistics\n      const performanceQuery = `\n        SELECT \n          e.id as employee_id,\n          CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n          e.position,\n          e.employee_id as employee_code,\n          -- Calculate attendance rate (last 30 days)\n          COALESCE(\n            ROUND(\n              (COUNT(CASE WHEN ar.overall_status = 'present' THEN 1 END) * 100.0 / \n               NULLIF(COUNT(ar.id), 0)), 2\n            ), 0\n          ) as attendance_rate,\n          -- Calculate punctuality score (on-time arrivals)\n          COALESCE(\n            ROUND(\n              (COUNT(CASE WHEN ar.overall_status = 'present' AND as.clock_in::time <= '09:00:00' THEN 1 END) * 100.0 / \n               NULLIF(COUNT(CASE WHEN ar.overall_status = 'present' THEN 1 END), 0)), 2\n            ), 0\n          ) as punctuality_score,\n          -- Count late days\n          COUNT(CASE WHEN ar.overall_status = 'present' AND as.clock_in::time > '09:00:00' THEN 1 END) as total_days_late,\n          -- Count absent days\n          COUNT(CASE WHEN ar.overall_status = 'absent' THEN 1 END) as total_days_absent,\n          -- Average clock-in time\n          COALESCE(\n            TO_CHAR(AVG(CASE WHEN ar.overall_status = 'present' THEN as.clock_in::time END), 'HH24:MI'), \n            'N/A'\n          ) as average_clock_in_time\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN attendance_records ar ON e.id = ar.employee_id \n          AND ar.created_at >= CURRENT_DATE - INTERVAL '30 days'\n        LEFT JOIN attendance_sessions as ON ar.id = as.attendance_record_id\n          AND as.session_type = 'morning'\n        WHERE e.department_id = $1\n        GROUP BY e.id, u.first_name, u.last_name, e.position, e.employee_id\n        ORDER BY attendance_rate DESC, punctuality_score DESC\n      `;\n\n      const result = await getPool().query(performanceQuery, [department.id]);\n      \n      return result.rows.map(row => ({\n        employeeId: row.employee_id,\n        employeeName: row.employee_name,\n        position: row.position,\n        employeeCode: row.employee_code,\n        attendanceRate: parseFloat(row.attendance_rate) || 0,\n        punctualityScore: parseFloat(row.punctuality_score) || 0,\n        totalDaysLate: parseInt(row.total_days_late) || 0,\n        totalDaysAbsent: parseInt(row.total_days_absent) || 0,\n        averageClockInTime: row.average_clock_in_time\n      }));\n    } catch (error) {\n      logger.error('Error getting employee performance:', { error, userId });\n      return [];\n    }\n  }\n\n  /**\n   * Get all requests for department head\n   */\n  async getRequests(userId: string, params: {\n    type?: string;\n    status?: string;\n    page: number;\n    limit: number;\n  }): Promise<{ data: any[]; pagination: any }> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    const pool = getPool();\n    const offset = (params.page - 1) * params.limit;\n\n    try {\n      // Build the base query for all request types\n      let whereConditions = ['e.department_id = $1'];\n      let queryParams: any[] = [department.id];\n      let paramIndex = 2;\n\n      // Add type filter if specified\n      if (params.type) {\n        whereConditions.push(`request_type = $${paramIndex}`);\n        queryParams.push(params.type);\n        paramIndex++;\n      }\n\n      // Add status filter if specified\n      if (params.status) {\n        whereConditions.push(`status = $${paramIndex}`);\n        queryParams.push(params.status);\n        paramIndex++;\n      }\n\n\n      // Query to get all requests (overtime, leave, time correction) for the department\n      const requestsQuery = `\n        WITH all_requests AS (\n          -- Overtime requests\n          SELECT \n            ot.id,\n            'overtime' as request_type,\n            ot.employee_id,\n            ot.request_date as start_date,\n            ot.overtime_date as end_date,\n            ot.requested_hours as hours,\n            ot.reason,\n            ot.status::text as status,\n            ot.created_at,\n            ot.updated_at,\n            ot.approver_id as approved_by,\n            ot.approved_at,\n            ot.comments,\n            e.employee_id as employee_code,\n            u.first_name,\n            u.last_name,\n            u.email\n          FROM overtime_requests ot\n          JOIN employees e ON ot.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          WHERE e.department_id = $1\n          \n          UNION ALL\n          \n          -- Leave requests\n          SELECT \n            l.id,\n            'leave' as request_type,\n            l.employee_id,\n            l.start_date,\n            l.end_date,\n            (l.end_date - l.start_date + 1) as hours,\n            l.leave_type::text as reason,\n            l.status::text as status,\n            l.created_at,\n            l.updated_at,\n            l.approver_id as approved_by,\n            NULL as approved_at,\n            NULL as comments,\n            e.employee_id as employee_code,\n            u.first_name,\n            u.last_name,\n            u.email\n          FROM leaves l\n          JOIN employees e ON l.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          WHERE e.department_id = $1\n          \n          UNION ALL\n          \n          -- Time correction requests\n          SELECT \n            tcr.id,\n            'time_correction' as request_type,\n            tcr.employee_id,\n            tcr.correction_date as start_date,\n            tcr.correction_date as end_date,\n            NULL as hours,\n            tcr.reason,\n            tcr.status::text as status,\n            tcr.created_at,\n            tcr.updated_at,\n            tcr.approver_id as approved_by,\n            tcr.approved_at,\n            tcr.comments,\n            e.employee_id as employee_code,\n            u.first_name,\n            u.last_name,\n            u.email\n          FROM time_correction_requests tcr\n          JOIN employees e ON tcr.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          WHERE e.department_id = $1\n        )\n        SELECT \n          ar.*,\n          CONCAT(ar.first_name, ' ', ar.last_name) as employee_name\n        FROM all_requests ar\n        ${whereConditions.length > 1 ? `WHERE ${whereConditions.slice(1).join(' AND ')}` : ''}\n        ORDER BY ar.created_at DESC\n        LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n      `;\n\n      // Count query for pagination\n      const countQuery = `\n        WITH all_requests AS (\n          SELECT 'overtime' as request_type, ot.status::text as status, e.department_id\n          FROM overtime_requests ot\n          JOIN employees e ON ot.employee_id = e.id\n          WHERE e.department_id = $1\n          \n          UNION ALL\n          \n          SELECT 'leave' as request_type, l.status::text as status, e.department_id\n          FROM leaves l\n          JOIN employees e ON l.employee_id = e.id\n          WHERE e.department_id = $1\n          \n          UNION ALL\n          \n          SELECT 'time_correction' as request_type, tcr.status::text as status, e.department_id\n          FROM time_correction_requests tcr\n          JOIN employees e ON tcr.employee_id = e.id\n          WHERE e.department_id = $1\n        )\n        SELECT COUNT(*) as total\n        FROM all_requests ar\n        ${whereConditions.length > 1 ? `WHERE ${whereConditions.slice(1).join(' AND ')}` : ''}\n      `;\n\n      // Add pagination parameters\n      queryParams.push(params.limit, offset);\n\n      const [requestsResult, countResult] = await Promise.all([\n        pool.query(requestsQuery, queryParams),\n        pool.query(countQuery, queryParams.slice(0, -2)) // Remove limit and offset for count\n      ]);\n\n      const total = parseInt(countResult.rows[0]?.total || '0');\n      const totalPages = Math.ceil(total / params.limit);\n\n      // Transform the data to match the expected format\n      const requests = requestsResult.rows.map(row => ({\n        id: row.id,\n        type: row.request_type,\n        employeeId: row.employee_id,\n        employeeName: row.employee_name,\n        employeeCode: row.employee_code,\n        departmentName: department.name,\n        status: row.status,\n        submittedAt: row.created_at,\n        approverName: row.approved_by ? 'Department Head' : null,\n        approvedAt: row.approved_at,\n        details: {\n          startDate: row.start_date,\n          endDate: row.end_date,\n          hours: row.hours,\n          reason: row.reason,\n          comments: row.comments,\n          requestType: row.request_type\n        }\n      }));\n\n      return {\n        data: requests,\n        pagination: {\n          page: params.page,\n          limit: params.limit,\n          total,\n          totalPages\n        }\n      };\n    } catch (error) {\n      logger.error('Error fetching requests:', { error, userId, params });\n      throw error;\n    }\n  }\n\n  /**\n   * Get request statistics\n   */\n  async getRequestStats(userId: string): Promise<any> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    const pool = getPool();\n\n    try {\n      // Get comprehensive request statistics\n      const statsQuery = `\n        WITH all_requests AS (\n          SELECT 'overtime' as request_type, ot.status::text as status\n          FROM overtime_requests ot\n          JOIN employees e ON ot.employee_id = e.id\n          WHERE e.department_id = $1\n          \n          UNION ALL\n          \n          SELECT 'leave' as request_type, l.status::text as status\n          FROM leaves l\n          JOIN employees e ON l.employee_id = e.id\n          WHERE e.department_id = $1\n          \n          UNION ALL\n          \n          SELECT 'time_correction' as request_type, tcr.status::text as status\n          FROM time_correction_requests tcr\n          JOIN employees e ON tcr.employee_id = e.id\n          WHERE e.department_id = $1\n        )\n        SELECT \n          COUNT(*) as total,\n          COUNT(*) FILTER (WHERE status = 'pending') as pending,\n          COUNT(*) FILTER (WHERE status = 'approved') as approved,\n          COUNT(*) FILTER (WHERE status = 'rejected') as rejected\n        FROM all_requests\n      `;\n\n      const result = await pool.query(statsQuery, [department.id]);\n      const stats = result.rows[0];\n\n      return {\n        total: parseInt(stats.total) || 0,\n        pending: parseInt(stats.pending) || 0,\n        approved: parseInt(stats.approved) || 0,\n        rejected: parseInt(stats.rejected) || 0\n      };\n    } catch (error) {\n      logger.error('Error getting request stats:', { error, userId });\n      return {\n        total: 0,\n        pending: 0,\n        approved: 0,\n        rejected: 0\n      };\n    }\n  }\n\n  /**\n   * Approve a request\n   */\n  async approveRequest(userId: string, requestId: string): Promise<void> {\n    const pool = getPool();\n    \n    try {\n      // First, determine the request type by checking which table contains the request\n      const overtimeQuery = 'SELECT id FROM overtime_requests WHERE id = $1';\n      const leaveQuery = 'SELECT id FROM leaves WHERE id = $1';\n      const timeCorrectionQuery = 'SELECT id FROM time_correction_requests WHERE id = $1';\n      \n      const [overtimeResult, leaveResult, timeCorrectionResult] = await Promise.all([\n        pool.query(overtimeQuery, [requestId]),\n        pool.query(leaveQuery, [requestId]),\n        pool.query(timeCorrectionQuery, [requestId])\n      ]);\n      \n      let requestType: string | null = null;\n      if (overtimeResult.rows.length > 0) {\n        requestType = 'overtime';\n      } else if (leaveResult.rows.length > 0) {\n        requestType = 'leave';\n      } else if (timeCorrectionResult.rows.length > 0) {\n        requestType = 'time_correction';\n      }\n      \n      if (!requestType) {\n        throw new Error('Request not found');\n      }\n      \n      // Import the appropriate service and approve the request\n      if (requestType === 'overtime') {\n        const { OvertimeService } = await import('../attendance/overtimeService');\n        const overtimeService = new OvertimeService();\n        await overtimeService.approveOvertimeRequest({\n          requestId,\n          approverId: userId,\n          approved: true,\n          comments: 'Approved by department head'\n        });\n      } else if (requestType === 'leave') {\n        const { LeaveService } = await import('../leave/leaveService');\n        const leaveService = new LeaveService();\n        await leaveService.approveLeaveRequest({\n          leaveId: requestId,\n          approverId: userId,\n          approved: true,\n          comments: 'Approved by department head'\n        });\n      } else if (requestType === 'time_correction') {\n        const { TimeCorrectionService } = await import('../attendance/timeCorrectionService');\n        const timeCorrectionService = new TimeCorrectionService();\n        await timeCorrectionService.approveTimeCorrectionRequest({\n          requestId,\n          approverId: userId,\n          approved: true,\n          comments: 'Approved by department head'\n        });\n      }\n      \n      logger.info(`Department head ${userId} approved ${requestType} request ${requestId}`);\n    } catch (error) {\n      logger.error('Error approving request:', { error, userId, requestId });\n      throw error;\n    }\n  }\n\n  /**\n   * Reject a request\n   */\n  async rejectRequest(userId: string, requestId: string, reason?: string): Promise<void> {\n    const pool = getPool();\n    \n    try {\n      // First, determine the request type by checking which table contains the request\n      const overtimeQuery = 'SELECT id FROM overtime_requests WHERE id = $1';\n      const leaveQuery = 'SELECT id FROM leaves WHERE id = $1';\n      const timeCorrectionQuery = 'SELECT id FROM time_correction_requests WHERE id = $1';\n      \n      const [overtimeResult, leaveResult, timeCorrectionResult] = await Promise.all([\n        pool.query(overtimeQuery, [requestId]),\n        pool.query(leaveQuery, [requestId]),\n        pool.query(timeCorrectionQuery, [requestId])\n      ]);\n      \n      let requestType: string | null = null;\n      if (overtimeResult.rows.length > 0) {\n        requestType = 'overtime';\n      } else if (leaveResult.rows.length > 0) {\n        requestType = 'leave';\n      } else if (timeCorrectionResult.rows.length > 0) {\n        requestType = 'time_correction';\n      }\n      \n      if (!requestType) {\n        throw new Error('Request not found');\n      }\n      \n      // Import the appropriate service and reject the request\n      if (requestType === 'overtime') {\n        const { OvertimeService } = await import('../attendance/overtimeService');\n        const overtimeService = new OvertimeService();\n        await overtimeService.approveOvertimeRequest({\n          requestId,\n          approverId: userId,\n          approved: false,\n          comments: reason || 'Rejected by department head'\n        });\n      } else if (requestType === 'leave') {\n        const { LeaveService } = await import('../leave/leaveService');\n        const leaveService = new LeaveService();\n        await leaveService.approveLeaveRequest({\n          leaveId: requestId,\n          approverId: userId,\n          approved: false,\n          comments: reason || 'Rejected by department head'\n        });\n      } else if (requestType === 'time_correction') {\n        const { TimeCorrectionService } = await import('../attendance/timeCorrectionService');\n        const timeCorrectionService = new TimeCorrectionService();\n        await timeCorrectionService.approveTimeCorrectionRequest({\n          requestId,\n          approverId: userId,\n          approved: false,\n          comments: reason || 'Rejected by department head'\n        });\n      }\n      \n      logger.info(`Department head ${userId} rejected ${requestType} request ${requestId} with reason: ${reason || 'No reason provided'}`);\n    } catch (error) {\n      logger.error('Error rejecting request:', { error, userId, requestId, reason });\n      throw error;\n    }\n  }\n\n  /**\n   * Get payroll periods for department\n   */\n  async getPayrollPeriods(userId: string): Promise<any[]> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    try {\n      // Get payroll periods that have been sent for approval to this department head\n      const query = `\n        SELECT DISTINCT pp.*,\n          COUNT(DISTINCT CASE WHEN e.department_id = $1 THEN pr.employee_id END) as total_employees,\n          COALESCE(SUM(CASE WHEN e.department_id = $1 THEN pr.net_pay ELSE 0 END), 0) as total_amount,\n          pa.id as approval_id,\n          pa.status as approval_status,\n          pa.comments as approval_comments,\n          pa.approved_at\n        FROM payroll_periods pp\n        INNER JOIN payroll_approvals pa ON pp.id = pa.payroll_period_id\n        LEFT JOIN payroll_records pr ON pp.id = pr.payroll_period_id\n        LEFT JOIN employees e ON pr.employee_id = e.id\n        WHERE pa.approver_id = $2\n        GROUP BY pp.id, pp.period_name, pp.start_date, pp.end_date, pp.status, \n                 pp.working_days, pp.expected_hours, pp.created_at, pp.updated_at,\n                 pa.id, pa.status, pa.comments, pa.approved_at\n        ORDER BY pp.created_at DESC\n      `;\n      \n      const result = await getPool().query(query, [department.id, userId]);\n      \n      return result.rows.map(period => ({\n        id: period.id,\n        periodName: period.period_name,\n        startDate: period.start_date,\n        endDate: period.end_date,\n        status: period.approval_status || period.status, // Use approval status if available, fallback to period status\n        workingDays: period.working_days,\n        expectedHours: period.expected_hours,\n        totalEmployees: parseInt(period.total_employees) || 0,\n        totalAmount: parseFloat(period.total_amount) || 0,\n        approvalId: period.approval_id,\n        approvalStatus: period.approval_status,\n        approvalComments: period.approval_comments,\n        approvedAt: period.approved_at,\n        createdAt: period.created_at,\n        updatedAt: period.updated_at\n      }));\n    } catch (error) {\n      logger.error('Error getting payroll periods:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get payroll records for a specific period\n   */\n  async getPayrollRecords(userId: string, periodId: string): Promise<any[]> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    try {\n      // Get payroll records for the period, filtered by department employees\n      // Include all required fields for consistency with HR and Employee modules\n      const query = `\n        SELECT \n          pr.*,\n          u.first_name,\n          u.last_name,\n          e.employee_id,\n          e.position,\n          e.department_id,\n          d.name as department_name,\n          pp.period_name\n        FROM payroll_records pr\n        INNER JOIN employees e ON pr.employee_id = e.id\n        INNER JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        LEFT JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n        WHERE pr.payroll_period_id = $1 AND e.department_id = $2\n        ORDER BY u.first_name, u.last_name\n      `;\n      \n      const result = await getPool().query(query, [periodId, department.id]);\n      \n      // Transform to standardized format\n      return result.rows.map(record => ({\n        id: record.id,\n        payrollPeriodId: record.payroll_period_id,\n        periodName: record.period_name,\n        employeeId: record.employee_id,\n        employeeName: `${record.first_name} ${record.last_name}`,\n        position: record.position,\n        departmentId: record.department_id,\n        departmentName: record.department_name,\n        baseSalary: record.base_salary,\n        hourlyRate: record.hourly_rate,\n        totalWorkedHours: record.total_worked_hours,\n        totalRegularHours: record.total_regular_hours,\n        totalOvertimeHours: record.total_overtime_hours,\n        totalLateHours: record.total_late_hours,\n        lateDeductions: record.late_deductions,\n        paidLeaveHours: record.paid_leave_hours || 0,\n        grossPay: record.gross_pay,\n        netPay: record.net_pay,\n        totalDeductions: record.total_deductions,\n        totalBenefits: record.total_benefits,\n        status: record.status,\n        createdAt: record.created_at,\n        updatedAt: record.updated_at\n      }));\n    } catch (error) {\n      logger.error('Error getting payroll records:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get payroll statistics for department\n   */\n  async getPayrollStats(userId: string): Promise<any> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    try {\n      // Get total employees in department\n      const employeeCountQuery = `\n        SELECT COUNT(*) as count\n        FROM employees\n        WHERE department_id = $1 AND status = 'active'\n      `;\n      const employeeResult = await getPool().query(employeeCountQuery, [department.id]);\n      const totalEmployees = parseInt(employeeResult.rows[0].count);\n\n      // Get total gross pay for current month\n      const currentMonth = new Date();\n      const startOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n      const endOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n\n      const grossPayQuery = `\n        SELECT COALESCE(SUM(pr.gross_pay), 0) as total_gross_pay\n        FROM payroll_records pr\n        INNER JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n        INNER JOIN employees e ON pr.employee_id = e.id\n        WHERE e.department_id = $1 \n        AND pp.start_date >= $2 \n        AND pp.end_date <= $3\n      `;\n      const grossPayResult = await getPool().query(grossPayQuery, [department.id, startOfMonth, endOfMonth]);\n      const totalGrossPay = parseFloat(grossPayResult.rows[0].total_gross_pay);\n\n      // Get completed and processing periods count\n      const periodsQuery = `\n        SELECT \n          COUNT(CASE WHEN pa.status = 'approved' OR pp.status = 'completed' THEN 1 END) as completed_periods,\n          COUNT(CASE WHEN pp.status = 'processing' OR pp.status = 'sent_for_review' THEN 1 END) as processing_periods\n        FROM payroll_periods pp\n        INNER JOIN payroll_approvals pa ON pp.id = pa.payroll_period_id\n        WHERE pa.approver_id = $1\n      `;\n      const periodsResult = await getPool().query(periodsQuery, [userId]);\n      const completedPeriods = parseInt(periodsResult.rows[0].completed_periods);\n      const processingPeriods = parseInt(periodsResult.rows[0].processing_periods);\n\n      return {\n        totalEmployees,\n        totalGrossPay,\n        completedPeriods,\n        processingPeriods\n      };\n    } catch (error) {\n      logger.error('Error getting payroll statistics:', error);\n      return {\n        totalEmployees: 0,\n        totalGrossPay: 0,\n        completedPeriods: 0,\n        processingPeriods: 0\n      };\n    }\n  }\n\n  /**\n   * Get payroll approvals for department\n   */\n  async getPayrollApprovals(userId: string): Promise<any[]> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    try {\n      // Get pending approvals for this department head\n      const approvals = await payrollApprovalModel.getPendingApprovalsForApprover(userId);\n      \n      // For each approval, get the detailed payroll records\n      const approvalsWithDetails = await Promise.all(\n        approvals.map(async (approval) => {\n          // Get payroll records for this period and department\n          const recordsQuery = `\n            SELECT \n              pr.*,\n              u.first_name,\n              u.last_name,\n              e.employee_id,\n              e.position,\n              e.department_id\n            FROM payroll_records pr\n            INNER JOIN employees e ON pr.employee_id = e.id\n            INNER JOIN users u ON e.user_id = u.id\n            WHERE pr.payroll_period_id = $1 AND e.department_id = $2\n            ORDER BY u.first_name, u.last_name\n          `;\n          \n          const recordsResult = await getPool().query(recordsQuery, [approval.payrollPeriodId, department.id]);\n          \n          const payrollRecords = recordsResult.rows.map(record => ({\n            id: record.id,\n            employeeName: `${record.first_name} ${record.last_name}`,\n            employeeId: record.employee_id,\n            position: record.position,\n            baseSalary: record.base_salary,\n            totalRegularHours: record.total_regular_hours,\n            totalOvertimeHours: record.total_overtime_hours,\n            totalLateHours: record.total_late_hours,\n            hourlyRate: record.hourly_rate,\n            grossPay: record.gross_pay,\n            netPay: record.net_pay,\n            totalDeductions: record.total_deductions,\n            totalBenefits: record.total_benefits,\n            lateDeductions: record.late_deductions,\n            status: record.status,\n            createdAt: record.created_at,\n            updatedAt: record.updated_at\n          }));\n\n          // Calculate totals\n          const totalEmployees = payrollRecords.length;\n          const totalAmount = payrollRecords.reduce((sum, record) => sum + (record.netPay || 0), 0);\n          const totalGrossPay = payrollRecords.reduce((sum, record) => sum + (record.grossPay || 0), 0);\n          const totalDeductions = payrollRecords.reduce((sum, record) => sum + (record.totalDeductions || 0), 0);\n          const totalBenefits = payrollRecords.reduce((sum, record) => sum + (record.totalBenefits || 0), 0);\n\n          return {\n            id: approval.id,\n            periodName: approval.payrollPeriod.periodName,\n            periodId: approval.payrollPeriodId,\n            startDate: approval.payrollPeriod.startDate,\n            endDate: approval.payrollPeriod.endDate,\n            createdAt: approval.createdAt,\n            totalEmployees,\n            totalAmount,\n            totalGrossPay,\n            totalDeductions,\n            totalBenefits,\n            status: approval.status,\n            departmentName: approval.department?.name || 'Unknown Department',\n            approverName: `${approval.approver.firstName} ${approval.approver.lastName}`,\n            comments: approval.comments,\n            payrollRecords\n          };\n        })\n      );\n      \n      return approvalsWithDetails;\n    } catch (error) {\n      logger.error('Error getting payroll approvals:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Approve or reject payroll approval\n   */\n  async approvePayrollApproval(userId: string, approvalId: string, status: 'approved' | 'rejected', comments?: string): Promise<boolean> {\n    try {\n      // Verify the approval belongs to this department head\n      const approval = await payrollApprovalModel.findById(approvalId);\n      if (!approval || approval.approverId !== userId) {\n        throw new Error('Approval not found or not authorized');\n      }\n\n      // Update the approval\n      const updateData = {\n        status,\n        comments,\n        approvedAt: new Date()\n      };\n\n      const updatedApproval = await payrollApprovalModel.updatePayrollApproval(approvalId, updateData);\n      \n      if (updatedApproval) {\n        // If approved, update payroll records status to 'processed' for this department\n        if (status === 'approved') {\n          logger.info(`Updating payroll records to processed for department ${approval.departmentId} in period ${approval.payrollPeriodId}`);\n          \n          // Update all payroll records for this department and period to 'processed'\n          const { getPool } = await import('../../config/database');\n          const pool = getPool();\n          \n          const updateRecordsQuery = `\n            UPDATE payroll_records \n            SET status = 'processed', updated_at = CURRENT_TIMESTAMP\n            WHERE payroll_period_id = $1 \n            AND employee_id IN (\n              SELECT e.id FROM employees e \n              WHERE e.department_id = $2\n            )\n          `;\n          \n          await pool.query(updateRecordsQuery, [approval.payrollPeriodId, approval.departmentId]);\n          \n          logger.info(`Updated payroll records to processed for department ${approval.departmentId}`);\n        }\n        \n        // Check if all approvals for this payroll period are now complete\n        logger.info(`Department head ${userId} ${status} payroll approval ${approvalId}, checking period status...`);\n        const { PayrollApprovalService } = await import('../payroll/payrollApprovalService');\n        const payrollApprovalService = new PayrollApprovalService();\n        await payrollApprovalService.checkAndUpdatePayrollPeriodStatus(approval.payrollPeriodId);\n        \n        logger.info(`Department head ${userId} ${status} payroll approval ${approvalId}`);\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      logger.error('Error approving payroll:', error);\n      throw error;\n    }\n  }\n\n\n  /**\n   * Helper method to get period start date\n   */\n  private getPeriodStart(period: string): string {\n    const now = new Date();\n    switch (period) {\n      case 'week':\n        return new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString();\n      case 'month':\n        return new Date(now.getFullYear(), now.getMonth(), 1).toISOString();\n      case 'year':\n        return new Date(now.getFullYear(), 0, 1).toISOString();\n      default:\n        return new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString();\n    }\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4272d038957e9e583c26348ca10f63b3c014166f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2fzkt7wlwo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2fzkt7wlwo();
var __createBinding =
/* istanbul ignore next */
(cov_2fzkt7wlwo().s[0]++,
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_2fzkt7wlwo().f[0]++;
  cov_2fzkt7wlwo().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().b[2][0]++;
    cov_2fzkt7wlwo().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_2fzkt7wlwo().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_2fzkt7wlwo().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_2fzkt7wlwo().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_2fzkt7wlwo().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_2fzkt7wlwo().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_2fzkt7wlwo().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_2fzkt7wlwo().b[5][1]++,
  /* istanbul ignore next */
  (cov_2fzkt7wlwo().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_2fzkt7wlwo().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().b[3][0]++;
    cov_2fzkt7wlwo().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().f[1]++;
        cov_2fzkt7wlwo().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_2fzkt7wlwo().b[3][1]++;
  }
  cov_2fzkt7wlwo().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_2fzkt7wlwo().f[2]++;
  cov_2fzkt7wlwo().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().b[7][0]++;
    cov_2fzkt7wlwo().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_2fzkt7wlwo().b[7][1]++;
  }
  cov_2fzkt7wlwo().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_2fzkt7wlwo().s[11]++,
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_2fzkt7wlwo().f[3]++;
  cov_2fzkt7wlwo().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_2fzkt7wlwo().f[4]++;
  cov_2fzkt7wlwo().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_2fzkt7wlwo().s[14]++,
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_2fzkt7wlwo().f[5]++;
  cov_2fzkt7wlwo().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[6]++;
    cov_2fzkt7wlwo().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[17]++, []);
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().b[12][0]++;
          cov_2fzkt7wlwo().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_2fzkt7wlwo().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_2fzkt7wlwo().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[8]++;
    cov_2fzkt7wlwo().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().b[13][0]++;
      cov_2fzkt7wlwo().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_2fzkt7wlwo().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[26]++, {});
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().b[15][0]++;
      cov_2fzkt7wlwo().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().b[16][0]++;
          cov_2fzkt7wlwo().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_2fzkt7wlwo().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_2fzkt7wlwo().b[15][1]++;
    }
    cov_2fzkt7wlwo().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[34]++;
    return result;
  };
}()));
var __importDefault =
/* istanbul ignore next */
(cov_2fzkt7wlwo().s[35]++,
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[17][0]++, this) &&
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[17][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2fzkt7wlwo().b[17][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2fzkt7wlwo().f[9]++;
  cov_2fzkt7wlwo().s[36]++;
  return /* istanbul ignore next */(cov_2fzkt7wlwo().b[19][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2fzkt7wlwo().b[19][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2fzkt7wlwo().b[18][0]++, mod) :
  /* istanbul ignore next */
  (cov_2fzkt7wlwo().b[18][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2fzkt7wlwo().s[37]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2fzkt7wlwo().s[38]++;
exports.DepartmentHeadService = void 0;
const database_1 =
/* istanbul ignore next */
(cov_2fzkt7wlwo().s[39]++, require("../../config/database"));
const Employee_1 =
/* istanbul ignore next */
(cov_2fzkt7wlwo().s[40]++, require("../../models/hr/Employee"));
const PayrollApproval_1 =
/* istanbul ignore next */
(cov_2fzkt7wlwo().s[41]++, require("../../models/payroll/PayrollApproval"));
const logger_1 =
/* istanbul ignore next */
(cov_2fzkt7wlwo().s[42]++, __importDefault(require("../../utils/logger")));
const employeeModel =
/* istanbul ignore next */
(cov_2fzkt7wlwo().s[43]++, new Employee_1.EmployeeModel());
const payrollApprovalModel =
/* istanbul ignore next */
(cov_2fzkt7wlwo().s[44]++, new PayrollApproval_1.PayrollApprovalModel());
class DepartmentHeadService {
  /**
   * Get department head dashboard data
   */
  async getDashboard(userId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[10]++;
    cov_2fzkt7wlwo().s[45]++;
    try {
      // Get department information
      const department =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[46]++, await this.getDepartmentByHead(userId));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[47]++;
      if (!department) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[20][0]++;
        cov_2fzkt7wlwo().s[48]++;
        throw new Error('Department not found or user is not a department head');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[20][1]++;
      }
      // Get pending requests count
      const pendingRequests =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[49]++, await this.getPendingRequestsCount(department.id));
      // Get recent activity
      const recentActivity =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[50]++, await this.getRecentActivity(department.id));
      // Get attendance summary for today
      const attendanceSummary =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[51]++, await this.getTodayAttendanceSummary(department.id));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[52]++;
      return {
        department: {
          id: department.id,
          name: department.name,
          description:
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[21][0]++, department.description) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[21][1]++, ''),
          employeeCount:
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[22][0]++, department.employeeCount) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[22][1]++, 0)
        },
        pendingRequests,
        recentActivity,
        attendanceSummary
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[53]++;
      logger_1.default.error('Error getting department head dashboard:', {
        error,
        userId
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[54]++;
      throw error;
    }
  }
  /**
   * Get department employees
   */
  async getDepartmentEmployees(userId, options) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[11]++;
    cov_2fzkt7wlwo().s[55]++;
    try {
      const department =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[56]++, await this.getDepartmentByHead(userId));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[57]++;
      if (!department) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[23][0]++;
        cov_2fzkt7wlwo().s[58]++;
        throw new Error('Department not found or user is not a department head');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[23][1]++;
      }
      const offset =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[59]++, (options.page - 1) * options.limit);
      let query =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[60]++, `
        SELECT 
          e.id,
          e.employee_id,
          e.position,
          e.employment_type,
          e.base_salary,
          e.hire_date,
          e.status,
          u.id as user_id,
          u.first_name,
          u.last_name,
          u.email,
          ar.date as last_attendance
        FROM employees e
        JOIN users u ON e.user_id = u.id
        LEFT JOIN LATERAL (
          SELECT date
          FROM attendance_records ar
          WHERE ar.employee_id = e.id
          ORDER BY ar.date DESC
          LIMIT 1
        ) ar ON true
        WHERE e.department_id = $1
      `);
      const queryParams =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[61]++, [department.id]);
      let paramCount =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[62]++, 2);
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[63]++;
      if (options.status) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[24][0]++;
        cov_2fzkt7wlwo().s[64]++;
        query += ` AND e.status = $${paramCount++}`;
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[65]++;
        queryParams.push(options.status);
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[24][1]++;
      }
      cov_2fzkt7wlwo().s[66]++;
      if (options.search) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[25][0]++;
        cov_2fzkt7wlwo().s[67]++;
        query += ` AND (u.first_name ILIKE $${paramCount} OR u.last_name ILIKE $${paramCount} OR e.employee_id ILIKE $${paramCount})`;
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[68]++;
        queryParams.push(`%${options.search}%`);
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[25][1]++;
      }
      cov_2fzkt7wlwo().s[69]++;
      query += ` ORDER BY u.first_name, u.last_name LIMIT $${paramCount++} OFFSET $${paramCount++}`;
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[70]++;
      queryParams.push(options.limit, offset);
      const result =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[71]++, await (0, database_1.getPool)().query(query, queryParams));
      // Get total count
      let countQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[72]++, `
        SELECT COUNT(*) as total
        FROM employees e
        JOIN users u ON e.user_id = u.id
        WHERE e.department_id = $1
      `);
      const countParams =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[73]++, [department.id]);
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[74]++;
      if (options.status) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[26][0]++;
        cov_2fzkt7wlwo().s[75]++;
        countQuery += ` AND e.status = $2`;
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[76]++;
        countParams.push(options.status);
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[26][1]++;
      }
      cov_2fzkt7wlwo().s[77]++;
      if (options.search) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[27][0]++;
        cov_2fzkt7wlwo().s[78]++;
        countQuery += ` AND (u.first_name ILIKE $${countParams.length + 1} OR u.last_name ILIKE $${countParams.length + 1} OR e.employee_id ILIKE $${countParams.length + 1})`;
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[79]++;
        countParams.push(`%${options.search}%`);
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[27][1]++;
      }
      const countResult =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[80]++, await (0, database_1.getPool)().query(countQuery, countParams));
      const total =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[81]++, parseInt(countResult.rows[0].total));
      const employees =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[82]++, result.rows.map(row => {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().f[12]++;
        cov_2fzkt7wlwo().s[83]++;
        return {
          id: row.id,
          employeeId: row.employee_id,
          user: {
            id: row.user_id,
            firstName: row.first_name,
            lastName: row.last_name,
            email: row.email
          },
          position: row.position,
          employmentType: row.employment_type,
          baseSalary:
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[28][0]++, parseFloat(row.base_salary)) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[28][1]++, 0),
          hireDate: row.hire_date,
          status: row.status,
          lastAttendance: row.last_attendance
        };
      }));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[84]++;
      return {
        data: employees,
        pagination: {
          page: options.page,
          limit: options.limit,
          total,
          pages: Math.ceil(total / options.limit)
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[85]++;
      logger_1.default.error('Error getting department employees:', {
        error,
        userId
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[86]++;
      throw error;
    }
  }
  /**
   * Get employee details
   */
  async getEmployeeDetails(userId, employeeId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[13]++;
    cov_2fzkt7wlwo().s[87]++;
    try {
      const department =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[88]++, await this.getDepartmentByHead(userId));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[89]++;
      if (!department) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[29][0]++;
        cov_2fzkt7wlwo().s[90]++;
        throw new Error('Department not found or user is not a department head');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[29][1]++;
      }
      const employee =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[91]++, await employeeModel.findByIdWithDetails(employeeId));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[92]++;
      if (!employee) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[30][0]++;
        cov_2fzkt7wlwo().s[93]++;
        throw new Error('Employee not found');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[30][1]++;
      }
      // Verify employee belongs to department head's department
      cov_2fzkt7wlwo().s[94]++;
      if (employee.department_id !== department.id) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[31][0]++;
        cov_2fzkt7wlwo().s[95]++;
        throw new Error('Employee does not belong to your department');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[31][1]++;
      }
      cov_2fzkt7wlwo().s[96]++;
      return employee;
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[97]++;
      logger_1.default.error('Error getting employee details:', {
        error,
        userId,
        employeeId
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[98]++;
      throw error;
    }
  }
  /**
   * Get pending requests for approval
   */
  async getPendingRequests(userId, options) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[14]++;
    cov_2fzkt7wlwo().s[99]++;
    try {
      const department =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[100]++, await this.getDepartmentByHead(userId));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[101]++;
      if (!department) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[32][0]++;
        cov_2fzkt7wlwo().s[102]++;
        throw new Error('Department not found or user is not a department head');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[32][1]++;
      }
      const offset =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[103]++, (options.page - 1) * options.limit);
      const requests =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[104]++, []);
      // For now, return empty array as the models need to be extended with department-specific methods
      // This would be implemented by adding findPendingByDepartment methods to the respective models
      // Sort by creation date (newest first)
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[105]++;
      requests.sort((a, b) => {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().f[15]++;
        cov_2fzkt7wlwo().s[106]++;
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[107]++;
      return {
        data: requests.slice(offset, offset + options.limit),
        pagination: {
          page: options.page,
          limit: options.limit,
          total: requests.length,
          pages: Math.ceil(requests.length / options.limit)
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[108]++;
      logger_1.default.error('Error getting pending requests:', {
        error,
        userId
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[109]++;
      throw error;
    }
  }
  /**
   * Get request history
   */
  async getRequestHistory(userId, options) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[16]++;
    cov_2fzkt7wlwo().s[110]++;
    try {
      const department =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[111]++, await this.getDepartmentByHead(userId));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[112]++;
      if (!department) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[33][0]++;
        cov_2fzkt7wlwo().s[113]++;
        throw new Error('Department not found or user is not a department head');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[33][1]++;
      }
      // This would be similar to getPendingRequests but with different filters
      // For now, return empty data as the models need to be extended
      cov_2fzkt7wlwo().s[114]++;
      return {
        data: [],
        pagination: {
          page: options.page,
          limit: options.limit,
          total: 0,
          pages: 0
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[115]++;
      logger_1.default.error('Error getting request history:', {
        error,
        userId
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[116]++;
      throw error;
    }
  }
  /**
   * Get department statistics
   */
  async getDepartmentStats(userId, period) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[17]++;
    cov_2fzkt7wlwo().s[117]++;
    try {
      const department =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[118]++, await this.getDepartmentByHead(userId));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[119]++;
      if (!department) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[34][0]++;
        cov_2fzkt7wlwo().s[120]++;
        throw new Error('Department not found or user is not a department head');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[34][1]++;
      }
      // Get basic employee counts
      const employeeCountQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[121]++, `
        SELECT 
          COUNT(*) as total,
          COUNT(*) FILTER (WHERE status = 'active') as active
        FROM employees 
        WHERE department_id = $1
      `);
      const employeeResult =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[122]++, await (0, database_1.getPool)().query(employeeCountQuery, [department.id]));
      // Get attendance rate for the period
      const attendanceQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[123]++, `
        SELECT 
          COUNT(DISTINCT ar.employee_id) as present_employees,
          COUNT(DISTINCT e.id) as total_employees
        FROM employees e
        LEFT JOIN attendance_records ar ON e.id = ar.employee_id 
          AND ar.created_at >= $2
          AND ar.status = 'present'
        WHERE e.department_id = $1 AND e.status = 'active'
      `);
      const periodStart =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[124]++, this.getPeriodStart(period));
      const attendanceResult =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[125]++, await (0, database_1.getPool)().query(attendanceQuery, [department.id, periodStart]));
      // Get pending requests count
      const pendingCount =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[126]++, await this.getPendingRequestsCount(department.id));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[127]++;
      return {
        totalEmployees: parseInt(employeeResult.rows[0].total),
        activeEmployees: parseInt(employeeResult.rows[0].active),
        attendanceRate: attendanceResult.rows[0].total_employees > 0 ?
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().b[35][0]++, parseInt(attendanceResult.rows[0].present_employees) / parseInt(attendanceResult.rows[0].total_employees) * 100) :
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().b[35][1]++, 0),
        averageHours: 0,
        // Would need more complex calculation
        pendingRequests: pendingCount.total,
        approvedRequests: 0,
        // Would need to query approval history
        rejectedRequests: 0 // Would need to query approval history
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[128]++;
      logger_1.default.error('Error getting department statistics:', {
        error,
        userId
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[129]++;
      throw error;
    }
  }
  /**
   * Get attendance summary for department
   */
  async getAttendanceSummary(userId, options) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[18]++;
    cov_2fzkt7wlwo().s[130]++;
    try {
      const department =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[131]++, await this.getDepartmentByHead(userId));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[132]++;
      if (!department) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[36][0]++;
        cov_2fzkt7wlwo().s[133]++;
        throw new Error('Department not found or user is not a department head');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[36][1]++;
      }
      // Implementation would depend on specific requirements
      cov_2fzkt7wlwo().s[134]++;
      return {
        summary: 'Attendance summary data',
        period: {
          startDate: options.startDate,
          endDate: options.endDate
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[135]++;
      logger_1.default.error('Error getting attendance summary:', {
        error,
        userId
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[136]++;
      throw error;
    }
  }
  /**
   * Get payroll summary for department
   */
  async getPayrollSummary(userId, options) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[19]++;
    cov_2fzkt7wlwo().s[137]++;
    try {
      const department =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[138]++, await this.getDepartmentByHead(userId));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[139]++;
      if (!department) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[37][0]++;
        cov_2fzkt7wlwo().s[140]++;
        throw new Error('Department not found or user is not a department head');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[37][1]++;
      }
      // Implementation would depend on specific requirements
      cov_2fzkt7wlwo().s[141]++;
      return {
        data: [],
        pagination: {
          page: options.page,
          limit: options.limit,
          total: 0,
          pages: 0
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[142]++;
      logger_1.default.error('Error getting payroll summary:', {
        error,
        userId
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[143]++;
      throw error;
    }
  }
  /**
   * Helper method to get department by department head user ID
   */
  async getDepartmentByHead(userId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[20]++;
    const query =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[144]++, `
      SELECT 
        d.id,
        d.name,
        d.description,
        COUNT(e.id) as employee_count
      FROM departments d
      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'
      WHERE d.department_head_user_id = $1 AND d.is_active = true
      GROUP BY d.id, d.name, d.description
    `);
    const result =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[145]++, await (0, database_1.getPool)().query(query, [userId]));
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[146]++;
    return /* istanbul ignore next */(cov_2fzkt7wlwo().b[38][0]++, result.rows[0]) ||
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().b[38][1]++, null);
  }
  /**
   * Helper method to get pending requests count
   */
  async getPendingRequestsCount(departmentId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[21]++;
    const query =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[147]++, `
      SELECT 
        (SELECT COUNT(*) FROM time_correction_requests tcr
         JOIN employees e ON tcr.employee_id = e.id
         WHERE e.department_id = $1 AND tcr.status = 'pending') as time_corrections,
        (SELECT COUNT(*) FROM overtime_requests otr
         JOIN employees e ON otr.employee_id = e.id
         WHERE e.department_id = $1 AND otr.status = 'pending') as overtime,
        (SELECT COUNT(*) FROM leaves l
         JOIN employees e ON l.employee_id = e.id
         WHERE e.department_id = $1 AND l.status = 'pending') as leaves
    `);
    const result =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[148]++, await (0, database_1.getPool)().query(query, [departmentId]));
    const row =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[149]++, result.rows[0]);
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[150]++;
    return {
      timeCorrections: parseInt(row.time_corrections),
      overtime: parseInt(row.overtime),
      leaves: parseInt(row.leaves),
      total: parseInt(row.time_corrections) + parseInt(row.overtime) + parseInt(row.leaves)
    };
  }
  /**
   * Helper method to get recent activity
   */
  async getRecentActivity(departmentId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[22]++;
    cov_2fzkt7wlwo().s[151]++;
    try {
      // Get recent time correction requests
      const timeCorrectionsQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[152]++, `
        SELECT 
          'time_correction' as type,
          CONCAT(u.first_name, ' ', u.last_name) as employee_name,
          tcr.created_at as date,
          tcr.status
        FROM time_correction_requests tcr
        JOIN employees e ON tcr.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        WHERE e.department_id = $1
        ORDER BY tcr.created_at DESC
        LIMIT 5
      `);
      // Get recent overtime requests
      const overtimeQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[153]++, `
        SELECT 
          'overtime' as type,
          CONCAT(u.first_name, ' ', u.last_name) as employee_name,
          otr.created_at as date,
          otr.status
        FROM overtime_requests otr
        JOIN employees e ON otr.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        WHERE e.department_id = $1
        ORDER BY otr.created_at DESC
        LIMIT 5
      `);
      // Get recent leave requests
      const leaveQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[154]++, `
        SELECT 
          'leave' as type,
          CONCAT(u.first_name, ' ', u.last_name) as employee_name,
          l.created_at as date,
          l.status
        FROM leaves l
        JOIN employees e ON l.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        WHERE e.department_id = $1
        ORDER BY l.created_at DESC
        LIMIT 5
      `);
      const [timeCorrectionsResult, overtimeResult, leaveResult] =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[155]++, await Promise.all([(0, database_1.getPool)().query(timeCorrectionsQuery, [departmentId]), (0, database_1.getPool)().query(overtimeQuery, [departmentId]), (0, database_1.getPool)().query(leaveQuery, [departmentId])]));
      // Combine all results and sort by date
      const allActivities =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[156]++, [...timeCorrectionsResult.rows, ...overtimeResult.rows, ...leaveResult.rows].sort((a, b) => {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().f[23]++;
        cov_2fzkt7wlwo().s[157]++;
        return new Date(b.date).getTime() - new Date(a.date).getTime();
      }).slice(0, 10)); // Get top 10 most recent activities
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[158]++;
      return allActivities.map(activity => {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().f[24]++;
        cov_2fzkt7wlwo().s[159]++;
        return {
          type: activity.type,
          employeeName: activity.employee_name,
          date: activity.date,
          status: activity.status
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[160]++;
      logger_1.default.error('Error getting recent activity:', {
        error,
        departmentId
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[161]++;
      return [];
    }
  }
  /**
   * Helper method to get today's attendance summary
   */
  async getTodayAttendanceSummary(departmentId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[25]++;
    const today =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[162]++, new Date().toISOString().split('T')[0]);
    const query =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[163]++, `
      SELECT 
        COUNT(*) FILTER (WHERE ar.overall_status = 'present') as present,
        COUNT(*) FILTER (WHERE ar.overall_status = 'absent') as absent,
        COUNT(*) FILTER (WHERE ar.overall_status = 'late') as late
      FROM employees e
      LEFT JOIN attendance_records ar ON e.id = ar.employee_id 
        AND DATE(ar.date) = $2
      WHERE e.department_id = $1 AND e.status = 'active'
    `);
    const result =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[164]++, await (0, database_1.getPool)().query(query, [departmentId, today]));
    const row =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[165]++, result.rows[0]);
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[166]++;
    return {
      presentToday:
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[39][0]++, parseInt(row.present)) ||
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[39][1]++, 0),
      absentToday:
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[40][0]++, parseInt(row.absent)) ||
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[40][1]++, 0),
      lateToday:
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[41][0]++, parseInt(row.late)) ||
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[41][1]++, 0)
    };
  }
  /**
   * Get department info for department head
   */
  async getDepartmentInfo(userId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[26]++;
    cov_2fzkt7wlwo().s[167]++;
    return await this.getDepartmentByHead(userId);
  }
  /**
   * Get employee statistics for department
   */
  async getEmployeeStats(userId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[27]++;
    const department =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[168]++, await this.getDepartmentByHead(userId));
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[169]++;
    if (!department) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().b[42][0]++;
      cov_2fzkt7wlwo().s[170]++;
      throw new Error('Department not found');
    } else
    /* istanbul ignore next */
    {
      cov_2fzkt7wlwo().b[42][1]++;
    }
    const query =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[171]++, `
      SELECT 
        COUNT(*) as total_employees,
        COUNT(*) FILTER (WHERE status = 'active') as active_employees,
        COUNT(*) FILTER (WHERE status = 'inactive') as inactive_employees,
        AVG(base_salary) as average_salary
      FROM employees 
      WHERE department_id = $1
    `);
    const result =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[172]++, await (0, database_1.getPool)().query(query, [department.id]));
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[173]++;
    return result.rows[0];
  }
  /**
   * Get employee performance statistics
   */
  async getEmployeePerformance(userId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[28]++;
    cov_2fzkt7wlwo().s[174]++;
    try {
      const department =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[175]++, await this.getDepartmentByHead(userId));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[176]++;
      if (!department) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[43][0]++;
        cov_2fzkt7wlwo().s[177]++;
        throw new Error('Department not found');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[43][1]++;
      }
      // Get employee performance data with attendance statistics
      const performanceQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[178]++, `
        SELECT 
          e.id as employee_id,
          CONCAT(u.first_name, ' ', u.last_name) as employee_name,
          e.position,
          e.employee_id as employee_code,
          -- Calculate attendance rate (last 30 days)
          COALESCE(
            ROUND(
              (COUNT(CASE WHEN ar.overall_status = 'present' THEN 1 END) * 100.0 / 
               NULLIF(COUNT(ar.id), 0)), 2
            ), 0
          ) as attendance_rate,
          -- Calculate punctuality score (on-time arrivals)
          COALESCE(
            ROUND(
              (COUNT(CASE WHEN ar.overall_status = 'present' AND as.clock_in::time <= '09:00:00' THEN 1 END) * 100.0 / 
               NULLIF(COUNT(CASE WHEN ar.overall_status = 'present' THEN 1 END), 0)), 2
            ), 0
          ) as punctuality_score,
          -- Count late days
          COUNT(CASE WHEN ar.overall_status = 'present' AND as.clock_in::time > '09:00:00' THEN 1 END) as total_days_late,
          -- Count absent days
          COUNT(CASE WHEN ar.overall_status = 'absent' THEN 1 END) as total_days_absent,
          -- Average clock-in time
          COALESCE(
            TO_CHAR(AVG(CASE WHEN ar.overall_status = 'present' THEN as.clock_in::time END), 'HH24:MI'), 
            'N/A'
          ) as average_clock_in_time
        FROM employees e
        JOIN users u ON e.user_id = u.id
        LEFT JOIN attendance_records ar ON e.id = ar.employee_id 
          AND ar.created_at >= CURRENT_DATE - INTERVAL '30 days'
        LEFT JOIN attendance_sessions as ON ar.id = as.attendance_record_id
          AND as.session_type = 'morning'
        WHERE e.department_id = $1
        GROUP BY e.id, u.first_name, u.last_name, e.position, e.employee_id
        ORDER BY attendance_rate DESC, punctuality_score DESC
      `);
      const result =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[179]++, await (0, database_1.getPool)().query(performanceQuery, [department.id]));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[180]++;
      return result.rows.map(row => {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().f[29]++;
        cov_2fzkt7wlwo().s[181]++;
        return {
          employeeId: row.employee_id,
          employeeName: row.employee_name,
          position: row.position,
          employeeCode: row.employee_code,
          attendanceRate:
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[44][0]++, parseFloat(row.attendance_rate)) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[44][1]++, 0),
          punctualityScore:
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[45][0]++, parseFloat(row.punctuality_score)) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[45][1]++, 0),
          totalDaysLate:
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[46][0]++, parseInt(row.total_days_late)) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[46][1]++, 0),
          totalDaysAbsent:
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[47][0]++, parseInt(row.total_days_absent)) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[47][1]++, 0),
          averageClockInTime: row.average_clock_in_time
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[182]++;
      logger_1.default.error('Error getting employee performance:', {
        error,
        userId
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[183]++;
      return [];
    }
  }
  /**
   * Get all requests for department head
   */
  async getRequests(userId, params) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[30]++;
    const department =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[184]++, await this.getDepartmentByHead(userId));
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[185]++;
    if (!department) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().b[48][0]++;
      cov_2fzkt7wlwo().s[186]++;
      throw new Error('Department not found');
    } else
    /* istanbul ignore next */
    {
      cov_2fzkt7wlwo().b[48][1]++;
    }
    const pool =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[187]++, (0, database_1.getPool)());
    const offset =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[188]++, (params.page - 1) * params.limit);
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[189]++;
    try {
      // Build the base query for all request types
      let whereConditions =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[190]++, ['e.department_id = $1']);
      let queryParams =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[191]++, [department.id]);
      let paramIndex =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[192]++, 2);
      // Add type filter if specified
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[193]++;
      if (params.type) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[49][0]++;
        cov_2fzkt7wlwo().s[194]++;
        whereConditions.push(`request_type = $${paramIndex}`);
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[195]++;
        queryParams.push(params.type);
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[196]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[49][1]++;
      }
      // Add status filter if specified
      cov_2fzkt7wlwo().s[197]++;
      if (params.status) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[50][0]++;
        cov_2fzkt7wlwo().s[198]++;
        whereConditions.push(`status = $${paramIndex}`);
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[199]++;
        queryParams.push(params.status);
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[200]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[50][1]++;
      }
      // Query to get all requests (overtime, leave, time correction) for the department
      const requestsQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[201]++, `
        WITH all_requests AS (
          -- Overtime requests
          SELECT 
            ot.id,
            'overtime' as request_type,
            ot.employee_id,
            ot.request_date as start_date,
            ot.overtime_date as end_date,
            ot.requested_hours as hours,
            ot.reason,
            ot.status::text as status,
            ot.created_at,
            ot.updated_at,
            ot.approver_id as approved_by,
            ot.approved_at,
            ot.comments,
            e.employee_id as employee_code,
            u.first_name,
            u.last_name,
            u.email
          FROM overtime_requests ot
          JOIN employees e ON ot.employee_id = e.id
          JOIN users u ON e.user_id = u.id
          WHERE e.department_id = $1
          
          UNION ALL
          
          -- Leave requests
          SELECT 
            l.id,
            'leave' as request_type,
            l.employee_id,
            l.start_date,
            l.end_date,
            (l.end_date - l.start_date + 1) as hours,
            l.leave_type::text as reason,
            l.status::text as status,
            l.created_at,
            l.updated_at,
            l.approver_id as approved_by,
            NULL as approved_at,
            NULL as comments,
            e.employee_id as employee_code,
            u.first_name,
            u.last_name,
            u.email
          FROM leaves l
          JOIN employees e ON l.employee_id = e.id
          JOIN users u ON e.user_id = u.id
          WHERE e.department_id = $1
          
          UNION ALL
          
          -- Time correction requests
          SELECT 
            tcr.id,
            'time_correction' as request_type,
            tcr.employee_id,
            tcr.correction_date as start_date,
            tcr.correction_date as end_date,
            NULL as hours,
            tcr.reason,
            tcr.status::text as status,
            tcr.created_at,
            tcr.updated_at,
            tcr.approver_id as approved_by,
            tcr.approved_at,
            tcr.comments,
            e.employee_id as employee_code,
            u.first_name,
            u.last_name,
            u.email
          FROM time_correction_requests tcr
          JOIN employees e ON tcr.employee_id = e.id
          JOIN users u ON e.user_id = u.id
          WHERE e.department_id = $1
        )
        SELECT 
          ar.*,
          CONCAT(ar.first_name, ' ', ar.last_name) as employee_name
        FROM all_requests ar
        ${whereConditions.length > 1 ?
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[51][0]++, `WHERE ${whereConditions.slice(1).join(' AND ')}`) :
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[51][1]++, '')}
        ORDER BY ar.created_at DESC
        LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
      `);
      // Count query for pagination
      const countQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[202]++, `
        WITH all_requests AS (
          SELECT 'overtime' as request_type, ot.status::text as status, e.department_id
          FROM overtime_requests ot
          JOIN employees e ON ot.employee_id = e.id
          WHERE e.department_id = $1
          
          UNION ALL
          
          SELECT 'leave' as request_type, l.status::text as status, e.department_id
          FROM leaves l
          JOIN employees e ON l.employee_id = e.id
          WHERE e.department_id = $1
          
          UNION ALL
          
          SELECT 'time_correction' as request_type, tcr.status::text as status, e.department_id
          FROM time_correction_requests tcr
          JOIN employees e ON tcr.employee_id = e.id
          WHERE e.department_id = $1
        )
        SELECT COUNT(*) as total
        FROM all_requests ar
        ${whereConditions.length > 1 ?
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[52][0]++, `WHERE ${whereConditions.slice(1).join(' AND ')}`) :
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[52][1]++, '')}
      `);
      // Add pagination parameters
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[203]++;
      queryParams.push(params.limit, offset);
      const [requestsResult, countResult] =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[204]++, await Promise.all([pool.query(requestsQuery, queryParams), pool.query(countQuery, queryParams.slice(0, -2)) // Remove limit and offset for count
      ]));
      const total =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[205]++, parseInt(
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[53][0]++, countResult.rows[0]?.total) ||
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[53][1]++, '0')));
      const totalPages =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[206]++, Math.ceil(total / params.limit));
      // Transform the data to match the expected format
      const requests =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[207]++, requestsResult.rows.map(row => {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().f[31]++;
        cov_2fzkt7wlwo().s[208]++;
        return {
          id: row.id,
          type: row.request_type,
          employeeId: row.employee_id,
          employeeName: row.employee_name,
          employeeCode: row.employee_code,
          departmentName: department.name,
          status: row.status,
          submittedAt: row.created_at,
          approverName: row.approved_by ?
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[54][0]++, 'Department Head') :
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[54][1]++, null),
          approvedAt: row.approved_at,
          details: {
            startDate: row.start_date,
            endDate: row.end_date,
            hours: row.hours,
            reason: row.reason,
            comments: row.comments,
            requestType: row.request_type
          }
        };
      }));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[209]++;
      return {
        data: requests,
        pagination: {
          page: params.page,
          limit: params.limit,
          total,
          totalPages
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[210]++;
      logger_1.default.error('Error fetching requests:', {
        error,
        userId,
        params
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[211]++;
      throw error;
    }
  }
  /**
   * Get request statistics
   */
  async getRequestStats(userId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[32]++;
    const department =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[212]++, await this.getDepartmentByHead(userId));
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[213]++;
    if (!department) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().b[55][0]++;
      cov_2fzkt7wlwo().s[214]++;
      throw new Error('Department not found');
    } else
    /* istanbul ignore next */
    {
      cov_2fzkt7wlwo().b[55][1]++;
    }
    const pool =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[215]++, (0, database_1.getPool)());
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[216]++;
    try {
      // Get comprehensive request statistics
      const statsQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[217]++, `
        WITH all_requests AS (
          SELECT 'overtime' as request_type, ot.status::text as status
          FROM overtime_requests ot
          JOIN employees e ON ot.employee_id = e.id
          WHERE e.department_id = $1
          
          UNION ALL
          
          SELECT 'leave' as request_type, l.status::text as status
          FROM leaves l
          JOIN employees e ON l.employee_id = e.id
          WHERE e.department_id = $1
          
          UNION ALL
          
          SELECT 'time_correction' as request_type, tcr.status::text as status
          FROM time_correction_requests tcr
          JOIN employees e ON tcr.employee_id = e.id
          WHERE e.department_id = $1
        )
        SELECT 
          COUNT(*) as total,
          COUNT(*) FILTER (WHERE status = 'pending') as pending,
          COUNT(*) FILTER (WHERE status = 'approved') as approved,
          COUNT(*) FILTER (WHERE status = 'rejected') as rejected
        FROM all_requests
      `);
      const result =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[218]++, await pool.query(statsQuery, [department.id]));
      const stats =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[219]++, result.rows[0]);
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[220]++;
      return {
        total:
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().b[56][0]++, parseInt(stats.total)) ||
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().b[56][1]++, 0),
        pending:
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().b[57][0]++, parseInt(stats.pending)) ||
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().b[57][1]++, 0),
        approved:
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().b[58][0]++, parseInt(stats.approved)) ||
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().b[58][1]++, 0),
        rejected:
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().b[59][0]++, parseInt(stats.rejected)) ||
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().b[59][1]++, 0)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[221]++;
      logger_1.default.error('Error getting request stats:', {
        error,
        userId
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[222]++;
      return {
        total: 0,
        pending: 0,
        approved: 0,
        rejected: 0
      };
    }
  }
  /**
   * Approve a request
   */
  async approveRequest(userId, requestId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[33]++;
    const pool =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[223]++, (0, database_1.getPool)());
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[224]++;
    try {
      // First, determine the request type by checking which table contains the request
      const overtimeQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[225]++, 'SELECT id FROM overtime_requests WHERE id = $1');
      const leaveQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[226]++, 'SELECT id FROM leaves WHERE id = $1');
      const timeCorrectionQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[227]++, 'SELECT id FROM time_correction_requests WHERE id = $1');
      const [overtimeResult, leaveResult, timeCorrectionResult] =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[228]++, await Promise.all([pool.query(overtimeQuery, [requestId]), pool.query(leaveQuery, [requestId]), pool.query(timeCorrectionQuery, [requestId])]));
      let requestType =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[229]++, null);
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[230]++;
      if (overtimeResult.rows.length > 0) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[60][0]++;
        cov_2fzkt7wlwo().s[231]++;
        requestType = 'overtime';
      } else {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[60][1]++;
        cov_2fzkt7wlwo().s[232]++;
        if (leaveResult.rows.length > 0) {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().b[61][0]++;
          cov_2fzkt7wlwo().s[233]++;
          requestType = 'leave';
        } else {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().b[61][1]++;
          cov_2fzkt7wlwo().s[234]++;
          if (timeCorrectionResult.rows.length > 0) {
            /* istanbul ignore next */
            cov_2fzkt7wlwo().b[62][0]++;
            cov_2fzkt7wlwo().s[235]++;
            requestType = 'time_correction';
          } else
          /* istanbul ignore next */
          {
            cov_2fzkt7wlwo().b[62][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[236]++;
      if (!requestType) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[63][0]++;
        cov_2fzkt7wlwo().s[237]++;
        throw new Error('Request not found');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[63][1]++;
      }
      // Import the appropriate service and approve the request
      cov_2fzkt7wlwo().s[238]++;
      if (requestType === 'overtime') {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[64][0]++;
        const {
          OvertimeService
        } =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[239]++, await Promise.resolve().then(() => {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().f[34]++;
          cov_2fzkt7wlwo().s[240]++;
          return __importStar(require('../attendance/overtimeService'));
        }));
        const overtimeService =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[241]++, new OvertimeService());
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[242]++;
        await overtimeService.approveOvertimeRequest({
          requestId,
          approverId: userId,
          approved: true,
          comments: 'Approved by department head'
        });
      } else {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[64][1]++;
        cov_2fzkt7wlwo().s[243]++;
        if (requestType === 'leave') {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().b[65][0]++;
          const {
            LeaveService
          } =
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().s[244]++, await Promise.resolve().then(() => {
            /* istanbul ignore next */
            cov_2fzkt7wlwo().f[35]++;
            cov_2fzkt7wlwo().s[245]++;
            return __importStar(require('../leave/leaveService'));
          }));
          const leaveService =
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().s[246]++, new LeaveService());
          /* istanbul ignore next */
          cov_2fzkt7wlwo().s[247]++;
          await leaveService.approveLeaveRequest({
            leaveId: requestId,
            approverId: userId,
            approved: true,
            comments: 'Approved by department head'
          });
        } else {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().b[65][1]++;
          cov_2fzkt7wlwo().s[248]++;
          if (requestType === 'time_correction') {
            /* istanbul ignore next */
            cov_2fzkt7wlwo().b[66][0]++;
            const {
              TimeCorrectionService
            } =
            /* istanbul ignore next */
            (cov_2fzkt7wlwo().s[249]++, await Promise.resolve().then(() => {
              /* istanbul ignore next */
              cov_2fzkt7wlwo().f[36]++;
              cov_2fzkt7wlwo().s[250]++;
              return __importStar(require('../attendance/timeCorrectionService'));
            }));
            const timeCorrectionService =
            /* istanbul ignore next */
            (cov_2fzkt7wlwo().s[251]++, new TimeCorrectionService());
            /* istanbul ignore next */
            cov_2fzkt7wlwo().s[252]++;
            await timeCorrectionService.approveTimeCorrectionRequest({
              requestId,
              approverId: userId,
              approved: true,
              comments: 'Approved by department head'
            });
          } else
          /* istanbul ignore next */
          {
            cov_2fzkt7wlwo().b[66][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[253]++;
      logger_1.default.info(`Department head ${userId} approved ${requestType} request ${requestId}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[254]++;
      logger_1.default.error('Error approving request:', {
        error,
        userId,
        requestId
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[255]++;
      throw error;
    }
  }
  /**
   * Reject a request
   */
  async rejectRequest(userId, requestId, reason) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[37]++;
    const pool =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[256]++, (0, database_1.getPool)());
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[257]++;
    try {
      // First, determine the request type by checking which table contains the request
      const overtimeQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[258]++, 'SELECT id FROM overtime_requests WHERE id = $1');
      const leaveQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[259]++, 'SELECT id FROM leaves WHERE id = $1');
      const timeCorrectionQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[260]++, 'SELECT id FROM time_correction_requests WHERE id = $1');
      const [overtimeResult, leaveResult, timeCorrectionResult] =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[261]++, await Promise.all([pool.query(overtimeQuery, [requestId]), pool.query(leaveQuery, [requestId]), pool.query(timeCorrectionQuery, [requestId])]));
      let requestType =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[262]++, null);
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[263]++;
      if (overtimeResult.rows.length > 0) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[67][0]++;
        cov_2fzkt7wlwo().s[264]++;
        requestType = 'overtime';
      } else {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[67][1]++;
        cov_2fzkt7wlwo().s[265]++;
        if (leaveResult.rows.length > 0) {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().b[68][0]++;
          cov_2fzkt7wlwo().s[266]++;
          requestType = 'leave';
        } else {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().b[68][1]++;
          cov_2fzkt7wlwo().s[267]++;
          if (timeCorrectionResult.rows.length > 0) {
            /* istanbul ignore next */
            cov_2fzkt7wlwo().b[69][0]++;
            cov_2fzkt7wlwo().s[268]++;
            requestType = 'time_correction';
          } else
          /* istanbul ignore next */
          {
            cov_2fzkt7wlwo().b[69][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[269]++;
      if (!requestType) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[70][0]++;
        cov_2fzkt7wlwo().s[270]++;
        throw new Error('Request not found');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[70][1]++;
      }
      // Import the appropriate service and reject the request
      cov_2fzkt7wlwo().s[271]++;
      if (requestType === 'overtime') {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[71][0]++;
        const {
          OvertimeService
        } =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[272]++, await Promise.resolve().then(() => {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().f[38]++;
          cov_2fzkt7wlwo().s[273]++;
          return __importStar(require('../attendance/overtimeService'));
        }));
        const overtimeService =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[274]++, new OvertimeService());
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[275]++;
        await overtimeService.approveOvertimeRequest({
          requestId,
          approverId: userId,
          approved: false,
          comments:
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[72][0]++, reason) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[72][1]++, 'Rejected by department head')
        });
      } else {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[71][1]++;
        cov_2fzkt7wlwo().s[276]++;
        if (requestType === 'leave') {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().b[73][0]++;
          const {
            LeaveService
          } =
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().s[277]++, await Promise.resolve().then(() => {
            /* istanbul ignore next */
            cov_2fzkt7wlwo().f[39]++;
            cov_2fzkt7wlwo().s[278]++;
            return __importStar(require('../leave/leaveService'));
          }));
          const leaveService =
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().s[279]++, new LeaveService());
          /* istanbul ignore next */
          cov_2fzkt7wlwo().s[280]++;
          await leaveService.approveLeaveRequest({
            leaveId: requestId,
            approverId: userId,
            approved: false,
            comments:
            /* istanbul ignore next */
            (cov_2fzkt7wlwo().b[74][0]++, reason) ||
            /* istanbul ignore next */
            (cov_2fzkt7wlwo().b[74][1]++, 'Rejected by department head')
          });
        } else {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().b[73][1]++;
          cov_2fzkt7wlwo().s[281]++;
          if (requestType === 'time_correction') {
            /* istanbul ignore next */
            cov_2fzkt7wlwo().b[75][0]++;
            const {
              TimeCorrectionService
            } =
            /* istanbul ignore next */
            (cov_2fzkt7wlwo().s[282]++, await Promise.resolve().then(() => {
              /* istanbul ignore next */
              cov_2fzkt7wlwo().f[40]++;
              cov_2fzkt7wlwo().s[283]++;
              return __importStar(require('../attendance/timeCorrectionService'));
            }));
            const timeCorrectionService =
            /* istanbul ignore next */
            (cov_2fzkt7wlwo().s[284]++, new TimeCorrectionService());
            /* istanbul ignore next */
            cov_2fzkt7wlwo().s[285]++;
            await timeCorrectionService.approveTimeCorrectionRequest({
              requestId,
              approverId: userId,
              approved: false,
              comments:
              /* istanbul ignore next */
              (cov_2fzkt7wlwo().b[76][0]++, reason) ||
              /* istanbul ignore next */
              (cov_2fzkt7wlwo().b[76][1]++, 'Rejected by department head')
            });
          } else
          /* istanbul ignore next */
          {
            cov_2fzkt7wlwo().b[75][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[286]++;
      logger_1.default.info(`Department head ${userId} rejected ${requestType} request ${requestId} with reason: ${
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[77][0]++, reason) ||
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[77][1]++, 'No reason provided')}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[287]++;
      logger_1.default.error('Error rejecting request:', {
        error,
        userId,
        requestId,
        reason
      });
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[288]++;
      throw error;
    }
  }
  /**
   * Get payroll periods for department
   */
  async getPayrollPeriods(userId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[41]++;
    const department =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[289]++, await this.getDepartmentByHead(userId));
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[290]++;
    if (!department) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().b[78][0]++;
      cov_2fzkt7wlwo().s[291]++;
      throw new Error('Department not found');
    } else
    /* istanbul ignore next */
    {
      cov_2fzkt7wlwo().b[78][1]++;
    }
    cov_2fzkt7wlwo().s[292]++;
    try {
      // Get payroll periods that have been sent for approval to this department head
      const query =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[293]++, `
        SELECT DISTINCT pp.*,
          COUNT(DISTINCT CASE WHEN e.department_id = $1 THEN pr.employee_id END) as total_employees,
          COALESCE(SUM(CASE WHEN e.department_id = $1 THEN pr.net_pay ELSE 0 END), 0) as total_amount,
          pa.id as approval_id,
          pa.status as approval_status,
          pa.comments as approval_comments,
          pa.approved_at
        FROM payroll_periods pp
        INNER JOIN payroll_approvals pa ON pp.id = pa.payroll_period_id
        LEFT JOIN payroll_records pr ON pp.id = pr.payroll_period_id
        LEFT JOIN employees e ON pr.employee_id = e.id
        WHERE pa.approver_id = $2
        GROUP BY pp.id, pp.period_name, pp.start_date, pp.end_date, pp.status, 
                 pp.working_days, pp.expected_hours, pp.created_at, pp.updated_at,
                 pa.id, pa.status, pa.comments, pa.approved_at
        ORDER BY pp.created_at DESC
      `);
      const result =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[294]++, await (0, database_1.getPool)().query(query, [department.id, userId]));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[295]++;
      return result.rows.map(period => {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().f[42]++;
        cov_2fzkt7wlwo().s[296]++;
        return {
          id: period.id,
          periodName: period.period_name,
          startDate: period.start_date,
          endDate: period.end_date,
          status:
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[79][0]++, period.approval_status) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[79][1]++, period.status),
          // Use approval status if available, fallback to period status
          workingDays: period.working_days,
          expectedHours: period.expected_hours,
          totalEmployees:
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[80][0]++, parseInt(period.total_employees)) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[80][1]++, 0),
          totalAmount:
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[81][0]++, parseFloat(period.total_amount)) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[81][1]++, 0),
          approvalId: period.approval_id,
          approvalStatus: period.approval_status,
          approvalComments: period.approval_comments,
          approvedAt: period.approved_at,
          createdAt: period.created_at,
          updatedAt: period.updated_at
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[297]++;
      logger_1.default.error('Error getting payroll periods:', error);
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[298]++;
      return [];
    }
  }
  /**
   * Get payroll records for a specific period
   */
  async getPayrollRecords(userId, periodId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[43]++;
    const department =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[299]++, await this.getDepartmentByHead(userId));
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[300]++;
    if (!department) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().b[82][0]++;
      cov_2fzkt7wlwo().s[301]++;
      throw new Error('Department not found');
    } else
    /* istanbul ignore next */
    {
      cov_2fzkt7wlwo().b[82][1]++;
    }
    cov_2fzkt7wlwo().s[302]++;
    try {
      // Get payroll records for the period, filtered by department employees
      // Include all required fields for consistency with HR and Employee modules
      const query =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[303]++, `
        SELECT 
          pr.*,
          u.first_name,
          u.last_name,
          e.employee_id,
          e.position,
          e.department_id,
          d.name as department_name,
          pp.period_name
        FROM payroll_records pr
        INNER JOIN employees e ON pr.employee_id = e.id
        INNER JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        LEFT JOIN payroll_periods pp ON pr.payroll_period_id = pp.id
        WHERE pr.payroll_period_id = $1 AND e.department_id = $2
        ORDER BY u.first_name, u.last_name
      `);
      const result =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[304]++, await (0, database_1.getPool)().query(query, [periodId, department.id]));
      // Transform to standardized format
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[305]++;
      return result.rows.map(record => {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().f[44]++;
        cov_2fzkt7wlwo().s[306]++;
        return {
          id: record.id,
          payrollPeriodId: record.payroll_period_id,
          periodName: record.period_name,
          employeeId: record.employee_id,
          employeeName: `${record.first_name} ${record.last_name}`,
          position: record.position,
          departmentId: record.department_id,
          departmentName: record.department_name,
          baseSalary: record.base_salary,
          hourlyRate: record.hourly_rate,
          totalWorkedHours: record.total_worked_hours,
          totalRegularHours: record.total_regular_hours,
          totalOvertimeHours: record.total_overtime_hours,
          totalLateHours: record.total_late_hours,
          lateDeductions: record.late_deductions,
          paidLeaveHours:
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[83][0]++, record.paid_leave_hours) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[83][1]++, 0),
          grossPay: record.gross_pay,
          netPay: record.net_pay,
          totalDeductions: record.total_deductions,
          totalBenefits: record.total_benefits,
          status: record.status,
          createdAt: record.created_at,
          updatedAt: record.updated_at
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[307]++;
      logger_1.default.error('Error getting payroll records:', error);
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[308]++;
      return [];
    }
  }
  /**
   * Get payroll statistics for department
   */
  async getPayrollStats(userId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[45]++;
    const department =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[309]++, await this.getDepartmentByHead(userId));
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[310]++;
    if (!department) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().b[84][0]++;
      cov_2fzkt7wlwo().s[311]++;
      throw new Error('Department not found');
    } else
    /* istanbul ignore next */
    {
      cov_2fzkt7wlwo().b[84][1]++;
    }
    cov_2fzkt7wlwo().s[312]++;
    try {
      // Get total employees in department
      const employeeCountQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[313]++, `
        SELECT COUNT(*) as count
        FROM employees
        WHERE department_id = $1 AND status = 'active'
      `);
      const employeeResult =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[314]++, await (0, database_1.getPool)().query(employeeCountQuery, [department.id]));
      const totalEmployees =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[315]++, parseInt(employeeResult.rows[0].count));
      // Get total gross pay for current month
      const currentMonth =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[316]++, new Date());
      const startOfMonth =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[317]++, new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1));
      const endOfMonth =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[318]++, new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0));
      const grossPayQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[319]++, `
        SELECT COALESCE(SUM(pr.gross_pay), 0) as total_gross_pay
        FROM payroll_records pr
        INNER JOIN payroll_periods pp ON pr.payroll_period_id = pp.id
        INNER JOIN employees e ON pr.employee_id = e.id
        WHERE e.department_id = $1 
        AND pp.start_date >= $2 
        AND pp.end_date <= $3
      `);
      const grossPayResult =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[320]++, await (0, database_1.getPool)().query(grossPayQuery, [department.id, startOfMonth, endOfMonth]));
      const totalGrossPay =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[321]++, parseFloat(grossPayResult.rows[0].total_gross_pay));
      // Get completed and processing periods count
      const periodsQuery =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[322]++, `
        SELECT 
          COUNT(CASE WHEN pa.status = 'approved' OR pp.status = 'completed' THEN 1 END) as completed_periods,
          COUNT(CASE WHEN pp.status = 'processing' OR pp.status = 'sent_for_review' THEN 1 END) as processing_periods
        FROM payroll_periods pp
        INNER JOIN payroll_approvals pa ON pp.id = pa.payroll_period_id
        WHERE pa.approver_id = $1
      `);
      const periodsResult =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[323]++, await (0, database_1.getPool)().query(periodsQuery, [userId]));
      const completedPeriods =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[324]++, parseInt(periodsResult.rows[0].completed_periods));
      const processingPeriods =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[325]++, parseInt(periodsResult.rows[0].processing_periods));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[326]++;
      return {
        totalEmployees,
        totalGrossPay,
        completedPeriods,
        processingPeriods
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[327]++;
      logger_1.default.error('Error getting payroll statistics:', error);
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[328]++;
      return {
        totalEmployees: 0,
        totalGrossPay: 0,
        completedPeriods: 0,
        processingPeriods: 0
      };
    }
  }
  /**
   * Get payroll approvals for department
   */
  async getPayrollApprovals(userId) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[46]++;
    const department =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[329]++, await this.getDepartmentByHead(userId));
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[330]++;
    if (!department) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().b[85][0]++;
      cov_2fzkt7wlwo().s[331]++;
      throw new Error('Department not found');
    } else
    /* istanbul ignore next */
    {
      cov_2fzkt7wlwo().b[85][1]++;
    }
    cov_2fzkt7wlwo().s[332]++;
    try {
      // Get pending approvals for this department head
      const approvals =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[333]++, await payrollApprovalModel.getPendingApprovalsForApprover(userId));
      // For each approval, get the detailed payroll records
      const approvalsWithDetails =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[334]++, await Promise.all(approvals.map(async approval => {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().f[47]++;
        // Get payroll records for this period and department
        const recordsQuery =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[335]++, `
            SELECT 
              pr.*,
              u.first_name,
              u.last_name,
              e.employee_id,
              e.position,
              e.department_id
            FROM payroll_records pr
            INNER JOIN employees e ON pr.employee_id = e.id
            INNER JOIN users u ON e.user_id = u.id
            WHERE pr.payroll_period_id = $1 AND e.department_id = $2
            ORDER BY u.first_name, u.last_name
          `);
        const recordsResult =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[336]++, await (0, database_1.getPool)().query(recordsQuery, [approval.payrollPeriodId, department.id]));
        const payrollRecords =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[337]++, recordsResult.rows.map(record => {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().f[48]++;
          cov_2fzkt7wlwo().s[338]++;
          return {
            id: record.id,
            employeeName: `${record.first_name} ${record.last_name}`,
            employeeId: record.employee_id,
            position: record.position,
            baseSalary: record.base_salary,
            totalRegularHours: record.total_regular_hours,
            totalOvertimeHours: record.total_overtime_hours,
            totalLateHours: record.total_late_hours,
            hourlyRate: record.hourly_rate,
            grossPay: record.gross_pay,
            netPay: record.net_pay,
            totalDeductions: record.total_deductions,
            totalBenefits: record.total_benefits,
            lateDeductions: record.late_deductions,
            status: record.status,
            createdAt: record.created_at,
            updatedAt: record.updated_at
          };
        }));
        // Calculate totals
        const totalEmployees =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[339]++, payrollRecords.length);
        const totalAmount =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[340]++, payrollRecords.reduce((sum, record) => {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().f[49]++;
          cov_2fzkt7wlwo().s[341]++;
          return sum + (
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[86][0]++, record.netPay) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[86][1]++, 0));
        }, 0));
        const totalGrossPay =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[342]++, payrollRecords.reduce((sum, record) => {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().f[50]++;
          cov_2fzkt7wlwo().s[343]++;
          return sum + (
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[87][0]++, record.grossPay) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[87][1]++, 0));
        }, 0));
        const totalDeductions =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[344]++, payrollRecords.reduce((sum, record) => {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().f[51]++;
          cov_2fzkt7wlwo().s[345]++;
          return sum + (
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[88][0]++, record.totalDeductions) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[88][1]++, 0));
        }, 0));
        const totalBenefits =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[346]++, payrollRecords.reduce((sum, record) => {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().f[52]++;
          cov_2fzkt7wlwo().s[347]++;
          return sum + (
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[89][0]++, record.totalBenefits) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[89][1]++, 0));
        }, 0));
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[348]++;
        return {
          id: approval.id,
          periodName: approval.payrollPeriod.periodName,
          periodId: approval.payrollPeriodId,
          startDate: approval.payrollPeriod.startDate,
          endDate: approval.payrollPeriod.endDate,
          createdAt: approval.createdAt,
          totalEmployees,
          totalAmount,
          totalGrossPay,
          totalDeductions,
          totalBenefits,
          status: approval.status,
          departmentName:
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[90][0]++, approval.department?.name) ||
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().b[90][1]++, 'Unknown Department'),
          approverName: `${approval.approver.firstName} ${approval.approver.lastName}`,
          comments: approval.comments,
          payrollRecords
        };
      })));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[349]++;
      return approvalsWithDetails;
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[350]++;
      logger_1.default.error('Error getting payroll approvals:', error);
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[351]++;
      return [];
    }
  }
  /**
   * Approve or reject payroll approval
   */
  async approvePayrollApproval(userId, approvalId, status, comments) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[53]++;
    cov_2fzkt7wlwo().s[352]++;
    try {
      // Verify the approval belongs to this department head
      const approval =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[353]++, await payrollApprovalModel.findById(approvalId));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[354]++;
      if (
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[92][0]++, !approval) ||
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().b[92][1]++, approval.approverId !== userId)) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[91][0]++;
        cov_2fzkt7wlwo().s[355]++;
        throw new Error('Approval not found or not authorized');
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[91][1]++;
      }
      // Update the approval
      const updateData =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[356]++, {
        status,
        comments,
        approvedAt: new Date()
      });
      const updatedApproval =
      /* istanbul ignore next */
      (cov_2fzkt7wlwo().s[357]++, await payrollApprovalModel.updatePayrollApproval(approvalId, updateData));
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[358]++;
      if (updatedApproval) {
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[93][0]++;
        cov_2fzkt7wlwo().s[359]++;
        // If approved, update payroll records status to 'processed' for this department
        if (status === 'approved') {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().b[94][0]++;
          cov_2fzkt7wlwo().s[360]++;
          logger_1.default.info(`Updating payroll records to processed for department ${approval.departmentId} in period ${approval.payrollPeriodId}`);
          // Update all payroll records for this department and period to 'processed'
          const {
            getPool
          } =
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().s[361]++, await Promise.resolve().then(() => {
            /* istanbul ignore next */
            cov_2fzkt7wlwo().f[54]++;
            cov_2fzkt7wlwo().s[362]++;
            return __importStar(require('../../config/database'));
          }));
          const pool =
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().s[363]++, getPool());
          const updateRecordsQuery =
          /* istanbul ignore next */
          (cov_2fzkt7wlwo().s[364]++, `
            UPDATE payroll_records 
            SET status = 'processed', updated_at = CURRENT_TIMESTAMP
            WHERE payroll_period_id = $1 
            AND employee_id IN (
              SELECT e.id FROM employees e 
              WHERE e.department_id = $2
            )
          `);
          /* istanbul ignore next */
          cov_2fzkt7wlwo().s[365]++;
          await pool.query(updateRecordsQuery, [approval.payrollPeriodId, approval.departmentId]);
          /* istanbul ignore next */
          cov_2fzkt7wlwo().s[366]++;
          logger_1.default.info(`Updated payroll records to processed for department ${approval.departmentId}`);
        } else
        /* istanbul ignore next */
        {
          cov_2fzkt7wlwo().b[94][1]++;
        }
        // Check if all approvals for this payroll period are now complete
        cov_2fzkt7wlwo().s[367]++;
        logger_1.default.info(`Department head ${userId} ${status} payroll approval ${approvalId}, checking period status...`);
        const {
          PayrollApprovalService
        } =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[368]++, await Promise.resolve().then(() => {
          /* istanbul ignore next */
          cov_2fzkt7wlwo().f[55]++;
          cov_2fzkt7wlwo().s[369]++;
          return __importStar(require('../payroll/payrollApprovalService'));
        }));
        const payrollApprovalService =
        /* istanbul ignore next */
        (cov_2fzkt7wlwo().s[370]++, new PayrollApprovalService());
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[371]++;
        await payrollApprovalService.checkAndUpdatePayrollPeriodStatus(approval.payrollPeriodId);
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[372]++;
        logger_1.default.info(`Department head ${userId} ${status} payroll approval ${approvalId}`);
        /* istanbul ignore next */
        cov_2fzkt7wlwo().s[373]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_2fzkt7wlwo().b[93][1]++;
      }
      cov_2fzkt7wlwo().s[374]++;
      return false;
    } catch (error) {
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[375]++;
      logger_1.default.error('Error approving payroll:', error);
      /* istanbul ignore next */
      cov_2fzkt7wlwo().s[376]++;
      throw error;
    }
  }
  /**
   * Helper method to get period start date
   */
  getPeriodStart(period) {
    /* istanbul ignore next */
    cov_2fzkt7wlwo().f[56]++;
    const now =
    /* istanbul ignore next */
    (cov_2fzkt7wlwo().s[377]++, new Date());
    /* istanbul ignore next */
    cov_2fzkt7wlwo().s[378]++;
    switch (period) {
      case 'week':
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[95][0]++;
        cov_2fzkt7wlwo().s[379]++;
        return new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString();
      case 'month':
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[95][1]++;
        cov_2fzkt7wlwo().s[380]++;
        return new Date(now.getFullYear(), now.getMonth(), 1).toISOString();
      case 'year':
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[95][2]++;
        cov_2fzkt7wlwo().s[381]++;
        return new Date(now.getFullYear(), 0, 1).toISOString();
      default:
        /* istanbul ignore next */
        cov_2fzkt7wlwo().b[95][3]++;
        cov_2fzkt7wlwo().s[382]++;
        return new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString();
    }
  }
}
/* istanbul ignore next */
cov_2fzkt7wlwo().s[383]++;
exports.DepartmentHeadService = DepartmentHeadService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,