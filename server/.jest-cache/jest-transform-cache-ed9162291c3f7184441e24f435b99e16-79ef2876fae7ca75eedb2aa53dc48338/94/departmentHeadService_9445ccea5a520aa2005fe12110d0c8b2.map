{"version":3,"names":["database_1","cov_2fzkt7wlwo","s","require","Employee_1","PayrollApproval_1","logger_1","__importDefault","employeeModel","EmployeeModel","payrollApprovalModel","PayrollApprovalModel","DepartmentHeadService","getDashboard","userId","f","department","getDepartmentByHead","b","Error","pendingRequests","getPendingRequestsCount","id","recentActivity","getRecentActivity","attendanceSummary","getTodayAttendanceSummary","name","description","employeeCount","error","default","getDepartmentEmployees","options","offset","page","limit","query","queryParams","paramCount","status","push","search","result","getPool","countQuery","countParams","length","countResult","total","parseInt","rows","employees","map","row","employeeId","employee_id","user","user_id","firstName","first_name","lastName","last_name","email","position","employmentType","employment_type","baseSalary","parseFloat","base_salary","hireDate","hire_date","lastAttendance","last_attendance","data","pagination","pages","Math","ceil","getEmployeeDetails","employee","findByIdWithDetails","department_id","getPendingRequests","requests","sort","a","Date","createdAt","getTime","slice","getRequestHistory","getDepartmentStats","period","employeeCountQuery","employeeResult","attendanceQuery","periodStart","getPeriodStart","attendanceResult","pendingCount","totalEmployees","activeEmployees","active","attendanceRate","total_employees","present_employees","averageHours","approvedRequests","rejectedRequests","getAttendanceSummary","summary","startDate","endDate","getPayrollSummary","departmentId","timeCorrections","time_corrections","overtime","leaves","timeCorrectionsQuery","overtimeQuery","leaveQuery","timeCorrectionsResult","overtimeResult","leaveResult","Promise","all","allActivities","date","activity","type","employeeName","employee_name","today","toISOString","split","presentToday","present","absentToday","absent","lateToday","late","getDepartmentInfo","getEmployeeStats","getEmployeePerformance","performanceQuery","employeeCode","employee_code","attendance_rate","punctualityScore","punctuality_score","totalDaysLate","total_days_late","totalDaysAbsent","total_days_absent","averageClockInTime","average_clock_in_time","getRequests","params","pool","whereConditions","paramIndex","requestsQuery","join","requestsResult","totalPages","request_type","departmentName","submittedAt","created_at","approverName","approved_by","approvedAt","approved_at","details","start_date","end_date","hours","reason","comments","requestType","getRequestStats","statsQuery","stats","pending","approved","rejected","approveRequest","requestId","timeCorrectionQuery","timeCorrectionResult","OvertimeService","resolve","then","__importStar","overtimeService","approveOvertimeRequest","approverId","LeaveService","leaveService","approveLeaveRequest","leaveId","TimeCorrectionService","timeCorrectionService","approveTimeCorrectionRequest","info","rejectRequest","getPayrollPeriods","periodName","period_name","approval_status","workingDays","working_days","expectedHours","expected_hours","totalAmount","total_amount","approvalId","approval_id","approvalStatus","approvalComments","approval_comments","updatedAt","updated_at","getPayrollRecords","periodId","record","payrollPeriodId","payroll_period_id","department_name","hourlyRate","hourly_rate","totalWorkedHours","total_worked_hours","totalRegularHours","total_regular_hours","totalOvertimeHours","total_overtime_hours","totalLateHours","total_late_hours","lateDeductions","late_deductions","paidLeaveHours","paid_leave_hours","grossPay","gross_pay","netPay","net_pay","totalDeductions","total_deductions","totalBenefits","total_benefits","getPayrollStats","count","currentMonth","startOfMonth","getFullYear","getMonth","endOfMonth","grossPayQuery","grossPayResult","totalGrossPay","total_gross_pay","periodsQuery","periodsResult","completedPeriods","completed_periods","processingPeriods","processing_periods","getPayrollApprovals","approvals","getPendingApprovalsForApprover","approvalsWithDetails","approval","recordsQuery","recordsResult","payrollRecords","reduce","sum","payrollPeriod","approver","approvePayrollApproval","findById","updateData","updatedApproval","updatePayrollApproval","updateRecordsQuery","PayrollApprovalService","payrollApprovalService","checkAndUpdatePayrollPeriodStatus","now","exports"],"sources":["/home/kim/tito/server/src/services/department-head/departmentHeadService.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport { EmployeeModel } from '../../models/hr/Employee';\nimport { PayrollApprovalModel } from '../../models/payroll/PayrollApproval';\nimport logger from '../../utils/logger';\n\nconst employeeModel = new EmployeeModel();\nconst payrollApprovalModel = new PayrollApprovalModel();\n\nexport interface DepartmentHeadDashboard {\n  department: {\n    id: string;\n    name: string;\n    description: string;\n    employeeCount: number;\n  };\n  pendingRequests: {\n    timeCorrections: number;\n    overtime: number;\n    leaves: number;\n    total: number;\n  };\n  recentActivity: Array<{\n    type: 'time_correction' | 'overtime' | 'leave';\n    employeeName: string;\n    date: string;\n    status: string;\n  }>;\n  attendanceSummary: {\n    presentToday: number;\n    absentToday: number;\n    lateToday: number;\n  };\n}\n\nexport interface DepartmentEmployee {\n  id: string;\n  employeeId: string;\n  user: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  position: string;\n  employmentType: string;\n  hireDate: string;\n  status: string;\n  lastAttendance?: string;\n}\n\nexport interface PendingRequest {\n  id: string;\n  type: 'time_correction' | 'overtime' | 'leave';\n  employee: {\n    id: string;\n    employeeId: string;\n    name: string;\n  };\n  requestDate: string;\n  details: any;\n  status: string;\n  createdAt: string;\n}\n\nexport interface DepartmentStats {\n  totalEmployees: number;\n  activeEmployees: number;\n  attendanceRate: number;\n  averageHours: number;\n  pendingRequests: number;\n  approvedRequests: number;\n  rejectedRequests: number;\n}\n\nexport class DepartmentHeadService {\n  /**\n   * Get department head dashboard data\n   */\n  async getDashboard(userId: string): Promise<DepartmentHeadDashboard> {\n    try {\n      // Get department information\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      // Get pending requests count\n      const pendingRequests = await this.getPendingRequestsCount(department.id);\n\n      // Get recent activity\n      const recentActivity = await this.getRecentActivity(department.id);\n\n      // Get attendance summary for today\n      const attendanceSummary = await this.getTodayAttendanceSummary(department.id);\n\n      return {\n        department: {\n          id: department.id,\n          name: department.name,\n          description: department.description || '',\n          employeeCount: department.employeeCount || 0\n        },\n        pendingRequests,\n        recentActivity,\n        attendanceSummary\n      };\n    } catch (error) {\n      logger.error('Error getting department head dashboard:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get department employees\n   */\n  async getDepartmentEmployees(\n    userId: string,\n    options: {\n      page: number;\n      limit: number;\n      status?: string;\n      search?: string;\n    }\n  ): Promise<{ data: DepartmentEmployee[]; pagination: any }> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      const offset = (options.page - 1) * options.limit;\n      \n      let query = `\n        SELECT \n          e.id,\n          e.employee_id,\n          e.position,\n          e.employment_type,\n          e.base_salary,\n          e.hire_date,\n          e.status,\n          u.id as user_id,\n          u.first_name,\n          u.last_name,\n          u.email,\n          ar.date as last_attendance\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN LATERAL (\n          SELECT date\n          FROM attendance_records ar\n          WHERE ar.employee_id = e.id\n          ORDER BY ar.date DESC\n          LIMIT 1\n        ) ar ON true\n        WHERE e.department_id = $1\n      `;\n\n      const queryParams: any[] = [department.id];\n      let paramCount = 2;\n\n      if (options.status) {\n        query += ` AND e.status = $${paramCount++}`;\n        queryParams.push(options.status);\n      }\n\n      if (options.search) {\n        query += ` AND (u.first_name ILIKE $${paramCount} OR u.last_name ILIKE $${paramCount} OR e.employee_id ILIKE $${paramCount})`;\n        queryParams.push(`%${options.search}%`);\n      }\n\n      query += ` ORDER BY u.first_name, u.last_name LIMIT $${paramCount++} OFFSET $${paramCount++}`;\n      queryParams.push(options.limit, offset);\n\n      const result = await getPool().query(query, queryParams);\n\n      // Get total count\n      let countQuery = `\n        SELECT COUNT(*) as total\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        WHERE e.department_id = $1\n      `;\n      const countParams: any[] = [department.id];\n\n      if (options.status) {\n        countQuery += ` AND e.status = $2`;\n        countParams.push(options.status);\n      }\n\n      if (options.search) {\n        countQuery += ` AND (u.first_name ILIKE $${countParams.length + 1} OR u.last_name ILIKE $${countParams.length + 1} OR e.employee_id ILIKE $${countParams.length + 1})`;\n        countParams.push(`%${options.search}%`);\n      }\n\n      const countResult = await getPool().query(countQuery, countParams);\n      const total = parseInt(countResult.rows[0].total);\n\n      const employees: DepartmentEmployee[] = result.rows.map((row: any) => ({\n        id: row.id,\n        employeeId: row.employee_id,\n        user: {\n          id: row.user_id,\n          firstName: row.first_name,\n          lastName: row.last_name,\n          email: row.email\n        },\n        position: row.position,\n        employmentType: row.employment_type,\n        baseSalary: parseFloat(row.base_salary) || 0,\n        hireDate: row.hire_date,\n        status: row.status,\n        lastAttendance: row.last_attendance\n      }));\n\n      return {\n        data: employees,\n        pagination: {\n          page: options.page,\n          limit: options.limit,\n          total,\n          pages: Math.ceil(total / options.limit)\n        }\n      };\n    } catch (error) {\n      logger.error('Error getting department employees:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get employee details\n   */\n  async getEmployeeDetails(userId: string, employeeId: string): Promise<any> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      const employee = await employeeModel.findByIdWithDetails(employeeId);\n      if (!employee) {\n        throw new Error('Employee not found');\n      }\n\n      // Verify employee belongs to department head's department\n      if (employee.department_id !== department.id) {\n        throw new Error('Employee does not belong to your department');\n      }\n\n      return employee;\n    } catch (error) {\n      logger.error('Error getting employee details:', { error, userId, employeeId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get pending requests for approval\n   */\n  async getPendingRequests(\n    userId: string,\n    options: {\n      type?: string;\n      page: number;\n      limit: number;\n    }\n  ): Promise<{ data: PendingRequest[]; pagination: any }> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      const offset = (options.page - 1) * options.limit;\n      const requests: PendingRequest[] = [];\n\n      // For now, return empty array as the models need to be extended with department-specific methods\n      // This would be implemented by adding findPendingByDepartment methods to the respective models\n\n      // Sort by creation date (newest first)\n      requests.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n      return {\n        data: requests.slice(offset, offset + options.limit),\n        pagination: {\n          page: options.page,\n          limit: options.limit,\n          total: requests.length,\n          pages: Math.ceil(requests.length / options.limit)\n        }\n      };\n    } catch (error) {\n      logger.error('Error getting pending requests:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get request history\n   */\n  async getRequestHistory(\n    userId: string,\n    options: {\n      type?: string;\n      page: number;\n      limit: number;\n      status?: string;\n      startDate?: string;\n      endDate?: string;\n    }\n  ): Promise<{ data: PendingRequest[]; pagination: any }> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      // This would be similar to getPendingRequests but with different filters\n      // For now, return empty data as the models need to be extended\n      return {\n        data: [],\n        pagination: {\n          page: options.page,\n          limit: options.limit,\n          total: 0,\n          pages: 0\n        }\n      };\n    } catch (error) {\n      logger.error('Error getting request history:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get department statistics\n   */\n  async getDepartmentStats(userId: string, period: string): Promise<DepartmentStats> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      // Get basic employee counts\n      const employeeCountQuery = `\n        SELECT \n          COUNT(*) as total,\n          COUNT(*) FILTER (WHERE status = 'active') as active\n        FROM employees \n        WHERE department_id = $1\n      `;\n      const employeeResult = await getPool().query(employeeCountQuery, [department.id]);\n\n      // Get attendance rate for the period\n      const attendanceQuery = `\n        SELECT \n          COUNT(DISTINCT ar.employee_id) as present_employees,\n          COUNT(DISTINCT e.id) as total_employees\n        FROM employees e\n        LEFT JOIN attendance_records ar ON e.id = ar.employee_id \n          AND ar.created_at >= $2\n          AND ar.status = 'present'\n        WHERE e.department_id = $1 AND e.status = 'active'\n      `;\n      \n      const periodStart = this.getPeriodStart(period);\n      const attendanceResult = await getPool().query(attendanceQuery, [department.id, periodStart]);\n\n      // Get pending requests count\n      const pendingCount = await this.getPendingRequestsCount(department.id);\n\n      return {\n        totalEmployees: parseInt(employeeResult.rows[0].total),\n        activeEmployees: parseInt(employeeResult.rows[0].active),\n        attendanceRate: attendanceResult.rows[0].total_employees > 0 \n          ? (parseInt(attendanceResult.rows[0].present_employees) / parseInt(attendanceResult.rows[0].total_employees)) * 100\n          : 0,\n        averageHours: 0, // Would need more complex calculation\n        pendingRequests: pendingCount.total,\n        approvedRequests: 0, // Would need to query approval history\n        rejectedRequests: 0 // Would need to query approval history\n      };\n    } catch (error) {\n      logger.error('Error getting department statistics:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get attendance summary for department\n   */\n  async getAttendanceSummary(\n    userId: string,\n    options: {\n      startDate?: string;\n      endDate?: string;\n      employeeId?: string;\n    }\n  ): Promise<any> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      // Implementation would depend on specific requirements\n      return {\n        summary: 'Attendance summary data',\n        period: {\n          startDate: options.startDate,\n          endDate: options.endDate\n        }\n      };\n    } catch (error) {\n      logger.error('Error getting attendance summary:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get payroll summary for department\n   */\n  async getPayrollSummary(\n    userId: string,\n    options: {\n      periodId?: string;\n      page: number;\n      limit: number;\n    }\n  ): Promise<{ data: any[]; pagination: any }> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found or user is not a department head');\n      }\n\n      // Implementation would depend on specific requirements\n      return {\n        data: [],\n        pagination: {\n          page: options.page,\n          limit: options.limit,\n          total: 0,\n          pages: 0\n        }\n      };\n    } catch (error) {\n      logger.error('Error getting payroll summary:', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * Helper method to get department by department head user ID\n   */\n  private async getDepartmentByHead(userId: string): Promise<any> {\n    const query = `\n      SELECT \n        d.id,\n        d.name,\n        d.description,\n        COUNT(e.id) as employee_count\n      FROM departments d\n      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'\n      WHERE d.department_head_user_id = $1 AND d.is_active = true\n      GROUP BY d.id, d.name, d.description\n    `;\n    \n    const result = await getPool().query(query, [userId]);\n    return result.rows[0] || null;\n  }\n\n  /**\n   * Helper method to get pending requests count\n   */\n  private async getPendingRequestsCount(departmentId: string): Promise<{\n    timeCorrections: number;\n    overtime: number;\n    leaves: number;\n    total: number;\n  }> {\n    const query = `\n      SELECT \n        (SELECT COUNT(*) FROM time_correction_requests tcr\n         JOIN employees e ON tcr.employee_id = e.id\n         WHERE e.department_id = $1 AND tcr.status = 'pending') as time_corrections,\n        (SELECT COUNT(*) FROM overtime_requests otr\n         JOIN employees e ON otr.employee_id = e.id\n         WHERE e.department_id = $1 AND otr.status = 'pending') as overtime,\n        (SELECT COUNT(*) FROM leaves l\n         JOIN employees e ON l.employee_id = e.id\n         WHERE e.department_id = $1 AND l.status = 'pending') as leaves\n    `;\n    \n    const result = await getPool().query(query, [departmentId]);\n    const row = result.rows[0];\n    \n    return {\n      timeCorrections: parseInt(row.time_corrections),\n      overtime: parseInt(row.overtime),\n      leaves: parseInt(row.leaves),\n      total: parseInt(row.time_corrections) + parseInt(row.overtime) + parseInt(row.leaves)\n    };\n  }\n\n  /**\n   * Helper method to get recent activity\n   */\n  private async getRecentActivity(departmentId: string): Promise<Array<{\n    type: 'time_correction' | 'overtime' | 'leave';\n    employeeName: string;\n    date: string;\n    status: string;\n  }>> {\n    try {\n      // Get recent time correction requests\n      const timeCorrectionsQuery = `\n        SELECT \n          'time_correction' as type,\n          CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n          tcr.created_at as date,\n          tcr.status\n        FROM time_correction_requests tcr\n        JOIN employees e ON tcr.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        WHERE e.department_id = $1\n        ORDER BY tcr.created_at DESC\n        LIMIT 5\n      `;\n\n      // Get recent overtime requests\n      const overtimeQuery = `\n        SELECT \n          'overtime' as type,\n          CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n          otr.created_at as date,\n          otr.status\n        FROM overtime_requests otr\n        JOIN employees e ON otr.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        WHERE e.department_id = $1\n        ORDER BY otr.created_at DESC\n        LIMIT 5\n      `;\n\n      // Get recent leave requests\n      const leaveQuery = `\n        SELECT \n          'leave' as type,\n          CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n          l.created_at as date,\n          l.status\n        FROM leaves l\n        JOIN employees e ON l.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        WHERE e.department_id = $1\n        ORDER BY l.created_at DESC\n        LIMIT 5\n      `;\n\n      const [timeCorrectionsResult, overtimeResult, leaveResult] = await Promise.all([\n        getPool().query(timeCorrectionsQuery, [departmentId]),\n        getPool().query(overtimeQuery, [departmentId]),\n        getPool().query(leaveQuery, [departmentId])\n      ]);\n\n      // Combine all results and sort by date\n      const allActivities = [\n        ...timeCorrectionsResult.rows,\n        ...overtimeResult.rows,\n        ...leaveResult.rows\n      ].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n       .slice(0, 10); // Get top 10 most recent activities\n\n      return allActivities.map(activity => ({\n        type: activity.type as 'time_correction' | 'overtime' | 'leave',\n        employeeName: activity.employee_name,\n        date: activity.date,\n        status: activity.status\n      }));\n    } catch (error) {\n      logger.error('Error getting recent activity:', { error, departmentId });\n      return [];\n    }\n  }\n\n  /**\n   * Helper method to get today's attendance summary\n   */\n  private async getTodayAttendanceSummary(departmentId: string): Promise<{\n    presentToday: number;\n    absentToday: number;\n    lateToday: number;\n  }> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    const query = `\n      SELECT \n        COUNT(*) FILTER (WHERE ar.overall_status = 'present') as present,\n        COUNT(*) FILTER (WHERE ar.overall_status = 'absent') as absent,\n        COUNT(*) FILTER (WHERE ar.overall_status = 'late') as late\n      FROM employees e\n      LEFT JOIN attendance_records ar ON e.id = ar.employee_id \n        AND DATE(ar.date) = $2\n      WHERE e.department_id = $1 AND e.status = 'active'\n    `;\n    \n    const result = await getPool().query(query, [departmentId, today]);\n    const row = result.rows[0];\n    \n    return {\n      presentToday: parseInt(row.present) || 0,\n      absentToday: parseInt(row.absent) || 0,\n      lateToday: parseInt(row.late) || 0\n    };\n  }\n\n  /**\n   * Get department info for department head\n   */\n  async getDepartmentInfo(userId: string): Promise<any> {\n    return await this.getDepartmentByHead(userId);\n  }\n\n  /**\n   * Get employee statistics for department\n   */\n  async getEmployeeStats(userId: string): Promise<any> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    const query = `\n      SELECT \n        COUNT(*) as total_employees,\n        COUNT(*) FILTER (WHERE status = 'active') as active_employees,\n        COUNT(*) FILTER (WHERE status = 'inactive') as inactive_employees,\n        AVG(base_salary) as average_salary\n      FROM employees \n      WHERE department_id = $1\n    `;\n    \n    const result = await getPool().query(query, [department.id]);\n    return result.rows[0];\n  }\n\n  /**\n   * Get employee performance statistics\n   */\n  async getEmployeePerformance(userId: string): Promise<any[]> {\n    try {\n      const department = await this.getDepartmentByHead(userId);\n      if (!department) {\n        throw new Error('Department not found');\n      }\n\n      // Get employee performance data with attendance statistics\n      const performanceQuery = `\n        SELECT \n          e.id as employee_id,\n          CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n          e.position,\n          e.employee_id as employee_code,\n          -- Calculate attendance rate (last 30 days)\n          COALESCE(\n            ROUND(\n              (COUNT(CASE WHEN ar.overall_status = 'present' THEN 1 END) * 100.0 / \n               NULLIF(COUNT(ar.id), 0)), 2\n            ), 0\n          ) as attendance_rate,\n          -- Calculate punctuality score (on-time arrivals)\n          COALESCE(\n            ROUND(\n              (COUNT(CASE WHEN ar.overall_status = 'present' AND as.clock_in::time <= '09:00:00' THEN 1 END) * 100.0 / \n               NULLIF(COUNT(CASE WHEN ar.overall_status = 'present' THEN 1 END), 0)), 2\n            ), 0\n          ) as punctuality_score,\n          -- Count late days\n          COUNT(CASE WHEN ar.overall_status = 'present' AND as.clock_in::time > '09:00:00' THEN 1 END) as total_days_late,\n          -- Count absent days\n          COUNT(CASE WHEN ar.overall_status = 'absent' THEN 1 END) as total_days_absent,\n          -- Average clock-in time\n          COALESCE(\n            TO_CHAR(AVG(CASE WHEN ar.overall_status = 'present' THEN as.clock_in::time END), 'HH24:MI'), \n            'N/A'\n          ) as average_clock_in_time\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN attendance_records ar ON e.id = ar.employee_id \n          AND ar.created_at >= CURRENT_DATE - INTERVAL '30 days'\n        LEFT JOIN attendance_sessions as ON ar.id = as.attendance_record_id\n          AND as.session_type = 'morning'\n        WHERE e.department_id = $1\n        GROUP BY e.id, u.first_name, u.last_name, e.position, e.employee_id\n        ORDER BY attendance_rate DESC, punctuality_score DESC\n      `;\n\n      const result = await getPool().query(performanceQuery, [department.id]);\n      \n      return result.rows.map(row => ({\n        employeeId: row.employee_id,\n        employeeName: row.employee_name,\n        position: row.position,\n        employeeCode: row.employee_code,\n        attendanceRate: parseFloat(row.attendance_rate) || 0,\n        punctualityScore: parseFloat(row.punctuality_score) || 0,\n        totalDaysLate: parseInt(row.total_days_late) || 0,\n        totalDaysAbsent: parseInt(row.total_days_absent) || 0,\n        averageClockInTime: row.average_clock_in_time\n      }));\n    } catch (error) {\n      logger.error('Error getting employee performance:', { error, userId });\n      return [];\n    }\n  }\n\n  /**\n   * Get all requests for department head\n   */\n  async getRequests(userId: string, params: {\n    type?: string;\n    status?: string;\n    page: number;\n    limit: number;\n  }): Promise<{ data: any[]; pagination: any }> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    const pool = getPool();\n    const offset = (params.page - 1) * params.limit;\n\n    try {\n      // Build the base query for all request types\n      let whereConditions = ['e.department_id = $1'];\n      let queryParams: any[] = [department.id];\n      let paramIndex = 2;\n\n      // Add type filter if specified\n      if (params.type) {\n        whereConditions.push(`request_type = $${paramIndex}`);\n        queryParams.push(params.type);\n        paramIndex++;\n      }\n\n      // Add status filter if specified\n      if (params.status) {\n        whereConditions.push(`status = $${paramIndex}`);\n        queryParams.push(params.status);\n        paramIndex++;\n      }\n\n\n      // Query to get all requests (overtime, leave, time correction) for the department\n      const requestsQuery = `\n        WITH all_requests AS (\n          -- Overtime requests\n          SELECT \n            ot.id,\n            'overtime' as request_type,\n            ot.employee_id,\n            ot.request_date as start_date,\n            ot.overtime_date as end_date,\n            ot.requested_hours as hours,\n            ot.reason,\n            ot.status::text as status,\n            ot.created_at,\n            ot.updated_at,\n            ot.approver_id as approved_by,\n            ot.approved_at,\n            ot.comments,\n            e.employee_id as employee_code,\n            u.first_name,\n            u.last_name,\n            u.email\n          FROM overtime_requests ot\n          JOIN employees e ON ot.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          WHERE e.department_id = $1\n          \n          UNION ALL\n          \n          -- Leave requests\n          SELECT \n            l.id,\n            'leave' as request_type,\n            l.employee_id,\n            l.start_date,\n            l.end_date,\n            (l.end_date - l.start_date + 1) as hours,\n            l.leave_type::text as reason,\n            l.status::text as status,\n            l.created_at,\n            l.updated_at,\n            l.approver_id as approved_by,\n            NULL as approved_at,\n            NULL as comments,\n            e.employee_id as employee_code,\n            u.first_name,\n            u.last_name,\n            u.email\n          FROM leaves l\n          JOIN employees e ON l.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          WHERE e.department_id = $1\n          \n          UNION ALL\n          \n          -- Time correction requests\n          SELECT \n            tcr.id,\n            'time_correction' as request_type,\n            tcr.employee_id,\n            tcr.correction_date as start_date,\n            tcr.correction_date as end_date,\n            NULL as hours,\n            tcr.reason,\n            tcr.status::text as status,\n            tcr.created_at,\n            tcr.updated_at,\n            tcr.approver_id as approved_by,\n            tcr.approved_at,\n            tcr.comments,\n            e.employee_id as employee_code,\n            u.first_name,\n            u.last_name,\n            u.email\n          FROM time_correction_requests tcr\n          JOIN employees e ON tcr.employee_id = e.id\n          JOIN users u ON e.user_id = u.id\n          WHERE e.department_id = $1\n        )\n        SELECT \n          ar.*,\n          CONCAT(ar.first_name, ' ', ar.last_name) as employee_name\n        FROM all_requests ar\n        ${whereConditions.length > 1 ? `WHERE ${whereConditions.slice(1).join(' AND ')}` : ''}\n        ORDER BY ar.created_at DESC\n        LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n      `;\n\n      // Count query for pagination\n      const countQuery = `\n        WITH all_requests AS (\n          SELECT 'overtime' as request_type, ot.status::text as status, e.department_id\n          FROM overtime_requests ot\n          JOIN employees e ON ot.employee_id = e.id\n          WHERE e.department_id = $1\n          \n          UNION ALL\n          \n          SELECT 'leave' as request_type, l.status::text as status, e.department_id\n          FROM leaves l\n          JOIN employees e ON l.employee_id = e.id\n          WHERE e.department_id = $1\n          \n          UNION ALL\n          \n          SELECT 'time_correction' as request_type, tcr.status::text as status, e.department_id\n          FROM time_correction_requests tcr\n          JOIN employees e ON tcr.employee_id = e.id\n          WHERE e.department_id = $1\n        )\n        SELECT COUNT(*) as total\n        FROM all_requests ar\n        ${whereConditions.length > 1 ? `WHERE ${whereConditions.slice(1).join(' AND ')}` : ''}\n      `;\n\n      // Add pagination parameters\n      queryParams.push(params.limit, offset);\n\n      const [requestsResult, countResult] = await Promise.all([\n        pool.query(requestsQuery, queryParams),\n        pool.query(countQuery, queryParams.slice(0, -2)) // Remove limit and offset for count\n      ]);\n\n      const total = parseInt(countResult.rows[0]?.total || '0');\n      const totalPages = Math.ceil(total / params.limit);\n\n      // Transform the data to match the expected format\n      const requests = requestsResult.rows.map(row => ({\n        id: row.id,\n        type: row.request_type,\n        employeeId: row.employee_id,\n        employeeName: row.employee_name,\n        employeeCode: row.employee_code,\n        departmentName: department.name,\n        status: row.status,\n        submittedAt: row.created_at,\n        approverName: row.approved_by ? 'Department Head' : null,\n        approvedAt: row.approved_at,\n        details: {\n          startDate: row.start_date,\n          endDate: row.end_date,\n          hours: row.hours,\n          reason: row.reason,\n          comments: row.comments,\n          requestType: row.request_type\n        }\n      }));\n\n      return {\n        data: requests,\n        pagination: {\n          page: params.page,\n          limit: params.limit,\n          total,\n          totalPages\n        }\n      };\n    } catch (error) {\n      logger.error('Error fetching requests:', { error, userId, params });\n      throw error;\n    }\n  }\n\n  /**\n   * Get request statistics\n   */\n  async getRequestStats(userId: string): Promise<any> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    const pool = getPool();\n\n    try {\n      // Get comprehensive request statistics\n      const statsQuery = `\n        WITH all_requests AS (\n          SELECT 'overtime' as request_type, ot.status::text as status\n          FROM overtime_requests ot\n          JOIN employees e ON ot.employee_id = e.id\n          WHERE e.department_id = $1\n          \n          UNION ALL\n          \n          SELECT 'leave' as request_type, l.status::text as status\n          FROM leaves l\n          JOIN employees e ON l.employee_id = e.id\n          WHERE e.department_id = $1\n          \n          UNION ALL\n          \n          SELECT 'time_correction' as request_type, tcr.status::text as status\n          FROM time_correction_requests tcr\n          JOIN employees e ON tcr.employee_id = e.id\n          WHERE e.department_id = $1\n        )\n        SELECT \n          COUNT(*) as total,\n          COUNT(*) FILTER (WHERE status = 'pending') as pending,\n          COUNT(*) FILTER (WHERE status = 'approved') as approved,\n          COUNT(*) FILTER (WHERE status = 'rejected') as rejected\n        FROM all_requests\n      `;\n\n      const result = await pool.query(statsQuery, [department.id]);\n      const stats = result.rows[0];\n\n      return {\n        total: parseInt(stats.total) || 0,\n        pending: parseInt(stats.pending) || 0,\n        approved: parseInt(stats.approved) || 0,\n        rejected: parseInt(stats.rejected) || 0\n      };\n    } catch (error) {\n      logger.error('Error getting request stats:', { error, userId });\n      return {\n        total: 0,\n        pending: 0,\n        approved: 0,\n        rejected: 0\n      };\n    }\n  }\n\n  /**\n   * Approve a request\n   */\n  async approveRequest(userId: string, requestId: string): Promise<void> {\n    const pool = getPool();\n    \n    try {\n      // First, determine the request type by checking which table contains the request\n      const overtimeQuery = 'SELECT id FROM overtime_requests WHERE id = $1';\n      const leaveQuery = 'SELECT id FROM leaves WHERE id = $1';\n      const timeCorrectionQuery = 'SELECT id FROM time_correction_requests WHERE id = $1';\n      \n      const [overtimeResult, leaveResult, timeCorrectionResult] = await Promise.all([\n        pool.query(overtimeQuery, [requestId]),\n        pool.query(leaveQuery, [requestId]),\n        pool.query(timeCorrectionQuery, [requestId])\n      ]);\n      \n      let requestType: string | null = null;\n      if (overtimeResult.rows.length > 0) {\n        requestType = 'overtime';\n      } else if (leaveResult.rows.length > 0) {\n        requestType = 'leave';\n      } else if (timeCorrectionResult.rows.length > 0) {\n        requestType = 'time_correction';\n      }\n      \n      if (!requestType) {\n        throw new Error('Request not found');\n      }\n      \n      // Import the appropriate service and approve the request\n      if (requestType === 'overtime') {\n        const { OvertimeService } = await import('../attendance/overtimeService');\n        const overtimeService = new OvertimeService();\n        await overtimeService.approveOvertimeRequest({\n          requestId,\n          approverId: userId,\n          approved: true,\n          comments: 'Approved by department head'\n        });\n      } else if (requestType === 'leave') {\n        const { LeaveService } = await import('../leave/leaveService');\n        const leaveService = new LeaveService();\n        await leaveService.approveLeaveRequest({\n          leaveId: requestId,\n          approverId: userId,\n          approved: true,\n          comments: 'Approved by department head'\n        });\n      } else if (requestType === 'time_correction') {\n        const { TimeCorrectionService } = await import('../attendance/timeCorrectionService');\n        const timeCorrectionService = new TimeCorrectionService();\n        await timeCorrectionService.approveTimeCorrectionRequest({\n          requestId,\n          approverId: userId,\n          approved: true,\n          comments: 'Approved by department head'\n        });\n      }\n      \n      logger.info(`Department head ${userId} approved ${requestType} request ${requestId}`);\n    } catch (error) {\n      logger.error('Error approving request:', { error, userId, requestId });\n      throw error;\n    }\n  }\n\n  /**\n   * Reject a request\n   */\n  async rejectRequest(userId: string, requestId: string, reason?: string): Promise<void> {\n    const pool = getPool();\n    \n    try {\n      // First, determine the request type by checking which table contains the request\n      const overtimeQuery = 'SELECT id FROM overtime_requests WHERE id = $1';\n      const leaveQuery = 'SELECT id FROM leaves WHERE id = $1';\n      const timeCorrectionQuery = 'SELECT id FROM time_correction_requests WHERE id = $1';\n      \n      const [overtimeResult, leaveResult, timeCorrectionResult] = await Promise.all([\n        pool.query(overtimeQuery, [requestId]),\n        pool.query(leaveQuery, [requestId]),\n        pool.query(timeCorrectionQuery, [requestId])\n      ]);\n      \n      let requestType: string | null = null;\n      if (overtimeResult.rows.length > 0) {\n        requestType = 'overtime';\n      } else if (leaveResult.rows.length > 0) {\n        requestType = 'leave';\n      } else if (timeCorrectionResult.rows.length > 0) {\n        requestType = 'time_correction';\n      }\n      \n      if (!requestType) {\n        throw new Error('Request not found');\n      }\n      \n      // Import the appropriate service and reject the request\n      if (requestType === 'overtime') {\n        const { OvertimeService } = await import('../attendance/overtimeService');\n        const overtimeService = new OvertimeService();\n        await overtimeService.approveOvertimeRequest({\n          requestId,\n          approverId: userId,\n          approved: false,\n          comments: reason || 'Rejected by department head'\n        });\n      } else if (requestType === 'leave') {\n        const { LeaveService } = await import('../leave/leaveService');\n        const leaveService = new LeaveService();\n        await leaveService.approveLeaveRequest({\n          leaveId: requestId,\n          approverId: userId,\n          approved: false,\n          comments: reason || 'Rejected by department head'\n        });\n      } else if (requestType === 'time_correction') {\n        const { TimeCorrectionService } = await import('../attendance/timeCorrectionService');\n        const timeCorrectionService = new TimeCorrectionService();\n        await timeCorrectionService.approveTimeCorrectionRequest({\n          requestId,\n          approverId: userId,\n          approved: false,\n          comments: reason || 'Rejected by department head'\n        });\n      }\n      \n      logger.info(`Department head ${userId} rejected ${requestType} request ${requestId} with reason: ${reason || 'No reason provided'}`);\n    } catch (error) {\n      logger.error('Error rejecting request:', { error, userId, requestId, reason });\n      throw error;\n    }\n  }\n\n  /**\n   * Get payroll periods for department\n   */\n  async getPayrollPeriods(userId: string): Promise<any[]> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    try {\n      // Get payroll periods that have been sent for approval to this department head\n      const query = `\n        SELECT DISTINCT pp.*,\n          COUNT(DISTINCT CASE WHEN e.department_id = $1 THEN pr.employee_id END) as total_employees,\n          COALESCE(SUM(CASE WHEN e.department_id = $1 THEN pr.net_pay ELSE 0 END), 0) as total_amount,\n          pa.id as approval_id,\n          pa.status as approval_status,\n          pa.comments as approval_comments,\n          pa.approved_at\n        FROM payroll_periods pp\n        INNER JOIN payroll_approvals pa ON pp.id = pa.payroll_period_id\n        LEFT JOIN payroll_records pr ON pp.id = pr.payroll_period_id\n        LEFT JOIN employees e ON pr.employee_id = e.id\n        WHERE pa.approver_id = $2\n        GROUP BY pp.id, pp.period_name, pp.start_date, pp.end_date, pp.status, \n                 pp.working_days, pp.expected_hours, pp.created_at, pp.updated_at,\n                 pa.id, pa.status, pa.comments, pa.approved_at\n        ORDER BY pp.created_at DESC\n      `;\n      \n      const result = await getPool().query(query, [department.id, userId]);\n      \n      return result.rows.map(period => ({\n        id: period.id,\n        periodName: period.period_name,\n        startDate: period.start_date,\n        endDate: period.end_date,\n        status: period.approval_status || period.status, // Use approval status if available, fallback to period status\n        workingDays: period.working_days,\n        expectedHours: period.expected_hours,\n        totalEmployees: parseInt(period.total_employees) || 0,\n        totalAmount: parseFloat(period.total_amount) || 0,\n        approvalId: period.approval_id,\n        approvalStatus: period.approval_status,\n        approvalComments: period.approval_comments,\n        approvedAt: period.approved_at,\n        createdAt: period.created_at,\n        updatedAt: period.updated_at\n      }));\n    } catch (error) {\n      logger.error('Error getting payroll periods:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get payroll records for a specific period\n   */\n  async getPayrollRecords(userId: string, periodId: string): Promise<any[]> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    try {\n      // Get payroll records for the period, filtered by department employees\n      // Include all required fields for consistency with HR and Employee modules\n      const query = `\n        SELECT \n          pr.*,\n          u.first_name,\n          u.last_name,\n          e.employee_id,\n          e.position,\n          e.department_id,\n          d.name as department_name,\n          pp.period_name\n        FROM payroll_records pr\n        INNER JOIN employees e ON pr.employee_id = e.id\n        INNER JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        LEFT JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n        WHERE pr.payroll_period_id = $1 AND e.department_id = $2\n        ORDER BY u.first_name, u.last_name\n      `;\n      \n      const result = await getPool().query(query, [periodId, department.id]);\n      \n      // Transform to standardized format\n      return result.rows.map(record => ({\n        id: record.id,\n        payrollPeriodId: record.payroll_period_id,\n        periodName: record.period_name,\n        employeeId: record.employee_id,\n        employeeName: `${record.first_name} ${record.last_name}`,\n        position: record.position,\n        departmentId: record.department_id,\n        departmentName: record.department_name,\n        baseSalary: record.base_salary,\n        hourlyRate: record.hourly_rate,\n        totalWorkedHours: record.total_worked_hours,\n        totalRegularHours: record.total_regular_hours,\n        totalOvertimeHours: record.total_overtime_hours,\n        totalLateHours: record.total_late_hours,\n        lateDeductions: record.late_deductions,\n        paidLeaveHours: record.paid_leave_hours || 0,\n        grossPay: record.gross_pay,\n        netPay: record.net_pay,\n        totalDeductions: record.total_deductions,\n        totalBenefits: record.total_benefits,\n        status: record.status,\n        createdAt: record.created_at,\n        updatedAt: record.updated_at\n      }));\n    } catch (error) {\n      logger.error('Error getting payroll records:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get payroll statistics for department\n   */\n  async getPayrollStats(userId: string): Promise<any> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    try {\n      // Get total employees in department\n      const employeeCountQuery = `\n        SELECT COUNT(*) as count\n        FROM employees\n        WHERE department_id = $1 AND status = 'active'\n      `;\n      const employeeResult = await getPool().query(employeeCountQuery, [department.id]);\n      const totalEmployees = parseInt(employeeResult.rows[0].count);\n\n      // Get total gross pay for current month\n      const currentMonth = new Date();\n      const startOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n      const endOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n\n      const grossPayQuery = `\n        SELECT COALESCE(SUM(pr.gross_pay), 0) as total_gross_pay\n        FROM payroll_records pr\n        INNER JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n        INNER JOIN employees e ON pr.employee_id = e.id\n        WHERE e.department_id = $1 \n        AND pp.start_date >= $2 \n        AND pp.end_date <= $3\n      `;\n      const grossPayResult = await getPool().query(grossPayQuery, [department.id, startOfMonth, endOfMonth]);\n      const totalGrossPay = parseFloat(grossPayResult.rows[0].total_gross_pay);\n\n      // Get completed and processing periods count\n      const periodsQuery = `\n        SELECT \n          COUNT(CASE WHEN pa.status = 'approved' OR pp.status = 'completed' THEN 1 END) as completed_periods,\n          COUNT(CASE WHEN pp.status = 'processing' OR pp.status = 'sent_for_review' THEN 1 END) as processing_periods\n        FROM payroll_periods pp\n        INNER JOIN payroll_approvals pa ON pp.id = pa.payroll_period_id\n        WHERE pa.approver_id = $1\n      `;\n      const periodsResult = await getPool().query(periodsQuery, [userId]);\n      const completedPeriods = parseInt(periodsResult.rows[0].completed_periods);\n      const processingPeriods = parseInt(periodsResult.rows[0].processing_periods);\n\n      return {\n        totalEmployees,\n        totalGrossPay,\n        completedPeriods,\n        processingPeriods\n      };\n    } catch (error) {\n      logger.error('Error getting payroll statistics:', error);\n      return {\n        totalEmployees: 0,\n        totalGrossPay: 0,\n        completedPeriods: 0,\n        processingPeriods: 0\n      };\n    }\n  }\n\n  /**\n   * Get payroll approvals for department\n   */\n  async getPayrollApprovals(userId: string): Promise<any[]> {\n    const department = await this.getDepartmentByHead(userId);\n    if (!department) {\n      throw new Error('Department not found');\n    }\n\n    try {\n      // Get pending approvals for this department head\n      const approvals = await payrollApprovalModel.getPendingApprovalsForApprover(userId);\n      \n      // For each approval, get the detailed payroll records\n      const approvalsWithDetails = await Promise.all(\n        approvals.map(async (approval) => {\n          // Get payroll records for this period and department\n          const recordsQuery = `\n            SELECT \n              pr.*,\n              u.first_name,\n              u.last_name,\n              e.employee_id,\n              e.position,\n              e.department_id\n            FROM payroll_records pr\n            INNER JOIN employees e ON pr.employee_id = e.id\n            INNER JOIN users u ON e.user_id = u.id\n            WHERE pr.payroll_period_id = $1 AND e.department_id = $2\n            ORDER BY u.first_name, u.last_name\n          `;\n          \n          const recordsResult = await getPool().query(recordsQuery, [approval.payrollPeriodId, department.id]);\n          \n          const payrollRecords = recordsResult.rows.map(record => ({\n            id: record.id,\n            employeeName: `${record.first_name} ${record.last_name}`,\n            employeeId: record.employee_id,\n            position: record.position,\n            baseSalary: record.base_salary,\n            totalRegularHours: record.total_regular_hours,\n            totalOvertimeHours: record.total_overtime_hours,\n            totalLateHours: record.total_late_hours,\n            hourlyRate: record.hourly_rate,\n            grossPay: record.gross_pay,\n            netPay: record.net_pay,\n            totalDeductions: record.total_deductions,\n            totalBenefits: record.total_benefits,\n            lateDeductions: record.late_deductions,\n            status: record.status,\n            createdAt: record.created_at,\n            updatedAt: record.updated_at\n          }));\n\n          // Calculate totals\n          const totalEmployees = payrollRecords.length;\n          const totalAmount = payrollRecords.reduce((sum, record) => sum + (record.netPay || 0), 0);\n          const totalGrossPay = payrollRecords.reduce((sum, record) => sum + (record.grossPay || 0), 0);\n          const totalDeductions = payrollRecords.reduce((sum, record) => sum + (record.totalDeductions || 0), 0);\n          const totalBenefits = payrollRecords.reduce((sum, record) => sum + (record.totalBenefits || 0), 0);\n\n          return {\n            id: approval.id,\n            periodName: approval.payrollPeriod.periodName,\n            periodId: approval.payrollPeriodId,\n            startDate: approval.payrollPeriod.startDate,\n            endDate: approval.payrollPeriod.endDate,\n            createdAt: approval.createdAt,\n            totalEmployees,\n            totalAmount,\n            totalGrossPay,\n            totalDeductions,\n            totalBenefits,\n            status: approval.status,\n            departmentName: approval.department?.name || 'Unknown Department',\n            approverName: `${approval.approver.firstName} ${approval.approver.lastName}`,\n            comments: approval.comments,\n            payrollRecords\n          };\n        })\n      );\n      \n      return approvalsWithDetails;\n    } catch (error) {\n      logger.error('Error getting payroll approvals:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Approve or reject payroll approval\n   */\n  async approvePayrollApproval(userId: string, approvalId: string, status: 'approved' | 'rejected', comments?: string): Promise<boolean> {\n    try {\n      // Verify the approval belongs to this department head\n      const approval = await payrollApprovalModel.findById(approvalId);\n      if (!approval || approval.approverId !== userId) {\n        throw new Error('Approval not found or not authorized');\n      }\n\n      // Update the approval\n      const updateData = {\n        status,\n        comments,\n        approvedAt: new Date()\n      };\n\n      const updatedApproval = await payrollApprovalModel.updatePayrollApproval(approvalId, updateData);\n      \n      if (updatedApproval) {\n        // If approved, update payroll records status to 'processed' for this department\n        if (status === 'approved') {\n          logger.info(`Updating payroll records to processed for department ${approval.departmentId} in period ${approval.payrollPeriodId}`);\n          \n          // Update all payroll records for this department and period to 'processed'\n          const { getPool } = await import('../../config/database');\n          const pool = getPool();\n          \n          const updateRecordsQuery = `\n            UPDATE payroll_records \n            SET status = 'processed', updated_at = CURRENT_TIMESTAMP\n            WHERE payroll_period_id = $1 \n            AND employee_id IN (\n              SELECT e.id FROM employees e \n              WHERE e.department_id = $2\n            )\n          `;\n          \n          await pool.query(updateRecordsQuery, [approval.payrollPeriodId, approval.departmentId]);\n          \n          logger.info(`Updated payroll records to processed for department ${approval.departmentId}`);\n        }\n        \n        // Check if all approvals for this payroll period are now complete\n        logger.info(`Department head ${userId} ${status} payroll approval ${approvalId}, checking period status...`);\n        const { PayrollApprovalService } = await import('../payroll/payrollApprovalService');\n        const payrollApprovalService = new PayrollApprovalService();\n        await payrollApprovalService.checkAndUpdatePayrollPeriodStatus(approval.payrollPeriodId);\n        \n        logger.info(`Department head ${userId} ${status} payroll approval ${approvalId}`);\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      logger.error('Error approving payroll:', error);\n      throw error;\n    }\n  }\n\n\n  /**\n   * Helper method to get period start date\n   */\n  private getPeriodStart(period: string): string {\n    const now = new Date();\n    switch (period) {\n      case 'week':\n        return new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString();\n      case 'month':\n        return new Date(now.getFullYear(), now.getMonth(), 1).toISOString();\n      case 'year':\n        return new Date(now.getFullYear(), 0, 1).toISOString();\n      default:\n        return new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString();\n    }\n  }\n}"],"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","ignoreList":[]}