b2e8721b9c0964229e2e230eca50893c
"use strict";

/* istanbul ignore next */
function cov_tu8my5sow() {
  var path = "/home/kim/tito/server/src/middleware/audit/auditMiddleware.ts";
  var hash = "0c5bb4b18f0582d143368483e676747c6c67c411";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/middleware/audit/auditMiddleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 91
        }
      },
      "2": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 67
        }
      },
      "3": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 62,
          column: 10
        }
      },
      "4": {
        start: {
          line: 9,
          column: 12
        },
        end: {
          line: 61,
          column: 14
        }
      },
      "5": {
        start: {
          line: 10,
          column: 37
        },
        end: {
          line: 10,
          column: 45
        }
      },
      "6": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 14,
          column: 18
        }
      },
      "7": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 57
        }
      },
      "8": {
        start: {
          line: 15,
          column: 16
        },
        end: {
          line: 59,
          column: 19
        }
      },
      "9": {
        start: {
          line: 16,
          column: 20
        },
        end: {
          line: 58,
          column: 21
        }
      },
      "10": {
        start: {
          line: 18,
          column: 24
        },
        end: {
          line: 53,
          column: 25
        }
      },
      "11": {
        start: {
          line: 19,
          column: 43
        },
        end: {
          line: 19,
          column: 59
        }
      },
      "12": {
        start: {
          line: 20,
          column: 28
        },
        end: {
          line: 21,
          column: 39
        }
      },
      "13": {
        start: {
          line: 21,
          column: 32
        },
        end: {
          line: 21,
          column: 39
        }
      },
      "14": {
        start: {
          line: 23,
          column: 28
        },
        end: {
          line: 29,
          column: 29
        }
      },
      "15": {
        start: {
          line: 24,
          column: 32
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "16": {
        start: {
          line: 28,
          column: 32
        },
        end: {
          line: 28,
          column: 93
        }
      },
      "17": {
        start: {
          line: 30,
          column: 41
        },
        end: {
          line: 30,
          column: 49
        }
      },
      "18": {
        start: {
          line: 31,
          column: 28
        },
        end: {
          line: 36,
          column: 29
        }
      },
      "19": {
        start: {
          line: 32,
          column: 32
        },
        end: {
          line: 32,
          column: 50
        }
      },
      "20": {
        start: {
          line: 34,
          column: 33
        },
        end: {
          line: 36,
          column: 29
        }
      },
      "21": {
        start: {
          line: 35,
          column: 32
        },
        end: {
          line: 35,
          column: 50
        }
      },
      "22": {
        start: {
          line: 38,
          column: 42
        },
        end: {
          line: 38,
          column: 46
        }
      },
      "23": {
        start: {
          line: 39,
          column: 42
        },
        end: {
          line: 39,
          column: 46
        }
      },
      "24": {
        start: {
          line: 40,
          column: 28
        },
        end: {
          line: 51,
          column: 29
        }
      },
      "25": {
        start: {
          line: 41,
          column: 32
        },
        end: {
          line: 41,
          column: 51
        }
      },
      "26": {
        start: {
          line: 45,
          column: 33
        },
        end: {
          line: 51,
          column: 29
        }
      },
      "27": {
        start: {
          line: 46,
          column: 32
        },
        end: {
          line: 46,
          column: 51
        }
      },
      "28": {
        start: {
          line: 48,
          column: 33
        },
        end: {
          line: 51,
          column: 29
        }
      },
      "29": {
        start: {
          line: 52,
          column: 28
        },
        end: {
          line: 52,
          column: 121
        }
      },
      "30": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 57,
          column: 69
        }
      },
      "31": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 23
        }
      },
      "32": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 86,
          column: 10
        }
      },
      "33": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 85,
          column: 14
        }
      },
      "34": {
        start: {
          line: 66,
          column: 37
        },
        end: {
          line: 66,
          column: 45
        }
      },
      "35": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 69,
          column: 18
        }
      },
      "36": {
        start: {
          line: 68,
          column: 20
        },
        end: {
          line: 68,
          column: 57
        }
      },
      "37": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 83,
          column: 19
        }
      },
      "38": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 82,
          column: 21
        }
      },
      "39": {
        start: {
          line: 72,
          column: 24
        },
        end: {
          line: 78,
          column: 25
        }
      },
      "40": {
        start: {
          line: 73,
          column: 43
        },
        end: {
          line: 73,
          column: 59
        }
      },
      "41": {
        start: {
          line: 74,
          column: 28
        },
        end: {
          line: 75,
          column: 39
        }
      },
      "42": {
        start: {
          line: 75,
          column: 32
        },
        end: {
          line: 75,
          column: 39
        }
      },
      "43": {
        start: {
          line: 76,
          column: 67
        },
        end: {
          line: 76,
          column: 90
        }
      },
      "44": {
        start: {
          line: 77,
          column: 28
        },
        end: {
          line: 77,
          column: 121
        }
      },
      "45": {
        start: {
          line: 81,
          column: 24
        },
        end: {
          line: 81,
          column: 69
        }
      },
      "46": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 23
        }
      },
      "47": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 107,
          column: 10
        }
      },
      "48": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 106,
          column: 14
        }
      },
      "49": {
        start: {
          line: 90,
          column: 37
        },
        end: {
          line: 90,
          column: 45
        }
      },
      "50": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 93,
          column: 18
        }
      },
      "51": {
        start: {
          line: 92,
          column: 20
        },
        end: {
          line: 92,
          column: 57
        }
      },
      "52": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 104,
          column: 19
        }
      },
      "53": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 103,
          column: 21
        }
      },
      "54": {
        start: {
          line: 96,
          column: 24
        },
        end: {
          line: 99,
          column: 25
        }
      },
      "55": {
        start: {
          line: 97,
          column: 67
        },
        end: {
          line: 97,
          column: 90
        }
      },
      "56": {
        start: {
          line: 98,
          column: 28
        },
        end: {
          line: 98,
          column: 115
        }
      },
      "57": {
        start: {
          line: 102,
          column: 24
        },
        end: {
          line: 102,
          column: 69
        }
      },
      "58": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 23
        }
      },
      "59": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 62
        }
      },
      "60": {
        start: {
          line: 111,
          column: 0
        },
        end: {
          line: 111,
          column: 42
        }
      },
      "61": {
        start: {
          line: 113,
          column: 0
        },
        end: {
          line: 113,
          column: 48
        }
      },
      "62": {
        start: {
          line: 115,
          column: 30
        },
        end: {
          line: 122,
          column: 1
        }
      },
      "63": {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 121,
          column: 6
        }
      },
      "64": {
        start: {
          line: 117,
          column: 77
        },
        end: {
          line: 117,
          column: 97
        }
      },
      "65": {
        start: {
          line: 118,
          column: 77
        },
        end: {
          line: 118,
          column: 90
        }
      },
      "66": {
        start: {
          line: 119,
          column: 77
        },
        end: {
          line: 119,
          column: 90
        }
      },
      "67": {
        start: {
          line: 120,
          column: 46
        },
        end: {
          line: 120,
          column: 119
        }
      },
      "68": {
        start: {
          line: 123,
          column: 0
        },
        end: {
          line: 123,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 8,
            column: 29
          },
          end: {
            line: 8,
            column: 30
          }
        },
        loc: {
          start: {
            line: 8,
            column: 63
          },
          end: {
            line: 62,
            column: 9
          }
        },
        line: 8
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 19
          },
          end: {
            line: 9,
            column: 20
          }
        },
        loc: {
          start: {
            line: 9,
            column: 45
          },
          end: {
            line: 61,
            column: 13
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 12,
            column: 27
          },
          end: {
            line: 12,
            column: 28
          }
        },
        loc: {
          start: {
            line: 12,
            column: 43
          },
          end: {
            line: 14,
            column: 17
          }
        },
        line: 12
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 15,
            column: 34
          }
        },
        loc: {
          start: {
            line: 15,
            column: 45
          },
          end: {
            line: 59,
            column: 17
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 64,
            column: 31
          },
          end: {
            line: 64,
            column: 32
          }
        },
        loc: {
          start: {
            line: 64,
            column: 69
          },
          end: {
            line: 86,
            column: 9
          }
        },
        line: 64
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 65,
            column: 19
          },
          end: {
            line: 65,
            column: 20
          }
        },
        loc: {
          start: {
            line: 65,
            column: 45
          },
          end: {
            line: 85,
            column: 13
          }
        },
        line: 65
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 67,
            column: 27
          },
          end: {
            line: 67,
            column: 28
          }
        },
        loc: {
          start: {
            line: 67,
            column: 43
          },
          end: {
            line: 69,
            column: 17
          }
        },
        line: 67
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 70,
            column: 33
          },
          end: {
            line: 70,
            column: 34
          }
        },
        loc: {
          start: {
            line: 70,
            column: 45
          },
          end: {
            line: 83,
            column: 17
          }
        },
        line: 70
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 88,
            column: 31
          },
          end: {
            line: 88,
            column: 32
          }
        },
        loc: {
          start: {
            line: 88,
            column: 69
          },
          end: {
            line: 107,
            column: 9
          }
        },
        line: 88
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 89,
            column: 19
          },
          end: {
            line: 89,
            column: 20
          }
        },
        loc: {
          start: {
            line: 89,
            column: 45
          },
          end: {
            line: 106,
            column: 13
          }
        },
        line: 89
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 91,
            column: 27
          },
          end: {
            line: 91,
            column: 28
          }
        },
        loc: {
          start: {
            line: 91,
            column: 43
          },
          end: {
            line: 93,
            column: 17
          }
        },
        line: 91
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 94,
            column: 33
          },
          end: {
            line: 94,
            column: 34
          }
        },
        loc: {
          start: {
            line: 94,
            column: 45
          },
          end: {
            line: 104,
            column: 17
          }
        },
        line: 94
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 115,
            column: 30
          },
          end: {
            line: 115,
            column: 31
          }
        },
        loc: {
          start: {
            line: 115,
            column: 45
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 115
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 117,
            column: 68
          },
          end: {
            line: 117,
            column: 69
          }
        },
        loc: {
          start: {
            line: 117,
            column: 77
          },
          end: {
            line: 117,
            column: 97
          }
        },
        line: 117
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 118,
            column: 68
          },
          end: {
            line: 118,
            column: 69
          }
        },
        loc: {
          start: {
            line: 118,
            column: 77
          },
          end: {
            line: 118,
            column: 90
          }
        },
        line: 118
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 119,
            column: 68
          },
          end: {
            line: 119,
            column: 69
          }
        },
        loc: {
          start: {
            line: 119,
            column: 77
          },
          end: {
            line: 119,
            column: 90
          }
        },
        line: 119
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 120,
            column: 19
          },
          end: {
            line: 120,
            column: 20
          }
        },
        loc: {
          start: {
            line: 120,
            column: 46
          },
          end: {
            line: 120,
            column: 119
          }
        },
        line: 120
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 53,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 53,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 49
          }
        }, {
          start: {
            line: 18,
            column: 53
          },
          end: {
            line: 18,
            column: 73
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 28
          },
          end: {
            line: 21,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 28
          },
          end: {
            line: 21,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 28
          },
          end: {
            line: 29,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 28
          },
          end: {
            line: 29,
            column: 29
          }
        }, {
          start: {
            line: 26,
            column: 33
          },
          end: {
            line: 29,
            column: 29
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 28,
            column: 43
          },
          end: {
            line: 28,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 43
          },
          end: {
            line: 28,
            column: 56
          }
        }, {
          start: {
            line: 28,
            column: 60
          },
          end: {
            line: 28,
            column: 79
          }
        }, {
          start: {
            line: 28,
            column: 83
          },
          end: {
            line: 28,
            column: 92
          }
        }],
        line: 28
      },
      "5": {
        loc: {
          start: {
            line: 31,
            column: 28
          },
          end: {
            line: 36,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 28
          },
          end: {
            line: 36,
            column: 29
          }
        }, {
          start: {
            line: 34,
            column: 33
          },
          end: {
            line: 36,
            column: 29
          }
        }],
        line: 31
      },
      "6": {
        loc: {
          start: {
            line: 34,
            column: 33
          },
          end: {
            line: 36,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 33
          },
          end: {
            line: 36,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "7": {
        loc: {
          start: {
            line: 40,
            column: 28
          },
          end: {
            line: 51,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 28
          },
          end: {
            line: 51,
            column: 29
          }
        }, {
          start: {
            line: 45,
            column: 33
          },
          end: {
            line: 51,
            column: 29
          }
        }],
        line: 40
      },
      "8": {
        loc: {
          start: {
            line: 40,
            column: 32
          },
          end: {
            line: 40,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 32
          },
          end: {
            line: 40,
            column: 51
          }
        }, {
          start: {
            line: 40,
            column: 55
          },
          end: {
            line: 40,
            column: 63
          }
        }],
        line: 40
      },
      "9": {
        loc: {
          start: {
            line: 45,
            column: 33
          },
          end: {
            line: 51,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 33
          },
          end: {
            line: 51,
            column: 29
          }
        }, {
          start: {
            line: 48,
            column: 33
          },
          end: {
            line: 51,
            column: 29
          }
        }],
        line: 45
      },
      "10": {
        loc: {
          start: {
            line: 45,
            column: 37
          },
          end: {
            line: 45,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 37
          },
          end: {
            line: 45,
            column: 56
          }
        }, {
          start: {
            line: 45,
            column: 60
          },
          end: {
            line: 45,
            column: 68
          }
        }],
        line: 45
      },
      "11": {
        loc: {
          start: {
            line: 48,
            column: 33
          },
          end: {
            line: 51,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 33
          },
          end: {
            line: 51,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "12": {
        loc: {
          start: {
            line: 72,
            column: 24
          },
          end: {
            line: 78,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 24
          },
          end: {
            line: 78,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "13": {
        loc: {
          start: {
            line: 72,
            column: 28
          },
          end: {
            line: 72,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 28
          },
          end: {
            line: 72,
            column: 49
          }
        }, {
          start: {
            line: 72,
            column: 53
          },
          end: {
            line: 72,
            column: 73
          }
        }],
        line: 72
      },
      "14": {
        loc: {
          start: {
            line: 74,
            column: 28
          },
          end: {
            line: 75,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 28
          },
          end: {
            line: 75,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "15": {
        loc: {
          start: {
            line: 96,
            column: 24
          },
          end: {
            line: 99,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 24
          },
          end: {
            line: 99,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "16": {
        loc: {
          start: {
            line: 96,
            column: 28
          },
          end: {
            line: 96,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 28
          },
          end: {
            line: 96,
            column: 49
          }
        }, {
          start: {
            line: 96,
            column: 53
          },
          end: {
            line: 96,
            column: 73
          }
        }],
        line: 96
      },
      "17": {
        loc: {
          start: {
            line: 117,
            column: 77
          },
          end: {
            line: 117,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 77
          },
          end: {
            line: 117,
            column: 88
          }
        }, {
          start: {
            line: 117,
            column: 92
          },
          end: {
            line: 117,
            column: 97
          }
        }],
        line: 117
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/middleware/audit/auditMiddleware.ts",
      mappings: ";;;AACA,oEAAiE;AAWjE,MAAa,eAAe;IAG1B;QAIA,iCAAiC;QACjC,kBAAa,GAAG,CAAC,SAAiB,EAAE,iBAA4C,EAAE,EAAE;YAClF,OAAO,KAAK,EAAE,GAAqB,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;gBACxE,MAAM,YAAY,GAAG,GAAG,CAAC,IAAI,CAAC;gBAE9B,wBAAwB;gBACxB,GAAG,CAAC,IAAI,GAAG,UAAS,IAAS;oBAC3B,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACvC,CAAC,CAAC;gBAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;oBAC1B,IAAI,CAAC;wBACH,iCAAiC;wBACjC,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,EAAE,CAAC;4BAClD,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC;4BAChC,IAAI,CAAC,MAAM;gCAAE,OAAO;4BAEpB,IAAI,QAAgB,CAAC;4BACrB,IAAI,iBAAiB,EAAE,CAAC;gCACtB,QAAQ,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC;4BACpC,CAAC;iCAAM,CAAC;gCACN,qCAAqC;gCACrC,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,IAAI,SAAS,CAAC;4BAC/D,CAAC;4BAED,IAAI,MAAM,GAAmC,QAAQ,CAAC;4BACtD,IAAI,GAAG,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC;gCAC1B,MAAM,GAAG,QAAQ,CAAC;4BACpB,CAAC;iCAAM,IAAI,GAAG,CAAC,MAAM,KAAK,QAAQ,EAAE,CAAC;gCACnC,MAAM,GAAG,QAAQ,CAAC;4BACpB,CAAC;4BAED,iDAAiD;4BACjD,IAAI,OAAO,GAAQ,IAAI,CAAC;4BACxB,IAAI,OAAO,GAAQ,IAAI,CAAC;4BAExB,IAAI,MAAM,KAAK,QAAQ,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;gCACpC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;gCACnB,+CAA+C;gCAC/C,iDAAiD;4BACnD,CAAC;iCAAM,IAAI,MAAM,KAAK,QAAQ,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;gCAC3C,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;4BACrB,CAAC;iCAAM,IAAI,MAAM,KAAK,QAAQ,EAAE,CAAC;gCAC/B,+DAA+D;gCAC/D,iDAAiD;4BACnD,CAAC;4BAED,MAAM,IAAI,CAAC,YAAY,CAAC,aAAa,CACnC,MAAM,EACN,SAAS,EACT,QAAQ,EACR,MAAM,EACN,OAAO,EACP,OAAO,CACR,CAAC;wBACJ,CAAC;oBACH,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACf,qDAAqD;wBACrD,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;oBAC/C,CAAC;gBACH,CAAC,CAAC,CAAC;gBAEH,IAAI,EAAE,CAAC;YACT,CAAC,CAAC;QACJ,CAAC,CAAC;QAEF,sDAAsD;QACtD,oBAAe,GAAG,CAChB,SAAiB,EACjB,MAAsC,EACtC,aAAkG,EAClG,EAAE;YACF,OAAO,KAAK,EAAE,GAAqB,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;gBACxE,MAAM,YAAY,GAAG,GAAG,CAAC,IAAI,CAAC;gBAE9B,GAAG,CAAC,IAAI,GAAG,UAAS,IAAS;oBAC3B,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACvC,CAAC,CAAC;gBAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;oBAC1B,IAAI,CAAC;wBACH,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,EAAE,CAAC;4BAClD,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC;4BAChC,IAAI,CAAC,MAAM;gCAAE,OAAO;4BAEpB,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,aAAa,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;4BAE/D,MAAM,IAAI,CAAC,YAAY,CAAC,aAAa,CACnC,MAAM,EACN,SAAS,EACT,QAAQ,EACR,MAAM,EACN,OAAO,EACP,OAAO,CACR,CAAC;wBACJ,CAAC;oBACH,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACf,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;oBAC/C,CAAC;gBACH,CAAC,CAAC,CAAC;gBAEH,IAAI,EAAE,CAAC;YACT,CAAC,CAAC;QACJ,CAAC,CAAC;QAEF,qDAAqD;QACrD,oBAAe,GAAG,CAChB,SAAiB,EACjB,MAAsC,EACtC,aAAkG,EAClG,EAAE;YACF,OAAO,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;gBAC/D,MAAM,YAAY,GAAG,GAAG,CAAC,IAAI,CAAC;gBAE9B,GAAG,CAAC,IAAI,GAAG,UAAS,IAAS;oBAC3B,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACvC,CAAC,CAAC;gBAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;oBAC1B,IAAI,CAAC;wBACH,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,EAAE,CAAC;4BAClD,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,aAAa,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;4BAE/D,MAAM,IAAI,CAAC,YAAY,CAAC,eAAe,CACrC,SAAS,EACT,QAAQ,EACR,MAAM,EACN,OAAO,EACP,OAAO,CACR,CAAC;wBACJ,CAAC;oBACH,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACf,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;oBAC/C,CAAC;gBACH,CAAC,CAAC,CAAC;gBAEH,IAAI,EAAE,CAAC;YACT,CAAC,CAAC;QACJ,CAAC,CAAC;QA7IA,IAAI,CAAC,YAAY,GAAG,IAAI,2BAAY,EAAE,CAAC;IACzC,CAAC;CA6IF;AAlJD,0CAkJC;AAED,4BAA4B;AACf,QAAA,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;AAErD,iEAAiE;AAC1D,MAAM,qBAAqB,GAAG,CAAC,SAAiB,EAAE,EAAE;IACzD,OAAO;QACL,SAAS,EAAE,uBAAe,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,KAAK,CAAC;QAClF,SAAS,EAAE,uBAAe,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QAC3E,SAAS,EAAE,uBAAe,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QAC3E,SAAS,EAAE,CAAC,MAAsC,EAAE,aAAkG,EAAE,EAAE,CACxJ,uBAAe,CAAC,eAAe,CAAC,SAAS,EAAE,MAAM,EAAE,aAAa,CAAC;KACpE,CAAC;AACJ,CAAC,CAAC;AARW,QAAA,qBAAqB,yBAQhC",
      names: [],
      sources: ["/home/kim/tito/server/src/middleware/audit/auditMiddleware.ts"],
      sourcesContent: ["import { Request, Response, NextFunction } from 'express';\nimport { AuditService } from '../../services/audit/auditService';\n\nexport interface AuditableRequest extends Request {\n  user?: {\n    userId: string;\n    email: string;\n    role: string;\n    tokenVersion: number;\n  };\n}\n\nexport class AuditMiddleware {\n  private auditService: AuditService;\n\n  constructor() {\n    this.auditService = new AuditService();\n  }\n\n  // Middleware to log user actions\n  logUserAction = (tableName: string, recordIdExtractor?: (req: Request) => string) => {\n    return async (req: AuditableRequest, res: Response, next: NextFunction) => {\n      const originalSend = res.send;\n\n      // Capture response body\n      res.send = function(body: any) {\n        return originalSend.call(this, body);\n      };\n\n      res.on('finish', async () => {\n        try {\n          // Only log successful operations\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            const userId = req.user?.userId;\n            if (!userId) return;\n\n            let recordId: string;\n            if (recordIdExtractor) {\n              recordId = recordIdExtractor(req);\n            } else {\n              // Default: try to get ID from params\n              recordId = req.params.id || req.params.recordId || 'unknown';\n            }\n\n            let action: 'INSERT' | 'UPDATE' | 'DELETE' = 'UPDATE';\n            if (req.method === 'POST') {\n              action = 'INSERT';\n            } else if (req.method === 'DELETE') {\n              action = 'DELETE';\n            }\n\n            // Extract old and new data from request/response\n            let oldData: any = null;\n            let newData: any = null;\n\n            if (action === 'UPDATE' && req.body) {\n              newData = req.body;\n              // For updates, we might want to fetch old data\n              // This would require additional database queries\n            } else if (action === 'INSERT' && req.body) {\n              newData = req.body;\n            } else if (action === 'DELETE') {\n              // For deletes, we might want to fetch the record being deleted\n              // This would require additional database queries\n            }\n\n            await this.auditService.logUserAction(\n              userId,\n              tableName,\n              recordId,\n              action,\n              oldData,\n              newData\n            );\n          }\n        } catch (error) {\n          // Don't let audit logging errors break the main flow\n          console.error('Audit logging error:', error);\n        }\n      });\n\n      next();\n    };\n  };\n\n  // Middleware to log specific actions with custom data\n  logCustomAction = (\n    tableName: string,\n    action: 'INSERT' | 'UPDATE' | 'DELETE',\n    dataExtractor: (req: Request, res: Response) => { recordId: string; oldData?: any; newData?: any }\n  ) => {\n    return async (req: AuditableRequest, res: Response, next: NextFunction) => {\n      const originalSend = res.send;\n\n      res.send = function(body: any) {\n        return originalSend.call(this, body);\n      };\n\n      res.on('finish', async () => {\n        try {\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            const userId = req.user?.userId;\n            if (!userId) return;\n\n            const { recordId, oldData, newData } = dataExtractor(req, res);\n\n            await this.auditService.logUserAction(\n              userId,\n              tableName,\n              recordId,\n              action,\n              oldData,\n              newData\n            );\n          }\n        } catch (error) {\n          console.error('Audit logging error:', error);\n        }\n      });\n\n      next();\n    };\n  };\n\n  // Middleware to log system actions (no user context)\n  logSystemAction = (\n    tableName: string,\n    action: 'INSERT' | 'UPDATE' | 'DELETE',\n    dataExtractor: (req: Request, res: Response) => { recordId: string; oldData?: any; newData?: any }\n  ) => {\n    return async (req: Request, res: Response, next: NextFunction) => {\n      const originalSend = res.send;\n\n      res.send = function(body: any) {\n        return originalSend.call(this, body);\n      };\n\n      res.on('finish', async () => {\n        try {\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            const { recordId, oldData, newData } = dataExtractor(req, res);\n\n            await this.auditService.logSystemAction(\n              tableName,\n              recordId,\n              action,\n              oldData,\n              newData\n            );\n          }\n        } catch (error) {\n          console.error('Audit logging error:', error);\n        }\n      });\n\n      next();\n    };\n  };\n}\n\n// Create singleton instance\nexport const auditMiddleware = new AuditMiddleware();\n\n// Helper function to create audit middleware for common patterns\nexport const createAuditMiddleware = (tableName: string) => {\n  return {\n    logCreate: auditMiddleware.logUserAction(tableName, (req) => req.body.id || 'new'),\n    logUpdate: auditMiddleware.logUserAction(tableName, (req) => req.params.id),\n    logDelete: auditMiddleware.logUserAction(tableName, (req) => req.params.id),\n    logCustom: (action: 'INSERT' | 'UPDATE' | 'DELETE', dataExtractor: (req: Request, res: Response) => { recordId: string; oldData?: any; newData?: any }) =>\n      auditMiddleware.logCustomAction(tableName, action, dataExtractor)\n  };\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0c5bb4b18f0582d143368483e676747c6c67c411"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_tu8my5sow = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_tu8my5sow();
cov_tu8my5sow().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_tu8my5sow().s[1]++;
exports.createAuditMiddleware = exports.auditMiddleware = exports.AuditMiddleware = void 0;
const auditService_1 =
/* istanbul ignore next */
(cov_tu8my5sow().s[2]++, require("../../services/audit/auditService"));
class AuditMiddleware {
  constructor() {
    /* istanbul ignore next */
    cov_tu8my5sow().f[0]++;
    cov_tu8my5sow().s[3]++;
    // Middleware to log user actions
    this.logUserAction = (tableName, recordIdExtractor) => {
      /* istanbul ignore next */
      cov_tu8my5sow().f[1]++;
      cov_tu8my5sow().s[4]++;
      return async (req, res, next) => {
        /* istanbul ignore next */
        cov_tu8my5sow().f[2]++;
        const originalSend =
        /* istanbul ignore next */
        (cov_tu8my5sow().s[5]++, res.send);
        // Capture response body
        /* istanbul ignore next */
        cov_tu8my5sow().s[6]++;
        res.send = function (body) {
          /* istanbul ignore next */
          cov_tu8my5sow().f[3]++;
          cov_tu8my5sow().s[7]++;
          return originalSend.call(this, body);
        };
        /* istanbul ignore next */
        cov_tu8my5sow().s[8]++;
        res.on('finish', async () => {
          /* istanbul ignore next */
          cov_tu8my5sow().f[4]++;
          cov_tu8my5sow().s[9]++;
          try {
            /* istanbul ignore next */
            cov_tu8my5sow().s[10]++;
            // Only log successful operations
            if (
            /* istanbul ignore next */
            (cov_tu8my5sow().b[1][0]++, res.statusCode >= 200) &&
            /* istanbul ignore next */
            (cov_tu8my5sow().b[1][1]++, res.statusCode < 300)) {
              /* istanbul ignore next */
              cov_tu8my5sow().b[0][0]++;
              const userId =
              /* istanbul ignore next */
              (cov_tu8my5sow().s[11]++, req.user?.userId);
              /* istanbul ignore next */
              cov_tu8my5sow().s[12]++;
              if (!userId) {
                /* istanbul ignore next */
                cov_tu8my5sow().b[2][0]++;
                cov_tu8my5sow().s[13]++;
                return;
              } else
              /* istanbul ignore next */
              {
                cov_tu8my5sow().b[2][1]++;
              }
              let recordId;
              /* istanbul ignore next */
              cov_tu8my5sow().s[14]++;
              if (recordIdExtractor) {
                /* istanbul ignore next */
                cov_tu8my5sow().b[3][0]++;
                cov_tu8my5sow().s[15]++;
                recordId = recordIdExtractor(req);
              } else {
                /* istanbul ignore next */
                cov_tu8my5sow().b[3][1]++;
                cov_tu8my5sow().s[16]++;
                // Default: try to get ID from params
                recordId =
                /* istanbul ignore next */
                (cov_tu8my5sow().b[4][0]++, req.params.id) ||
                /* istanbul ignore next */
                (cov_tu8my5sow().b[4][1]++, req.params.recordId) ||
                /* istanbul ignore next */
                (cov_tu8my5sow().b[4][2]++, 'unknown');
              }
              let action =
              /* istanbul ignore next */
              (cov_tu8my5sow().s[17]++, 'UPDATE');
              /* istanbul ignore next */
              cov_tu8my5sow().s[18]++;
              if (req.method === 'POST') {
                /* istanbul ignore next */
                cov_tu8my5sow().b[5][0]++;
                cov_tu8my5sow().s[19]++;
                action = 'INSERT';
              } else {
                /* istanbul ignore next */
                cov_tu8my5sow().b[5][1]++;
                cov_tu8my5sow().s[20]++;
                if (req.method === 'DELETE') {
                  /* istanbul ignore next */
                  cov_tu8my5sow().b[6][0]++;
                  cov_tu8my5sow().s[21]++;
                  action = 'DELETE';
                } else
                /* istanbul ignore next */
                {
                  cov_tu8my5sow().b[6][1]++;
                }
              }
              // Extract old and new data from request/response
              let oldData =
              /* istanbul ignore next */
              (cov_tu8my5sow().s[22]++, null);
              let newData =
              /* istanbul ignore next */
              (cov_tu8my5sow().s[23]++, null);
              /* istanbul ignore next */
              cov_tu8my5sow().s[24]++;
              if (
              /* istanbul ignore next */
              (cov_tu8my5sow().b[8][0]++, action === 'UPDATE') &&
              /* istanbul ignore next */
              (cov_tu8my5sow().b[8][1]++, req.body)) {
                /* istanbul ignore next */
                cov_tu8my5sow().b[7][0]++;
                cov_tu8my5sow().s[25]++;
                newData = req.body;
                // For updates, we might want to fetch old data
                // This would require additional database queries
              } else {
                /* istanbul ignore next */
                cov_tu8my5sow().b[7][1]++;
                cov_tu8my5sow().s[26]++;
                if (
                /* istanbul ignore next */
                (cov_tu8my5sow().b[10][0]++, action === 'INSERT') &&
                /* istanbul ignore next */
                (cov_tu8my5sow().b[10][1]++, req.body)) {
                  /* istanbul ignore next */
                  cov_tu8my5sow().b[9][0]++;
                  cov_tu8my5sow().s[27]++;
                  newData = req.body;
                } else {
                  /* istanbul ignore next */
                  cov_tu8my5sow().b[9][1]++;
                  cov_tu8my5sow().s[28]++;
                  if (action === 'DELETE') {
                    /* istanbul ignore next */
                    cov_tu8my5sow().b[11][0]++;
                  } // For deletes, we might want to fetch the record being deleted
                  // This would require additional database queries
                  else
                  /* istanbul ignore next */
                  {
                    cov_tu8my5sow().b[11][1]++;
                  }
                }
              }
              /* istanbul ignore next */
              cov_tu8my5sow().s[29]++;
              await this.auditService.logUserAction(userId, tableName, recordId, action, oldData, newData);
            } else
            /* istanbul ignore next */
            {
              cov_tu8my5sow().b[0][1]++;
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_tu8my5sow().s[30]++;
            // Don't let audit logging errors break the main flow
            console.error('Audit logging error:', error);
          }
        });
        /* istanbul ignore next */
        cov_tu8my5sow().s[31]++;
        next();
      };
    };
    // Middleware to log specific actions with custom data
    /* istanbul ignore next */
    cov_tu8my5sow().s[32]++;
    this.logCustomAction = (tableName, action, dataExtractor) => {
      /* istanbul ignore next */
      cov_tu8my5sow().f[5]++;
      cov_tu8my5sow().s[33]++;
      return async (req, res, next) => {
        /* istanbul ignore next */
        cov_tu8my5sow().f[6]++;
        const originalSend =
        /* istanbul ignore next */
        (cov_tu8my5sow().s[34]++, res.send);
        /* istanbul ignore next */
        cov_tu8my5sow().s[35]++;
        res.send = function (body) {
          /* istanbul ignore next */
          cov_tu8my5sow().f[7]++;
          cov_tu8my5sow().s[36]++;
          return originalSend.call(this, body);
        };
        /* istanbul ignore next */
        cov_tu8my5sow().s[37]++;
        res.on('finish', async () => {
          /* istanbul ignore next */
          cov_tu8my5sow().f[8]++;
          cov_tu8my5sow().s[38]++;
          try {
            /* istanbul ignore next */
            cov_tu8my5sow().s[39]++;
            if (
            /* istanbul ignore next */
            (cov_tu8my5sow().b[13][0]++, res.statusCode >= 200) &&
            /* istanbul ignore next */
            (cov_tu8my5sow().b[13][1]++, res.statusCode < 300)) {
              /* istanbul ignore next */
              cov_tu8my5sow().b[12][0]++;
              const userId =
              /* istanbul ignore next */
              (cov_tu8my5sow().s[40]++, req.user?.userId);
              /* istanbul ignore next */
              cov_tu8my5sow().s[41]++;
              if (!userId) {
                /* istanbul ignore next */
                cov_tu8my5sow().b[14][0]++;
                cov_tu8my5sow().s[42]++;
                return;
              } else
              /* istanbul ignore next */
              {
                cov_tu8my5sow().b[14][1]++;
              }
              const {
                recordId,
                oldData,
                newData
              } =
              /* istanbul ignore next */
              (cov_tu8my5sow().s[43]++, dataExtractor(req, res));
              /* istanbul ignore next */
              cov_tu8my5sow().s[44]++;
              await this.auditService.logUserAction(userId, tableName, recordId, action, oldData, newData);
            } else
            /* istanbul ignore next */
            {
              cov_tu8my5sow().b[12][1]++;
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_tu8my5sow().s[45]++;
            console.error('Audit logging error:', error);
          }
        });
        /* istanbul ignore next */
        cov_tu8my5sow().s[46]++;
        next();
      };
    };
    // Middleware to log system actions (no user context)
    /* istanbul ignore next */
    cov_tu8my5sow().s[47]++;
    this.logSystemAction = (tableName, action, dataExtractor) => {
      /* istanbul ignore next */
      cov_tu8my5sow().f[9]++;
      cov_tu8my5sow().s[48]++;
      return async (req, res, next) => {
        /* istanbul ignore next */
        cov_tu8my5sow().f[10]++;
        const originalSend =
        /* istanbul ignore next */
        (cov_tu8my5sow().s[49]++, res.send);
        /* istanbul ignore next */
        cov_tu8my5sow().s[50]++;
        res.send = function (body) {
          /* istanbul ignore next */
          cov_tu8my5sow().f[11]++;
          cov_tu8my5sow().s[51]++;
          return originalSend.call(this, body);
        };
        /* istanbul ignore next */
        cov_tu8my5sow().s[52]++;
        res.on('finish', async () => {
          /* istanbul ignore next */
          cov_tu8my5sow().f[12]++;
          cov_tu8my5sow().s[53]++;
          try {
            /* istanbul ignore next */
            cov_tu8my5sow().s[54]++;
            if (
            /* istanbul ignore next */
            (cov_tu8my5sow().b[16][0]++, res.statusCode >= 200) &&
            /* istanbul ignore next */
            (cov_tu8my5sow().b[16][1]++, res.statusCode < 300)) {
              /* istanbul ignore next */
              cov_tu8my5sow().b[15][0]++;
              const {
                recordId,
                oldData,
                newData
              } =
              /* istanbul ignore next */
              (cov_tu8my5sow().s[55]++, dataExtractor(req, res));
              /* istanbul ignore next */
              cov_tu8my5sow().s[56]++;
              await this.auditService.logSystemAction(tableName, recordId, action, oldData, newData);
            } else
            /* istanbul ignore next */
            {
              cov_tu8my5sow().b[15][1]++;
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_tu8my5sow().s[57]++;
            console.error('Audit logging error:', error);
          }
        });
        /* istanbul ignore next */
        cov_tu8my5sow().s[58]++;
        next();
      };
    };
    /* istanbul ignore next */
    cov_tu8my5sow().s[59]++;
    this.auditService = new auditService_1.AuditService();
  }
}
/* istanbul ignore next */
cov_tu8my5sow().s[60]++;
exports.AuditMiddleware = AuditMiddleware;
// Create singleton instance
/* istanbul ignore next */
cov_tu8my5sow().s[61]++;
exports.auditMiddleware = new AuditMiddleware();
// Helper function to create audit middleware for common patterns
/* istanbul ignore next */
cov_tu8my5sow().s[62]++;
const createAuditMiddleware = tableName => {
  /* istanbul ignore next */
  cov_tu8my5sow().f[13]++;
  cov_tu8my5sow().s[63]++;
  return {
    logCreate: exports.auditMiddleware.logUserAction(tableName, req => {
      /* istanbul ignore next */
      cov_tu8my5sow().f[14]++;
      cov_tu8my5sow().s[64]++;
      return /* istanbul ignore next */(cov_tu8my5sow().b[17][0]++, req.body.id) ||
      /* istanbul ignore next */
      (cov_tu8my5sow().b[17][1]++, 'new');
    }),
    logUpdate: exports.auditMiddleware.logUserAction(tableName, req => {
      /* istanbul ignore next */
      cov_tu8my5sow().f[15]++;
      cov_tu8my5sow().s[65]++;
      return req.params.id;
    }),
    logDelete: exports.auditMiddleware.logUserAction(tableName, req => {
      /* istanbul ignore next */
      cov_tu8my5sow().f[16]++;
      cov_tu8my5sow().s[66]++;
      return req.params.id;
    }),
    logCustom: (action, dataExtractor) => {
      /* istanbul ignore next */
      cov_tu8my5sow().f[17]++;
      cov_tu8my5sow().s[67]++;
      return exports.auditMiddleware.logCustomAction(tableName, action, dataExtractor);
    }
  };
};
/* istanbul ignore next */
cov_tu8my5sow().s[68]++;
exports.createAuditMiddleware = createAuditMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,