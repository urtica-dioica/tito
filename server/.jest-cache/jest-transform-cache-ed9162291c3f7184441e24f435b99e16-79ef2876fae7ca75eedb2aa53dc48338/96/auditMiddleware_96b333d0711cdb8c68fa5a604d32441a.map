{"version":3,"names":["auditService_1","cov_tu8my5sow","s","require","AuditMiddleware","constructor","f","logUserAction","tableName","recordIdExtractor","req","res","next","originalSend","send","body","call","on","b","statusCode","userId","user","recordId","params","id","action","method","oldData","newData","auditService","error","console","logCustomAction","dataExtractor","logSystemAction","AuditService","exports","auditMiddleware","createAuditMiddleware","logCreate","logUpdate","logDelete","logCustom"],"sources":["/home/kim/tito/server/src/middleware/audit/auditMiddleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { AuditService } from '../../services/audit/auditService';\n\nexport interface AuditableRequest extends Request {\n  user?: {\n    userId: string;\n    email: string;\n    role: string;\n    tokenVersion: number;\n  };\n}\n\nexport class AuditMiddleware {\n  private auditService: AuditService;\n\n  constructor() {\n    this.auditService = new AuditService();\n  }\n\n  // Middleware to log user actions\n  logUserAction = (tableName: string, recordIdExtractor?: (req: Request) => string) => {\n    return async (req: AuditableRequest, res: Response, next: NextFunction) => {\n      const originalSend = res.send;\n\n      // Capture response body\n      res.send = function(body: any) {\n        return originalSend.call(this, body);\n      };\n\n      res.on('finish', async () => {\n        try {\n          // Only log successful operations\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            const userId = req.user?.userId;\n            if (!userId) return;\n\n            let recordId: string;\n            if (recordIdExtractor) {\n              recordId = recordIdExtractor(req);\n            } else {\n              // Default: try to get ID from params\n              recordId = req.params.id || req.params.recordId || 'unknown';\n            }\n\n            let action: 'INSERT' | 'UPDATE' | 'DELETE' = 'UPDATE';\n            if (req.method === 'POST') {\n              action = 'INSERT';\n            } else if (req.method === 'DELETE') {\n              action = 'DELETE';\n            }\n\n            // Extract old and new data from request/response\n            let oldData: any = null;\n            let newData: any = null;\n\n            if (action === 'UPDATE' && req.body) {\n              newData = req.body;\n              // For updates, we might want to fetch old data\n              // This would require additional database queries\n            } else if (action === 'INSERT' && req.body) {\n              newData = req.body;\n            } else if (action === 'DELETE') {\n              // For deletes, we might want to fetch the record being deleted\n              // This would require additional database queries\n            }\n\n            await this.auditService.logUserAction(\n              userId,\n              tableName,\n              recordId,\n              action,\n              oldData,\n              newData\n            );\n          }\n        } catch (error) {\n          // Don't let audit logging errors break the main flow\n          console.error('Audit logging error:', error);\n        }\n      });\n\n      next();\n    };\n  };\n\n  // Middleware to log specific actions with custom data\n  logCustomAction = (\n    tableName: string,\n    action: 'INSERT' | 'UPDATE' | 'DELETE',\n    dataExtractor: (req: Request, res: Response) => { recordId: string; oldData?: any; newData?: any }\n  ) => {\n    return async (req: AuditableRequest, res: Response, next: NextFunction) => {\n      const originalSend = res.send;\n\n      res.send = function(body: any) {\n        return originalSend.call(this, body);\n      };\n\n      res.on('finish', async () => {\n        try {\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            const userId = req.user?.userId;\n            if (!userId) return;\n\n            const { recordId, oldData, newData } = dataExtractor(req, res);\n\n            await this.auditService.logUserAction(\n              userId,\n              tableName,\n              recordId,\n              action,\n              oldData,\n              newData\n            );\n          }\n        } catch (error) {\n          console.error('Audit logging error:', error);\n        }\n      });\n\n      next();\n    };\n  };\n\n  // Middleware to log system actions (no user context)\n  logSystemAction = (\n    tableName: string,\n    action: 'INSERT' | 'UPDATE' | 'DELETE',\n    dataExtractor: (req: Request, res: Response) => { recordId: string; oldData?: any; newData?: any }\n  ) => {\n    return async (req: Request, res: Response, next: NextFunction) => {\n      const originalSend = res.send;\n\n      res.send = function(body: any) {\n        return originalSend.call(this, body);\n      };\n\n      res.on('finish', async () => {\n        try {\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            const { recordId, oldData, newData } = dataExtractor(req, res);\n\n            await this.auditService.logSystemAction(\n              tableName,\n              recordId,\n              action,\n              oldData,\n              newData\n            );\n          }\n        } catch (error) {\n          console.error('Audit logging error:', error);\n        }\n      });\n\n      next();\n    };\n  };\n}\n\n// Create singleton instance\nexport const auditMiddleware = new AuditMiddleware();\n\n// Helper function to create audit middleware for common patterns\nexport const createAuditMiddleware = (tableName: string) => {\n  return {\n    logCreate: auditMiddleware.logUserAction(tableName, (req) => req.body.id || 'new'),\n    logUpdate: auditMiddleware.logUserAction(tableName, (req) => req.params.id),\n    logDelete: auditMiddleware.logUserAction(tableName, (req) => req.params.id),\n    logCustom: (action: 'INSERT' | 'UPDATE' | 'DELETE', dataExtractor: (req: Request, res: Response) => { recordId: string; oldData?: any; newData?: any }) =>\n      auditMiddleware.logCustomAction(tableName, action, dataExtractor)\n  };\n};"],"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","ignoreList":[]}