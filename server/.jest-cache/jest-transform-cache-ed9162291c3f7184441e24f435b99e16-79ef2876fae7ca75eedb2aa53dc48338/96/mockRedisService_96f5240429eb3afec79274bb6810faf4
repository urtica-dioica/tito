6b7bed6c0b64e519dd3983208ef6e619
"use strict";
/**
 * Mock Redis Service for Testing
 *
 * This mock service provides the same interface as the real Redis service
 * but stores data in memory instead of connecting to Redis.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockRedisService = exports.MockRedisService = void 0;
class MockRedisService {
    constructor() {
        this.data = {};
        this.isConnected = true;
        // Simulate connection delay
        this.connect();
    }
    async connect() {
        this.isConnected = true;
    }
    async disconnect() {
        this.isConnected = false;
    }
    async isRedisConnected() {
        return this.isConnected;
    }
    async getCache(key) {
        if (!this.isConnected) {
            throw new Error('Redis client is not connected');
        }
        const item = this.data[key];
        if (!item) {
            return null;
        }
        // Check if expired
        if (item.expiresAt && Date.now() > item.expiresAt) {
            delete this.data[key];
            return null;
        }
        return item.value;
    }
    async setCache(key, value, ttlSeconds) {
        if (!this.isConnected) {
            throw new Error('Redis client is not connected');
        }
        const expiresAt = ttlSeconds ? Date.now() + (ttlSeconds * 1000) : undefined;
        this.data[key] = {
            value,
            ttl: ttlSeconds,
            expiresAt
        };
    }
    async deleteCache(key) {
        if (!this.isConnected) {
            throw new Error('Redis client is not connected');
        }
        delete this.data[key];
    }
    async flushDb() {
        if (!this.isConnected) {
            throw new Error('Redis client is not connected');
        }
        this.data = {};
    }
    async exists(key) {
        if (!this.isConnected) {
            throw new Error('Redis client is not connected');
        }
        const item = this.data[key];
        if (!item) {
            return false;
        }
        // Check if expired
        if (item.expiresAt && Date.now() > item.expiresAt) {
            delete this.data[key];
            return false;
        }
        return true;
    }
    async keys(pattern) {
        if (!this.isConnected) {
            throw new Error('Redis client is not connected');
        }
        const regex = new RegExp(pattern.replace(/\*/g, '.*'));
        return Object.keys(this.data).filter(key => regex.test(key));
    }
    async expire(key, ttlSeconds) {
        if (!this.isConnected) {
            throw new Error('Redis client is not connected');
        }
        const item = this.data[key];
        if (!item) {
            return false;
        }
        item.ttl = ttlSeconds;
        item.expiresAt = Date.now() + (ttlSeconds * 1000);
        return true;
    }
    async ttl(key) {
        if (!this.isConnected) {
            throw new Error('Redis client is not connected');
        }
        const item = this.data[key];
        if (!item || !item.expiresAt) {
            return -1; // No expiration
        }
        const remaining = Math.ceil((item.expiresAt - Date.now()) / 1000);
        return remaining > 0 ? remaining : -2; // Expired
    }
    // Test utilities
    getData() {
        return { ...this.data };
    }
    clearData() {
        this.data = {};
    }
    setConnected(connected) {
        this.isConnected = connected;
    }
    // Simulate Redis connection issues for testing
    simulateConnectionError() {
        this.isConnected = false;
    }
    simulateConnectionRecovery() {
        this.isConnected = true;
    }
}
exports.MockRedisService = MockRedisService;
// Singleton instance for tests
exports.mockRedisService = new MockRedisService();
// Export for use in tests
exports.default = exports.mockRedisService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,