{"file":"/home/kim/tito/server/tests/utils/mockRedisService.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/utils/mockRedisService.ts"],"sourcesContent":["/**\n * Mock Redis Service for Testing\n * \n * This mock service provides the same interface as the real Redis service\n * but stores data in memory instead of connecting to Redis.\n */\n\nexport interface MockRedisData {\n  [key: string]: {\n    value: string;\n    ttl?: number;\n    expiresAt?: number;\n  };\n}\n\nexport class MockRedisService {\n  private data: MockRedisData = {};\n  private isConnected: boolean = true;\n\n  constructor() {\n    // Simulate connection delay\n    this.connect();\n  }\n\n  async connect(): Promise<void> {\n    this.isConnected = true;\n  }\n\n  async disconnect(): Promise<void> {\n    this.isConnected = false;\n  }\n\n  async isRedisConnected(): Promise<boolean> {\n    return this.isConnected;\n  }\n\n  async getCache(key: string): Promise<string | null> {\n    if (!this.isConnected) {\n      throw new Error('Redis client is not connected');\n    }\n\n    const item = this.data[key];\n    if (!item) {\n      return null;\n    }\n\n    // Check if expired\n    if (item.expiresAt && Date.now() > item.expiresAt) {\n      delete this.data[key];\n      return null;\n    }\n\n    return item.value;\n  }\n\n  async setCache(key: string, value: string, ttlSeconds?: number): Promise<void> {\n    if (!this.isConnected) {\n      throw new Error('Redis client is not connected');\n    }\n\n    const expiresAt = ttlSeconds ? Date.now() + (ttlSeconds * 1000) : undefined;\n    \n    this.data[key] = {\n      value,\n      ttl: ttlSeconds,\n      expiresAt\n    };\n  }\n\n  async deleteCache(key: string): Promise<void> {\n    if (!this.isConnected) {\n      throw new Error('Redis client is not connected');\n    }\n\n    delete this.data[key];\n  }\n\n  async flushDb(): Promise<void> {\n    if (!this.isConnected) {\n      throw new Error('Redis client is not connected');\n    }\n\n    this.data = {};\n  }\n\n  async exists(key: string): Promise<boolean> {\n    if (!this.isConnected) {\n      throw new Error('Redis client is not connected');\n    }\n\n    const item = this.data[key];\n    if (!item) {\n      return false;\n    }\n\n    // Check if expired\n    if (item.expiresAt && Date.now() > item.expiresAt) {\n      delete this.data[key];\n      return false;\n    }\n\n    return true;\n  }\n\n  async keys(pattern: string): Promise<string[]> {\n    if (!this.isConnected) {\n      throw new Error('Redis client is not connected');\n    }\n\n    const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\n    return Object.keys(this.data).filter(key => regex.test(key));\n  }\n\n  async expire(key: string, ttlSeconds: number): Promise<boolean> {\n    if (!this.isConnected) {\n      throw new Error('Redis client is not connected');\n    }\n\n    const item = this.data[key];\n    if (!item) {\n      return false;\n    }\n\n    item.ttl = ttlSeconds;\n    item.expiresAt = Date.now() + (ttlSeconds * 1000);\n    return true;\n  }\n\n  async ttl(key: string): Promise<number> {\n    if (!this.isConnected) {\n      throw new Error('Redis client is not connected');\n    }\n\n    const item = this.data[key];\n    if (!item || !item.expiresAt) {\n      return -1; // No expiration\n    }\n\n    const remaining = Math.ceil((item.expiresAt - Date.now()) / 1000);\n    return remaining > 0 ? remaining : -2; // Expired\n  }\n\n  // Test utilities\n  getData(): MockRedisData {\n    return { ...this.data };\n  }\n\n  clearData(): void {\n    this.data = {};\n  }\n\n  setConnected(connected: boolean): void {\n    this.isConnected = connected;\n  }\n\n  // Simulate Redis connection issues for testing\n  simulateConnectionError(): void {\n    this.isConnected = false;\n  }\n\n  simulateConnectionRecovery(): void {\n    this.isConnected = true;\n  }\n}\n\n// Singleton instance for tests\nexport const mockRedisService = new MockRedisService();\n\n// Export for use in tests\nexport default mockRedisService;\n"],"version":3}