{"version":3,"names":["database_1","cov_1ydtkuxzgt","s","require","AttendanceRecordModel","createAttendanceRecord","data","f","query","result","getPool","employeeId","date","b","overallStatus","rows","findById","id","length","findByEmployeeAndDate","updateAttendanceRecord","updateFields","updateValues","paramIndex","undefined","push","join","listAttendanceRecords","params","page","limit","departmentId","startDate","endDate","status","search","sortBy","sortOrder","offset","whereConditions","queryParams","whereClause","countQuery","countResult","total","parseInt","dataQuery","toUpperCase","records","totalPages","Math","ceil","getAttendanceRecordWithSessions","record","sessionsQuery","sessionsResult","sessions","getEmployeeAttendanceStats","stats","totalDays","total_days","presentDays","present_days","lateDays","late_days","absentDays","absent_days","partialDays","partial_days","totalHours","parseFloat","total_hours","deleteAttendanceRecord","rowCount","getAttendanceRecordCount","count","exports","attendanceRecordModel"],"sources":["/home/kim/tito/server/src/models/attendance/AttendanceRecord.ts"],"sourcesContent":["import { getPool } from '../../config/database';\n\nexport interface AttendanceRecord {\n  id: string;\n  employeeId: string;\n  date: Date;\n  overallStatus: 'present' | 'late' | 'absent' | 'partial';\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface AttendanceRecordWithEmployee extends AttendanceRecord {\n  employeeCode: string;\n  employeeName: string;\n  departmentName: string | null;\n}\n\nexport interface CreateAttendanceRecordData {\n  employeeId: string;\n  date: Date;\n  overallStatus?: 'present' | 'late' | 'absent' | 'partial';\n}\n\nexport interface UpdateAttendanceRecordData {\n  overallStatus?: 'present' | 'late' | 'absent' | 'partial';\n}\n\nexport interface AttendanceRecordListParams {\n  page?: number | undefined;\n  limit?: number | undefined;\n  employeeId?: string | undefined;\n  departmentId?: string | undefined;\n  startDate?: Date | undefined;\n  endDate?: Date | undefined;\n  status?: 'present' | 'late' | 'absent' | 'partial' | undefined;\n  search?: string | undefined;\n  sortBy?: string | undefined;\n  sortOrder?: 'asc' | 'desc' | undefined;\n}\n\nexport class AttendanceRecordModel {\n  /**\n   * Create a new attendance record\n   */\n  async createAttendanceRecord(data: CreateAttendanceRecordData): Promise<AttendanceRecord> {\n    const query = `\n      INSERT INTO attendance_records (employee_id, date, overall_status)\n      VALUES ($1, $2, $3)\n      RETURNING \n        id,\n        employee_id as \"employeeId\",\n        date,\n        overall_status as \"overallStatus\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n    `;\n\n    const result = await getPool().query(query, [\n      data.employeeId,\n      data.date,\n      data.overallStatus || 'absent'\n    ]);\n\n    return result.rows[0];\n  }\n\n  /**\n   * Get attendance record by ID\n   */\n  async findById(id: string): Promise<AttendanceRecord | null> {\n    const query = `\n      SELECT \n        id,\n        employee_id as \"employeeId\",\n        date,\n        overall_status as \"overallStatus\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM attendance_records\n      WHERE id = $1\n    `;\n\n    const result = await getPool().query(query, [id]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Get attendance record by employee ID and date\n   */\n  async findByEmployeeAndDate(employeeId: string, date: Date): Promise<AttendanceRecord | null> {\n    const query = `\n      SELECT \n        id,\n        employee_id as \"employeeId\",\n        date,\n        overall_status as \"overallStatus\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM attendance_records\n      WHERE employee_id = $1 AND date = $2\n    `;\n\n    const result = await getPool().query(query, [employeeId, date]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Update attendance record\n   */\n  async updateAttendanceRecord(id: string, data: UpdateAttendanceRecordData): Promise<AttendanceRecord | null> {\n    const updateFields: string[] = [];\n    const updateValues: any[] = [];\n    let paramIndex = 1;\n\n    if (data.overallStatus !== undefined) {\n      updateFields.push(`overall_status = $${paramIndex}`);\n      updateValues.push(data.overallStatus);\n      paramIndex++;\n    }\n\n    if (updateFields.length === 0) {\n      return this.findById(id);\n    }\n\n    updateFields.push(`updated_at = CURRENT_TIMESTAMP`);\n    updateValues.push(id);\n\n    const query = `\n      UPDATE attendance_records \n      SET ${updateFields.join(', ')}\n      WHERE id = $${paramIndex}\n      RETURNING \n        id,\n        employee_id as \"employeeId\",\n        date,\n        overall_status as \"overallStatus\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n    `;\n\n    const result = await getPool().query(query, updateValues);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * List attendance records with filtering and pagination\n   */\n  async listAttendanceRecords(params: AttendanceRecordListParams = {}): Promise<{\n    records: AttendanceRecordWithEmployee[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      employeeId,\n      departmentId,\n      startDate,\n      endDate,\n      status,\n      search,\n      sortBy = 'date',\n      sortOrder = 'desc'\n    } = params;\n\n    const offset = (page - 1) * limit;\n    const whereConditions: string[] = [];\n    const queryParams: any[] = [];\n    let paramIndex = 1;\n\n    // Build WHERE conditions\n    if (employeeId) {\n      whereConditions.push(`ar.employee_id = $${paramIndex}`);\n      queryParams.push(employeeId);\n      paramIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`e.department_id = $${paramIndex}`);\n      queryParams.push(departmentId);\n      paramIndex++;\n    }\n\n    if (startDate) {\n      whereConditions.push(`ar.date >= $${paramIndex}`);\n      queryParams.push(startDate);\n      paramIndex++;\n    }\n\n    if (endDate) {\n      whereConditions.push(`ar.date <= $${paramIndex}`);\n      queryParams.push(endDate);\n      paramIndex++;\n    }\n\n    if (status) {\n      whereConditions.push(`ar.overall_status = $${paramIndex}`);\n      queryParams.push(status);\n      paramIndex++;\n    }\n\n    if (search) {\n      whereConditions.push(`(CONCAT(u.first_name, ' ', u.last_name) ILIKE $${paramIndex} OR e.employee_id ILIKE $${paramIndex})`);\n      queryParams.push(`%${search}%`);\n      paramIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM attendance_records ar\n      JOIN employees e ON ar.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n    `;\n\n    const countResult = await getPool().query(countQuery, queryParams);\n    const total = parseInt(countResult.rows[0].total);\n\n    // Data query\n    const dataQuery = `\n      SELECT \n        ar.id,\n        ar.employee_id as \"employeeId\",\n        ar.date,\n        ar.overall_status as \"overallStatus\",\n        ar.created_at as \"createdAt\",\n        ar.updated_at as \"updatedAt\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\"\n      FROM attendance_records ar\n      JOIN employees e ON ar.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n      ORDER BY ar.${sortBy} ${sortOrder.toUpperCase()}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    queryParams.push(limit, offset);\n    const result = await getPool().query(dataQuery, queryParams);\n\n    return {\n      records: result.rows,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  /**\n   * Get attendance record with sessions\n   */\n  async getAttendanceRecordWithSessions(id: string): Promise<AttendanceRecordWithEmployee & { sessions: any[] } | null> {\n    const query = `\n      SELECT \n        ar.id,\n        ar.employee_id as \"employeeId\",\n        ar.date,\n        ar.overall_status as \"overallStatus\",\n        ar.created_at as \"createdAt\",\n        ar.updated_at as \"updatedAt\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\"\n      FROM attendance_records ar\n      JOIN employees e ON ar.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE ar.id = $1\n    `;\n\n    const result = await getPool().query(query, [id]);\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n\n    const record = result.rows[0];\n\n    // Get sessions for this record\n    const sessionsQuery = `\n      SELECT \n        id,\n        session_type as \"sessionType\",\n        timestamp,\n        selfie_image_path as \"selfieImagePath\",\n        qr_code_hash as \"qrCodeHash\",\n        calculated_hours as \"calculatedHours\",\n        created_at as \"createdAt\"\n      FROM attendance_sessions\n      WHERE attendance_record_id = $1\n      ORDER BY timestamp\n    `;\n\n    const sessionsResult = await getPool().query(sessionsQuery, [id]);\n    record.sessions = sessionsResult.rows;\n\n    return record;\n  }\n\n  /**\n   * Get attendance statistics for an employee\n   */\n  async getEmployeeAttendanceStats(employeeId: string, startDate: Date, endDate: Date): Promise<{\n    totalDays: number;\n    presentDays: number;\n    lateDays: number;\n    absentDays: number;\n    partialDays: number;\n    totalHours: number;\n  }> {\n    const query = `\n      SELECT \n        COUNT(*) as total_days,\n        COUNT(*) FILTER (WHERE overall_status = 'present') as present_days,\n        COUNT(*) FILTER (WHERE overall_status = 'late') as late_days,\n        COUNT(*) FILTER (WHERE overall_status = 'absent') as absent_days,\n        COUNT(*) FILTER (WHERE overall_status = 'partial') as partial_days,\n        COALESCE(SUM(\n          (SELECT SUM(calculated_hours) \n           FROM attendance_sessions \n           WHERE attendance_record_id = ar.id)\n        ), 0) as total_hours\n      FROM attendance_records ar\n      WHERE employee_id = $1 \n        AND date >= $2 \n        AND date <= $3\n    `;\n\n    const result = await getPool().query(query, [employeeId, startDate, endDate]);\n    const stats = result.rows[0];\n\n    return {\n      totalDays: parseInt(stats.total_days) || 0,\n      presentDays: parseInt(stats.present_days) || 0,\n      lateDays: parseInt(stats.late_days) || 0,\n      absentDays: parseInt(stats.absent_days) || 0,\n      partialDays: parseInt(stats.partial_days) || 0,\n      totalHours: parseFloat(stats.total_hours) || 0\n    };\n  }\n\n  /**\n   * Delete attendance record\n   */\n  async deleteAttendanceRecord(id: string): Promise<boolean> {\n    const query = 'DELETE FROM attendance_records WHERE id = $1';\n    const result = await getPool().query(query, [id]);\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  /**\n   * Get attendance record count\n   */\n  async getAttendanceRecordCount(): Promise<number> {\n    const query = 'SELECT COUNT(*) as count FROM attendance_records';\n    const result = await getPool().query(query);\n    return parseInt(result.rows[0].count);\n  }\n}\n\nexport const attendanceRecordModel = new AttendanceRecordModel();"],"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","ignoreList":[]}