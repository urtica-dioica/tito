4d98951820c80f8666f362017c3679f1
"use strict";

/* istanbul ignore next */
function cov_cf7v579xf() {
  var path = "/home/kim/tito/server/src/services/hr/departmentService.ts";
  var hash = "388cae7670986e1e5fc711aaf305db97eadb5e58";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/hr/departmentService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 35
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 58
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 48
        }
      },
      "7": {
        start: {
          line: 10,
          column: 23
        },
        end: {
          line: 10,
          column: 55
        }
      },
      "8": {
        start: {
          line: 11,
          column: 23
        },
        end: {
          line: 11,
          column: 55
        }
      },
      "9": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 63
        }
      },
      "10": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 51
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 66
        }
      },
      "12": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 48
        }
      },
      "13": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "14": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "15": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "16": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 40
        }
      },
      "17": {
        start: {
          line: 28,
          column: 39
        },
        end: {
          line: 28,
          column: 87
        }
      },
      "18": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 31,
          column: 13
        }
      },
      "19": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 66
        }
      },
      "20": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "21": {
        start: {
          line: 34,
          column: 39
        },
        end: {
          line: 34,
          column: 95
        }
      },
      "22": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 37,
          column: 17
        }
      },
      "23": {
        start: {
          line: 36,
          column: 20
        },
        end: {
          line: 36,
          column: 70
        }
      },
      "24": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 40,
          column: 17
        }
      },
      "25": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 69
        }
      },
      "26": {
        start: {
          line: 42,
          column: 43
        },
        end: {
          line: 42,
          column: 117
        }
      },
      "27": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 45,
          column: 17
        }
      },
      "28": {
        start: {
          line: 44,
          column: 20
        },
        end: {
          line: 44,
          column: 94
        }
      },
      "29": {
        start: {
          line: 48,
          column: 35
        },
        end: {
          line: 50,
          column: 13
        }
      },
      "30": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "31": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 62
        }
      },
      "32": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "33": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 83
        }
      },
      "34": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "35": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 57
        }
      },
      "36": {
        start: {
          line: 60,
          column: 31
        },
        end: {
          line: 60,
          column: 90
        }
      },
      "37": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 41
        }
      },
      "38": {
        start: {
          line: 63,
          column: 39
        },
        end: {
          line: 63,
          column: 86
        }
      },
      "39": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "40": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 38
        }
      },
      "41": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 43
        }
      },
      "42": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 98
        }
      },
      "43": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 24
        }
      },
      "44": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 29
        }
      },
      "45": {
        start: {
          line: 83,
          column: 22
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "46": {
        start: {
          line: 103,
          column: 23
        },
        end: {
          line: 103,
          column: 83
        }
      },
      "47": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "48": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 52
        }
      },
      "49": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 107,
          column: 34
        }
      },
      "50": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 123,
          column: 10
        }
      },
      "51": {
        start: {
          line: 129,
          column: 102
        },
        end: {
          line: 129,
          column: 108
        }
      },
      "52": {
        start: {
          line: 130,
          column: 23
        },
        end: {
          line: 130,
          column: 41
        }
      },
      "53": {
        start: {
          line: 132,
          column: 32
        },
        end: {
          line: 132,
          column: 34
        }
      },
      "54": {
        start: {
          line: 133,
          column: 28
        },
        end: {
          line: 133,
          column: 30
        }
      },
      "55": {
        start: {
          line: 134,
          column: 25
        },
        end: {
          line: 134,
          column: 26
        }
      },
      "56": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "57": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 104
        }
      },
      "58": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 44
        }
      },
      "59": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 25
        }
      },
      "60": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "61": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 65
        }
      },
      "62": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 39
        }
      },
      "63": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 25
        }
      },
      "64": {
        start: {
          line: 145,
          column: 28
        },
        end: {
          line: 145,
          column: 102
        }
      },
      "65": {
        start: {
          line: 147,
          column: 27
        },
        end: {
          line: 151,
          column: 5
        }
      },
      "66": {
        start: {
          line: 152,
          column: 28
        },
        end: {
          line: 152,
          column: 90
        }
      },
      "67": {
        start: {
          line: 153,
          column: 22
        },
        end: {
          line: 153,
          column: 57
        }
      },
      "68": {
        start: {
          line: 155,
          column: 26
        },
        end: {
          line: 176,
          column: 5
        }
      },
      "69": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 40
        }
      },
      "70": {
        start: {
          line: 178,
          column: 23
        },
        end: {
          line: 178,
          column: 84
        }
      },
      "71": {
        start: {
          line: 179,
          column: 28
        },
        end: {
          line: 194,
          column: 11
        }
      },
      "72": {
        start: {
          line: 179,
          column: 52
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "73": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 201,
          column: 10
        }
      },
      "74": {
        start: {
          line: 207,
          column: 21
        },
        end: {
          line: 207,
          column: 46
        }
      },
      "75": {
        start: {
          line: 208,
          column: 23
        },
        end: {
          line: 208,
          column: 43
        }
      },
      "76": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "77": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 40
        }
      },
      "78": {
        start: {
          line: 212,
          column: 38
        },
        end: {
          line: 212,
          column: 84
        }
      },
      "79": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 215,
          column: 13
        }
      },
      "80": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 56
        }
      },
      "81": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "82": {
        start: {
          line: 218,
          column: 43
        },
        end: {
          line: 218,
          column: 91
        }
      },
      "83": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 221,
          column: 17
        }
      },
      "84": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 220,
          column: 70
        }
      },
      "85": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 237,
          column: 13
        }
      },
      "86": {
        start: {
          line: 225,
          column: 39
        },
        end: {
          line: 225,
          column: 95
        }
      },
      "87": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 228,
          column: 17
        }
      },
      "88": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 227,
          column: 70
        }
      },
      "89": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 231,
          column: 17
        }
      },
      "90": {
        start: {
          line: 230,
          column: 20
        },
        end: {
          line: 230,
          column: 69
        }
      },
      "91": {
        start: {
          line: 233,
          column: 43
        },
        end: {
          line: 233,
          column: 117
        }
      },
      "92": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 236,
          column: 17
        }
      },
      "93": {
        start: {
          line: 235,
          column: 20
        },
        end: {
          line: 235,
          column: 94
        }
      },
      "94": {
        start: {
          line: 239,
          column: 30
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "95": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 81
        }
      },
      "96": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 41
        }
      },
      "97": {
        start: {
          line: 248,
          column: 38
        },
        end: {
          line: 248,
          column: 84
        }
      },
      "98": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 252,
          column: 15
        }
      },
      "99": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 37
        }
      },
      "100": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 43
        }
      },
      "101": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 112
        }
      },
      "102": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 24
        }
      },
      "103": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 29
        }
      },
      "104": {
        start: {
          line: 268,
          column: 21
        },
        end: {
          line: 268,
          column: 46
        }
      },
      "105": {
        start: {
          line: 269,
          column: 23
        },
        end: {
          line: 269,
          column: 43
        }
      },
      "106": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "107": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 40
        }
      },
      "108": {
        start: {
          line: 273,
          column: 31
        },
        end: {
          line: 273,
          column: 77
        }
      },
      "109": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 276,
          column: 13
        }
      },
      "110": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 56
        }
      },
      "111": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 280,
          column: 13
        }
      },
      "112": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 82
        }
      },
      "113": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 92
        }
      },
      "114": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 41
        }
      },
      "115": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 286,
          column: 15
        }
      },
      "116": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 43
        }
      },
      "117": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 106
        }
      },
      "118": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 24
        }
      },
      "119": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 29
        }
      },
      "120": {
        start: {
          line: 301,
          column: 21
        },
        end: {
          line: 301,
          column: 46
        }
      },
      "121": {
        start: {
          line: 302,
          column: 23
        },
        end: {
          line: 302,
          column: 43
        }
      },
      "122": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "123": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 40
        }
      },
      "124": {
        start: {
          line: 306,
          column: 31
        },
        end: {
          line: 306,
          column: 77
        }
      },
      "125": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 309,
          column: 13
        }
      },
      "126": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 56
        }
      },
      "127": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "128": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 82
        }
      },
      "129": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 317,
          column: 13
        }
      },
      "130": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 316,
          column: 132
        }
      },
      "131": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 70
        }
      },
      "132": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 41
        }
      },
      "133": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 323,
          column: 15
        }
      },
      "134": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 43
        }
      },
      "135": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 111
        }
      },
      "136": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 24
        }
      },
      "137": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 29
        }
      },
      "138": {
        start: {
          line: 338,
          column: 21
        },
        end: {
          line: 338,
          column: 46
        }
      },
      "139": {
        start: {
          line: 339,
          column: 23
        },
        end: {
          line: 339,
          column: 43
        }
      },
      "140": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 374,
          column: 9
        }
      },
      "141": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 40
        }
      },
      "142": {
        start: {
          line: 343,
          column: 25
        },
        end: {
          line: 343,
          column: 62
        }
      },
      "143": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 346,
          column: 13
        }
      },
      "144": {
        start: {
          line: 345,
          column: 16
        },
        end: {
          line: 345,
          column: 50
        }
      },
      "145": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 349,
          column: 13
        }
      },
      "146": {
        start: {
          line: 348,
          column: 16
        },
        end: {
          line: 348,
          column: 65
        }
      },
      "147": {
        start: {
          line: 351,
          column: 39
        },
        end: {
          line: 351,
          column: 94
        }
      },
      "148": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 354,
          column: 13
        }
      },
      "149": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 353,
          column: 90
        }
      },
      "150": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 82
        }
      },
      "151": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 41
        }
      },
      "152": {
        start: {
          line: 359,
          column: 38
        },
        end: {
          line: 359,
          column: 84
        }
      },
      "153": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 364,
          column: 15
        }
      },
      "154": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 37
        }
      },
      "155": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 43
        }
      },
      "156": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 119
        }
      },
      "157": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 24
        }
      },
      "158": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 29
        }
      },
      "159": {
        start: {
          line: 380,
          column: 21
        },
        end: {
          line: 380,
          column: 46
        }
      },
      "160": {
        start: {
          line: 381,
          column: 23
        },
        end: {
          line: 381,
          column: 43
        }
      },
      "161": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 402,
          column: 9
        }
      },
      "162": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 383,
          column: 40
        }
      },
      "163": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 74
        }
      },
      "164": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 386,
          column: 41
        }
      },
      "165": {
        start: {
          line: 388,
          column: 38
        },
        end: {
          line: 388,
          column: 84
        }
      },
      "166": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 392,
          column: 15
        }
      },
      "167": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 393,
          column: 37
        }
      },
      "168": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 43
        }
      },
      "169": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 111
        }
      },
      "170": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 24
        }
      },
      "171": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 29
        }
      },
      "172": {
        start: {
          line: 408,
          column: 22
        },
        end: {
          line: 418,
          column: 5
        }
      },
      "173": {
        start: {
          line: 419,
          column: 23
        },
        end: {
          line: 419,
          column: 67
        }
      },
      "174": {
        start: {
          line: 420,
          column: 22
        },
        end: {
          line: 420,
          column: 36
        }
      },
      "175": {
        start: {
          line: 421,
          column: 22
        },
        end: {
          line: 421,
          column: 43
        }
      },
      "176": {
        start: {
          line: 422,
          column: 31
        },
        end: {
          line: 422,
          column: 62
        }
      },
      "177": {
        start: {
          line: 423,
          column: 46
        },
        end: {
          line: 423,
          column: 84
        }
      },
      "178": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 431,
          column: 10
        }
      },
      "179": {
        start: {
          line: 437,
          column: 21
        },
        end: {
          line: 437,
          column: 46
        }
      },
      "180": {
        start: {
          line: 438,
          column: 23
        },
        end: {
          line: 438,
          column: 43
        }
      },
      "181": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 515,
          column: 9
        }
      },
      "182": {
        start: {
          line: 440,
          column: 62
        },
        end: {
          line: 440,
          column: 68
        }
      },
      "183": {
        start: {
          line: 441,
          column: 27
        },
        end: {
          line: 441,
          column: 45
        }
      },
      "184": {
        start: {
          line: 443,
          column: 30
        },
        end: {
          line: 443,
          column: 64
        }
      },
      "185": {
        start: {
          line: 444,
          column: 32
        },
        end: {
          line: 444,
          column: 34
        }
      },
      "186": {
        start: {
          line: 445,
          column: 29
        },
        end: {
          line: 445,
          column: 30
        }
      },
      "187": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 450,
          column: 13
        }
      },
      "188": {
        start: {
          line: 447,
          column: 16
        },
        end: {
          line: 447,
          column: 142
        }
      },
      "189": {
        start: {
          line: 448,
          column: 16
        },
        end: {
          line: 448,
          column: 48
        }
      },
      "190": {
        start: {
          line: 449,
          column: 16
        },
        end: {
          line: 449,
          column: 29
        }
      },
      "191": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 457,
          column: 13
        }
      },
      "192": {
        start: {
          line: 453,
          column: 33
        },
        end: {
          line: 453,
          column: 52
        }
      },
      "193": {
        start: {
          line: 454,
          column: 16
        },
        end: {
          line: 454,
          column: 67
        }
      },
      "194": {
        start: {
          line: 455,
          column: 16
        },
        end: {
          line: 455,
          column: 43
        }
      },
      "195": {
        start: {
          line: 456,
          column: 16
        },
        end: {
          line: 456,
          column: 29
        }
      },
      "196": {
        start: {
          line: 459,
          column: 31
        },
        end: {
          line: 463,
          column: 7
        }
      },
      "197": {
        start: {
          line: 464,
          column: 32
        },
        end: {
          line: 464,
          column: 75
        }
      },
      "198": {
        start: {
          line: 465,
          column: 26
        },
        end: {
          line: 465,
          column: 61
        }
      },
      "199": {
        start: {
          line: 467,
          column: 26
        },
        end: {
          line: 484,
          column: 7
        }
      },
      "200": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 485,
          column: 44
        }
      },
      "201": {
        start: {
          line: 486,
          column: 27
        },
        end: {
          line: 486,
          column: 65
        }
      },
      "202": {
        start: {
          line: 487,
          column: 36
        },
        end: {
          line: 500,
          column: 15
        }
      },
      "203": {
        start: {
          line: 487,
          column: 60
        },
        end: {
          line: 500,
          column: 13
        }
      },
      "204": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 507,
          column: 14
        }
      },
      "205": {
        start: {
          line: 510,
          column: 12
        },
        end: {
          line: 510,
          column: 103
        }
      },
      "206": {
        start: {
          line: 511,
          column: 12
        },
        end: {
          line: 511,
          column: 24
        }
      },
      "207": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 514,
          column: 29
        }
      },
      "208": {
        start: {
          line: 521,
          column: 21
        },
        end: {
          line: 521,
          column: 46
        }
      },
      "209": {
        start: {
          line: 522,
          column: 23
        },
        end: {
          line: 522,
          column: 43
        }
      },
      "210": {
        start: {
          line: 523,
          column: 8
        },
        end: {
          line: 566,
          column: 9
        }
      },
      "211": {
        start: {
          line: 524,
          column: 26
        },
        end: {
          line: 539,
          column: 7
        }
      },
      "212": {
        start: {
          line: 540,
          column: 27
        },
        end: {
          line: 540,
          column: 62
        }
      },
      "213": {
        start: {
          line: 541,
          column: 12
        },
        end: {
          line: 543,
          column: 13
        }
      },
      "214": {
        start: {
          line: 542,
          column: 16
        },
        end: {
          line: 542,
          column: 28
        }
      },
      "215": {
        start: {
          line: 544,
          column: 24
        },
        end: {
          line: 544,
          column: 38
        }
      },
      "216": {
        start: {
          line: 545,
          column: 12
        },
        end: {
          line: 558,
          column: 14
        }
      },
      "217": {
        start: {
          line: 561,
          column: 12
        },
        end: {
          line: 561,
          column: 108
        }
      },
      "218": {
        start: {
          line: 562,
          column: 12
        },
        end: {
          line: 562,
          column: 24
        }
      },
      "219": {
        start: {
          line: 565,
          column: 12
        },
        end: {
          line: 565,
          column: 29
        }
      },
      "220": {
        start: {
          line: 572,
          column: 21
        },
        end: {
          line: 572,
          column: 46
        }
      },
      "221": {
        start: {
          line: 573,
          column: 23
        },
        end: {
          line: 573,
          column: 43
        }
      },
      "222": {
        start: {
          line: 574,
          column: 8
        },
        end: {
          line: 631,
          column: 9
        }
      },
      "223": {
        start: {
          line: 575,
          column: 12
        },
        end: {
          line: 575,
          column: 40
        }
      },
      "224": {
        start: {
          line: 577,
          column: 33
        },
        end: {
          line: 577,
          column: 106
        }
      },
      "225": {
        start: {
          line: 578,
          column: 12
        },
        end: {
          line: 580,
          column: 13
        }
      },
      "226": {
        start: {
          line: 579,
          column: 16
        },
        end: {
          line: 579,
          column: 56
        }
      },
      "227": {
        start: {
          line: 582,
          column: 38
        },
        end: {
          line: 582,
          column: 70
        }
      },
      "228": {
        start: {
          line: 583,
          column: 35
        },
        end: {
          line: 583,
          column: 85
        }
      },
      "229": {
        start: {
          line: 584,
          column: 30
        },
        end: {
          line: 588,
          column: 7
        }
      },
      "230": {
        start: {
          line: 589,
          column: 31
        },
        end: {
          line: 594,
          column: 14
        }
      },
      "231": {
        start: {
          line: 595,
          column: 28
        },
        end: {
          line: 595,
          column: 46
        }
      },
      "232": {
        start: {
          line: 597,
          column: 12
        },
        end: {
          line: 599,
          column: 13
        }
      },
      "233": {
        start: {
          line: 598,
          column: 16
        },
        end: {
          line: 598,
          column: 97
        }
      },
      "234": {
        start: {
          line: 601,
          column: 31
        },
        end: {
          line: 601,
          column: 120
        }
      },
      "235": {
        start: {
          line: 602,
          column: 34
        },
        end: {
          line: 602,
          column: 61
        }
      },
      "236": {
        start: {
          line: 604,
          column: 12
        },
        end: {
          line: 604,
          column: 96
        }
      },
      "237": {
        start: {
          line: 605,
          column: 12
        },
        end: {
          line: 605,
          column: 41
        }
      },
      "238": {
        start: {
          line: 607,
          column: 30
        },
        end: {
          line: 607,
          column: 155
        }
      },
      "239": {
        start: {
          line: 608,
          column: 12
        },
        end: {
          line: 613,
          column: 13
        }
      },
      "240": {
        start: {
          line: 609,
          column: 16
        },
        end: {
          line: 612,
          column: 19
        }
      },
      "241": {
        start: {
          line: 615,
          column: 35
        },
        end: {
          line: 615,
          column: 79
        }
      },
      "242": {
        start: {
          line: 616,
          column: 12
        },
        end: {
          line: 621,
          column: 15
        }
      },
      "243": {
        start: {
          line: 622,
          column: 12
        },
        end: {
          line: 622,
          column: 34
        }
      },
      "244": {
        start: {
          line: 625,
          column: 12
        },
        end: {
          line: 625,
          column: 43
        }
      },
      "245": {
        start: {
          line: 626,
          column: 12
        },
        end: {
          line: 626,
          column: 103
        }
      },
      "246": {
        start: {
          line: 627,
          column: 12
        },
        end: {
          line: 627,
          column: 24
        }
      },
      "247": {
        start: {
          line: 630,
          column: 12
        },
        end: {
          line: 630,
          column: 29
        }
      },
      "248": {
        start: {
          line: 637,
          column: 21
        },
        end: {
          line: 637,
          column: 46
        }
      },
      "249": {
        start: {
          line: 638,
          column: 23
        },
        end: {
          line: 638,
          column: 43
        }
      },
      "250": {
        start: {
          line: 639,
          column: 8
        },
        end: {
          line: 739,
          column: 9
        }
      },
      "251": {
        start: {
          line: 640,
          column: 12
        },
        end: {
          line: 640,
          column: 40
        }
      },
      "252": {
        start: {
          line: 642,
          column: 33
        },
        end: {
          line: 642,
          column: 139
        }
      },
      "253": {
        start: {
          line: 643,
          column: 12
        },
        end: {
          line: 645,
          column: 13
        }
      },
      "254": {
        start: {
          line: 644,
          column: 16
        },
        end: {
          line: 644,
          column: 61
        }
      },
      "255": {
        start: {
          line: 647,
          column: 12
        },
        end: {
          line: 652,
          column: 13
        }
      },
      "256": {
        start: {
          line: 648,
          column: 35
        },
        end: {
          line: 648,
          column: 129
        }
      },
      "257": {
        start: {
          line: 649,
          column: 16
        },
        end: {
          line: 651,
          column: 17
        }
      },
      "258": {
        start: {
          line: 650,
          column: 20
        },
        end: {
          line: 650,
          column: 60
        }
      },
      "259": {
        start: {
          line: 654,
          column: 33
        },
        end: {
          line: 654,
          column: 35
        }
      },
      "260": {
        start: {
          line: 655,
          column: 33
        },
        end: {
          line: 655,
          column: 35
        }
      },
      "261": {
        start: {
          line: 656,
          column: 29
        },
        end: {
          line: 656,
          column: 30
        }
      },
      "262": {
        start: {
          line: 657,
          column: 12
        },
        end: {
          line: 661,
          column: 13
        }
      },
      "263": {
        start: {
          line: 658,
          column: 16
        },
        end: {
          line: 658,
          column: 65
        }
      },
      "264": {
        start: {
          line: 659,
          column: 16
        },
        end: {
          line: 659,
          column: 50
        }
      },
      "265": {
        start: {
          line: 660,
          column: 16
        },
        end: {
          line: 660,
          column: 29
        }
      },
      "266": {
        start: {
          line: 662,
          column: 12
        },
        end: {
          line: 666,
          column: 13
        }
      },
      "267": {
        start: {
          line: 663,
          column: 16
        },
        end: {
          line: 663,
          column: 64
        }
      },
      "268": {
        start: {
          line: 664,
          column: 16
        },
        end: {
          line: 664,
          column: 49
        }
      },
      "269": {
        start: {
          line: 665,
          column: 16
        },
        end: {
          line: 665,
          column: 29
        }
      },
      "270": {
        start: {
          line: 667,
          column: 12
        },
        end: {
          line: 671,
          column: 13
        }
      },
      "271": {
        start: {
          line: 668,
          column: 16
        },
        end: {
          line: 668,
          column: 60
        }
      },
      "272": {
        start: {
          line: 669,
          column: 16
        },
        end: {
          line: 669,
          column: 46
        }
      },
      "273": {
        start: {
          line: 670,
          column: 16
        },
        end: {
          line: 670,
          column: 29
        }
      },
      "274": {
        start: {
          line: 672,
          column: 12
        },
        end: {
          line: 676,
          column: 13
        }
      },
      "275": {
        start: {
          line: 673,
          column: 16
        },
        end: {
          line: 673,
          column: 64
        }
      },
      "276": {
        start: {
          line: 674,
          column: 16
        },
        end: {
          line: 674,
          column: 60
        }
      },
      "277": {
        start: {
          line: 675,
          column: 16
        },
        end: {
          line: 675,
          column: 29
        }
      },
      "278": {
        start: {
          line: 677,
          column: 34
        },
        end: {
          line: 677,
          column: 38
        }
      },
      "279": {
        start: {
          line: 678,
          column: 12
        },
        end: {
          line: 689,
          column: 13
        }
      },
      "280": {
        start: {
          line: 679,
          column: 16
        },
        end: {
          line: 679,
          column: 68
        }
      },
      "281": {
        start: {
          line: 680,
          column: 16
        },
        end: {
          line: 680,
          column: 42
        }
      },
      "282": {
        start: {
          line: 681,
          column: 36
        },
        end: {
          line: 686,
          column: 9
        }
      },
      "283": {
        start: {
          line: 687,
          column: 37
        },
        end: {
          line: 687,
          column: 82
        }
      },
      "284": {
        start: {
          line: 688,
          column: 16
        },
        end: {
          line: 688,
          column: 55
        }
      },
      "285": {
        start: {
          line: 691,
          column: 12
        },
        end: {
          line: 708,
          column: 13
        }
      },
      "286": {
        start: {
          line: 693,
          column: 16
        },
        end: {
          line: 693,
          column: 137
        }
      },
      "287": {
        start: {
          line: 695,
          column: 16
        },
        end: {
          line: 707,
          column: 17
        }
      },
      "288": {
        start: {
          line: 697,
          column: 38
        },
        end: {
          line: 697,
          column: 76
        }
      },
      "289": {
        start: {
          line: 698,
          column: 39
        },
        end: {
          line: 698,
          column: 78
        }
      },
      "290": {
        start: {
          line: 699,
          column: 20
        },
        end: {
          line: 701,
          column: 21
        }
      },
      "291": {
        start: {
          line: 700,
          column: 24
        },
        end: {
          line: 700,
          column: 58
        }
      },
      "292": {
        start: {
          line: 702,
          column: 20
        },
        end: {
          line: 704,
          column: 21
        }
      },
      "293": {
        start: {
          line: 703,
          column: 24
        },
        end: {
          line: 703,
          column: 79
        }
      },
      "294": {
        start: {
          line: 706,
          column: 20
        },
        end: {
          line: 706,
          column: 169
        }
      },
      "295": {
        start: {
          line: 709,
          column: 12
        },
        end: {
          line: 709,
          column: 41
        }
      },
      "296": {
        start: {
          line: 711,
          column: 12
        },
        end: {
          line: 711,
          column: 84
        }
      },
      "297": {
        start: {
          line: 712,
          column: 27
        },
        end: {
          line: 725,
          column: 13
        }
      },
      "298": {
        start: {
          line: 726,
          column: 12
        },
        end: {
          line: 729,
          column: 15
        }
      },
      "299": {
        start: {
          line: 730,
          column: 12
        },
        end: {
          line: 730,
          column: 26
        }
      },
      "300": {
        start: {
          line: 733,
          column: 12
        },
        end: {
          line: 733,
          column: 43
        }
      },
      "301": {
        start: {
          line: 734,
          column: 12
        },
        end: {
          line: 734,
          column: 111
        }
      },
      "302": {
        start: {
          line: 735,
          column: 12
        },
        end: {
          line: 735,
          column: 24
        }
      },
      "303": {
        start: {
          line: 738,
          column: 12
        },
        end: {
          line: 738,
          column: 29
        }
      },
      "304": {
        start: {
          line: 745,
          column: 21
        },
        end: {
          line: 745,
          column: 46
        }
      },
      "305": {
        start: {
          line: 746,
          column: 23
        },
        end: {
          line: 746,
          column: 43
        }
      },
      "306": {
        start: {
          line: 747,
          column: 8
        },
        end: {
          line: 768,
          column: 9
        }
      },
      "307": {
        start: {
          line: 748,
          column: 12
        },
        end: {
          line: 748,
          column: 40
        }
      },
      "308": {
        start: {
          line: 750,
          column: 33
        },
        end: {
          line: 750,
          column: 132
        }
      },
      "309": {
        start: {
          line: 751,
          column: 12
        },
        end: {
          line: 753,
          column: 13
        }
      },
      "310": {
        start: {
          line: 752,
          column: 16
        },
        end: {
          line: 752,
          column: 61
        }
      },
      "311": {
        start: {
          line: 755,
          column: 12
        },
        end: {
          line: 755,
          column: 133
        }
      },
      "312": {
        start: {
          line: 757,
          column: 12
        },
        end: {
          line: 757,
          column: 76
        }
      },
      "313": {
        start: {
          line: 758,
          column: 12
        },
        end: {
          line: 758,
          column: 41
        }
      },
      "314": {
        start: {
          line: 759,
          column: 12
        },
        end: {
          line: 759,
          column: 86
        }
      },
      "315": {
        start: {
          line: 762,
          column: 12
        },
        end: {
          line: 762,
          column: 43
        }
      },
      "316": {
        start: {
          line: 763,
          column: 12
        },
        end: {
          line: 763,
          column: 105
        }
      },
      "317": {
        start: {
          line: 764,
          column: 12
        },
        end: {
          line: 764,
          column: 24
        }
      },
      "318": {
        start: {
          line: 767,
          column: 12
        },
        end: {
          line: 767,
          column: 29
        }
      },
      "319": {
        start: {
          line: 775,
          column: 26
        },
        end: {
          line: 775,
          column: 64
        }
      },
      "320": {
        start: {
          line: 776,
          column: 27
        },
        end: {
          line: 776,
          column: 66
        }
      },
      "321": {
        start: {
          line: 777,
          column: 8
        },
        end: {
          line: 779,
          column: 9
        }
      },
      "322": {
        start: {
          line: 778,
          column: 12
        },
        end: {
          line: 778,
          column: 46
        }
      },
      "323": {
        start: {
          line: 780,
          column: 8
        },
        end: {
          line: 782,
          column: 9
        }
      },
      "324": {
        start: {
          line: 781,
          column: 12
        },
        end: {
          line: 781,
          column: 67
        }
      },
      "325": {
        start: {
          line: 784,
          column: 28
        },
        end: {
          line: 784,
          column: 95
        }
      },
      "326": {
        start: {
          line: 785,
          column: 8
        },
        end: {
          line: 785,
          column: 64
        }
      },
      "327": {
        start: {
          line: 791,
          column: 22
        },
        end: {
          line: 791,
          column: 86
        }
      },
      "328": {
        start: {
          line: 792,
          column: 23
        },
        end: {
          line: 792,
          column: 25
        }
      },
      "329": {
        start: {
          line: 793,
          column: 8
        },
        end: {
          line: 795,
          column: 9
        }
      },
      "330": {
        start: {
          line: 793,
          column: 21
        },
        end: {
          line: 793,
          column: 22
        }
      },
      "331": {
        start: {
          line: 794,
          column: 12
        },
        end: {
          line: 794,
          column: 79
        }
      },
      "332": {
        start: {
          line: 796,
          column: 8
        },
        end: {
          line: 796,
          column: 24
        }
      },
      "333": {
        start: {
          line: 802,
          column: 21
        },
        end: {
          line: 802,
          column: 46
        }
      },
      "334": {
        start: {
          line: 803,
          column: 22
        },
        end: {
          line: 825,
          column: 5
        }
      },
      "335": {
        start: {
          line: 826,
          column: 23
        },
        end: {
          line: 826,
          column: 62
        }
      },
      "336": {
        start: {
          line: 827,
          column: 8
        },
        end: {
          line: 827,
          column: 27
        }
      },
      "337": {
        start: {
          line: 830,
          column: 0
        },
        end: {
          line: 830,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 46
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 82
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        loc: {
          start: {
            line: 128,
            column: 39
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 128
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 179,
            column: 44
          },
          end: {
            line: 179,
            column: 45
          }
        },
        loc: {
          start: {
            line: 179,
            column: 52
          },
          end: {
            line: 194,
            column: 9
          }
        },
        line: 179
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        loc: {
          start: {
            line: 206,
            column: 47
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 206
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 41
          },
          end: {
            line: 296,
            column: 5
          }
        },
        line: 267
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 300,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        },
        loc: {
          start: {
            line: 300,
            column: 45
          },
          end: {
            line: 333,
            column: 5
          }
        },
        line: 300
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 337,
            column: 4
          },
          end: {
            line: 337,
            column: 5
          }
        },
        loc: {
          start: {
            line: 337,
            column: 53
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 337
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 379,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        loc: {
          start: {
            line: 379,
            column: 45
          },
          end: {
            line: 403,
            column: 5
          }
        },
        line: 379
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 407,
            column: 4
          },
          end: {
            line: 407,
            column: 5
          }
        },
        loc: {
          start: {
            line: 407,
            column: 31
          },
          end: {
            line: 432,
            column: 5
          }
        },
        line: 407
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 436,
            column: 4
          },
          end: {
            line: 436,
            column: 5
          }
        },
        loc: {
          start: {
            line: 436,
            column: 37
          },
          end: {
            line: 516,
            column: 5
          }
        },
        line: 436
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 487,
            column: 52
          },
          end: {
            line: 487,
            column: 53
          }
        },
        loc: {
          start: {
            line: 487,
            column: 60
          },
          end: {
            line: 500,
            column: 13
          }
        },
        line: 487
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 520,
            column: 4
          },
          end: {
            line: 520,
            column: 5
          }
        },
        loc: {
          start: {
            line: 520,
            column: 40
          },
          end: {
            line: 567,
            column: 5
          }
        },
        line: 520
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 571,
            column: 4
          },
          end: {
            line: 571,
            column: 5
          }
        },
        loc: {
          start: {
            line: 571,
            column: 37
          },
          end: {
            line: 632,
            column: 5
          }
        },
        line: 571
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 636,
            column: 4
          },
          end: {
            line: 636,
            column: 5
          }
        },
        loc: {
          start: {
            line: 636,
            column: 45
          },
          end: {
            line: 740,
            column: 5
          }
        },
        line: 636
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 744,
            column: 4
          },
          end: {
            line: 744,
            column: 5
          }
        },
        loc: {
          start: {
            line: 744,
            column: 39
          },
          end: {
            line: 769,
            column: 5
          }
        },
        line: 744
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 773,
            column: 4
          },
          end: {
            line: 773,
            column: 5
          }
        },
        loc: {
          start: {
            line: 773,
            column: 71
          },
          end: {
            line: 786,
            column: 5
          }
        },
        line: 773
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 790,
            column: 4
          },
          end: {
            line: 790,
            column: 5
          }
        },
        loc: {
          start: {
            line: 790,
            column: 32
          },
          end: {
            line: 797,
            column: 5
          }
        },
        line: 790
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 801,
            column: 4
          },
          end: {
            line: 801,
            column: 5
          }
        },
        loc: {
          start: {
            line: 801,
            column: 47
          },
          end: {
            line: 828,
            column: 5
          }
        },
        line: 801
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 37,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 37,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 40,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 40,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "7": {
        loc: {
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 45,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 45,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "8": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "9": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "10": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "11": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "12": {
        loc: {
          start: {
            line: 113,
            column: 28
          },
          end: {
            line: 118,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 55
          },
          end: {
            line: 118,
            column: 13
          }
        }, {
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 118,
            column: 20
          }
        }],
        line: 113
      },
      "13": {
        loc: {
          start: {
            line: 128,
            column: 26
          },
          end: {
            line: 128,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 128,
            column: 35
          },
          end: {
            line: 128,
            column: 37
          }
        }],
        line: 128
      },
      "14": {
        loc: {
          start: {
            line: 129,
            column: 16
          },
          end: {
            line: 129,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 23
          },
          end: {
            line: 129,
            column: 24
          }
        }],
        line: 129
      },
      "15": {
        loc: {
          start: {
            line: 129,
            column: 26
          },
          end: {
            line: 129,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 34
          },
          end: {
            line: 129,
            column: 36
          }
        }],
        line: 129
      },
      "16": {
        loc: {
          start: {
            line: 129,
            column: 56
          },
          end: {
            line: 129,
            column: 77
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 65
          },
          end: {
            line: 129,
            column: 77
          }
        }],
        line: 129
      },
      "17": {
        loc: {
          start: {
            line: 129,
            column: 79
          },
          end: {
            line: 129,
            column: 97
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 91
          },
          end: {
            line: 129,
            column: 97
          }
        }],
        line: 129
      },
      "18": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "19": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "20": {
        loc: {
          start: {
            line: 145,
            column: 28
          },
          end: {
            line: 145,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 145,
            column: 57
          },
          end: {
            line: 145,
            column: 97
          }
        }, {
          start: {
            line: 145,
            column: 100
          },
          end: {
            line: 145,
            column: 102
          }
        }],
        line: 145
      },
      "21": {
        loc: {
          start: {
            line: 184,
            column: 28
          },
          end: {
            line: 189,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 184,
            column: 55
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 189,
            column: 20
          }
        }],
        line: 184
      },
      "22": {
        loc: {
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 215,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 215,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "23": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "24": {
        loc: {
          start: {
            line: 217,
            column: 16
          },
          end: {
            line: 217,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 16
          },
          end: {
            line: 217,
            column: 25
          }
        }, {
          start: {
            line: 217,
            column: 29
          },
          end: {
            line: 217,
            column: 65
          }
        }],
        line: 217
      },
      "25": {
        loc: {
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 221,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 221,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "26": {
        loc: {
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "27": {
        loc: {
          start: {
            line: 226,
            column: 16
          },
          end: {
            line: 228,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 16
          },
          end: {
            line: 228,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "28": {
        loc: {
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 231,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 231,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "29": {
        loc: {
          start: {
            line: 234,
            column: 16
          },
          end: {
            line: 236,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 16
          },
          end: {
            line: 236,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "30": {
        loc: {
          start: {
            line: 234,
            column: 20
          },
          end: {
            line: 234,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 234,
            column: 20
          },
          end: {
            line: 234,
            column: 38
          }
        }, {
          start: {
            line: 234,
            column: 42
          },
          end: {
            line: 234,
            column: 80
          }
        }],
        line: 234
      },
      "31": {
        loc: {
          start: {
            line: 242,
            column: 41
          },
          end: {
            line: 242,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 242,
            column: 83
          },
          end: {
            line: 242,
            column: 87
          }
        }, {
          start: {
            line: 242,
            column: 90
          },
          end: {
            line: 242,
            column: 115
          }
        }],
        line: 242
      },
      "32": {
        loc: {
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 276,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 276,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "33": {
        loc: {
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "34": {
        loc: {
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 309,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 309,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "35": {
        loc: {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "36": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "37": {
        loc: {
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 346,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 346,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "38": {
        loc: {
          start: {
            line: 347,
            column: 12
          },
          end: {
            line: 349,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 12
          },
          end: {
            line: 349,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "39": {
        loc: {
          start: {
            line: 352,
            column: 12
          },
          end: {
            line: 354,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 352,
            column: 12
          },
          end: {
            line: 354,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 352
      },
      "40": {
        loc: {
          start: {
            line: 352,
            column: 16
          },
          end: {
            line: 352,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 352,
            column: 16
          },
          end: {
            line: 352,
            column: 34
          }
        }, {
          start: {
            line: 352,
            column: 38
          },
          end: {
            line: 352,
            column: 76
          }
        }],
        line: 352
      },
      "41": {
        loc: {
          start: {
            line: 423,
            column: 46
          },
          end: {
            line: 423,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 423,
            column: 58
          },
          end: {
            line: 423,
            column: 80
          }
        }, {
          start: {
            line: 423,
            column: 83
          },
          end: {
            line: 423,
            column: 84
          }
        }],
        line: 423
      },
      "42": {
        loc: {
          start: {
            line: 440,
            column: 33
          },
          end: {
            line: 440,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 440,
            column: 42
          },
          end: {
            line: 440,
            column: 44
          }
        }],
        line: 440
      },
      "43": {
        loc: {
          start: {
            line: 440,
            column: 46
          },
          end: {
            line: 440,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 440,
            column: 55
          },
          end: {
            line: 440,
            column: 57
          }
        }],
        line: 440
      },
      "44": {
        loc: {
          start: {
            line: 446,
            column: 12
          },
          end: {
            line: 450,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 446,
            column: 12
          },
          end: {
            line: 450,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 446
      },
      "45": {
        loc: {
          start: {
            line: 446,
            column: 16
          },
          end: {
            line: 446,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 446,
            column: 16
          },
          end: {
            line: 446,
            column: 22
          }
        }, {
          start: {
            line: 446,
            column: 26
          },
          end: {
            line: 446,
            column: 39
          }
        }],
        line: 446
      },
      "46": {
        loc: {
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 457,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 457,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 451
      },
      "47": {
        loc: {
          start: {
            line: 451,
            column: 16
          },
          end: {
            line: 451,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 451,
            column: 16
          },
          end: {
            line: 451,
            column: 22
          }
        }, {
          start: {
            line: 451,
            column: 26
          },
          end: {
            line: 451,
            column: 39
          }
        }],
        line: 451
      },
      "48": {
        loc: {
          start: {
            line: 492,
            column: 24
          },
          end: {
            line: 492,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 492,
            column: 40
          },
          end: {
            line: 492,
            column: 48
          }
        }, {
          start: {
            line: 492,
            column: 51
          },
          end: {
            line: 492,
            column: 61
          }
        }],
        line: 492
      },
      "49": {
        loc: {
          start: {
            line: 495,
            column: 28
          },
          end: {
            line: 499,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 495,
            column: 48
          },
          end: {
            line: 499,
            column: 17
          }
        }, {
          start: {
            line: 499,
            column: 20
          },
          end: {
            line: 499,
            column: 24
          }
        }],
        line: 495
      },
      "50": {
        loc: {
          start: {
            line: 541,
            column: 12
          },
          end: {
            line: 543,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 541,
            column: 12
          },
          end: {
            line: 543,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 541
      },
      "51": {
        loc: {
          start: {
            line: 550,
            column: 24
          },
          end: {
            line: 550,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 550,
            column: 40
          },
          end: {
            line: 550,
            column: 48
          }
        }, {
          start: {
            line: 550,
            column: 51
          },
          end: {
            line: 550,
            column: 61
          }
        }],
        line: 550
      },
      "52": {
        loc: {
          start: {
            line: 553,
            column: 28
          },
          end: {
            line: 557,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 553,
            column: 48
          },
          end: {
            line: 557,
            column: 17
          }
        }, {
          start: {
            line: 557,
            column: 20
          },
          end: {
            line: 557,
            column: 24
          }
        }],
        line: 553
      },
      "53": {
        loc: {
          start: {
            line: 578,
            column: 12
          },
          end: {
            line: 580,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 578,
            column: 12
          },
          end: {
            line: 580,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 578
      },
      "54": {
        loc: {
          start: {
            line: 597,
            column: 12
          },
          end: {
            line: 599,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 597,
            column: 12
          },
          end: {
            line: 599,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 597
      },
      "55": {
        loc: {
          start: {
            line: 608,
            column: 12
          },
          end: {
            line: 613,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 608,
            column: 12
          },
          end: {
            line: 613,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 608
      },
      "56": {
        loc: {
          start: {
            line: 643,
            column: 12
          },
          end: {
            line: 645,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 643,
            column: 12
          },
          end: {
            line: 645,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 643
      },
      "57": {
        loc: {
          start: {
            line: 647,
            column: 12
          },
          end: {
            line: 652,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 647,
            column: 12
          },
          end: {
            line: 652,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 647
      },
      "58": {
        loc: {
          start: {
            line: 647,
            column: 16
          },
          end: {
            line: 647,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 647,
            column: 16
          },
          end: {
            line: 647,
            column: 26
          }
        }, {
          start: {
            line: 647,
            column: 30
          },
          end: {
            line: 647,
            column: 71
          }
        }],
        line: 647
      },
      "59": {
        loc: {
          start: {
            line: 649,
            column: 16
          },
          end: {
            line: 651,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 649,
            column: 16
          },
          end: {
            line: 651,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 649
      },
      "60": {
        loc: {
          start: {
            line: 657,
            column: 12
          },
          end: {
            line: 661,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 657,
            column: 12
          },
          end: {
            line: 661,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 657
      },
      "61": {
        loc: {
          start: {
            line: 662,
            column: 12
          },
          end: {
            line: 666,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 662,
            column: 12
          },
          end: {
            line: 666,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 662
      },
      "62": {
        loc: {
          start: {
            line: 667,
            column: 12
          },
          end: {
            line: 671,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 667,
            column: 12
          },
          end: {
            line: 671,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 667
      },
      "63": {
        loc: {
          start: {
            line: 672,
            column: 12
          },
          end: {
            line: 676,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 672,
            column: 12
          },
          end: {
            line: 676,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 672
      },
      "64": {
        loc: {
          start: {
            line: 678,
            column: 12
          },
          end: {
            line: 689,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 678,
            column: 12
          },
          end: {
            line: 689,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 678
      },
      "65": {
        loc: {
          start: {
            line: 691,
            column: 12
          },
          end: {
            line: 708,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 691,
            column: 12
          },
          end: {
            line: 708,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 691
      },
      "66": {
        loc: {
          start: {
            line: 695,
            column: 16
          },
          end: {
            line: 707,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 695,
            column: 16
          },
          end: {
            line: 707,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 695
      },
      "67": {
        loc: {
          start: {
            line: 699,
            column: 20
          },
          end: {
            line: 701,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 699,
            column: 20
          },
          end: {
            line: 701,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 699
      },
      "68": {
        loc: {
          start: {
            line: 702,
            column: 20
          },
          end: {
            line: 704,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 702,
            column: 20
          },
          end: {
            line: 704,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 702
      },
      "69": {
        loc: {
          start: {
            line: 713,
            column: 20
          },
          end: {
            line: 713,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 713,
            column: 20
          },
          end: {
            line: 713,
            column: 39
          }
        }, {
          start: {
            line: 713,
            column: 43
          },
          end: {
            line: 713,
            column: 49
          }
        }],
        line: 713
      },
      "70": {
        loc: {
          start: {
            line: 714,
            column: 27
          },
          end: {
            line: 714,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 714,
            column: 27
          },
          end: {
            line: 714,
            column: 54
          }
        }, {
          start: {
            line: 714,
            column: 58
          },
          end: {
            line: 714,
            column: 72
          }
        }],
        line: 714
      },
      "71": {
        loc: {
          start: {
            line: 715,
            column: 26
          },
          end: {
            line: 715,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 715,
            column: 26
          },
          end: {
            line: 715,
            column: 52
          }
        }, {
          start: {
            line: 715,
            column: 56
          },
          end: {
            line: 715,
            column: 69
          }
        }],
        line: 715
      },
      "72": {
        loc: {
          start: {
            line: 716,
            column: 23
          },
          end: {
            line: 716,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 716,
            column: 23
          },
          end: {
            line: 716,
            column: 45
          }
        }, {
          start: {
            line: 716,
            column: 49
          },
          end: {
            line: 716,
            column: 59
          }
        }],
        line: 716
      },
      "73": {
        loc: {
          start: {
            line: 717,
            column: 24
          },
          end: {
            line: 717,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 717,
            column: 53
          },
          end: {
            line: 717,
            column: 61
          }
        }, {
          start: {
            line: 717,
            column: 64
          },
          end: {
            line: 717,
            column: 74
          }
        }],
        line: 717
      },
      "74": {
        loc: {
          start: {
            line: 720,
            column: 28
          },
          end: {
            line: 724,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 720,
            column: 48
          },
          end: {
            line: 724,
            column: 17
          }
        }, {
          start: {
            line: 724,
            column: 20
          },
          end: {
            line: 724,
            column: 24
          }
        }],
        line: 720
      },
      "75": {
        loc: {
          start: {
            line: 751,
            column: 12
          },
          end: {
            line: 753,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 751,
            column: 12
          },
          end: {
            line: 753,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 751
      },
      "76": {
        loc: {
          start: {
            line: 777,
            column: 8
          },
          end: {
            line: 779,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 777,
            column: 8
          },
          end: {
            line: 779,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 777
      },
      "77": {
        loc: {
          start: {
            line: 780,
            column: 8
          },
          end: {
            line: 782,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 780,
            column: 8
          },
          end: {
            line: 782,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 780
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0],
      "15": [0],
      "16": [0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0],
      "43": [0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/hr/departmentService.ts",
      mappings: ";;;;;;AAAA,oDAAgD;AAChD,2DAA6D;AAC7D,iDAAmD;AACnD,wDAAqD;AACrD,wDAAqD;AACrD,gEAAwC;AACxC,oDAA4B;AA0C5B,MAAa,iBAAiB;IAI5B;QACE,IAAI,CAAC,eAAe,GAAG,IAAI,4BAAe,EAAE,CAAC;QAC7C,IAAI,CAAC,SAAS,GAAG,IAAI,gBAAS,EAAE,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB,CAAC,IAA0B;QAC/C,MAAM,IAAI,GAAG,IAAA,kBAAO,GAAE,CAAC;QACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAE5B,0CAA0C;YAC1C,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5E,IAAI,kBAAkB,EAAE,CAAC;gBACvB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;YACpD,CAAC;YAED,qCAAqC;YACrC,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBAC9B,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;gBAChF,IAAI,CAAC,cAAc,EAAE,CAAC;oBACpB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBACpD,CAAC;gBACD,IAAI,cAAc,CAAC,IAAI,KAAK,iBAAiB,EAAE,CAAC;oBAC9C,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;gBACnD,CAAC;gBAED,0DAA0D;gBAC1D,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;gBACtG,IAAI,kBAAkB,EAAE,CAAC;oBACvB,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;gBAC5E,CAAC;YACH,CAAC;YAED,oBAAoB;YACpB,MAAM,cAAc,GAAQ;gBAC1B,IAAI,EAAE,IAAI,CAAC,IAAI;aAChB,CAAC;YAEF,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;gBACnC,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YAChD,CAAC;YAED,IAAI,IAAI,CAAC,oBAAoB,KAAK,SAAS,EAAE,CAAC;gBAC5C,cAAc,CAAC,uBAAuB,GAAG,IAAI,CAAC,oBAAoB,CAAC;YACrE,CAAC;YAED,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;gBAChC,cAAc,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC3C,CAAC;YAED,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;YAE/E,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE7B,+BAA+B;YAC/B,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAE3E,gBAAM,CAAC,IAAI,CAAC,oCAAoC,UAAU,CAAC,IAAI,EAAE,EAAE;gBACjE,YAAY,EAAE,UAAU,CAAC,EAAE;gBAC3B,oBAAoB,EAAE,IAAI,CAAC,oBAAoB;aAChD,CAAC,CAAC;YAEH,OAAO,kBAAkB,CAAC;QAC5B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC/B,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YACvF,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB,CAAC,YAAoB;QAC9C,MAAM,KAAK,GAAG;;;;;;;;;;;;;;;;;;;KAmBb,CAAC;QAEF,MAAM,MAAM,GAAG,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;QAE5D,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC7B,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAC1C,CAAC;QAED,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE3B,OAAO;YACL,EAAE,EAAE,GAAG,CAAC,EAAE;YACV,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,WAAW,EAAE,GAAG,CAAC,WAAW;YAC5B,oBAAoB,EAAE,GAAG,CAAC,oBAAoB;YAC9C,cAAc,EAAE,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBACzC,EAAE,EAAE,GAAG,CAAC,OAAO;gBACf,KAAK,EAAE,GAAG,CAAC,UAAU;gBACrB,SAAS,EAAE,GAAG,CAAC,eAAe;gBAC9B,QAAQ,EAAE,GAAG,CAAC,cAAc;aAC7B,CAAC,CAAC,CAAC,IAAI;YACR,aAAa,EAAE,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC;YAC3C,QAAQ,EAAE,GAAG,CAAC,QAAQ;YACtB,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,SAAS,EAAE,GAAG,CAAC,SAAS;SACzB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CAAC,SAA+B,EAAE;QAOrD,MAAM,EACJ,IAAI,GAAG,CAAC,EACR,KAAK,GAAG,EAAE,EACV,MAAM,EACN,QAAQ,EACR,MAAM,GAAG,YAAY,EACrB,SAAS,GAAG,MAAM,EACnB,GAAG,MAAM,CAAC;QAEX,MAAM,MAAM,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;QAElC,qBAAqB;QACrB,MAAM,eAAe,GAAa,EAAE,CAAC;QACrC,MAAM,WAAW,GAAU,EAAE,CAAC;QAC9B,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,IAAI,MAAM,EAAE,CAAC;YACX,eAAe,CAAC,IAAI,CAAC,kBAAkB,UAAU,4BAA4B,UAAU,GAAG,CAAC,CAAC;YAC5F,WAAW,CAAC,IAAI,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC;YAChC,UAAU,EAAE,CAAC;QACf,CAAC;QAED,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;YAC3B,eAAe,CAAC,IAAI,CAAC,kBAAkB,UAAU,EAAE,CAAC,CAAC;YACrD,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC3B,UAAU,EAAE,CAAC;QACf,CAAC;QAED,MAAM,WAAW,GAAG,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAE/F,cAAc;QACd,MAAM,UAAU,GAAG;;;QAGf,WAAW;KACd,CAAC;QAEF,MAAM,WAAW,GAAG,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACnE,MAAM,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAElD,aAAa;QACb,MAAM,SAAS,GAAG;;;;;;;;;;;;;;;;;QAiBd,WAAW;;mBAEA,MAAM,IAAI,SAAS,CAAC,WAAW,EAAE;eACrC,UAAU,YAAY,UAAU,GAAG,CAAC;KAC9C,CAAC;QAEF,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAChC,MAAM,MAAM,GAAG,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAE7D,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC1C,EAAE,EAAE,GAAG,CAAC,EAAE;YACV,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,WAAW,EAAE,GAAG,CAAC,WAAW;YAC5B,oBAAoB,EAAE,GAAG,CAAC,oBAAoB;YAC9C,cAAc,EAAE,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBACzC,EAAE,EAAE,GAAG,CAAC,OAAO;gBACf,KAAK,EAAE,GAAG,CAAC,UAAU;gBACrB,SAAS,EAAE,GAAG,CAAC,eAAe;gBAC9B,QAAQ,EAAE,GAAG,CAAC,cAAc;aAC7B,CAAC,CAAC,CAAC,IAAI;YACR,aAAa,EAAE,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC;YAC3C,QAAQ,EAAE,GAAG,CAAC,QAAQ;YACtB,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,SAAS,EAAE,GAAG,CAAC,SAAS;SACzB,CAAC,CAAC,CAAC;QAEJ,OAAO;YACL,WAAW;YACX,KAAK;YACL,IAAI;YACJ,KAAK;YACL,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACrC,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB,CAAC,YAAoB,EAAE,IAA0B;QACrE,MAAM,IAAI,GAAG,IAAA,kBAAO,GAAE,CAAC;QACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAE5B,yBAAyB;YACzB,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;YACzE,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACvB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAC1C,CAAC;YAED,wDAAwD;YACxD,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,iBAAiB,CAAC,IAAI,EAAE,CAAC;gBACtD,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC5E,IAAI,kBAAkB,EAAE,CAAC;oBACvB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBACpD,CAAC;YACH,CAAC;YAED,qCAAqC;YACrC,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBAC9B,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;gBAChF,IAAI,CAAC,cAAc,EAAE,CAAC;oBACpB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBACpD,CAAC;gBACD,IAAI,cAAc,CAAC,IAAI,KAAK,iBAAiB,EAAE,CAAC;oBAC9C,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;gBACnD,CAAC;gBAED,8EAA8E;gBAC9E,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;gBACtG,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,EAAE,KAAK,YAAY,EAAE,CAAC;oBACjE,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;gBAC5E,CAAC;YACH,CAAC;YAED,gEAAgE;YAChE,MAAM,SAAS,GAAG;gBAChB,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,uBAAuB,EAAE,IAAI,CAAC,oBAAoB,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB;gBACnG,SAAS,EAAE,IAAI,CAAC,QAAQ;aACzB,CAAC;YACF,MAAM,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;YAErE,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE7B,8BAA8B;YAC9B,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;YAEzE,gBAAM,CAAC,IAAI,CAAC,oCAAoC,iBAAiB,CAAC,IAAI,EAAE,EAAE;gBACxE,YAAY;gBACZ,OAAO,EAAE,EAAE,GAAG,IAAI,EAAE;aACrB,CAAC,CAAC;YAEH,OAAO,iBAAiB,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC/B,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;YACrG,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB,CAAC,YAAoB;QACzC,MAAM,IAAI,GAAG,IAAA,kBAAO,GAAE,CAAC;QACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAE5B,iBAAiB;YACjB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;YAClE,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAC1C,CAAC;YAED,2CAA2C;YAC3C,IAAI,UAAU,CAAC,aAAa,GAAG,CAAC,EAAE,CAAC;gBACjC,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;YACpE,CAAC;YAED,wBAAwB;YACxB,MAAM,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;YAEhF,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE7B,gBAAM,CAAC,IAAI,CAAC,oCAAoC,UAAU,CAAC,IAAI,EAAE,EAAE;gBACjE,YAAY;aACb,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC/B,gBAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,YAAY,EAAE,CAAC,CAAC;YAC/F,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CAAC,YAAoB;QAC7C,MAAM,IAAI,GAAG,IAAA,kBAAO,GAAE,CAAC;QACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAE5B,iBAAiB;YACjB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;YAClE,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAC1C,CAAC;YAED,2CAA2C;YAC3C,IAAI,UAAU,CAAC,aAAa,GAAG,CAAC,EAAE,CAAC;gBACjC,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;YACpE,CAAC;YAED,qDAAqD;YACrD,IAAI,UAAU,CAAC,oBAAoB,EAAE,CAAC;gBACpC,MAAM,IAAI,KAAK,CAAC,kGAAkG,CAAC,CAAC;YACtH,CAAC;YAED,yBAAyB;YACzB,MAAM,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;YAE1D,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE7B,gBAAM,CAAC,IAAI,CAAC,yCAAyC,UAAU,CAAC,IAAI,EAAE,EAAE;gBACtE,YAAY;aACb,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC/B,gBAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,YAAY,EAAE,CAAC,CAAC;YACpG,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CAAC,YAAoB,EAAE,MAAc;QAC7D,MAAM,IAAI,GAAG,IAAA,kBAAO,GAAE,CAAC;QACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAE5B,mCAAmC;YACnC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACnD,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACpC,CAAC;YACD,IAAI,IAAI,CAAC,IAAI,KAAK,iBAAiB,EAAE,CAAC;gBACpC,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;YACnD,CAAC;YAED,0DAA0D;YAClD,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC3F,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,EAAE,KAAK,YAAY,EAAE,CAAC;gBACjE,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;YAC5E,CAAC;YAED,oBAAoB;YACpB,MAAM,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YAEtE,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE7B,8BAA8B;YAC9B,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;YAEzE,gBAAM,CAAC,IAAI,CAAC,uCAAuC,EAAE;gBACnD,YAAY;gBACZ,MAAM;gBACN,cAAc,EAAE,iBAAiB,CAAC,IAAI;aACvC,CAAC,CAAC;YAEH,OAAO,iBAAiB,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC/B,gBAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC;YAC5G,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CAAC,YAAoB;QAC7C,MAAM,IAAI,GAAG,IAAA,kBAAO,GAAE,CAAC;QACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAE5B,oBAAoB;YACpB,MAAM,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;YAE9D,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE7B,8BAA8B;YAC9B,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;YAEzE,gBAAM,CAAC,IAAI,CAAC,sCAAsC,EAAE;gBAClD,YAAY;gBACZ,cAAc,EAAE,iBAAiB,CAAC,IAAI;aACvC,CAAC,CAAC;YAEH,OAAO,iBAAiB,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC/B,gBAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,YAAY,EAAE,CAAC,CAAC;YACpG,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB;QAQtB,MAAM,KAAK,GAAG;;;;;;;;;;KAUb,CAAC;QAEF,MAAM,MAAM,GAAG,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE7B,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpC,MAAM,cAAc,GAAG,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QACvD,MAAM,6BAA6B,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAE7E,OAAO;YACL,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC;YAC9B,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC;YACrC,YAAY,EAAE,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC;YAC3C,cAAc;YACd,6BAA6B,EAAE,IAAI,CAAC,KAAK,CAAC,6BAA6B,GAAG,GAAG,CAAC,GAAG,GAAG;SACrF,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CAAC,MAAyE;QAOhG,MAAM,IAAI,GAAG,IAAA,kBAAO,GAAE,CAAC;QACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,GAAG,EAAE,EAAE,MAAM,GAAG,EAAE,EAAE,GAAG,MAAM,CAAC;YACzD,MAAM,MAAM,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;YAElC,qBAAqB;YACrB,IAAI,WAAW,GAAG,kCAAkC,CAAC;YACrD,MAAM,WAAW,GAAU,EAAE,CAAC;YAC9B,IAAI,UAAU,GAAG,CAAC,CAAC;YAEnB,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC;gBAC5B,WAAW,IAAI,6BAA6B,UAAU,0BAA0B,UAAU,sBAAsB,UAAU,GAAG,CAAC;gBAC9H,WAAW,CAAC,IAAI,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC;gBAChC,UAAU,EAAE,CAAC;YACf,CAAC;YAED,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC;gBAC5B,iDAAiD;gBACjD,MAAM,QAAQ,GAAG,MAAM,KAAK,QAAQ,CAAC;gBACrC,WAAW,IAAI,uBAAuB,UAAU,EAAE,CAAC;gBACnD,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC3B,UAAU,EAAE,CAAC;YACf,CAAC;YAED,kBAAkB;YAClB,MAAM,UAAU,GAAG;;;UAGf,WAAW;OACd,CAAC;YACF,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;YAChE,MAAM,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YAElD,uDAAuD;YACvD,MAAM,KAAK,GAAG;;;;;;;;;;;;;;UAcV,WAAW;;iBAEJ,UAAU,YAAY,UAAU,GAAG,CAAC;OAC9C,CAAC;YAEF,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAChC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAEtD,MAAM,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAC9C,EAAE,EAAE,GAAG,CAAC,EAAE;gBACV,SAAS,EAAE,GAAG,CAAC,UAAU;gBACzB,QAAQ,EAAE,GAAG,CAAC,SAAS;gBACvB,KAAK,EAAE,GAAG,CAAC,KAAK;gBAChB,MAAM,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU;gBAC7C,SAAS,EAAE,GAAG,CAAC,UAAU;gBACzB,SAAS,EAAE,GAAG,CAAC,UAAU;gBACzB,UAAU,EAAE,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;oBAC9B,EAAE,EAAE,GAAG,CAAC,aAAa;oBACrB,IAAI,EAAE,GAAG,CAAC,eAAe;oBACzB,WAAW,EAAE,GAAG,CAAC,sBAAsB;iBACxC,CAAC,CAAC,CAAC,IAAI;aACT,CAAC,CAAC,CAAC;YAEJ,OAAO;gBACL,eAAe;gBACf,KAAK;gBACL,IAAI;gBACJ,KAAK;gBACL,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACrC,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;YAC5F,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB,CAAC,MAAc;QACxC,MAAM,IAAI,GAAG,IAAA,kBAAO,GAAE,CAAC;QACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,KAAK,GAAG;;;;;;;;;;;;;;;OAeb,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;YAEnD,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC7B,OAAO,IAAI,CAAC;YACd,CAAC;YAED,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,OAAO;gBACL,EAAE,EAAE,GAAG,CAAC,EAAE;gBACV,SAAS,EAAE,GAAG,CAAC,UAAU;gBACzB,QAAQ,EAAE,GAAG,CAAC,SAAS;gBACvB,KAAK,EAAE,GAAG,CAAC,KAAK;gBAChB,MAAM,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU;gBAC7C,SAAS,EAAE,GAAG,CAAC,UAAU;gBACzB,SAAS,EAAE,GAAG,CAAC,UAAU;gBACzB,UAAU,EAAE,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;oBAC9B,EAAE,EAAE,GAAG,CAAC,aAAa;oBACrB,IAAI,EAAE,GAAG,CAAC,eAAe;oBACzB,WAAW,EAAE,GAAG,CAAC,sBAAsB;iBACxC,CAAC,CAAC,CAAC,IAAI;aACT,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,qCAAqC,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;YACjG,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CAAC,IAK1B;QACC,MAAM,IAAI,GAAG,IAAA,kBAAO,GAAE,CAAC;QACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAE5B,gCAAgC;YAChC,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAC/F,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACjC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAC1C,CAAC;YAED,kDAAkD;YAClD,MAAM,iBAAiB,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;YAC3D,MAAM,cAAc,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;YAEhE,MAAM,SAAS,GAAG;;;;OAIjB,CAAC;YAEF,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE;gBAC/C,IAAI,CAAC,SAAS;gBACd,IAAI,CAAC,QAAQ;gBACb,IAAI,CAAC,KAAK;gBACV,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEnC,iEAAiE;YACjE,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;gBACtB,MAAM,IAAI,CAAC,8BAA8B,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;YACnF,CAAC;YAED,gCAAgC;YAChC,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7G,MAAM,aAAa,GAAG,eAAe,UAAU,EAAE,CAAC;YAElD,yEAAyE;YACzE,MAAM,2BAAY,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;YAErE,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE7B,4BAA4B;YAC5B,MAAM,SAAS,GAAG,MAAM,2BAAY,CAAC,oCAAoC,CACvE,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,EACb,UAAU,CACX,CAAC;YAEF,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,gBAAM,CAAC,IAAI,CAAC,wDAAwD,EAAE;oBACpE,MAAM,EAAE,OAAO,CAAC,EAAE;oBAClB,KAAK,EAAE,IAAI,CAAC,KAAK;iBAClB,CAAC,CAAC;YACL,CAAC;YAED,wCAAwC;YACxC,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAEpE,gBAAM,CAAC,IAAI,CAAC,sCAAsC,EAAE;gBAClD,MAAM,EAAE,OAAO,CAAC,EAAE;gBAClB,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,SAAS;aACV,CAAC,CAAC;YAEH,OAAO,cAAc,CAAC;QACxB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC/B,gBAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YAC5F,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CAAC,MAAc,EAAE,IAM1C;QACC,MAAM,IAAI,GAAG,IAAA,kBAAO,GAAE,CAAC;QACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAE5B,gDAAgD;YAChD,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,KAAK,CACrC,yDAAyD,EACzD,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAC5B,CAAC;YAEF,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACnC,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/C,CAAC;YAED,2DAA2D;YAC3D,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;gBAC5D,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,oDAAoD,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;gBAClH,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC/B,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1C,CAAC;YACH,CAAC;YAED,mBAAmB;YACnB,MAAM,YAAY,GAAG,EAAE,CAAC;YACxB,MAAM,YAAY,GAAG,EAAE,CAAC;YACxB,IAAI,UAAU,GAAG,CAAC,CAAC;YAEnB,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;gBACnB,YAAY,CAAC,IAAI,CAAC,iBAAiB,UAAU,EAAE,CAAC,CAAC;gBACjD,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAClC,UAAU,EAAE,CAAC;YACf,CAAC;YACD,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAClB,YAAY,CAAC,IAAI,CAAC,gBAAgB,UAAU,EAAE,CAAC,CAAC;gBAChD,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACjC,UAAU,EAAE,CAAC;YACf,CAAC;YACD,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBACf,YAAY,CAAC,IAAI,CAAC,YAAY,UAAU,EAAE,CAAC,CAAC;gBAC5C,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9B,UAAU,EAAE,CAAC;YACf,CAAC;YACD,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBAChB,YAAY,CAAC,IAAI,CAAC,gBAAgB,UAAU,EAAE,CAAC,CAAC;gBAChD,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC;gBAC5C,UAAU,EAAE,CAAC;YACf,CAAC;YAED,IAAI,eAAe,GAAG,IAAI,CAAC;YAC3B,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC5B,YAAY,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;gBACpD,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAE1B,MAAM,WAAW,GAAG;;gBAEZ,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;wBACf,UAAU;;SAEzB,CAAC;gBAEF,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;gBACnE,eAAe,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzC,CAAC;YAED,+BAA+B;YAC/B,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,EAAE,CAAC;gBACpC,+CAA+C;gBAC/C,MAAM,MAAM,CAAC,KAAK,CAChB,0FAA0F,EAC1F,CAAC,MAAM,CAAC,CACT,CAAC;gBAEF,wCAAwC;gBACxC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;oBACtB,2CAA2C;oBAC3C,MAAM,SAAS,GAAG,sCAAsC,CAAC;oBACzD,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;oBAE3D,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;wBACjC,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;oBACpC,CAAC;oBAED,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,iBAAiB,EAAE,CAAC;wBAClD,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;oBACzD,CAAC;oBAED,oDAAoD;oBACpD,MAAM,MAAM,CAAC,KAAK,CAChB,mGAAmG,EACnG,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAC5B,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE7B,uDAAuD;YACvD,gBAAM,CAAC,IAAI,CAAC,oCAAoC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;YAE9D,MAAM,MAAM,GAAG;gBACb,EAAE,EAAE,eAAe,EAAE,EAAE,IAAI,MAAM;gBACjC,SAAS,EAAE,eAAe,EAAE,UAAU,IAAI,IAAI,CAAC,SAAS;gBACxD,QAAQ,EAAE,eAAe,EAAE,SAAS,IAAI,IAAI,CAAC,QAAQ;gBACrD,KAAK,EAAE,eAAe,EAAE,KAAK,IAAI,IAAI,CAAC,KAAK;gBAC3C,MAAM,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU;gBAC1D,SAAS,EAAE,eAAe,EAAE,UAAU;gBACtC,SAAS,EAAE,eAAe,EAAE,UAAU;gBACtC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;oBAC9B,EAAE,EAAE,IAAI,CAAC,YAAY;oBACrB,IAAI,EAAE,IAAI,EAAE,gDAAgD;oBAC5D,WAAW,EAAE,IAAI;iBAClB,CAAC,CAAC,CAAC,IAAI;aACT,CAAC;YAEF,gBAAM,CAAC,IAAI,CAAC,sCAAsC,EAAE;gBAClD,MAAM;gBACN,YAAY,EAAE,IAAI,CAAC,YAAY;aAChC,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC/B,gBAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;YACpG,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CAAC,MAAc;QACvC,MAAM,IAAI,GAAG,IAAA,kBAAO,GAAE,CAAC;QACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAEpC,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAE5B,gDAAgD;YAChD,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,KAAK,CACrC,kDAAkD,EAClD,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAC5B,CAAC;YAEF,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACnC,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/C,CAAC;YAED,sCAAsC;YACtC,MAAM,MAAM,CAAC,KAAK,CAChB,0FAA0F,EAC1F,CAAC,MAAM,CAAC,CACT,CAAC;YAEF,kBAAkB;YAClB,MAAM,MAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;YAEhE,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE7B,gBAAM,CAAC,IAAI,CAAC,sCAAsC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QAClE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC/B,gBAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,EAAE,KAAK,EAAG,KAAe,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;YAC9F,MAAM,KAAK,CAAC;QACd,CAAC;gBAAS,CAAC;YACT,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,8BAA8B,CAAC,MAAW,EAAE,YAAoB,EAAE,MAAc;QAC5F,iDAAiD;QACjD,MAAM,SAAS,GAAG,sCAAsC,CAAC;QACzD,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAE3D,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACpC,CAAC;QAED,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,iBAAiB,EAAE,CAAC;YAClD,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;QACzD,CAAC;QAED,wBAAwB;QACxB,MAAM,WAAW,GAAG,mEAAmE,CAAC;QACxF,MAAM,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED;;OAEG;IACK,yBAAyB;QAC/B,MAAM,KAAK,GAAG,gEAAgE,CAAC;QAC/E,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3B,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QACrE,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,sBAAsB,CAAC,YAAoB;QAC/C,MAAM,IAAI,GAAG,IAAA,kBAAO,GAAE,CAAC;QAEvB,MAAM,KAAK,GAAG;;;;;;;;;;;;;;;;;;;;;;KAsBb,CAAC;QAEF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;QACvD,OAAO,MAAM,CAAC,IAAI,CAAC;IACrB,CAAC;CACF;AAr+BD,8CAq+BC",
      names: [],
      sources: ["/home/kim/tito/server/src/services/hr/departmentService.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\nimport { DepartmentModel } from '../../models/hr/Department';\nimport { UserModel } from '../../models/auth/User';\nimport { emailService } from '../email/emailService';\nimport { redisService } from '../redis/redisService';\nimport logger from '../../utils/logger';\nimport bcrypt from 'bcrypt';\n\nexport interface CreateDepartmentData {\n  name: string;\n  description?: string;\n  departmentHeadUserId?: string;\n  isActive?: boolean;\n}\n\nexport interface UpdateDepartmentData {\n  name?: string;\n  description?: string;\n  departmentHeadUserId?: string;\n  isActive?: boolean;\n}\n\nexport interface DepartmentWithHead {\n  id: string;\n  name: string;\n  description: string | null;\n  departmentHeadUserId: string | null;\n  departmentHead: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n  } | null;\n  employeeCount: number;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface DepartmentListParams {\n  page?: number | undefined;\n  limit?: number | undefined;\n  search?: string | undefined;\n  isActive?: boolean | undefined;\n  sortBy?: string | undefined;\n  sortOrder?: 'asc' | 'desc' | undefined;\n}\n\nexport class DepartmentService {\n  private departmentModel: DepartmentModel;\n  private userModel: UserModel;\n\n  constructor() {\n    this.departmentModel = new DepartmentModel();\n    this.userModel = new UserModel();\n  }\n\n  /**\n   * Create a new department\n   */\n  async createDepartment(data: CreateDepartmentData): Promise<DepartmentWithHead> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if department name already exists\n      const existingDepartment = await this.departmentModel.findByName(data.name);\n      if (existingDepartment) {\n        throw new Error('Department name already exists');\n      }\n\n      // Verify department head if provided\n      if (data.departmentHeadUserId) {\n        const departmentHead = await this.userModel.findById(data.departmentHeadUserId);\n        if (!departmentHead) {\n          throw new Error('Department head user not found');\n        }\n        if (departmentHead.role !== 'department_head') {\n          throw new Error('User is not a department head');\n        }\n\n        // Check if user is already assigned to another department\n        const existingAssignment = await this.departmentModel.findByDepartmentHead(data.departmentHeadUserId);\n        if (existingAssignment) {\n          throw new Error('User is already assigned as head of another department');\n        }\n      }\n\n      // Create department\n      const departmentData: any = {\n        name: data.name\n      };\n      \n      if (data.description !== undefined) {\n        departmentData.description = data.description;\n      }\n      \n      if (data.departmentHeadUserId !== undefined) {\n        departmentData.department_head_user_id = data.departmentHeadUserId;\n      }\n      \n      if (data.isActive !== undefined) {\n        departmentData.is_active = data.isActive;\n      }\n      \n      const department = await this.departmentModel.createDepartment(departmentData);\n\n      await client.query('COMMIT');\n\n      // Get complete department data\n      const completeDepartment = await this.getDepartmentWithHead(department.id);\n\n      logger.info(`Department created successfully: ${department.name}`, {\n        departmentId: department.id,\n        departmentHeadUserId: data.departmentHeadUserId\n      });\n\n      return completeDepartment;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to create department', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get department with head information\n   */\n  async getDepartmentWithHead(departmentId: string): Promise<DepartmentWithHead> {\n    const query = `\n      SELECT \n        d.id,\n        d.name,\n        d.description,\n        d.department_head_user_id as \"departmentHeadUserId\",\n        d.is_active as \"isActive\",\n        d.created_at as \"createdAt\",\n        d.updated_at as \"updatedAt\",\n        u.id as head_id,\n        u.email as head_email,\n        u.first_name as head_first_name,\n        u.last_name as head_last_name,\n        COUNT(e.id) as employee_count\n      FROM departments d\n      LEFT JOIN users u ON d.department_head_user_id = u.id\n      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'\n      WHERE d.id = $1\n      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name\n    `;\n\n    const result = await getPool().query(query, [departmentId]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('Department not found');\n    }\n\n    const row = result.rows[0];\n    \n    return {\n      id: row.id,\n      name: row.name,\n      description: row.description,\n      departmentHeadUserId: row.departmentHeadUserId,\n      departmentHead: row.departmentHeadUserId ? {\n        id: row.head_id,\n        email: row.head_email,\n        firstName: row.head_first_name,\n        lastName: row.head_last_name\n      } : null,\n      employeeCount: parseInt(row.employee_count),\n      isActive: row.isActive,\n      createdAt: row.createdAt,\n      updatedAt: row.updatedAt\n    };\n  }\n\n  /**\n   * List departments with filtering and pagination\n   */\n  async listDepartments(params: DepartmentListParams = {}): Promise<{\n    departments: DepartmentWithHead[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      search,\n      isActive,\n      sortBy = 'created_at',\n      sortOrder = 'desc'\n    } = params;\n\n    const offset = (page - 1) * limit;\n\n    // Build WHERE clause\n    const whereConditions: string[] = [];\n    const queryParams: any[] = [];\n    let paramIndex = 1;\n\n    if (search) {\n      whereConditions.push(`(d.name ILIKE $${paramIndex} OR d.description ILIKE $${paramIndex})`);\n      queryParams.push(`%${search}%`);\n      paramIndex++;\n    }\n\n    if (isActive !== undefined) {\n      whereConditions.push(`d.is_active = $${paramIndex}`);\n      queryParams.push(isActive);\n      paramIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM departments d\n      ${whereClause}\n    `;\n\n    const countResult = await getPool().query(countQuery, queryParams);\n    const total = parseInt(countResult.rows[0].total);\n\n    // Data query\n    const dataQuery = `\n      SELECT \n        d.id,\n        d.name,\n        d.description,\n        d.department_head_user_id as \"departmentHeadUserId\",\n        d.is_active as \"isActive\",\n        d.created_at as \"createdAt\",\n        d.updated_at as \"updatedAt\",\n        u.id as head_id,\n        u.email as head_email,\n        u.first_name as head_first_name,\n        u.last_name as head_last_name,\n        COUNT(e.id) as employee_count\n      FROM departments d\n      LEFT JOIN users u ON d.department_head_user_id = u.id\n      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'\n      ${whereClause}\n      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name\n      ORDER BY d.${sortBy} ${sortOrder.toUpperCase()}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    queryParams.push(limit, offset);\n    const result = await getPool().query(dataQuery, queryParams);\n\n    const departments = result.rows.map(row => ({\n      id: row.id,\n      name: row.name,\n      description: row.description,\n      departmentHeadUserId: row.departmentHeadUserId,\n      departmentHead: row.departmentHeadUserId ? {\n        id: row.head_id,\n        email: row.head_email,\n        firstName: row.head_first_name,\n        lastName: row.head_last_name\n      } : null,\n      employeeCount: parseInt(row.employee_count),\n      isActive: row.isActive,\n      createdAt: row.createdAt,\n      updatedAt: row.updatedAt\n    }));\n\n    return {\n      departments,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  /**\n   * Update department information\n   */\n  async updateDepartment(departmentId: string, data: UpdateDepartmentData): Promise<DepartmentWithHead> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get current department\n      const currentDepartment = await this.getDepartmentWithHead(departmentId);\n      if (!currentDepartment) {\n        throw new Error('Department not found');\n      }\n\n      // Check if new name conflicts with existing departments\n      if (data.name && data.name !== currentDepartment.name) {\n        const existingDepartment = await this.departmentModel.findByName(data.name);\n        if (existingDepartment) {\n          throw new Error('Department name already exists');\n        }\n      }\n\n      // Verify department head if provided\n      if (data.departmentHeadUserId) {\n        const departmentHead = await this.userModel.findById(data.departmentHeadUserId);\n        if (!departmentHead) {\n          throw new Error('Department head user not found');\n        }\n        if (departmentHead.role !== 'department_head') {\n          throw new Error('User is not a department head');\n        }\n\n        // Check if user is already assigned to another department (excluding current)\n        const existingAssignment = await this.departmentModel.findByDepartmentHead(data.departmentHeadUserId);\n        if (existingAssignment && existingAssignment.id !== departmentId) {\n          throw new Error('User is already assigned as head of another department');\n        }\n      }\n\n      // Update department - convert camelCase to snake_case for model\n      const modelData = {\n        name: data.name,\n        description: data.description,\n        department_head_user_id: data.departmentHeadUserId === undefined ? null : data.departmentHeadUserId,\n        is_active: data.isActive\n      };\n      await this.departmentModel.updateDepartment(departmentId, modelData);\n\n      await client.query('COMMIT');\n\n      // Get updated department data\n      const updatedDepartment = await this.getDepartmentWithHead(departmentId);\n\n      logger.info(`Department updated successfully: ${currentDepartment.name}`, {\n        departmentId,\n        updates: { ...data }\n      });\n\n      return updatedDepartment;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to update department', { error: (error as Error).message, departmentId, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Delete department (soft delete)\n   */\n  async deleteDepartment(departmentId: string): Promise<void> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get department\n      const department = await this.getDepartmentWithHead(departmentId);\n      if (!department) {\n        throw new Error('Department not found');\n      }\n\n      // Check if department has active employees\n      if (department.employeeCount > 0) {\n        throw new Error('Cannot delete department with active employees');\n      }\n\n      // Deactivate department\n      await this.departmentModel.updateDepartment(departmentId, { is_active: false });\n\n      await client.query('COMMIT');\n\n      logger.info(`Department deleted successfully: ${department.name}`, {\n        departmentId\n      });\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to delete department', { error: (error as Error).message, departmentId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Hard delete department (permanently remove from database)\n   */\n  async hardDeleteDepartment(departmentId: string): Promise<void> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get department\n      const department = await this.getDepartmentWithHead(departmentId);\n      if (!department) {\n        throw new Error('Department not found');\n      }\n\n      // Check if department has active employees\n      if (department.employeeCount > 0) {\n        throw new Error('Cannot delete department with active employees');\n      }\n\n      // Check if department has a department head assigned\n      if (department.departmentHeadUserId) {\n        throw new Error('Cannot delete department with assigned department head. Please remove the department head first.');\n      }\n\n      // Hard delete department\n      await this.departmentModel.deleteDepartment(departmentId);\n\n      await client.query('COMMIT');\n\n      logger.info(`Department hard deleted successfully: ${department.name}`, {\n        departmentId\n      });\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to hard delete department', { error: (error as Error).message, departmentId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Assign department head\n   */\n  async assignDepartmentHead(departmentId: string, userId: string): Promise<DepartmentWithHead> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Verify user is a department head\n      const user = await this.userModel.findById(userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n      if (user.role !== 'department_head') {\n        throw new Error('User is not a department head');\n      }\n\n      // Check if user is already assigned to another department\n              const existingAssignment = await this.departmentModel.findByDepartmentHead(userId);\n      if (existingAssignment && existingAssignment.id !== departmentId) {\n        throw new Error('User is already assigned as head of another department');\n      }\n\n      // Update department\n      await this.departmentModel.assignDepartmentHead(departmentId, userId);\n\n      await client.query('COMMIT');\n\n      // Get updated department data\n      const updatedDepartment = await this.getDepartmentWithHead(departmentId);\n\n      logger.info(`Department head assigned successfully`, {\n        departmentId,\n        userId,\n        departmentName: updatedDepartment.name\n      });\n\n      return updatedDepartment;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to assign department head', { error: (error as Error).message, departmentId, userId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Remove department head\n   */\n  async removeDepartmentHead(departmentId: string): Promise<DepartmentWithHead> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Update department\n      await this.departmentModel.removeDepartmentHead(departmentId);\n\n      await client.query('COMMIT');\n\n      // Get updated department data\n      const updatedDepartment = await this.getDepartmentWithHead(departmentId);\n\n      logger.info(`Department head removed successfully`, {\n        departmentId,\n        departmentName: updatedDepartment.name\n      });\n\n      return updatedDepartment;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to remove department head', { error: (error as Error).message, departmentId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get department statistics\n   */\n  async getDepartmentStats(): Promise<{\n    total: number;\n    active: number;\n    withHeads: number;\n    withoutHeads: number;\n    totalEmployees: number;\n    averageEmployeesPerDepartment: number;\n  }> {\n    const query = `\n      SELECT \n        COUNT(*) as total,\n        COUNT(*) FILTER (WHERE is_active = true) as active,\n        COUNT(*) FILTER (WHERE department_head_user_id IS NOT NULL) as with_heads,\n        COUNT(*) FILTER (WHERE department_head_user_id IS NULL) as without_heads,\n        COUNT(e.id) as total_employees\n      FROM departments d\n      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'\n      WHERE d.is_active = true\n    `;\n\n    const result = await getPool().query(query);\n    const stats = result.rows[0];\n\n    const total = parseInt(stats.total);\n    const totalEmployees = parseInt(stats.total_employees);\n    const averageEmployeesPerDepartment = total > 0 ? totalEmployees / total : 0;\n\n    return {\n      total: total,\n      active: parseInt(stats.active),\n      withHeads: parseInt(stats.with_heads),\n      withoutHeads: parseInt(stats.without_heads),\n      totalEmployees,\n      averageEmployeesPerDepartment: Math.round(averageEmployeesPerDepartment * 100) / 100\n    };\n  }\n\n  /**\n   * Get all department heads with pagination and filtering\n   */\n  async getDepartmentHeads(params: { page: number; limit: number; search?: string; status?: string }): Promise<{\n    departmentHeads: any[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      const { page, limit, search = '', status = '' } = params;\n      const offset = (page - 1) * limit;\n\n      // Build WHERE clause\n      let whereClause = \"WHERE u.role = 'department_head'\";\n      const queryParams: any[] = [];\n      let paramIndex = 1;\n\n      if (search && search.trim()) {\n        whereClause += ` AND (u.first_name ILIKE $${paramIndex} OR u.last_name ILIKE $${paramIndex} OR u.email ILIKE $${paramIndex})`;\n        queryParams.push(`%${search}%`);\n        paramIndex++;\n      }\n\n      if (status && status.trim()) {\n        // Convert status to boolean for is_active column\n        const isActive = status === 'active';\n        whereClause += ` AND u.is_active = $${paramIndex}`;\n        queryParams.push(isActive);\n        paramIndex++;\n      }\n\n      // Get total count\n      const countQuery = `\n        SELECT COUNT(*) as total\n        FROM users u\n        ${whereClause}\n      `;\n      const countResult = await client.query(countQuery, queryParams);\n      const total = parseInt(countResult.rows[0].total);\n\n      // Get department heads with their assigned departments\n      const query = `\n        SELECT \n          u.id,\n          u.first_name,\n          u.last_name,\n          u.email,\n          u.is_active,\n          u.created_at,\n          u.updated_at,\n          d.id as department_id,\n          d.name as department_name,\n          d.description as department_description\n        FROM users u\n        LEFT JOIN departments d ON d.department_head_user_id = u.id\n        ${whereClause}\n        ORDER BY u.last_name, u.first_name\n        LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n      `;\n      \n      queryParams.push(limit, offset);\n      const result = await client.query(query, queryParams);\n\n      const departmentHeads = result.rows.map(row => ({\n        id: row.id,\n        firstName: row.first_name,\n        lastName: row.last_name,\n        email: row.email,\n        status: row.is_active ? 'active' : 'inactive',\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        department: row.department_id ? {\n          id: row.department_id,\n          name: row.department_name,\n          description: row.department_description\n        } : null\n      }));\n\n      return {\n        departmentHeads,\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit)\n      };\n    } catch (error) {\n      logger.error('Failed to get department heads', { error: (error as Error).message, params });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get department head by ID\n   */\n  async getDepartmentHeadById(userId: string): Promise<any | null> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      const query = `\n        SELECT \n          u.id,\n          u.first_name,\n          u.last_name,\n          u.email,\n          u.is_active,\n          u.created_at,\n          u.updated_at,\n          d.id as department_id,\n          d.name as department_name,\n          d.description as department_description\n        FROM users u\n        LEFT JOIN departments d ON d.department_head_user_id = u.id\n        WHERE u.id = $1 AND u.role = 'department_head'\n      `;\n      \n      const result = await client.query(query, [userId]);\n\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      const row = result.rows[0];\n      return {\n        id: row.id,\n        firstName: row.first_name,\n        lastName: row.last_name,\n        email: row.email,\n        status: row.is_active ? 'active' : 'inactive',\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        department: row.department_id ? {\n          id: row.department_id,\n          name: row.department_name,\n          description: row.department_description\n        } : null\n      };\n    } catch (error) {\n      logger.error('Failed to get department head by ID', { error: (error as Error).message, userId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Create a new department head user\n   */\n  async createDepartmentHead(data: {\n    firstName: string;\n    lastName: string;\n    email: string;\n    departmentId?: string;\n  }): Promise<any> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if email already exists\n      const existingUser = await client.query('SELECT id FROM users WHERE email = $1', [data.email]);\n      if (existingUser.rows.length > 0) {\n        throw new Error('Email already exists');\n      }\n\n      // Generate a temporary password for initial setup\n      const temporaryPassword = this.generateTemporaryPassword();\n      const hashedPassword = await bcrypt.hash(temporaryPassword, 10);\n\n      const userQuery = `\n        INSERT INTO users (first_name, last_name, email, password_hash, role, is_active)\n        VALUES ($1, $2, $3, $4, 'department_head', true)\n        RETURNING id, first_name, last_name, email, is_active, created_at, updated_at\n      `;\n      \n      const userResult = await client.query(userQuery, [\n        data.firstName,\n        data.lastName,\n        data.email,\n        hashedPassword\n      ]);\n\n      const newUser = userResult.rows[0];\n\n      // If department is specified, assign the user as department head\n      if (data.departmentId) {\n        await this.assignDepartmentHeadWithClient(client, data.departmentId, newUser.id);\n      }\n\n      // Generate password setup token\n      const setupToken = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n      const setupTokenKey = `setup_token:${setupToken}`;\n      \n      // Store setup token in cache with user ID as value (expires in 24 hours)\n      await redisService.setCache(setupTokenKey, newUser.id, 24 * 60 * 60);\n\n      await client.query('COMMIT');\n\n      // Send password setup email\n      const emailSent = await emailService.sendDepartmentHeadPasswordSetupEmail(\n        data.email,\n        data.firstName,\n        data.lastName,\n        setupToken\n      );\n\n      if (!emailSent) {\n        logger.warn('Failed to send password setup email to department head', {\n          userId: newUser.id,\n          email: data.email\n        });\n      }\n\n      // Get the complete department head data\n      const departmentHead = await this.getDepartmentHeadById(newUser.id);\n\n      logger.info('Department head created successfully', {\n        userId: newUser.id,\n        email: newUser.email,\n        departmentId: data.departmentId,\n        emailSent\n      });\n\n      return departmentHead;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to create department head', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Update department head\n   */\n  async updateDepartmentHead(userId: string, data: {\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n    status?: string;\n    departmentId?: string;\n  }): Promise<any | null> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if user exists and is a department head\n      const existingUser = await client.query(\n        'SELECT id, email FROM users WHERE id = $1 AND role = $2',\n        [userId, 'department_head']\n      );\n\n      if (existingUser.rows.length === 0) {\n        throw new Error('Department head not found');\n      }\n\n      // Check if email is being changed and if it already exists\n      if (data.email && data.email !== existingUser.rows[0].email) {\n        const emailCheck = await client.query('SELECT id FROM users WHERE email = $1 AND id != $2', [data.email, userId]);\n        if (emailCheck.rows.length > 0) {\n          throw new Error('Email already exists');\n        }\n      }\n\n      // Update user data\n      const updateFields = [];\n      const updateValues = [];\n      let paramIndex = 1;\n\n      if (data.firstName) {\n        updateFields.push(`first_name = $${paramIndex}`);\n        updateValues.push(data.firstName);\n        paramIndex++;\n      }\n      if (data.lastName) {\n        updateFields.push(`last_name = $${paramIndex}`);\n        updateValues.push(data.lastName);\n        paramIndex++;\n      }\n      if (data.email) {\n        updateFields.push(`email = $${paramIndex}`);\n        updateValues.push(data.email);\n        paramIndex++;\n      }\n      if (data.status) {\n        updateFields.push(`is_active = $${paramIndex}`);\n        updateValues.push(data.status === 'active');\n        paramIndex++;\n      }\n\n      let updatedUserData = null;\n      if (updateFields.length > 0) {\n        updateFields.push(`updated_at = CURRENT_TIMESTAMP`);\n        updateValues.push(userId);\n\n        const updateQuery = `\n          UPDATE users \n          SET ${updateFields.join(', ')}\n          WHERE id = $${paramIndex}\n          RETURNING id, first_name, last_name, email, is_active, created_at, updated_at\n        `;\n        \n        const updateResult = await client.query(updateQuery, updateValues);\n        updatedUserData = updateResult.rows[0];\n      }\n\n      // Handle department assignment\n      if (data.departmentId !== undefined) {\n        // First, remove from current department if any\n        await client.query(\n          'UPDATE departments SET department_head_user_id = NULL WHERE department_head_user_id = $1',\n          [userId]\n        );\n\n        // Assign to new department if specified\n        if (data.departmentId) {\n          // Verify the user has department_head role\n          const userQuery = 'SELECT role FROM users WHERE id = $1';\n          const userResult = await client.query(userQuery, [userId]);\n          \n          if (userResult.rows.length === 0) {\n            throw new Error('User not found');\n          }\n          \n          if (userResult.rows[0].role !== 'department_head') {\n            throw new Error('User must have department_head role');\n          }\n\n          // Update the department within the same transaction\n          await client.query(\n            'UPDATE departments SET department_head_user_id = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',\n            [userId, data.departmentId]\n          );\n        }\n      }\n\n      await client.query('COMMIT');\n\n      // Return updated department head data from transaction\n      logger.info('Transaction committed successfully', { userId });\n      \n      const result = {\n        id: updatedUserData?.id || userId,\n        firstName: updatedUserData?.first_name || data.firstName,\n        lastName: updatedUserData?.last_name || data.lastName,\n        email: updatedUserData?.email || data.email,\n        status: updatedUserData?.is_active ? 'active' : 'inactive',\n        createdAt: updatedUserData?.created_at,\n        updatedAt: updatedUserData?.updated_at,\n        department: data.departmentId ? {\n          id: data.departmentId,\n          name: null, // We'll need to fetch this separately if needed\n          description: null\n        } : null\n      };\n\n      logger.info('Department head updated successfully', {\n        userId,\n        departmentId: data.departmentId\n      });\n\n      return result;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to update department head', { error: (error as Error).message, userId, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Delete department head\n   */\n  async deleteDepartmentHead(userId: string): Promise<void> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if user exists and is a department head\n      const existingUser = await client.query(\n        'SELECT id FROM users WHERE id = $1 AND role = $2',\n        [userId, 'department_head']\n      );\n\n      if (existingUser.rows.length === 0) {\n        throw new Error('Department head not found');\n      }\n\n      // Remove from any assigned department\n      await client.query(\n        'UPDATE departments SET department_head_user_id = NULL WHERE department_head_user_id = $1',\n        [userId]\n      );\n\n      // Delete the user\n      await client.query('DELETE FROM users WHERE id = $1', [userId]);\n\n      await client.query('COMMIT');\n\n      logger.info('Department head deleted successfully', { userId });\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to delete department head', { error: (error as Error).message, userId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Assign department head using a specific database client (for transactions)\n   */\n  private async assignDepartmentHeadWithClient(client: any, departmentId: string, userId: string): Promise<void> {\n    // First verify the user has department_head role\n    const userQuery = 'SELECT role FROM users WHERE id = $1';\n    const userResult = await client.query(userQuery, [userId]);\n    \n    if (userResult.rows.length === 0) {\n      throw new Error('User not found');\n    }\n    \n    if (userResult.rows[0].role !== 'department_head') {\n      throw new Error('User must have department_head role');\n    }\n\n    // Update the department\n    const updateQuery = 'UPDATE departments SET department_head_user_id = $1 WHERE id = $2';\n    await client.query(updateQuery, [userId, departmentId]);\n  }\n\n  /**\n   * Generate temporary password for new department heads\n   */\n  private generateTemporaryPassword(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let password = '';\n    for (let i = 0; i < 8; i++) {\n      password += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return password;\n  }\n\n  /**\n   * Get employees in a department\n   */\n  async getDepartmentEmployees(departmentId: string): Promise<any[]> {\n    const pool = getPool();\n    \n    const query = `\n      SELECT \n        e.id,\n        e.user_id as \"userId\",\n        e.employee_id as \"employeeId\",\n        u.email,\n        u.first_name as \"firstName\",\n        u.last_name as \"lastName\",\n        e.department_id as \"departmentId\",\n        d.name as \"departmentName\",\n        e.position,\n        e.employment_type as \"employmentType\",\n        e.hire_date as \"hireDate\",\n        e.base_salary as \"baseSalary\",\n        e.status,\n        e.created_at as \"createdAt\",\n        e.updated_at as \"updatedAt\"\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.department_id = $1\n      ORDER BY u.last_name, u.first_name\n    `;\n    \n    const result = await pool.query(query, [departmentId]);\n    return result.rows;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "388cae7670986e1e5fc711aaf305db97eadb5e58"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_cf7v579xf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_cf7v579xf();
var __importDefault =
/* istanbul ignore next */
(cov_cf7v579xf().s[0]++,
/* istanbul ignore next */
(cov_cf7v579xf().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_cf7v579xf().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_cf7v579xf().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_cf7v579xf().f[0]++;
  cov_cf7v579xf().s[1]++;
  return /* istanbul ignore next */(cov_cf7v579xf().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_cf7v579xf().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_cf7v579xf().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_cf7v579xf().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_cf7v579xf().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_cf7v579xf().s[3]++;
exports.DepartmentService = void 0;
const database_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[4]++, require("../../config/database"));
const Department_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[5]++, require("../../models/hr/Department"));
const User_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[6]++, require("../../models/auth/User"));
const emailService_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[7]++, require("../email/emailService"));
const redisService_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[8]++, require("../redis/redisService"));
const logger_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[9]++, __importDefault(require("../../utils/logger")));
const bcrypt_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[10]++, __importDefault(require("bcrypt")));
class DepartmentService {
  constructor() {
    /* istanbul ignore next */
    cov_cf7v579xf().f[1]++;
    cov_cf7v579xf().s[11]++;
    this.departmentModel = new Department_1.DepartmentModel();
    /* istanbul ignore next */
    cov_cf7v579xf().s[12]++;
    this.userModel = new User_1.UserModel();
  }
  /**
   * Create a new department
   */
  async createDepartment(data) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[2]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[13]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[14]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[15]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[16]++;
      await client.query('BEGIN');
      // Check if department name already exists
      const existingDepartment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[17]++, await this.departmentModel.findByName(data.name));
      /* istanbul ignore next */
      cov_cf7v579xf().s[18]++;
      if (existingDepartment) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[3][0]++;
        cov_cf7v579xf().s[19]++;
        throw new Error('Department name already exists');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[3][1]++;
      }
      // Verify department head if provided
      cov_cf7v579xf().s[20]++;
      if (data.departmentHeadUserId) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[4][0]++;
        const departmentHead =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[21]++, await this.userModel.findById(data.departmentHeadUserId));
        /* istanbul ignore next */
        cov_cf7v579xf().s[22]++;
        if (!departmentHead) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[5][0]++;
          cov_cf7v579xf().s[23]++;
          throw new Error('Department head user not found');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[5][1]++;
        }
        cov_cf7v579xf().s[24]++;
        if (departmentHead.role !== 'department_head') {
          /* istanbul ignore next */
          cov_cf7v579xf().b[6][0]++;
          cov_cf7v579xf().s[25]++;
          throw new Error('User is not a department head');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[6][1]++;
        }
        // Check if user is already assigned to another department
        const existingAssignment =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[26]++, await this.departmentModel.findByDepartmentHead(data.departmentHeadUserId));
        /* istanbul ignore next */
        cov_cf7v579xf().s[27]++;
        if (existingAssignment) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[7][0]++;
          cov_cf7v579xf().s[28]++;
          throw new Error('User is already assigned as head of another department');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[7][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[4][1]++;
      }
      // Create department
      const departmentData =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[29]++, {
        name: data.name
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[30]++;
      if (data.description !== undefined) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[8][0]++;
        cov_cf7v579xf().s[31]++;
        departmentData.description = data.description;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[8][1]++;
      }
      cov_cf7v579xf().s[32]++;
      if (data.departmentHeadUserId !== undefined) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[9][0]++;
        cov_cf7v579xf().s[33]++;
        departmentData.department_head_user_id = data.departmentHeadUserId;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[9][1]++;
      }
      cov_cf7v579xf().s[34]++;
      if (data.isActive !== undefined) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[10][0]++;
        cov_cf7v579xf().s[35]++;
        departmentData.is_active = data.isActive;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[10][1]++;
      }
      const department =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[36]++, await this.departmentModel.createDepartment(departmentData));
      /* istanbul ignore next */
      cov_cf7v579xf().s[37]++;
      await client.query('COMMIT');
      // Get complete department data
      const completeDepartment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[38]++, await this.getDepartmentWithHead(department.id));
      /* istanbul ignore next */
      cov_cf7v579xf().s[39]++;
      logger_1.default.info(`Department created successfully: ${department.name}`, {
        departmentId: department.id,
        departmentHeadUserId: data.departmentHeadUserId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[40]++;
      return completeDepartment;
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[41]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[42]++;
      logger_1.default.error('Failed to create department', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[43]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[44]++;
      client.release();
    }
  }
  /**
   * Get department with head information
   */
  async getDepartmentWithHead(departmentId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[3]++;
    const query =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[45]++, `
      SELECT 
        d.id,
        d.name,
        d.description,
        d.department_head_user_id as "departmentHeadUserId",
        d.is_active as "isActive",
        d.created_at as "createdAt",
        d.updated_at as "updatedAt",
        u.id as head_id,
        u.email as head_email,
        u.first_name as head_first_name,
        u.last_name as head_last_name,
        COUNT(e.id) as employee_count
      FROM departments d
      LEFT JOIN users u ON d.department_head_user_id = u.id
      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'
      WHERE d.id = $1
      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name
    `);
    const result =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[46]++, await (0, database_1.getPool)().query(query, [departmentId]));
    /* istanbul ignore next */
    cov_cf7v579xf().s[47]++;
    if (result.rows.length === 0) {
      /* istanbul ignore next */
      cov_cf7v579xf().b[11][0]++;
      cov_cf7v579xf().s[48]++;
      throw new Error('Department not found');
    } else
    /* istanbul ignore next */
    {
      cov_cf7v579xf().b[11][1]++;
    }
    const row =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[49]++, result.rows[0]);
    /* istanbul ignore next */
    cov_cf7v579xf().s[50]++;
    return {
      id: row.id,
      name: row.name,
      description: row.description,
      departmentHeadUserId: row.departmentHeadUserId,
      departmentHead: row.departmentHeadUserId ?
      /* istanbul ignore next */
      (cov_cf7v579xf().b[12][0]++, {
        id: row.head_id,
        email: row.head_email,
        firstName: row.head_first_name,
        lastName: row.head_last_name
      }) :
      /* istanbul ignore next */
      (cov_cf7v579xf().b[12][1]++, null),
      employeeCount: parseInt(row.employee_count),
      isActive: row.isActive,
      createdAt: row.createdAt,
      updatedAt: row.updatedAt
    };
  }
  /**
   * List departments with filtering and pagination
   */
  async listDepartments(params =
  /* istanbul ignore next */
  (cov_cf7v579xf().b[13][0]++, {})) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[4]++;
    const {
      page =
      /* istanbul ignore next */
      (cov_cf7v579xf().b[14][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_cf7v579xf().b[15][0]++, 20),
      search,
      isActive,
      sortBy =
      /* istanbul ignore next */
      (cov_cf7v579xf().b[16][0]++, 'created_at'),
      sortOrder =
      /* istanbul ignore next */
      (cov_cf7v579xf().b[17][0]++, 'desc')
    } =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[51]++, params);
    const offset =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[52]++, (page - 1) * limit);
    // Build WHERE clause
    const whereConditions =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[53]++, []);
    const queryParams =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[54]++, []);
    let paramIndex =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[55]++, 1);
    /* istanbul ignore next */
    cov_cf7v579xf().s[56]++;
    if (search) {
      /* istanbul ignore next */
      cov_cf7v579xf().b[18][0]++;
      cov_cf7v579xf().s[57]++;
      whereConditions.push(`(d.name ILIKE $${paramIndex} OR d.description ILIKE $${paramIndex})`);
      /* istanbul ignore next */
      cov_cf7v579xf().s[58]++;
      queryParams.push(`%${search}%`);
      /* istanbul ignore next */
      cov_cf7v579xf().s[59]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_cf7v579xf().b[18][1]++;
    }
    cov_cf7v579xf().s[60]++;
    if (isActive !== undefined) {
      /* istanbul ignore next */
      cov_cf7v579xf().b[19][0]++;
      cov_cf7v579xf().s[61]++;
      whereConditions.push(`d.is_active = $${paramIndex}`);
      /* istanbul ignore next */
      cov_cf7v579xf().s[62]++;
      queryParams.push(isActive);
      /* istanbul ignore next */
      cov_cf7v579xf().s[63]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_cf7v579xf().b[19][1]++;
    }
    const whereClause =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[64]++, whereConditions.length > 0 ?
    /* istanbul ignore next */
    (cov_cf7v579xf().b[20][0]++, `WHERE ${whereConditions.join(' AND ')}`) :
    /* istanbul ignore next */
    (cov_cf7v579xf().b[20][1]++, ''));
    // Count query
    const countQuery =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[65]++, `
      SELECT COUNT(*) as total
      FROM departments d
      ${whereClause}
    `);
    const countResult =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[66]++, await (0, database_1.getPool)().query(countQuery, queryParams));
    const total =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[67]++, parseInt(countResult.rows[0].total));
    // Data query
    const dataQuery =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[68]++, `
      SELECT 
        d.id,
        d.name,
        d.description,
        d.department_head_user_id as "departmentHeadUserId",
        d.is_active as "isActive",
        d.created_at as "createdAt",
        d.updated_at as "updatedAt",
        u.id as head_id,
        u.email as head_email,
        u.first_name as head_first_name,
        u.last_name as head_last_name,
        COUNT(e.id) as employee_count
      FROM departments d
      LEFT JOIN users u ON d.department_head_user_id = u.id
      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'
      ${whereClause}
      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name
      ORDER BY d.${sortBy} ${sortOrder.toUpperCase()}
      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
    `);
    /* istanbul ignore next */
    cov_cf7v579xf().s[69]++;
    queryParams.push(limit, offset);
    const result =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[70]++, await (0, database_1.getPool)().query(dataQuery, queryParams));
    const departments =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[71]++, result.rows.map(row => {
      /* istanbul ignore next */
      cov_cf7v579xf().f[5]++;
      cov_cf7v579xf().s[72]++;
      return {
        id: row.id,
        name: row.name,
        description: row.description,
        departmentHeadUserId: row.departmentHeadUserId,
        departmentHead: row.departmentHeadUserId ?
        /* istanbul ignore next */
        (cov_cf7v579xf().b[21][0]++, {
          id: row.head_id,
          email: row.head_email,
          firstName: row.head_first_name,
          lastName: row.head_last_name
        }) :
        /* istanbul ignore next */
        (cov_cf7v579xf().b[21][1]++, null),
        employeeCount: parseInt(row.employee_count),
        isActive: row.isActive,
        createdAt: row.createdAt,
        updatedAt: row.updatedAt
      };
    }));
    /* istanbul ignore next */
    cov_cf7v579xf().s[73]++;
    return {
      departments,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit)
    };
  }
  /**
   * Update department information
   */
  async updateDepartment(departmentId, data) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[6]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[74]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[75]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[76]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[77]++;
      await client.query('BEGIN');
      // Get current department
      const currentDepartment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[78]++, await this.getDepartmentWithHead(departmentId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[79]++;
      if (!currentDepartment) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[22][0]++;
        cov_cf7v579xf().s[80]++;
        throw new Error('Department not found');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[22][1]++;
      }
      // Check if new name conflicts with existing departments
      cov_cf7v579xf().s[81]++;
      if (
      /* istanbul ignore next */
      (cov_cf7v579xf().b[24][0]++, data.name) &&
      /* istanbul ignore next */
      (cov_cf7v579xf().b[24][1]++, data.name !== currentDepartment.name)) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[23][0]++;
        const existingDepartment =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[82]++, await this.departmentModel.findByName(data.name));
        /* istanbul ignore next */
        cov_cf7v579xf().s[83]++;
        if (existingDepartment) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[25][0]++;
          cov_cf7v579xf().s[84]++;
          throw new Error('Department name already exists');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[25][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[23][1]++;
      }
      // Verify department head if provided
      cov_cf7v579xf().s[85]++;
      if (data.departmentHeadUserId) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[26][0]++;
        const departmentHead =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[86]++, await this.userModel.findById(data.departmentHeadUserId));
        /* istanbul ignore next */
        cov_cf7v579xf().s[87]++;
        if (!departmentHead) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[27][0]++;
          cov_cf7v579xf().s[88]++;
          throw new Error('Department head user not found');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[27][1]++;
        }
        cov_cf7v579xf().s[89]++;
        if (departmentHead.role !== 'department_head') {
          /* istanbul ignore next */
          cov_cf7v579xf().b[28][0]++;
          cov_cf7v579xf().s[90]++;
          throw new Error('User is not a department head');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[28][1]++;
        }
        // Check if user is already assigned to another department (excluding current)
        const existingAssignment =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[91]++, await this.departmentModel.findByDepartmentHead(data.departmentHeadUserId));
        /* istanbul ignore next */
        cov_cf7v579xf().s[92]++;
        if (
        /* istanbul ignore next */
        (cov_cf7v579xf().b[30][0]++, existingAssignment) &&
        /* istanbul ignore next */
        (cov_cf7v579xf().b[30][1]++, existingAssignment.id !== departmentId)) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[29][0]++;
          cov_cf7v579xf().s[93]++;
          throw new Error('User is already assigned as head of another department');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[29][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[26][1]++;
      }
      // Update department - convert camelCase to snake_case for model
      const modelData =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[94]++, {
        name: data.name,
        description: data.description,
        department_head_user_id: data.departmentHeadUserId === undefined ?
        /* istanbul ignore next */
        (cov_cf7v579xf().b[31][0]++, null) :
        /* istanbul ignore next */
        (cov_cf7v579xf().b[31][1]++, data.departmentHeadUserId),
        is_active: data.isActive
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[95]++;
      await this.departmentModel.updateDepartment(departmentId, modelData);
      /* istanbul ignore next */
      cov_cf7v579xf().s[96]++;
      await client.query('COMMIT');
      // Get updated department data
      const updatedDepartment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[97]++, await this.getDepartmentWithHead(departmentId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[98]++;
      logger_1.default.info(`Department updated successfully: ${currentDepartment.name}`, {
        departmentId,
        updates: {
          ...data
        }
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[99]++;
      return updatedDepartment;
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[100]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[101]++;
      logger_1.default.error('Failed to update department', {
        error: error.message,
        departmentId,
        data
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[102]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[103]++;
      client.release();
    }
  }
  /**
   * Delete department (soft delete)
   */
  async deleteDepartment(departmentId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[7]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[104]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[105]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[106]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[107]++;
      await client.query('BEGIN');
      // Get department
      const department =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[108]++, await this.getDepartmentWithHead(departmentId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[109]++;
      if (!department) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[32][0]++;
        cov_cf7v579xf().s[110]++;
        throw new Error('Department not found');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[32][1]++;
      }
      // Check if department has active employees
      cov_cf7v579xf().s[111]++;
      if (department.employeeCount > 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[33][0]++;
        cov_cf7v579xf().s[112]++;
        throw new Error('Cannot delete department with active employees');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[33][1]++;
      }
      // Deactivate department
      cov_cf7v579xf().s[113]++;
      await this.departmentModel.updateDepartment(departmentId, {
        is_active: false
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[114]++;
      await client.query('COMMIT');
      /* istanbul ignore next */
      cov_cf7v579xf().s[115]++;
      logger_1.default.info(`Department deleted successfully: ${department.name}`, {
        departmentId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[116]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[117]++;
      logger_1.default.error('Failed to delete department', {
        error: error.message,
        departmentId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[118]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[119]++;
      client.release();
    }
  }
  /**
   * Hard delete department (permanently remove from database)
   */
  async hardDeleteDepartment(departmentId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[8]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[120]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[121]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[122]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[123]++;
      await client.query('BEGIN');
      // Get department
      const department =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[124]++, await this.getDepartmentWithHead(departmentId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[125]++;
      if (!department) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[34][0]++;
        cov_cf7v579xf().s[126]++;
        throw new Error('Department not found');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[34][1]++;
      }
      // Check if department has active employees
      cov_cf7v579xf().s[127]++;
      if (department.employeeCount > 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[35][0]++;
        cov_cf7v579xf().s[128]++;
        throw new Error('Cannot delete department with active employees');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[35][1]++;
      }
      // Check if department has a department head assigned
      cov_cf7v579xf().s[129]++;
      if (department.departmentHeadUserId) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[36][0]++;
        cov_cf7v579xf().s[130]++;
        throw new Error('Cannot delete department with assigned department head. Please remove the department head first.');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[36][1]++;
      }
      // Hard delete department
      cov_cf7v579xf().s[131]++;
      await this.departmentModel.deleteDepartment(departmentId);
      /* istanbul ignore next */
      cov_cf7v579xf().s[132]++;
      await client.query('COMMIT');
      /* istanbul ignore next */
      cov_cf7v579xf().s[133]++;
      logger_1.default.info(`Department hard deleted successfully: ${department.name}`, {
        departmentId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[134]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[135]++;
      logger_1.default.error('Failed to hard delete department', {
        error: error.message,
        departmentId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[136]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[137]++;
      client.release();
    }
  }
  /**
   * Assign department head
   */
  async assignDepartmentHead(departmentId, userId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[9]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[138]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[139]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[140]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[141]++;
      await client.query('BEGIN');
      // Verify user is a department head
      const user =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[142]++, await this.userModel.findById(userId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[143]++;
      if (!user) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[37][0]++;
        cov_cf7v579xf().s[144]++;
        throw new Error('User not found');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[37][1]++;
      }
      cov_cf7v579xf().s[145]++;
      if (user.role !== 'department_head') {
        /* istanbul ignore next */
        cov_cf7v579xf().b[38][0]++;
        cov_cf7v579xf().s[146]++;
        throw new Error('User is not a department head');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[38][1]++;
      }
      // Check if user is already assigned to another department
      const existingAssignment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[147]++, await this.departmentModel.findByDepartmentHead(userId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[148]++;
      if (
      /* istanbul ignore next */
      (cov_cf7v579xf().b[40][0]++, existingAssignment) &&
      /* istanbul ignore next */
      (cov_cf7v579xf().b[40][1]++, existingAssignment.id !== departmentId)) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[39][0]++;
        cov_cf7v579xf().s[149]++;
        throw new Error('User is already assigned as head of another department');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[39][1]++;
      }
      // Update department
      cov_cf7v579xf().s[150]++;
      await this.departmentModel.assignDepartmentHead(departmentId, userId);
      /* istanbul ignore next */
      cov_cf7v579xf().s[151]++;
      await client.query('COMMIT');
      // Get updated department data
      const updatedDepartment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[152]++, await this.getDepartmentWithHead(departmentId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[153]++;
      logger_1.default.info(`Department head assigned successfully`, {
        departmentId,
        userId,
        departmentName: updatedDepartment.name
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[154]++;
      return updatedDepartment;
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[155]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[156]++;
      logger_1.default.error('Failed to assign department head', {
        error: error.message,
        departmentId,
        userId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[157]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[158]++;
      client.release();
    }
  }
  /**
   * Remove department head
   */
  async removeDepartmentHead(departmentId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[10]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[159]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[160]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[161]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[162]++;
      await client.query('BEGIN');
      // Update department
      /* istanbul ignore next */
      cov_cf7v579xf().s[163]++;
      await this.departmentModel.removeDepartmentHead(departmentId);
      /* istanbul ignore next */
      cov_cf7v579xf().s[164]++;
      await client.query('COMMIT');
      // Get updated department data
      const updatedDepartment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[165]++, await this.getDepartmentWithHead(departmentId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[166]++;
      logger_1.default.info(`Department head removed successfully`, {
        departmentId,
        departmentName: updatedDepartment.name
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[167]++;
      return updatedDepartment;
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[168]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[169]++;
      logger_1.default.error('Failed to remove department head', {
        error: error.message,
        departmentId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[170]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[171]++;
      client.release();
    }
  }
  /**
   * Get department statistics
   */
  async getDepartmentStats() {
    /* istanbul ignore next */
    cov_cf7v579xf().f[11]++;
    const query =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[172]++, `
      SELECT 
        COUNT(*) as total,
        COUNT(*) FILTER (WHERE is_active = true) as active,
        COUNT(*) FILTER (WHERE department_head_user_id IS NOT NULL) as with_heads,
        COUNT(*) FILTER (WHERE department_head_user_id IS NULL) as without_heads,
        COUNT(e.id) as total_employees
      FROM departments d
      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'
      WHERE d.is_active = true
    `);
    const result =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[173]++, await (0, database_1.getPool)().query(query));
    const stats =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[174]++, result.rows[0]);
    const total =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[175]++, parseInt(stats.total));
    const totalEmployees =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[176]++, parseInt(stats.total_employees));
    const averageEmployeesPerDepartment =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[177]++, total > 0 ?
    /* istanbul ignore next */
    (cov_cf7v579xf().b[41][0]++, totalEmployees / total) :
    /* istanbul ignore next */
    (cov_cf7v579xf().b[41][1]++, 0));
    /* istanbul ignore next */
    cov_cf7v579xf().s[178]++;
    return {
      total: total,
      active: parseInt(stats.active),
      withHeads: parseInt(stats.with_heads),
      withoutHeads: parseInt(stats.without_heads),
      totalEmployees,
      averageEmployeesPerDepartment: Math.round(averageEmployeesPerDepartment * 100) / 100
    };
  }
  /**
   * Get all department heads with pagination and filtering
   */
  async getDepartmentHeads(params) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[12]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[179]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[180]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[181]++;
    try {
      const {
        page,
        limit,
        search =
        /* istanbul ignore next */
        (cov_cf7v579xf().b[42][0]++, ''),
        status =
        /* istanbul ignore next */
        (cov_cf7v579xf().b[43][0]++, '')
      } =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[182]++, params);
      const offset =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[183]++, (page - 1) * limit);
      // Build WHERE clause
      let whereClause =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[184]++, "WHERE u.role = 'department_head'");
      const queryParams =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[185]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[186]++, 1);
      /* istanbul ignore next */
      cov_cf7v579xf().s[187]++;
      if (
      /* istanbul ignore next */
      (cov_cf7v579xf().b[45][0]++, search) &&
      /* istanbul ignore next */
      (cov_cf7v579xf().b[45][1]++, search.trim())) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[44][0]++;
        cov_cf7v579xf().s[188]++;
        whereClause += ` AND (u.first_name ILIKE $${paramIndex} OR u.last_name ILIKE $${paramIndex} OR u.email ILIKE $${paramIndex})`;
        /* istanbul ignore next */
        cov_cf7v579xf().s[189]++;
        queryParams.push(`%${search}%`);
        /* istanbul ignore next */
        cov_cf7v579xf().s[190]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[44][1]++;
      }
      cov_cf7v579xf().s[191]++;
      if (
      /* istanbul ignore next */
      (cov_cf7v579xf().b[47][0]++, status) &&
      /* istanbul ignore next */
      (cov_cf7v579xf().b[47][1]++, status.trim())) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[46][0]++;
        // Convert status to boolean for is_active column
        const isActive =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[192]++, status === 'active');
        /* istanbul ignore next */
        cov_cf7v579xf().s[193]++;
        whereClause += ` AND u.is_active = $${paramIndex}`;
        /* istanbul ignore next */
        cov_cf7v579xf().s[194]++;
        queryParams.push(isActive);
        /* istanbul ignore next */
        cov_cf7v579xf().s[195]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[46][1]++;
      }
      // Get total count
      const countQuery =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[196]++, `
        SELECT COUNT(*) as total
        FROM users u
        ${whereClause}
      `);
      const countResult =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[197]++, await client.query(countQuery, queryParams));
      const total =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[198]++, parseInt(countResult.rows[0].total));
      // Get department heads with their assigned departments
      const query =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[199]++, `
        SELECT 
          u.id,
          u.first_name,
          u.last_name,
          u.email,
          u.is_active,
          u.created_at,
          u.updated_at,
          d.id as department_id,
          d.name as department_name,
          d.description as department_description
        FROM users u
        LEFT JOIN departments d ON d.department_head_user_id = u.id
        ${whereClause}
        ORDER BY u.last_name, u.first_name
        LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
      `);
      /* istanbul ignore next */
      cov_cf7v579xf().s[200]++;
      queryParams.push(limit, offset);
      const result =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[201]++, await client.query(query, queryParams));
      const departmentHeads =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[202]++, result.rows.map(row => {
        /* istanbul ignore next */
        cov_cf7v579xf().f[13]++;
        cov_cf7v579xf().s[203]++;
        return {
          id: row.id,
          firstName: row.first_name,
          lastName: row.last_name,
          email: row.email,
          status: row.is_active ?
          /* istanbul ignore next */
          (cov_cf7v579xf().b[48][0]++, 'active') :
          /* istanbul ignore next */
          (cov_cf7v579xf().b[48][1]++, 'inactive'),
          createdAt: row.created_at,
          updatedAt: row.updated_at,
          department: row.department_id ?
          /* istanbul ignore next */
          (cov_cf7v579xf().b[49][0]++, {
            id: row.department_id,
            name: row.department_name,
            description: row.department_description
          }) :
          /* istanbul ignore next */
          (cov_cf7v579xf().b[49][1]++, null)
        };
      }));
      /* istanbul ignore next */
      cov_cf7v579xf().s[204]++;
      return {
        departmentHeads,
        total,
        page,
        limit,
        totalPages: Math.ceil(total / limit)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[205]++;
      logger_1.default.error('Failed to get department heads', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[206]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[207]++;
      client.release();
    }
  }
  /**
   * Get department head by ID
   */
  async getDepartmentHeadById(userId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[14]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[208]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[209]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[210]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[211]++, `
        SELECT 
          u.id,
          u.first_name,
          u.last_name,
          u.email,
          u.is_active,
          u.created_at,
          u.updated_at,
          d.id as department_id,
          d.name as department_name,
          d.description as department_description
        FROM users u
        LEFT JOIN departments d ON d.department_head_user_id = u.id
        WHERE u.id = $1 AND u.role = 'department_head'
      `);
      const result =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[212]++, await client.query(query, [userId]));
      /* istanbul ignore next */
      cov_cf7v579xf().s[213]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[50][0]++;
        cov_cf7v579xf().s[214]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[50][1]++;
      }
      const row =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[215]++, result.rows[0]);
      /* istanbul ignore next */
      cov_cf7v579xf().s[216]++;
      return {
        id: row.id,
        firstName: row.first_name,
        lastName: row.last_name,
        email: row.email,
        status: row.is_active ?
        /* istanbul ignore next */
        (cov_cf7v579xf().b[51][0]++, 'active') :
        /* istanbul ignore next */
        (cov_cf7v579xf().b[51][1]++, 'inactive'),
        createdAt: row.created_at,
        updatedAt: row.updated_at,
        department: row.department_id ?
        /* istanbul ignore next */
        (cov_cf7v579xf().b[52][0]++, {
          id: row.department_id,
          name: row.department_name,
          description: row.department_description
        }) :
        /* istanbul ignore next */
        (cov_cf7v579xf().b[52][1]++, null)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[217]++;
      logger_1.default.error('Failed to get department head by ID', {
        error: error.message,
        userId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[218]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[219]++;
      client.release();
    }
  }
  /**
   * Create a new department head user
   */
  async createDepartmentHead(data) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[15]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[220]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[221]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[222]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[223]++;
      await client.query('BEGIN');
      // Check if email already exists
      const existingUser =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[224]++, await client.query('SELECT id FROM users WHERE email = $1', [data.email]));
      /* istanbul ignore next */
      cov_cf7v579xf().s[225]++;
      if (existingUser.rows.length > 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[53][0]++;
        cov_cf7v579xf().s[226]++;
        throw new Error('Email already exists');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[53][1]++;
      }
      // Generate a temporary password for initial setup
      const temporaryPassword =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[227]++, this.generateTemporaryPassword());
      const hashedPassword =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[228]++, await bcrypt_1.default.hash(temporaryPassword, 10));
      const userQuery =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[229]++, `
        INSERT INTO users (first_name, last_name, email, password_hash, role, is_active)
        VALUES ($1, $2, $3, $4, 'department_head', true)
        RETURNING id, first_name, last_name, email, is_active, created_at, updated_at
      `);
      const userResult =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[230]++, await client.query(userQuery, [data.firstName, data.lastName, data.email, hashedPassword]));
      const newUser =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[231]++, userResult.rows[0]);
      // If department is specified, assign the user as department head
      /* istanbul ignore next */
      cov_cf7v579xf().s[232]++;
      if (data.departmentId) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[54][0]++;
        cov_cf7v579xf().s[233]++;
        await this.assignDepartmentHeadWithClient(client, data.departmentId, newUser.id);
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[54][1]++;
      }
      // Generate password setup token
      const setupToken =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[234]++, Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15));
      const setupTokenKey =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[235]++, `setup_token:${setupToken}`);
      // Store setup token in cache with user ID as value (expires in 24 hours)
      /* istanbul ignore next */
      cov_cf7v579xf().s[236]++;
      await redisService_1.redisService.setCache(setupTokenKey, newUser.id, 24 * 60 * 60);
      /* istanbul ignore next */
      cov_cf7v579xf().s[237]++;
      await client.query('COMMIT');
      // Send password setup email
      const emailSent =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[238]++, await emailService_1.emailService.sendDepartmentHeadPasswordSetupEmail(data.email, data.firstName, data.lastName, setupToken));
      /* istanbul ignore next */
      cov_cf7v579xf().s[239]++;
      if (!emailSent) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[55][0]++;
        cov_cf7v579xf().s[240]++;
        logger_1.default.warn('Failed to send password setup email to department head', {
          userId: newUser.id,
          email: data.email
        });
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[55][1]++;
      }
      // Get the complete department head data
      const departmentHead =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[241]++, await this.getDepartmentHeadById(newUser.id));
      /* istanbul ignore next */
      cov_cf7v579xf().s[242]++;
      logger_1.default.info('Department head created successfully', {
        userId: newUser.id,
        email: newUser.email,
        departmentId: data.departmentId,
        emailSent
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[243]++;
      return departmentHead;
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[244]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[245]++;
      logger_1.default.error('Failed to create department head', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[246]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[247]++;
      client.release();
    }
  }
  /**
   * Update department head
   */
  async updateDepartmentHead(userId, data) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[16]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[248]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[249]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[250]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[251]++;
      await client.query('BEGIN');
      // Check if user exists and is a department head
      const existingUser =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[252]++, await client.query('SELECT id, email FROM users WHERE id = $1 AND role = $2', [userId, 'department_head']));
      /* istanbul ignore next */
      cov_cf7v579xf().s[253]++;
      if (existingUser.rows.length === 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[56][0]++;
        cov_cf7v579xf().s[254]++;
        throw new Error('Department head not found');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[56][1]++;
      }
      // Check if email is being changed and if it already exists
      cov_cf7v579xf().s[255]++;
      if (
      /* istanbul ignore next */
      (cov_cf7v579xf().b[58][0]++, data.email) &&
      /* istanbul ignore next */
      (cov_cf7v579xf().b[58][1]++, data.email !== existingUser.rows[0].email)) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[57][0]++;
        const emailCheck =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[256]++, await client.query('SELECT id FROM users WHERE email = $1 AND id != $2', [data.email, userId]));
        /* istanbul ignore next */
        cov_cf7v579xf().s[257]++;
        if (emailCheck.rows.length > 0) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[59][0]++;
          cov_cf7v579xf().s[258]++;
          throw new Error('Email already exists');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[59][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[57][1]++;
      }
      // Update user data
      const updateFields =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[259]++, []);
      const updateValues =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[260]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[261]++, 1);
      /* istanbul ignore next */
      cov_cf7v579xf().s[262]++;
      if (data.firstName) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[60][0]++;
        cov_cf7v579xf().s[263]++;
        updateFields.push(`first_name = $${paramIndex}`);
        /* istanbul ignore next */
        cov_cf7v579xf().s[264]++;
        updateValues.push(data.firstName);
        /* istanbul ignore next */
        cov_cf7v579xf().s[265]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[60][1]++;
      }
      cov_cf7v579xf().s[266]++;
      if (data.lastName) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[61][0]++;
        cov_cf7v579xf().s[267]++;
        updateFields.push(`last_name = $${paramIndex}`);
        /* istanbul ignore next */
        cov_cf7v579xf().s[268]++;
        updateValues.push(data.lastName);
        /* istanbul ignore next */
        cov_cf7v579xf().s[269]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[61][1]++;
      }
      cov_cf7v579xf().s[270]++;
      if (data.email) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[62][0]++;
        cov_cf7v579xf().s[271]++;
        updateFields.push(`email = $${paramIndex}`);
        /* istanbul ignore next */
        cov_cf7v579xf().s[272]++;
        updateValues.push(data.email);
        /* istanbul ignore next */
        cov_cf7v579xf().s[273]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[62][1]++;
      }
      cov_cf7v579xf().s[274]++;
      if (data.status) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[63][0]++;
        cov_cf7v579xf().s[275]++;
        updateFields.push(`is_active = $${paramIndex}`);
        /* istanbul ignore next */
        cov_cf7v579xf().s[276]++;
        updateValues.push(data.status === 'active');
        /* istanbul ignore next */
        cov_cf7v579xf().s[277]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[63][1]++;
      }
      let updatedUserData =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[278]++, null);
      /* istanbul ignore next */
      cov_cf7v579xf().s[279]++;
      if (updateFields.length > 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[64][0]++;
        cov_cf7v579xf().s[280]++;
        updateFields.push(`updated_at = CURRENT_TIMESTAMP`);
        /* istanbul ignore next */
        cov_cf7v579xf().s[281]++;
        updateValues.push(userId);
        const updateQuery =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[282]++, `
          UPDATE users 
          SET ${updateFields.join(', ')}
          WHERE id = $${paramIndex}
          RETURNING id, first_name, last_name, email, is_active, created_at, updated_at
        `);
        const updateResult =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[283]++, await client.query(updateQuery, updateValues));
        /* istanbul ignore next */
        cov_cf7v579xf().s[284]++;
        updatedUserData = updateResult.rows[0];
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[64][1]++;
      }
      // Handle department assignment
      cov_cf7v579xf().s[285]++;
      if (data.departmentId !== undefined) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[65][0]++;
        cov_cf7v579xf().s[286]++;
        // First, remove from current department if any
        await client.query('UPDATE departments SET department_head_user_id = NULL WHERE department_head_user_id = $1', [userId]);
        // Assign to new department if specified
        /* istanbul ignore next */
        cov_cf7v579xf().s[287]++;
        if (data.departmentId) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[66][0]++;
          // Verify the user has department_head role
          const userQuery =
          /* istanbul ignore next */
          (cov_cf7v579xf().s[288]++, 'SELECT role FROM users WHERE id = $1');
          const userResult =
          /* istanbul ignore next */
          (cov_cf7v579xf().s[289]++, await client.query(userQuery, [userId]));
          /* istanbul ignore next */
          cov_cf7v579xf().s[290]++;
          if (userResult.rows.length === 0) {
            /* istanbul ignore next */
            cov_cf7v579xf().b[67][0]++;
            cov_cf7v579xf().s[291]++;
            throw new Error('User not found');
          } else
          /* istanbul ignore next */
          {
            cov_cf7v579xf().b[67][1]++;
          }
          cov_cf7v579xf().s[292]++;
          if (userResult.rows[0].role !== 'department_head') {
            /* istanbul ignore next */
            cov_cf7v579xf().b[68][0]++;
            cov_cf7v579xf().s[293]++;
            throw new Error('User must have department_head role');
          } else
          /* istanbul ignore next */
          {
            cov_cf7v579xf().b[68][1]++;
          }
          // Update the department within the same transaction
          cov_cf7v579xf().s[294]++;
          await client.query('UPDATE departments SET department_head_user_id = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2', [userId, data.departmentId]);
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[66][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[65][1]++;
      }
      cov_cf7v579xf().s[295]++;
      await client.query('COMMIT');
      // Return updated department head data from transaction
      /* istanbul ignore next */
      cov_cf7v579xf().s[296]++;
      logger_1.default.info('Transaction committed successfully', {
        userId
      });
      const result =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[297]++, {
        id:
        /* istanbul ignore next */
        (cov_cf7v579xf().b[69][0]++, updatedUserData?.id) ||
        /* istanbul ignore next */
        (cov_cf7v579xf().b[69][1]++, userId),
        firstName:
        /* istanbul ignore next */
        (cov_cf7v579xf().b[70][0]++, updatedUserData?.first_name) ||
        /* istanbul ignore next */
        (cov_cf7v579xf().b[70][1]++, data.firstName),
        lastName:
        /* istanbul ignore next */
        (cov_cf7v579xf().b[71][0]++, updatedUserData?.last_name) ||
        /* istanbul ignore next */
        (cov_cf7v579xf().b[71][1]++, data.lastName),
        email:
        /* istanbul ignore next */
        (cov_cf7v579xf().b[72][0]++, updatedUserData?.email) ||
        /* istanbul ignore next */
        (cov_cf7v579xf().b[72][1]++, data.email),
        status: updatedUserData?.is_active ?
        /* istanbul ignore next */
        (cov_cf7v579xf().b[73][0]++, 'active') :
        /* istanbul ignore next */
        (cov_cf7v579xf().b[73][1]++, 'inactive'),
        createdAt: updatedUserData?.created_at,
        updatedAt: updatedUserData?.updated_at,
        department: data.departmentId ?
        /* istanbul ignore next */
        (cov_cf7v579xf().b[74][0]++, {
          id: data.departmentId,
          name: null,
          // We'll need to fetch this separately if needed
          description: null
        }) :
        /* istanbul ignore next */
        (cov_cf7v579xf().b[74][1]++, null)
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[298]++;
      logger_1.default.info('Department head updated successfully', {
        userId,
        departmentId: data.departmentId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[299]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[300]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[301]++;
      logger_1.default.error('Failed to update department head', {
        error: error.message,
        userId,
        data
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[302]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[303]++;
      client.release();
    }
  }
  /**
   * Delete department head
   */
  async deleteDepartmentHead(userId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[17]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[304]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[305]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[306]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[307]++;
      await client.query('BEGIN');
      // Check if user exists and is a department head
      const existingUser =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[308]++, await client.query('SELECT id FROM users WHERE id = $1 AND role = $2', [userId, 'department_head']));
      /* istanbul ignore next */
      cov_cf7v579xf().s[309]++;
      if (existingUser.rows.length === 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[75][0]++;
        cov_cf7v579xf().s[310]++;
        throw new Error('Department head not found');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[75][1]++;
      }
      // Remove from any assigned department
      cov_cf7v579xf().s[311]++;
      await client.query('UPDATE departments SET department_head_user_id = NULL WHERE department_head_user_id = $1', [userId]);
      // Delete the user
      /* istanbul ignore next */
      cov_cf7v579xf().s[312]++;
      await client.query('DELETE FROM users WHERE id = $1', [userId]);
      /* istanbul ignore next */
      cov_cf7v579xf().s[313]++;
      await client.query('COMMIT');
      /* istanbul ignore next */
      cov_cf7v579xf().s[314]++;
      logger_1.default.info('Department head deleted successfully', {
        userId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[315]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[316]++;
      logger_1.default.error('Failed to delete department head', {
        error: error.message,
        userId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[317]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[318]++;
      client.release();
    }
  }
  /**
   * Assign department head using a specific database client (for transactions)
   */
  async assignDepartmentHeadWithClient(client, departmentId, userId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[18]++;
    // First verify the user has department_head role
    const userQuery =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[319]++, 'SELECT role FROM users WHERE id = $1');
    const userResult =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[320]++, await client.query(userQuery, [userId]));
    /* istanbul ignore next */
    cov_cf7v579xf().s[321]++;
    if (userResult.rows.length === 0) {
      /* istanbul ignore next */
      cov_cf7v579xf().b[76][0]++;
      cov_cf7v579xf().s[322]++;
      throw new Error('User not found');
    } else
    /* istanbul ignore next */
    {
      cov_cf7v579xf().b[76][1]++;
    }
    cov_cf7v579xf().s[323]++;
    if (userResult.rows[0].role !== 'department_head') {
      /* istanbul ignore next */
      cov_cf7v579xf().b[77][0]++;
      cov_cf7v579xf().s[324]++;
      throw new Error('User must have department_head role');
    } else
    /* istanbul ignore next */
    {
      cov_cf7v579xf().b[77][1]++;
    }
    // Update the department
    const updateQuery =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[325]++, 'UPDATE departments SET department_head_user_id = $1 WHERE id = $2');
    /* istanbul ignore next */
    cov_cf7v579xf().s[326]++;
    await client.query(updateQuery, [userId, departmentId]);
  }
  /**
   * Generate temporary password for new department heads
   */
  generateTemporaryPassword() {
    /* istanbul ignore next */
    cov_cf7v579xf().f[19]++;
    const chars =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[327]++, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');
    let password =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[328]++, '');
    /* istanbul ignore next */
    cov_cf7v579xf().s[329]++;
    for (let i =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[330]++, 0); i < 8; i++) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[331]++;
      password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    /* istanbul ignore next */
    cov_cf7v579xf().s[332]++;
    return password;
  }
  /**
   * Get employees in a department
   */
  async getDepartmentEmployees(departmentId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[20]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[333]++, (0, database_1.getPool)());
    const query =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[334]++, `
      SELECT 
        e.id,
        e.user_id as "userId",
        e.employee_id as "employeeId",
        u.email,
        u.first_name as "firstName",
        u.last_name as "lastName",
        e.department_id as "departmentId",
        d.name as "departmentName",
        e.position,
        e.employment_type as "employmentType",
        e.hire_date as "hireDate",
        e.base_salary as "baseSalary",
        e.status,
        e.created_at as "createdAt",
        e.updated_at as "updatedAt"
      FROM employees e
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      WHERE e.department_id = $1
      ORDER BY u.last_name, u.first_name
    `);
    const result =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[335]++, await pool.query(query, [departmentId]));
    /* istanbul ignore next */
    cov_cf7v579xf().s[336]++;
    return result.rows;
  }
}
/* istanbul ignore next */
cov_cf7v579xf().s[337]++;
exports.DepartmentService = DepartmentService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,