7c305c8cab70fd67a68eefdca36e3899
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const attendanceService_1 = require("../../../src/services/attendance/attendanceService");
const testHelpers_1 = require("../../utils/testHelpers");
const setup_1 = require("../../setup");
describe('AttendanceService', () => {
    let testHelpers;
    let createdUserIds = [];
    let createdEmployeeIds = [];
    let createdDepartmentIds = [];
    beforeAll(async () => {
        const { testDbPool } = await (0, setup_1.initializeTestConnections)();
        testHelpers = new testHelpers_1.TestHelpers(testDbPool);
    });
    afterEach(async () => {
        // Clean up created data after each test
        for (const employeeId of createdEmployeeIds) {
            try {
                await testHelpers.deleteEmployee(employeeId);
            }
            catch (error) {
                // Ignore cleanup errors
            }
        }
        for (const userId of createdUserIds) {
            try {
                await testHelpers.deleteUser(userId);
            }
            catch (error) {
                // Ignore cleanup errors
            }
        }
        for (const departmentId of createdDepartmentIds) {
            try {
                await testHelpers.deleteDepartment(departmentId);
            }
            catch (error) {
                // Ignore cleanup errors
            }
        }
        createdUserIds = [];
        createdEmployeeIds = [];
        createdDepartmentIds = [];
    });
    describe('clockIn', () => {
        it('should successfully clock in employee', async () => {
            // Arrange
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            const employee = await testHelpers.createTestEmployee({
                departmentId: department.id,
                employmentType: 'regular'
            });
            createdEmployeeIds.push(employee.id);
            createdUserIds.push(employee.userId);
            const clockInData = {
                employeeId: employee.id,
                qrCodeHash: 'test-qr-hash',
                timestamp: new Date('2025-01-15T08:00:00Z'),
                selfieImagePath: '/uploads/selfies/test-selfie.jpg'
            };
            // Act
            const result = await attendanceService_1.attendanceService.clockIn(clockInData);
            // Assert
            expect(result).toHaveProperty('employeeId');
            expect(result).toHaveProperty('date');
            expect(result).toHaveProperty('sessions');
            expect(result.employeeId).toBe(employee.id);
        });
        it('should handle clock in for non-existent employee', async () => {
            // Arrange
            const clockInData = {
                employeeId: 'non-existent-id',
                qrCodeHash: 'test-qr-hash',
                timestamp: new Date('2025-01-15T08:00:00Z'),
                selfieImagePath: '/uploads/selfies/test-selfie.jpg'
            };
            // Act & Assert
            await expect(attendanceService_1.attendanceService.clockIn(clockInData)).rejects.toThrow('Employee not found');
        });
    });
    describe('clockOut', () => {
        it('should successfully clock out employee', async () => {
            // Arrange
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            const employee = await testHelpers.createTestEmployee({
                departmentId: department.id,
                employmentType: 'regular'
            });
            createdEmployeeIds.push(employee.id);
            createdUserIds.push(employee.userId);
            // First clock in
            const clockInData = {
                employeeId: employee.id,
                qrCodeHash: 'test-qr-hash',
                timestamp: new Date('2025-01-15T08:00:00Z'),
                selfieImagePath: '/uploads/selfies/test-selfie.jpg'
            };
            await attendanceService_1.attendanceService.clockIn(clockInData);
            const clockOutData = {
                employeeId: employee.id,
                qrCodeHash: 'test-qr-hash',
                timestamp: new Date('2025-01-15T12:00:00Z'),
                selfieImagePath: '/uploads/selfies/test-selfie-out.jpg'
            };
            // Act
            const result = await attendanceService_1.attendanceService.clockOut(clockOutData);
            // Assert
            expect(result).toHaveProperty('employeeId');
            expect(result).toHaveProperty('totalHours');
            expect(result.totalHours).toBeGreaterThan(0);
        });
        it('should handle clock out without clock in', async () => {
            // Arrange
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            const employee = await testHelpers.createTestEmployee({
                departmentId: department.id,
                employmentType: 'regular'
            });
            createdEmployeeIds.push(employee.id);
            createdUserIds.push(employee.userId);
            const clockOutData = {
                employeeId: employee.id,
                qrCodeHash: 'test-qr-hash',
                timestamp: new Date('2025-01-15T12:00:00Z'),
                selfieImagePath: '/uploads/selfies/test-selfie-out.jpg'
            };
            // Act & Assert
            await expect(attendanceService_1.attendanceService.clockOut(clockOutData)).rejects.toThrow();
        });
    });
    describe('getAttendanceSummary', () => {
        it('should get attendance summary for employee and date', async () => {
            // Arrange
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            const employee = await testHelpers.createTestEmployee({
                departmentId: department.id,
                employmentType: 'regular'
            });
            createdEmployeeIds.push(employee.id);
            createdUserIds.push(employee.userId);
            const date = new Date('2025-01-15');
            // Act
            const result = await attendanceService_1.attendanceService.getAttendanceSummary(employee.id, date);
            // Assert
            expect(result).toHaveProperty('employeeId');
            expect(result).toHaveProperty('date');
            expect(result.employeeId).toBe(employee.id);
        });
    });
    describe('getEmployeeAttendanceHistory', () => {
        it('should get attendance history for employee', async () => {
            // Arrange
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            const employee = await testHelpers.createTestEmployee({
                departmentId: department.id,
                employmentType: 'regular'
            });
            createdEmployeeIds.push(employee.id);
            createdUserIds.push(employee.userId);
            const startDate = new Date('2025-01-01');
            const endDate = new Date('2025-01-31');
            // Act
            const result = await attendanceService_1.attendanceService.getEmployeeAttendanceHistory(employee.id, startDate, endDate);
            // Assert
            expect(Array.isArray(result)).toBe(true);
        });
    });
    describe('getEmployeeAttendanceStats', () => {
        it('should get attendance stats for employee', async () => {
            // Arrange
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            const employee = await testHelpers.createTestEmployee({
                departmentId: department.id,
                employmentType: 'regular'
            });
            createdEmployeeIds.push(employee.id);
            createdUserIds.push(employee.userId);
            const startDate = new Date('2025-01-01');
            const endDate = new Date('2025-01-31');
            // Act
            const result = await attendanceService_1.attendanceService.getEmployeeAttendanceStats(employee.id, startDate, endDate);
            // Assert
            expect(result).toHaveProperty('totalDays');
            expect(result).toHaveProperty('presentDays');
            expect(result).toHaveProperty('lateDays');
            expect(result).toHaveProperty('absentDays');
            expect(result).toHaveProperty('totalHours');
            expect(typeof result.totalDays).toBe('number');
            expect(typeof result.presentDays).toBe('number');
            expect(typeof result.lateDays).toBe('number');
            expect(typeof result.absentDays).toBe('number');
            expect(typeof result.totalHours).toBe('number');
        });
    });
    describe('getAttendanceRecords', () => {
        it('should get attendance records', async () => {
            // Arrange
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            const employee = await testHelpers.createTestEmployee({
                departmentId: department.id,
                employmentType: 'regular'
            });
            createdEmployeeIds.push(employee.id);
            createdUserIds.push(employee.userId);
            const startDate = new Date('2025-01-01');
            const endDate = new Date('2025-01-31');
            // Act
            const result = await attendanceService_1.attendanceService.getAttendanceRecords(startDate, endDate);
            // Assert
            expect(result).toHaveProperty('records');
            expect(result).toHaveProperty('total');
            expect(Array.isArray(result.records)).toBe(true);
            expect(typeof result.total).toBe('number');
        });
    });
    describe('validateAttendanceAction', () => {
        it('should validate attendance action', async () => {
            // Act
            const result = await attendanceService_1.attendanceService.validateAttendanceAction('valid-employee-id', 'morning_in');
            // Assert
            expect(result).toHaveProperty('canPerform');
            expect(typeof result.canPerform).toBe('boolean');
        });
    });
    describe('verifyQRCode', () => {
        it('should verify QR code', async () => {
            // Act
            const result = await attendanceService_1.attendanceService.verifyQRCode('test-qr-hash');
            // Assert
            expect(result).toHaveProperty('isValid');
            expect(typeof result.isValid).toBe('boolean');
        });
    });
    describe('getCurrentAttendanceStatus', () => {
        it('should get current attendance status', async () => {
            // Arrange
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            const employee = await testHelpers.createTestEmployee({
                departmentId: department.id,
                employmentType: 'regular'
            });
            createdEmployeeIds.push(employee.id);
            createdUserIds.push(employee.userId);
            // Act
            const result = await attendanceService_1.attendanceService.getCurrentAttendanceStatus(employee.id);
            // Assert
            expect(result).toHaveProperty('isClockedIn');
            expect(result).toHaveProperty('currentSession');
            expect(typeof result.isClockedIn).toBe('boolean');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,