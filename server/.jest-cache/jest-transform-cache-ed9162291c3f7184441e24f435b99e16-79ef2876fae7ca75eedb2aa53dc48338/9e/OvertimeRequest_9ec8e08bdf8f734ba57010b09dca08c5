d9c8c59bcc67cc0b5e28d552d8f5e379
"use strict";

/* istanbul ignore next */
function cov_vpzgbmvrw() {
  var path = "/home/kim/tito/server/src/models/attendance/OvertimeRequest.ts";
  var hash = "67cfd540275de7515c18c1e33abc7fe1ef5f17a9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/models/attendance/OvertimeRequest.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 69
        }
      },
      "2": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 51
        }
      },
      "3": {
        start: {
          line: 10,
          column: 22
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "4": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "5": {
        start: {
          line: 32,
          column: 26
        },
        end: {
          line: 32,
          column: 51
        }
      },
      "6": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "7": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 60
        }
      },
      "8": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 46
        }
      },
      "9": {
        start: {
          line: 40,
          column: 13
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "10": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 213
        }
      },
      "11": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 38
        }
      },
      "12": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "13": {
        start: {
          line: 48,
          column: 26
        },
        end: {
          line: 48,
          column: 49
        }
      },
      "14": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "15": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 58
        }
      },
      "16": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 42
        }
      },
      "17": {
        start: {
          line: 56,
          column: 13
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "18": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 205
        }
      },
      "19": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 36
        }
      },
      "20": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 70,
          column: 11
        }
      },
      "21": {
        start: {
          line: 71,
          column: 23
        },
        end: {
          line: 79,
          column: 10
        }
      },
      "22": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 30
        }
      },
      "23": {
        start: {
          line: 86,
          column: 22
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "24": {
        start: {
          line: 103,
          column: 23
        },
        end: {
          line: 103,
          column: 73
        }
      },
      "25": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 62
        }
      },
      "26": {
        start: {
          line: 110,
          column: 22
        },
        end: {
          line: 134,
          column: 5
        }
      },
      "27": {
        start: {
          line: 135,
          column: 23
        },
        end: {
          line: 135,
          column: 73
        }
      },
      "28": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 62
        }
      },
      "29": {
        start: {
          line: 142,
          column: 29
        },
        end: {
          line: 142,
          column: 31
        }
      },
      "30": {
        start: {
          line: 143,
          column: 29
        },
        end: {
          line: 143,
          column: 31
        }
      },
      "31": {
        start: {
          line: 144,
          column: 25
        },
        end: {
          line: 144,
          column: 26
        }
      },
      "32": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "33": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 57
        }
      },
      "34": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 43
        }
      },
      "35": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 25
        }
      },
      "36": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "37": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 62
        }
      },
      "38": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 47
        }
      },
      "39": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 25
        }
      },
      "40": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "41": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 62
        }
      },
      "42": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 47
        }
      },
      "43": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 25
        }
      },
      "44": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "45": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 37
        }
      },
      "46": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 60
        }
      },
      "47": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 30
        }
      },
      "48": {
        start: {
          line: 165,
          column: 22
        },
        end: {
          line: 182,
          column: 5
        }
      },
      "49": {
        start: {
          line: 183,
          column: 23
        },
        end: {
          line: 183,
          column: 81
        }
      },
      "50": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 62
        }
      },
      "51": {
        start: {
          line: 190,
          column: 146
        },
        end: {
          line: 190,
          column: 152
        }
      },
      "52": {
        start: {
          line: 192,
          column: 35
        },
        end: {
          line: 192,
          column: 89
        }
      },
      "53": {
        start: {
          line: 193,
          column: 28
        },
        end: {
          line: 193,
          column: 87
        }
      },
      "54": {
        start: {
          line: 195,
          column: 31
        },
        end: {
          line: 195,
          column: 115
        }
      },
      "55": {
        start: {
          line: 196,
          column: 23
        },
        end: {
          line: 196,
          column: 41
        }
      },
      "56": {
        start: {
          line: 197,
          column: 32
        },
        end: {
          line: 197,
          column: 34
        }
      },
      "57": {
        start: {
          line: 198,
          column: 28
        },
        end: {
          line: 198,
          column: 30
        }
      },
      "58": {
        start: {
          line: 199,
          column: 25
        },
        end: {
          line: 199,
          column: 26
        }
      },
      "59": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "60": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 69
        }
      },
      "61": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 41
        }
      },
      "62": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 25
        }
      },
      "63": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "64": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 69
        }
      },
      "65": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 43
        }
      },
      "66": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 25
        }
      },
      "67": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "68": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 64
        }
      },
      "69": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 37
        }
      },
      "70": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 25
        }
      },
      "71": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "72": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 71
        }
      },
      "73": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 40
        }
      },
      "74": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 25
        }
      },
      "75": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "76": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 71
        }
      },
      "77": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 38
        }
      },
      "78": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 25
        }
      },
      "79": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "80": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 171
        }
      },
      "81": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 44
        }
      },
      "82": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 25
        }
      },
      "83": {
        start: {
          line: 231,
          column: 28
        },
        end: {
          line: 231,
          column: 102
        }
      },
      "84": {
        start: {
          line: 233,
          column: 27
        },
        end: {
          line: 240,
          column: 5
        }
      },
      "85": {
        start: {
          line: 241,
          column: 28
        },
        end: {
          line: 241,
          column: 90
        }
      },
      "86": {
        start: {
          line: 242,
          column: 22
        },
        end: {
          line: 242,
          column: 57
        }
      },
      "87": {
        start: {
          line: 244,
          column: 26
        },
        end: {
          line: 270,
          column: 5
        }
      },
      "88": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 40
        }
      },
      "89": {
        start: {
          line: 272,
          column: 23
        },
        end: {
          line: 272,
          column: 84
        }
      },
      "90": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 279,
          column: 10
        }
      },
      "91": {
        start: {
          line: 285,
          column: 22
        },
        end: {
          line: 311,
          column: 5
        }
      },
      "92": {
        start: {
          line: 312,
          column: 23
        },
        end: {
          line: 312,
          column: 91
        }
      },
      "93": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 27
        }
      },
      "94": {
        start: {
          line: 319,
          column: 32
        },
        end: {
          line: 319,
          column: 34
        }
      },
      "95": {
        start: {
          line: 320,
          column: 28
        },
        end: {
          line: 320,
          column: 30
        }
      },
      "96": {
        start: {
          line: 321,
          column: 25
        },
        end: {
          line: 321,
          column: 26
        }
      },
      "97": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "98": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 65
        }
      },
      "99": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 41
        }
      },
      "100": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 25
        }
      },
      "101": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 331,
          column: 9
        }
      },
      "102": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 115
        }
      },
      "103": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 43
        }
      },
      "104": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 25
        }
      },
      "105": {
        start: {
          line: 332,
          column: 28
        },
        end: {
          line: 332,
          column: 102
        }
      },
      "106": {
        start: {
          line: 333,
          column: 22
        },
        end: {
          line: 343,
          column: 5
        }
      },
      "107": {
        start: {
          line: 344,
          column: 23
        },
        end: {
          line: 344,
          column: 80
        }
      },
      "108": {
        start: {
          line: 345,
          column: 22
        },
        end: {
          line: 345,
          column: 36
        }
      },
      "109": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 353,
          column: 10
        }
      },
      "110": {
        start: {
          line: 359,
          column: 22
        },
        end: {
          line: 359,
          column: 67
        }
      },
      "111": {
        start: {
          line: 360,
          column: 23
        },
        end: {
          line: 360,
          column: 73
        }
      },
      "112": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 361,
          column: 61
        }
      },
      "113": {
        start: {
          line: 367,
          column: 22
        },
        end: {
          line: 367,
          column: 71
        }
      },
      "114": {
        start: {
          line: 368,
          column: 23
        },
        end: {
          line: 368,
          column: 67
        }
      },
      "115": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 369,
          column: 46
        }
      },
      "116": {
        start: {
          line: 372,
          column: 0
        },
        end: {
          line: 372,
          column: 52
        }
      },
      "117": {
        start: {
          line: 373,
          column: 0
        },
        end: {
          line: 373,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 38
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 23
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 85
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 34
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 109
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 42
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 141
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 44
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 189
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 68
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 284
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 318,
            column: 4
          },
          end: {
            line: 318,
            column: 5
          }
        },
        loc: {
          start: {
            line: 318,
            column: 60
          },
          end: {
            line: 354,
            column: 5
          }
        },
        line: 318
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 358,
            column: 4
          },
          end: {
            line: 358,
            column: 5
          }
        },
        loc: {
          start: {
            line: 358,
            column: 36
          },
          end: {
            line: 362,
            column: 5
          }
        },
        line: 358
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 366,
            column: 4
          },
          end: {
            line: 366,
            column: 5
          }
        },
        loc: {
          start: {
            line: 366,
            column: 36
          },
          end: {
            line: 370,
            column: 5
          }
        },
        line: 366
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: 40,
            column: 13
          },
          end: {
            line: 45,
            column: 9
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        }, {
          start: {
            line: 36,
            column: 17
          },
          end: {
            line: 38,
            column: 13
          }
        }],
        line: 33
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 13
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 13
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: 43,
            column: 13
          },
          end: {
            line: 45,
            column: 9
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 40,
            column: 17
          },
          end: {
            line: 40,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 17
          },
          end: {
            line: 40,
            column: 47
          }
        }, {
          start: {
            line: 40,
            column: 51
          },
          end: {
            line: 40,
            column: 83
          }
        }],
        line: 40
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: 56,
            column: 13
          },
          end: {
            line: 61,
            column: 9
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        }, {
          start: {
            line: 52,
            column: 17
          },
          end: {
            line: 54,
            column: 13
          }
        }],
        line: 49
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 13
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 13
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: 59,
            column: 13
          },
          end: {
            line: 61,
            column: 9
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 56,
            column: 17
          },
          end: {
            line: 56,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 17
          },
          end: {
            line: 56,
            column: 45
          }
        }, {
          start: {
            line: 56,
            column: 49
          },
          end: {
            line: 56,
            column: 79
          }
        }],
        line: 56
      },
      "8": {
        loc: {
          start: {
            line: 104,
            column: 15
          },
          end: {
            line: 104,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 40
          },
          end: {
            line: 104,
            column: 54
          }
        }, {
          start: {
            line: 104,
            column: 57
          },
          end: {
            line: 104,
            column: 61
          }
        }],
        line: 104
      },
      "9": {
        loc: {
          start: {
            line: 136,
            column: 15
          },
          end: {
            line: 136,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 40
          },
          end: {
            line: 136,
            column: 54
          }
        }, {
          start: {
            line: 136,
            column: 57
          },
          end: {
            line: 136,
            column: 61
          }
        }],
        line: 136
      },
      "10": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "11": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "12": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "13": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "14": {
        loc: {
          start: {
            line: 184,
            column: 15
          },
          end: {
            line: 184,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 184,
            column: 40
          },
          end: {
            line: 184,
            column: 54
          }
        }, {
          start: {
            line: 184,
            column: 57
          },
          end: {
            line: 184,
            column: 61
          }
        }],
        line: 184
      },
      "15": {
        loc: {
          start: {
            line: 189,
            column: 31
          },
          end: {
            line: 189,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 189,
            column: 40
          },
          end: {
            line: 189,
            column: 42
          }
        }],
        line: 189
      },
      "16": {
        loc: {
          start: {
            line: 190,
            column: 16
          },
          end: {
            line: 190,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 190,
            column: 23
          },
          end: {
            line: 190,
            column: 24
          }
        }],
        line: 190
      },
      "17": {
        loc: {
          start: {
            line: 190,
            column: 26
          },
          end: {
            line: 190,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 190,
            column: 34
          },
          end: {
            line: 190,
            column: 36
          }
        }],
        line: 190
      },
      "18": {
        loc: {
          start: {
            line: 190,
            column: 100
          },
          end: {
            line: 190,
            column: 121
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 190,
            column: 109
          },
          end: {
            line: 190,
            column: 121
          }
        }],
        line: 190
      },
      "19": {
        loc: {
          start: {
            line: 190,
            column: 123
          },
          end: {
            line: 190,
            column: 141
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 190,
            column: 135
          },
          end: {
            line: 190,
            column: 141
          }
        }],
        line: 190
      },
      "20": {
        loc: {
          start: {
            line: 193,
            column: 28
          },
          end: {
            line: 193,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 193,
            column: 66
          },
          end: {
            line: 193,
            column: 72
          }
        }, {
          start: {
            line: 193,
            column: 75
          },
          end: {
            line: 193,
            column: 87
          }
        }],
        line: 193
      },
      "21": {
        loc: {
          start: {
            line: 195,
            column: 31
          },
          end: {
            line: 195,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 83
          },
          end: {
            line: 195,
            column: 106
          }
        }, {
          start: {
            line: 195,
            column: 109
          },
          end: {
            line: 195,
            column: 115
          }
        }],
        line: 195
      },
      "22": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "23": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "24": {
        loc: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "25": {
        loc: {
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "26": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "27": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "28": {
        loc: {
          start: {
            line: 231,
            column: 28
          },
          end: {
            line: 231,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 231,
            column: 57
          },
          end: {
            line: 231,
            column: 97
          }
        }, {
          start: {
            line: 231,
            column: 100
          },
          end: {
            line: 231,
            column: 102
          }
        }],
        line: 231
      },
      "29": {
        loc: {
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "30": {
        loc: {
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 331,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 331,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "31": {
        loc: {
          start: {
            line: 332,
            column: 28
          },
          end: {
            line: 332,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 332,
            column: 57
          },
          end: {
            line: 332,
            column: 97
          }
        }, {
          start: {
            line: 332,
            column: 100
          },
          end: {
            line: 332,
            column: 102
          }
        }],
        line: 332
      },
      "32": {
        loc: {
          start: {
            line: 347,
            column: 27
          },
          end: {
            line: 347,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 27
          },
          end: {
            line: 347,
            column: 57
          }
        }, {
          start: {
            line: 347,
            column: 61
          },
          end: {
            line: 347,
            column: 62
          }
        }],
        line: 347
      },
      "33": {
        loc: {
          start: {
            line: 348,
            column: 29
          },
          end: {
            line: 348,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 29
          },
          end: {
            line: 348,
            column: 61
          }
        }, {
          start: {
            line: 348,
            column: 65
          },
          end: {
            line: 348,
            column: 66
          }
        }],
        line: 348
      },
      "34": {
        loc: {
          start: {
            line: 349,
            column: 30
          },
          end: {
            line: 349,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 349,
            column: 30
          },
          end: {
            line: 349,
            column: 63
          }
        }, {
          start: {
            line: 349,
            column: 67
          },
          end: {
            line: 349,
            column: 68
          }
        }],
        line: 349
      },
      "35": {
        loc: {
          start: {
            line: 350,
            column: 30
          },
          end: {
            line: 350,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 350,
            column: 30
          },
          end: {
            line: 350,
            column: 63
          }
        }, {
          start: {
            line: 350,
            column: 67
          },
          end: {
            line: 350,
            column: 68
          }
        }],
        line: 350
      },
      "36": {
        loc: {
          start: {
            line: 351,
            column: 24
          },
          end: {
            line: 351,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 351,
            column: 24
          },
          end: {
            line: 351,
            column: 53
          }
        }, {
          start: {
            line: 351,
            column: 57
          },
          end: {
            line: 351,
            column: 58
          }
        }],
        line: 351
      },
      "37": {
        loc: {
          start: {
            line: 352,
            column: 27
          },
          end: {
            line: 352,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 352,
            column: 27
          },
          end: {
            line: 352,
            column: 59
          }
        }, {
          start: {
            line: 352,
            column: 63
          },
          end: {
            line: 352,
            column: 64
          }
        }],
        line: 352
      },
      "38": {
        loc: {
          start: {
            line: 361,
            column: 15
          },
          end: {
            line: 361,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 361,
            column: 33
          },
          end: {
            line: 361,
            column: 52
          }
        }, {
          start: {
            line: 361,
            column: 55
          },
          end: {
            line: 361,
            column: 60
          }
        }],
        line: 361
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0],
      "17": [0],
      "18": [0],
      "19": [0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/models/attendance/OvertimeRequest.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/models/attendance/OvertimeRequest.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\n\nexport interface OvertimeRequest {\n  id: string;\n  employeeId: string;\n  requestDate: Date;\n  startTime: Date;\n  endTime: Date;\n  requestedHours: number;\n  reason: string;\n  status: 'pending' | 'approved' | 'rejected';\n  approvedBy: string | null;\n  approvedAt: Date | null;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface OvertimeRequestWithDetails extends OvertimeRequest {\n  employeeCode: string;\n  employeeName: string;\n  departmentName: string | null;\n  approverName: string | null;\n}\n\nexport interface CreateOvertimeRequestData {\n  employeeId: string;\n  requestDate: Date;\n  startTime: Date | string;\n  endTime: Date | string;\n  requestedHours: number;\n  reason: string;\n}\n\nexport interface UpdateOvertimeRequestData {\n  status?: 'pending' | 'approved' | 'rejected';\n  approvedBy?: string;\n  approvedAt?: Date;\n}\n\nexport interface OvertimeRequestListParams {\n  page?: number | undefined;\n  limit?: number | undefined;\n  employeeId?: string | undefined;\n  departmentId?: string | undefined;\n  status?: 'pending' | 'approved' | 'rejected' | undefined;\n  startDate?: Date | undefined;\n  endDate?: Date | undefined;\n  search?: string | undefined;\n  sortBy?: string | undefined;\n  sortOrder?: 'asc' | 'desc' | undefined;\n}\n\nexport class OvertimeRequestModel {\n  /**\n   * Create a new overtime request\n   */\n  async createOvertimeRequest(data: CreateOvertimeRequestData): Promise<OvertimeRequest> {\n    const query = `\n      INSERT INTO overtime_requests (employee_id, request_date, overtime_date, start_time, end_time, requested_hours, reason)\n      VALUES ($1, $2, $3, $4, $5, $6, $7)\n      RETURNING \n        id,\n        employee_id as \"employeeId\",\n        request_date as \"requestDate\",\n        start_time as \"startTime\",\n        end_time as \"endTime\",\n        requested_hours as \"requestedHours\",\n        reason,\n        status,\n        approver_id as \"approvedBy\",\n        approved_at as \"approvedAt\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n    `;\n\n    // Extract time portion from Date objects or use string directly\n    let startTimeStr: string;\n    let endTimeStr: string;\n    \n    if (typeof data.startTime === 'string') {\n      // Ensure HH:MM:SS format\n      const parts = data.startTime.split(':');\n      if (parts.length === 2) {\n        startTimeStr = `${parts[0]}:${parts[1]}:00`;\n      } else {\n        startTimeStr = data.startTime;\n      }\n    } else if (data.startTime instanceof Date && !isNaN(data.startTime.getTime())) {\n      startTimeStr = `${data.startTime.getUTCHours().toString().padStart(2, '0')}:${data.startTime.getUTCMinutes().toString().padStart(2, '0')}:${data.startTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    } else {\n      startTimeStr = '00:00:00';\n    }\n    \n    if (typeof data.endTime === 'string') {\n      // Ensure HH:MM:SS format\n      const parts = data.endTime.split(':');\n      if (parts.length === 2) {\n        endTimeStr = `${parts[0]}:${parts[1]}:00`;\n      } else {\n        endTimeStr = data.endTime;\n      }\n    } else if (data.endTime instanceof Date && !isNaN(data.endTime.getTime())) {\n      endTimeStr = `${data.endTime.getUTCHours().toString().padStart(2, '0')}:${data.endTime.getUTCMinutes().toString().padStart(2, '0')}:${data.endTime.getUTCSeconds().toString().padStart(2, '0')}`;\n    } else {\n      endTimeStr = '00:00:00';\n    }\n\n    // Debug: Log the time strings being used in the query\n    console.log('Model: Time strings for database:', {\n      startTimeStr,\n      endTimeStr,\n      startTimeType: typeof startTimeStr,\n      endTimeType: typeof endTimeStr,\n      startTimeOriginal: data.startTime,\n      endTimeOriginal: data.endTime\n    });\n\n    const result = await getPool().query(query, [\n      data.employeeId,\n      data.requestDate,\n      data.requestDate, // overtime_date is the same as request_date\n      startTimeStr,\n      endTimeStr,\n      data.requestedHours,\n      data.reason\n    ]);\n\n    return result.rows[0];\n  }\n\n  /**\n   * Get overtime request by ID\n   */\n  async findById(id: string): Promise<OvertimeRequest | null> {\n    const query = `\n      SELECT \n        id,\n        employee_id as \"employeeId\",\n        request_date as \"requestDate\",\n        start_time as \"startTime\",\n        end_time as \"endTime\",\n        requested_hours as \"requestedHours\",\n        reason,\n        status,\n        approver_id as \"approvedBy\",\n        approved_at as \"approvedAt\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM overtime_requests\n      WHERE id = $1\n    `;\n\n    const result = await getPool().query(query, [id]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Get overtime request with details\n   */\n  async findByIdWithDetails(id: string): Promise<OvertimeRequestWithDetails | null> {\n    const query = `\n      SELECT \n        otr.id,\n        otr.employee_id as \"employeeId\",\n        otr.request_date as \"requestDate\",\n        otr.start_time as \"startTime\",\n        otr.end_time as \"endTime\",\n        otr.requested_hours as \"requestedHours\",\n        otr.reason,\n        otr.status,\n        otr.approver_id as \"approvedBy\",\n        otr.approved_at as \"approvedAt\",\n        otr.created_at as \"createdAt\",\n        otr.updated_at as \"updatedAt\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\",\n        CONCAT(approver.first_name, ' ', approver.last_name) as \"approverName\"\n      FROM overtime_requests otr\n      JOIN employees e ON otr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n              LEFT JOIN users approver ON otr.approver_id = approver.id\n      WHERE otr.id = $1\n    `;\n\n    const result = await getPool().query(query, [id]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Update overtime request\n   */\n  async updateOvertimeRequest(id: string, data: UpdateOvertimeRequestData): Promise<OvertimeRequest | null> {\n    const updateFields: string[] = [];\n    const updateValues: any[] = [];\n    let paramIndex = 1;\n\n    if (data.status !== undefined) {\n      updateFields.push(`status = $${paramIndex}`);\n      updateValues.push(data.status);\n      paramIndex++;\n    }\n\n    if (data.approvedBy !== undefined) {\n              updateFields.push(`approver_id = $${paramIndex}`);\n      updateValues.push(data.approvedBy);\n      paramIndex++;\n    }\n\n    if (data.approvedAt !== undefined) {\n      updateFields.push(`approved_at = $${paramIndex}`);\n      updateValues.push(data.approvedAt);\n      paramIndex++;\n    }\n\n    if (updateFields.length === 0) {\n      return this.findById(id);\n    }\n\n    updateFields.push(`updated_at = CURRENT_TIMESTAMP`);\n    updateValues.push(id);\n\n    const query = `\n      UPDATE overtime_requests \n      SET ${updateFields.join(', ')}\n      WHERE id = $${paramIndex}\n      RETURNING \n        id,\n        employee_id as \"employeeId\",\n        request_date as \"requestDate\",\n        start_time as \"startTime\",\n        end_time as \"endTime\",\n        requested_hours as \"requestedHours\",\n        reason,\n        status,\n        approver_id as \"approvedBy\",\n        approved_at as \"approvedAt\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n    `;\n\n    const result = await getPool().query(query, updateValues);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * List overtime requests with filtering and pagination\n   */\n  async listOvertimeRequests(params: OvertimeRequestListParams = {}): Promise<{\n    requests: OvertimeRequestWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      employeeId,\n      departmentId,\n      status,\n      startDate,\n      endDate,\n      search,\n      sortBy = 'created_at',\n      sortOrder = 'desc'\n    } = params;\n\n    // Validate sortBy parameter to prevent SQL injection\n    const allowedSortColumns = ['created_at', 'updated_at', 'request_date', 'status'];\n    const validSortBy = allowedSortColumns.includes(sortBy) ? sortBy : 'created_at';\n    \n    // Validate sortOrder parameter\n    const validSortOrder = ['asc', 'desc'].includes(sortOrder.toLowerCase()) ? sortOrder.toUpperCase() : 'DESC';\n\n    const offset = (page - 1) * limit;\n    const whereConditions: string[] = [];\n    const queryParams: any[] = [];\n    let paramIndex = 1;\n\n    // Build WHERE conditions\n    if (employeeId) {\n      whereConditions.push(`otr.employee_id = $${paramIndex}`);\n      queryParams.push(employeeId);\n      paramIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`e.department_id = $${paramIndex}`);\n      queryParams.push(departmentId);\n      paramIndex++;\n    }\n\n    if (status) {\n      whereConditions.push(`otr.status = $${paramIndex}`);\n      queryParams.push(status);\n      paramIndex++;\n    }\n\n    if (startDate) {\n      whereConditions.push(`otr.request_date >= $${paramIndex}`);\n      queryParams.push(startDate);\n      paramIndex++;\n    }\n\n    if (endDate) {\n      whereConditions.push(`otr.request_date <= $${paramIndex}`);\n      queryParams.push(endDate);\n      paramIndex++;\n    }\n\n    if (search) {\n      whereConditions.push(`(CONCAT(u.first_name, ' ', u.last_name) ILIKE $${paramIndex} OR e.employee_id ILIKE $${paramIndex} OR otr.reason ILIKE $${paramIndex})`);\n      queryParams.push(`%${search}%`);\n      paramIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM overtime_requests otr\n      JOIN employees e ON otr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n    `;\n\n    const countResult = await getPool().query(countQuery, queryParams);\n    const total = parseInt(countResult.rows[0].total);\n\n    // Data query\n    const dataQuery = `\n      SELECT \n        otr.id,\n        otr.employee_id as \"employeeId\",\n        otr.request_date as \"requestDate\",\n        otr.start_time as \"startTime\",\n        otr.end_time as \"endTime\",\n        otr.requested_hours as \"requestedHours\",\n        otr.reason,\n        otr.status,\n        otr.approver_id as \"approvedBy\",\n        otr.approved_at as \"approvedAt\",\n        otr.created_at as \"createdAt\",\n        otr.updated_at as \"updatedAt\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\",\n        CONCAT(approver.first_name, ' ', approver.last_name) as \"approverName\"\n      FROM overtime_requests otr\n      JOIN employees e ON otr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n              LEFT JOIN users approver ON otr.approver_id = approver.id\n      ${whereClause}\n      ORDER BY otr.${validSortBy} ${validSortOrder}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    queryParams.push(limit, offset);\n    const result = await getPool().query(dataQuery, queryParams);\n\n    return {\n      requests: result.rows,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  /**\n   * Get pending requests for a department head\n   */\n  async getPendingRequestsForDepartmentHead(departmentHeadUserId: string): Promise<OvertimeRequestWithDetails[]> {\n    const query = `\n      SELECT \n        otr.id,\n        otr.employee_id as \"employeeId\",\n        otr.request_date as \"requestDate\",\n        otr.start_time as \"startTime\",\n        otr.end_time as \"endTime\",\n        otr.requested_hours as \"requestedHours\",\n        otr.reason,\n        otr.status,\n        otr.approver_id as \"approvedBy\",\n        otr.approved_at as \"approvedAt\",\n        otr.created_at as \"createdAt\",\n        otr.updated_at as \"updatedAt\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\",\n        CONCAT(approver.first_name, ' ', approver.last_name) as \"approverName\"\n      FROM overtime_requests otr\n      JOIN employees e ON otr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      JOIN departments d ON e.department_id = d.id\n              LEFT JOIN users approver ON otr.approver_id = approver.id\n      WHERE d.department_head_user_id = $1\n        AND otr.status = 'pending'\n      ORDER BY otr.created_at ASC\n    `;\n\n    const result = await getPool().query(query, [departmentHeadUserId]);\n    return result.rows;\n  }\n\n  /**\n   * Get overtime request statistics\n   */\n  async getOvertimeRequestStats(employeeId?: string, departmentId?: string): Promise<{\n    totalRequests: number;\n    pendingRequests: number;\n    approvedRequests: number;\n    rejectedRequests: number;\n    totalHours: number;\n    approvedHours: number;\n  }> {\n    const whereConditions: string[] = [];\n    const queryParams: any[] = [];\n    let paramIndex = 1;\n\n    if (employeeId) {\n      whereConditions.push(`employee_id = $${paramIndex}`);\n      queryParams.push(employeeId);\n      paramIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`employee_id IN (SELECT id FROM employees WHERE department_id = $${paramIndex})`);\n      queryParams.push(departmentId);\n      paramIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    const query = `\n      SELECT \n        COUNT(*) as total_requests,\n        COUNT(*) FILTER (WHERE status = 'pending') as pending_requests,\n        COUNT(*) FILTER (WHERE status = 'approved') as approved_requests,\n        COUNT(*) FILTER (WHERE status = 'rejected') as rejected_requests,\n        COALESCE(SUM(requested_hours), 0) as total_hours,\n        COALESCE(SUM(requested_hours) FILTER (WHERE status = 'approved'), 0) as approved_hours\n      FROM overtime_requests\n      ${whereClause}\n    `;\n\n    const result = await getPool().query(query, queryParams);\n    const stats = result.rows[0];\n\n    return {\n      totalRequests: parseInt(stats.total_requests) || 0,\n      pendingRequests: parseInt(stats.pending_requests) || 0,\n      approvedRequests: parseInt(stats.approved_requests) || 0,\n      rejectedRequests: parseInt(stats.rejected_requests) || 0,\n      totalHours: parseFloat(stats.total_hours) || 0,\n      approvedHours: parseFloat(stats.approved_hours) || 0\n    };\n  }\n\n  /**\n   * Delete overtime request\n   */\n  async deleteOvertimeRequest(id: string): Promise<boolean> {\n    const query = 'DELETE FROM overtime_requests WHERE id = $1';\n    const result = await getPool().query(query, [id]);\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  /**\n   * Get overtime request count\n   */\n  async getOvertimeRequestCount(): Promise<number> {\n    const query = 'SELECT COUNT(*) as count FROM overtime_requests';\n    const result = await getPool().query(query);\n    return parseInt(result.rows[0].count);\n  }\n}\n\nexport const overtimeRequestModel = new OvertimeRequestModel();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "67cfd540275de7515c18c1e33abc7fe1ef5f17a9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vpzgbmvrw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vpzgbmvrw();
cov_vpzgbmvrw().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_vpzgbmvrw().s[1]++;
exports.overtimeRequestModel = exports.OvertimeRequestModel = void 0;
const database_1 =
/* istanbul ignore next */
(cov_vpzgbmvrw().s[2]++, require("../../config/database"));
class OvertimeRequestModel {
  /**
   * Create a new overtime request
   */
  async createOvertimeRequest(data) {
    /* istanbul ignore next */
    cov_vpzgbmvrw().f[0]++;
    const query =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[3]++, `
      INSERT INTO overtime_requests (employee_id, request_date, overtime_date, start_time, end_time, requested_hours, reason)
      VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING 
        id,
        employee_id as "employeeId",
        request_date as "requestDate",
        start_time as "startTime",
        end_time as "endTime",
        requested_hours as "requestedHours",
        reason,
        status,
        approver_id as "approvedBy",
        approved_at as "approvedAt",
        created_at as "createdAt",
        updated_at as "updatedAt"
    `);
    // Extract time portion from Date objects or use string directly
    let startTimeStr;
    let endTimeStr;
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[4]++;
    if (typeof data.startTime === 'string') {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[0][0]++;
      // Ensure HH:MM:SS format
      const parts =
      /* istanbul ignore next */
      (cov_vpzgbmvrw().s[5]++, data.startTime.split(':'));
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[6]++;
      if (parts.length === 2) {
        /* istanbul ignore next */
        cov_vpzgbmvrw().b[1][0]++;
        cov_vpzgbmvrw().s[7]++;
        startTimeStr = `${parts[0]}:${parts[1]}:00`;
      } else {
        /* istanbul ignore next */
        cov_vpzgbmvrw().b[1][1]++;
        cov_vpzgbmvrw().s[8]++;
        startTimeStr = data.startTime;
      }
    } else {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[0][1]++;
      cov_vpzgbmvrw().s[9]++;
      if (
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[3][0]++, data.startTime instanceof Date) &&
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[3][1]++, !isNaN(data.startTime.getTime()))) {
        /* istanbul ignore next */
        cov_vpzgbmvrw().b[2][0]++;
        cov_vpzgbmvrw().s[10]++;
        startTimeStr = `${data.startTime.getUTCHours().toString().padStart(2, '0')}:${data.startTime.getUTCMinutes().toString().padStart(2, '0')}:${data.startTime.getUTCSeconds().toString().padStart(2, '0')}`;
      } else {
        /* istanbul ignore next */
        cov_vpzgbmvrw().b[2][1]++;
        cov_vpzgbmvrw().s[11]++;
        startTimeStr = '00:00:00';
      }
    }
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[12]++;
    if (typeof data.endTime === 'string') {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[4][0]++;
      // Ensure HH:MM:SS format
      const parts =
      /* istanbul ignore next */
      (cov_vpzgbmvrw().s[13]++, data.endTime.split(':'));
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[14]++;
      if (parts.length === 2) {
        /* istanbul ignore next */
        cov_vpzgbmvrw().b[5][0]++;
        cov_vpzgbmvrw().s[15]++;
        endTimeStr = `${parts[0]}:${parts[1]}:00`;
      } else {
        /* istanbul ignore next */
        cov_vpzgbmvrw().b[5][1]++;
        cov_vpzgbmvrw().s[16]++;
        endTimeStr = data.endTime;
      }
    } else {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[4][1]++;
      cov_vpzgbmvrw().s[17]++;
      if (
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[7][0]++, data.endTime instanceof Date) &&
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[7][1]++, !isNaN(data.endTime.getTime()))) {
        /* istanbul ignore next */
        cov_vpzgbmvrw().b[6][0]++;
        cov_vpzgbmvrw().s[18]++;
        endTimeStr = `${data.endTime.getUTCHours().toString().padStart(2, '0')}:${data.endTime.getUTCMinutes().toString().padStart(2, '0')}:${data.endTime.getUTCSeconds().toString().padStart(2, '0')}`;
      } else {
        /* istanbul ignore next */
        cov_vpzgbmvrw().b[6][1]++;
        cov_vpzgbmvrw().s[19]++;
        endTimeStr = '00:00:00';
      }
    }
    // Debug: Log the time strings being used in the query
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[20]++;
    console.log('Model: Time strings for database:', {
      startTimeStr,
      endTimeStr,
      startTimeType: typeof startTimeStr,
      endTimeType: typeof endTimeStr,
      startTimeOriginal: data.startTime,
      endTimeOriginal: data.endTime
    });
    const result =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[21]++, await (0, database_1.getPool)().query(query, [data.employeeId, data.requestDate, data.requestDate,
    // overtime_date is the same as request_date
    startTimeStr, endTimeStr, data.requestedHours, data.reason]));
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[22]++;
    return result.rows[0];
  }
  /**
   * Get overtime request by ID
   */
  async findById(id) {
    /* istanbul ignore next */
    cov_vpzgbmvrw().f[1]++;
    const query =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[23]++, `
      SELECT 
        id,
        employee_id as "employeeId",
        request_date as "requestDate",
        start_time as "startTime",
        end_time as "endTime",
        requested_hours as "requestedHours",
        reason,
        status,
        approver_id as "approvedBy",
        approved_at as "approvedAt",
        created_at as "createdAt",
        updated_at as "updatedAt"
      FROM overtime_requests
      WHERE id = $1
    `);
    const result =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[24]++, await (0, database_1.getPool)().query(query, [id]));
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[25]++;
    return result.rows.length > 0 ?
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[8][0]++, result.rows[0]) :
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[8][1]++, null);
  }
  /**
   * Get overtime request with details
   */
  async findByIdWithDetails(id) {
    /* istanbul ignore next */
    cov_vpzgbmvrw().f[2]++;
    const query =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[26]++, `
      SELECT 
        otr.id,
        otr.employee_id as "employeeId",
        otr.request_date as "requestDate",
        otr.start_time as "startTime",
        otr.end_time as "endTime",
        otr.requested_hours as "requestedHours",
        otr.reason,
        otr.status,
        otr.approver_id as "approvedBy",
        otr.approved_at as "approvedAt",
        otr.created_at as "createdAt",
        otr.updated_at as "updatedAt",
        e.employee_id as "employeeCode",
        CONCAT(u.first_name, ' ', u.last_name) as "employeeName",
        d.name as "departmentName",
        CONCAT(approver.first_name, ' ', approver.last_name) as "approverName"
      FROM overtime_requests otr
      JOIN employees e ON otr.employee_id = e.id
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
              LEFT JOIN users approver ON otr.approver_id = approver.id
      WHERE otr.id = $1
    `);
    const result =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[27]++, await (0, database_1.getPool)().query(query, [id]));
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[28]++;
    return result.rows.length > 0 ?
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[9][0]++, result.rows[0]) :
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[9][1]++, null);
  }
  /**
   * Update overtime request
   */
  async updateOvertimeRequest(id, data) {
    /* istanbul ignore next */
    cov_vpzgbmvrw().f[3]++;
    const updateFields =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[29]++, []);
    const updateValues =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[30]++, []);
    let paramIndex =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[31]++, 1);
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[32]++;
    if (data.status !== undefined) {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[10][0]++;
      cov_vpzgbmvrw().s[33]++;
      updateFields.push(`status = $${paramIndex}`);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[34]++;
      updateValues.push(data.status);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[35]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_vpzgbmvrw().b[10][1]++;
    }
    cov_vpzgbmvrw().s[36]++;
    if (data.approvedBy !== undefined) {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[11][0]++;
      cov_vpzgbmvrw().s[37]++;
      updateFields.push(`approver_id = $${paramIndex}`);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[38]++;
      updateValues.push(data.approvedBy);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[39]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_vpzgbmvrw().b[11][1]++;
    }
    cov_vpzgbmvrw().s[40]++;
    if (data.approvedAt !== undefined) {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[12][0]++;
      cov_vpzgbmvrw().s[41]++;
      updateFields.push(`approved_at = $${paramIndex}`);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[42]++;
      updateValues.push(data.approvedAt);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[43]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_vpzgbmvrw().b[12][1]++;
    }
    cov_vpzgbmvrw().s[44]++;
    if (updateFields.length === 0) {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[13][0]++;
      cov_vpzgbmvrw().s[45]++;
      return this.findById(id);
    } else
    /* istanbul ignore next */
    {
      cov_vpzgbmvrw().b[13][1]++;
    }
    cov_vpzgbmvrw().s[46]++;
    updateFields.push(`updated_at = CURRENT_TIMESTAMP`);
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[47]++;
    updateValues.push(id);
    const query =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[48]++, `
      UPDATE overtime_requests 
      SET ${updateFields.join(', ')}
      WHERE id = $${paramIndex}
      RETURNING 
        id,
        employee_id as "employeeId",
        request_date as "requestDate",
        start_time as "startTime",
        end_time as "endTime",
        requested_hours as "requestedHours",
        reason,
        status,
        approver_id as "approvedBy",
        approved_at as "approvedAt",
        created_at as "createdAt",
        updated_at as "updatedAt"
    `);
    const result =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[49]++, await (0, database_1.getPool)().query(query, updateValues));
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[50]++;
    return result.rows.length > 0 ?
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[14][0]++, result.rows[0]) :
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[14][1]++, null);
  }
  /**
   * List overtime requests with filtering and pagination
   */
  async listOvertimeRequests(params =
  /* istanbul ignore next */
  (cov_vpzgbmvrw().b[15][0]++, {})) {
    /* istanbul ignore next */
    cov_vpzgbmvrw().f[4]++;
    const {
      page =
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[16][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[17][0]++, 20),
      employeeId,
      departmentId,
      status,
      startDate,
      endDate,
      search,
      sortBy =
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[18][0]++, 'created_at'),
      sortOrder =
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[19][0]++, 'desc')
    } =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[51]++, params);
    // Validate sortBy parameter to prevent SQL injection
    const allowedSortColumns =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[52]++, ['created_at', 'updated_at', 'request_date', 'status']);
    const validSortBy =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[53]++, allowedSortColumns.includes(sortBy) ?
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[20][0]++, sortBy) :
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[20][1]++, 'created_at'));
    // Validate sortOrder parameter
    const validSortOrder =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[54]++, ['asc', 'desc'].includes(sortOrder.toLowerCase()) ?
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[21][0]++, sortOrder.toUpperCase()) :
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[21][1]++, 'DESC'));
    const offset =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[55]++, (page - 1) * limit);
    const whereConditions =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[56]++, []);
    const queryParams =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[57]++, []);
    let paramIndex =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[58]++, 1);
    // Build WHERE conditions
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[59]++;
    if (employeeId) {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[22][0]++;
      cov_vpzgbmvrw().s[60]++;
      whereConditions.push(`otr.employee_id = $${paramIndex}`);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[61]++;
      queryParams.push(employeeId);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[62]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_vpzgbmvrw().b[22][1]++;
    }
    cov_vpzgbmvrw().s[63]++;
    if (departmentId) {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[23][0]++;
      cov_vpzgbmvrw().s[64]++;
      whereConditions.push(`e.department_id = $${paramIndex}`);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[65]++;
      queryParams.push(departmentId);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[66]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_vpzgbmvrw().b[23][1]++;
    }
    cov_vpzgbmvrw().s[67]++;
    if (status) {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[24][0]++;
      cov_vpzgbmvrw().s[68]++;
      whereConditions.push(`otr.status = $${paramIndex}`);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[69]++;
      queryParams.push(status);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[70]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_vpzgbmvrw().b[24][1]++;
    }
    cov_vpzgbmvrw().s[71]++;
    if (startDate) {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[25][0]++;
      cov_vpzgbmvrw().s[72]++;
      whereConditions.push(`otr.request_date >= $${paramIndex}`);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[73]++;
      queryParams.push(startDate);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[74]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_vpzgbmvrw().b[25][1]++;
    }
    cov_vpzgbmvrw().s[75]++;
    if (endDate) {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[26][0]++;
      cov_vpzgbmvrw().s[76]++;
      whereConditions.push(`otr.request_date <= $${paramIndex}`);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[77]++;
      queryParams.push(endDate);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[78]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_vpzgbmvrw().b[26][1]++;
    }
    cov_vpzgbmvrw().s[79]++;
    if (search) {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[27][0]++;
      cov_vpzgbmvrw().s[80]++;
      whereConditions.push(`(CONCAT(u.first_name, ' ', u.last_name) ILIKE $${paramIndex} OR e.employee_id ILIKE $${paramIndex} OR otr.reason ILIKE $${paramIndex})`);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[81]++;
      queryParams.push(`%${search}%`);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[82]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_vpzgbmvrw().b[27][1]++;
    }
    const whereClause =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[83]++, whereConditions.length > 0 ?
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[28][0]++, `WHERE ${whereConditions.join(' AND ')}`) :
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[28][1]++, ''));
    // Count query
    const countQuery =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[84]++, `
      SELECT COUNT(*) as total
      FROM overtime_requests otr
      JOIN employees e ON otr.employee_id = e.id
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      ${whereClause}
    `);
    const countResult =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[85]++, await (0, database_1.getPool)().query(countQuery, queryParams));
    const total =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[86]++, parseInt(countResult.rows[0].total));
    // Data query
    const dataQuery =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[87]++, `
      SELECT 
        otr.id,
        otr.employee_id as "employeeId",
        otr.request_date as "requestDate",
        otr.start_time as "startTime",
        otr.end_time as "endTime",
        otr.requested_hours as "requestedHours",
        otr.reason,
        otr.status,
        otr.approver_id as "approvedBy",
        otr.approved_at as "approvedAt",
        otr.created_at as "createdAt",
        otr.updated_at as "updatedAt",
        e.employee_id as "employeeCode",
        CONCAT(u.first_name, ' ', u.last_name) as "employeeName",
        d.name as "departmentName",
        CONCAT(approver.first_name, ' ', approver.last_name) as "approverName"
      FROM overtime_requests otr
      JOIN employees e ON otr.employee_id = e.id
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
              LEFT JOIN users approver ON otr.approver_id = approver.id
      ${whereClause}
      ORDER BY otr.${validSortBy} ${validSortOrder}
      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
    `);
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[88]++;
    queryParams.push(limit, offset);
    const result =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[89]++, await (0, database_1.getPool)().query(dataQuery, queryParams));
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[90]++;
    return {
      requests: result.rows,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit)
    };
  }
  /**
   * Get pending requests for a department head
   */
  async getPendingRequestsForDepartmentHead(departmentHeadUserId) {
    /* istanbul ignore next */
    cov_vpzgbmvrw().f[5]++;
    const query =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[91]++, `
      SELECT 
        otr.id,
        otr.employee_id as "employeeId",
        otr.request_date as "requestDate",
        otr.start_time as "startTime",
        otr.end_time as "endTime",
        otr.requested_hours as "requestedHours",
        otr.reason,
        otr.status,
        otr.approver_id as "approvedBy",
        otr.approved_at as "approvedAt",
        otr.created_at as "createdAt",
        otr.updated_at as "updatedAt",
        e.employee_id as "employeeCode",
        CONCAT(u.first_name, ' ', u.last_name) as "employeeName",
        d.name as "departmentName",
        CONCAT(approver.first_name, ' ', approver.last_name) as "approverName"
      FROM overtime_requests otr
      JOIN employees e ON otr.employee_id = e.id
      JOIN users u ON e.user_id = u.id
      JOIN departments d ON e.department_id = d.id
              LEFT JOIN users approver ON otr.approver_id = approver.id
      WHERE d.department_head_user_id = $1
        AND otr.status = 'pending'
      ORDER BY otr.created_at ASC
    `);
    const result =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[92]++, await (0, database_1.getPool)().query(query, [departmentHeadUserId]));
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[93]++;
    return result.rows;
  }
  /**
   * Get overtime request statistics
   */
  async getOvertimeRequestStats(employeeId, departmentId) {
    /* istanbul ignore next */
    cov_vpzgbmvrw().f[6]++;
    const whereConditions =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[94]++, []);
    const queryParams =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[95]++, []);
    let paramIndex =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[96]++, 1);
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[97]++;
    if (employeeId) {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[29][0]++;
      cov_vpzgbmvrw().s[98]++;
      whereConditions.push(`employee_id = $${paramIndex}`);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[99]++;
      queryParams.push(employeeId);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[100]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_vpzgbmvrw().b[29][1]++;
    }
    cov_vpzgbmvrw().s[101]++;
    if (departmentId) {
      /* istanbul ignore next */
      cov_vpzgbmvrw().b[30][0]++;
      cov_vpzgbmvrw().s[102]++;
      whereConditions.push(`employee_id IN (SELECT id FROM employees WHERE department_id = $${paramIndex})`);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[103]++;
      queryParams.push(departmentId);
      /* istanbul ignore next */
      cov_vpzgbmvrw().s[104]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_vpzgbmvrw().b[30][1]++;
    }
    const whereClause =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[105]++, whereConditions.length > 0 ?
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[31][0]++, `WHERE ${whereConditions.join(' AND ')}`) :
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[31][1]++, ''));
    const query =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[106]++, `
      SELECT 
        COUNT(*) as total_requests,
        COUNT(*) FILTER (WHERE status = 'pending') as pending_requests,
        COUNT(*) FILTER (WHERE status = 'approved') as approved_requests,
        COUNT(*) FILTER (WHERE status = 'rejected') as rejected_requests,
        COALESCE(SUM(requested_hours), 0) as total_hours,
        COALESCE(SUM(requested_hours) FILTER (WHERE status = 'approved'), 0) as approved_hours
      FROM overtime_requests
      ${whereClause}
    `);
    const result =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[107]++, await (0, database_1.getPool)().query(query, queryParams));
    const stats =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[108]++, result.rows[0]);
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[109]++;
    return {
      totalRequests:
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[32][0]++, parseInt(stats.total_requests)) ||
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[32][1]++, 0),
      pendingRequests:
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[33][0]++, parseInt(stats.pending_requests)) ||
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[33][1]++, 0),
      approvedRequests:
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[34][0]++, parseInt(stats.approved_requests)) ||
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[34][1]++, 0),
      rejectedRequests:
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[35][0]++, parseInt(stats.rejected_requests)) ||
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[35][1]++, 0),
      totalHours:
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[36][0]++, parseFloat(stats.total_hours)) ||
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[36][1]++, 0),
      approvedHours:
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[37][0]++, parseFloat(stats.approved_hours)) ||
      /* istanbul ignore next */
      (cov_vpzgbmvrw().b[37][1]++, 0)
    };
  }
  /**
   * Delete overtime request
   */
  async deleteOvertimeRequest(id) {
    /* istanbul ignore next */
    cov_vpzgbmvrw().f[7]++;
    const query =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[110]++, 'DELETE FROM overtime_requests WHERE id = $1');
    const result =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[111]++, await (0, database_1.getPool)().query(query, [id]));
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[112]++;
    return result.rowCount ?
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[38][0]++, result.rowCount > 0) :
    /* istanbul ignore next */
    (cov_vpzgbmvrw().b[38][1]++, false);
  }
  /**
   * Get overtime request count
   */
  async getOvertimeRequestCount() {
    /* istanbul ignore next */
    cov_vpzgbmvrw().f[8]++;
    const query =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[113]++, 'SELECT COUNT(*) as count FROM overtime_requests');
    const result =
    /* istanbul ignore next */
    (cov_vpzgbmvrw().s[114]++, await (0, database_1.getPool)().query(query));
    /* istanbul ignore next */
    cov_vpzgbmvrw().s[115]++;
    return parseInt(result.rows[0].count);
  }
}
/* istanbul ignore next */
cov_vpzgbmvrw().s[116]++;
exports.OvertimeRequestModel = OvertimeRequestModel;
/* istanbul ignore next */
cov_vpzgbmvrw().s[117]++;
exports.overtimeRequestModel = new OvertimeRequestModel();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,