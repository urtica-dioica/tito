{"version":3,"names":["cov_1h08nncqpq","actualCoverage","database_1","s","require","logger_1","__importDefault","PayrollPeriodModel","constructor","f","pool","getPool","create","data","client","connect","query","values","period_name","start_date","end_date","b","status","working_days","expected_hours","result","period","rows","default","info","periodId","id","periodName","workingDays","expectedHours","error","message","release","findById","findAll","params","page","limit","startDate","endDate","offset","whereClause","conditions","paramIndex","push","length","join","countQuery","countResult","total","parseInt","count","periods","update","fields","undefined","updates","delete","deleted","rowCount","findActivePeriod","findByDateRange","countByStatus","statuses","placeholders","map","_","index","exports","payrollPeriodModel"],"sources":["/home/kim/tito/server/src/models/payroll/PayrollPeriod.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface PayrollPeriod {\n  id: string;\n  period_name: string;\n  start_date: Date;\n  end_date: Date;\n  status: 'draft' | 'processing' | 'sent_for_review' | 'completed';\n  working_days?: number;\n  expected_hours?: number;\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface CreatePayrollPeriodData {\n  period_name: string;\n  start_date: Date;\n  end_date: Date;\n  status?: 'draft' | 'processing' | 'sent_for_review' | 'completed';\n  working_days?: number;\n  expected_hours?: number;\n}\n\nexport interface UpdatePayrollPeriodData {\n  period_name?: string;\n  start_date?: Date;\n  end_date?: Date;\n  status?: 'draft' | 'processing' | 'sent_for_review' | 'completed';\n  working_days?: number;\n  expected_hours?: number;\n}\n\nexport interface PayrollPeriodListParams {\n  page?: number;\n  limit?: number;\n  status?: string;\n  startDate?: string;\n  endDate?: string;\n}\n\nclass PayrollPeriodModel {\n  private pool = getPool();\n\n  async create(data: CreatePayrollPeriodData): Promise<PayrollPeriod> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        INSERT INTO payroll_periods (period_name, start_date, end_date, status, working_days, expected_hours)\n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *\n      `;\n      const values = [\n        data.period_name, \n        data.start_date, \n        data.end_date, \n        data.status || 'draft',\n        data.working_days || null,\n        data.expected_hours || null\n      ];\n      \n      const result = await client.query(query, values);\n      const period = result.rows[0];\n      \n      logger.info('Payroll period created', { \n        periodId: period.id, \n        periodName: period.period_name,\n        workingDays: period.working_days,\n        expectedHours: period.expected_hours\n      });\n      return period;\n    } catch (error) {\n      logger.error('Error creating payroll period', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findById(id: string): Promise<PayrollPeriod | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT * FROM payroll_periods WHERE id = $1';\n      const result = await client.query(query, [id]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding payroll period by ID', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findAll(params: PayrollPeriodListParams = {}): Promise<{ periods: PayrollPeriod[]; total: number }> {\n    const client = await this.pool.connect();\n    try {\n      const { page = 1, limit = 10, status, startDate, endDate } = params;\n      const offset = (page - 1) * limit;\n      \n      let whereClause = '';\n      const conditions: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (status) {\n        conditions.push(`status = $${paramIndex++}`);\n        values.push(status);\n      }\n\n      if (startDate) {\n        conditions.push(`start_date >= $${paramIndex++}`);\n        values.push(startDate);\n      }\n\n      if (endDate) {\n        conditions.push(`end_date <= $${paramIndex++}`);\n        values.push(endDate);\n      }\n\n      if (conditions.length > 0) {\n        whereClause = `WHERE ${conditions.join(' AND ')}`;\n      }\n\n      // Get total count\n      const countQuery = `SELECT COUNT(*) FROM payroll_periods ${whereClause}`;\n      const countResult = await client.query(countQuery, values);\n      const total = parseInt(countResult.rows[0].count);\n\n      // Get periods\n      const query = `\n        SELECT * FROM payroll_periods \n        ${whereClause}\n        ORDER BY start_date DESC\n        LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n      `;\n      values.push(limit, offset);\n      \n      const result = await client.query(query, values);\n      \n      return {\n        periods: result.rows,\n        total\n      };\n    } catch (error) {\n      logger.error('Error finding payroll periods', { error: (error as Error).message, params });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async update(id: string, data: UpdatePayrollPeriodData): Promise<PayrollPeriod | null> {\n    const client = await this.pool.connect();\n    try {\n      const fields: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (data.period_name !== undefined) {\n        fields.push(`period_name = $${paramIndex++}`);\n        values.push(data.period_name);\n      }\n\n      if (data.start_date !== undefined) {\n        fields.push(`start_date = $${paramIndex++}`);\n        values.push(data.start_date);\n      }\n\n      if (data.end_date !== undefined) {\n        fields.push(`end_date = $${paramIndex++}`);\n        values.push(data.end_date);\n      }\n\n      if (data.status !== undefined) {\n        fields.push(`status = $${paramIndex++}`);\n        values.push(data.status);\n      }\n\n      if (fields.length === 0) {\n        return await this.findById(id);\n      }\n\n      fields.push(`updated_at = CURRENT_TIMESTAMP`);\n      values.push(id);\n\n      const query = `\n        UPDATE payroll_periods \n        SET ${fields.join(', ')}\n        WHERE id = $${paramIndex}\n        RETURNING *\n      `;\n\n      const result = await client.query(query, values);\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      logger.info('Payroll period updated', { periodId: id, updates: data });\n      return result.rows[0];\n    } catch (error) {\n      logger.error('Error updating payroll period', { error: (error as Error).message, id, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async delete(id: string): Promise<boolean> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'DELETE FROM payroll_periods WHERE id = $1';\n      const result = await client.query(query, [id]);\n      \n      const deleted = (result.rowCount || 0) > 0;\n      if (deleted) {\n        logger.info('Payroll period deleted', { periodId: id });\n      }\n      \n      return deleted;\n    } catch (error) {\n      logger.error('Error deleting payroll period', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findActivePeriod(): Promise<PayrollPeriod | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT * FROM payroll_periods \n        WHERE status IN ('draft', 'processing', 'sent_for_review')\n        ORDER BY start_date DESC\n        LIMIT 1\n      `;\n      const result = await client.query(query);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding active payroll period', { error: (error as Error).message });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findByDateRange(startDate: Date, endDate: Date): Promise<PayrollPeriod[]> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT * FROM payroll_periods \n        WHERE start_date <= $2 AND end_date >= $1\n        ORDER BY start_date DESC\n      `;\n      const result = await client.query(query, [startDate, endDate]);\n      return result.rows;\n    } catch (error) {\n      logger.error('Error finding payroll periods by date range', { \n        error: (error as Error).message, \n        startDate, \n        endDate \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async count(): Promise<number> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT COUNT(*) FROM payroll_periods';\n      const result = await client.query(query);\n      return parseInt(result.rows[0].count);\n    } catch (error) {\n      logger.error('Error counting payroll periods', { error: (error as Error).message });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async countByStatus(statuses: string[]): Promise<number> {\n    const client = await this.pool.connect();\n    try {\n      const placeholders = statuses.map((_, index) => `$${index + 1}`).join(',');\n      const query = `SELECT COUNT(*) FROM payroll_periods WHERE status IN (${placeholders})`;\n      const result = await client.query(query, statuses);\n      return parseInt(result.rows[0].count);\n    } catch (error) {\n      logger.error('Error counting payroll periods by status', { error: (error as Error).message, statuses });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n}\n\nexport const payrollPeriodModel = new PayrollPeriodModel();"],"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","ignoreList":[]}