{"version":3,"names":["cov_cyu5sf93","actualCoverage","database_1","s","require","logger_1","__importDefault","HRDashboardService","getDashboardData","f","overview","getOverviewStats","recentActivity","getRecentActivity","pendingRequests","getPendingRequests","attendanceStats","getAttendanceStats","departmentStats","getDepartmentStats","error","default","query","result","getPool","row","rows","totalEmployees","b","parseInt","total_employees","activeEmployees","active_employees","totalDepartments","total_departments","totalIdCards","total_id_cards","activeIdCards","active_id_cards","leaveQuery","leaveResult","timeCorrectionQuery","timeCorrectionResult","overtimeQuery","overtimeResult","allActivities","sort","a","Date","timestamp","getTime","slice","map","activity","id","type","description","status","leaves","pending_leaves","timeCorrections","pending_time_corrections","overtime","pending_overtime","total","today","toISOString","split","totalToday","total_today","presentToday","present_today","absentToday","absent_today","lateToday","late_today","departmentName","department_name","employeeCount","employee_count","presentCount","present_count","absentCount","absent_count","exports","hrDashboardService"],"sources":["/home/kim/tito/server/src/services/hr/dashboardService.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface HRDashboardData {\n  overview: {\n    totalEmployees: number;\n    activeEmployees: number;\n    totalDepartments: number;\n    totalIdCards: number;\n    activeIdCards: number;\n  };\n  recentActivity: Array<{\n    id: string;\n    type: string;\n    description: string;\n    timestamp: string;\n    status: string;\n  }>;\n  pendingRequests: {\n    leaves: number;\n    timeCorrections: number;\n    overtime: number;\n    total: number;\n  };\n  attendanceStats: {\n    presentToday: number;\n    absentToday: number;\n    lateToday: number;\n    totalToday: number;\n  };\n  departmentStats: Array<{\n    departmentName: string;\n    employeeCount: number;\n    presentCount: number;\n    absentCount: number;\n  }>;\n}\n\nexport class HRDashboardService {\n  /**\n   * Get HR dashboard data\n   */\n  async getDashboardData(): Promise<HRDashboardData> {\n    try {\n      // Get overview statistics\n      const overview = await this.getOverviewStats();\n      \n      // Get recent activity\n      const recentActivity = await this.getRecentActivity();\n      \n      // Get pending requests\n      const pendingRequests = await this.getPendingRequests();\n      \n      // Get attendance stats\n      const attendanceStats = await this.getAttendanceStats();\n      \n      // Get department stats\n      const departmentStats = await this.getDepartmentStats();\n\n      return {\n        overview,\n        recentActivity,\n        pendingRequests,\n        attendanceStats,\n        departmentStats\n      };\n    } catch (error) {\n      logger.error('Error getting HR dashboard data:', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Get overview statistics\n   */\n  private async getOverviewStats(): Promise<HRDashboardData['overview']> {\n    const query = `\n      SELECT \n        (SELECT COUNT(*) FROM employees) as total_employees,\n        (SELECT COUNT(*) FROM employees WHERE status = 'active') as active_employees,\n        (SELECT COUNT(*) FROM departments) as total_departments,\n        (SELECT COUNT(*) FROM id_cards) as total_id_cards,\n        (SELECT COUNT(*) FROM id_cards WHERE is_active = true) as active_id_cards\n    `;\n    \n    const result = await getPool().query(query);\n    const row = result.rows[0];\n    \n    return {\n      totalEmployees: parseInt(row.total_employees) || 0,\n      activeEmployees: parseInt(row.active_employees) || 0,\n      totalDepartments: parseInt(row.total_departments) || 0,\n      totalIdCards: parseInt(row.total_id_cards) || 0,\n      activeIdCards: parseInt(row.active_id_cards) || 0\n    };\n  }\n\n  /**\n   * Get recent activity\n   */\n  private async getRecentActivity(): Promise<HRDashboardData['recentActivity']> {\n    // Get recent leave requests\n    const leaveQuery = `\n      SELECT \n        l.id,\n        'leave_request' as type,\n        CONCAT(u.first_name, ' ', u.last_name, ' submitted a leave request') as description,\n        l.created_at as timestamp,\n        l.status\n      FROM leaves l\n      JOIN employees e ON l.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      ORDER BY l.created_at DESC\n      LIMIT 5\n    `;\n    \n    const leaveResult = await getPool().query(leaveQuery);\n    \n    // Get recent time correction requests\n    const timeCorrectionQuery = `\n      SELECT \n        tcr.id,\n        'time_correction' as type,\n        CONCAT(u.first_name, ' ', u.last_name, ' submitted a time correction request') as description,\n        tcr.created_at as timestamp,\n        tcr.status\n      FROM time_correction_requests tcr\n      JOIN employees e ON tcr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      ORDER BY tcr.created_at DESC\n      LIMIT 5\n    `;\n    \n    const timeCorrectionResult = await getPool().query(timeCorrectionQuery);\n    \n    // Get recent overtime requests\n    const overtimeQuery = `\n      SELECT \n        ot.id,\n        'overtime_request' as type,\n        CONCAT(u.first_name, ' ', u.last_name, ' submitted an overtime request') as description,\n        ot.created_at as timestamp,\n        ot.status\n      FROM overtime_requests ot\n      JOIN employees e ON ot.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      ORDER BY ot.created_at DESC\n      LIMIT 5\n    `;\n    \n    const overtimeResult = await getPool().query(overtimeQuery);\n    \n    // Combine and sort all activities\n    const allActivities = [\n      ...leaveResult.rows,\n      ...timeCorrectionResult.rows,\n      ...overtimeResult.rows\n    ];\n    \n    return allActivities\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, 10)\n      .map(activity => ({\n        id: activity.id,\n        type: activity.type,\n        description: activity.description,\n        timestamp: activity.timestamp,\n        status: activity.status\n      }));\n  }\n\n  /**\n   * Get pending requests\n   */\n  private async getPendingRequests(): Promise<HRDashboardData['pendingRequests']> {\n    const query = `\n      SELECT \n        (SELECT COUNT(*) FROM leaves WHERE status = 'pending') as pending_leaves,\n        (SELECT COUNT(*) FROM time_correction_requests WHERE status = 'pending') as pending_time_corrections,\n        (SELECT COUNT(*) FROM overtime_requests WHERE status = 'pending') as pending_overtime\n    `;\n    \n    const result = await getPool().query(query);\n    const row = result.rows[0];\n    \n    const leaves = parseInt(row.pending_leaves) || 0;\n    const timeCorrections = parseInt(row.pending_time_corrections) || 0;\n    const overtime = parseInt(row.pending_overtime) || 0;\n    \n    return {\n      leaves,\n      timeCorrections,\n      overtime,\n      total: leaves + timeCorrections + overtime\n    };\n  }\n\n  /**\n   * Get attendance stats for today\n   */\n  private async getAttendanceStats(): Promise<HRDashboardData['attendanceStats']> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    const query = `\n      SELECT \n        COUNT(DISTINCT ar.employee_id) as total_today,\n        COUNT(DISTINCT CASE WHEN ar.overall_status = 'present' THEN ar.employee_id END) as present_today,\n        COUNT(DISTINCT CASE WHEN ar.overall_status = 'absent' THEN ar.employee_id END) as absent_today,\n        COUNT(DISTINCT CASE WHEN ar.overall_status = 'late' THEN ar.employee_id END) as late_today\n      FROM attendance_records ar\n      WHERE DATE(ar.date) = $1\n    `;\n    \n    const result = await getPool().query(query, [today]);\n    const row = result.rows[0];\n    \n    return {\n      totalToday: parseInt(row.total_today) || 0,\n      presentToday: parseInt(row.present_today) || 0,\n      absentToday: parseInt(row.absent_today) || 0,\n      lateToday: parseInt(row.late_today) || 0\n    };\n  }\n\n  /**\n   * Get department statistics\n   */\n  private async getDepartmentStats(): Promise<HRDashboardData['departmentStats']> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    const query = `\n      SELECT \n        d.name as department_name,\n        COUNT(DISTINCT e.id) as employee_count,\n        COUNT(DISTINCT CASE WHEN ar.overall_status = 'present' THEN ar.employee_id END) as present_count,\n        COUNT(DISTINCT CASE WHEN ar.overall_status = 'absent' THEN ar.employee_id END) as absent_count\n      FROM departments d\n      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'\n      LEFT JOIN attendance_records ar ON e.id = ar.employee_id AND DATE(ar.date) = $1\n      GROUP BY d.id, d.name\n      ORDER BY d.name\n    `;\n    \n    const result = await getPool().query(query, [today]);\n    \n    return result.rows.map(row => ({\n      departmentName: row.department_name,\n      employeeCount: parseInt(row.employee_count) || 0,\n      presentCount: parseInt(row.present_count) || 0,\n      absentCount: parseInt(row.absent_count) || 0\n    }));\n  }\n}\n\nexport const hrDashboardService = new HRDashboardService();\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}