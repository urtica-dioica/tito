97cfdbf88d8e0c6bfc2386622c69a879
"use strict";

/* istanbul ignore next */
function cov_1swhv1s735() {
  var path = "/home/kim/tito/server/src/controllers/department-head/departmentHeadController.ts";
  var hash = "eb96bf5ce1990c4bae8e7dc5735fad9148856690";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/department-head/departmentHeadController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 77
        }
      },
      "4": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 95
        }
      },
      "5": {
        start: {
          line: 8,
          column: 18
        },
        end: {
          line: 8,
          column: 54
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 63
        }
      },
      "7": {
        start: {
          line: 10,
          column: 30
        },
        end: {
          line: 10,
          column: 81
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "9": {
        start: {
          line: 17,
          column: 30
        },
        end: {
          line: 17,
          column: 62
        }
      },
      "10": {
        start: {
          line: 18,
          column: 27
        },
        end: {
          line: 18,
          column: 43
        }
      },
      "11": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 26,
          column: 13
        }
      },
      "12": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 24,
          column: 19
        }
      },
      "13": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 23
        }
      },
      "14": {
        start: {
          line: 27,
          column: 35
        },
        end: {
          line: 27,
          column: 88
        }
      },
      "15": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "16": {
        start: {
          line: 36,
          column: 30
        },
        end: {
          line: 36,
          column: 62
        }
      },
      "17": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 91
        }
      },
      "18": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 43,
          column: 15
        }
      },
      "19": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "20": {
        start: {
          line: 51,
          column: 30
        },
        end: {
          line: 51,
          column: 62
        }
      },
      "21": {
        start: {
          line: 52,
          column: 27
        },
        end: {
          line: 52,
          column: 43
        }
      },
      "22": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "23": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 58,
          column: 19
        }
      },
      "24": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 23
        }
      },
      "25": {
        start: {
          line: 61,
          column: 30
        },
        end: {
          line: 61,
          column: 78
        }
      },
      "26": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "27": {
        start: {
          line: 70,
          column: 30
        },
        end: {
          line: 70,
          column: 62
        }
      },
      "28": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 101
        }
      },
      "29": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 77,
          column: 15
        }
      },
      "30": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "31": {
        start: {
          line: 85,
          column: 30
        },
        end: {
          line: 85,
          column: 62
        }
      },
      "32": {
        start: {
          line: 86,
          column: 27
        },
        end: {
          line: 86,
          column: 43
        }
      },
      "33": {
        start: {
          line: 87,
          column: 65
        },
        end: {
          line: 87,
          column: 74
        }
      },
      "34": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 95,
          column: 13
        }
      },
      "35": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 93,
          column: 19
        }
      },
      "36": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 23
        }
      },
      "37": {
        start: {
          line: 96,
          column: 30
        },
        end: {
          line: 101,
          column: 14
        }
      },
      "38": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 108,
          column: 15
        }
      },
      "39": {
        start: {
          line: 111,
          column: 30
        },
        end: {
          line: 111,
          column: 62
        }
      },
      "40": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 96
        }
      },
      "41": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 118,
          column: 15
        }
      },
      "42": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "43": {
        start: {
          line: 126,
          column: 30
        },
        end: {
          line: 126,
          column: 62
        }
      },
      "44": {
        start: {
          line: 127,
          column: 27
        },
        end: {
          line: 127,
          column: 43
        }
      },
      "45": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "46": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 133,
          column: 19
        }
      },
      "47": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 23
        }
      },
      "48": {
        start: {
          line: 136,
          column: 26
        },
        end: {
          line: 136,
          column: 78
        }
      },
      "49": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 142,
          column: 15
        }
      },
      "50": {
        start: {
          line: 145,
          column: 30
        },
        end: {
          line: 145,
          column: 62
        }
      },
      "51": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 95
        }
      },
      "52": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 152,
          column: 15
        }
      },
      "53": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "54": {
        start: {
          line: 160,
          column: 30
        },
        end: {
          line: 160,
          column: 62
        }
      },
      "55": {
        start: {
          line: 161,
          column: 27
        },
        end: {
          line: 161,
          column: 43
        }
      },
      "56": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 169,
          column: 13
        }
      },
      "57": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 167,
          column: 19
        }
      },
      "58": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 23
        }
      },
      "59": {
        start: {
          line: 170,
          column: 32
        },
        end: {
          line: 170,
          column: 90
        }
      },
      "60": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "61": {
        start: {
          line: 179,
          column: 30
        },
        end: {
          line: 179,
          column: 62
        }
      },
      "62": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 96
        }
      },
      "63": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 186,
          column: 15
        }
      },
      "64": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "65": {
        start: {
          line: 194,
          column: 30
        },
        end: {
          line: 194,
          column: 62
        }
      },
      "66": {
        start: {
          line: 195,
          column: 27
        },
        end: {
          line: 195,
          column: 43
        }
      },
      "67": {
        start: {
          line: 196,
          column: 27
        },
        end: {
          line: 196,
          column: 37
        }
      },
      "68": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "69": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 202,
          column: 19
        }
      },
      "70": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 23
        }
      },
      "71": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 212,
          column: 13
        }
      },
      "72": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 210,
          column: 19
        }
      },
      "73": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 23
        }
      },
      "74": {
        start: {
          line: 213,
          column: 29
        },
        end: {
          line: 213,
          column: 87
        }
      },
      "75": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 219,
          column: 15
        }
      },
      "76": {
        start: {
          line: 222,
          column: 30
        },
        end: {
          line: 222,
          column: 62
        }
      },
      "77": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 92
        }
      },
      "78": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 229,
          column: 15
        }
      },
      "79": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "80": {
        start: {
          line: 237,
          column: 30
        },
        end: {
          line: 237,
          column: 62
        }
      },
      "81": {
        start: {
          line: 238,
          column: 27
        },
        end: {
          line: 238,
          column: 43
        }
      },
      "82": {
        start: {
          line: 239,
          column: 63
        },
        end: {
          line: 239,
          column: 72
        }
      },
      "83": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "84": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 245,
          column: 19
        }
      },
      "85": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 23
        }
      },
      "86": {
        start: {
          line: 248,
          column: 29
        },
        end: {
          line: 253,
          column: 14
        }
      },
      "87": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 260,
          column: 15
        }
      },
      "88": {
        start: {
          line: 263,
          column: 30
        },
        end: {
          line: 263,
          column: 62
        }
      },
      "89": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 84
        }
      },
      "90": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 270,
          column: 15
        }
      },
      "91": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "92": {
        start: {
          line: 278,
          column: 30
        },
        end: {
          line: 278,
          column: 62
        }
      },
      "93": {
        start: {
          line: 279,
          column: 27
        },
        end: {
          line: 279,
          column: 43
        }
      },
      "94": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "95": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 285,
          column: 19
        }
      },
      "96": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 23
        }
      },
      "97": {
        start: {
          line: 288,
          column: 26
        },
        end: {
          line: 288,
          column: 77
        }
      },
      "98": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 294,
          column: 15
        }
      },
      "99": {
        start: {
          line: 297,
          column: 30
        },
        end: {
          line: 297,
          column: 62
        }
      },
      "100": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 94
        }
      },
      "101": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 304,
          column: 15
        }
      },
      "102": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "103": {
        start: {
          line: 312,
          column: 30
        },
        end: {
          line: 312,
          column: 62
        }
      },
      "104": {
        start: {
          line: 313,
          column: 27
        },
        end: {
          line: 313,
          column: 43
        }
      },
      "105": {
        start: {
          line: 314,
          column: 55
        },
        end: {
          line: 314,
          column: 64
        }
      },
      "106": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 322,
          column: 13
        }
      },
      "107": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 320,
          column: 19
        }
      },
      "108": {
        start: {
          line: 321,
          column: 16
        },
        end: {
          line: 321,
          column: 23
        }
      },
      "109": {
        start: {
          line: 323,
          column: 29
        },
        end: {
          line: 327,
          column: 14
        }
      },
      "110": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 334,
          column: 15
        }
      },
      "111": {
        start: {
          line: 337,
          column: 30
        },
        end: {
          line: 337,
          column: 62
        }
      },
      "112": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 92
        }
      },
      "113": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 344,
          column: 15
        }
      },
      "114": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 387,
          column: 9
        }
      },
      "115": {
        start: {
          line: 352,
          column: 30
        },
        end: {
          line: 352,
          column: 62
        }
      },
      "116": {
        start: {
          line: 353,
          column: 27
        },
        end: {
          line: 353,
          column: 43
        }
      },
      "117": {
        start: {
          line: 354,
          column: 27
        },
        end: {
          line: 354,
          column: 37
        }
      },
      "118": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 362,
          column: 13
        }
      },
      "119": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 360,
          column: 19
        }
      },
      "120": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 361,
          column: 23
        }
      },
      "121": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 370,
          column: 13
        }
      },
      "122": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 368,
          column: 19
        }
      },
      "123": {
        start: {
          line: 369,
          column: 16
        },
        end: {
          line: 369,
          column: 23
        }
      },
      "124": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 67
        }
      },
      "125": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 376,
          column: 15
        }
      },
      "126": {
        start: {
          line: 379,
          column: 30
        },
        end: {
          line: 379,
          column: 62
        }
      },
      "127": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 85
        }
      },
      "128": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 386,
          column: 15
        }
      },
      "129": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "130": {
        start: {
          line: 394,
          column: 30
        },
        end: {
          line: 394,
          column: 62
        }
      },
      "131": {
        start: {
          line: 395,
          column: 27
        },
        end: {
          line: 395,
          column: 43
        }
      },
      "132": {
        start: {
          line: 396,
          column: 27
        },
        end: {
          line: 396,
          column: 37
        }
      },
      "133": {
        start: {
          line: 397,
          column: 31
        },
        end: {
          line: 397,
          column: 39
        }
      },
      "134": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 405,
          column: 13
        }
      },
      "135": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 403,
          column: 19
        }
      },
      "136": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 23
        }
      },
      "137": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 413,
          column: 13
        }
      },
      "138": {
        start: {
          line: 407,
          column: 16
        },
        end: {
          line: 411,
          column: 19
        }
      },
      "139": {
        start: {
          line: 412,
          column: 16
        },
        end: {
          line: 412,
          column: 23
        }
      },
      "140": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 74
        }
      },
      "141": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 419,
          column: 15
        }
      },
      "142": {
        start: {
          line: 422,
          column: 30
        },
        end: {
          line: 422,
          column: 62
        }
      },
      "143": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 85
        }
      },
      "144": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 429,
          column: 15
        }
      },
      "145": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 473,
          column: 9
        }
      },
      "146": {
        start: {
          line: 437,
          column: 30
        },
        end: {
          line: 437,
          column: 62
        }
      },
      "147": {
        start: {
          line: 438,
          column: 27
        },
        end: {
          line: 438,
          column: 43
        }
      },
      "148": {
        start: {
          line: 439,
          column: 83
        },
        end: {
          line: 439,
          column: 92
        }
      },
      "149": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 447,
          column: 13
        }
      },
      "150": {
        start: {
          line: 441,
          column: 16
        },
        end: {
          line: 445,
          column: 19
        }
      },
      "151": {
        start: {
          line: 446,
          column: 16
        },
        end: {
          line: 446,
          column: 23
        }
      },
      "152": {
        start: {
          line: 448,
          column: 28
        },
        end: {
          line: 455,
          column: 14
        }
      },
      "153": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 462,
          column: 15
        }
      },
      "154": {
        start: {
          line: 465,
          column: 30
        },
        end: {
          line: 465,
          column: 62
        }
      },
      "155": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 91
        }
      },
      "156": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 472,
          column: 15
        }
      },
      "157": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 508,
          column: 9
        }
      },
      "158": {
        start: {
          line: 480,
          column: 30
        },
        end: {
          line: 480,
          column: 62
        }
      },
      "159": {
        start: {
          line: 481,
          column: 27
        },
        end: {
          line: 481,
          column: 43
        }
      },
      "160": {
        start: {
          line: 482,
          column: 41
        },
        end: {
          line: 482,
          column: 50
        }
      },
      "161": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 490,
          column: 13
        }
      },
      "162": {
        start: {
          line: 484,
          column: 16
        },
        end: {
          line: 488,
          column: 19
        }
      },
      "163": {
        start: {
          line: 489,
          column: 16
        },
        end: {
          line: 489,
          column: 23
        }
      },
      "164": {
        start: {
          line: 491,
          column: 26
        },
        end: {
          line: 491,
          column: 88
        }
      },
      "165": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 497,
          column: 15
        }
      },
      "166": {
        start: {
          line: 500,
          column: 30
        },
        end: {
          line: 500,
          column: 62
        }
      },
      "167": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 501,
          column: 97
        }
      },
      "168": {
        start: {
          line: 502,
          column: 12
        },
        end: {
          line: 507,
          column: 15
        }
      },
      "169": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 547,
          column: 9
        }
      },
      "170": {
        start: {
          line: 515,
          column: 30
        },
        end: {
          line: 515,
          column: 62
        }
      },
      "171": {
        start: {
          line: 516,
          column: 27
        },
        end: {
          line: 516,
          column: 43
        }
      },
      "172": {
        start: {
          line: 517,
          column: 55
        },
        end: {
          line: 517,
          column: 64
        }
      },
      "173": {
        start: {
          line: 518,
          column: 12
        },
        end: {
          line: 525,
          column: 13
        }
      },
      "174": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 523,
          column: 19
        }
      },
      "175": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 524,
          column: 23
        }
      },
      "176": {
        start: {
          line: 526,
          column: 28
        },
        end: {
          line: 530,
          column: 14
        }
      },
      "177": {
        start: {
          line: 531,
          column: 12
        },
        end: {
          line: 536,
          column: 15
        }
      },
      "178": {
        start: {
          line: 539,
          column: 30
        },
        end: {
          line: 539,
          column: 62
        }
      },
      "179": {
        start: {
          line: 540,
          column: 12
        },
        end: {
          line: 540,
          column: 94
        }
      },
      "180": {
        start: {
          line: 541,
          column: 12
        },
        end: {
          line: 546,
          column: 15
        }
      },
      "181": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 587,
          column: 9
        }
      },
      "182": {
        start: {
          line: 554,
          column: 30
        },
        end: {
          line: 554,
          column: 62
        }
      },
      "183": {
        start: {
          line: 555,
          column: 27
        },
        end: {
          line: 555,
          column: 43
        }
      },
      "184": {
        start: {
          line: 556,
          column: 59
        },
        end: {
          line: 556,
          column: 68
        }
      },
      "185": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 564,
          column: 13
        }
      },
      "186": {
        start: {
          line: 558,
          column: 16
        },
        end: {
          line: 562,
          column: 19
        }
      },
      "187": {
        start: {
          line: 563,
          column: 16
        },
        end: {
          line: 563,
          column: 23
        }
      },
      "188": {
        start: {
          line: 565,
          column: 28
        },
        end: {
          line: 569,
          column: 14
        }
      },
      "189": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 576,
          column: 15
        }
      },
      "190": {
        start: {
          line: 579,
          column: 30
        },
        end: {
          line: 579,
          column: 62
        }
      },
      "191": {
        start: {
          line: 580,
          column: 12
        },
        end: {
          line: 580,
          column: 91
        }
      },
      "192": {
        start: {
          line: 581,
          column: 12
        },
        end: {
          line: 586,
          column: 15
        }
      },
      "193": {
        start: {
          line: 593,
          column: 8
        },
        end: {
          line: 621,
          column: 9
        }
      },
      "194": {
        start: {
          line: 594,
          column: 30
        },
        end: {
          line: 594,
          column: 62
        }
      },
      "195": {
        start: {
          line: 595,
          column: 27
        },
        end: {
          line: 595,
          column: 43
        }
      },
      "196": {
        start: {
          line: 596,
          column: 12
        },
        end: {
          line: 603,
          column: 13
        }
      },
      "197": {
        start: {
          line: 597,
          column: 16
        },
        end: {
          line: 601,
          column: 19
        }
      },
      "198": {
        start: {
          line: 602,
          column: 16
        },
        end: {
          line: 602,
          column: 23
        }
      },
      "199": {
        start: {
          line: 604,
          column: 28
        },
        end: {
          line: 604,
          column: 81
        }
      },
      "200": {
        start: {
          line: 605,
          column: 12
        },
        end: {
          line: 610,
          column: 15
        }
      },
      "201": {
        start: {
          line: 613,
          column: 30
        },
        end: {
          line: 613,
          column: 62
        }
      },
      "202": {
        start: {
          line: 614,
          column: 12
        },
        end: {
          line: 614,
          column: 91
        }
      },
      "203": {
        start: {
          line: 615,
          column: 12
        },
        end: {
          line: 620,
          column: 15
        }
      },
      "204": {
        start: {
          line: 627,
          column: 8
        },
        end: {
          line: 664,
          column: 9
        }
      },
      "205": {
        start: {
          line: 628,
          column: 30
        },
        end: {
          line: 628,
          column: 62
        }
      },
      "206": {
        start: {
          line: 629,
          column: 27
        },
        end: {
          line: 629,
          column: 43
        }
      },
      "207": {
        start: {
          line: 630,
          column: 27
        },
        end: {
          line: 630,
          column: 37
        }
      },
      "208": {
        start: {
          line: 631,
          column: 12
        },
        end: {
          line: 638,
          column: 13
        }
      },
      "209": {
        start: {
          line: 632,
          column: 16
        },
        end: {
          line: 636,
          column: 19
        }
      },
      "210": {
        start: {
          line: 637,
          column: 16
        },
        end: {
          line: 637,
          column: 23
        }
      },
      "211": {
        start: {
          line: 639,
          column: 12
        },
        end: {
          line: 646,
          column: 13
        }
      },
      "212": {
        start: {
          line: 640,
          column: 16
        },
        end: {
          line: 644,
          column: 19
        }
      },
      "213": {
        start: {
          line: 645,
          column: 16
        },
        end: {
          line: 645,
          column: 23
        }
      },
      "214": {
        start: {
          line: 647,
          column: 28
        },
        end: {
          line: 647,
          column: 85
        }
      },
      "215": {
        start: {
          line: 648,
          column: 12
        },
        end: {
          line: 653,
          column: 15
        }
      },
      "216": {
        start: {
          line: 656,
          column: 30
        },
        end: {
          line: 656,
          column: 62
        }
      },
      "217": {
        start: {
          line: 657,
          column: 12
        },
        end: {
          line: 657,
          column: 91
        }
      },
      "218": {
        start: {
          line: 658,
          column: 12
        },
        end: {
          line: 663,
          column: 15
        }
      },
      "219": {
        start: {
          line: 670,
          column: 8
        },
        end: {
          line: 698,
          column: 9
        }
      },
      "220": {
        start: {
          line: 671,
          column: 30
        },
        end: {
          line: 671,
          column: 62
        }
      },
      "221": {
        start: {
          line: 672,
          column: 27
        },
        end: {
          line: 672,
          column: 43
        }
      },
      "222": {
        start: {
          line: 673,
          column: 12
        },
        end: {
          line: 680,
          column: 13
        }
      },
      "223": {
        start: {
          line: 674,
          column: 16
        },
        end: {
          line: 678,
          column: 19
        }
      },
      "224": {
        start: {
          line: 679,
          column: 16
        },
        end: {
          line: 679,
          column: 23
        }
      },
      "225": {
        start: {
          line: 681,
          column: 26
        },
        end: {
          line: 681,
          column: 77
        }
      },
      "226": {
        start: {
          line: 682,
          column: 12
        },
        end: {
          line: 687,
          column: 15
        }
      },
      "227": {
        start: {
          line: 690,
          column: 30
        },
        end: {
          line: 690,
          column: 62
        }
      },
      "228": {
        start: {
          line: 691,
          column: 12
        },
        end: {
          line: 691,
          column: 94
        }
      },
      "229": {
        start: {
          line: 692,
          column: 12
        },
        end: {
          line: 697,
          column: 15
        }
      },
      "230": {
        start: {
          line: 704,
          column: 8
        },
        end: {
          line: 732,
          column: 9
        }
      },
      "231": {
        start: {
          line: 705,
          column: 30
        },
        end: {
          line: 705,
          column: 62
        }
      },
      "232": {
        start: {
          line: 706,
          column: 27
        },
        end: {
          line: 706,
          column: 43
        }
      },
      "233": {
        start: {
          line: 707,
          column: 12
        },
        end: {
          line: 714,
          column: 13
        }
      },
      "234": {
        start: {
          line: 708,
          column: 16
        },
        end: {
          line: 712,
          column: 19
        }
      },
      "235": {
        start: {
          line: 713,
          column: 16
        },
        end: {
          line: 713,
          column: 23
        }
      },
      "236": {
        start: {
          line: 715,
          column: 30
        },
        end: {
          line: 715,
          column: 85
        }
      },
      "237": {
        start: {
          line: 716,
          column: 12
        },
        end: {
          line: 721,
          column: 15
        }
      },
      "238": {
        start: {
          line: 724,
          column: 30
        },
        end: {
          line: 724,
          column: 62
        }
      },
      "239": {
        start: {
          line: 725,
          column: 12
        },
        end: {
          line: 725,
          column: 93
        }
      },
      "240": {
        start: {
          line: 726,
          column: 12
        },
        end: {
          line: 731,
          column: 15
        }
      },
      "241": {
        start: {
          line: 738,
          column: 8
        },
        end: {
          line: 784,
          column: 9
        }
      },
      "242": {
        start: {
          line: 739,
          column: 30
        },
        end: {
          line: 739,
          column: 62
        }
      },
      "243": {
        start: {
          line: 740,
          column: 27
        },
        end: {
          line: 740,
          column: 43
        }
      },
      "244": {
        start: {
          line: 741,
          column: 35
        },
        end: {
          line: 741,
          column: 45
        }
      },
      "245": {
        start: {
          line: 742,
          column: 41
        },
        end: {
          line: 742,
          column: 49
        }
      },
      "246": {
        start: {
          line: 743,
          column: 12
        },
        end: {
          line: 750,
          column: 13
        }
      },
      "247": {
        start: {
          line: 744,
          column: 16
        },
        end: {
          line: 748,
          column: 19
        }
      },
      "248": {
        start: {
          line: 749,
          column: 16
        },
        end: {
          line: 749,
          column: 23
        }
      },
      "249": {
        start: {
          line: 751,
          column: 12
        },
        end: {
          line: 758,
          column: 13
        }
      },
      "250": {
        start: {
          line: 752,
          column: 16
        },
        end: {
          line: 756,
          column: 19
        }
      },
      "251": {
        start: {
          line: 757,
          column: 16
        },
        end: {
          line: 757,
          column: 23
        }
      },
      "252": {
        start: {
          line: 759,
          column: 28
        },
        end: {
          line: 759,
          column: 116
        }
      },
      "253": {
        start: {
          line: 760,
          column: 12
        },
        end: {
          line: 773,
          column: 13
        }
      },
      "254": {
        start: {
          line: 761,
          column: 16
        },
        end: {
          line: 765,
          column: 19
        }
      },
      "255": {
        start: {
          line: 768,
          column: 16
        },
        end: {
          line: 772,
          column: 19
        }
      },
      "256": {
        start: {
          line: 776,
          column: 30
        },
        end: {
          line: 776,
          column: 62
        }
      },
      "257": {
        start: {
          line: 777,
          column: 12
        },
        end: {
          line: 777,
          column: 85
        }
      },
      "258": {
        start: {
          line: 778,
          column: 12
        },
        end: {
          line: 783,
          column: 15
        }
      },
      "259": {
        start: {
          line: 787,
          column: 0
        },
        end: {
          line: 787,
          column: 60
        }
      },
      "260": {
        start: {
          line: 788,
          column: 0
        },
        end: {
          line: 788,
          column: 66
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 38
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 33
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 49
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 43
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 83
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        loc: {
          start: {
            line: 124,
            column: 37
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 124
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 43
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 158
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 192,
            column: 4
          },
          end: {
            line: 192,
            column: 5
          }
        },
        loc: {
          start: {
            line: 192,
            column: 39
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 192
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 235,
            column: 32
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 235
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        },
        loc: {
          start: {
            line: 276,
            column: 36
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 276
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 39
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 310
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 350,
            column: 4
          },
          end: {
            line: 350,
            column: 5
          }
        },
        loc: {
          start: {
            line: 350,
            column: 35
          },
          end: {
            line: 388,
            column: 5
          }
        },
        line: 350
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 392,
            column: 4
          },
          end: {
            line: 392,
            column: 5
          }
        },
        loc: {
          start: {
            line: 392,
            column: 34
          },
          end: {
            line: 431,
            column: 5
          }
        },
        line: 392
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 435,
            column: 4
          },
          end: {
            line: 435,
            column: 5
          }
        },
        loc: {
          start: {
            line: 435,
            column: 38
          },
          end: {
            line: 474,
            column: 5
          }
        },
        line: 435
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 478,
            column: 4
          },
          end: {
            line: 478,
            column: 5
          }
        },
        loc: {
          start: {
            line: 478,
            column: 39
          },
          end: {
            line: 509,
            column: 5
          }
        },
        line: 478
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 513,
            column: 4
          },
          end: {
            line: 513,
            column: 5
          }
        },
        loc: {
          start: {
            line: 513,
            column: 41
          },
          end: {
            line: 548,
            column: 5
          }
        },
        line: 513
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 552,
            column: 4
          },
          end: {
            line: 552,
            column: 5
          }
        },
        loc: {
          start: {
            line: 552,
            column: 38
          },
          end: {
            line: 588,
            column: 5
          }
        },
        line: 552
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 592,
            column: 4
          },
          end: {
            line: 592,
            column: 5
          }
        },
        loc: {
          start: {
            line: 592,
            column: 38
          },
          end: {
            line: 622,
            column: 5
          }
        },
        line: 592
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 626,
            column: 4
          },
          end: {
            line: 626,
            column: 5
          }
        },
        loc: {
          start: {
            line: 626,
            column: 38
          },
          end: {
            line: 665,
            column: 5
          }
        },
        line: 626
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 669,
            column: 4
          },
          end: {
            line: 669,
            column: 5
          }
        },
        loc: {
          start: {
            line: 669,
            column: 36
          },
          end: {
            line: 699,
            column: 5
          }
        },
        line: 669
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 703,
            column: 4
          },
          end: {
            line: 703,
            column: 5
          }
        },
        loc: {
          start: {
            line: 703,
            column: 40
          },
          end: {
            line: 733,
            column: 5
          }
        },
        line: 703
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 737,
            column: 4
          },
          end: {
            line: 737,
            column: 5
          }
        },
        loc: {
          start: {
            line: 737,
            column: 43
          },
          end: {
            line: 785,
            column: 5
          }
        },
        line: 737
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "4": {
        loc: {
          start: {
            line: 41,
            column: 23
          },
          end: {
            line: 41,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 48
          },
          end: {
            line: 41,
            column: 61
          }
        }, {
          start: {
            line: 41,
            column: 64
          },
          end: {
            line: 41,
            column: 79
          }
        }],
        line: 41
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 75,
            column: 23
          },
          end: {
            line: 75,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 48
          },
          end: {
            line: 75,
            column: 61
          }
        }, {
          start: {
            line: 75,
            column: 64
          },
          end: {
            line: 75,
            column: 79
          }
        }],
        line: 75
      },
      "7": {
        loc: {
          start: {
            line: 87,
            column: 20
          },
          end: {
            line: 87,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 87,
            column: 27
          },
          end: {
            line: 87,
            column: 30
          }
        }],
        line: 87
      },
      "8": {
        loc: {
          start: {
            line: 87,
            column: 32
          },
          end: {
            line: 87,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 87,
            column: 40
          },
          end: {
            line: 87,
            column: 44
          }
        }],
        line: 87
      },
      "9": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 95,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 95,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "10": {
        loc: {
          start: {
            line: 116,
            column: 23
          },
          end: {
            line: 116,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 116,
            column: 48
          },
          end: {
            line: 116,
            column: 61
          }
        }, {
          start: {
            line: 116,
            column: 64
          },
          end: {
            line: 116,
            column: 79
          }
        }],
        line: 116
      },
      "11": {
        loc: {
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "12": {
        loc: {
          start: {
            line: 150,
            column: 23
          },
          end: {
            line: 150,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 48
          },
          end: {
            line: 150,
            column: 61
          }
        }, {
          start: {
            line: 150,
            column: 64
          },
          end: {
            line: 150,
            column: 79
          }
        }],
        line: 150
      },
      "13": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "14": {
        loc: {
          start: {
            line: 184,
            column: 23
          },
          end: {
            line: 184,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 184,
            column: 48
          },
          end: {
            line: 184,
            column: 61
          }
        }, {
          start: {
            line: 184,
            column: 64
          },
          end: {
            line: 184,
            column: 79
          }
        }],
        line: 184
      },
      "15": {
        loc: {
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "16": {
        loc: {
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 212,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 212,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "17": {
        loc: {
          start: {
            line: 227,
            column: 23
          },
          end: {
            line: 227,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 227,
            column: 48
          },
          end: {
            line: 227,
            column: 61
          }
        }, {
          start: {
            line: 227,
            column: 64
          },
          end: {
            line: 227,
            column: 79
          }
        }],
        line: 227
      },
      "18": {
        loc: {
          start: {
            line: 239,
            column: 34
          },
          end: {
            line: 239,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 239,
            column: 41
          },
          end: {
            line: 239,
            column: 44
          }
        }],
        line: 239
      },
      "19": {
        loc: {
          start: {
            line: 239,
            column: 46
          },
          end: {
            line: 239,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 239,
            column: 54
          },
          end: {
            line: 239,
            column: 58
          }
        }],
        line: 239
      },
      "20": {
        loc: {
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "21": {
        loc: {
          start: {
            line: 268,
            column: 23
          },
          end: {
            line: 268,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 268,
            column: 48
          },
          end: {
            line: 268,
            column: 61
          }
        }, {
          start: {
            line: 268,
            column: 64
          },
          end: {
            line: 268,
            column: 79
          }
        }],
        line: 268
      },
      "22": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 287,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 287,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "23": {
        loc: {
          start: {
            line: 302,
            column: 23
          },
          end: {
            line: 302,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 302,
            column: 48
          },
          end: {
            line: 302,
            column: 61
          }
        }, {
          start: {
            line: 302,
            column: 64
          },
          end: {
            line: 302,
            column: 79
          }
        }],
        line: 302
      },
      "24": {
        loc: {
          start: {
            line: 314,
            column: 26
          },
          end: {
            line: 314,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 314,
            column: 33
          },
          end: {
            line: 314,
            column: 36
          }
        }],
        line: 314
      },
      "25": {
        loc: {
          start: {
            line: 314,
            column: 38
          },
          end: {
            line: 314,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 314,
            column: 46
          },
          end: {
            line: 314,
            column: 50
          }
        }],
        line: 314
      },
      "26": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 322,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 322,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "27": {
        loc: {
          start: {
            line: 342,
            column: 23
          },
          end: {
            line: 342,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 342,
            column: 48
          },
          end: {
            line: 342,
            column: 61
          }
        }, {
          start: {
            line: 342,
            column: 64
          },
          end: {
            line: 342,
            column: 79
          }
        }],
        line: 342
      },
      "28": {
        loc: {
          start: {
            line: 355,
            column: 12
          },
          end: {
            line: 362,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 12
          },
          end: {
            line: 362,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "29": {
        loc: {
          start: {
            line: 363,
            column: 12
          },
          end: {
            line: 370,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 12
          },
          end: {
            line: 370,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "30": {
        loc: {
          start: {
            line: 384,
            column: 23
          },
          end: {
            line: 384,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 384,
            column: 48
          },
          end: {
            line: 384,
            column: 61
          }
        }, {
          start: {
            line: 384,
            column: 64
          },
          end: {
            line: 384,
            column: 79
          }
        }],
        line: 384
      },
      "31": {
        loc: {
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "32": {
        loc: {
          start: {
            line: 406,
            column: 12
          },
          end: {
            line: 413,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 12
          },
          end: {
            line: 413,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 406
      },
      "33": {
        loc: {
          start: {
            line: 427,
            column: 23
          },
          end: {
            line: 427,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 427,
            column: 48
          },
          end: {
            line: 427,
            column: 61
          }
        }, {
          start: {
            line: 427,
            column: 64
          },
          end: {
            line: 427,
            column: 79
          }
        }],
        line: 427
      },
      "34": {
        loc: {
          start: {
            line: 439,
            column: 26
          },
          end: {
            line: 439,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 439,
            column: 33
          },
          end: {
            line: 439,
            column: 36
          }
        }],
        line: 439
      },
      "35": {
        loc: {
          start: {
            line: 439,
            column: 38
          },
          end: {
            line: 439,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 439,
            column: 46
          },
          end: {
            line: 439,
            column: 50
          }
        }],
        line: 439
      },
      "36": {
        loc: {
          start: {
            line: 440,
            column: 12
          },
          end: {
            line: 447,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 440,
            column: 12
          },
          end: {
            line: 447,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 440
      },
      "37": {
        loc: {
          start: {
            line: 470,
            column: 23
          },
          end: {
            line: 470,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 470,
            column: 48
          },
          end: {
            line: 470,
            column: 61
          }
        }, {
          start: {
            line: 470,
            column: 64
          },
          end: {
            line: 470,
            column: 79
          }
        }],
        line: 470
      },
      "38": {
        loc: {
          start: {
            line: 482,
            column: 20
          },
          end: {
            line: 482,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 482,
            column: 29
          },
          end: {
            line: 482,
            column: 36
          }
        }],
        line: 482
      },
      "39": {
        loc: {
          start: {
            line: 483,
            column: 12
          },
          end: {
            line: 490,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 483,
            column: 12
          },
          end: {
            line: 490,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 483
      },
      "40": {
        loc: {
          start: {
            line: 505,
            column: 23
          },
          end: {
            line: 505,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 505,
            column: 48
          },
          end: {
            line: 505,
            column: 61
          }
        }, {
          start: {
            line: 505,
            column: 64
          },
          end: {
            line: 505,
            column: 79
          }
        }],
        line: 505
      },
      "41": {
        loc: {
          start: {
            line: 518,
            column: 12
          },
          end: {
            line: 525,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 518,
            column: 12
          },
          end: {
            line: 525,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 518
      },
      "42": {
        loc: {
          start: {
            line: 544,
            column: 23
          },
          end: {
            line: 544,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 544,
            column: 48
          },
          end: {
            line: 544,
            column: 61
          }
        }, {
          start: {
            line: 544,
            column: 64
          },
          end: {
            line: 544,
            column: 79
          }
        }],
        line: 544
      },
      "43": {
        loc: {
          start: {
            line: 556,
            column: 30
          },
          end: {
            line: 556,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 556,
            column: 37
          },
          end: {
            line: 556,
            column: 40
          }
        }],
        line: 556
      },
      "44": {
        loc: {
          start: {
            line: 556,
            column: 42
          },
          end: {
            line: 556,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 556,
            column: 50
          },
          end: {
            line: 556,
            column: 54
          }
        }],
        line: 556
      },
      "45": {
        loc: {
          start: {
            line: 557,
            column: 12
          },
          end: {
            line: 564,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 557,
            column: 12
          },
          end: {
            line: 564,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 557
      },
      "46": {
        loc: {
          start: {
            line: 584,
            column: 23
          },
          end: {
            line: 584,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 584,
            column: 48
          },
          end: {
            line: 584,
            column: 61
          }
        }, {
          start: {
            line: 584,
            column: 64
          },
          end: {
            line: 584,
            column: 79
          }
        }],
        line: 584
      },
      "47": {
        loc: {
          start: {
            line: 596,
            column: 12
          },
          end: {
            line: 603,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 596,
            column: 12
          },
          end: {
            line: 603,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 596
      },
      "48": {
        loc: {
          start: {
            line: 618,
            column: 23
          },
          end: {
            line: 618,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 618,
            column: 48
          },
          end: {
            line: 618,
            column: 61
          }
        }, {
          start: {
            line: 618,
            column: 64
          },
          end: {
            line: 618,
            column: 79
          }
        }],
        line: 618
      },
      "49": {
        loc: {
          start: {
            line: 631,
            column: 12
          },
          end: {
            line: 638,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 631,
            column: 12
          },
          end: {
            line: 638,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 631
      },
      "50": {
        loc: {
          start: {
            line: 639,
            column: 12
          },
          end: {
            line: 646,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 639,
            column: 12
          },
          end: {
            line: 646,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 639
      },
      "51": {
        loc: {
          start: {
            line: 661,
            column: 23
          },
          end: {
            line: 661,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 661,
            column: 48
          },
          end: {
            line: 661,
            column: 61
          }
        }, {
          start: {
            line: 661,
            column: 64
          },
          end: {
            line: 661,
            column: 79
          }
        }],
        line: 661
      },
      "52": {
        loc: {
          start: {
            line: 673,
            column: 12
          },
          end: {
            line: 680,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 673,
            column: 12
          },
          end: {
            line: 680,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 673
      },
      "53": {
        loc: {
          start: {
            line: 695,
            column: 23
          },
          end: {
            line: 695,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 695,
            column: 48
          },
          end: {
            line: 695,
            column: 61
          }
        }, {
          start: {
            line: 695,
            column: 64
          },
          end: {
            line: 695,
            column: 79
          }
        }],
        line: 695
      },
      "54": {
        loc: {
          start: {
            line: 707,
            column: 12
          },
          end: {
            line: 714,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 707,
            column: 12
          },
          end: {
            line: 714,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 707
      },
      "55": {
        loc: {
          start: {
            line: 729,
            column: 23
          },
          end: {
            line: 729,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 729,
            column: 48
          },
          end: {
            line: 729,
            column: 61
          }
        }, {
          start: {
            line: 729,
            column: 64
          },
          end: {
            line: 729,
            column: 79
          }
        }],
        line: 729
      },
      "56": {
        loc: {
          start: {
            line: 743,
            column: 12
          },
          end: {
            line: 750,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 743,
            column: 12
          },
          end: {
            line: 750,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 743
      },
      "57": {
        loc: {
          start: {
            line: 751,
            column: 12
          },
          end: {
            line: 758,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 751,
            column: 12
          },
          end: {
            line: 758,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 751
      },
      "58": {
        loc: {
          start: {
            line: 751,
            column: 16
          },
          end: {
            line: 751,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 751,
            column: 16
          },
          end: {
            line: 751,
            column: 27
          }
        }, {
          start: {
            line: 751,
            column: 31
          },
          end: {
            line: 751,
            column: 38
          }
        }, {
          start: {
            line: 751,
            column: 42
          },
          end: {
            line: 751,
            column: 84
          }
        }],
        line: 751
      },
      "59": {
        loc: {
          start: {
            line: 760,
            column: 12
          },
          end: {
            line: 773,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 760,
            column: 12
          },
          end: {
            line: 773,
            column: 13
          }
        }, {
          start: {
            line: 767,
            column: 17
          },
          end: {
            line: 773,
            column: 13
          }
        }],
        line: 760
      },
      "60": {
        loc: {
          start: {
            line: 781,
            column: 23
          },
          end: {
            line: 781,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 781,
            column: 48
          },
          end: {
            line: 781,
            column: 61
          }
        }, {
          start: {
            line: 781,
            column: 64
          },
          end: {
            line: 781,
            column: 79
          }
        }],
        line: 781
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0],
      "35": [0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0],
      "44": [0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0, 0],
      "59": [0, 0],
      "60": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/department-head/departmentHeadController.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/department-head/departmentHeadController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { DepartmentHeadService } from '../../services/department-head/departmentHeadService';\nimport { getRequestId } from '../../utils/types/express';\nimport logger from '../../utils/logger';\n\nconst departmentHeadService = new DepartmentHeadService();\n\nexport class DepartmentHeadController {\n  /**\n   * Get department head's department info\n   */\n  async getDepartmentInfo(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const departmentInfo = await departmentHeadService.getDepartmentInfo(userId);\n      \n      res.json({\n        success: true,\n        message: 'Department info retrieved successfully',\n        data: departmentInfo,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting department info:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve department info',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get department head dashboard data\n   */\n  async getDashboard(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const dashboard = await departmentHeadService.getDashboard(userId);\n      \n      res.json({\n        success: true,\n        message: 'Dashboard data retrieved successfully',\n        data: dashboard,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting department head dashboard:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve dashboard data',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get department employees\n   */\n  async getDepartmentEmployees(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n      const { page = '1', limit = '10', status, search } = req.query;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const employees = await departmentHeadService.getDepartmentEmployees(\n        userId,\n        {\n          page: parseInt(page as string),\n          limit: parseInt(limit as string),\n          status: status as string,\n          search: search as string\n        }\n      );\n      \n      res.json({\n        success: true,\n        message: 'Department employees retrieved successfully',\n        data: employees.data,\n        pagination: employees.pagination,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting department employees:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve department employees',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get employee statistics for department\n   */\n  async getEmployeeStats(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const stats = await departmentHeadService.getEmployeeStats(userId);\n      \n      res.json({\n        success: true,\n        message: 'Employee statistics retrieved successfully',\n        data: stats,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting employee statistics:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve employee statistics',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get employee performance statistics\n   */\n  async getEmployeePerformance(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const performance = await departmentHeadService.getEmployeePerformance(userId);\n      \n      res.json({\n        success: true,\n        message: 'Employee performance retrieved successfully',\n        data: performance,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting employee performance:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve employee performance',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get employee details\n   */\n  async getEmployeeDetails(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n      const { id } = req.params;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Employee ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const employee = await departmentHeadService.getEmployeeDetails(userId, id);\n      \n      res.json({\n        success: true,\n        message: 'Employee details retrieved successfully',\n        data: employee,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting employee details:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve employee details',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get all requests for department head\n   */\n  async getRequests(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n      const { type, status, page = '1', limit = '10' } = req.query;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const requests = await departmentHeadService.getRequests(\n        userId,\n        {\n          type: type as string,\n          status: status as string,\n          page: parseInt(page as string),\n          limit: parseInt(limit as string)\n        }\n      );\n      \n      res.json({\n        success: true,\n        message: 'Requests retrieved successfully',\n        data: requests.data,\n        pagination: requests.pagination,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting requests:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve requests',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get request statistics\n   */\n  async getRequestStats(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const stats = await departmentHeadService.getRequestStats(userId);\n      \n      res.json({\n        success: true,\n        message: 'Request statistics retrieved successfully',\n        data: stats,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting request statistics:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve request statistics',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get pending requests for approval\n   */\n  async getPendingRequests(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n      const { type, page = '1', limit = '10' } = req.query;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const requests = await departmentHeadService.getPendingRequests(\n        userId,\n        {\n          type: type as string,\n          page: parseInt(page as string),\n          limit: parseInt(limit as string)\n        }\n      );\n      \n      res.json({\n        success: true,\n        message: 'Pending requests retrieved successfully',\n        data: requests.data,\n        pagination: requests.pagination,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting pending requests:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve pending requests',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Approve a request\n   */\n  async approveRequest(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n      const { id } = req.params;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Request ID is required',\n          requestId\n        });\n        return;\n      }\n\n      await departmentHeadService.approveRequest(userId, id);\n      \n      res.json({\n        success: true,\n        message: 'Request approved successfully',\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error approving request:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to approve request',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Reject a request\n   */\n  async rejectRequest(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n      const { id } = req.params;\n      const { reason } = req.body;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Request ID is required',\n          requestId\n        });\n        return;\n      }\n\n      await departmentHeadService.rejectRequest(userId, id, reason);\n      \n      res.json({\n        success: true,\n        message: 'Request rejected successfully',\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error rejecting request:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to reject request',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get request history\n   */\n  async getRequestHistory(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n      const { type, page = '1', limit = '10', status, startDate, endDate } = req.query;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const history = await departmentHeadService.getRequestHistory(\n        userId,\n        {\n          type: type as string,\n          page: parseInt(page as string),\n          limit: parseInt(limit as string),\n          status: status as string,\n          startDate: startDate as string,\n          endDate: endDate as string\n        }\n      );\n      \n      res.json({\n        success: true,\n        message: 'Request history retrieved successfully',\n        data: history.data,\n        pagination: history.pagination,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting request history:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve request history',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get department statistics\n   */\n  async getDepartmentStats(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n      const { period = 'month' } = req.query;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const stats = await departmentHeadService.getDepartmentStats(userId, period as string);\n      \n      res.json({\n        success: true,\n        message: 'Department statistics retrieved successfully',\n        data: stats,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting department statistics:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve department statistics',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get attendance summary for department\n   */\n  async getAttendanceSummary(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n      const { startDate, endDate, employeeId } = req.query;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const summary = await departmentHeadService.getAttendanceSummary(\n        userId,\n        {\n          startDate: startDate as string,\n          endDate: endDate as string,\n          employeeId: employeeId as string\n        }\n      );\n      \n      res.json({\n        success: true,\n        message: 'Attendance summary retrieved successfully',\n        data: summary,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting attendance summary:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve attendance summary',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get payroll summary for department\n   */\n  async getPayrollSummary(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n      const { periodId, page = '1', limit = '10' } = req.query;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const summary = await departmentHeadService.getPayrollSummary(\n        userId,\n        {\n          periodId: periodId as string,\n          page: parseInt(page as string),\n          limit: parseInt(limit as string)\n        }\n      );\n      \n      res.json({\n        success: true,\n        message: 'Payroll summary retrieved successfully',\n        data: summary.data,\n        pagination: summary.pagination,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting payroll summary:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve payroll summary',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get payroll periods for department\n   */\n  async getPayrollPeriods(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const periods = await departmentHeadService.getPayrollPeriods(userId);\n      \n      res.json({\n        success: true,\n        message: 'Payroll periods retrieved successfully',\n        data: periods,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting payroll periods:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve payroll periods',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get payroll records for a specific period\n   */\n  async getPayrollRecords(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n      const { id } = req.params;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Period ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const records = await departmentHeadService.getPayrollRecords(userId, id);\n      \n      res.json({\n        success: true,\n        message: 'Payroll records retrieved successfully',\n        data: records,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting payroll records:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve payroll records',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get payroll statistics for department\n   */\n  async getPayrollStats(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const stats = await departmentHeadService.getPayrollStats(userId);\n      \n      res.json({\n        success: true,\n        message: 'Payroll statistics retrieved successfully',\n        data: stats,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting payroll statistics:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve payroll statistics',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get payroll approvals for department\n   */\n  async getPayrollApprovals(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      const approvals = await departmentHeadService.getPayrollApprovals(userId);\n      \n      res.json({\n        success: true,\n        message: 'Payroll approvals retrieved successfully',\n        data: approvals,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error getting payroll approvals:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve payroll approvals',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Approve or reject payroll approval\n   */\n  async approvePayrollApproval(req: Request, res: Response): Promise<void> {\n    try {\n      const requestId = getRequestId(req);\n      const userId = req.user?.userId;\n      const { approvalId } = req.params;\n      const { status, comments } = req.body;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'User not authenticated',\n          requestId\n        });\n        return;\n      }\n\n      if (!approvalId || !status || !['approved', 'rejected'].includes(status)) {\n        res.status(400).json({\n          success: false,\n          message: 'Invalid approval ID or status',\n          requestId\n        });\n        return;\n      }\n\n      const success = await departmentHeadService.approvePayrollApproval(userId, approvalId, status, comments);\n      \n      if (success) {\n        res.json({\n          success: true,\n          message: `Payroll ${status} successfully`,\n          requestId\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          message: 'Failed to update payroll approval',\n          requestId\n        });\n      }\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Error approving payroll:', { error, requestId });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to approve payroll',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n\n}\n\nexport const departmentHeadController = new DepartmentHeadController();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "eb96bf5ce1990c4bae8e7dc5735fad9148856690"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1swhv1s735 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1swhv1s735();
var __importDefault =
/* istanbul ignore next */
(cov_1swhv1s735().s[0]++,
/* istanbul ignore next */
(cov_1swhv1s735().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1swhv1s735().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1swhv1s735().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1swhv1s735().f[0]++;
  cov_1swhv1s735().s[1]++;
  return /* istanbul ignore next */(cov_1swhv1s735().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1swhv1s735().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1swhv1s735().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1swhv1s735().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1swhv1s735().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1swhv1s735().s[3]++;
exports.departmentHeadController = exports.DepartmentHeadController = void 0;
const departmentHeadService_1 =
/* istanbul ignore next */
(cov_1swhv1s735().s[4]++, require("../../services/department-head/departmentHeadService"));
const express_1 =
/* istanbul ignore next */
(cov_1swhv1s735().s[5]++, require("../../utils/types/express"));
const logger_1 =
/* istanbul ignore next */
(cov_1swhv1s735().s[6]++, __importDefault(require("../../utils/logger")));
const departmentHeadService =
/* istanbul ignore next */
(cov_1swhv1s735().s[7]++, new departmentHeadService_1.DepartmentHeadService());
class DepartmentHeadController {
  /**
   * Get department head's department info
   */
  async getDepartmentInfo(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[1]++;
    cov_1swhv1s735().s[8]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[9]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[10]++, req.user?.userId);
      /* istanbul ignore next */
      cov_1swhv1s735().s[11]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[3][0]++;
        cov_1swhv1s735().s[12]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[13]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[3][1]++;
      }
      const departmentInfo =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[14]++, await departmentHeadService.getDepartmentInfo(userId));
      /* istanbul ignore next */
      cov_1swhv1s735().s[15]++;
      res.json({
        success: true,
        message: 'Department info retrieved successfully',
        data: departmentInfo,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[16]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[17]++;
      logger_1.default.error('Error getting department info:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[18]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve department info',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[4][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[4][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get department head dashboard data
   */
  async getDashboard(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[2]++;
    cov_1swhv1s735().s[19]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[20]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[21]++, req.user?.userId);
      /* istanbul ignore next */
      cov_1swhv1s735().s[22]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[5][0]++;
        cov_1swhv1s735().s[23]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[24]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[5][1]++;
      }
      const dashboard =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[25]++, await departmentHeadService.getDashboard(userId));
      /* istanbul ignore next */
      cov_1swhv1s735().s[26]++;
      res.json({
        success: true,
        message: 'Dashboard data retrieved successfully',
        data: dashboard,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[27]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[28]++;
      logger_1.default.error('Error getting department head dashboard:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[29]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve dashboard data',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[6][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[6][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get department employees
   */
  async getDepartmentEmployees(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[3]++;
    cov_1swhv1s735().s[30]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[31]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[32]++, req.user?.userId);
      const {
        page =
        /* istanbul ignore next */
        (cov_1swhv1s735().b[7][0]++, '1'),
        limit =
        /* istanbul ignore next */
        (cov_1swhv1s735().b[8][0]++, '10'),
        status,
        search
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[33]++, req.query);
      /* istanbul ignore next */
      cov_1swhv1s735().s[34]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[9][0]++;
        cov_1swhv1s735().s[35]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[36]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[9][1]++;
      }
      const employees =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[37]++, await departmentHeadService.getDepartmentEmployees(userId, {
        page: parseInt(page),
        limit: parseInt(limit),
        status: status,
        search: search
      }));
      /* istanbul ignore next */
      cov_1swhv1s735().s[38]++;
      res.json({
        success: true,
        message: 'Department employees retrieved successfully',
        data: employees.data,
        pagination: employees.pagination,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[39]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[40]++;
      logger_1.default.error('Error getting department employees:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[41]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve department employees',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[10][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[10][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get employee statistics for department
   */
  async getEmployeeStats(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[4]++;
    cov_1swhv1s735().s[42]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[43]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[44]++, req.user?.userId);
      /* istanbul ignore next */
      cov_1swhv1s735().s[45]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[11][0]++;
        cov_1swhv1s735().s[46]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[47]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[11][1]++;
      }
      const stats =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[48]++, await departmentHeadService.getEmployeeStats(userId));
      /* istanbul ignore next */
      cov_1swhv1s735().s[49]++;
      res.json({
        success: true,
        message: 'Employee statistics retrieved successfully',
        data: stats,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[50]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[51]++;
      logger_1.default.error('Error getting employee statistics:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[52]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve employee statistics',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[12][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[12][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get employee performance statistics
   */
  async getEmployeePerformance(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[5]++;
    cov_1swhv1s735().s[53]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[54]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[55]++, req.user?.userId);
      /* istanbul ignore next */
      cov_1swhv1s735().s[56]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[13][0]++;
        cov_1swhv1s735().s[57]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[58]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[13][1]++;
      }
      const performance =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[59]++, await departmentHeadService.getEmployeePerformance(userId));
      /* istanbul ignore next */
      cov_1swhv1s735().s[60]++;
      res.json({
        success: true,
        message: 'Employee performance retrieved successfully',
        data: performance,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[61]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[62]++;
      logger_1.default.error('Error getting employee performance:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[63]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve employee performance',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[14][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[14][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get employee details
   */
  async getEmployeeDetails(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[6]++;
    cov_1swhv1s735().s[64]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[65]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[66]++, req.user?.userId);
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[67]++, req.params);
      /* istanbul ignore next */
      cov_1swhv1s735().s[68]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[15][0]++;
        cov_1swhv1s735().s[69]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[70]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[15][1]++;
      }
      cov_1swhv1s735().s[71]++;
      if (!id) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[16][0]++;
        cov_1swhv1s735().s[72]++;
        res.status(400).json({
          success: false,
          message: 'Employee ID is required',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[73]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[16][1]++;
      }
      const employee =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[74]++, await departmentHeadService.getEmployeeDetails(userId, id));
      /* istanbul ignore next */
      cov_1swhv1s735().s[75]++;
      res.json({
        success: true,
        message: 'Employee details retrieved successfully',
        data: employee,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[76]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[77]++;
      logger_1.default.error('Error getting employee details:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[78]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve employee details',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[17][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[17][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get all requests for department head
   */
  async getRequests(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[7]++;
    cov_1swhv1s735().s[79]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[80]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[81]++, req.user?.userId);
      const {
        type,
        status,
        page =
        /* istanbul ignore next */
        (cov_1swhv1s735().b[18][0]++, '1'),
        limit =
        /* istanbul ignore next */
        (cov_1swhv1s735().b[19][0]++, '10')
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[82]++, req.query);
      /* istanbul ignore next */
      cov_1swhv1s735().s[83]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[20][0]++;
        cov_1swhv1s735().s[84]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[85]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[20][1]++;
      }
      const requests =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[86]++, await departmentHeadService.getRequests(userId, {
        type: type,
        status: status,
        page: parseInt(page),
        limit: parseInt(limit)
      }));
      /* istanbul ignore next */
      cov_1swhv1s735().s[87]++;
      res.json({
        success: true,
        message: 'Requests retrieved successfully',
        data: requests.data,
        pagination: requests.pagination,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[88]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[89]++;
      logger_1.default.error('Error getting requests:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[90]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve requests',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[21][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[21][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get request statistics
   */
  async getRequestStats(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[8]++;
    cov_1swhv1s735().s[91]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[92]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[93]++, req.user?.userId);
      /* istanbul ignore next */
      cov_1swhv1s735().s[94]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[22][0]++;
        cov_1swhv1s735().s[95]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[96]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[22][1]++;
      }
      const stats =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[97]++, await departmentHeadService.getRequestStats(userId));
      /* istanbul ignore next */
      cov_1swhv1s735().s[98]++;
      res.json({
        success: true,
        message: 'Request statistics retrieved successfully',
        data: stats,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[99]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[100]++;
      logger_1.default.error('Error getting request statistics:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[101]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve request statistics',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[23][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[23][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get pending requests for approval
   */
  async getPendingRequests(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[9]++;
    cov_1swhv1s735().s[102]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[103]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[104]++, req.user?.userId);
      const {
        type,
        page =
        /* istanbul ignore next */
        (cov_1swhv1s735().b[24][0]++, '1'),
        limit =
        /* istanbul ignore next */
        (cov_1swhv1s735().b[25][0]++, '10')
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[105]++, req.query);
      /* istanbul ignore next */
      cov_1swhv1s735().s[106]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[26][0]++;
        cov_1swhv1s735().s[107]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[108]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[26][1]++;
      }
      const requests =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[109]++, await departmentHeadService.getPendingRequests(userId, {
        type: type,
        page: parseInt(page),
        limit: parseInt(limit)
      }));
      /* istanbul ignore next */
      cov_1swhv1s735().s[110]++;
      res.json({
        success: true,
        message: 'Pending requests retrieved successfully',
        data: requests.data,
        pagination: requests.pagination,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[111]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[112]++;
      logger_1.default.error('Error getting pending requests:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[113]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve pending requests',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[27][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[27][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Approve a request
   */
  async approveRequest(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[10]++;
    cov_1swhv1s735().s[114]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[115]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[116]++, req.user?.userId);
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[117]++, req.params);
      /* istanbul ignore next */
      cov_1swhv1s735().s[118]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[28][0]++;
        cov_1swhv1s735().s[119]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[120]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[28][1]++;
      }
      cov_1swhv1s735().s[121]++;
      if (!id) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[29][0]++;
        cov_1swhv1s735().s[122]++;
        res.status(400).json({
          success: false,
          message: 'Request ID is required',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[123]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[29][1]++;
      }
      cov_1swhv1s735().s[124]++;
      await departmentHeadService.approveRequest(userId, id);
      /* istanbul ignore next */
      cov_1swhv1s735().s[125]++;
      res.json({
        success: true,
        message: 'Request approved successfully',
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[126]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[127]++;
      logger_1.default.error('Error approving request:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[128]++;
      res.status(500).json({
        success: false,
        message: 'Failed to approve request',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[30][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[30][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Reject a request
   */
  async rejectRequest(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[11]++;
    cov_1swhv1s735().s[129]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[130]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[131]++, req.user?.userId);
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[132]++, req.params);
      const {
        reason
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[133]++, req.body);
      /* istanbul ignore next */
      cov_1swhv1s735().s[134]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[31][0]++;
        cov_1swhv1s735().s[135]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[136]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[31][1]++;
      }
      cov_1swhv1s735().s[137]++;
      if (!id) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[32][0]++;
        cov_1swhv1s735().s[138]++;
        res.status(400).json({
          success: false,
          message: 'Request ID is required',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[139]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[32][1]++;
      }
      cov_1swhv1s735().s[140]++;
      await departmentHeadService.rejectRequest(userId, id, reason);
      /* istanbul ignore next */
      cov_1swhv1s735().s[141]++;
      res.json({
        success: true,
        message: 'Request rejected successfully',
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[142]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[143]++;
      logger_1.default.error('Error rejecting request:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[144]++;
      res.status(500).json({
        success: false,
        message: 'Failed to reject request',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[33][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[33][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get request history
   */
  async getRequestHistory(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[12]++;
    cov_1swhv1s735().s[145]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[146]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[147]++, req.user?.userId);
      const {
        type,
        page =
        /* istanbul ignore next */
        (cov_1swhv1s735().b[34][0]++, '1'),
        limit =
        /* istanbul ignore next */
        (cov_1swhv1s735().b[35][0]++, '10'),
        status,
        startDate,
        endDate
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[148]++, req.query);
      /* istanbul ignore next */
      cov_1swhv1s735().s[149]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[36][0]++;
        cov_1swhv1s735().s[150]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[151]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[36][1]++;
      }
      const history =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[152]++, await departmentHeadService.getRequestHistory(userId, {
        type: type,
        page: parseInt(page),
        limit: parseInt(limit),
        status: status,
        startDate: startDate,
        endDate: endDate
      }));
      /* istanbul ignore next */
      cov_1swhv1s735().s[153]++;
      res.json({
        success: true,
        message: 'Request history retrieved successfully',
        data: history.data,
        pagination: history.pagination,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[154]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[155]++;
      logger_1.default.error('Error getting request history:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[156]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve request history',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[37][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[37][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get department statistics
   */
  async getDepartmentStats(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[13]++;
    cov_1swhv1s735().s[157]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[158]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[159]++, req.user?.userId);
      const {
        period =
        /* istanbul ignore next */
        (cov_1swhv1s735().b[38][0]++, 'month')
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[160]++, req.query);
      /* istanbul ignore next */
      cov_1swhv1s735().s[161]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[39][0]++;
        cov_1swhv1s735().s[162]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[163]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[39][1]++;
      }
      const stats =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[164]++, await departmentHeadService.getDepartmentStats(userId, period));
      /* istanbul ignore next */
      cov_1swhv1s735().s[165]++;
      res.json({
        success: true,
        message: 'Department statistics retrieved successfully',
        data: stats,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[166]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[167]++;
      logger_1.default.error('Error getting department statistics:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[168]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve department statistics',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[40][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[40][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get attendance summary for department
   */
  async getAttendanceSummary(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[14]++;
    cov_1swhv1s735().s[169]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[170]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[171]++, req.user?.userId);
      const {
        startDate,
        endDate,
        employeeId
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[172]++, req.query);
      /* istanbul ignore next */
      cov_1swhv1s735().s[173]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[41][0]++;
        cov_1swhv1s735().s[174]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[175]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[41][1]++;
      }
      const summary =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[176]++, await departmentHeadService.getAttendanceSummary(userId, {
        startDate: startDate,
        endDate: endDate,
        employeeId: employeeId
      }));
      /* istanbul ignore next */
      cov_1swhv1s735().s[177]++;
      res.json({
        success: true,
        message: 'Attendance summary retrieved successfully',
        data: summary,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[178]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[179]++;
      logger_1.default.error('Error getting attendance summary:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[180]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve attendance summary',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[42][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[42][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get payroll summary for department
   */
  async getPayrollSummary(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[15]++;
    cov_1swhv1s735().s[181]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[182]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[183]++, req.user?.userId);
      const {
        periodId,
        page =
        /* istanbul ignore next */
        (cov_1swhv1s735().b[43][0]++, '1'),
        limit =
        /* istanbul ignore next */
        (cov_1swhv1s735().b[44][0]++, '10')
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[184]++, req.query);
      /* istanbul ignore next */
      cov_1swhv1s735().s[185]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[45][0]++;
        cov_1swhv1s735().s[186]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[187]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[45][1]++;
      }
      const summary =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[188]++, await departmentHeadService.getPayrollSummary(userId, {
        periodId: periodId,
        page: parseInt(page),
        limit: parseInt(limit)
      }));
      /* istanbul ignore next */
      cov_1swhv1s735().s[189]++;
      res.json({
        success: true,
        message: 'Payroll summary retrieved successfully',
        data: summary.data,
        pagination: summary.pagination,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[190]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[191]++;
      logger_1.default.error('Error getting payroll summary:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[192]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve payroll summary',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[46][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[46][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get payroll periods for department
   */
  async getPayrollPeriods(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[16]++;
    cov_1swhv1s735().s[193]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[194]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[195]++, req.user?.userId);
      /* istanbul ignore next */
      cov_1swhv1s735().s[196]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[47][0]++;
        cov_1swhv1s735().s[197]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[198]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[47][1]++;
      }
      const periods =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[199]++, await departmentHeadService.getPayrollPeriods(userId));
      /* istanbul ignore next */
      cov_1swhv1s735().s[200]++;
      res.json({
        success: true,
        message: 'Payroll periods retrieved successfully',
        data: periods,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[201]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[202]++;
      logger_1.default.error('Error getting payroll periods:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[203]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve payroll periods',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[48][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[48][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get payroll records for a specific period
   */
  async getPayrollRecords(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[17]++;
    cov_1swhv1s735().s[204]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[205]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[206]++, req.user?.userId);
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[207]++, req.params);
      /* istanbul ignore next */
      cov_1swhv1s735().s[208]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[49][0]++;
        cov_1swhv1s735().s[209]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[210]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[49][1]++;
      }
      cov_1swhv1s735().s[211]++;
      if (!id) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[50][0]++;
        cov_1swhv1s735().s[212]++;
        res.status(400).json({
          success: false,
          message: 'Period ID is required',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[213]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[50][1]++;
      }
      const records =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[214]++, await departmentHeadService.getPayrollRecords(userId, id));
      /* istanbul ignore next */
      cov_1swhv1s735().s[215]++;
      res.json({
        success: true,
        message: 'Payroll records retrieved successfully',
        data: records,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[216]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[217]++;
      logger_1.default.error('Error getting payroll records:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[218]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve payroll records',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[51][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[51][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get payroll statistics for department
   */
  async getPayrollStats(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[18]++;
    cov_1swhv1s735().s[219]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[220]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[221]++, req.user?.userId);
      /* istanbul ignore next */
      cov_1swhv1s735().s[222]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[52][0]++;
        cov_1swhv1s735().s[223]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[224]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[52][1]++;
      }
      const stats =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[225]++, await departmentHeadService.getPayrollStats(userId));
      /* istanbul ignore next */
      cov_1swhv1s735().s[226]++;
      res.json({
        success: true,
        message: 'Payroll statistics retrieved successfully',
        data: stats,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[227]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[228]++;
      logger_1.default.error('Error getting payroll statistics:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[229]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve payroll statistics',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[53][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[53][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Get payroll approvals for department
   */
  async getPayrollApprovals(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[19]++;
    cov_1swhv1s735().s[230]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[231]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[232]++, req.user?.userId);
      /* istanbul ignore next */
      cov_1swhv1s735().s[233]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[54][0]++;
        cov_1swhv1s735().s[234]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[235]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[54][1]++;
      }
      const approvals =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[236]++, await departmentHeadService.getPayrollApprovals(userId));
      /* istanbul ignore next */
      cov_1swhv1s735().s[237]++;
      res.json({
        success: true,
        message: 'Payroll approvals retrieved successfully',
        data: approvals,
        requestId
      });
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[238]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[239]++;
      logger_1.default.error('Error getting payroll approvals:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[240]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve payroll approvals',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[55][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[55][1]++, 'Unknown error'),
        requestId
      });
    }
  }
  /**
   * Approve or reject payroll approval
   */
  async approvePayrollApproval(req, res) {
    /* istanbul ignore next */
    cov_1swhv1s735().f[20]++;
    cov_1swhv1s735().s[241]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[242]++, (0, express_1.getRequestId)(req));
      const userId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[243]++, req.user?.userId);
      const {
        approvalId
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[244]++, req.params);
      const {
        status,
        comments
      } =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[245]++, req.body);
      /* istanbul ignore next */
      cov_1swhv1s735().s[246]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[56][0]++;
        cov_1swhv1s735().s[247]++;
        res.status(401).json({
          success: false,
          message: 'User not authenticated',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[248]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[56][1]++;
      }
      cov_1swhv1s735().s[249]++;
      if (
      /* istanbul ignore next */
      (cov_1swhv1s735().b[58][0]++, !approvalId) ||
      /* istanbul ignore next */
      (cov_1swhv1s735().b[58][1]++, !status) ||
      /* istanbul ignore next */
      (cov_1swhv1s735().b[58][2]++, !['approved', 'rejected'].includes(status))) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[57][0]++;
        cov_1swhv1s735().s[250]++;
        res.status(400).json({
          success: false,
          message: 'Invalid approval ID or status',
          requestId
        });
        /* istanbul ignore next */
        cov_1swhv1s735().s[251]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1swhv1s735().b[57][1]++;
      }
      const success =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[252]++, await departmentHeadService.approvePayrollApproval(userId, approvalId, status, comments));
      /* istanbul ignore next */
      cov_1swhv1s735().s[253]++;
      if (success) {
        /* istanbul ignore next */
        cov_1swhv1s735().b[59][0]++;
        cov_1swhv1s735().s[254]++;
        res.json({
          success: true,
          message: `Payroll ${status} successfully`,
          requestId
        });
      } else {
        /* istanbul ignore next */
        cov_1swhv1s735().b[59][1]++;
        cov_1swhv1s735().s[255]++;
        res.status(400).json({
          success: false,
          message: 'Failed to update payroll approval',
          requestId
        });
      }
    } catch (error) {
      const requestId =
      /* istanbul ignore next */
      (cov_1swhv1s735().s[256]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1swhv1s735().s[257]++;
      logger_1.default.error('Error approving payroll:', {
        error,
        requestId
      });
      /* istanbul ignore next */
      cov_1swhv1s735().s[258]++;
      res.status(500).json({
        success: false,
        message: 'Failed to approve payroll',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1swhv1s735().b[60][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1swhv1s735().b[60][1]++, 'Unknown error'),
        requestId
      });
    }
  }
}
/* istanbul ignore next */
cov_1swhv1s735().s[259]++;
exports.DepartmentHeadController = DepartmentHeadController;
/* istanbul ignore next */
cov_1swhv1s735().s[260]++;
exports.departmentHeadController = new DepartmentHeadController();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,