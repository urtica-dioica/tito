1c85d92f45ad6cdae13647d26c938dcd
"use strict";

/* istanbul ignore next */
function cov_xt1lftxcu() {
  var path = "/home/kim/tito/server/src/controllers/hr/leaveBalanceController.ts";
  var hash = "121b727d93c8dc7f71d6595196cc2c5ac6db25e2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/hr/leaveBalanceController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "4": {
        start: {
          line: 7,
          column: 30
        },
        end: {
          line: 7,
          column: 78
        }
      },
      "5": {
        start: {
          line: 8,
          column: 20
        },
        end: {
          line: 8,
          column: 52
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 63
        }
      },
      "7": {
        start: {
          line: 15,
          column: 26
        },
        end: {
          line: 15,
          column: 62
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "9": {
        start: {
          line: 17,
          column: 139
        },
        end: {
          line: 17,
          column: 148
        }
      },
      "10": {
        start: {
          line: 18,
          column: 27
        },
        end: {
          line: 28,
          column: 13
        }
      },
      "11": {
        start: {
          line: 29,
          column: 27
        },
        end: {
          line: 29,
          column: 100
        }
      },
      "12": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 35,
          column: 15
        }
      },
      "13": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 41,
          column: 15
        }
      },
      "14": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 47,
          column: 15
        }
      },
      "15": {
        start: {
          line: 54,
          column: 26
        },
        end: {
          line: 54,
          column: 62
        }
      },
      "16": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "17": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 56,
          column: 37
        }
      },
      "18": {
        start: {
          line: 57,
          column: 28
        },
        end: {
          line: 57,
          column: 99
        }
      },
      "19": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "20": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 63,
          column: 19
        }
      },
      "21": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 23
        }
      },
      "22": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 71,
          column: 15
        }
      },
      "23": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "24": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "25": {
        start: {
          line: 91,
          column: 26
        },
        end: {
          line: 91,
          column: 62
        }
      },
      "26": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "27": {
        start: {
          line: 93,
          column: 55
        },
        end: {
          line: 93,
          column: 63
        }
      },
      "28": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "29": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 99,
          column: 19
        }
      },
      "30": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 23
        }
      },
      "31": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "32": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 107,
          column: 19
        }
      },
      "33": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 23
        }
      },
      "34": {
        start: {
          line: 110,
          column: 32
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "35": {
        start: {
          line: 115,
          column: 27
        },
        end: {
          line: 115,
          column: 106
        }
      },
      "36": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 121,
          column: 15
        }
      },
      "37": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "38": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 133,
          column: 15
        }
      },
      "39": {
        start: {
          line: 140,
          column: 26
        },
        end: {
          line: 140,
          column: 62
        }
      },
      "40": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "41": {
        start: {
          line: 142,
          column: 27
        },
        end: {
          line: 142,
          column: 37
        }
      },
      "42": {
        start: {
          line: 143,
          column: 32
        },
        end: {
          line: 143,
          column: 40
        }
      },
      "43": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "44": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 149,
          column: 19
        }
      },
      "45": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 23
        }
      },
      "46": {
        start: {
          line: 152,
          column: 31
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "47": {
        start: {
          line: 155,
          column: 27
        },
        end: {
          line: 155,
          column: 109
        }
      },
      "48": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "49": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 161,
          column: 19
        }
      },
      "50": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 23
        }
      },
      "51": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 169,
          column: 15
        }
      },
      "52": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "53": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 182,
          column: 15
        }
      },
      "54": {
        start: {
          line: 189,
          column: 26
        },
        end: {
          line: 189,
          column: 62
        }
      },
      "55": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "56": {
        start: {
          line: 191,
          column: 27
        },
        end: {
          line: 191,
          column: 37
        }
      },
      "57": {
        start: {
          line: 192,
          column: 28
        },
        end: {
          line: 192,
          column: 98
        }
      },
      "58": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 200,
          column: 13
        }
      },
      "59": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 198,
          column: 19
        }
      },
      "60": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 23
        }
      },
      "61": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 205,
          column: 15
        }
      },
      "62": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 212,
          column: 15
        }
      },
      "63": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 218,
          column: 15
        }
      },
      "64": {
        start: {
          line: 225,
          column: 26
        },
        end: {
          line: 225,
          column: 62
        }
      },
      "65": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "66": {
        start: {
          line: 227,
          column: 33
        },
        end: {
          line: 227,
          column: 41
        }
      },
      "67": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 235,
          column: 13
        }
      },
      "68": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 233,
          column: 19
        }
      },
      "69": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 23
        }
      },
      "70": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "71": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 245,
          column: 17
        }
      },
      "72": {
        start: {
          line: 239,
          column: 20
        },
        end: {
          line: 243,
          column: 23
        }
      },
      "73": {
        start: {
          line: 244,
          column: 20
        },
        end: {
          line: 244,
          column: 27
        }
      },
      "74": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 253,
          column: 17
        }
      },
      "75": {
        start: {
          line: 247,
          column: 20
        },
        end: {
          line: 251,
          column: 23
        }
      },
      "76": {
        start: {
          line: 252,
          column: 20
        },
        end: {
          line: 252,
          column: 27
        }
      },
      "77": {
        start: {
          line: 255,
          column: 28
        },
        end: {
          line: 255,
          column: 109
        }
      },
      "78": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 261,
          column: 15
        }
      },
      "79": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 267,
          column: 15
        }
      },
      "80": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 273,
          column: 15
        }
      },
      "81": {
        start: {
          line: 280,
          column: 26
        },
        end: {
          line: 280,
          column: 62
        }
      },
      "82": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "83": {
        start: {
          line: 282,
          column: 91
        },
        end: {
          line: 282,
          column: 99
        }
      },
      "84": {
        start: {
          line: 283,
          column: 27
        },
        end: {
          line: 283,
          column: 196
        }
      },
      "85": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 289,
          column: 15
        }
      },
      "86": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 295,
          column: 15
        }
      },
      "87": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 301,
          column: 15
        }
      },
      "88": {
        start: {
          line: 308,
          column: 26
        },
        end: {
          line: 308,
          column: 62
        }
      },
      "89": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "90": {
        start: {
          line: 310,
          column: 37
        },
        end: {
          line: 310,
          column: 46
        }
      },
      "91": {
        start: {
          line: 311,
          column: 26
        },
        end: {
          line: 311,
          column: 108
        }
      },
      "92": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 317,
          column: 15
        }
      },
      "93": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 323,
          column: 15
        }
      },
      "94": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 329,
          column: 15
        }
      },
      "95": {
        start: {
          line: 336,
          column: 26
        },
        end: {
          line: 336,
          column: 62
        }
      },
      "96": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "97": {
        start: {
          line: 338,
          column: 35
        },
        end: {
          line: 338,
          column: 45
        }
      },
      "98": {
        start: {
          line: 339,
          column: 29
        },
        end: {
          line: 339,
          column: 113
        }
      },
      "99": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 345,
          column: 15
        }
      },
      "100": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 352,
          column: 15
        }
      },
      "101": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 358,
          column: 15
        }
      },
      "102": {
        start: {
          line: 365,
          column: 26
        },
        end: {
          line: 365,
          column: 62
        }
      },
      "103": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 387,
          column: 9
        }
      },
      "104": {
        start: {
          line: 367,
          column: 37
        },
        end: {
          line: 367,
          column: 46
        }
      },
      "105": {
        start: {
          line: 368,
          column: 30
        },
        end: {
          line: 368,
          column: 124
        }
      },
      "106": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 374,
          column: 15
        }
      },
      "107": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 380,
          column: 15
        }
      },
      "108": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 386,
          column: 15
        }
      },
      "109": {
        start: {
          line: 393,
          column: 26
        },
        end: {
          line: 393,
          column: 62
        }
      },
      "110": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 414,
          column: 9
        }
      },
      "111": {
        start: {
          line: 395,
          column: 30
        },
        end: {
          line: 395,
          column: 104
        }
      },
      "112": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 401,
          column: 15
        }
      },
      "113": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 407,
          column: 15
        }
      },
      "114": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 413,
          column: 15
        }
      },
      "115": {
        start: {
          line: 417,
          column: 0
        },
        end: {
          line: 417,
          column: 56
        }
      },
      "116": {
        start: {
          line: 418,
          column: 0
        },
        end: {
          line: 418,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 38
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 36
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 53
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 39
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 90
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 39
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 139
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 39
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 188
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 224,
            column: 5
          }
        },
        loc: {
          start: {
            line: 224,
            column: 44
          },
          end: {
            line: 275,
            column: 5
          }
        },
        line: 224
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 279,
            column: 4
          },
          end: {
            line: 279,
            column: 5
          }
        },
        loc: {
          start: {
            line: 279,
            column: 44
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 279
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 307,
            column: 5
          }
        },
        loc: {
          start: {
            line: 307,
            column: 41
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 307
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 335,
            column: 5
          }
        },
        loc: {
          start: {
            line: 335,
            column: 45
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 335
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 364,
            column: 4
          },
          end: {
            line: 364,
            column: 5
          }
        },
        loc: {
          start: {
            line: 364,
            column: 53
          },
          end: {
            line: 388,
            column: 5
          }
        },
        line: 364
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 392,
            column: 4
          },
          end: {
            line: 392,
            column: 5
          }
        },
        loc: {
          start: {
            line: 392,
            column: 46
          },
          end: {
            line: 415,
            column: 5
          }
        },
        line: 392
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 20
          },
          end: {
            line: 17,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 17,
            column: 27
          },
          end: {
            line: 17,
            column: 28
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 17,
            column: 30
          },
          end: {
            line: 17,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 17,
            column: 38
          },
          end: {
            line: 17,
            column: 40
          }
        }],
        line: 17
      },
      "5": {
        loc: {
          start: {
            line: 17,
            column: 93
          },
          end: {
            line: 17,
            column: 114
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 17,
            column: 102
          },
          end: {
            line: 17,
            column: 114
          }
        }],
        line: 17
      },
      "6": {
        loc: {
          start: {
            line: 17,
            column: 116
          },
          end: {
            line: 17,
            column: 134
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 17,
            column: 128
          },
          end: {
            line: 17,
            column: 134
          }
        }],
        line: 17
      },
      "7": {
        loc: {
          start: {
            line: 24,
            column: 22
          },
          end: {
            line: 24,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 29
          },
          end: {
            line: 24,
            column: 43
          }
        }, {
          start: {
            line: 24,
            column: 46
          },
          end: {
            line: 24,
            column: 55
          }
        }],
        line: 24
      },
      "8": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "9": {
        loc: {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "10": {
        loc: {
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 94,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 94,
            column: 27
          }
        }, {
          start: {
            line: 94,
            column: 31
          },
          end: {
            line: 94,
            column: 41
          }
        }, {
          start: {
            line: 94,
            column: 45
          },
          end: {
            line: 94,
            column: 66
          }
        }],
        line: 94
      },
      "11": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "12": {
        loc: {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "13": {
        loc: {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "14": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "15": {
        loc: {
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 235,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 235,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "16": {
        loc: {
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 228,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 228,
            column: 40
          }
        }, {
          start: {
            line: 228,
            column: 44
          },
          end: {
            line: 228,
            column: 65
          }
        }],
        line: 228
      },
      "17": {
        loc: {
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 245,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 245,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "18": {
        loc: {
          start: {
            line: 238,
            column: 20
          },
          end: {
            line: 238,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 20
          },
          end: {
            line: 238,
            column: 39
          }
        }, {
          start: {
            line: 238,
            column: 43
          },
          end: {
            line: 238,
            column: 61
          }
        }, {
          start: {
            line: 238,
            column: 65
          },
          end: {
            line: 238,
            column: 94
          }
        }],
        line: 238
      },
      "19": {
        loc: {
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 253,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 253,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "20": {
        loc: {
          start: {
            line: 282,
            column: 20
          },
          end: {
            line: 282,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 282,
            column: 35
          },
          end: {
            line: 282,
            column: 37
          }
        }],
        line: 282
      },
      "21": {
        loc: {
          start: {
            line: 282,
            column: 39
          },
          end: {
            line: 282,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 282,
            column: 50
          },
          end: {
            line: 282,
            column: 52
          }
        }],
        line: 282
      },
      "22": {
        loc: {
          start: {
            line: 282,
            column: 54
          },
          end: {
            line: 282,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 282,
            column: 70
          },
          end: {
            line: 282,
            column: 71
          }
        }],
        line: 282
      },
      "23": {
        loc: {
          start: {
            line: 282,
            column: 73
          },
          end: {
            line: 282,
            column: 86
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 282,
            column: 85
          },
          end: {
            line: 282,
            column: 86
          }
        }],
        line: 282
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0],
      "22": [0],
      "23": [0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/hr/leaveBalanceController.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/hr/leaveBalanceController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { leaveBalanceService } from '../../services/hr/leaveBalanceService';\nimport { generateRequestId } from '../../utils/requestId';\nimport logger from '../../utils/logger';\n\nexport class LeaveBalanceController {\n  /**\n   * List all leave balances with filtering and pagination\n   */\n  async listLeaveBalances(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const {\n        page = 1,\n        limit = 20,\n        employeeId,\n        departmentId,\n        leaveType,\n        year,\n        search,\n        sortBy = 'updated_at',\n        sortOrder = 'desc'\n      } = req.query;\n\n      const params = {\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        employeeId: employeeId as string,\n        departmentId: departmentId as string,\n        leaveType: leaveType as 'vacation' | 'sick' | 'maternity' | 'other',\n        year: year ? parseInt(year as string) : undefined,\n        search: search as string,\n        sortBy: sortBy as string,\n        sortOrder: sortOrder as 'asc' | 'desc'\n      };\n\n      const result = await leaveBalanceService.listLeaveBalances(params);\n      \n      res.json({\n        success: true,\n        message: 'Leave balances retrieved successfully',\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('List leave balances error', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve leave balances',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get leave balance by ID\n   */\n  async getLeaveBalance(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const { id } = req.params;\n\n      const balance = await leaveBalanceService.getLeaveBalanceById(id);\n\n      if (!balance) {\n        res.status(404).json({\n          success: false,\n          message: 'Leave balance not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Leave balance retrieved successfully',\n        data: balance,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Get leave balance error', {\n        error: (error as Error).message,\n        requestId,\n        balanceId: req.params.id\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve leave balance',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Create or update leave balance\n   */\n  async createLeaveBalance(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const { employeeId, leaveType, balance } = req.body;\n\n      if (!employeeId || !leaveType || balance === undefined) {\n        res.status(400).json({\n          success: false,\n          message: 'Employee ID, leave type, and balance are required',\n          requestId\n        });\n        return;\n      }\n\n      if (!['vacation', 'sick', 'maternity', 'other'].includes(leaveType)) {\n        res.status(400).json({\n          success: false,\n          message: 'Invalid leave type. Must be one of: vacation, sick, maternity, other',\n          requestId\n        });\n        return;\n      }\n\n      const balanceData = {\n        employeeId,\n        leaveType: leaveType as 'vacation' | 'sick' | 'maternity' | 'other',\n        balance: parseFloat(balance)\n      };\n\n      const result = await leaveBalanceService.upsertLeaveBalance(balanceData);\n\n      res.status(201).json({\n        success: true,\n        message: 'Leave balance created successfully',\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Create leave balance error', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(400).json({\n        success: false,\n        message: 'Failed to create leave balance',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Update leave balance\n   */\n  async updateLeaveBalance(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const { id } = req.params;\n      const { balance } = req.body;\n\n      if (balance === undefined) {\n        res.status(400).json({\n          success: false,\n          message: 'Balance must be provided',\n          requestId\n        });\n        return;\n      }\n\n      const updateData = {\n        balance: parseFloat(balance)\n      };\n\n      const result = await leaveBalanceService.updateLeaveBalance(id, updateData);\n\n      if (!result) {\n        res.status(404).json({\n          success: false,\n          message: 'Leave balance not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Leave balance updated successfully',\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Update leave balance error', {\n        error: (error as Error).message,\n        requestId,\n        balanceId: req.params.id\n      });\n\n      res.status(400).json({\n        success: false,\n        message: 'Failed to update leave balance',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Delete leave balance\n   */\n  async deleteLeaveBalance(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const { id } = req.params;\n\n      const deleted = await leaveBalanceService.deleteLeaveBalance(id);\n\n      if (!deleted) {\n        res.status(404).json({\n          success: false,\n          message: 'Leave balance not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Leave balance deleted successfully',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Delete leave balance error', {\n        error: (error as Error).message,\n        requestId,\n        balanceId: req.params.id\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete leave balance',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Bulk create/update leave balances\n   */\n  async bulkUpdateLeaveBalances(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const { balances } = req.body;\n\n      if (!Array.isArray(balances) || balances.length === 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Balances array is required and must not be empty',\n          requestId\n        });\n        return;\n      }\n\n      // Validate each balance\n      for (const balance of balances) {\n        if (!balance.employeeId || !balance.leaveType || balance.balance === undefined) {\n          res.status(400).json({\n            success: false,\n            message: 'Each balance must have employeeId, leaveType, and balance',\n            requestId\n          });\n          return;\n        }\n\n        if (!['vacation', 'sick', 'maternity', 'other'].includes(balance.leaveType)) {\n          res.status(400).json({\n            success: false,\n            message: `Invalid leave type: ${balance.leaveType}. Must be one of: vacation, sick, maternity, other`,\n            requestId\n          });\n          return;\n        }\n      }\n\n      const results = await leaveBalanceService.bulkUpsertLeaveBalances(balances);\n\n      res.json({\n        success: true,\n        message: `Successfully processed ${results.length} leave balances`,\n        data: results,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Bulk update leave balances error', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(400).json({\n        success: false,\n        message: 'Failed to bulk update leave balances',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Initialize leave balances for all employees\n   */\n  async initializeLeaveBalances(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const { vacationDays = 15, sickDays = 10, maternityDays = 0, otherDays = 0 } = req.body;\n\n      const result = await leaveBalanceService.initializeLeaveBalances(\n        parseFloat(vacationDays),\n        parseFloat(sickDays),\n        parseFloat(maternityDays),\n        parseFloat(otherDays)\n      );\n\n      res.json({\n        success: true,\n        message: `Successfully initialized leave balances for ${result.employeesProcessed} employees`,\n        data: result,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Initialize leave balances error', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to initialize leave balances',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get leave balance statistics\n   */\n  async getLeaveBalanceStats(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const { departmentId } = req.query;\n\n      const stats = await leaveBalanceService.getLeaveBalanceStats(\n        departmentId as string\n      );\n\n      res.json({\n        success: true,\n        message: 'Leave balance statistics retrieved successfully',\n        data: stats,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Get leave balance stats error', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve leave balance statistics',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get employee leave balances\n   */\n  async getEmployeeLeaveBalances(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const { employeeId } = req.params;\n\n      const balances = await leaveBalanceService.getEmployeeLeaveBalances(employeeId);\n\n      res.json({\n        success: true,\n        message: 'Employee leave balances retrieved successfully',\n        data: balances,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Get employee leave balances error', {\n        error: (error as Error).message,\n        requestId,\n        employeeId: req.params.employeeId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve employee leave balances',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get employees without leave balances\n   */\n  async getEmployeesWithoutLeaveBalances(req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const { departmentId } = req.query;\n\n      const employees = await leaveBalanceService.getEmployeesWithoutLeaveBalances(\n        departmentId as string\n      );\n\n      res.json({\n        success: true,\n        message: 'Employees without leave balances retrieved successfully',\n        data: employees,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Get employees without leave balances error', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve employees without leave balances',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get leave balance templates by position\n   */\n  async getLeaveBalanceTemplates(_req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const templates = await leaveBalanceService.getLeaveBalanceTemplates();\n\n      res.json({\n        success: true,\n        message: 'Leave balance templates retrieved successfully',\n        data: templates,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Get leave balance templates error', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve leave balance templates',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n}\n\nexport const leaveBalanceController = new LeaveBalanceController();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "121b727d93c8dc7f71d6595196cc2c5ac6db25e2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_xt1lftxcu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_xt1lftxcu();
var __importDefault =
/* istanbul ignore next */
(cov_xt1lftxcu().s[0]++,
/* istanbul ignore next */
(cov_xt1lftxcu().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_xt1lftxcu().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_xt1lftxcu().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_xt1lftxcu().f[0]++;
  cov_xt1lftxcu().s[1]++;
  return /* istanbul ignore next */(cov_xt1lftxcu().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_xt1lftxcu().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_xt1lftxcu().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_xt1lftxcu().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_xt1lftxcu().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_xt1lftxcu().s[3]++;
exports.leaveBalanceController = exports.LeaveBalanceController = void 0;
const leaveBalanceService_1 =
/* istanbul ignore next */
(cov_xt1lftxcu().s[4]++, require("../../services/hr/leaveBalanceService"));
const requestId_1 =
/* istanbul ignore next */
(cov_xt1lftxcu().s[5]++, require("../../utils/requestId"));
const logger_1 =
/* istanbul ignore next */
(cov_xt1lftxcu().s[6]++, __importDefault(require("../../utils/logger")));
class LeaveBalanceController {
  /**
   * List all leave balances with filtering and pagination
   */
  async listLeaveBalances(req, res) {
    /* istanbul ignore next */
    cov_xt1lftxcu().f[1]++;
    const requestId =
    /* istanbul ignore next */
    (cov_xt1lftxcu().s[7]++, (0, requestId_1.generateRequestId)());
    /* istanbul ignore next */
    cov_xt1lftxcu().s[8]++;
    try {
      const {
        page =
        /* istanbul ignore next */
        (cov_xt1lftxcu().b[3][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_xt1lftxcu().b[4][0]++, 20),
        employeeId,
        departmentId,
        leaveType,
        year,
        search,
        sortBy =
        /* istanbul ignore next */
        (cov_xt1lftxcu().b[5][0]++, 'updated_at'),
        sortOrder =
        /* istanbul ignore next */
        (cov_xt1lftxcu().b[6][0]++, 'desc')
      } =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[9]++, req.query);
      const params =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[10]++, {
        page: parseInt(page),
        limit: parseInt(limit),
        employeeId: employeeId,
        departmentId: departmentId,
        leaveType: leaveType,
        year: year ?
        /* istanbul ignore next */
        (cov_xt1lftxcu().b[7][0]++, parseInt(year)) :
        /* istanbul ignore next */
        (cov_xt1lftxcu().b[7][1]++, undefined),
        search: search,
        sortBy: sortBy,
        sortOrder: sortOrder
      });
      const result =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[11]++, await leaveBalanceService_1.leaveBalanceService.listLeaveBalances(params));
      /* istanbul ignore next */
      cov_xt1lftxcu().s[12]++;
      res.json({
        success: true,
        message: 'Leave balances retrieved successfully',
        data: result,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_xt1lftxcu().s[13]++;
      logger_1.default.error('List leave balances error', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_xt1lftxcu().s[14]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve leave balances',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Get leave balance by ID
   */
  async getLeaveBalance(req, res) {
    /* istanbul ignore next */
    cov_xt1lftxcu().f[2]++;
    const requestId =
    /* istanbul ignore next */
    (cov_xt1lftxcu().s[15]++, (0, requestId_1.generateRequestId)());
    /* istanbul ignore next */
    cov_xt1lftxcu().s[16]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[17]++, req.params);
      const balance =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[18]++, await leaveBalanceService_1.leaveBalanceService.getLeaveBalanceById(id));
      /* istanbul ignore next */
      cov_xt1lftxcu().s[19]++;
      if (!balance) {
        /* istanbul ignore next */
        cov_xt1lftxcu().b[8][0]++;
        cov_xt1lftxcu().s[20]++;
        res.status(404).json({
          success: false,
          message: 'Leave balance not found',
          requestId
        });
        /* istanbul ignore next */
        cov_xt1lftxcu().s[21]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_xt1lftxcu().b[8][1]++;
      }
      cov_xt1lftxcu().s[22]++;
      res.json({
        success: true,
        message: 'Leave balance retrieved successfully',
        data: balance,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_xt1lftxcu().s[23]++;
      logger_1.default.error('Get leave balance error', {
        error: error.message,
        requestId,
        balanceId: req.params.id
      });
      /* istanbul ignore next */
      cov_xt1lftxcu().s[24]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve leave balance',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Create or update leave balance
   */
  async createLeaveBalance(req, res) {
    /* istanbul ignore next */
    cov_xt1lftxcu().f[3]++;
    const requestId =
    /* istanbul ignore next */
    (cov_xt1lftxcu().s[25]++, (0, requestId_1.generateRequestId)());
    /* istanbul ignore next */
    cov_xt1lftxcu().s[26]++;
    try {
      const {
        employeeId,
        leaveType,
        balance
      } =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[27]++, req.body);
      /* istanbul ignore next */
      cov_xt1lftxcu().s[28]++;
      if (
      /* istanbul ignore next */
      (cov_xt1lftxcu().b[10][0]++, !employeeId) ||
      /* istanbul ignore next */
      (cov_xt1lftxcu().b[10][1]++, !leaveType) ||
      /* istanbul ignore next */
      (cov_xt1lftxcu().b[10][2]++, balance === undefined)) {
        /* istanbul ignore next */
        cov_xt1lftxcu().b[9][0]++;
        cov_xt1lftxcu().s[29]++;
        res.status(400).json({
          success: false,
          message: 'Employee ID, leave type, and balance are required',
          requestId
        });
        /* istanbul ignore next */
        cov_xt1lftxcu().s[30]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_xt1lftxcu().b[9][1]++;
      }
      cov_xt1lftxcu().s[31]++;
      if (!['vacation', 'sick', 'maternity', 'other'].includes(leaveType)) {
        /* istanbul ignore next */
        cov_xt1lftxcu().b[11][0]++;
        cov_xt1lftxcu().s[32]++;
        res.status(400).json({
          success: false,
          message: 'Invalid leave type. Must be one of: vacation, sick, maternity, other',
          requestId
        });
        /* istanbul ignore next */
        cov_xt1lftxcu().s[33]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_xt1lftxcu().b[11][1]++;
      }
      const balanceData =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[34]++, {
        employeeId,
        leaveType: leaveType,
        balance: parseFloat(balance)
      });
      const result =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[35]++, await leaveBalanceService_1.leaveBalanceService.upsertLeaveBalance(balanceData));
      /* istanbul ignore next */
      cov_xt1lftxcu().s[36]++;
      res.status(201).json({
        success: true,
        message: 'Leave balance created successfully',
        data: result,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_xt1lftxcu().s[37]++;
      logger_1.default.error('Create leave balance error', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_xt1lftxcu().s[38]++;
      res.status(400).json({
        success: false,
        message: 'Failed to create leave balance',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Update leave balance
   */
  async updateLeaveBalance(req, res) {
    /* istanbul ignore next */
    cov_xt1lftxcu().f[4]++;
    const requestId =
    /* istanbul ignore next */
    (cov_xt1lftxcu().s[39]++, (0, requestId_1.generateRequestId)());
    /* istanbul ignore next */
    cov_xt1lftxcu().s[40]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[41]++, req.params);
      const {
        balance
      } =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[42]++, req.body);
      /* istanbul ignore next */
      cov_xt1lftxcu().s[43]++;
      if (balance === undefined) {
        /* istanbul ignore next */
        cov_xt1lftxcu().b[12][0]++;
        cov_xt1lftxcu().s[44]++;
        res.status(400).json({
          success: false,
          message: 'Balance must be provided',
          requestId
        });
        /* istanbul ignore next */
        cov_xt1lftxcu().s[45]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_xt1lftxcu().b[12][1]++;
      }
      const updateData =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[46]++, {
        balance: parseFloat(balance)
      });
      const result =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[47]++, await leaveBalanceService_1.leaveBalanceService.updateLeaveBalance(id, updateData));
      /* istanbul ignore next */
      cov_xt1lftxcu().s[48]++;
      if (!result) {
        /* istanbul ignore next */
        cov_xt1lftxcu().b[13][0]++;
        cov_xt1lftxcu().s[49]++;
        res.status(404).json({
          success: false,
          message: 'Leave balance not found',
          requestId
        });
        /* istanbul ignore next */
        cov_xt1lftxcu().s[50]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_xt1lftxcu().b[13][1]++;
      }
      cov_xt1lftxcu().s[51]++;
      res.json({
        success: true,
        message: 'Leave balance updated successfully',
        data: result,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_xt1lftxcu().s[52]++;
      logger_1.default.error('Update leave balance error', {
        error: error.message,
        requestId,
        balanceId: req.params.id
      });
      /* istanbul ignore next */
      cov_xt1lftxcu().s[53]++;
      res.status(400).json({
        success: false,
        message: 'Failed to update leave balance',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Delete leave balance
   */
  async deleteLeaveBalance(req, res) {
    /* istanbul ignore next */
    cov_xt1lftxcu().f[5]++;
    const requestId =
    /* istanbul ignore next */
    (cov_xt1lftxcu().s[54]++, (0, requestId_1.generateRequestId)());
    /* istanbul ignore next */
    cov_xt1lftxcu().s[55]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[56]++, req.params);
      const deleted =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[57]++, await leaveBalanceService_1.leaveBalanceService.deleteLeaveBalance(id));
      /* istanbul ignore next */
      cov_xt1lftxcu().s[58]++;
      if (!deleted) {
        /* istanbul ignore next */
        cov_xt1lftxcu().b[14][0]++;
        cov_xt1lftxcu().s[59]++;
        res.status(404).json({
          success: false,
          message: 'Leave balance not found',
          requestId
        });
        /* istanbul ignore next */
        cov_xt1lftxcu().s[60]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_xt1lftxcu().b[14][1]++;
      }
      cov_xt1lftxcu().s[61]++;
      res.json({
        success: true,
        message: 'Leave balance deleted successfully',
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_xt1lftxcu().s[62]++;
      logger_1.default.error('Delete leave balance error', {
        error: error.message,
        requestId,
        balanceId: req.params.id
      });
      /* istanbul ignore next */
      cov_xt1lftxcu().s[63]++;
      res.status(500).json({
        success: false,
        message: 'Failed to delete leave balance',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Bulk create/update leave balances
   */
  async bulkUpdateLeaveBalances(req, res) {
    /* istanbul ignore next */
    cov_xt1lftxcu().f[6]++;
    const requestId =
    /* istanbul ignore next */
    (cov_xt1lftxcu().s[64]++, (0, requestId_1.generateRequestId)());
    /* istanbul ignore next */
    cov_xt1lftxcu().s[65]++;
    try {
      const {
        balances
      } =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[66]++, req.body);
      /* istanbul ignore next */
      cov_xt1lftxcu().s[67]++;
      if (
      /* istanbul ignore next */
      (cov_xt1lftxcu().b[16][0]++, !Array.isArray(balances)) ||
      /* istanbul ignore next */
      (cov_xt1lftxcu().b[16][1]++, balances.length === 0)) {
        /* istanbul ignore next */
        cov_xt1lftxcu().b[15][0]++;
        cov_xt1lftxcu().s[68]++;
        res.status(400).json({
          success: false,
          message: 'Balances array is required and must not be empty',
          requestId
        });
        /* istanbul ignore next */
        cov_xt1lftxcu().s[69]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_xt1lftxcu().b[15][1]++;
      }
      // Validate each balance
      cov_xt1lftxcu().s[70]++;
      for (const balance of balances) {
        /* istanbul ignore next */
        cov_xt1lftxcu().s[71]++;
        if (
        /* istanbul ignore next */
        (cov_xt1lftxcu().b[18][0]++, !balance.employeeId) ||
        /* istanbul ignore next */
        (cov_xt1lftxcu().b[18][1]++, !balance.leaveType) ||
        /* istanbul ignore next */
        (cov_xt1lftxcu().b[18][2]++, balance.balance === undefined)) {
          /* istanbul ignore next */
          cov_xt1lftxcu().b[17][0]++;
          cov_xt1lftxcu().s[72]++;
          res.status(400).json({
            success: false,
            message: 'Each balance must have employeeId, leaveType, and balance',
            requestId
          });
          /* istanbul ignore next */
          cov_xt1lftxcu().s[73]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_xt1lftxcu().b[17][1]++;
        }
        cov_xt1lftxcu().s[74]++;
        if (!['vacation', 'sick', 'maternity', 'other'].includes(balance.leaveType)) {
          /* istanbul ignore next */
          cov_xt1lftxcu().b[19][0]++;
          cov_xt1lftxcu().s[75]++;
          res.status(400).json({
            success: false,
            message: `Invalid leave type: ${balance.leaveType}. Must be one of: vacation, sick, maternity, other`,
            requestId
          });
          /* istanbul ignore next */
          cov_xt1lftxcu().s[76]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_xt1lftxcu().b[19][1]++;
        }
      }
      const results =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[77]++, await leaveBalanceService_1.leaveBalanceService.bulkUpsertLeaveBalances(balances));
      /* istanbul ignore next */
      cov_xt1lftxcu().s[78]++;
      res.json({
        success: true,
        message: `Successfully processed ${results.length} leave balances`,
        data: results,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_xt1lftxcu().s[79]++;
      logger_1.default.error('Bulk update leave balances error', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_xt1lftxcu().s[80]++;
      res.status(400).json({
        success: false,
        message: 'Failed to bulk update leave balances',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Initialize leave balances for all employees
   */
  async initializeLeaveBalances(req, res) {
    /* istanbul ignore next */
    cov_xt1lftxcu().f[7]++;
    const requestId =
    /* istanbul ignore next */
    (cov_xt1lftxcu().s[81]++, (0, requestId_1.generateRequestId)());
    /* istanbul ignore next */
    cov_xt1lftxcu().s[82]++;
    try {
      const {
        vacationDays =
        /* istanbul ignore next */
        (cov_xt1lftxcu().b[20][0]++, 15),
        sickDays =
        /* istanbul ignore next */
        (cov_xt1lftxcu().b[21][0]++, 10),
        maternityDays =
        /* istanbul ignore next */
        (cov_xt1lftxcu().b[22][0]++, 0),
        otherDays =
        /* istanbul ignore next */
        (cov_xt1lftxcu().b[23][0]++, 0)
      } =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[83]++, req.body);
      const result =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[84]++, await leaveBalanceService_1.leaveBalanceService.initializeLeaveBalances(parseFloat(vacationDays), parseFloat(sickDays), parseFloat(maternityDays), parseFloat(otherDays)));
      /* istanbul ignore next */
      cov_xt1lftxcu().s[85]++;
      res.json({
        success: true,
        message: `Successfully initialized leave balances for ${result.employeesProcessed} employees`,
        data: result,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_xt1lftxcu().s[86]++;
      logger_1.default.error('Initialize leave balances error', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_xt1lftxcu().s[87]++;
      res.status(500).json({
        success: false,
        message: 'Failed to initialize leave balances',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Get leave balance statistics
   */
  async getLeaveBalanceStats(req, res) {
    /* istanbul ignore next */
    cov_xt1lftxcu().f[8]++;
    const requestId =
    /* istanbul ignore next */
    (cov_xt1lftxcu().s[88]++, (0, requestId_1.generateRequestId)());
    /* istanbul ignore next */
    cov_xt1lftxcu().s[89]++;
    try {
      const {
        departmentId
      } =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[90]++, req.query);
      const stats =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[91]++, await leaveBalanceService_1.leaveBalanceService.getLeaveBalanceStats(departmentId));
      /* istanbul ignore next */
      cov_xt1lftxcu().s[92]++;
      res.json({
        success: true,
        message: 'Leave balance statistics retrieved successfully',
        data: stats,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_xt1lftxcu().s[93]++;
      logger_1.default.error('Get leave balance stats error', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_xt1lftxcu().s[94]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve leave balance statistics',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Get employee leave balances
   */
  async getEmployeeLeaveBalances(req, res) {
    /* istanbul ignore next */
    cov_xt1lftxcu().f[9]++;
    const requestId =
    /* istanbul ignore next */
    (cov_xt1lftxcu().s[95]++, (0, requestId_1.generateRequestId)());
    /* istanbul ignore next */
    cov_xt1lftxcu().s[96]++;
    try {
      const {
        employeeId
      } =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[97]++, req.params);
      const balances =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[98]++, await leaveBalanceService_1.leaveBalanceService.getEmployeeLeaveBalances(employeeId));
      /* istanbul ignore next */
      cov_xt1lftxcu().s[99]++;
      res.json({
        success: true,
        message: 'Employee leave balances retrieved successfully',
        data: balances,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_xt1lftxcu().s[100]++;
      logger_1.default.error('Get employee leave balances error', {
        error: error.message,
        requestId,
        employeeId: req.params.employeeId
      });
      /* istanbul ignore next */
      cov_xt1lftxcu().s[101]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve employee leave balances',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Get employees without leave balances
   */
  async getEmployeesWithoutLeaveBalances(req, res) {
    /* istanbul ignore next */
    cov_xt1lftxcu().f[10]++;
    const requestId =
    /* istanbul ignore next */
    (cov_xt1lftxcu().s[102]++, (0, requestId_1.generateRequestId)());
    /* istanbul ignore next */
    cov_xt1lftxcu().s[103]++;
    try {
      const {
        departmentId
      } =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[104]++, req.query);
      const employees =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[105]++, await leaveBalanceService_1.leaveBalanceService.getEmployeesWithoutLeaveBalances(departmentId));
      /* istanbul ignore next */
      cov_xt1lftxcu().s[106]++;
      res.json({
        success: true,
        message: 'Employees without leave balances retrieved successfully',
        data: employees,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_xt1lftxcu().s[107]++;
      logger_1.default.error('Get employees without leave balances error', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_xt1lftxcu().s[108]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve employees without leave balances',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Get leave balance templates by position
   */
  async getLeaveBalanceTemplates(_req, res) {
    /* istanbul ignore next */
    cov_xt1lftxcu().f[11]++;
    const requestId =
    /* istanbul ignore next */
    (cov_xt1lftxcu().s[109]++, (0, requestId_1.generateRequestId)());
    /* istanbul ignore next */
    cov_xt1lftxcu().s[110]++;
    try {
      const templates =
      /* istanbul ignore next */
      (cov_xt1lftxcu().s[111]++, await leaveBalanceService_1.leaveBalanceService.getLeaveBalanceTemplates());
      /* istanbul ignore next */
      cov_xt1lftxcu().s[112]++;
      res.json({
        success: true,
        message: 'Leave balance templates retrieved successfully',
        data: templates,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_xt1lftxcu().s[113]++;
      logger_1.default.error('Get leave balance templates error', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_xt1lftxcu().s[114]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve leave balance templates',
        error: error.message,
        requestId
      });
    }
  }
}
/* istanbul ignore next */
cov_xt1lftxcu().s[115]++;
exports.LeaveBalanceController = LeaveBalanceController;
/* istanbul ignore next */
cov_xt1lftxcu().s[116]++;
exports.leaveBalanceController = new LeaveBalanceController();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,