{"version":3,"names":["cov_spdda2veg","actualCoverage","s","database_1","require","PayrollApprovalModel","constructor","f","pool","getPool","createPayrollApproval","data","query","values","payrollPeriodId","approverId","b","departmentId","status","comments","result","mapRowToPayrollApproval","rows","findById","id","length","findByIdWithDetails","mapRowToPayrollApprovalWithDetails","updatePayrollApproval","setClause","valueIndex","undefined","push","approvedAt","join","listPayrollApprovals","params","page","limit","startDate","endDate","search","sortBy","sortOrder","offset","whereConditions","whereClause","countQuery","countResult","total","parseInt","count","toUpperCase","approvals","map","row","totalPages","Math","ceil","getPendingApprovalsForApprover","getApprovalStats","totalQuery","totalResult","totalApprovals","statusQuery","statusResult","pendingApprovals","find","r","approvedApprovals","rejectedApprovals","departmentQuery","departmentResult","approverQuery","approverResult","approvalsByDepartment","approvalsByApprover","deletePayrollApproval","rowCount","payroll_period_id","approver_id","department_id","approved_at","createdAt","created_at","updatedAt","updated_at","approver","email","approver_email","firstName","approver_first_name","lastName","approver_last_name","role","approver_role","department","name","department_name","description","department_description","payrollPeriod","period_id","periodName","period_name","start_date","end_date","period_status","exports"],"sources":["/home/kim/tito/server/src/models/payroll/PayrollApproval.ts"],"sourcesContent":["import { Pool } from 'pg';\nimport { getPool } from '../../config/database';\n\nexport interface PayrollApproval {\n  id: string;\n  payrollPeriodId: string;\n  approverId: string;\n  departmentId: string | null;\n  status: 'pending' | 'approved' | 'rejected';\n  comments: string | null;\n  approvedAt: Date | null;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface PayrollApprovalWithDetails extends PayrollApproval {\n  approver: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n  };\n  department?: {\n    id: string;\n    name: string;\n    description: string | null;\n  } | null;\n  payrollPeriod: {\n    id: string;\n    periodName: string;\n    startDate: Date;\n    endDate: Date;\n    status: string;\n  };\n}\n\nexport interface CreatePayrollApprovalData {\n  payrollPeriodId: string;\n  approverId: string;\n  departmentId?: string;\n  status?: 'pending' | 'approved' | 'rejected';\n  comments?: string;\n}\n\nexport interface UpdatePayrollApprovalData {\n  status?: 'pending' | 'approved' | 'rejected';\n  comments?: string;\n  approvedAt?: Date;\n}\n\nexport interface PayrollApprovalListParams {\n  page?: number;\n  limit?: number;\n  payrollPeriodId?: string;\n  approverId?: string;\n  departmentId?: string;\n  status?: 'pending' | 'approved' | 'rejected';\n  startDate?: Date;\n  endDate?: Date;\n  search?: string;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport class PayrollApprovalModel {\n  private pool: Pool;\n\n  constructor() {\n    this.pool = getPool();\n  }\n\n  async createPayrollApproval(data: CreatePayrollApprovalData): Promise<PayrollApproval> {\n    const query = `\n      INSERT INTO payroll_approvals (\n        payroll_period_id, approver_id, department_id, status, comments\n      ) VALUES ($1, $2, $3, $4, $5)\n      RETURNING *\n    `;\n\n    const values = [\n      data.payrollPeriodId,\n      data.approverId,\n      data.departmentId || null,\n      data.status || 'pending',\n      data.comments || null\n    ];\n\n    const result = await this.pool.query(query, values);\n    return this.mapRowToPayrollApproval(result.rows[0]);\n  }\n\n  async findById(id: string): Promise<PayrollApproval | null> {\n    const query = 'SELECT * FROM payroll_approvals WHERE id = $1';\n    const result = await this.pool.query(query, [id]);\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n    \n    return this.mapRowToPayrollApproval(result.rows[0]);\n  }\n\n  async findByIdWithDetails(id: string): Promise<PayrollApprovalWithDetails | null> {\n    const query = `\n      SELECT \n        pa.*,\n        u.id as approver_id,\n        u.email as approver_email,\n        u.first_name as approver_first_name,\n        u.last_name as approver_last_name,\n        u.role as approver_role,\n        d.id as department_id,\n        d.name as department_name,\n        d.description as department_description,\n        pp.id as period_id,\n        pp.period_name,\n        pp.start_date,\n        pp.end_date,\n        pp.status as period_status\n      FROM payroll_approvals pa\n      LEFT JOIN users u ON pa.approver_id = u.id\n      LEFT JOIN departments d ON pa.department_id = d.id\n      LEFT JOIN payroll_periods pp ON pa.payroll_period_id = pp.id\n      WHERE pa.id = $1\n    `;\n    \n    const result = await this.pool.query(query, [id]);\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n    \n    return this.mapRowToPayrollApprovalWithDetails(result.rows[0]);\n  }\n\n  async updatePayrollApproval(id: string, data: UpdatePayrollApprovalData): Promise<PayrollApproval | null> {\n    const setClause: string[] = [];\n    const values: any[] = [];\n    let valueIndex = 1;\n\n    if (data.status !== undefined) {\n      setClause.push(`status = $${valueIndex}`);\n      values.push(data.status);\n      valueIndex++;\n    }\n\n    if (data.comments !== undefined) {\n      setClause.push(`comments = $${valueIndex}`);\n      values.push(data.comments);\n      valueIndex++;\n    }\n\n    if (data.approvedAt !== undefined) {\n      setClause.push(`approved_at = $${valueIndex}`);\n      values.push(data.approvedAt);\n      valueIndex++;\n    }\n\n    if (setClause.length === 0) {\n      return this.findById(id);\n    }\n\n    setClause.push(`updated_at = CURRENT_TIMESTAMP`);\n    values.push(id);\n\n    const query = `\n      UPDATE payroll_approvals \n      SET ${setClause.join(', ')}\n      WHERE id = $${valueIndex}\n      RETURNING *\n    `;\n\n    const result = await this.pool.query(query, values);\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n    \n    return this.mapRowToPayrollApproval(result.rows[0]);\n  }\n\n  async listPayrollApprovals(params: PayrollApprovalListParams = {}): Promise<{\n    approvals: PayrollApprovalWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      payrollPeriodId,\n      approverId,\n      departmentId,\n      status,\n      startDate,\n      endDate,\n      search,\n      sortBy = 'created_at',\n      sortOrder = 'desc'\n    } = params;\n\n    const offset = (page - 1) * limit;\n    let whereConditions: string[] = [];\n    let values: any[] = [];\n    let valueIndex = 1;\n\n    // Build WHERE conditions\n    if (payrollPeriodId) {\n      whereConditions.push(`pa.payroll_period_id = $${valueIndex}`);\n      values.push(payrollPeriodId);\n      valueIndex++;\n    }\n\n    if (approverId) {\n      whereConditions.push(`pa.approver_id = $${valueIndex}`);\n      values.push(approverId);\n      valueIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`pa.department_id = $${valueIndex}`);\n      values.push(departmentId);\n      valueIndex++;\n    }\n\n    if (status) {\n      whereConditions.push(`pa.status = $${valueIndex}`);\n      values.push(status);\n      valueIndex++;\n    }\n\n    if (startDate) {\n      whereConditions.push(`pa.created_at >= $${valueIndex}`);\n      values.push(startDate);\n      valueIndex++;\n    }\n\n    if (endDate) {\n      whereConditions.push(`pa.created_at <= $${valueIndex}`);\n      values.push(endDate);\n      valueIndex++;\n    }\n\n    if (search) {\n      whereConditions.push(`(\n        pp.period_name ILIKE $${valueIndex} OR \n        u.first_name ILIKE $${valueIndex} OR\n        u.last_name ILIKE $${valueIndex} OR\n        u.email ILIKE $${valueIndex} OR\n        d.name ILIKE $${valueIndex} OR\n        pa.comments ILIKE $${valueIndex}\n      )`);\n      values.push(`%${search}%`);\n      valueIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) \n      FROM payroll_approvals pa\n      LEFT JOIN users u ON pa.approver_id = u.id\n      LEFT JOIN departments d ON pa.department_id = d.id\n      LEFT JOIN payroll_periods pp ON pa.payroll_period_id = pp.id\n      ${whereClause}\n    `;\n    const countResult = await this.pool.query(countQuery, values);\n    const total = parseInt(countResult.rows[0].count);\n\n    // Main query\n    const query = `\n      SELECT \n        pa.*,\n        u.id as approver_id,\n        u.email as approver_email,\n        u.first_name as approver_first_name,\n        u.last_name as approver_last_name,\n        u.role as approver_role,\n        d.id as department_id,\n        d.name as department_name,\n        d.description as department_description,\n        pp.id as period_id,\n        pp.period_name,\n        pp.start_date,\n        pp.end_date,\n        pp.status as period_status\n      FROM payroll_approvals pa\n      LEFT JOIN users u ON pa.approver_id = u.id\n      LEFT JOIN departments d ON pa.department_id = d.id\n      LEFT JOIN payroll_periods pp ON pa.payroll_period_id = pp.id\n      ${whereClause}\n      ORDER BY pa.${sortBy} ${sortOrder.toUpperCase()}\n      LIMIT $${valueIndex} OFFSET $${valueIndex + 1}\n    `;\n    values.push(limit, offset);\n\n    const result = await this.pool.query(query, values);\n    const approvals = result.rows.map(row => this.mapRowToPayrollApprovalWithDetails(row));\n\n    return {\n      approvals,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  async getPendingApprovalsForApprover(approverId: string): Promise<PayrollApprovalWithDetails[]> {\n    const query = `\n      SELECT \n        pa.*,\n        u.id as approver_id,\n        u.email as approver_email,\n        u.first_name as approver_first_name,\n        u.last_name as approver_last_name,\n        u.role as approver_role,\n        d.id as department_id,\n        d.name as department_name,\n        d.description as department_description,\n        pp.id as period_id,\n        pp.period_name,\n        pp.start_date,\n        pp.end_date,\n        pp.status as period_status\n      FROM payroll_approvals pa\n      LEFT JOIN users u ON pa.approver_id = u.id\n      LEFT JOIN departments d ON pa.department_id = d.id\n      LEFT JOIN payroll_periods pp ON pa.payroll_period_id = pp.id\n      WHERE pa.approver_id = $1 AND pa.status = 'pending'\n      ORDER BY pa.created_at ASC\n    `;\n    \n    const result = await this.pool.query(query, [approverId]);\n    return result.rows.map(row => this.mapRowToPayrollApprovalWithDetails(row));\n  }\n\n  async getApprovalStats(): Promise<{\n    totalApprovals: number;\n    pendingApprovals: number;\n    approvedApprovals: number;\n    rejectedApprovals: number;\n    approvalsByDepartment: Array<{ departmentName: string; count: number }>;\n    approvalsByApprover: Array<{ approverName: string; count: number }>;\n  }> {\n    const totalQuery = 'SELECT COUNT(*) FROM payroll_approvals';\n    const totalResult = await this.pool.query(totalQuery);\n    const totalApprovals = parseInt(totalResult.rows[0].count);\n\n    const statusQuery = `\n      SELECT status, COUNT(*) as count \n      FROM payroll_approvals \n      GROUP BY status\n    `;\n    const statusResult = await this.pool.query(statusQuery);\n\n    const pendingApprovals = statusResult.rows.find(r => r.status === 'pending')?.count || 0;\n    const approvedApprovals = statusResult.rows.find(r => r.status === 'approved')?.count || 0;\n    const rejectedApprovals = statusResult.rows.find(r => r.status === 'rejected')?.count || 0;\n\n    const departmentQuery = `\n      SELECT \n        COALESCE(d.name, 'No Department') as department_name,\n        COUNT(*) as count\n      FROM payroll_approvals pa\n      LEFT JOIN departments d ON pa.department_id = d.id\n      GROUP BY d.name\n      ORDER BY count DESC\n    `;\n    const departmentResult = await this.pool.query(departmentQuery);\n\n    const approverQuery = `\n      SELECT \n        CONCAT(u.first_name, ' ', u.last_name) as approver_name,\n        COUNT(*) as count\n      FROM payroll_approvals pa\n      JOIN users u ON pa.approver_id = u.id\n      GROUP BY u.id, u.first_name, u.last_name\n      ORDER BY count DESC\n      LIMIT 10\n    `;\n    const approverResult = await this.pool.query(approverQuery);\n\n    return {\n      totalApprovals,\n      pendingApprovals: parseInt(pendingApprovals),\n      approvedApprovals: parseInt(approvedApprovals),\n      rejectedApprovals: parseInt(rejectedApprovals),\n      approvalsByDepartment: departmentResult.rows,\n      approvalsByApprover: approverResult.rows\n    };\n  }\n\n  async deletePayrollApproval(id: string): Promise<boolean> {\n    const query = 'DELETE FROM payroll_approvals WHERE id = $1';\n    const result = await this.pool.query(query, [id]);\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  private mapRowToPayrollApproval(row: any): PayrollApproval {\n    return {\n      id: row.id,\n      payrollPeriodId: row.payroll_period_id,\n      approverId: row.approver_id,\n      departmentId: row.department_id,\n      status: row.status,\n      comments: row.comments,\n      approvedAt: row.approved_at,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    };\n  }\n\n  private mapRowToPayrollApprovalWithDetails(row: any): PayrollApprovalWithDetails {\n    return {\n      id: row.id,\n      payrollPeriodId: row.payroll_period_id,\n      approverId: row.approver_id,\n      departmentId: row.department_id,\n      status: row.status,\n      comments: row.comments,\n      approvedAt: row.approved_at,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n      approver: {\n        id: row.approver_id,\n        email: row.approver_email,\n        firstName: row.approver_first_name,\n        lastName: row.approver_last_name,\n        role: row.approver_role\n      },\n      department: row.department_id ? {\n        id: row.department_id,\n        name: row.department_name,\n        description: row.department_description\n      } : null,\n      payrollPeriod: {\n        id: row.period_id,\n        periodName: row.period_name,\n        startDate: row.start_date,\n        endDate: row.end_date,\n        status: row.period_status\n      }\n    };\n  }\n}"],"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","ignoreList":[]}