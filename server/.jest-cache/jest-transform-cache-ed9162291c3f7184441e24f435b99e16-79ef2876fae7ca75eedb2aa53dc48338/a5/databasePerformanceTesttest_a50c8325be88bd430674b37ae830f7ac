6793722093b83bb87d9a61f3de0fff28
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const loadTestUtils_1 = require("./loadTestUtils");
const database_1 = require("../../src/config/database");
describe('Database Performance Tests', () => {
    let dbPerformanceTest;
    let pool;
    beforeAll(async () => {
        pool = (0, database_1.getPool)();
        dbPerformanceTest = new loadTestUtils_1.DatabasePerformanceTest(pool);
    });
    afterAll(async () => {
        if (pool) {
            await pool.end();
        }
    });
    describe('User Queries Performance', () => {
        it('should perform well on user authentication queries', async () => {
            const query = `
        SELECT id, email, first_name, last_name, role, is_active, created_at
        FROM users 
        WHERE email = $1 AND is_active = true
      `;
            const params = ['test@example.com'];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 100);
            console.log('\nðŸ“Š User Authentication Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            console.log(`Total Time: ${result.totalTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(50); // Less than 50ms average
            expect(result.maxTime).toBeLessThan(200); // Less than 200ms max
        }, 30000);
        it('should perform well on concurrent user authentication queries', async () => {
            const query = `
        SELECT id, email, first_name, last_name, role, is_active, created_at
        FROM users 
        WHERE email = $1 AND is_active = true
      `;
            const params = ['test@example.com'];
            const result = await dbPerformanceTest.testConcurrentQueryPerformance(query, params, 20, // 20 concurrent queries
            10 // 10 iterations
            );
            console.log('\nðŸ“Š Concurrent User Authentication Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            console.log(`Queries Per Second: ${result.queriesPerSecond.toFixed(2)}`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(100); // Less than 100ms average
            expect(result.queriesPerSecond).toBeGreaterThan(50); // At least 50 QPS
        }, 30000);
    });
    describe('Employee Queries Performance', () => {
        it('should perform well on employee listing queries', async () => {
            const query = `
        SELECT 
          e.id,
          e.employee_id,
          e.position,
          e.employment_type,
          e.hire_date,
          e.base_salary,
          e.status,
          u.first_name,
          u.last_name,
          u.email,
          d.name as department_name
        FROM employees e
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        WHERE e.status = 'active'
        ORDER BY u.last_name, u.first_name
        LIMIT $1 OFFSET $2
      `;
            const params = [20, 0];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 50);
            console.log('\nðŸ“Š Employee Listing Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(100); // Less than 100ms average
            expect(result.maxTime).toBeLessThan(300); // Less than 300ms max
        }, 30000);
        it('should perform well on employee search queries', async () => {
            const query = `
        SELECT 
          e.id,
          e.employee_id,
          e.position,
          u.first_name,
          u.last_name,
          u.email,
          d.name as department_name
        FROM employees e
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        WHERE 
          (u.first_name ILIKE $1 OR u.last_name ILIKE $1 OR u.email ILIKE $1)
          AND e.status = 'active'
        ORDER BY u.last_name, u.first_name
        LIMIT $2
      `;
            const params = ['%test%', 10];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 30);
            console.log('\nðŸ“Š Employee Search Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(150); // Less than 150ms average
            expect(result.maxTime).toBeLessThan(500); // Less than 500ms max
        }, 30000);
    });
    describe('Attendance Queries Performance', () => {
        it('should perform well on attendance record queries', async () => {
            const query = `
        SELECT 
          ar.id,
          ar.employee_id,
          ar.date,
          ar.total_hours,
          ar.status,
          u.first_name,
          u.last_name,
          e.employee_id as employee_code
        FROM attendance_records ar
        JOIN employees e ON ar.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        WHERE ar.date BETWEEN $1 AND $2
        ORDER BY ar.date DESC, u.last_name
        LIMIT $3
      `;
            const params = ['2024-01-01', '2024-01-31', 50];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 40);
            console.log('\nðŸ“Š Attendance Record Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(200); // Less than 200ms average
            expect(result.maxTime).toBeLessThan(600); // Less than 600ms max
        }, 30000);
        it('should perform well on attendance statistics queries', async () => {
            const query = `
        SELECT 
          COUNT(*) as total_employees,
          COUNT(CASE WHEN ar.status = 'present' THEN 1 END) as present_today,
          COUNT(CASE WHEN ar.status = 'absent' THEN 1 END) as absent_today,
          COUNT(CASE WHEN ar.status = 'late' THEN 1 END) as late_today,
          COALESCE(SUM(ar.total_hours), 0) as total_hours_today,
          COALESCE(AVG(ar.total_hours), 0) as average_hours_per_employee
        FROM employees e
        LEFT JOIN attendance_records ar ON e.id = ar.employee_id 
          AND ar.date = CURRENT_DATE
        WHERE e.status = 'active'
      `;
            const result = await dbPerformanceTest.testQueryPerformance(query, [], 30);
            console.log('\nðŸ“Š Attendance Statistics Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(150); // Less than 150ms average
            expect(result.maxTime).toBeLessThan(400); // Less than 400ms max
        }, 30000);
    });
    describe('Payroll Queries Performance', () => {
        it('should perform well on payroll record queries', async () => {
            const query = `
        SELECT 
          pr.id,
          pr.employee_id,
          pr.payroll_period_id,
          pr.base_salary,
          pr.total_worked_hours,
          pr.gross_pay,
          pr.total_deductions,
          pr.net_pay,
          pr.status,
          u.first_name,
          u.last_name,
          e.employee_id as employee_code,
          pp.period_name
        FROM payroll_records pr
        JOIN employees e ON pr.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        JOIN payroll_periods pp ON pr.payroll_period_id = pp.id
        WHERE pp.id = $1
        ORDER BY u.last_name, u.first_name
        LIMIT $2 OFFSET $3
      `;
            const params = ['test-period-id', 25, 0];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 30);
            console.log('\nðŸ“Š Payroll Record Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(250); // Less than 250ms average
            expect(result.maxTime).toBeLessThan(800); // Less than 800ms max
        }, 30000);
        it('should perform well on payroll summary queries', async () => {
            const query = `
        SELECT 
          COUNT(*) as total_employees,
          COALESCE(SUM(pr.gross_pay), 0) as total_gross_pay,
          COALESCE(SUM(pr.total_deductions), 0) as total_deductions,
          COALESCE(SUM(pr.net_pay), 0) as total_net_pay,
          COALESCE(AVG(pr.gross_pay), 0) as average_salary,
          COUNT(CASE WHEN pr.status = 'processed' THEN 1 END) as processed_records,
          COUNT(CASE WHEN pr.status = 'pending' THEN 1 END) as pending_records
        FROM payroll_records pr
        JOIN payroll_periods pp ON pr.payroll_period_id = pp.id
        WHERE pp.id = $1
      `;
            const params = ['test-period-id'];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 25);
            console.log('\nðŸ“Š Payroll Summary Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(200); // Less than 200ms average
            expect(result.maxTime).toBeLessThan(600); // Less than 600ms max
        }, 30000);
    });
    describe('Department Queries Performance', () => {
        it('should perform well on department statistics queries', async () => {
            const query = `
        SELECT 
          COUNT(*) as total,
          COUNT(*) FILTER (WHERE d.is_active = true) as active,
          COUNT(*) FILTER (WHERE d.department_head_user_id IS NOT NULL) as with_heads,
          COUNT(*) FILTER (WHERE d.department_head_user_id IS NULL) as without_heads,
          COUNT(e.id) as total_employees
        FROM departments d
        LEFT JOIN employees e ON d.id = e.department_id
        WHERE d.is_active = true
      `;
            const result = await dbPerformanceTest.testQueryPerformance(query, [], 20);
            console.log('\nðŸ“Š Department Statistics Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(100); // Less than 100ms average
            expect(result.maxTime).toBeLessThan(300); // Less than 300ms max
        }, 30000);
        it('should perform well on concurrent department queries', async () => {
            const query = `
        SELECT 
          d.id,
          d.name,
          d.description,
          d.is_active,
          u.first_name as head_first_name,
          u.last_name as head_last_name,
          u.email as head_email
        FROM departments d
        LEFT JOIN users u ON d.department_head_user_id = u.id
        WHERE d.is_active = true
        ORDER BY d.name
      `;
            const result = await dbPerformanceTest.testConcurrentQueryPerformance(query, [], 15, // 15 concurrent queries
            8 // 8 iterations
            );
            console.log('\nðŸ“Š Concurrent Department Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            console.log(`Queries Per Second: ${result.queriesPerSecond.toFixed(2)}`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(150); // Less than 150ms average
            expect(result.queriesPerSecond).toBeGreaterThan(30); // At least 30 QPS
        }, 30000);
    });
    describe('Complex Join Queries Performance', () => {
        it('should perform well on complex employee dashboard queries', async () => {
            const query = `
        SELECT 
          e.id,
          e.employee_id,
          e.position,
          e.base_salary,
          u.first_name,
          u.last_name,
          u.email,
          d.name as department_name,
          dh.first_name as head_first_name,
          dh.last_name as head_last_name,
          COUNT(ar.id) as attendance_records_count,
          COALESCE(SUM(ar.total_hours), 0) as total_hours_this_month
        FROM employees e
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        LEFT JOIN users dh ON d.department_head_user_id = dh.id
        LEFT JOIN attendance_records ar ON e.id = ar.employee_id 
          AND ar.date >= DATE_TRUNC('month', CURRENT_DATE)
        WHERE e.status = 'active'
        GROUP BY e.id, e.employee_id, e.position, e.base_salary, 
                 u.first_name, u.last_name, u.email, d.name, 
                 dh.first_name, dh.last_name
        ORDER BY u.last_name, u.first_name
        LIMIT $1
      `;
            const params = [20];
            const result = await dbPerformanceTest.testQueryPerformance(query, params, 15);
            console.log('\nðŸ“Š Complex Employee Dashboard Query Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            // Performance assertions (more lenient for complex queries)
            expect(result.averageTime).toBeLessThan(500); // Less than 500ms average
            expect(result.maxTime).toBeLessThan(1500); // Less than 1.5s max
        }, 45000);
    });
    describe('Database Connection Pool Performance', () => {
        it('should handle high concurrent database connections', async () => {
            const query = `SELECT 1 as test`;
            const params = [];
            const result = await dbPerformanceTest.testConcurrentQueryPerformance(query, params, 50, // 50 concurrent connections
            20 // 20 iterations
            );
            console.log('\nðŸ“Š Database Connection Pool Performance:');
            console.log(`Average Time: ${result.averageTime.toFixed(2)}ms`);
            console.log(`Min Time: ${result.minTime.toFixed(2)}ms`);
            console.log(`Max Time: ${result.maxTime.toFixed(2)}ms`);
            console.log(`Queries Per Second: ${result.queriesPerSecond.toFixed(2)}`);
            // Performance assertions
            expect(result.averageTime).toBeLessThan(50); // Less than 50ms average
            expect(result.queriesPerSecond).toBeGreaterThan(100); // At least 100 QPS
            expect(result.maxTime).toBeLessThan(200); // Less than 200ms max
        }, 30000);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,