ff6d0b34a2c3b243f46c1ecc56750bb9
"use strict";

/* istanbul ignore next */
function cov_n9ohqjeks() {
  var path = "/home/kim/tito/server/src/controllers/attendance/attendanceController.ts";
  var hash = "15484b578363f5dfacc98b9eaf1ff6556527b3c3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/attendance/attendanceController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 69
        }
      },
      "4": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 54
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "6": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 9,
          column: 51
        }
      },
      "7": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 10,
          column: 82
        }
      },
      "8": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 16,
          column: 58
        }
      },
      "9": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "10": {
        start: {
          line: 18,
          column: 35
        },
        end: {
          line: 18,
          column: 44
        }
      },
      "11": {
        start: {
          line: 19,
          column: 26
        },
        end: {
          line: 41,
          column: 7
        }
      },
      "12": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 42,
          column: 80
        }
      },
      "13": {
        start: {
          line: 43,
          column: 38
        },
        end: {
          line: 57,
          column: 15
        }
      },
      "14": {
        start: {
          line: 43,
          column: 62
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "15": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 63,
          column: 15
        }
      },
      "16": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "17": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "18": {
        start: {
          line: 82,
          column: 26
        },
        end: {
          line: 82,
          column: 58
        }
      },
      "19": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "20": {
        start: {
          line: 84,
          column: 26
        },
        end: {
          line: 84,
          column: 64
        }
      },
      "21": {
        start: {
          line: 85,
          column: 26
        },
        end: {
          line: 94,
          column: 7
        }
      },
      "22": {
        start: {
          line: 95,
          column: 27
        },
        end: {
          line: 95,
          column: 80
        }
      },
      "23": {
        start: {
          line: 96,
          column: 26
        },
        end: {
          line: 96,
          column: 40
        }
      },
      "24": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 107,
          column: 15
        }
      },
      "25": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 113,
          column: 15
        }
      },
      "26": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 119,
          column: 15
        }
      },
      "27": {
        start: {
          line: 126,
          column: 26
        },
        end: {
          line: 126,
          column: 58
        }
      },
      "28": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "29": {
        start: {
          line: 128,
          column: 41
        },
        end: {
          line: 128,
          column: 50
        }
      },
      "30": {
        start: {
          line: 129,
          column: 31
        },
        end: {
          line: 129,
          column: 65
        }
      },
      "31": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 44
        }
      },
      "32": {
        start: {
          line: 131,
          column: 26
        },
        end: {
          line: 187,
          column: 7
        }
      },
      "33": {
        start: {
          line: 188,
          column: 27
        },
        end: {
          line: 188,
          column: 92
        }
      },
      "34": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 86
        }
      },
      "35": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "36": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 82
        }
      },
      "37": {
        start: {
          line: 194,
          column: 36
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "38": {
        start: {
          line: 194,
          column: 60
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "39": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 214,
          column: 15
        }
      },
      "40": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 220,
          column: 15
        }
      },
      "41": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 226,
          column: 15
        }
      },
      "42": {
        start: {
          line: 233,
          column: 26
        },
        end: {
          line: 233,
          column: 58
        }
      },
      "43": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "44": {
        start: {
          line: 235,
          column: 27
        },
        end: {
          line: 235,
          column: 37
        }
      },
      "45": {
        start: {
          line: 237,
          column: 32
        },
        end: {
          line: 253,
          column: 7
        }
      },
      "46": {
        start: {
          line: 254,
          column: 33
        },
        end: {
          line: 254,
          column: 89
        }
      },
      "47": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "48": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 260,
          column: 19
        }
      },
      "49": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 23
        }
      },
      "50": {
        start: {
          line: 263,
          column: 27
        },
        end: {
          line: 263,
          column: 47
        }
      },
      "51": {
        start: {
          line: 265,
          column: 34
        },
        end: {
          line: 279,
          column: 7
        }
      },
      "52": {
        start: {
          line: 280,
          column: 35
        },
        end: {
          line: 280,
          column: 93
        }
      },
      "53": {
        start: {
          line: 281,
          column: 37
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "54": {
        start: {
          line: 290,
          column: 62
        },
        end: {
          line: 300,
          column: 17
        }
      },
      "55": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 307,
          column: 15
        }
      },
      "56": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 313,
          column: 15
        }
      },
      "57": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 319,
          column: 15
        }
      },
      "58": {
        start: {
          line: 326,
          column: 26
        },
        end: {
          line: 326,
          column: 58
        }
      },
      "59": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 403,
          column: 9
        }
      },
      "60": {
        start: {
          line: 328,
          column: 27
        },
        end: {
          line: 328,
          column: 37
        }
      },
      "61": {
        start: {
          line: 329,
          column: 26
        },
        end: {
          line: 354,
          column: 7
        }
      },
      "62": {
        start: {
          line: 355,
          column: 27
        },
        end: {
          line: 355,
          column: 77
        }
      },
      "63": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 363,
          column: 13
        }
      },
      "64": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 361,
          column: 19
        }
      },
      "65": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 23
        }
      },
      "66": {
        start: {
          line: 364,
          column: 24
        },
        end: {
          line: 364,
          column: 38
        }
      },
      "67": {
        start: {
          line: 365,
          column: 37
        },
        end: {
          line: 384,
          column: 13
        }
      },
      "68": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 390,
          column: 15
        }
      },
      "69": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 396,
          column: 15
        }
      },
      "70": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 402,
          column: 15
        }
      },
      "71": {
        start: {
          line: 409,
          column: 26
        },
        end: {
          line: 409,
          column: 58
        }
      },
      "72": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 439,
          column: 9
        }
      },
      "73": {
        start: {
          line: 411,
          column: 43
        },
        end: {
          line: 411,
          column: 53
        }
      },
      "74": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 419,
          column: 13
        }
      },
      "75": {
        start: {
          line: 413,
          column: 16
        },
        end: {
          line: 417,
          column: 19
        }
      },
      "76": {
        start: {
          line: 418,
          column: 16
        },
        end: {
          line: 418,
          column: 23
        }
      },
      "77": {
        start: {
          line: 420,
          column: 40
        },
        end: {
          line: 420,
          column: 131
        }
      },
      "78": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 426,
          column: 15
        }
      },
      "79": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 432,
          column: 15
        }
      },
      "80": {
        start: {
          line: 433,
          column: 12
        },
        end: {
          line: 438,
          column: 15
        }
      },
      "81": {
        start: {
          line: 442,
          column: 0
        },
        end: {
          line: 442,
          column: 52
        }
      },
      "82": {
        start: {
          line: 443,
          column: 0
        },
        end: {
          line: 443,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 40
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 43,
            column: 54
          },
          end: {
            line: 43,
            column: 55
          }
        },
        loc: {
          start: {
            line: 43,
            column: 62
          },
          end: {
            line: 57,
            column: 13
          }
        },
        line: 43
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 39
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 81
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 39
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 125
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 194,
            column: 52
          },
          end: {
            line: 194,
            column: 53
          }
        },
        loc: {
          start: {
            line: 194,
            column: 60
          },
          end: {
            line: 208,
            column: 13
          }
        },
        line: 194
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 48
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 232
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 290,
            column: 50
          },
          end: {
            line: 290,
            column: 51
          }
        },
        loc: {
          start: {
            line: 290,
            column: 62
          },
          end: {
            line: 300,
            column: 17
          }
        },
        line: 290
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 325,
            column: 4
          },
          end: {
            line: 325,
            column: 5
          }
        },
        loc: {
          start: {
            line: 325,
            column: 40
          },
          end: {
            line: 404,
            column: 5
          }
        },
        line: 325
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 408,
            column: 4
          },
          end: {
            line: 408,
            column: 5
          }
        },
        loc: {
          start: {
            line: 408,
            column: 48
          },
          end: {
            line: 440,
            column: 5
          }
        },
        line: 408
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 30
          }
        }],
        line: 18
      },
      "4": {
        loc: {
          start: {
            line: 55,
            column: 24
          },
          end: {
            line: 55,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 39
          },
          end: {
            line: 55,
            column: 49
          }
        }, {
          start: {
            line: 55,
            column: 52
          },
          end: {
            line: 55,
            column: 63
          }
        }],
        line: 55
      },
      "5": {
        loc: {
          start: {
            line: 56,
            column: 27
          },
          end: {
            line: 56,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 27
          },
          end: {
            line: 56,
            column: 39
          }
        }, {
          start: {
            line: 56,
            column: 43
          },
          end: {
            line: 56,
            column: 56
          }
        }],
        line: 56
      },
      "6": {
        loc: {
          start: {
            line: 101,
            column: 41
          },
          end: {
            line: 101,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 41
          },
          end: {
            line: 101,
            column: 78
          }
        }, {
          start: {
            line: 101,
            column: 82
          },
          end: {
            line: 101,
            column: 83
          }
        }],
        line: 101
      },
      "7": {
        loc: {
          start: {
            line: 102,
            column: 35
          },
          end: {
            line: 102,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 35
          },
          end: {
            line: 102,
            column: 66
          }
        }, {
          start: {
            line: 102,
            column: 70
          },
          end: {
            line: 102,
            column: 71
          }
        }],
        line: 102
      },
      "8": {
        loc: {
          start: {
            line: 103,
            column: 36
          },
          end: {
            line: 103,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 36
          },
          end: {
            line: 103,
            column: 68
          }
        }, {
          start: {
            line: 103,
            column: 72
          },
          end: {
            line: 103,
            column: 73
          }
        }],
        line: 103
      },
      "9": {
        loc: {
          start: {
            line: 104,
            column: 44
          },
          end: {
            line: 104,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 44
          },
          end: {
            line: 104,
            column: 84
          }
        }, {
          start: {
            line: 104,
            column: 88
          },
          end: {
            line: 104,
            column: 89
          }
        }],
        line: 104
      },
      "10": {
        loc: {
          start: {
            line: 128,
            column: 20
          },
          end: {
            line: 128,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 128,
            column: 28
          },
          end: {
            line: 128,
            column: 30
          }
        }],
        line: 128
      },
      "11": {
        loc: {
          start: {
            line: 129,
            column: 31
          },
          end: {
            line: 129,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 38
          },
          end: {
            line: 129,
            column: 52
          }
        }, {
          start: {
            line: 129,
            column: 55
          },
          end: {
            line: 129,
            column: 65
          }
        }],
        line: 129
      },
      "12": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "13": {
        loc: {
          start: {
            line: 207,
            column: 39
          },
          end: {
            line: 207,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 39
          },
          end: {
            line: 207,
            column: 66
          }
        }, {
          start: {
            line: 207,
            column: 70
          },
          end: {
            line: 207,
            column: 71
          }
        }],
        line: 207
      },
      "14": {
        loc: {
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "15": {
        loc: {
          start: {
            line: 297,
            column: 37
          },
          end: {
            line: 297,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 297,
            column: 37
          },
          end: {
            line: 297,
            column: 73
          }
        }, {
          start: {
            line: 297,
            column: 77
          },
          end: {
            line: 297,
            column: 78
          }
        }],
        line: 297
      },
      "16": {
        loc: {
          start: {
            line: 298,
            column: 31
          },
          end: {
            line: 298,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 31
          },
          end: {
            line: 298,
            column: 61
          }
        }, {
          start: {
            line: 298,
            column: 65
          },
          end: {
            line: 298,
            column: 66
          }
        }],
        line: 298
      },
      "17": {
        loc: {
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 363,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 363,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "18": {
        loc: {
          start: {
            line: 382,
            column: 24
          },
          end: {
            line: 382,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 382,
            column: 39
          },
          end: {
            line: 382,
            column: 49
          }
        }, {
          start: {
            line: 382,
            column: 52
          },
          end: {
            line: 382,
            column: 63
          }
        }],
        line: 382
      },
      "19": {
        loc: {
          start: {
            line: 383,
            column: 27
          },
          end: {
            line: 383,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 383,
            column: 27
          },
          end: {
            line: 383,
            column: 39
          }
        }, {
          start: {
            line: 383,
            column: 43
          },
          end: {
            line: 383,
            column: 56
          }
        }],
        line: 383
      },
      "20": {
        loc: {
          start: {
            line: 412,
            column: 12
          },
          end: {
            line: 419,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 412,
            column: 12
          },
          end: {
            line: 419,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 412
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/attendance/attendanceController.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/attendance/attendanceController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { getRequestId } from '../../utils/types/express';\nimport logger from '../../utils/logger';\nimport { getPool } from '../../config/database';\nimport { attendanceService } from '../../services/attendance/attendanceService';\n\nexport class AttendanceController {\n  /**\n   * Get recent attendance records for dashboard\n   */\n  async getRecentAttendance(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n\n    try {\n      const { limit = 10 } = req.query;\n\n      const query = `\n        SELECT \n          s.id,\n          s.session_type,\n          s.clock_in,\n          s.clock_out,\n          s.created_at,\n          s.selfie_image_url,\n          ar.date,\n          ar.employee_id,\n          u.first_name,\n          u.last_name,\n          e.employee_id as employee_code,\n          d.name as department_name\n        FROM attendance_sessions s\n        JOIN attendance_records ar ON s.attendance_record_id = ar.id\n        JOIN employees e ON ar.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        WHERE s.clock_in IS NOT NULL OR s.clock_out IS NOT NULL\n        ORDER BY s.created_at DESC\n        LIMIT $1\n      `;\n\n      const result = await getPool().query(query, [limit]);\n      \n      const attendanceRecords = result.rows.map(row => ({\n        id: row.id,\n        sessionType: row.session_type,\n        clockIn: row.clock_in,\n        clockOut: row.clock_out,\n        createdAt: row.created_at,\n        selfieImageUrl: row.selfie_image_url,\n        date: row.date,\n        employeeId: row.employee_id,\n        employeeName: `${row.first_name} ${row.last_name}`,\n        employeeCode: row.employee_code,\n        departmentName: row.department_name,\n        action: row.clock_in ? 'Clock In' : 'Clock Out',\n        timestamp: row.clock_in || row.clock_out\n      }));\n\n      res.json({\n        success: true,\n        message: 'Recent attendance records retrieved successfully',\n        data: attendanceRecords,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting recent attendance records', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get recent attendance records',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get attendance statistics for dashboard\n   */\n  async getAttendanceStats(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      \n      const query = `\n        SELECT \n          COUNT(DISTINCT ar.employee_id) as total_employees_today,\n          COUNT(CASE WHEN s.clock_in IS NOT NULL THEN 1 END) as clock_ins_today,\n          COUNT(CASE WHEN s.clock_out IS NOT NULL THEN 1 END) as clock_outs_today,\n          COUNT(CASE WHEN s.clock_in IS NOT NULL AND s.clock_out IS NOT NULL THEN 1 END) as completed_sessions_today\n        FROM attendance_records ar\n        LEFT JOIN attendance_sessions s ON ar.id = s.attendance_record_id\n        WHERE ar.date = $1\n      `;\n\n      const result = await getPool().query(query, [today]);\n      const stats = result.rows[0];\n\n      res.json({\n        success: true,\n        message: 'Attendance statistics retrieved successfully',\n        data: {\n          totalEmployeesToday: parseInt(stats.total_employees_today) || 0,\n          clockInsToday: parseInt(stats.clock_ins_today) || 0,\n          clockOutsToday: parseInt(stats.clock_outs_today) || 0,\n          completedSessionsToday: parseInt(stats.completed_sessions_today) || 0\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting attendance statistics', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get attendance statistics',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get daily attendance records for dashboard\n   */\n  async getDailyAttendance(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n\n    try {\n      const { limit = 10, date } = req.query;\n      const targetDate = date ? new Date(date as string) : new Date();\n      targetDate.setHours(0, 0, 0, 0);\n\n      const query = `\n        SELECT \n          ar.id as attendance_record_id,\n          ar.employee_id,\n          ar.date,\n          ar.overall_status,\n          u.first_name,\n          u.last_name,\n          e.employee_id as employee_code,\n          d.name as department_name,\n          e.position,\n          -- Morning session\n          morning_in.clock_in as morning_in,\n          morning_out.clock_out as morning_out,\n          -- Afternoon session\n          afternoon_in.clock_in as afternoon_in,\n          afternoon_out.clock_out as afternoon_out,\n          -- Total hours calculation by pairing clock-in and clock-out sessions\n          COALESCE(\n            -- Morning session hours (if both morning_in and morning_out exist)\n            (SELECT EXTRACT(EPOCH FROM (m_out.clock_out - m_in.clock_in)) / 3600.0\n             FROM attendance_sessions m_in, attendance_sessions m_out\n             WHERE m_in.attendance_record_id = ar.id \n               AND m_in.session_type = 'morning_in'\n               AND m_in.clock_in IS NOT NULL\n               AND m_out.attendance_record_id = ar.id \n               AND m_out.session_type = 'morning_out'\n               AND m_out.clock_out IS NOT NULL), 0) +\n          COALESCE(\n            -- Afternoon session hours (if both afternoon_in and afternoon_out exist)\n            (SELECT EXTRACT(EPOCH FROM (a_out.clock_out - a_in.clock_in)) / 3600.0\n             FROM attendance_sessions a_in, attendance_sessions a_out\n             WHERE a_in.attendance_record_id = ar.id \n               AND a_in.session_type = 'afternoon_in'\n               AND a_in.clock_in IS NOT NULL\n               AND a_out.attendance_record_id = ar.id \n               AND a_out.session_type = 'afternoon_out'\n               AND a_out.clock_out IS NOT NULL), 0\n          ) as total_hours\n        FROM attendance_records ar\n        JOIN employees e ON ar.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        -- Morning sessions\n        LEFT JOIN attendance_sessions morning_in ON ar.id = morning_in.attendance_record_id \n          AND morning_in.session_type = 'morning_in'\n        LEFT JOIN attendance_sessions morning_out ON ar.id = morning_out.attendance_record_id \n          AND morning_out.session_type = 'morning_out'\n        -- Afternoon sessions\n        LEFT JOIN attendance_sessions afternoon_in ON ar.id = afternoon_in.attendance_record_id \n          AND afternoon_in.session_type = 'afternoon_in'\n        LEFT JOIN attendance_sessions afternoon_out ON ar.id = afternoon_out.attendance_record_id \n          AND afternoon_out.session_type = 'afternoon_out'\n        WHERE ar.date = $1\n        ORDER BY u.first_name, u.last_name\n        LIMIT $2\n      `;\n\n      const result = await getPool().query(query, [targetDate, limit]);\n      \n      // Debug logging\n      console.log('Daily attendance query result:', result.rows.length, 'rows');\n      if (result.rows.length > 0) {\n        console.log('First row total_hours:', result.rows[0].total_hours);\n      }\n      \n      const dailyAttendance = result.rows.map(row => ({\n        attendanceRecordId: row.attendance_record_id,\n        employeeId: row.employee_id,\n        employeeName: `${row.first_name} ${row.last_name}`,\n        employeeCode: row.employee_code,\n        departmentName: row.department_name,\n        position: row.position,\n        date: row.date,\n        overallStatus: row.overall_status,\n        morningIn: row.morning_in,\n        morningOut: row.morning_out,\n        afternoonIn: row.afternoon_in,\n        afternoonOut: row.afternoon_out,\n        totalHours: Math.round(parseFloat(row.total_hours) || 0)\n      }));\n\n      res.json({\n        success: true,\n        message: 'Daily attendance records retrieved successfully',\n        data: dailyAttendance,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting daily attendance records', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get daily attendance records',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get all sessions for an attendance record\n   */\n  async getAttendanceRecordSessions(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n\n    try {\n      const { id } = req.params;\n\n      // First get the attendance record info\n      const recordQuery = `\n        SELECT \n          ar.id as attendance_record_id,\n          ar.employee_id,\n          ar.date,\n          ar.overall_status,\n          u.first_name,\n          u.last_name,\n          e.employee_id as employee_code,\n          e.position,\n          d.name as department_name\n        FROM attendance_records ar\n        JOIN employees e ON ar.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        WHERE ar.id = $1\n      `;\n\n      const recordResult = await getPool().query(recordQuery, [id]);\n      \n      if (recordResult.rows.length === 0) {\n        res.status(404).json({\n          success: false,\n          message: 'Attendance record not found',\n          requestId\n        });\n        return;\n      }\n\n      const record = recordResult.rows[0];\n\n      // Then get all sessions for this attendance record\n      const sessionsQuery = `\n        SELECT \n          s.id,\n          s.session_type,\n          s.clock_in,\n          s.clock_out,\n          s.created_at,\n          s.selfie_image_url,\n          s.calculated_hours,\n          s.late_hours,\n          s.status\n        FROM attendance_sessions s\n        WHERE s.attendance_record_id = $1\n        ORDER BY s.created_at ASC\n      `;\n\n      const sessionsResult = await getPool().query(sessionsQuery, [id]);\n      \n      const attendanceDetail = {\n        attendanceRecordId: record.attendance_record_id,\n        employeeId: record.employee_id,\n        employeeName: `${record.first_name} ${record.last_name}`,\n        employeeCode: record.employee_code,\n        position: record.position,\n        departmentName: record.department_name,\n        date: record.date,\n        overallStatus: record.overall_status,\n        sessions: sessionsResult.rows.map(session => ({\n          id: session.id,\n          sessionType: session.session_type,\n          clockIn: session.clock_in,\n          clockOut: session.clock_out,\n          createdAt: session.created_at,\n          selfieImagePath: session.selfie_image_url,\n          calculatedHours: parseFloat(session.calculated_hours) || 0,\n          lateHours: parseFloat(session.late_hours) || 0,\n          status: session.status\n        }))\n      };\n\n      res.json({\n        success: true,\n        message: 'Attendance record sessions retrieved successfully',\n        data: attendanceDetail,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting attendance record sessions', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get attendance record sessions',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get detailed attendance record by ID\n   */\n  async getAttendanceDetail(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n\n    try {\n      const { id } = req.params;\n\n      const query = `\n        SELECT \n          s.id,\n          s.session_type,\n          s.clock_in,\n          s.clock_out,\n          s.created_at,\n          s.selfie_image_url,\n          s.regular_hours,\n          s.overtime_hours,\n          s.late_minutes,\n          s.late_hours,\n          ar.date,\n          ar.employee_id,\n          u.first_name,\n          u.last_name,\n          e.employee_id as employee_code,\n          e.position,\n          d.name as department_name\n        FROM attendance_sessions s\n        JOIN attendance_records ar ON s.attendance_record_id = ar.id\n        JOIN employees e ON ar.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        WHERE s.id = $1\n      `;\n\n      const result = await getPool().query(query, [id]);\n      \n      if (result.rows.length === 0) {\n        res.status(404).json({\n          success: false,\n          message: 'Attendance record not found',\n          requestId\n        });\n        return;\n      }\n\n      const row = result.rows[0];\n      const attendanceDetail = {\n        id: row.id,\n        sessionType: row.session_type,\n        clockIn: row.clock_in,\n        clockOut: row.clock_out,\n        createdAt: row.created_at,\n        selfieImageUrl: row.selfie_image_url,\n        regularHours: row.regular_hours,\n        overtimeHours: row.overtime_hours,\n        lateMinutes: row.late_minutes,\n        lateHours: row.late_hours,\n        date: row.date,\n        employeeId: row.employee_id,\n        employeeName: `${row.first_name} ${row.last_name}`,\n        employeeCode: row.employee_code,\n        position: row.position,\n        departmentName: row.department_name,\n        action: row.clock_in ? 'Clock In' : 'Clock Out',\n        timestamp: row.clock_in || row.clock_out\n      };\n\n      res.json({\n        success: true,\n        message: 'Attendance detail retrieved successfully',\n        data: attendanceDetail,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting attendance detail', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get attendance detail',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Get detailed hours calculation for an attendance record\n   */\n  async getDetailedHoursCalculation(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n\n    try {\n      const { attendanceRecordId } = req.params;\n\n      if (!attendanceRecordId) {\n        res.status(400).json({\n          success: false,\n          message: 'Attendance record ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const detailedCalculation = await attendanceService.getDetailedHoursCalculation(attendanceRecordId);\n\n      res.json({\n        success: true,\n        message: 'Detailed hours calculation retrieved successfully',\n        data: detailedCalculation,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting detailed hours calculation', {\n        error: (error as Error).message,\n        requestId\n      });\n\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get detailed hours calculation',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n}\n\nexport const attendanceController = new AttendanceController();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "15484b578363f5dfacc98b9eaf1ff6556527b3c3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_n9ohqjeks = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_n9ohqjeks();
var __importDefault =
/* istanbul ignore next */
(cov_n9ohqjeks().s[0]++,
/* istanbul ignore next */
(cov_n9ohqjeks().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_n9ohqjeks().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_n9ohqjeks().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_n9ohqjeks().f[0]++;
  cov_n9ohqjeks().s[1]++;
  return /* istanbul ignore next */(cov_n9ohqjeks().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_n9ohqjeks().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_n9ohqjeks().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_n9ohqjeks().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_n9ohqjeks().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_n9ohqjeks().s[3]++;
exports.attendanceController = exports.AttendanceController = void 0;
const express_1 =
/* istanbul ignore next */
(cov_n9ohqjeks().s[4]++, require("../../utils/types/express"));
const logger_1 =
/* istanbul ignore next */
(cov_n9ohqjeks().s[5]++, __importDefault(require("../../utils/logger")));
const database_1 =
/* istanbul ignore next */
(cov_n9ohqjeks().s[6]++, require("../../config/database"));
const attendanceService_1 =
/* istanbul ignore next */
(cov_n9ohqjeks().s[7]++, require("../../services/attendance/attendanceService"));
class AttendanceController {
  /**
   * Get recent attendance records for dashboard
   */
  async getRecentAttendance(req, res) {
    /* istanbul ignore next */
    cov_n9ohqjeks().f[1]++;
    const requestId =
    /* istanbul ignore next */
    (cov_n9ohqjeks().s[8]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_n9ohqjeks().s[9]++;
    try {
      const {
        limit =
        /* istanbul ignore next */
        (cov_n9ohqjeks().b[3][0]++, 10)
      } =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[10]++, req.query);
      const query =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[11]++, `
        SELECT 
          s.id,
          s.session_type,
          s.clock_in,
          s.clock_out,
          s.created_at,
          s.selfie_image_url,
          ar.date,
          ar.employee_id,
          u.first_name,
          u.last_name,
          e.employee_id as employee_code,
          d.name as department_name
        FROM attendance_sessions s
        JOIN attendance_records ar ON s.attendance_record_id = ar.id
        JOIN employees e ON ar.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        WHERE s.clock_in IS NOT NULL OR s.clock_out IS NOT NULL
        ORDER BY s.created_at DESC
        LIMIT $1
      `);
      const result =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[12]++, await (0, database_1.getPool)().query(query, [limit]));
      const attendanceRecords =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[13]++, result.rows.map(row => {
        /* istanbul ignore next */
        cov_n9ohqjeks().f[2]++;
        cov_n9ohqjeks().s[14]++;
        return {
          id: row.id,
          sessionType: row.session_type,
          clockIn: row.clock_in,
          clockOut: row.clock_out,
          createdAt: row.created_at,
          selfieImageUrl: row.selfie_image_url,
          date: row.date,
          employeeId: row.employee_id,
          employeeName: `${row.first_name} ${row.last_name}`,
          employeeCode: row.employee_code,
          departmentName: row.department_name,
          action: row.clock_in ?
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[4][0]++, 'Clock In') :
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[4][1]++, 'Clock Out'),
          timestamp:
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[5][0]++, row.clock_in) ||
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[5][1]++, row.clock_out)
        };
      }));
      /* istanbul ignore next */
      cov_n9ohqjeks().s[15]++;
      res.json({
        success: true,
        message: 'Recent attendance records retrieved successfully',
        data: attendanceRecords,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_n9ohqjeks().s[16]++;
      logger_1.default.error('Error getting recent attendance records', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_n9ohqjeks().s[17]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get recent attendance records',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Get attendance statistics for dashboard
   */
  async getAttendanceStats(req, res) {
    /* istanbul ignore next */
    cov_n9ohqjeks().f[3]++;
    const requestId =
    /* istanbul ignore next */
    (cov_n9ohqjeks().s[18]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_n9ohqjeks().s[19]++;
    try {
      const today =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[20]++, new Date().toISOString().split('T')[0]);
      const query =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[21]++, `
        SELECT 
          COUNT(DISTINCT ar.employee_id) as total_employees_today,
          COUNT(CASE WHEN s.clock_in IS NOT NULL THEN 1 END) as clock_ins_today,
          COUNT(CASE WHEN s.clock_out IS NOT NULL THEN 1 END) as clock_outs_today,
          COUNT(CASE WHEN s.clock_in IS NOT NULL AND s.clock_out IS NOT NULL THEN 1 END) as completed_sessions_today
        FROM attendance_records ar
        LEFT JOIN attendance_sessions s ON ar.id = s.attendance_record_id
        WHERE ar.date = $1
      `);
      const result =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[22]++, await (0, database_1.getPool)().query(query, [today]));
      const stats =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[23]++, result.rows[0]);
      /* istanbul ignore next */
      cov_n9ohqjeks().s[24]++;
      res.json({
        success: true,
        message: 'Attendance statistics retrieved successfully',
        data: {
          totalEmployeesToday:
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[6][0]++, parseInt(stats.total_employees_today)) ||
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[6][1]++, 0),
          clockInsToday:
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[7][0]++, parseInt(stats.clock_ins_today)) ||
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[7][1]++, 0),
          clockOutsToday:
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[8][0]++, parseInt(stats.clock_outs_today)) ||
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[8][1]++, 0),
          completedSessionsToday:
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[9][0]++, parseInt(stats.completed_sessions_today)) ||
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[9][1]++, 0)
        },
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_n9ohqjeks().s[25]++;
      logger_1.default.error('Error getting attendance statistics', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_n9ohqjeks().s[26]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get attendance statistics',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Get daily attendance records for dashboard
   */
  async getDailyAttendance(req, res) {
    /* istanbul ignore next */
    cov_n9ohqjeks().f[4]++;
    const requestId =
    /* istanbul ignore next */
    (cov_n9ohqjeks().s[27]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_n9ohqjeks().s[28]++;
    try {
      const {
        limit =
        /* istanbul ignore next */
        (cov_n9ohqjeks().b[10][0]++, 10),
        date
      } =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[29]++, req.query);
      const targetDate =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[30]++, date ?
      /* istanbul ignore next */
      (cov_n9ohqjeks().b[11][0]++, new Date(date)) :
      /* istanbul ignore next */
      (cov_n9ohqjeks().b[11][1]++, new Date()));
      /* istanbul ignore next */
      cov_n9ohqjeks().s[31]++;
      targetDate.setHours(0, 0, 0, 0);
      const query =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[32]++, `
        SELECT 
          ar.id as attendance_record_id,
          ar.employee_id,
          ar.date,
          ar.overall_status,
          u.first_name,
          u.last_name,
          e.employee_id as employee_code,
          d.name as department_name,
          e.position,
          -- Morning session
          morning_in.clock_in as morning_in,
          morning_out.clock_out as morning_out,
          -- Afternoon session
          afternoon_in.clock_in as afternoon_in,
          afternoon_out.clock_out as afternoon_out,
          -- Total hours calculation by pairing clock-in and clock-out sessions
          COALESCE(
            -- Morning session hours (if both morning_in and morning_out exist)
            (SELECT EXTRACT(EPOCH FROM (m_out.clock_out - m_in.clock_in)) / 3600.0
             FROM attendance_sessions m_in, attendance_sessions m_out
             WHERE m_in.attendance_record_id = ar.id 
               AND m_in.session_type = 'morning_in'
               AND m_in.clock_in IS NOT NULL
               AND m_out.attendance_record_id = ar.id 
               AND m_out.session_type = 'morning_out'
               AND m_out.clock_out IS NOT NULL), 0) +
          COALESCE(
            -- Afternoon session hours (if both afternoon_in and afternoon_out exist)
            (SELECT EXTRACT(EPOCH FROM (a_out.clock_out - a_in.clock_in)) / 3600.0
             FROM attendance_sessions a_in, attendance_sessions a_out
             WHERE a_in.attendance_record_id = ar.id 
               AND a_in.session_type = 'afternoon_in'
               AND a_in.clock_in IS NOT NULL
               AND a_out.attendance_record_id = ar.id 
               AND a_out.session_type = 'afternoon_out'
               AND a_out.clock_out IS NOT NULL), 0
          ) as total_hours
        FROM attendance_records ar
        JOIN employees e ON ar.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        -- Morning sessions
        LEFT JOIN attendance_sessions morning_in ON ar.id = morning_in.attendance_record_id 
          AND morning_in.session_type = 'morning_in'
        LEFT JOIN attendance_sessions morning_out ON ar.id = morning_out.attendance_record_id 
          AND morning_out.session_type = 'morning_out'
        -- Afternoon sessions
        LEFT JOIN attendance_sessions afternoon_in ON ar.id = afternoon_in.attendance_record_id 
          AND afternoon_in.session_type = 'afternoon_in'
        LEFT JOIN attendance_sessions afternoon_out ON ar.id = afternoon_out.attendance_record_id 
          AND afternoon_out.session_type = 'afternoon_out'
        WHERE ar.date = $1
        ORDER BY u.first_name, u.last_name
        LIMIT $2
      `);
      const result =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[33]++, await (0, database_1.getPool)().query(query, [targetDate, limit]));
      // Debug logging
      /* istanbul ignore next */
      cov_n9ohqjeks().s[34]++;
      console.log('Daily attendance query result:', result.rows.length, 'rows');
      /* istanbul ignore next */
      cov_n9ohqjeks().s[35]++;
      if (result.rows.length > 0) {
        /* istanbul ignore next */
        cov_n9ohqjeks().b[12][0]++;
        cov_n9ohqjeks().s[36]++;
        console.log('First row total_hours:', result.rows[0].total_hours);
      } else
      /* istanbul ignore next */
      {
        cov_n9ohqjeks().b[12][1]++;
      }
      const dailyAttendance =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[37]++, result.rows.map(row => {
        /* istanbul ignore next */
        cov_n9ohqjeks().f[5]++;
        cov_n9ohqjeks().s[38]++;
        return {
          attendanceRecordId: row.attendance_record_id,
          employeeId: row.employee_id,
          employeeName: `${row.first_name} ${row.last_name}`,
          employeeCode: row.employee_code,
          departmentName: row.department_name,
          position: row.position,
          date: row.date,
          overallStatus: row.overall_status,
          morningIn: row.morning_in,
          morningOut: row.morning_out,
          afternoonIn: row.afternoon_in,
          afternoonOut: row.afternoon_out,
          totalHours: Math.round(
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[13][0]++, parseFloat(row.total_hours)) ||
          /* istanbul ignore next */
          (cov_n9ohqjeks().b[13][1]++, 0))
        };
      }));
      /* istanbul ignore next */
      cov_n9ohqjeks().s[39]++;
      res.json({
        success: true,
        message: 'Daily attendance records retrieved successfully',
        data: dailyAttendance,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_n9ohqjeks().s[40]++;
      logger_1.default.error('Error getting daily attendance records', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_n9ohqjeks().s[41]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get daily attendance records',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Get all sessions for an attendance record
   */
  async getAttendanceRecordSessions(req, res) {
    /* istanbul ignore next */
    cov_n9ohqjeks().f[6]++;
    const requestId =
    /* istanbul ignore next */
    (cov_n9ohqjeks().s[42]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_n9ohqjeks().s[43]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[44]++, req.params);
      // First get the attendance record info
      const recordQuery =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[45]++, `
        SELECT 
          ar.id as attendance_record_id,
          ar.employee_id,
          ar.date,
          ar.overall_status,
          u.first_name,
          u.last_name,
          e.employee_id as employee_code,
          e.position,
          d.name as department_name
        FROM attendance_records ar
        JOIN employees e ON ar.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        WHERE ar.id = $1
      `);
      const recordResult =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[46]++, await (0, database_1.getPool)().query(recordQuery, [id]));
      /* istanbul ignore next */
      cov_n9ohqjeks().s[47]++;
      if (recordResult.rows.length === 0) {
        /* istanbul ignore next */
        cov_n9ohqjeks().b[14][0]++;
        cov_n9ohqjeks().s[48]++;
        res.status(404).json({
          success: false,
          message: 'Attendance record not found',
          requestId
        });
        /* istanbul ignore next */
        cov_n9ohqjeks().s[49]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_n9ohqjeks().b[14][1]++;
      }
      const record =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[50]++, recordResult.rows[0]);
      // Then get all sessions for this attendance record
      const sessionsQuery =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[51]++, `
        SELECT 
          s.id,
          s.session_type,
          s.clock_in,
          s.clock_out,
          s.created_at,
          s.selfie_image_url,
          s.calculated_hours,
          s.late_hours,
          s.status
        FROM attendance_sessions s
        WHERE s.attendance_record_id = $1
        ORDER BY s.created_at ASC
      `);
      const sessionsResult =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[52]++, await (0, database_1.getPool)().query(sessionsQuery, [id]));
      const attendanceDetail =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[53]++, {
        attendanceRecordId: record.attendance_record_id,
        employeeId: record.employee_id,
        employeeName: `${record.first_name} ${record.last_name}`,
        employeeCode: record.employee_code,
        position: record.position,
        departmentName: record.department_name,
        date: record.date,
        overallStatus: record.overall_status,
        sessions: sessionsResult.rows.map(session => {
          /* istanbul ignore next */
          cov_n9ohqjeks().f[7]++;
          cov_n9ohqjeks().s[54]++;
          return {
            id: session.id,
            sessionType: session.session_type,
            clockIn: session.clock_in,
            clockOut: session.clock_out,
            createdAt: session.created_at,
            selfieImagePath: session.selfie_image_url,
            calculatedHours:
            /* istanbul ignore next */
            (cov_n9ohqjeks().b[15][0]++, parseFloat(session.calculated_hours)) ||
            /* istanbul ignore next */
            (cov_n9ohqjeks().b[15][1]++, 0),
            lateHours:
            /* istanbul ignore next */
            (cov_n9ohqjeks().b[16][0]++, parseFloat(session.late_hours)) ||
            /* istanbul ignore next */
            (cov_n9ohqjeks().b[16][1]++, 0),
            status: session.status
          };
        })
      });
      /* istanbul ignore next */
      cov_n9ohqjeks().s[55]++;
      res.json({
        success: true,
        message: 'Attendance record sessions retrieved successfully',
        data: attendanceDetail,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_n9ohqjeks().s[56]++;
      logger_1.default.error('Error getting attendance record sessions', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_n9ohqjeks().s[57]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get attendance record sessions',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Get detailed attendance record by ID
   */
  async getAttendanceDetail(req, res) {
    /* istanbul ignore next */
    cov_n9ohqjeks().f[8]++;
    const requestId =
    /* istanbul ignore next */
    (cov_n9ohqjeks().s[58]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_n9ohqjeks().s[59]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[60]++, req.params);
      const query =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[61]++, `
        SELECT 
          s.id,
          s.session_type,
          s.clock_in,
          s.clock_out,
          s.created_at,
          s.selfie_image_url,
          s.regular_hours,
          s.overtime_hours,
          s.late_minutes,
          s.late_hours,
          ar.date,
          ar.employee_id,
          u.first_name,
          u.last_name,
          e.employee_id as employee_code,
          e.position,
          d.name as department_name
        FROM attendance_sessions s
        JOIN attendance_records ar ON s.attendance_record_id = ar.id
        JOIN employees e ON ar.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        WHERE s.id = $1
      `);
      const result =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[62]++, await (0, database_1.getPool)().query(query, [id]));
      /* istanbul ignore next */
      cov_n9ohqjeks().s[63]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_n9ohqjeks().b[17][0]++;
        cov_n9ohqjeks().s[64]++;
        res.status(404).json({
          success: false,
          message: 'Attendance record not found',
          requestId
        });
        /* istanbul ignore next */
        cov_n9ohqjeks().s[65]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_n9ohqjeks().b[17][1]++;
      }
      const row =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[66]++, result.rows[0]);
      const attendanceDetail =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[67]++, {
        id: row.id,
        sessionType: row.session_type,
        clockIn: row.clock_in,
        clockOut: row.clock_out,
        createdAt: row.created_at,
        selfieImageUrl: row.selfie_image_url,
        regularHours: row.regular_hours,
        overtimeHours: row.overtime_hours,
        lateMinutes: row.late_minutes,
        lateHours: row.late_hours,
        date: row.date,
        employeeId: row.employee_id,
        employeeName: `${row.first_name} ${row.last_name}`,
        employeeCode: row.employee_code,
        position: row.position,
        departmentName: row.department_name,
        action: row.clock_in ?
        /* istanbul ignore next */
        (cov_n9ohqjeks().b[18][0]++, 'Clock In') :
        /* istanbul ignore next */
        (cov_n9ohqjeks().b[18][1]++, 'Clock Out'),
        timestamp:
        /* istanbul ignore next */
        (cov_n9ohqjeks().b[19][0]++, row.clock_in) ||
        /* istanbul ignore next */
        (cov_n9ohqjeks().b[19][1]++, row.clock_out)
      });
      /* istanbul ignore next */
      cov_n9ohqjeks().s[68]++;
      res.json({
        success: true,
        message: 'Attendance detail retrieved successfully',
        data: attendanceDetail,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_n9ohqjeks().s[69]++;
      logger_1.default.error('Error getting attendance detail', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_n9ohqjeks().s[70]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get attendance detail',
        error: error.message,
        requestId
      });
    }
  }
  /**
   * Get detailed hours calculation for an attendance record
   */
  async getDetailedHoursCalculation(req, res) {
    /* istanbul ignore next */
    cov_n9ohqjeks().f[9]++;
    const requestId =
    /* istanbul ignore next */
    (cov_n9ohqjeks().s[71]++, (0, express_1.getRequestId)(req));
    /* istanbul ignore next */
    cov_n9ohqjeks().s[72]++;
    try {
      const {
        attendanceRecordId
      } =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[73]++, req.params);
      /* istanbul ignore next */
      cov_n9ohqjeks().s[74]++;
      if (!attendanceRecordId) {
        /* istanbul ignore next */
        cov_n9ohqjeks().b[20][0]++;
        cov_n9ohqjeks().s[75]++;
        res.status(400).json({
          success: false,
          message: 'Attendance record ID is required',
          requestId
        });
        /* istanbul ignore next */
        cov_n9ohqjeks().s[76]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_n9ohqjeks().b[20][1]++;
      }
      const detailedCalculation =
      /* istanbul ignore next */
      (cov_n9ohqjeks().s[77]++, await attendanceService_1.attendanceService.getDetailedHoursCalculation(attendanceRecordId));
      /* istanbul ignore next */
      cov_n9ohqjeks().s[78]++;
      res.json({
        success: true,
        message: 'Detailed hours calculation retrieved successfully',
        data: detailedCalculation,
        requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_n9ohqjeks().s[79]++;
      logger_1.default.error('Error getting detailed hours calculation', {
        error: error.message,
        requestId
      });
      /* istanbul ignore next */
      cov_n9ohqjeks().s[80]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get detailed hours calculation',
        error: error.message,
        requestId
      });
    }
  }
}
/* istanbul ignore next */
cov_n9ohqjeks().s[81]++;
exports.AttendanceController = AttendanceController;
/* istanbul ignore next */
cov_n9ohqjeks().s[82]++;
exports.attendanceController = new AttendanceController();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,