{"file":"/home/kim/tito/server/src/config/jwt.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/src/config/jwt.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\nimport { config } from './environment';\n\n// JWT payload interface\nexport interface JWTPayload {\n  userId: string;\n  email: string;\n  role: string;\n  tokenVersion: number;\n  iat?: number;\n  exp?: number;\n}\n\n// JWT refresh payload interface\nexport interface JWTRefreshPayload {\n  userId: string;\n  tokenVersion: number;\n  iat?: number;\n  exp?: number;\n}\n\n// Generate access token\nexport const generateAccessToken = (payload: Omit<JWTPayload, 'iat' | 'exp'>): string => {\n  return jwt.sign(payload, config.jwt.secret, { \n    expiresIn: '15m',\n    issuer: 'tito-hr-system',\n    audience: 'tito-hr-users'\n  });\n};\n\n// Generate refresh token\nexport const generateRefreshToken = (payload: Omit<JWTRefreshPayload, 'iat' | 'exp'>): string => {\n  return jwt.sign(payload, config.jwt.secret, { \n    expiresIn: '7d',\n    issuer: 'tito-hr-system',\n    audience: 'tito-hr-refresh'\n  });\n};\n\n// Verify access token\nexport const verifyAccessToken = (token: string): JWTPayload => {\n  try {\n    return jwt.verify(token, config.jwt.secret, {\n      issuer: 'tito-hr-system',\n      audience: 'tito-hr-users',\n    }) as JWTPayload;\n  } catch (error) {\n    if (error instanceof jwt.TokenExpiredError) {\n      throw new Error('Access token expired');\n    } else if (error instanceof jwt.JsonWebTokenError) {\n      throw new Error('Invalid access token');\n    } else {\n      throw new Error('Token verification failed');\n    }\n  }\n};\n\n// Verify refresh token\nexport const verifyRefreshToken = (token: string): JWTRefreshPayload => {\n  try {\n    return jwt.verify(token, config.jwt.secret, {\n      issuer: 'tito-hr-system',\n      audience: 'tito-hr-refresh',\n    }) as JWTRefreshPayload;\n  } catch (error) {\n    if (error instanceof jwt.TokenExpiredError) {\n      throw new Error('Refresh token expired');\n    } else if (error instanceof jwt.JsonWebTokenError) {\n      throw new Error('Invalid refresh token');\n    } else {\n      throw new Error('Token verification failed');\n    }\n  }\n};\n\n// Decode token without verification (for logging/debugging)\nexport const decodeToken = (token: string): JWTPayload | JWTRefreshPayload | null => {\n  try {\n    return jwt.decode(token) as JWTPayload | JWTRefreshPayload | null;\n  } catch (error) {\n    return null;\n  }\n};\n\n// Get token expiration time\nexport const getTokenExpiration = (token: string): Date | null => {\n  try {\n    const decoded = jwt.decode(token) as any;\n    if (decoded && decoded.exp) {\n      return new Date(decoded.exp * 1000);\n    }\n    return null;\n  } catch (error) {\n    return null;\n  }\n};\n\n// Check if token is expired\nexport const isTokenExpired = (token: string): boolean => {\n  try {\n    const decoded = jwt.decode(token) as any;\n    if (decoded && decoded.exp) {\n      return Date.now() >= decoded.exp * 1000;\n    }\n    return true;\n  } catch (error) {\n    return true;\n  }\n};\n\n// Generate token pair (access + refresh)\nexport const generateTokenPair = (\n  userId: string,\n  email: string,\n  role: string,\n  tokenVersion: number\n): { accessToken: string; refreshToken: string } => {\n  const accessToken = generateAccessToken({ userId, email, role, tokenVersion });\n  const refreshToken = generateRefreshToken({ userId, tokenVersion });\n\n  return { accessToken, refreshToken };\n};\n\n// Token utilities\nexport const extractTokenFromHeader = (authHeader: string | undefined): string | null => {\n  if (!authHeader) return null;\n  \n  const parts = authHeader.split(' ');\n  if (parts.length !== 2 || parts[0] !== 'Bearer') {\n    return null;\n  }\n  \n  return parts[1] || null;\n};\n\n// Validate token format\nexport const isValidTokenFormat = (token: string): boolean => {\n  // Basic JWT format validation (3 parts separated by dots)\n  const parts = token.split('.');\n  return parts.length === 3 && parts.every(part => part.length > 0);\n}; "],"version":3}