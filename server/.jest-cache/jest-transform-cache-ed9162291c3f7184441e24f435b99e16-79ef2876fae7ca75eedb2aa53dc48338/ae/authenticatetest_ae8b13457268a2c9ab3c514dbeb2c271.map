{"file":"/home/kim/tito/server/tests/unit/middleware/authenticate.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/unit/middleware/authenticate.test.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { authenticate, authenticateOptional, requireAuth } from '../../../src/middleware/auth/authenticate';\nimport { extractTokenFromHeader } from '../../../src/config/jwt';\nimport { authService } from '../../../src/services/auth/authService';\n\n// Mock the dependencies\njest.mock('../../../src/config/jwt');\njest.mock('../../../src/services/auth/authService');\n\nconst mockExtractTokenFromHeader = extractTokenFromHeader as jest.MockedFunction<typeof extractTokenFromHeader>;\nconst mockAuthService = authService as jest.Mocked<typeof authService>;\n\ndescribe('Authentication Middleware', () => {\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockNext: NextFunction;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Mock request object\n    mockRequest = {\n      method: 'GET',\n      headers: {\n        authorization: 'Bearer valid-token'\n      },\n      requestId: 'test-request-123',\n      user: undefined\n    };\n\n    // Mock response object\n    mockResponse = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis()\n    };\n\n    // Mock next function\n    mockNext = jest.fn();\n  });\n\n  describe('authenticate', () => {\n    it('should authenticate successfully with valid token', async () => {\n      // Arrange\n      const mockUser = {\n        id: 'user-123',\n        email: 'test@example.com',\n        role: 'employee',\n        firstName: 'John',\n        lastName: 'Doe'\n      };\n\n      mockExtractTokenFromHeader.mockReturnValue('valid-token');\n      mockAuthService.validateToken.mockResolvedValue({\n        success: true,\n        message: 'Token is valid',\n        data: { user: mockUser }\n      });\n\n      // Act\n      await authenticate(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockExtractTokenFromHeader).toHaveBeenCalledWith('Bearer valid-token');\n      expect(mockAuthService.validateToken).toHaveBeenCalledWith('valid-token');\n      expect(mockRequest.user).toEqual(mockUser);\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n      expect(mockResponse.json).not.toHaveBeenCalled();\n    });\n\n    it('should handle CORS preflight requests', async () => {\n      // Arrange\n      mockRequest.method = 'OPTIONS';\n\n      // Act\n      await authenticate(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockExtractTokenFromHeader).not.toHaveBeenCalled();\n      expect(mockAuthService.validateToken).not.toHaveBeenCalled();\n    });\n\n    it('should return 401 for missing token', async () => {\n      // Arrange\n      mockExtractTokenFromHeader.mockReturnValue(null);\n\n      // Act\n      await authenticate(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Access token required',\n        error: 'MISSING_TOKEN',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should return 401 for invalid token', async () => {\n      // Arrange\n      mockExtractTokenFromHeader.mockReturnValue('invalid-token');\n      mockAuthService.validateToken.mockResolvedValue({\n        success: false,\n        message: 'Token is invalid or expired',\n        error: 'INVALID_TOKEN'\n      });\n\n      // Act\n      await authenticate(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Token is invalid or expired',\n        error: 'INVALID_TOKEN',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should return 401 for expired token', async () => {\n      // Arrange\n      mockExtractTokenFromHeader.mockReturnValue('expired-token');\n      mockAuthService.validateToken.mockResolvedValue({\n        success: false,\n        message: 'Token has expired',\n        error: 'TOKEN_EXPIRED'\n      });\n\n      // Act\n      await authenticate(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Token has expired',\n        error: 'TOKEN_EXPIRED',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should handle service errors gracefully', async () => {\n      // Arrange\n      mockExtractTokenFromHeader.mockReturnValue('valid-token');\n      mockAuthService.validateToken.mockRejectedValue(new Error('Service error'));\n\n      // Act\n      await authenticate(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Authentication failed',\n        error: 'AUTHENTICATION_FAILED',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should handle missing requestId gracefully', async () => {\n      // Arrange\n      mockRequest.requestId = undefined;\n      mockExtractTokenFromHeader.mockReturnValue(null);\n\n      // Act\n      await authenticate(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Access token required',\n        error: 'MISSING_TOKEN',\n        timestamp: expect.any(String),\n        requestId: 'unknown'\n      });\n    });\n  });\n\n  describe('authenticateOptional', () => {\n    it('should set user info when valid token is provided', async () => {\n      // Arrange\n      const mockUser = {\n        id: 'user-123',\n        email: 'test@example.com',\n        role: 'employee',\n        firstName: 'John',\n        lastName: 'Doe'\n      };\n\n      mockExtractTokenFromHeader.mockReturnValue('valid-token');\n      mockAuthService.validateToken.mockResolvedValue({\n        success: true,\n        message: 'Token is valid',\n        data: { user: mockUser }\n      });\n\n      // Act\n      await authenticateOptional(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockRequest.user).toEqual(mockUser);\n      expect(mockNext).toHaveBeenCalled();\n    });\n\n    it('should continue without authentication when no token is provided', async () => {\n      // Arrange\n      mockExtractTokenFromHeader.mockReturnValue(null);\n\n      // Act\n      await authenticateOptional(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockRequest.user).toBeUndefined();\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockAuthService.validateToken).not.toHaveBeenCalled();\n    });\n\n    it('should continue without authentication when token is invalid', async () => {\n      // Arrange\n      mockExtractTokenFromHeader.mockReturnValue('invalid-token');\n      mockAuthService.validateToken.mockResolvedValue({\n        success: false,\n        message: 'Token is invalid',\n        error: 'INVALID_TOKEN'\n      });\n\n      // Act\n      await authenticateOptional(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockRequest.user).toBeUndefined();\n      expect(mockNext).toHaveBeenCalled();\n    });\n\n    it('should continue without authentication when service throws error', async () => {\n      // Arrange\n      mockExtractTokenFromHeader.mockReturnValue('valid-token');\n      mockAuthService.validateToken.mockRejectedValue(new Error('Service error'));\n\n      // Act\n      await authenticateOptional(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockRequest.user).toBeUndefined();\n      expect(mockNext).toHaveBeenCalled();\n    });\n  });\n\n  describe('requireAuth', () => {\n    it('should call next when user is authenticated', () => {\n      // Arrange\n      mockRequest.user = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: 'employee',\n        tokenVersion: 1\n      };\n\n      // Act\n      requireAuth(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n    });\n\n    it('should return 401 when user is not authenticated', () => {\n      // Arrange\n      mockRequest.user = undefined;\n\n      // Act\n      requireAuth(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Authentication required',\n        error: 'AUTHENTICATION_REQUIRED',\n        timestamp: expect.any(String),\n        requestId: 'test-request-123'\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should handle missing requestId gracefully', () => {\n      // Arrange\n      mockRequest.user = undefined;\n      mockRequest.requestId = undefined;\n\n      // Act\n      requireAuth(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Authentication required',\n        error: 'AUTHENTICATION_REQUIRED',\n        timestamp: expect.any(String),\n        requestId: 'unknown'\n      });\n    });\n  });\n});\n"],"version":3}