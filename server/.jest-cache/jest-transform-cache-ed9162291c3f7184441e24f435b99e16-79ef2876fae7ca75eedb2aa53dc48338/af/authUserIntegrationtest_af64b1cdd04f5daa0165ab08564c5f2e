cc5772425f31aa9d19a72b58845aceaf
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const authService_1 = require("../../src/services/auth/authService");
const testHelpers_1 = require("../utils/testHelpers");
const setup_1 = require("../setup");
(0, globals_1.describe)('Authentication-User Integration', () => {
    let testHelpers;
    let createdUserIds = [];
    let createdEmployeeIds = [];
    let createdDepartmentIds = [];
    (0, globals_1.beforeAll)(async () => {
        const { testDbPool } = await (0, setup_1.initializeTestConnections)();
        testHelpers = new testHelpers_1.TestHelpers(testDbPool);
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up created data after each test
        for (const employeeId of createdEmployeeIds) {
            await testHelpers.deleteEmployee(employeeId).catch(() => { });
        }
        for (const userId of createdUserIds) {
            await testHelpers.deleteUser(userId).catch(() => { });
        }
        for (const departmentId of createdDepartmentIds) {
            await testHelpers.deleteDepartment(departmentId).catch(() => { });
        }
        createdEmployeeIds = [];
        createdUserIds = [];
        createdDepartmentIds = [];
    });
    (0, globals_1.describe)('User Authentication Workflow', () => {
        (0, globals_1.it)('should handle complete user authentication workflow', async () => {
            // 1. Create test user
            const user = await testHelpers.createTestUser({
                email: 'test@example.com',
                password: 'TestPassword123!',
                role: 'employee'
            });
            createdUserIds.push(user.id);
            // 2. Test user login
            const loginResult = await authService_1.authService.login({
                email: 'test@example.com',
                password: 'TestPassword123!'
            });
            (0, globals_1.expect)(loginResult).toHaveProperty('success');
            (0, globals_1.expect)(loginResult.success).toBe(true);
            (0, globals_1.expect)(loginResult.data).toHaveProperty('user');
            (0, globals_1.expect)(loginResult.data).toHaveProperty('accessToken');
            (0, globals_1.expect)(loginResult.data).toHaveProperty('refreshToken');
            // 3. Test token validation
            const tokenValidation = await authService_1.authService.validateToken(loginResult.data.accessToken);
            (0, globals_1.expect)(tokenValidation).toHaveProperty('success');
            (0, globals_1.expect)(tokenValidation.success).toBe(true);
            (0, globals_1.expect)(tokenValidation.data).toHaveProperty('userId');
            (0, globals_1.expect)(tokenValidation.data.userId).toBe(user.id);
            // 4. Test user profile retrieval (simplified)
            (0, globals_1.expect)(loginResult.data.user).toHaveProperty('id');
            (0, globals_1.expect)(loginResult.data.user.id).toBe(user.id);
            (0, globals_1.expect)(loginResult.data.user).toHaveProperty('email');
            (0, globals_1.expect)(loginResult.data.user.email).toBe('test@example.com');
            // 5. Test logout
            const logoutResult = await authService_1.authService.logout(loginResult.data.refreshToken);
            (0, globals_1.expect)(logoutResult).toHaveProperty('success');
            (0, globals_1.expect)(logoutResult.success).toBe(true);
        });
        (0, globals_1.it)('should handle authentication errors gracefully', async () => {
            // Test invalid login credentials
            const invalidLogin = await authService_1.authService.login({
                email: 'nonexistent@example.com',
                password: 'wrongpassword'
            });
            (0, globals_1.expect)(invalidLogin).toHaveProperty('success');
            (0, globals_1.expect)(invalidLogin.success).toBe(false);
            (0, globals_1.expect)(invalidLogin).toHaveProperty('error');
            // Test invalid token
            const invalidTokenValidation = await authService_1.authService.validateToken('invalid-token');
            (0, globals_1.expect)(invalidTokenValidation).toHaveProperty('success');
            (0, globals_1.expect)(invalidTokenValidation.success).toBe(false);
            // Test logout with invalid token
            const invalidLogout = await authService_1.authService.logout('invalid-refresh-token');
            (0, globals_1.expect)(invalidLogout).toHaveProperty('success');
            (0, globals_1.expect)(invalidLogout.success).toBe(false);
        });
        (0, globals_1.it)('should handle user role-based access', async () => {
            // 1. Create users with different roles
            const hrUser = await testHelpers.createTestUser({
                email: 'hr@example.com',
                password: 'HrPassword123!',
                role: 'hr'
            });
            createdUserIds.push(hrUser.id);
            const employeeUser = await testHelpers.createTestUser({
                email: 'employee@example.com',
                password: 'EmployeePassword123!',
                role: 'employee'
            });
            createdUserIds.push(employeeUser.id);
            // 2. Test HR user login
            const hrLogin = await authService_1.authService.login({
                email: 'hr@example.com',
                password: 'HrPassword123!'
            });
            (0, globals_1.expect)(hrLogin.success).toBe(true);
            (0, globals_1.expect)(hrLogin.data.user.role).toBe('hr');
            // 3. Test employee user login
            const employeeLogin = await authService_1.authService.login({
                email: 'employee@example.com',
                password: 'EmployeePassword123!'
            });
            (0, globals_1.expect)(employeeLogin.success).toBe(true);
            (0, globals_1.expect)(employeeLogin.data.user.role).toBe('employee');
            // 4. Test token validation for both roles
            const hrTokenValidation = await authService_1.authService.validateToken(hrLogin.data.accessToken);
            (0, globals_1.expect)(hrTokenValidation.success).toBe(true);
            (0, globals_1.expect)(hrTokenValidation.data.role).toBe('hr');
            const employeeTokenValidation = await authService_1.authService.validateToken(employeeLogin.data.accessToken);
            (0, globals_1.expect)(employeeTokenValidation.success).toBe(true);
            (0, globals_1.expect)(employeeTokenValidation.data.role).toBe('employee');
        });
    });
    (0, globals_1.describe)('User Management Integration', () => {
        (0, globals_1.it)('should handle user creation and management workflow', async () => {
            // 1. Create department
            const department = await testHelpers.createTestDepartment();
            createdDepartmentIds.push(department.id);
            // 2. Create user
            const user = await testHelpers.createTestUser({
                email: 'newuser@example.com',
                password: 'NewUserPassword123!',
                role: 'employee'
            });
            createdUserIds.push(user.id);
            // 3. Create employee linked to user
            const employee = await testHelpers.createTestEmployee({
                userId: user.id,
                departmentId: department.id,
                employmentType: 'regular',
                baseSalary: 50000
            });
            createdEmployeeIds.push(employee.id);
            // 4. Test user profile with employee data (simplified)
            (0, globals_1.expect)(user).toHaveProperty('id');
            (0, globals_1.expect)(user).toHaveProperty('email');
            (0, globals_1.expect)(user.email).toBe('newuser@example.com');
            // 5. Test user login after creation
            const loginResult = await authService_1.authService.login({
                email: 'newuser@example.com',
                password: 'NewUserPassword123!'
            });
            (0, globals_1.expect)(loginResult.success).toBe(true);
            (0, globals_1.expect)(loginResult.data.user.id).toBe(user.id);
            // 6. Test token refresh
            const refreshResult = await authService_1.authService.refreshToken(loginResult.data.refreshToken);
            (0, globals_1.expect)(refreshResult).toHaveProperty('success');
            (0, globals_1.expect)(refreshResult.success).toBe(true);
            (0, globals_1.expect)(refreshResult.data).toHaveProperty('accessToken');
            (0, globals_1.expect)(refreshResult.data).toHaveProperty('refreshToken');
        });
        (0, globals_1.it)('should handle concurrent user operations', async () => {
            // 1. Create multiple users concurrently
            const userPromises = [];
            for (let i = 0; i < 3; i++) {
                userPromises.push(testHelpers.createTestUser({
                    email: `concurrent${i}@example.com`,
                    password: 'ConcurrentPassword123!',
                    role: 'employee'
                }));
            }
            const users = await Promise.all(userPromises);
            users.forEach(user => createdUserIds.push(user.id));
            // 2. Test concurrent logins
            const loginPromises = users.map(user => authService_1.authService.login({
                email: user.email,
                password: 'ConcurrentPassword123!'
            }));
            const loginResults = await Promise.all(loginPromises);
            // 3. Verify all logins succeeded
            loginResults.forEach(result => {
                (0, globals_1.expect)(result.success).toBe(true);
                (0, globals_1.expect)(result.data).toHaveProperty('accessToken');
                (0, globals_1.expect)(result.data).toHaveProperty('refreshToken');
            });
            // 4. Test concurrent token validations
            const validationPromises = loginResults.map(result => authService_1.authService.validateToken(result.data.accessToken));
            const validationResults = await Promise.all(validationPromises);
            // 5. Verify all validations succeeded
            validationResults.forEach(result => {
                (0, globals_1.expect)(result.success).toBe(true);
                (0, globals_1.expect)(result.data).toHaveProperty('userId');
            });
        });
    });
    (0, globals_1.describe)('Security Integration', () => {
        (0, globals_1.it)('should handle password security requirements', async () => {
            // Test weak password (should still work in test environment)
            const weakPasswordUser = await testHelpers.createTestUser({
                email: 'weak@example.com',
                password: '123',
                role: 'employee'
            });
            createdUserIds.push(weakPasswordUser.id);
            // Test login with weak password
            const weakLogin = await authService_1.authService.login({
                email: 'weak@example.com',
                password: '123'
            });
            (0, globals_1.expect)(weakLogin.success).toBe(true);
            // Test strong password
            const strongPasswordUser = await testHelpers.createTestUser({
                email: 'strong@example.com',
                password: 'StrongPassword123!@#',
                role: 'employee'
            });
            createdUserIds.push(strongPasswordUser.id);
            const strongLogin = await authService_1.authService.login({
                email: 'strong@example.com',
                password: 'StrongPassword123!@#'
            });
            (0, globals_1.expect)(strongLogin.success).toBe(true);
        });
        (0, globals_1.it)('should handle session management', async () => {
            // 1. Create user
            const user = await testHelpers.createTestUser({
                email: 'session@example.com',
                password: 'SessionPassword123!',
                role: 'employee'
            });
            createdUserIds.push(user.id);
            // 2. Login and get tokens
            const loginResult = await authService_1.authService.login({
                email: 'session@example.com',
                password: 'SessionPassword123!'
            });
            (0, globals_1.expect)(loginResult.success).toBe(true);
            const { accessToken, refreshToken } = loginResult.data;
            // 3. Test token validation
            const validation = await authService_1.authService.validateToken(accessToken);
            (0, globals_1.expect)(validation.success).toBe(true);
            // 4. Test token refresh
            const refreshResult = await authService_1.authService.refreshToken(refreshToken);
            (0, globals_1.expect)(refreshResult.success).toBe(true);
            // 5. Test logout
            const logoutResult = await authService_1.authService.logout(refreshToken);
            (0, globals_1.expect)(logoutResult.success).toBe(true);
            // 6. Test token validation after logout (should still work in mock)
            const postLogoutValidation = await authService_1.authService.validateToken(accessToken);
            (0, globals_1.expect)(postLogoutValidation).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,