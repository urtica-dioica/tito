{"file":"/home/kim/tito/server/tests/integration/authUserIntegration.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/integration/authUserIntegration.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterEach } from '@jest/globals';\nimport { authService } from '../../src/services/auth/authService';\nimport { TestHelpers } from '../utils/testHelpers';\nimport { initializeTestConnections } from '../setup';\n\ndescribe('Authentication-User Integration', () => {\n  let testHelpers: TestHelpers;\n  let createdUserIds: string[] = [];\n  let createdEmployeeIds: string[] = [];\n  let createdDepartmentIds: string[] = [];\n\n  beforeAll(async () => {\n    const { testDbPool } = await initializeTestConnections();\n    testHelpers = new TestHelpers(testDbPool);\n  });\n\n  afterEach(async () => {\n    // Clean up created data after each test\n    for (const employeeId of createdEmployeeIds) { \n      await testHelpers.deleteEmployee(employeeId).catch(() => {}); \n    }\n    for (const userId of createdUserIds) { \n      await testHelpers.deleteUser(userId).catch(() => {}); \n    }\n    for (const departmentId of createdDepartmentIds) { \n      await testHelpers.deleteDepartment(departmentId).catch(() => {}); \n    }\n    createdEmployeeIds = [];\n    createdUserIds = [];\n    createdDepartmentIds = [];\n  });\n\n  describe('User Authentication Workflow', () => {\n    it('should handle complete user authentication workflow', async () => {\n      // 1. Create test user\n      const user = await testHelpers.createTestUser({\n        email: 'test@example.com',\n        password: 'TestPassword123!',\n        role: 'employee'\n      });\n      createdUserIds.push(user.id);\n\n      // 2. Test user login\n      const loginResult = await authService.login({\n        email: 'test@example.com',\n        password: 'TestPassword123!'\n      });\n      expect(loginResult).toHaveProperty('success');\n      expect(loginResult.success).toBe(true);\n      expect(loginResult.data).toHaveProperty('user');\n      expect(loginResult.data).toHaveProperty('accessToken');\n      expect(loginResult.data).toHaveProperty('refreshToken');\n\n      // 3. Test token validation\n      const tokenValidation = await authService.validateToken(loginResult.data.accessToken);\n      expect(tokenValidation).toHaveProperty('success');\n      expect(tokenValidation.success).toBe(true);\n      expect(tokenValidation.data).toHaveProperty('userId');\n      expect(tokenValidation.data.userId).toBe(user.id);\n\n      // 4. Test user profile retrieval (simplified)\n      expect(loginResult.data.user).toHaveProperty('id');\n      expect(loginResult.data.user.id).toBe(user.id);\n      expect(loginResult.data.user).toHaveProperty('email');\n      expect(loginResult.data.user.email).toBe('test@example.com');\n\n      // 5. Test logout\n      const logoutResult = await authService.logout(loginResult.data.refreshToken);\n      expect(logoutResult).toHaveProperty('success');\n      expect(logoutResult.success).toBe(true);\n    });\n\n    it('should handle authentication errors gracefully', async () => {\n      // Test invalid login credentials\n      const invalidLogin = await authService.login({\n        email: 'nonexistent@example.com',\n        password: 'wrongpassword'\n      });\n      expect(invalidLogin).toHaveProperty('success');\n      expect(invalidLogin.success).toBe(false);\n      expect(invalidLogin).toHaveProperty('error');\n\n      // Test invalid token\n      const invalidTokenValidation = await authService.validateToken('invalid-token');\n      expect(invalidTokenValidation).toHaveProperty('success');\n      expect(invalidTokenValidation.success).toBe(false);\n\n      // Test logout with invalid token\n      const invalidLogout = await authService.logout('invalid-refresh-token');\n      expect(invalidLogout).toHaveProperty('success');\n      expect(invalidLogout.success).toBe(false);\n    });\n\n    it('should handle user role-based access', async () => {\n      // 1. Create users with different roles\n      const hrUser = await testHelpers.createTestUser({\n        email: 'hr@example.com',\n        password: 'HrPassword123!',\n        role: 'hr'\n      });\n      createdUserIds.push(hrUser.id);\n\n      const employeeUser = await testHelpers.createTestUser({\n        email: 'employee@example.com',\n        password: 'EmployeePassword123!',\n        role: 'employee'\n      });\n      createdUserIds.push(employeeUser.id);\n\n      // 2. Test HR user login\n      const hrLogin = await authService.login({\n        email: 'hr@example.com',\n        password: 'HrPassword123!'\n      });\n      expect(hrLogin.success).toBe(true);\n      expect(hrLogin.data.user.role).toBe('hr');\n\n      // 3. Test employee user login\n      const employeeLogin = await authService.login({\n        email: 'employee@example.com',\n        password: 'EmployeePassword123!'\n      });\n      expect(employeeLogin.success).toBe(true);\n      expect(employeeLogin.data.user.role).toBe('employee');\n\n      // 4. Test token validation for both roles\n      const hrTokenValidation = await authService.validateToken(hrLogin.data.accessToken);\n      expect(hrTokenValidation.success).toBe(true);\n      expect(hrTokenValidation.data.role).toBe('hr');\n\n      const employeeTokenValidation = await authService.validateToken(employeeLogin.data.accessToken);\n      expect(employeeTokenValidation.success).toBe(true);\n      expect(employeeTokenValidation.data.role).toBe('employee');\n    });\n  });\n\n  describe('User Management Integration', () => {\n    it('should handle user creation and management workflow', async () => {\n      // 1. Create department\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n\n      // 2. Create user\n      const user = await testHelpers.createTestUser({\n        email: 'newuser@example.com',\n        password: 'NewUserPassword123!',\n        role: 'employee'\n      });\n      createdUserIds.push(user.id);\n\n      // 3. Create employee linked to user\n      const employee = await testHelpers.createTestEmployee({\n        userId: user.id,\n        departmentId: department.id,\n        employmentType: 'regular',\n        baseSalary: 50000\n      });\n      createdEmployeeIds.push(employee.id);\n\n      // 4. Test user profile with employee data (simplified)\n      expect(user).toHaveProperty('id');\n      expect(user).toHaveProperty('email');\n      expect(user.email).toBe('newuser@example.com');\n\n      // 5. Test user login after creation\n      const loginResult = await authService.login({\n        email: 'newuser@example.com',\n        password: 'NewUserPassword123!'\n      });\n      expect(loginResult.success).toBe(true);\n      expect(loginResult.data.user.id).toBe(user.id);\n\n      // 6. Test token refresh\n      const refreshResult = await authService.refreshToken(loginResult.data.refreshToken);\n      expect(refreshResult).toHaveProperty('success');\n      expect(refreshResult.success).toBe(true);\n      expect(refreshResult.data).toHaveProperty('accessToken');\n      expect(refreshResult.data).toHaveProperty('refreshToken');\n    });\n\n    it('should handle concurrent user operations', async () => {\n      // 1. Create multiple users concurrently\n      const userPromises = [];\n      for (let i = 0; i < 3; i++) {\n        userPromises.push(\n          testHelpers.createTestUser({\n            email: `concurrent${i}@example.com`,\n            password: 'ConcurrentPassword123!',\n            role: 'employee'\n          })\n        );\n      }\n\n      const users = await Promise.all(userPromises);\n      users.forEach(user => createdUserIds.push(user.id));\n\n      // 2. Test concurrent logins\n      const loginPromises = users.map(user => \n        authService.login({\n          email: user.email,\n          password: 'ConcurrentPassword123!'\n        })\n      );\n\n      const loginResults = await Promise.all(loginPromises);\n\n      // 3. Verify all logins succeeded\n      loginResults.forEach(result => {\n        expect(result.success).toBe(true);\n        expect(result.data).toHaveProperty('accessToken');\n        expect(result.data).toHaveProperty('refreshToken');\n      });\n\n      // 4. Test concurrent token validations\n      const validationPromises = loginResults.map(result => \n        authService.validateToken(result.data.accessToken)\n      );\n\n      const validationResults = await Promise.all(validationPromises);\n\n      // 5. Verify all validations succeeded\n      validationResults.forEach(result => {\n        expect(result.success).toBe(true);\n        expect(result.data).toHaveProperty('userId');\n      });\n    });\n  });\n\n  describe('Security Integration', () => {\n    it('should handle password security requirements', async () => {\n      // Test weak password (should still work in test environment)\n      const weakPasswordUser = await testHelpers.createTestUser({\n        email: 'weak@example.com',\n        password: '123',\n        role: 'employee'\n      });\n      createdUserIds.push(weakPasswordUser.id);\n\n      // Test login with weak password\n      const weakLogin = await authService.login({\n        email: 'weak@example.com',\n        password: '123'\n      });\n      expect(weakLogin.success).toBe(true);\n\n      // Test strong password\n      const strongPasswordUser = await testHelpers.createTestUser({\n        email: 'strong@example.com',\n        password: 'StrongPassword123!@#',\n        role: 'employee'\n      });\n      createdUserIds.push(strongPasswordUser.id);\n\n      const strongLogin = await authService.login({\n        email: 'strong@example.com',\n        password: 'StrongPassword123!@#'\n      });\n      expect(strongLogin.success).toBe(true);\n    });\n\n    it('should handle session management', async () => {\n      // 1. Create user\n      const user = await testHelpers.createTestUser({\n        email: 'session@example.com',\n        password: 'SessionPassword123!',\n        role: 'employee'\n      });\n      createdUserIds.push(user.id);\n\n      // 2. Login and get tokens\n      const loginResult = await authService.login({\n        email: 'session@example.com',\n        password: 'SessionPassword123!'\n      });\n      expect(loginResult.success).toBe(true);\n\n      const { accessToken, refreshToken } = loginResult.data;\n\n      // 3. Test token validation\n      const validation = await authService.validateToken(accessToken);\n      expect(validation.success).toBe(true);\n\n      // 4. Test token refresh\n      const refreshResult = await authService.refreshToken(refreshToken);\n      expect(refreshResult.success).toBe(true);\n\n      // 5. Test logout\n      const logoutResult = await authService.logout(refreshToken);\n      expect(logoutResult.success).toBe(true);\n\n      // 6. Test token validation after logout (should still work in mock)\n      const postLogoutValidation = await authService.validateToken(accessToken);\n      expect(postLogoutValidation).toBeDefined();\n    });\n  });\n});\n"],"version":3}