9536cf7d24045c8642dc5fbb93e297e7
"use strict";

/* istanbul ignore next */
function cov_cf7v579xf() {
  var path = "/home/kim/tito/server/src/services/hr/departmentService.ts";
  var hash = "9864007a20fc4728fbbee7c93d673e7188c244ab";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/hr/departmentService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 35
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 58
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 48
        }
      },
      "7": {
        start: {
          line: 10,
          column: 23
        },
        end: {
          line: 10,
          column: 55
        }
      },
      "8": {
        start: {
          line: 11,
          column: 23
        },
        end: {
          line: 11,
          column: 55
        }
      },
      "9": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 63
        }
      },
      "10": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 51
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 66
        }
      },
      "12": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 48
        }
      },
      "13": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "14": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "15": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "16": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 40
        }
      },
      "17": {
        start: {
          line: 28,
          column: 39
        },
        end: {
          line: 28,
          column: 87
        }
      },
      "18": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 31,
          column: 13
        }
      },
      "19": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 66
        }
      },
      "20": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "21": {
        start: {
          line: 34,
          column: 39
        },
        end: {
          line: 34,
          column: 95
        }
      },
      "22": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 37,
          column: 17
        }
      },
      "23": {
        start: {
          line: 36,
          column: 20
        },
        end: {
          line: 36,
          column: 70
        }
      },
      "24": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 40,
          column: 17
        }
      },
      "25": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 69
        }
      },
      "26": {
        start: {
          line: 42,
          column: 43
        },
        end: {
          line: 42,
          column: 117
        }
      },
      "27": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 45,
          column: 17
        }
      },
      "28": {
        start: {
          line: 44,
          column: 20
        },
        end: {
          line: 44,
          column: 94
        }
      },
      "29": {
        start: {
          line: 48,
          column: 35
        },
        end: {
          line: 50,
          column: 13
        }
      },
      "30": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "31": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 62
        }
      },
      "32": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "33": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 83
        }
      },
      "34": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "35": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 57
        }
      },
      "36": {
        start: {
          line: 60,
          column: 31
        },
        end: {
          line: 60,
          column: 90
        }
      },
      "37": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 41
        }
      },
      "38": {
        start: {
          line: 63,
          column: 39
        },
        end: {
          line: 63,
          column: 86
        }
      },
      "39": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "40": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 38
        }
      },
      "41": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 43
        }
      },
      "42": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 98
        }
      },
      "43": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 24
        }
      },
      "44": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 29
        }
      },
      "45": {
        start: {
          line: 83,
          column: 22
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "46": {
        start: {
          line: 103,
          column: 23
        },
        end: {
          line: 103,
          column: 83
        }
      },
      "47": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "48": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 52
        }
      },
      "49": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 107,
          column: 34
        }
      },
      "50": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 123,
          column: 10
        }
      },
      "51": {
        start: {
          line: 129,
          column: 135
        },
        end: {
          line: 129,
          column: 141
        }
      },
      "52": {
        start: {
          line: 131,
          column: 21
        },
        end: {
          line: 131,
          column: 34
        }
      },
      "53": {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 132,
          column: 40
        }
      },
      "54": {
        start: {
          line: 133,
          column: 23
        },
        end: {
          line: 133,
          column: 41
        }
      },
      "55": {
        start: {
          line: 135,
          column: 32
        },
        end: {
          line: 135,
          column: 34
        }
      },
      "56": {
        start: {
          line: 136,
          column: 28
        },
        end: {
          line: 136,
          column: 30
        }
      },
      "57": {
        start: {
          line: 137,
          column: 25
        },
        end: {
          line: 137,
          column: 26
        }
      },
      "58": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "59": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 104
        }
      },
      "60": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 44
        }
      },
      "61": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 25
        }
      },
      "62": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "63": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 65
        }
      },
      "64": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 39
        }
      },
      "65": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 25
        }
      },
      "66": {
        start: {
          line: 148,
          column: 28
        },
        end: {
          line: 148,
          column: 102
        }
      },
      "67": {
        start: {
          line: 150,
          column: 34
        },
        end: {
          line: 150,
          column: 74
        }
      },
      "68": {
        start: {
          line: 151,
          column: 34
        },
        end: {
          line: 151,
          column: 49
        }
      },
      "69": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "70": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 34
        }
      },
      "71": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "72": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 31
        }
      },
      "73": {
        start: {
          line: 159,
          column: 29
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "74": {
        start: {
          line: 164,
          column: 30
        },
        end: {
          line: 164,
          column: 68
        }
      },
      "75": {
        start: {
          line: 166,
          column: 27
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "76": {
        start: {
          line: 171,
          column: 28
        },
        end: {
          line: 171,
          column: 90
        }
      },
      "77": {
        start: {
          line: 172,
          column: 22
        },
        end: {
          line: 172,
          column: 57
        }
      },
      "78": {
        start: {
          line: 174,
          column: 26
        },
        end: {
          line: 195,
          column: 5
        }
      },
      "79": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 40
        }
      },
      "80": {
        start: {
          line: 197,
          column: 23
        },
        end: {
          line: 197,
          column: 84
        }
      },
      "81": {
        start: {
          line: 198,
          column: 28
        },
        end: {
          line: 213,
          column: 11
        }
      },
      "82": {
        start: {
          line: 198,
          column: 52
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "83": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 220,
          column: 10
        }
      },
      "84": {
        start: {
          line: 226,
          column: 21
        },
        end: {
          line: 226,
          column: 46
        }
      },
      "85": {
        start: {
          line: 227,
          column: 23
        },
        end: {
          line: 227,
          column: 43
        }
      },
      "86": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "87": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 40
        }
      },
      "88": {
        start: {
          line: 231,
          column: 38
        },
        end: {
          line: 231,
          column: 84
        }
      },
      "89": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "90": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 56
        }
      },
      "91": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 241,
          column: 13
        }
      },
      "92": {
        start: {
          line: 237,
          column: 43
        },
        end: {
          line: 237,
          column: 91
        }
      },
      "93": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 240,
          column: 17
        }
      },
      "94": {
        start: {
          line: 239,
          column: 20
        },
        end: {
          line: 239,
          column: 70
        }
      },
      "95": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "96": {
        start: {
          line: 244,
          column: 39
        },
        end: {
          line: 244,
          column: 95
        }
      },
      "97": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 247,
          column: 17
        }
      },
      "98": {
        start: {
          line: 246,
          column: 20
        },
        end: {
          line: 246,
          column: 70
        }
      },
      "99": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 250,
          column: 17
        }
      },
      "100": {
        start: {
          line: 249,
          column: 20
        },
        end: {
          line: 249,
          column: 69
        }
      },
      "101": {
        start: {
          line: 252,
          column: 43
        },
        end: {
          line: 252,
          column: 117
        }
      },
      "102": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 255,
          column: 17
        }
      },
      "103": {
        start: {
          line: 254,
          column: 20
        },
        end: {
          line: 254,
          column: 94
        }
      },
      "104": {
        start: {
          line: 258,
          column: 30
        },
        end: {
          line: 263,
          column: 13
        }
      },
      "105": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 81
        }
      },
      "106": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 41
        }
      },
      "107": {
        start: {
          line: 267,
          column: 38
        },
        end: {
          line: 267,
          column: 84
        }
      },
      "108": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 271,
          column: 15
        }
      },
      "109": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 37
        }
      },
      "110": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 43
        }
      },
      "111": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 112
        }
      },
      "112": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 24
        }
      },
      "113": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 29
        }
      },
      "114": {
        start: {
          line: 287,
          column: 21
        },
        end: {
          line: 287,
          column: 46
        }
      },
      "115": {
        start: {
          line: 288,
          column: 23
        },
        end: {
          line: 288,
          column: 43
        }
      },
      "116": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "117": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 40
        }
      },
      "118": {
        start: {
          line: 292,
          column: 31
        },
        end: {
          line: 292,
          column: 77
        }
      },
      "119": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 295,
          column: 13
        }
      },
      "120": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 56
        }
      },
      "121": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 299,
          column: 13
        }
      },
      "122": {
        start: {
          line: 298,
          column: 16
        },
        end: {
          line: 298,
          column: 82
        }
      },
      "123": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 92
        }
      },
      "124": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 41
        }
      },
      "125": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 305,
          column: 15
        }
      },
      "126": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 43
        }
      },
      "127": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 106
        }
      },
      "128": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 24
        }
      },
      "129": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 29
        }
      },
      "130": {
        start: {
          line: 320,
          column: 21
        },
        end: {
          line: 320,
          column: 46
        }
      },
      "131": {
        start: {
          line: 321,
          column: 23
        },
        end: {
          line: 321,
          column: 43
        }
      },
      "132": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "133": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 40
        }
      },
      "134": {
        start: {
          line: 325,
          column: 31
        },
        end: {
          line: 325,
          column: 77
        }
      },
      "135": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 328,
          column: 13
        }
      },
      "136": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 56
        }
      },
      "137": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 332,
          column: 13
        }
      },
      "138": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 82
        }
      },
      "139": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 336,
          column: 13
        }
      },
      "140": {
        start: {
          line: 335,
          column: 16
        },
        end: {
          line: 335,
          column: 132
        }
      },
      "141": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 70
        }
      },
      "142": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 41
        }
      },
      "143": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 342,
          column: 15
        }
      },
      "144": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 43
        }
      },
      "145": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 111
        }
      },
      "146": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 347,
          column: 24
        }
      },
      "147": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 29
        }
      },
      "148": {
        start: {
          line: 357,
          column: 21
        },
        end: {
          line: 357,
          column: 46
        }
      },
      "149": {
        start: {
          line: 358,
          column: 23
        },
        end: {
          line: 358,
          column: 43
        }
      },
      "150": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 393,
          column: 9
        }
      },
      "151": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 40
        }
      },
      "152": {
        start: {
          line: 362,
          column: 25
        },
        end: {
          line: 362,
          column: 62
        }
      },
      "153": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 365,
          column: 13
        }
      },
      "154": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 364,
          column: 50
        }
      },
      "155": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 368,
          column: 13
        }
      },
      "156": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 367,
          column: 65
        }
      },
      "157": {
        start: {
          line: 370,
          column: 39
        },
        end: {
          line: 370,
          column: 94
        }
      },
      "158": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 373,
          column: 13
        }
      },
      "159": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 372,
          column: 90
        }
      },
      "160": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 82
        }
      },
      "161": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 41
        }
      },
      "162": {
        start: {
          line: 378,
          column: 38
        },
        end: {
          line: 378,
          column: 84
        }
      },
      "163": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 383,
          column: 15
        }
      },
      "164": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 384,
          column: 37
        }
      },
      "165": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 387,
          column: 43
        }
      },
      "166": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 388,
          column: 119
        }
      },
      "167": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 24
        }
      },
      "168": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 392,
          column: 29
        }
      },
      "169": {
        start: {
          line: 399,
          column: 21
        },
        end: {
          line: 399,
          column: 46
        }
      },
      "170": {
        start: {
          line: 400,
          column: 23
        },
        end: {
          line: 400,
          column: 43
        }
      },
      "171": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "172": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 40
        }
      },
      "173": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 404,
          column: 74
        }
      },
      "174": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 41
        }
      },
      "175": {
        start: {
          line: 407,
          column: 38
        },
        end: {
          line: 407,
          column: 84
        }
      },
      "176": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 411,
          column: 15
        }
      },
      "177": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 412,
          column: 37
        }
      },
      "178": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 415,
          column: 43
        }
      },
      "179": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 416,
          column: 111
        }
      },
      "180": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 417,
          column: 24
        }
      },
      "181": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 29
        }
      },
      "182": {
        start: {
          line: 427,
          column: 22
        },
        end: {
          line: 437,
          column: 5
        }
      },
      "183": {
        start: {
          line: 438,
          column: 23
        },
        end: {
          line: 438,
          column: 67
        }
      },
      "184": {
        start: {
          line: 439,
          column: 22
        },
        end: {
          line: 439,
          column: 36
        }
      },
      "185": {
        start: {
          line: 440,
          column: 22
        },
        end: {
          line: 440,
          column: 43
        }
      },
      "186": {
        start: {
          line: 441,
          column: 31
        },
        end: {
          line: 441,
          column: 62
        }
      },
      "187": {
        start: {
          line: 442,
          column: 46
        },
        end: {
          line: 442,
          column: 84
        }
      },
      "188": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 450,
          column: 10
        }
      },
      "189": {
        start: {
          line: 456,
          column: 21
        },
        end: {
          line: 456,
          column: 46
        }
      },
      "190": {
        start: {
          line: 457,
          column: 23
        },
        end: {
          line: 457,
          column: 43
        }
      },
      "191": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 534,
          column: 9
        }
      },
      "192": {
        start: {
          line: 459,
          column: 62
        },
        end: {
          line: 459,
          column: 68
        }
      },
      "193": {
        start: {
          line: 460,
          column: 27
        },
        end: {
          line: 460,
          column: 45
        }
      },
      "194": {
        start: {
          line: 462,
          column: 30
        },
        end: {
          line: 462,
          column: 64
        }
      },
      "195": {
        start: {
          line: 463,
          column: 32
        },
        end: {
          line: 463,
          column: 34
        }
      },
      "196": {
        start: {
          line: 464,
          column: 29
        },
        end: {
          line: 464,
          column: 30
        }
      },
      "197": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 469,
          column: 13
        }
      },
      "198": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 466,
          column: 142
        }
      },
      "199": {
        start: {
          line: 467,
          column: 16
        },
        end: {
          line: 467,
          column: 48
        }
      },
      "200": {
        start: {
          line: 468,
          column: 16
        },
        end: {
          line: 468,
          column: 29
        }
      },
      "201": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 476,
          column: 13
        }
      },
      "202": {
        start: {
          line: 472,
          column: 33
        },
        end: {
          line: 472,
          column: 52
        }
      },
      "203": {
        start: {
          line: 473,
          column: 16
        },
        end: {
          line: 473,
          column: 67
        }
      },
      "204": {
        start: {
          line: 474,
          column: 16
        },
        end: {
          line: 474,
          column: 43
        }
      },
      "205": {
        start: {
          line: 475,
          column: 16
        },
        end: {
          line: 475,
          column: 29
        }
      },
      "206": {
        start: {
          line: 478,
          column: 31
        },
        end: {
          line: 482,
          column: 7
        }
      },
      "207": {
        start: {
          line: 483,
          column: 32
        },
        end: {
          line: 483,
          column: 75
        }
      },
      "208": {
        start: {
          line: 484,
          column: 26
        },
        end: {
          line: 484,
          column: 61
        }
      },
      "209": {
        start: {
          line: 486,
          column: 26
        },
        end: {
          line: 503,
          column: 7
        }
      },
      "210": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 504,
          column: 44
        }
      },
      "211": {
        start: {
          line: 505,
          column: 27
        },
        end: {
          line: 505,
          column: 65
        }
      },
      "212": {
        start: {
          line: 506,
          column: 36
        },
        end: {
          line: 519,
          column: 15
        }
      },
      "213": {
        start: {
          line: 506,
          column: 60
        },
        end: {
          line: 519,
          column: 13
        }
      },
      "214": {
        start: {
          line: 520,
          column: 12
        },
        end: {
          line: 526,
          column: 14
        }
      },
      "215": {
        start: {
          line: 529,
          column: 12
        },
        end: {
          line: 529,
          column: 103
        }
      },
      "216": {
        start: {
          line: 530,
          column: 12
        },
        end: {
          line: 530,
          column: 24
        }
      },
      "217": {
        start: {
          line: 533,
          column: 12
        },
        end: {
          line: 533,
          column: 29
        }
      },
      "218": {
        start: {
          line: 540,
          column: 21
        },
        end: {
          line: 540,
          column: 46
        }
      },
      "219": {
        start: {
          line: 541,
          column: 23
        },
        end: {
          line: 541,
          column: 43
        }
      },
      "220": {
        start: {
          line: 542,
          column: 8
        },
        end: {
          line: 585,
          column: 9
        }
      },
      "221": {
        start: {
          line: 543,
          column: 26
        },
        end: {
          line: 558,
          column: 7
        }
      },
      "222": {
        start: {
          line: 559,
          column: 27
        },
        end: {
          line: 559,
          column: 62
        }
      },
      "223": {
        start: {
          line: 560,
          column: 12
        },
        end: {
          line: 562,
          column: 13
        }
      },
      "224": {
        start: {
          line: 561,
          column: 16
        },
        end: {
          line: 561,
          column: 28
        }
      },
      "225": {
        start: {
          line: 563,
          column: 24
        },
        end: {
          line: 563,
          column: 38
        }
      },
      "226": {
        start: {
          line: 564,
          column: 12
        },
        end: {
          line: 577,
          column: 14
        }
      },
      "227": {
        start: {
          line: 580,
          column: 12
        },
        end: {
          line: 580,
          column: 108
        }
      },
      "228": {
        start: {
          line: 581,
          column: 12
        },
        end: {
          line: 581,
          column: 24
        }
      },
      "229": {
        start: {
          line: 584,
          column: 12
        },
        end: {
          line: 584,
          column: 29
        }
      },
      "230": {
        start: {
          line: 591,
          column: 21
        },
        end: {
          line: 591,
          column: 46
        }
      },
      "231": {
        start: {
          line: 592,
          column: 23
        },
        end: {
          line: 592,
          column: 43
        }
      },
      "232": {
        start: {
          line: 593,
          column: 8
        },
        end: {
          line: 650,
          column: 9
        }
      },
      "233": {
        start: {
          line: 594,
          column: 12
        },
        end: {
          line: 594,
          column: 40
        }
      },
      "234": {
        start: {
          line: 596,
          column: 33
        },
        end: {
          line: 596,
          column: 106
        }
      },
      "235": {
        start: {
          line: 597,
          column: 12
        },
        end: {
          line: 599,
          column: 13
        }
      },
      "236": {
        start: {
          line: 598,
          column: 16
        },
        end: {
          line: 598,
          column: 56
        }
      },
      "237": {
        start: {
          line: 601,
          column: 38
        },
        end: {
          line: 601,
          column: 70
        }
      },
      "238": {
        start: {
          line: 602,
          column: 35
        },
        end: {
          line: 602,
          column: 85
        }
      },
      "239": {
        start: {
          line: 603,
          column: 30
        },
        end: {
          line: 607,
          column: 7
        }
      },
      "240": {
        start: {
          line: 608,
          column: 31
        },
        end: {
          line: 613,
          column: 14
        }
      },
      "241": {
        start: {
          line: 614,
          column: 28
        },
        end: {
          line: 614,
          column: 46
        }
      },
      "242": {
        start: {
          line: 616,
          column: 12
        },
        end: {
          line: 618,
          column: 13
        }
      },
      "243": {
        start: {
          line: 617,
          column: 16
        },
        end: {
          line: 617,
          column: 97
        }
      },
      "244": {
        start: {
          line: 620,
          column: 31
        },
        end: {
          line: 620,
          column: 120
        }
      },
      "245": {
        start: {
          line: 621,
          column: 34
        },
        end: {
          line: 621,
          column: 61
        }
      },
      "246": {
        start: {
          line: 623,
          column: 12
        },
        end: {
          line: 623,
          column: 96
        }
      },
      "247": {
        start: {
          line: 624,
          column: 12
        },
        end: {
          line: 624,
          column: 41
        }
      },
      "248": {
        start: {
          line: 626,
          column: 30
        },
        end: {
          line: 626,
          column: 155
        }
      },
      "249": {
        start: {
          line: 627,
          column: 12
        },
        end: {
          line: 632,
          column: 13
        }
      },
      "250": {
        start: {
          line: 628,
          column: 16
        },
        end: {
          line: 631,
          column: 19
        }
      },
      "251": {
        start: {
          line: 634,
          column: 35
        },
        end: {
          line: 634,
          column: 79
        }
      },
      "252": {
        start: {
          line: 635,
          column: 12
        },
        end: {
          line: 640,
          column: 15
        }
      },
      "253": {
        start: {
          line: 641,
          column: 12
        },
        end: {
          line: 641,
          column: 34
        }
      },
      "254": {
        start: {
          line: 644,
          column: 12
        },
        end: {
          line: 644,
          column: 43
        }
      },
      "255": {
        start: {
          line: 645,
          column: 12
        },
        end: {
          line: 645,
          column: 103
        }
      },
      "256": {
        start: {
          line: 646,
          column: 12
        },
        end: {
          line: 646,
          column: 24
        }
      },
      "257": {
        start: {
          line: 649,
          column: 12
        },
        end: {
          line: 649,
          column: 29
        }
      },
      "258": {
        start: {
          line: 656,
          column: 21
        },
        end: {
          line: 656,
          column: 46
        }
      },
      "259": {
        start: {
          line: 657,
          column: 23
        },
        end: {
          line: 657,
          column: 43
        }
      },
      "260": {
        start: {
          line: 658,
          column: 8
        },
        end: {
          line: 758,
          column: 9
        }
      },
      "261": {
        start: {
          line: 659,
          column: 12
        },
        end: {
          line: 659,
          column: 40
        }
      },
      "262": {
        start: {
          line: 661,
          column: 33
        },
        end: {
          line: 661,
          column: 139
        }
      },
      "263": {
        start: {
          line: 662,
          column: 12
        },
        end: {
          line: 664,
          column: 13
        }
      },
      "264": {
        start: {
          line: 663,
          column: 16
        },
        end: {
          line: 663,
          column: 61
        }
      },
      "265": {
        start: {
          line: 666,
          column: 12
        },
        end: {
          line: 671,
          column: 13
        }
      },
      "266": {
        start: {
          line: 667,
          column: 35
        },
        end: {
          line: 667,
          column: 129
        }
      },
      "267": {
        start: {
          line: 668,
          column: 16
        },
        end: {
          line: 670,
          column: 17
        }
      },
      "268": {
        start: {
          line: 669,
          column: 20
        },
        end: {
          line: 669,
          column: 60
        }
      },
      "269": {
        start: {
          line: 673,
          column: 33
        },
        end: {
          line: 673,
          column: 35
        }
      },
      "270": {
        start: {
          line: 674,
          column: 33
        },
        end: {
          line: 674,
          column: 35
        }
      },
      "271": {
        start: {
          line: 675,
          column: 29
        },
        end: {
          line: 675,
          column: 30
        }
      },
      "272": {
        start: {
          line: 676,
          column: 12
        },
        end: {
          line: 680,
          column: 13
        }
      },
      "273": {
        start: {
          line: 677,
          column: 16
        },
        end: {
          line: 677,
          column: 65
        }
      },
      "274": {
        start: {
          line: 678,
          column: 16
        },
        end: {
          line: 678,
          column: 50
        }
      },
      "275": {
        start: {
          line: 679,
          column: 16
        },
        end: {
          line: 679,
          column: 29
        }
      },
      "276": {
        start: {
          line: 681,
          column: 12
        },
        end: {
          line: 685,
          column: 13
        }
      },
      "277": {
        start: {
          line: 682,
          column: 16
        },
        end: {
          line: 682,
          column: 64
        }
      },
      "278": {
        start: {
          line: 683,
          column: 16
        },
        end: {
          line: 683,
          column: 49
        }
      },
      "279": {
        start: {
          line: 684,
          column: 16
        },
        end: {
          line: 684,
          column: 29
        }
      },
      "280": {
        start: {
          line: 686,
          column: 12
        },
        end: {
          line: 690,
          column: 13
        }
      },
      "281": {
        start: {
          line: 687,
          column: 16
        },
        end: {
          line: 687,
          column: 60
        }
      },
      "282": {
        start: {
          line: 688,
          column: 16
        },
        end: {
          line: 688,
          column: 46
        }
      },
      "283": {
        start: {
          line: 689,
          column: 16
        },
        end: {
          line: 689,
          column: 29
        }
      },
      "284": {
        start: {
          line: 691,
          column: 12
        },
        end: {
          line: 695,
          column: 13
        }
      },
      "285": {
        start: {
          line: 692,
          column: 16
        },
        end: {
          line: 692,
          column: 64
        }
      },
      "286": {
        start: {
          line: 693,
          column: 16
        },
        end: {
          line: 693,
          column: 60
        }
      },
      "287": {
        start: {
          line: 694,
          column: 16
        },
        end: {
          line: 694,
          column: 29
        }
      },
      "288": {
        start: {
          line: 696,
          column: 34
        },
        end: {
          line: 696,
          column: 38
        }
      },
      "289": {
        start: {
          line: 697,
          column: 12
        },
        end: {
          line: 708,
          column: 13
        }
      },
      "290": {
        start: {
          line: 698,
          column: 16
        },
        end: {
          line: 698,
          column: 68
        }
      },
      "291": {
        start: {
          line: 699,
          column: 16
        },
        end: {
          line: 699,
          column: 42
        }
      },
      "292": {
        start: {
          line: 700,
          column: 36
        },
        end: {
          line: 705,
          column: 9
        }
      },
      "293": {
        start: {
          line: 706,
          column: 37
        },
        end: {
          line: 706,
          column: 82
        }
      },
      "294": {
        start: {
          line: 707,
          column: 16
        },
        end: {
          line: 707,
          column: 55
        }
      },
      "295": {
        start: {
          line: 710,
          column: 12
        },
        end: {
          line: 727,
          column: 13
        }
      },
      "296": {
        start: {
          line: 712,
          column: 16
        },
        end: {
          line: 712,
          column: 137
        }
      },
      "297": {
        start: {
          line: 714,
          column: 16
        },
        end: {
          line: 726,
          column: 17
        }
      },
      "298": {
        start: {
          line: 716,
          column: 38
        },
        end: {
          line: 716,
          column: 76
        }
      },
      "299": {
        start: {
          line: 717,
          column: 39
        },
        end: {
          line: 717,
          column: 78
        }
      },
      "300": {
        start: {
          line: 718,
          column: 20
        },
        end: {
          line: 720,
          column: 21
        }
      },
      "301": {
        start: {
          line: 719,
          column: 24
        },
        end: {
          line: 719,
          column: 58
        }
      },
      "302": {
        start: {
          line: 721,
          column: 20
        },
        end: {
          line: 723,
          column: 21
        }
      },
      "303": {
        start: {
          line: 722,
          column: 24
        },
        end: {
          line: 722,
          column: 79
        }
      },
      "304": {
        start: {
          line: 725,
          column: 20
        },
        end: {
          line: 725,
          column: 169
        }
      },
      "305": {
        start: {
          line: 728,
          column: 12
        },
        end: {
          line: 728,
          column: 41
        }
      },
      "306": {
        start: {
          line: 730,
          column: 12
        },
        end: {
          line: 730,
          column: 84
        }
      },
      "307": {
        start: {
          line: 731,
          column: 27
        },
        end: {
          line: 744,
          column: 13
        }
      },
      "308": {
        start: {
          line: 745,
          column: 12
        },
        end: {
          line: 748,
          column: 15
        }
      },
      "309": {
        start: {
          line: 749,
          column: 12
        },
        end: {
          line: 749,
          column: 26
        }
      },
      "310": {
        start: {
          line: 752,
          column: 12
        },
        end: {
          line: 752,
          column: 43
        }
      },
      "311": {
        start: {
          line: 753,
          column: 12
        },
        end: {
          line: 753,
          column: 111
        }
      },
      "312": {
        start: {
          line: 754,
          column: 12
        },
        end: {
          line: 754,
          column: 24
        }
      },
      "313": {
        start: {
          line: 757,
          column: 12
        },
        end: {
          line: 757,
          column: 29
        }
      },
      "314": {
        start: {
          line: 764,
          column: 21
        },
        end: {
          line: 764,
          column: 46
        }
      },
      "315": {
        start: {
          line: 765,
          column: 23
        },
        end: {
          line: 765,
          column: 43
        }
      },
      "316": {
        start: {
          line: 766,
          column: 8
        },
        end: {
          line: 787,
          column: 9
        }
      },
      "317": {
        start: {
          line: 767,
          column: 12
        },
        end: {
          line: 767,
          column: 40
        }
      },
      "318": {
        start: {
          line: 769,
          column: 33
        },
        end: {
          line: 769,
          column: 132
        }
      },
      "319": {
        start: {
          line: 770,
          column: 12
        },
        end: {
          line: 772,
          column: 13
        }
      },
      "320": {
        start: {
          line: 771,
          column: 16
        },
        end: {
          line: 771,
          column: 61
        }
      },
      "321": {
        start: {
          line: 774,
          column: 12
        },
        end: {
          line: 774,
          column: 133
        }
      },
      "322": {
        start: {
          line: 776,
          column: 12
        },
        end: {
          line: 776,
          column: 76
        }
      },
      "323": {
        start: {
          line: 777,
          column: 12
        },
        end: {
          line: 777,
          column: 41
        }
      },
      "324": {
        start: {
          line: 778,
          column: 12
        },
        end: {
          line: 778,
          column: 86
        }
      },
      "325": {
        start: {
          line: 781,
          column: 12
        },
        end: {
          line: 781,
          column: 43
        }
      },
      "326": {
        start: {
          line: 782,
          column: 12
        },
        end: {
          line: 782,
          column: 105
        }
      },
      "327": {
        start: {
          line: 783,
          column: 12
        },
        end: {
          line: 783,
          column: 24
        }
      },
      "328": {
        start: {
          line: 786,
          column: 12
        },
        end: {
          line: 786,
          column: 29
        }
      },
      "329": {
        start: {
          line: 794,
          column: 26
        },
        end: {
          line: 794,
          column: 64
        }
      },
      "330": {
        start: {
          line: 795,
          column: 27
        },
        end: {
          line: 795,
          column: 66
        }
      },
      "331": {
        start: {
          line: 796,
          column: 8
        },
        end: {
          line: 798,
          column: 9
        }
      },
      "332": {
        start: {
          line: 797,
          column: 12
        },
        end: {
          line: 797,
          column: 46
        }
      },
      "333": {
        start: {
          line: 799,
          column: 8
        },
        end: {
          line: 801,
          column: 9
        }
      },
      "334": {
        start: {
          line: 800,
          column: 12
        },
        end: {
          line: 800,
          column: 67
        }
      },
      "335": {
        start: {
          line: 803,
          column: 28
        },
        end: {
          line: 803,
          column: 95
        }
      },
      "336": {
        start: {
          line: 804,
          column: 8
        },
        end: {
          line: 804,
          column: 64
        }
      },
      "337": {
        start: {
          line: 810,
          column: 22
        },
        end: {
          line: 810,
          column: 86
        }
      },
      "338": {
        start: {
          line: 811,
          column: 23
        },
        end: {
          line: 811,
          column: 25
        }
      },
      "339": {
        start: {
          line: 812,
          column: 8
        },
        end: {
          line: 814,
          column: 9
        }
      },
      "340": {
        start: {
          line: 812,
          column: 21
        },
        end: {
          line: 812,
          column: 22
        }
      },
      "341": {
        start: {
          line: 813,
          column: 12
        },
        end: {
          line: 813,
          column: 79
        }
      },
      "342": {
        start: {
          line: 815,
          column: 8
        },
        end: {
          line: 815,
          column: 24
        }
      },
      "343": {
        start: {
          line: 821,
          column: 21
        },
        end: {
          line: 821,
          column: 46
        }
      },
      "344": {
        start: {
          line: 822,
          column: 22
        },
        end: {
          line: 844,
          column: 5
        }
      },
      "345": {
        start: {
          line: 845,
          column: 23
        },
        end: {
          line: 845,
          column: 62
        }
      },
      "346": {
        start: {
          line: 846,
          column: 8
        },
        end: {
          line: 846,
          column: 27
        }
      },
      "347": {
        start: {
          line: 849,
          column: 0
        },
        end: {
          line: 849,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 46
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 82
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        loc: {
          start: {
            line: 128,
            column: 39
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 128
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 198,
            column: 44
          },
          end: {
            line: 198,
            column: 45
          }
        },
        loc: {
          start: {
            line: 198,
            column: 52
          },
          end: {
            line: 213,
            column: 9
          }
        },
        line: 198
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 225,
            column: 5
          }
        },
        loc: {
          start: {
            line: 225,
            column: 47
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 225
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 286,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        loc: {
          start: {
            line: 286,
            column: 41
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 286
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 319,
            column: 5
          }
        },
        loc: {
          start: {
            line: 319,
            column: 45
          },
          end: {
            line: 352,
            column: 5
          }
        },
        line: 319
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 356,
            column: 5
          }
        },
        loc: {
          start: {
            line: 356,
            column: 53
          },
          end: {
            line: 394,
            column: 5
          }
        },
        line: 356
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 398,
            column: 4
          },
          end: {
            line: 398,
            column: 5
          }
        },
        loc: {
          start: {
            line: 398,
            column: 45
          },
          end: {
            line: 422,
            column: 5
          }
        },
        line: 398
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 426,
            column: 4
          },
          end: {
            line: 426,
            column: 5
          }
        },
        loc: {
          start: {
            line: 426,
            column: 31
          },
          end: {
            line: 451,
            column: 5
          }
        },
        line: 426
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 455,
            column: 4
          },
          end: {
            line: 455,
            column: 5
          }
        },
        loc: {
          start: {
            line: 455,
            column: 37
          },
          end: {
            line: 535,
            column: 5
          }
        },
        line: 455
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 506,
            column: 52
          },
          end: {
            line: 506,
            column: 53
          }
        },
        loc: {
          start: {
            line: 506,
            column: 60
          },
          end: {
            line: 519,
            column: 13
          }
        },
        line: 506
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 539,
            column: 4
          },
          end: {
            line: 539,
            column: 5
          }
        },
        loc: {
          start: {
            line: 539,
            column: 40
          },
          end: {
            line: 586,
            column: 5
          }
        },
        line: 539
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 590,
            column: 4
          },
          end: {
            line: 590,
            column: 5
          }
        },
        loc: {
          start: {
            line: 590,
            column: 37
          },
          end: {
            line: 651,
            column: 5
          }
        },
        line: 590
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 655,
            column: 4
          },
          end: {
            line: 655,
            column: 5
          }
        },
        loc: {
          start: {
            line: 655,
            column: 45
          },
          end: {
            line: 759,
            column: 5
          }
        },
        line: 655
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 763,
            column: 4
          },
          end: {
            line: 763,
            column: 5
          }
        },
        loc: {
          start: {
            line: 763,
            column: 39
          },
          end: {
            line: 788,
            column: 5
          }
        },
        line: 763
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 792,
            column: 4
          },
          end: {
            line: 792,
            column: 5
          }
        },
        loc: {
          start: {
            line: 792,
            column: 71
          },
          end: {
            line: 805,
            column: 5
          }
        },
        line: 792
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 809,
            column: 4
          },
          end: {
            line: 809,
            column: 5
          }
        },
        loc: {
          start: {
            line: 809,
            column: 32
          },
          end: {
            line: 816,
            column: 5
          }
        },
        line: 809
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 820,
            column: 4
          },
          end: {
            line: 820,
            column: 5
          }
        },
        loc: {
          start: {
            line: 820,
            column: 47
          },
          end: {
            line: 847,
            column: 5
          }
        },
        line: 820
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 37,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 37,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 40,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 40,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "7": {
        loc: {
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 45,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 45,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "8": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "9": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "10": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "11": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "12": {
        loc: {
          start: {
            line: 113,
            column: 28
          },
          end: {
            line: 118,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 55
          },
          end: {
            line: 118,
            column: 13
          }
        }, {
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 118,
            column: 20
          }
        }],
        line: 113
      },
      "13": {
        loc: {
          start: {
            line: 128,
            column: 26
          },
          end: {
            line: 128,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 128,
            column: 35
          },
          end: {
            line: 128,
            column: 37
          }
        }],
        line: 128
      },
      "14": {
        loc: {
          start: {
            line: 129,
            column: 16
          },
          end: {
            line: 129,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 23
          },
          end: {
            line: 129,
            column: 24
          }
        }],
        line: 129
      },
      "15": {
        loc: {
          start: {
            line: 129,
            column: 26
          },
          end: {
            line: 129,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 34
          },
          end: {
            line: 129,
            column: 36
          }
        }],
        line: 129
      },
      "16": {
        loc: {
          start: {
            line: 129,
            column: 64
          },
          end: {
            line: 129,
            column: 92
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 80
          },
          end: {
            line: 129,
            column: 92
          }
        }],
        line: 129
      },
      "17": {
        loc: {
          start: {
            line: 129,
            column: 105
          },
          end: {
            line: 129,
            column: 130
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 124
          },
          end: {
            line: 129,
            column: 130
          }
        }],
        line: 129
      },
      "18": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "19": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "20": {
        loc: {
          start: {
            line: 148,
            column: 28
          },
          end: {
            line: 148,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 148,
            column: 57
          },
          end: {
            line: 148,
            column: 97
          }
        }, {
          start: {
            line: 148,
            column: 100
          },
          end: {
            line: 148,
            column: 102
          }
        }],
        line: 148
      },
      "21": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "22": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "23": {
        loc: {
          start: {
            line: 164,
            column: 30
          },
          end: {
            line: 164,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 30
          },
          end: {
            line: 164,
            column: 50
          }
        }, {
          start: {
            line: 164,
            column: 54
          },
          end: {
            line: 164,
            column: 68
          }
        }],
        line: 164
      },
      "24": {
        loc: {
          start: {
            line: 203,
            column: 28
          },
          end: {
            line: 208,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 203,
            column: 55
          },
          end: {
            line: 208,
            column: 13
          }
        }, {
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 208,
            column: 20
          }
        }],
        line: 203
      },
      "25": {
        loc: {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "26": {
        loc: {
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "27": {
        loc: {
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 236,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 236,
            column: 25
          }
        }, {
          start: {
            line: 236,
            column: 29
          },
          end: {
            line: 236,
            column: 65
          }
        }],
        line: 236
      },
      "28": {
        loc: {
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 240,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 240,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "29": {
        loc: {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "30": {
        loc: {
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 247,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 247,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "31": {
        loc: {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 250,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 250,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "32": {
        loc: {
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 255,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 255,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "33": {
        loc: {
          start: {
            line: 253,
            column: 20
          },
          end: {
            line: 253,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 20
          },
          end: {
            line: 253,
            column: 38
          }
        }, {
          start: {
            line: 253,
            column: 42
          },
          end: {
            line: 253,
            column: 80
          }
        }],
        line: 253
      },
      "34": {
        loc: {
          start: {
            line: 261,
            column: 41
          },
          end: {
            line: 261,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 261,
            column: 83
          },
          end: {
            line: 261,
            column: 87
          }
        }, {
          start: {
            line: 261,
            column: 90
          },
          end: {
            line: 261,
            column: 115
          }
        }],
        line: 261
      },
      "35": {
        loc: {
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 295,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 295,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "36": {
        loc: {
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 299,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 299,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "37": {
        loc: {
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "38": {
        loc: {
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "39": {
        loc: {
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 336,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 336,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "40": {
        loc: {
          start: {
            line: 363,
            column: 12
          },
          end: {
            line: 365,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 12
          },
          end: {
            line: 365,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "41": {
        loc: {
          start: {
            line: 366,
            column: 12
          },
          end: {
            line: 368,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 12
          },
          end: {
            line: 368,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "42": {
        loc: {
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 373,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 373,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "43": {
        loc: {
          start: {
            line: 371,
            column: 16
          },
          end: {
            line: 371,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 371,
            column: 16
          },
          end: {
            line: 371,
            column: 34
          }
        }, {
          start: {
            line: 371,
            column: 38
          },
          end: {
            line: 371,
            column: 76
          }
        }],
        line: 371
      },
      "44": {
        loc: {
          start: {
            line: 442,
            column: 46
          },
          end: {
            line: 442,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 442,
            column: 58
          },
          end: {
            line: 442,
            column: 80
          }
        }, {
          start: {
            line: 442,
            column: 83
          },
          end: {
            line: 442,
            column: 84
          }
        }],
        line: 442
      },
      "45": {
        loc: {
          start: {
            line: 459,
            column: 33
          },
          end: {
            line: 459,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 459,
            column: 42
          },
          end: {
            line: 459,
            column: 44
          }
        }],
        line: 459
      },
      "46": {
        loc: {
          start: {
            line: 459,
            column: 46
          },
          end: {
            line: 459,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 459,
            column: 55
          },
          end: {
            line: 459,
            column: 57
          }
        }],
        line: 459
      },
      "47": {
        loc: {
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 469,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 469,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "48": {
        loc: {
          start: {
            line: 465,
            column: 16
          },
          end: {
            line: 465,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 465,
            column: 16
          },
          end: {
            line: 465,
            column: 22
          }
        }, {
          start: {
            line: 465,
            column: 26
          },
          end: {
            line: 465,
            column: 39
          }
        }],
        line: 465
      },
      "49": {
        loc: {
          start: {
            line: 470,
            column: 12
          },
          end: {
            line: 476,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 12
          },
          end: {
            line: 476,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "50": {
        loc: {
          start: {
            line: 470,
            column: 16
          },
          end: {
            line: 470,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 470,
            column: 16
          },
          end: {
            line: 470,
            column: 22
          }
        }, {
          start: {
            line: 470,
            column: 26
          },
          end: {
            line: 470,
            column: 39
          }
        }],
        line: 470
      },
      "51": {
        loc: {
          start: {
            line: 511,
            column: 24
          },
          end: {
            line: 511,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 511,
            column: 40
          },
          end: {
            line: 511,
            column: 48
          }
        }, {
          start: {
            line: 511,
            column: 51
          },
          end: {
            line: 511,
            column: 61
          }
        }],
        line: 511
      },
      "52": {
        loc: {
          start: {
            line: 514,
            column: 28
          },
          end: {
            line: 518,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 514,
            column: 48
          },
          end: {
            line: 518,
            column: 17
          }
        }, {
          start: {
            line: 518,
            column: 20
          },
          end: {
            line: 518,
            column: 24
          }
        }],
        line: 514
      },
      "53": {
        loc: {
          start: {
            line: 560,
            column: 12
          },
          end: {
            line: 562,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 560,
            column: 12
          },
          end: {
            line: 562,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 560
      },
      "54": {
        loc: {
          start: {
            line: 569,
            column: 24
          },
          end: {
            line: 569,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 569,
            column: 40
          },
          end: {
            line: 569,
            column: 48
          }
        }, {
          start: {
            line: 569,
            column: 51
          },
          end: {
            line: 569,
            column: 61
          }
        }],
        line: 569
      },
      "55": {
        loc: {
          start: {
            line: 572,
            column: 28
          },
          end: {
            line: 576,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 572,
            column: 48
          },
          end: {
            line: 576,
            column: 17
          }
        }, {
          start: {
            line: 576,
            column: 20
          },
          end: {
            line: 576,
            column: 24
          }
        }],
        line: 572
      },
      "56": {
        loc: {
          start: {
            line: 597,
            column: 12
          },
          end: {
            line: 599,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 597,
            column: 12
          },
          end: {
            line: 599,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 597
      },
      "57": {
        loc: {
          start: {
            line: 616,
            column: 12
          },
          end: {
            line: 618,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 616,
            column: 12
          },
          end: {
            line: 618,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 616
      },
      "58": {
        loc: {
          start: {
            line: 627,
            column: 12
          },
          end: {
            line: 632,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 627,
            column: 12
          },
          end: {
            line: 632,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 627
      },
      "59": {
        loc: {
          start: {
            line: 662,
            column: 12
          },
          end: {
            line: 664,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 662,
            column: 12
          },
          end: {
            line: 664,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 662
      },
      "60": {
        loc: {
          start: {
            line: 666,
            column: 12
          },
          end: {
            line: 671,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 666,
            column: 12
          },
          end: {
            line: 671,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 666
      },
      "61": {
        loc: {
          start: {
            line: 666,
            column: 16
          },
          end: {
            line: 666,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 666,
            column: 16
          },
          end: {
            line: 666,
            column: 26
          }
        }, {
          start: {
            line: 666,
            column: 30
          },
          end: {
            line: 666,
            column: 71
          }
        }],
        line: 666
      },
      "62": {
        loc: {
          start: {
            line: 668,
            column: 16
          },
          end: {
            line: 670,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 668,
            column: 16
          },
          end: {
            line: 670,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 668
      },
      "63": {
        loc: {
          start: {
            line: 676,
            column: 12
          },
          end: {
            line: 680,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 676,
            column: 12
          },
          end: {
            line: 680,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 676
      },
      "64": {
        loc: {
          start: {
            line: 681,
            column: 12
          },
          end: {
            line: 685,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 681,
            column: 12
          },
          end: {
            line: 685,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 681
      },
      "65": {
        loc: {
          start: {
            line: 686,
            column: 12
          },
          end: {
            line: 690,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 686,
            column: 12
          },
          end: {
            line: 690,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 686
      },
      "66": {
        loc: {
          start: {
            line: 691,
            column: 12
          },
          end: {
            line: 695,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 691,
            column: 12
          },
          end: {
            line: 695,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 691
      },
      "67": {
        loc: {
          start: {
            line: 697,
            column: 12
          },
          end: {
            line: 708,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 697,
            column: 12
          },
          end: {
            line: 708,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 697
      },
      "68": {
        loc: {
          start: {
            line: 710,
            column: 12
          },
          end: {
            line: 727,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 710,
            column: 12
          },
          end: {
            line: 727,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 710
      },
      "69": {
        loc: {
          start: {
            line: 714,
            column: 16
          },
          end: {
            line: 726,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 714,
            column: 16
          },
          end: {
            line: 726,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 714
      },
      "70": {
        loc: {
          start: {
            line: 718,
            column: 20
          },
          end: {
            line: 720,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 718,
            column: 20
          },
          end: {
            line: 720,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 718
      },
      "71": {
        loc: {
          start: {
            line: 721,
            column: 20
          },
          end: {
            line: 723,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 721,
            column: 20
          },
          end: {
            line: 723,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 721
      },
      "72": {
        loc: {
          start: {
            line: 732,
            column: 20
          },
          end: {
            line: 732,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 732,
            column: 20
          },
          end: {
            line: 732,
            column: 39
          }
        }, {
          start: {
            line: 732,
            column: 43
          },
          end: {
            line: 732,
            column: 49
          }
        }],
        line: 732
      },
      "73": {
        loc: {
          start: {
            line: 733,
            column: 27
          },
          end: {
            line: 733,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 733,
            column: 27
          },
          end: {
            line: 733,
            column: 54
          }
        }, {
          start: {
            line: 733,
            column: 58
          },
          end: {
            line: 733,
            column: 72
          }
        }],
        line: 733
      },
      "74": {
        loc: {
          start: {
            line: 734,
            column: 26
          },
          end: {
            line: 734,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 734,
            column: 26
          },
          end: {
            line: 734,
            column: 52
          }
        }, {
          start: {
            line: 734,
            column: 56
          },
          end: {
            line: 734,
            column: 69
          }
        }],
        line: 734
      },
      "75": {
        loc: {
          start: {
            line: 735,
            column: 23
          },
          end: {
            line: 735,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 735,
            column: 23
          },
          end: {
            line: 735,
            column: 45
          }
        }, {
          start: {
            line: 735,
            column: 49
          },
          end: {
            line: 735,
            column: 59
          }
        }],
        line: 735
      },
      "76": {
        loc: {
          start: {
            line: 736,
            column: 24
          },
          end: {
            line: 736,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 736,
            column: 53
          },
          end: {
            line: 736,
            column: 61
          }
        }, {
          start: {
            line: 736,
            column: 64
          },
          end: {
            line: 736,
            column: 74
          }
        }],
        line: 736
      },
      "77": {
        loc: {
          start: {
            line: 739,
            column: 28
          },
          end: {
            line: 743,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 739,
            column: 48
          },
          end: {
            line: 743,
            column: 17
          }
        }, {
          start: {
            line: 743,
            column: 20
          },
          end: {
            line: 743,
            column: 24
          }
        }],
        line: 739
      },
      "78": {
        loc: {
          start: {
            line: 770,
            column: 12
          },
          end: {
            line: 772,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 770,
            column: 12
          },
          end: {
            line: 772,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 770
      },
      "79": {
        loc: {
          start: {
            line: 796,
            column: 8
          },
          end: {
            line: 798,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 796,
            column: 8
          },
          end: {
            line: 798,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 796
      },
      "80": {
        loc: {
          start: {
            line: 799,
            column: 8
          },
          end: {
            line: 801,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 799,
            column: 8
          },
          end: {
            line: 801,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 799
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0],
      "15": [0],
      "16": [0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0],
      "46": [0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/hr/departmentService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/services/hr/departmentService.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\nimport { DepartmentModel } from '../../models/hr/Department';\nimport { UserModel } from '../../models/auth/User';\nimport { emailService } from '../email/emailService';\nimport { redisService } from '../redis/redisService';\nimport logger from '../../utils/logger';\nimport bcrypt from 'bcrypt';\n\nexport interface CreateDepartmentData {\n  name: string;\n  description?: string;\n  departmentHeadUserId?: string;\n  isActive?: boolean;\n}\n\nexport interface UpdateDepartmentData {\n  name?: string;\n  description?: string;\n  departmentHeadUserId?: string;\n  isActive?: boolean;\n}\n\nexport interface DepartmentWithHead {\n  id: string;\n  name: string;\n  description: string | null;\n  departmentHeadUserId: string | null;\n  departmentHead: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n  } | null;\n  employeeCount: number;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface DepartmentListParams {\n  page?: number | undefined;\n  limit?: number | undefined;\n  search?: string | undefined;\n  isActive?: boolean | undefined;\n  sortBy?: string | undefined;\n  sortOrder?: 'asc' | 'desc' | undefined;\n}\n\nexport class DepartmentService {\n  private departmentModel: DepartmentModel;\n  private userModel: UserModel;\n\n  constructor() {\n    this.departmentModel = new DepartmentModel();\n    this.userModel = new UserModel();\n  }\n\n  /**\n   * Create a new department\n   */\n  async createDepartment(data: CreateDepartmentData): Promise<DepartmentWithHead> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if department name already exists\n      const existingDepartment = await this.departmentModel.findByName(data.name);\n      if (existingDepartment) {\n        throw new Error('Department name already exists');\n      }\n\n      // Verify department head if provided\n      if (data.departmentHeadUserId) {\n        const departmentHead = await this.userModel.findById(data.departmentHeadUserId);\n        if (!departmentHead) {\n          throw new Error('Department head user not found');\n        }\n        if (departmentHead.role !== 'department_head') {\n          throw new Error('User is not a department head');\n        }\n\n        // Check if user is already assigned to another department\n        const existingAssignment = await this.departmentModel.findByDepartmentHead(data.departmentHeadUserId);\n        if (existingAssignment) {\n          throw new Error('User is already assigned as head of another department');\n        }\n      }\n\n      // Create department\n      const departmentData: any = {\n        name: data.name\n      };\n      \n      if (data.description !== undefined) {\n        departmentData.description = data.description;\n      }\n      \n      if (data.departmentHeadUserId !== undefined) {\n        departmentData.department_head_user_id = data.departmentHeadUserId;\n      }\n      \n      if (data.isActive !== undefined) {\n        departmentData.is_active = data.isActive;\n      }\n      \n      const department = await this.departmentModel.createDepartment(departmentData);\n\n      await client.query('COMMIT');\n\n      // Get complete department data\n      const completeDepartment = await this.getDepartmentWithHead(department.id);\n\n      logger.info(`Department created successfully: ${department.name}`, {\n        departmentId: department.id,\n        departmentHeadUserId: data.departmentHeadUserId\n      });\n\n      return completeDepartment;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to create department', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get department with head information\n   */\n  async getDepartmentWithHead(departmentId: string): Promise<DepartmentWithHead> {\n    const query = `\n      SELECT \n        d.id,\n        d.name,\n        d.description,\n        d.department_head_user_id as \"departmentHeadUserId\",\n        d.is_active as \"isActive\",\n        d.created_at as \"createdAt\",\n        d.updated_at as \"updatedAt\",\n        u.id as head_id,\n        u.email as head_email,\n        u.first_name as head_first_name,\n        u.last_name as head_last_name,\n        COUNT(e.id) as employee_count\n      FROM departments d\n      LEFT JOIN users u ON d.department_head_user_id = u.id\n      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'\n      WHERE d.id = $1\n      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name\n    `;\n\n    const result = await getPool().query(query, [departmentId]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('Department not found');\n    }\n\n    const row = result.rows[0];\n    \n    return {\n      id: row.id,\n      name: row.name,\n      description: row.description,\n      departmentHeadUserId: row.departmentHeadUserId,\n      departmentHead: row.departmentHeadUserId ? {\n        id: row.head_id,\n        email: row.head_email,\n        firstName: row.head_first_name,\n        lastName: row.head_last_name\n      } : null,\n      employeeCount: parseInt(row.employee_count),\n      isActive: row.isActive,\n      createdAt: row.createdAt,\n      updatedAt: row.updatedAt\n    };\n  }\n\n  /**\n   * List departments with filtering and pagination\n   */\n  async listDepartments(params: DepartmentListParams = {}): Promise<{\n    departments: DepartmentWithHead[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      search,\n      isActive,\n      sortBy: initialSortBy = 'created_at',\n      sortOrder: initialSortOrder = 'desc'\n    } = params;\n\n    // Validate and sanitize sort parameters to prevent SQL injection\n    let sortBy = initialSortBy;\n    let sortOrder = initialSortOrder;\n\n    const offset = (page - 1) * limit;\n\n    // Build WHERE clause\n    const whereConditions: string[] = [];\n    const queryParams: any[] = [];\n    let paramIndex = 1;\n\n    if (search) {\n      whereConditions.push(`(d.name ILIKE $${paramIndex} OR d.description ILIKE $${paramIndex})`);\n      queryParams.push(`%${search}%`);\n      paramIndex++;\n    }\n\n    if (isActive !== undefined) {\n      whereConditions.push(`d.is_active = $${paramIndex}`);\n      queryParams.push(isActive);\n      paramIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Validate sort parameters to prevent SQL injection\n    const allowedSortFields = ['name', 'created_at', 'employee_count'];\n    const allowedSortOrders = ['ASC', 'DESC'];\n\n    if (!allowedSortFields.includes(sortBy)) {\n      sortBy = 'created_at'; // default safe field\n    }\n    if (!allowedSortOrders.includes(sortOrder)) {\n      sortOrder = 'desc'; // default safe order\n    }\n\n    // Map sortBy to actual column names\n    const sortFieldMap: { [key: string]: string } = {\n      'name': 'd.name',\n      'created_at': 'd.created_at',\n      'employee_count': 'employee_count'\n    };\n\n    const orderByClause = sortFieldMap[sortBy] || 'd.created_at';\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM departments d\n      ${whereClause}\n    `;\n\n    const countResult = await getPool().query(countQuery, queryParams);\n    const total = parseInt(countResult.rows[0].total);\n\n    // Data query\n    const dataQuery = `\n      SELECT\n        d.id,\n        d.name,\n        d.description,\n        d.department_head_user_id as \"departmentHeadUserId\",\n        d.is_active as \"isActive\",\n        d.created_at as \"createdAt\",\n        d.updated_at as \"updatedAt\",\n        u.id as head_id,\n        u.email as head_email,\n        u.first_name as head_first_name,\n        u.last_name as head_last_name,\n        COUNT(e.id) as employee_count\n      FROM departments d\n      LEFT JOIN users u ON d.department_head_user_id = u.id\n      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'\n      ${whereClause}\n      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name\n      ORDER BY ${orderByClause} ${sortOrder.toUpperCase()}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    queryParams.push(limit, offset);\n    const result = await getPool().query(dataQuery, queryParams);\n\n    const departments = result.rows.map(row => ({\n      id: row.id,\n      name: row.name,\n      description: row.description,\n      departmentHeadUserId: row.departmentHeadUserId,\n      departmentHead: row.departmentHeadUserId ? {\n        id: row.head_id,\n        email: row.head_email,\n        firstName: row.head_first_name,\n        lastName: row.head_last_name\n      } : null,\n      employeeCount: parseInt(row.employee_count),\n      isActive: row.isActive,\n      createdAt: row.createdAt,\n      updatedAt: row.updatedAt\n    }));\n\n    return {\n      departments,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  /**\n   * Update department information\n   */\n  async updateDepartment(departmentId: string, data: UpdateDepartmentData): Promise<DepartmentWithHead> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get current department\n      const currentDepartment = await this.getDepartmentWithHead(departmentId);\n      if (!currentDepartment) {\n        throw new Error('Department not found');\n      }\n\n      // Check if new name conflicts with existing departments\n      if (data.name && data.name !== currentDepartment.name) {\n        const existingDepartment = await this.departmentModel.findByName(data.name);\n        if (existingDepartment) {\n          throw new Error('Department name already exists');\n        }\n      }\n\n      // Verify department head if provided\n      if (data.departmentHeadUserId) {\n        const departmentHead = await this.userModel.findById(data.departmentHeadUserId);\n        if (!departmentHead) {\n          throw new Error('Department head user not found');\n        }\n        if (departmentHead.role !== 'department_head') {\n          throw new Error('User is not a department head');\n        }\n\n        // Check if user is already assigned to another department (excluding current)\n        const existingAssignment = await this.departmentModel.findByDepartmentHead(data.departmentHeadUserId);\n        if (existingAssignment && existingAssignment.id !== departmentId) {\n          throw new Error('User is already assigned as head of another department');\n        }\n      }\n\n      // Update department - convert camelCase to snake_case for model\n      const modelData = {\n        name: data.name,\n        description: data.description,\n        department_head_user_id: data.departmentHeadUserId === undefined ? null : data.departmentHeadUserId,\n        is_active: data.isActive\n      };\n      await this.departmentModel.updateDepartment(departmentId, modelData);\n\n      await client.query('COMMIT');\n\n      // Get updated department data\n      const updatedDepartment = await this.getDepartmentWithHead(departmentId);\n\n      logger.info(`Department updated successfully: ${currentDepartment.name}`, {\n        departmentId,\n        updates: { ...data }\n      });\n\n      return updatedDepartment;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to update department', { error: (error as Error).message, departmentId, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Delete department (soft delete)\n   */\n  async deleteDepartment(departmentId: string): Promise<void> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get department\n      const department = await this.getDepartmentWithHead(departmentId);\n      if (!department) {\n        throw new Error('Department not found');\n      }\n\n      // Check if department has active employees\n      if (department.employeeCount > 0) {\n        throw new Error('Cannot delete department with active employees');\n      }\n\n      // Deactivate department\n      await this.departmentModel.updateDepartment(departmentId, { is_active: false });\n\n      await client.query('COMMIT');\n\n      logger.info(`Department deleted successfully: ${department.name}`, {\n        departmentId\n      });\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to delete department', { error: (error as Error).message, departmentId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Hard delete department (permanently remove from database)\n   */\n  async hardDeleteDepartment(departmentId: string): Promise<void> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get department\n      const department = await this.getDepartmentWithHead(departmentId);\n      if (!department) {\n        throw new Error('Department not found');\n      }\n\n      // Check if department has active employees\n      if (department.employeeCount > 0) {\n        throw new Error('Cannot delete department with active employees');\n      }\n\n      // Check if department has a department head assigned\n      if (department.departmentHeadUserId) {\n        throw new Error('Cannot delete department with assigned department head. Please remove the department head first.');\n      }\n\n      // Hard delete department\n      await this.departmentModel.deleteDepartment(departmentId);\n\n      await client.query('COMMIT');\n\n      logger.info(`Department hard deleted successfully: ${department.name}`, {\n        departmentId\n      });\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to hard delete department', { error: (error as Error).message, departmentId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Assign department head\n   */\n  async assignDepartmentHead(departmentId: string, userId: string): Promise<DepartmentWithHead> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Verify user is a department head\n      const user = await this.userModel.findById(userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n      if (user.role !== 'department_head') {\n        throw new Error('User is not a department head');\n      }\n\n      // Check if user is already assigned to another department\n              const existingAssignment = await this.departmentModel.findByDepartmentHead(userId);\n      if (existingAssignment && existingAssignment.id !== departmentId) {\n        throw new Error('User is already assigned as head of another department');\n      }\n\n      // Update department\n      await this.departmentModel.assignDepartmentHead(departmentId, userId);\n\n      await client.query('COMMIT');\n\n      // Get updated department data\n      const updatedDepartment = await this.getDepartmentWithHead(departmentId);\n\n      logger.info(`Department head assigned successfully`, {\n        departmentId,\n        userId,\n        departmentName: updatedDepartment.name\n      });\n\n      return updatedDepartment;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to assign department head', { error: (error as Error).message, departmentId, userId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Remove department head\n   */\n  async removeDepartmentHead(departmentId: string): Promise<DepartmentWithHead> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Update department\n      await this.departmentModel.removeDepartmentHead(departmentId);\n\n      await client.query('COMMIT');\n\n      // Get updated department data\n      const updatedDepartment = await this.getDepartmentWithHead(departmentId);\n\n      logger.info(`Department head removed successfully`, {\n        departmentId,\n        departmentName: updatedDepartment.name\n      });\n\n      return updatedDepartment;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to remove department head', { error: (error as Error).message, departmentId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get department statistics\n   */\n  async getDepartmentStats(): Promise<{\n    total: number;\n    active: number;\n    withHeads: number;\n    withoutHeads: number;\n    totalEmployees: number;\n    averageEmployeesPerDepartment: number;\n  }> {\n    const query = `\n      SELECT \n        COUNT(*) as total,\n        COUNT(*) FILTER (WHERE is_active = true) as active,\n        COUNT(*) FILTER (WHERE department_head_user_id IS NOT NULL) as with_heads,\n        COUNT(*) FILTER (WHERE department_head_user_id IS NULL) as without_heads,\n        COUNT(e.id) as total_employees\n      FROM departments d\n      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'\n      WHERE d.is_active = true\n    `;\n\n    const result = await getPool().query(query);\n    const stats = result.rows[0];\n\n    const total = parseInt(stats.total);\n    const totalEmployees = parseInt(stats.total_employees);\n    const averageEmployeesPerDepartment = total > 0 ? totalEmployees / total : 0;\n\n    return {\n      total: total,\n      active: parseInt(stats.active),\n      withHeads: parseInt(stats.with_heads),\n      withoutHeads: parseInt(stats.without_heads),\n      totalEmployees,\n      averageEmployeesPerDepartment: Math.round(averageEmployeesPerDepartment * 100) / 100\n    };\n  }\n\n  /**\n   * Get all department heads with pagination and filtering\n   */\n  async getDepartmentHeads(params: { page: number; limit: number; search?: string; status?: string }): Promise<{\n    departmentHeads: any[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      const { page, limit, search = '', status = '' } = params;\n      const offset = (page - 1) * limit;\n\n      // Build WHERE clause\n      let whereClause = \"WHERE u.role = 'department_head'\";\n      const queryParams: any[] = [];\n      let paramIndex = 1;\n\n      if (search && search.trim()) {\n        whereClause += ` AND (u.first_name ILIKE $${paramIndex} OR u.last_name ILIKE $${paramIndex} OR u.email ILIKE $${paramIndex})`;\n        queryParams.push(`%${search}%`);\n        paramIndex++;\n      }\n\n      if (status && status.trim()) {\n        // Convert status to boolean for is_active column\n        const isActive = status === 'active';\n        whereClause += ` AND u.is_active = $${paramIndex}`;\n        queryParams.push(isActive);\n        paramIndex++;\n      }\n\n      // Get total count\n      const countQuery = `\n        SELECT COUNT(*) as total\n        FROM users u\n        ${whereClause}\n      `;\n      const countResult = await client.query(countQuery, queryParams);\n      const total = parseInt(countResult.rows[0].total);\n\n      // Get department heads with their assigned departments\n      const query = `\n        SELECT \n          u.id,\n          u.first_name,\n          u.last_name,\n          u.email,\n          u.is_active,\n          u.created_at,\n          u.updated_at,\n          d.id as department_id,\n          d.name as department_name,\n          d.description as department_description\n        FROM users u\n        LEFT JOIN departments d ON d.department_head_user_id = u.id\n        ${whereClause}\n        ORDER BY u.last_name, u.first_name\n        LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n      `;\n      \n      queryParams.push(limit, offset);\n      const result = await client.query(query, queryParams);\n\n      const departmentHeads = result.rows.map(row => ({\n        id: row.id,\n        firstName: row.first_name,\n        lastName: row.last_name,\n        email: row.email,\n        status: row.is_active ? 'active' : 'inactive',\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        department: row.department_id ? {\n          id: row.department_id,\n          name: row.department_name,\n          description: row.department_description\n        } : null\n      }));\n\n      return {\n        departmentHeads,\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit)\n      };\n    } catch (error) {\n      logger.error('Failed to get department heads', { error: (error as Error).message, params });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get department head by ID\n   */\n  async getDepartmentHeadById(userId: string): Promise<any | null> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      const query = `\n        SELECT \n          u.id,\n          u.first_name,\n          u.last_name,\n          u.email,\n          u.is_active,\n          u.created_at,\n          u.updated_at,\n          d.id as department_id,\n          d.name as department_name,\n          d.description as department_description\n        FROM users u\n        LEFT JOIN departments d ON d.department_head_user_id = u.id\n        WHERE u.id = $1 AND u.role = 'department_head'\n      `;\n      \n      const result = await client.query(query, [userId]);\n\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      const row = result.rows[0];\n      return {\n        id: row.id,\n        firstName: row.first_name,\n        lastName: row.last_name,\n        email: row.email,\n        status: row.is_active ? 'active' : 'inactive',\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        department: row.department_id ? {\n          id: row.department_id,\n          name: row.department_name,\n          description: row.department_description\n        } : null\n      };\n    } catch (error) {\n      logger.error('Failed to get department head by ID', { error: (error as Error).message, userId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Create a new department head user\n   */\n  async createDepartmentHead(data: {\n    firstName: string;\n    lastName: string;\n    email: string;\n    departmentId?: string;\n  }): Promise<any> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if email already exists\n      const existingUser = await client.query('SELECT id FROM users WHERE email = $1', [data.email]);\n      if (existingUser.rows.length > 0) {\n        throw new Error('Email already exists');\n      }\n\n      // Generate a temporary password for initial setup\n      const temporaryPassword = this.generateTemporaryPassword();\n      const hashedPassword = await bcrypt.hash(temporaryPassword, 10);\n\n      const userQuery = `\n        INSERT INTO users (first_name, last_name, email, password_hash, role, is_active)\n        VALUES ($1, $2, $3, $4, 'department_head', true)\n        RETURNING id, first_name, last_name, email, is_active, created_at, updated_at\n      `;\n      \n      const userResult = await client.query(userQuery, [\n        data.firstName,\n        data.lastName,\n        data.email,\n        hashedPassword\n      ]);\n\n      const newUser = userResult.rows[0];\n\n      // If department is specified, assign the user as department head\n      if (data.departmentId) {\n        await this.assignDepartmentHeadWithClient(client, data.departmentId, newUser.id);\n      }\n\n      // Generate password setup token\n      const setupToken = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n      const setupTokenKey = `setup_token:${setupToken}`;\n      \n      // Store setup token in cache with user ID as value (expires in 24 hours)\n      await redisService.setCache(setupTokenKey, newUser.id, 24 * 60 * 60);\n\n      await client.query('COMMIT');\n\n      // Send password setup email\n      const emailSent = await emailService.sendDepartmentHeadPasswordSetupEmail(\n        data.email,\n        data.firstName,\n        data.lastName,\n        setupToken\n      );\n\n      if (!emailSent) {\n        logger.warn('Failed to send password setup email to department head', {\n          userId: newUser.id,\n          email: data.email\n        });\n      }\n\n      // Get the complete department head data\n      const departmentHead = await this.getDepartmentHeadById(newUser.id);\n\n      logger.info('Department head created successfully', {\n        userId: newUser.id,\n        email: newUser.email,\n        departmentId: data.departmentId,\n        emailSent\n      });\n\n      return departmentHead;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to create department head', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Update department head\n   */\n  async updateDepartmentHead(userId: string, data: {\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n    status?: string;\n    departmentId?: string;\n  }): Promise<any | null> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if user exists and is a department head\n      const existingUser = await client.query(\n        'SELECT id, email FROM users WHERE id = $1 AND role = $2',\n        [userId, 'department_head']\n      );\n\n      if (existingUser.rows.length === 0) {\n        throw new Error('Department head not found');\n      }\n\n      // Check if email is being changed and if it already exists\n      if (data.email && data.email !== existingUser.rows[0].email) {\n        const emailCheck = await client.query('SELECT id FROM users WHERE email = $1 AND id != $2', [data.email, userId]);\n        if (emailCheck.rows.length > 0) {\n          throw new Error('Email already exists');\n        }\n      }\n\n      // Update user data\n      const updateFields = [];\n      const updateValues = [];\n      let paramIndex = 1;\n\n      if (data.firstName) {\n        updateFields.push(`first_name = $${paramIndex}`);\n        updateValues.push(data.firstName);\n        paramIndex++;\n      }\n      if (data.lastName) {\n        updateFields.push(`last_name = $${paramIndex}`);\n        updateValues.push(data.lastName);\n        paramIndex++;\n      }\n      if (data.email) {\n        updateFields.push(`email = $${paramIndex}`);\n        updateValues.push(data.email);\n        paramIndex++;\n      }\n      if (data.status) {\n        updateFields.push(`is_active = $${paramIndex}`);\n        updateValues.push(data.status === 'active');\n        paramIndex++;\n      }\n\n      let updatedUserData = null;\n      if (updateFields.length > 0) {\n        updateFields.push(`updated_at = CURRENT_TIMESTAMP`);\n        updateValues.push(userId);\n\n        const updateQuery = `\n          UPDATE users \n          SET ${updateFields.join(', ')}\n          WHERE id = $${paramIndex}\n          RETURNING id, first_name, last_name, email, is_active, created_at, updated_at\n        `;\n        \n        const updateResult = await client.query(updateQuery, updateValues);\n        updatedUserData = updateResult.rows[0];\n      }\n\n      // Handle department assignment\n      if (data.departmentId !== undefined) {\n        // First, remove from current department if any\n        await client.query(\n          'UPDATE departments SET department_head_user_id = NULL WHERE department_head_user_id = $1',\n          [userId]\n        );\n\n        // Assign to new department if specified\n        if (data.departmentId) {\n          // Verify the user has department_head role\n          const userQuery = 'SELECT role FROM users WHERE id = $1';\n          const userResult = await client.query(userQuery, [userId]);\n          \n          if (userResult.rows.length === 0) {\n            throw new Error('User not found');\n          }\n          \n          if (userResult.rows[0].role !== 'department_head') {\n            throw new Error('User must have department_head role');\n          }\n\n          // Update the department within the same transaction\n          await client.query(\n            'UPDATE departments SET department_head_user_id = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',\n            [userId, data.departmentId]\n          );\n        }\n      }\n\n      await client.query('COMMIT');\n\n      // Return updated department head data from transaction\n      logger.info('Transaction committed successfully', { userId });\n      \n      const result = {\n        id: updatedUserData?.id || userId,\n        firstName: updatedUserData?.first_name || data.firstName,\n        lastName: updatedUserData?.last_name || data.lastName,\n        email: updatedUserData?.email || data.email,\n        status: updatedUserData?.is_active ? 'active' : 'inactive',\n        createdAt: updatedUserData?.created_at,\n        updatedAt: updatedUserData?.updated_at,\n        department: data.departmentId ? {\n          id: data.departmentId,\n          name: null, // We'll need to fetch this separately if needed\n          description: null\n        } : null\n      };\n\n      logger.info('Department head updated successfully', {\n        userId,\n        departmentId: data.departmentId\n      });\n\n      return result;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to update department head', { error: (error as Error).message, userId, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Delete department head\n   */\n  async deleteDepartmentHead(userId: string): Promise<void> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if user exists and is a department head\n      const existingUser = await client.query(\n        'SELECT id FROM users WHERE id = $1 AND role = $2',\n        [userId, 'department_head']\n      );\n\n      if (existingUser.rows.length === 0) {\n        throw new Error('Department head not found');\n      }\n\n      // Remove from any assigned department\n      await client.query(\n        'UPDATE departments SET department_head_user_id = NULL WHERE department_head_user_id = $1',\n        [userId]\n      );\n\n      // Delete the user\n      await client.query('DELETE FROM users WHERE id = $1', [userId]);\n\n      await client.query('COMMIT');\n\n      logger.info('Department head deleted successfully', { userId });\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to delete department head', { error: (error as Error).message, userId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Assign department head using a specific database client (for transactions)\n   */\n  private async assignDepartmentHeadWithClient(client: any, departmentId: string, userId: string): Promise<void> {\n    // First verify the user has department_head role\n    const userQuery = 'SELECT role FROM users WHERE id = $1';\n    const userResult = await client.query(userQuery, [userId]);\n    \n    if (userResult.rows.length === 0) {\n      throw new Error('User not found');\n    }\n    \n    if (userResult.rows[0].role !== 'department_head') {\n      throw new Error('User must have department_head role');\n    }\n\n    // Update the department\n    const updateQuery = 'UPDATE departments SET department_head_user_id = $1 WHERE id = $2';\n    await client.query(updateQuery, [userId, departmentId]);\n  }\n\n  /**\n   * Generate temporary password for new department heads\n   */\n  private generateTemporaryPassword(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let password = '';\n    for (let i = 0; i < 8; i++) {\n      password += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return password;\n  }\n\n  /**\n   * Get employees in a department\n   */\n  async getDepartmentEmployees(departmentId: string): Promise<any[]> {\n    const pool = getPool();\n    \n    const query = `\n      SELECT \n        e.id,\n        e.user_id as \"userId\",\n        e.employee_id as \"employeeId\",\n        u.email,\n        u.first_name as \"firstName\",\n        u.last_name as \"lastName\",\n        e.department_id as \"departmentId\",\n        d.name as \"departmentName\",\n        e.position,\n        e.employment_type as \"employmentType\",\n        e.hire_date as \"hireDate\",\n        e.base_salary as \"baseSalary\",\n        e.status,\n        e.created_at as \"createdAt\",\n        e.updated_at as \"updatedAt\"\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.department_id = $1\n      ORDER BY u.last_name, u.first_name\n    `;\n    \n    const result = await pool.query(query, [departmentId]);\n    return result.rows;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9864007a20fc4728fbbee7c93d673e7188c244ab"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_cf7v579xf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_cf7v579xf();
var __importDefault =
/* istanbul ignore next */
(cov_cf7v579xf().s[0]++,
/* istanbul ignore next */
(cov_cf7v579xf().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_cf7v579xf().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_cf7v579xf().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_cf7v579xf().f[0]++;
  cov_cf7v579xf().s[1]++;
  return /* istanbul ignore next */(cov_cf7v579xf().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_cf7v579xf().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_cf7v579xf().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_cf7v579xf().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_cf7v579xf().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_cf7v579xf().s[3]++;
exports.DepartmentService = void 0;
const database_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[4]++, require("../../config/database"));
const Department_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[5]++, require("../../models/hr/Department"));
const User_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[6]++, require("../../models/auth/User"));
const emailService_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[7]++, require("../email/emailService"));
const redisService_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[8]++, require("../redis/redisService"));
const logger_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[9]++, __importDefault(require("../../utils/logger")));
const bcrypt_1 =
/* istanbul ignore next */
(cov_cf7v579xf().s[10]++, __importDefault(require("bcrypt")));
class DepartmentService {
  constructor() {
    /* istanbul ignore next */
    cov_cf7v579xf().f[1]++;
    cov_cf7v579xf().s[11]++;
    this.departmentModel = new Department_1.DepartmentModel();
    /* istanbul ignore next */
    cov_cf7v579xf().s[12]++;
    this.userModel = new User_1.UserModel();
  }
  /**
   * Create a new department
   */
  async createDepartment(data) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[2]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[13]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[14]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[15]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[16]++;
      await client.query('BEGIN');
      // Check if department name already exists
      const existingDepartment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[17]++, await this.departmentModel.findByName(data.name));
      /* istanbul ignore next */
      cov_cf7v579xf().s[18]++;
      if (existingDepartment) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[3][0]++;
        cov_cf7v579xf().s[19]++;
        throw new Error('Department name already exists');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[3][1]++;
      }
      // Verify department head if provided
      cov_cf7v579xf().s[20]++;
      if (data.departmentHeadUserId) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[4][0]++;
        const departmentHead =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[21]++, await this.userModel.findById(data.departmentHeadUserId));
        /* istanbul ignore next */
        cov_cf7v579xf().s[22]++;
        if (!departmentHead) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[5][0]++;
          cov_cf7v579xf().s[23]++;
          throw new Error('Department head user not found');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[5][1]++;
        }
        cov_cf7v579xf().s[24]++;
        if (departmentHead.role !== 'department_head') {
          /* istanbul ignore next */
          cov_cf7v579xf().b[6][0]++;
          cov_cf7v579xf().s[25]++;
          throw new Error('User is not a department head');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[6][1]++;
        }
        // Check if user is already assigned to another department
        const existingAssignment =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[26]++, await this.departmentModel.findByDepartmentHead(data.departmentHeadUserId));
        /* istanbul ignore next */
        cov_cf7v579xf().s[27]++;
        if (existingAssignment) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[7][0]++;
          cov_cf7v579xf().s[28]++;
          throw new Error('User is already assigned as head of another department');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[7][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[4][1]++;
      }
      // Create department
      const departmentData =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[29]++, {
        name: data.name
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[30]++;
      if (data.description !== undefined) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[8][0]++;
        cov_cf7v579xf().s[31]++;
        departmentData.description = data.description;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[8][1]++;
      }
      cov_cf7v579xf().s[32]++;
      if (data.departmentHeadUserId !== undefined) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[9][0]++;
        cov_cf7v579xf().s[33]++;
        departmentData.department_head_user_id = data.departmentHeadUserId;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[9][1]++;
      }
      cov_cf7v579xf().s[34]++;
      if (data.isActive !== undefined) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[10][0]++;
        cov_cf7v579xf().s[35]++;
        departmentData.is_active = data.isActive;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[10][1]++;
      }
      const department =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[36]++, await this.departmentModel.createDepartment(departmentData));
      /* istanbul ignore next */
      cov_cf7v579xf().s[37]++;
      await client.query('COMMIT');
      // Get complete department data
      const completeDepartment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[38]++, await this.getDepartmentWithHead(department.id));
      /* istanbul ignore next */
      cov_cf7v579xf().s[39]++;
      logger_1.default.info(`Department created successfully: ${department.name}`, {
        departmentId: department.id,
        departmentHeadUserId: data.departmentHeadUserId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[40]++;
      return completeDepartment;
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[41]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[42]++;
      logger_1.default.error('Failed to create department', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[43]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[44]++;
      client.release();
    }
  }
  /**
   * Get department with head information
   */
  async getDepartmentWithHead(departmentId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[3]++;
    const query =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[45]++, `
      SELECT 
        d.id,
        d.name,
        d.description,
        d.department_head_user_id as "departmentHeadUserId",
        d.is_active as "isActive",
        d.created_at as "createdAt",
        d.updated_at as "updatedAt",
        u.id as head_id,
        u.email as head_email,
        u.first_name as head_first_name,
        u.last_name as head_last_name,
        COUNT(e.id) as employee_count
      FROM departments d
      LEFT JOIN users u ON d.department_head_user_id = u.id
      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'
      WHERE d.id = $1
      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name
    `);
    const result =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[46]++, await (0, database_1.getPool)().query(query, [departmentId]));
    /* istanbul ignore next */
    cov_cf7v579xf().s[47]++;
    if (result.rows.length === 0) {
      /* istanbul ignore next */
      cov_cf7v579xf().b[11][0]++;
      cov_cf7v579xf().s[48]++;
      throw new Error('Department not found');
    } else
    /* istanbul ignore next */
    {
      cov_cf7v579xf().b[11][1]++;
    }
    const row =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[49]++, result.rows[0]);
    /* istanbul ignore next */
    cov_cf7v579xf().s[50]++;
    return {
      id: row.id,
      name: row.name,
      description: row.description,
      departmentHeadUserId: row.departmentHeadUserId,
      departmentHead: row.departmentHeadUserId ?
      /* istanbul ignore next */
      (cov_cf7v579xf().b[12][0]++, {
        id: row.head_id,
        email: row.head_email,
        firstName: row.head_first_name,
        lastName: row.head_last_name
      }) :
      /* istanbul ignore next */
      (cov_cf7v579xf().b[12][1]++, null),
      employeeCount: parseInt(row.employee_count),
      isActive: row.isActive,
      createdAt: row.createdAt,
      updatedAt: row.updatedAt
    };
  }
  /**
   * List departments with filtering and pagination
   */
  async listDepartments(params =
  /* istanbul ignore next */
  (cov_cf7v579xf().b[13][0]++, {})) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[4]++;
    const {
      page =
      /* istanbul ignore next */
      (cov_cf7v579xf().b[14][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_cf7v579xf().b[15][0]++, 20),
      search,
      isActive,
      sortBy: initialSortBy =
      /* istanbul ignore next */
      (cov_cf7v579xf().b[16][0]++, 'created_at'),
      sortOrder: initialSortOrder =
      /* istanbul ignore next */
      (cov_cf7v579xf().b[17][0]++, 'desc')
    } =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[51]++, params);
    // Validate and sanitize sort parameters to prevent SQL injection
    let sortBy =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[52]++, initialSortBy);
    let sortOrder =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[53]++, initialSortOrder);
    const offset =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[54]++, (page - 1) * limit);
    // Build WHERE clause
    const whereConditions =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[55]++, []);
    const queryParams =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[56]++, []);
    let paramIndex =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[57]++, 1);
    /* istanbul ignore next */
    cov_cf7v579xf().s[58]++;
    if (search) {
      /* istanbul ignore next */
      cov_cf7v579xf().b[18][0]++;
      cov_cf7v579xf().s[59]++;
      whereConditions.push(`(d.name ILIKE $${paramIndex} OR d.description ILIKE $${paramIndex})`);
      /* istanbul ignore next */
      cov_cf7v579xf().s[60]++;
      queryParams.push(`%${search}%`);
      /* istanbul ignore next */
      cov_cf7v579xf().s[61]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_cf7v579xf().b[18][1]++;
    }
    cov_cf7v579xf().s[62]++;
    if (isActive !== undefined) {
      /* istanbul ignore next */
      cov_cf7v579xf().b[19][0]++;
      cov_cf7v579xf().s[63]++;
      whereConditions.push(`d.is_active = $${paramIndex}`);
      /* istanbul ignore next */
      cov_cf7v579xf().s[64]++;
      queryParams.push(isActive);
      /* istanbul ignore next */
      cov_cf7v579xf().s[65]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_cf7v579xf().b[19][1]++;
    }
    const whereClause =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[66]++, whereConditions.length > 0 ?
    /* istanbul ignore next */
    (cov_cf7v579xf().b[20][0]++, `WHERE ${whereConditions.join(' AND ')}`) :
    /* istanbul ignore next */
    (cov_cf7v579xf().b[20][1]++, ''));
    // Validate sort parameters to prevent SQL injection
    const allowedSortFields =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[67]++, ['name', 'created_at', 'employee_count']);
    const allowedSortOrders =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[68]++, ['ASC', 'DESC']);
    /* istanbul ignore next */
    cov_cf7v579xf().s[69]++;
    if (!allowedSortFields.includes(sortBy)) {
      /* istanbul ignore next */
      cov_cf7v579xf().b[21][0]++;
      cov_cf7v579xf().s[70]++;
      sortBy = 'created_at'; // default safe field
    } else
    /* istanbul ignore next */
    {
      cov_cf7v579xf().b[21][1]++;
    }
    cov_cf7v579xf().s[71]++;
    if (!allowedSortOrders.includes(sortOrder)) {
      /* istanbul ignore next */
      cov_cf7v579xf().b[22][0]++;
      cov_cf7v579xf().s[72]++;
      sortOrder = 'desc'; // default safe order
    } else
    /* istanbul ignore next */
    {
      cov_cf7v579xf().b[22][1]++;
    }
    // Map sortBy to actual column names
    const sortFieldMap =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[73]++, {
      'name': 'd.name',
      'created_at': 'd.created_at',
      'employee_count': 'employee_count'
    });
    const orderByClause =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[74]++,
    /* istanbul ignore next */
    (cov_cf7v579xf().b[23][0]++, sortFieldMap[sortBy]) ||
    /* istanbul ignore next */
    (cov_cf7v579xf().b[23][1]++, 'd.created_at'));
    // Count query
    const countQuery =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[75]++, `
      SELECT COUNT(*) as total
      FROM departments d
      ${whereClause}
    `);
    const countResult =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[76]++, await (0, database_1.getPool)().query(countQuery, queryParams));
    const total =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[77]++, parseInt(countResult.rows[0].total));
    // Data query
    const dataQuery =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[78]++, `
      SELECT
        d.id,
        d.name,
        d.description,
        d.department_head_user_id as "departmentHeadUserId",
        d.is_active as "isActive",
        d.created_at as "createdAt",
        d.updated_at as "updatedAt",
        u.id as head_id,
        u.email as head_email,
        u.first_name as head_first_name,
        u.last_name as head_last_name,
        COUNT(e.id) as employee_count
      FROM departments d
      LEFT JOIN users u ON d.department_head_user_id = u.id
      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'
      ${whereClause}
      GROUP BY d.id, u.id, u.email, u.first_name, u.last_name
      ORDER BY ${orderByClause} ${sortOrder.toUpperCase()}
      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
    `);
    /* istanbul ignore next */
    cov_cf7v579xf().s[79]++;
    queryParams.push(limit, offset);
    const result =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[80]++, await (0, database_1.getPool)().query(dataQuery, queryParams));
    const departments =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[81]++, result.rows.map(row => {
      /* istanbul ignore next */
      cov_cf7v579xf().f[5]++;
      cov_cf7v579xf().s[82]++;
      return {
        id: row.id,
        name: row.name,
        description: row.description,
        departmentHeadUserId: row.departmentHeadUserId,
        departmentHead: row.departmentHeadUserId ?
        /* istanbul ignore next */
        (cov_cf7v579xf().b[24][0]++, {
          id: row.head_id,
          email: row.head_email,
          firstName: row.head_first_name,
          lastName: row.head_last_name
        }) :
        /* istanbul ignore next */
        (cov_cf7v579xf().b[24][1]++, null),
        employeeCount: parseInt(row.employee_count),
        isActive: row.isActive,
        createdAt: row.createdAt,
        updatedAt: row.updatedAt
      };
    }));
    /* istanbul ignore next */
    cov_cf7v579xf().s[83]++;
    return {
      departments,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit)
    };
  }
  /**
   * Update department information
   */
  async updateDepartment(departmentId, data) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[6]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[84]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[85]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[86]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[87]++;
      await client.query('BEGIN');
      // Get current department
      const currentDepartment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[88]++, await this.getDepartmentWithHead(departmentId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[89]++;
      if (!currentDepartment) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[25][0]++;
        cov_cf7v579xf().s[90]++;
        throw new Error('Department not found');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[25][1]++;
      }
      // Check if new name conflicts with existing departments
      cov_cf7v579xf().s[91]++;
      if (
      /* istanbul ignore next */
      (cov_cf7v579xf().b[27][0]++, data.name) &&
      /* istanbul ignore next */
      (cov_cf7v579xf().b[27][1]++, data.name !== currentDepartment.name)) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[26][0]++;
        const existingDepartment =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[92]++, await this.departmentModel.findByName(data.name));
        /* istanbul ignore next */
        cov_cf7v579xf().s[93]++;
        if (existingDepartment) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[28][0]++;
          cov_cf7v579xf().s[94]++;
          throw new Error('Department name already exists');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[28][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[26][1]++;
      }
      // Verify department head if provided
      cov_cf7v579xf().s[95]++;
      if (data.departmentHeadUserId) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[29][0]++;
        const departmentHead =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[96]++, await this.userModel.findById(data.departmentHeadUserId));
        /* istanbul ignore next */
        cov_cf7v579xf().s[97]++;
        if (!departmentHead) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[30][0]++;
          cov_cf7v579xf().s[98]++;
          throw new Error('Department head user not found');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[30][1]++;
        }
        cov_cf7v579xf().s[99]++;
        if (departmentHead.role !== 'department_head') {
          /* istanbul ignore next */
          cov_cf7v579xf().b[31][0]++;
          cov_cf7v579xf().s[100]++;
          throw new Error('User is not a department head');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[31][1]++;
        }
        // Check if user is already assigned to another department (excluding current)
        const existingAssignment =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[101]++, await this.departmentModel.findByDepartmentHead(data.departmentHeadUserId));
        /* istanbul ignore next */
        cov_cf7v579xf().s[102]++;
        if (
        /* istanbul ignore next */
        (cov_cf7v579xf().b[33][0]++, existingAssignment) &&
        /* istanbul ignore next */
        (cov_cf7v579xf().b[33][1]++, existingAssignment.id !== departmentId)) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[32][0]++;
          cov_cf7v579xf().s[103]++;
          throw new Error('User is already assigned as head of another department');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[32][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[29][1]++;
      }
      // Update department - convert camelCase to snake_case for model
      const modelData =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[104]++, {
        name: data.name,
        description: data.description,
        department_head_user_id: data.departmentHeadUserId === undefined ?
        /* istanbul ignore next */
        (cov_cf7v579xf().b[34][0]++, null) :
        /* istanbul ignore next */
        (cov_cf7v579xf().b[34][1]++, data.departmentHeadUserId),
        is_active: data.isActive
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[105]++;
      await this.departmentModel.updateDepartment(departmentId, modelData);
      /* istanbul ignore next */
      cov_cf7v579xf().s[106]++;
      await client.query('COMMIT');
      // Get updated department data
      const updatedDepartment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[107]++, await this.getDepartmentWithHead(departmentId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[108]++;
      logger_1.default.info(`Department updated successfully: ${currentDepartment.name}`, {
        departmentId,
        updates: {
          ...data
        }
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[109]++;
      return updatedDepartment;
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[110]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[111]++;
      logger_1.default.error('Failed to update department', {
        error: error.message,
        departmentId,
        data
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[112]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[113]++;
      client.release();
    }
  }
  /**
   * Delete department (soft delete)
   */
  async deleteDepartment(departmentId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[7]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[114]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[115]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[116]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[117]++;
      await client.query('BEGIN');
      // Get department
      const department =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[118]++, await this.getDepartmentWithHead(departmentId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[119]++;
      if (!department) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[35][0]++;
        cov_cf7v579xf().s[120]++;
        throw new Error('Department not found');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[35][1]++;
      }
      // Check if department has active employees
      cov_cf7v579xf().s[121]++;
      if (department.employeeCount > 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[36][0]++;
        cov_cf7v579xf().s[122]++;
        throw new Error('Cannot delete department with active employees');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[36][1]++;
      }
      // Deactivate department
      cov_cf7v579xf().s[123]++;
      await this.departmentModel.updateDepartment(departmentId, {
        is_active: false
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[124]++;
      await client.query('COMMIT');
      /* istanbul ignore next */
      cov_cf7v579xf().s[125]++;
      logger_1.default.info(`Department deleted successfully: ${department.name}`, {
        departmentId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[126]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[127]++;
      logger_1.default.error('Failed to delete department', {
        error: error.message,
        departmentId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[128]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[129]++;
      client.release();
    }
  }
  /**
   * Hard delete department (permanently remove from database)
   */
  async hardDeleteDepartment(departmentId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[8]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[130]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[131]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[132]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[133]++;
      await client.query('BEGIN');
      // Get department
      const department =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[134]++, await this.getDepartmentWithHead(departmentId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[135]++;
      if (!department) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[37][0]++;
        cov_cf7v579xf().s[136]++;
        throw new Error('Department not found');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[37][1]++;
      }
      // Check if department has active employees
      cov_cf7v579xf().s[137]++;
      if (department.employeeCount > 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[38][0]++;
        cov_cf7v579xf().s[138]++;
        throw new Error('Cannot delete department with active employees');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[38][1]++;
      }
      // Check if department has a department head assigned
      cov_cf7v579xf().s[139]++;
      if (department.departmentHeadUserId) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[39][0]++;
        cov_cf7v579xf().s[140]++;
        throw new Error('Cannot delete department with assigned department head. Please remove the department head first.');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[39][1]++;
      }
      // Hard delete department
      cov_cf7v579xf().s[141]++;
      await this.departmentModel.deleteDepartment(departmentId);
      /* istanbul ignore next */
      cov_cf7v579xf().s[142]++;
      await client.query('COMMIT');
      /* istanbul ignore next */
      cov_cf7v579xf().s[143]++;
      logger_1.default.info(`Department hard deleted successfully: ${department.name}`, {
        departmentId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[144]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[145]++;
      logger_1.default.error('Failed to hard delete department', {
        error: error.message,
        departmentId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[146]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[147]++;
      client.release();
    }
  }
  /**
   * Assign department head
   */
  async assignDepartmentHead(departmentId, userId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[9]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[148]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[149]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[150]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[151]++;
      await client.query('BEGIN');
      // Verify user is a department head
      const user =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[152]++, await this.userModel.findById(userId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[153]++;
      if (!user) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[40][0]++;
        cov_cf7v579xf().s[154]++;
        throw new Error('User not found');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[40][1]++;
      }
      cov_cf7v579xf().s[155]++;
      if (user.role !== 'department_head') {
        /* istanbul ignore next */
        cov_cf7v579xf().b[41][0]++;
        cov_cf7v579xf().s[156]++;
        throw new Error('User is not a department head');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[41][1]++;
      }
      // Check if user is already assigned to another department
      const existingAssignment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[157]++, await this.departmentModel.findByDepartmentHead(userId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[158]++;
      if (
      /* istanbul ignore next */
      (cov_cf7v579xf().b[43][0]++, existingAssignment) &&
      /* istanbul ignore next */
      (cov_cf7v579xf().b[43][1]++, existingAssignment.id !== departmentId)) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[42][0]++;
        cov_cf7v579xf().s[159]++;
        throw new Error('User is already assigned as head of another department');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[42][1]++;
      }
      // Update department
      cov_cf7v579xf().s[160]++;
      await this.departmentModel.assignDepartmentHead(departmentId, userId);
      /* istanbul ignore next */
      cov_cf7v579xf().s[161]++;
      await client.query('COMMIT');
      // Get updated department data
      const updatedDepartment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[162]++, await this.getDepartmentWithHead(departmentId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[163]++;
      logger_1.default.info(`Department head assigned successfully`, {
        departmentId,
        userId,
        departmentName: updatedDepartment.name
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[164]++;
      return updatedDepartment;
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[165]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[166]++;
      logger_1.default.error('Failed to assign department head', {
        error: error.message,
        departmentId,
        userId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[167]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[168]++;
      client.release();
    }
  }
  /**
   * Remove department head
   */
  async removeDepartmentHead(departmentId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[10]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[169]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[170]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[171]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[172]++;
      await client.query('BEGIN');
      // Update department
      /* istanbul ignore next */
      cov_cf7v579xf().s[173]++;
      await this.departmentModel.removeDepartmentHead(departmentId);
      /* istanbul ignore next */
      cov_cf7v579xf().s[174]++;
      await client.query('COMMIT');
      // Get updated department data
      const updatedDepartment =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[175]++, await this.getDepartmentWithHead(departmentId));
      /* istanbul ignore next */
      cov_cf7v579xf().s[176]++;
      logger_1.default.info(`Department head removed successfully`, {
        departmentId,
        departmentName: updatedDepartment.name
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[177]++;
      return updatedDepartment;
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[178]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[179]++;
      logger_1.default.error('Failed to remove department head', {
        error: error.message,
        departmentId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[180]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[181]++;
      client.release();
    }
  }
  /**
   * Get department statistics
   */
  async getDepartmentStats() {
    /* istanbul ignore next */
    cov_cf7v579xf().f[11]++;
    const query =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[182]++, `
      SELECT 
        COUNT(*) as total,
        COUNT(*) FILTER (WHERE is_active = true) as active,
        COUNT(*) FILTER (WHERE department_head_user_id IS NOT NULL) as with_heads,
        COUNT(*) FILTER (WHERE department_head_user_id IS NULL) as without_heads,
        COUNT(e.id) as total_employees
      FROM departments d
      LEFT JOIN employees e ON d.id = e.department_id AND e.status = 'active'
      WHERE d.is_active = true
    `);
    const result =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[183]++, await (0, database_1.getPool)().query(query));
    const stats =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[184]++, result.rows[0]);
    const total =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[185]++, parseInt(stats.total));
    const totalEmployees =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[186]++, parseInt(stats.total_employees));
    const averageEmployeesPerDepartment =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[187]++, total > 0 ?
    /* istanbul ignore next */
    (cov_cf7v579xf().b[44][0]++, totalEmployees / total) :
    /* istanbul ignore next */
    (cov_cf7v579xf().b[44][1]++, 0));
    /* istanbul ignore next */
    cov_cf7v579xf().s[188]++;
    return {
      total: total,
      active: parseInt(stats.active),
      withHeads: parseInt(stats.with_heads),
      withoutHeads: parseInt(stats.without_heads),
      totalEmployees,
      averageEmployeesPerDepartment: Math.round(averageEmployeesPerDepartment * 100) / 100
    };
  }
  /**
   * Get all department heads with pagination and filtering
   */
  async getDepartmentHeads(params) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[12]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[189]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[190]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[191]++;
    try {
      const {
        page,
        limit,
        search =
        /* istanbul ignore next */
        (cov_cf7v579xf().b[45][0]++, ''),
        status =
        /* istanbul ignore next */
        (cov_cf7v579xf().b[46][0]++, '')
      } =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[192]++, params);
      const offset =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[193]++, (page - 1) * limit);
      // Build WHERE clause
      let whereClause =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[194]++, "WHERE u.role = 'department_head'");
      const queryParams =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[195]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[196]++, 1);
      /* istanbul ignore next */
      cov_cf7v579xf().s[197]++;
      if (
      /* istanbul ignore next */
      (cov_cf7v579xf().b[48][0]++, search) &&
      /* istanbul ignore next */
      (cov_cf7v579xf().b[48][1]++, search.trim())) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[47][0]++;
        cov_cf7v579xf().s[198]++;
        whereClause += ` AND (u.first_name ILIKE $${paramIndex} OR u.last_name ILIKE $${paramIndex} OR u.email ILIKE $${paramIndex})`;
        /* istanbul ignore next */
        cov_cf7v579xf().s[199]++;
        queryParams.push(`%${search}%`);
        /* istanbul ignore next */
        cov_cf7v579xf().s[200]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[47][1]++;
      }
      cov_cf7v579xf().s[201]++;
      if (
      /* istanbul ignore next */
      (cov_cf7v579xf().b[50][0]++, status) &&
      /* istanbul ignore next */
      (cov_cf7v579xf().b[50][1]++, status.trim())) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[49][0]++;
        // Convert status to boolean for is_active column
        const isActive =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[202]++, status === 'active');
        /* istanbul ignore next */
        cov_cf7v579xf().s[203]++;
        whereClause += ` AND u.is_active = $${paramIndex}`;
        /* istanbul ignore next */
        cov_cf7v579xf().s[204]++;
        queryParams.push(isActive);
        /* istanbul ignore next */
        cov_cf7v579xf().s[205]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[49][1]++;
      }
      // Get total count
      const countQuery =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[206]++, `
        SELECT COUNT(*) as total
        FROM users u
        ${whereClause}
      `);
      const countResult =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[207]++, await client.query(countQuery, queryParams));
      const total =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[208]++, parseInt(countResult.rows[0].total));
      // Get department heads with their assigned departments
      const query =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[209]++, `
        SELECT 
          u.id,
          u.first_name,
          u.last_name,
          u.email,
          u.is_active,
          u.created_at,
          u.updated_at,
          d.id as department_id,
          d.name as department_name,
          d.description as department_description
        FROM users u
        LEFT JOIN departments d ON d.department_head_user_id = u.id
        ${whereClause}
        ORDER BY u.last_name, u.first_name
        LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
      `);
      /* istanbul ignore next */
      cov_cf7v579xf().s[210]++;
      queryParams.push(limit, offset);
      const result =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[211]++, await client.query(query, queryParams));
      const departmentHeads =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[212]++, result.rows.map(row => {
        /* istanbul ignore next */
        cov_cf7v579xf().f[13]++;
        cov_cf7v579xf().s[213]++;
        return {
          id: row.id,
          firstName: row.first_name,
          lastName: row.last_name,
          email: row.email,
          status: row.is_active ?
          /* istanbul ignore next */
          (cov_cf7v579xf().b[51][0]++, 'active') :
          /* istanbul ignore next */
          (cov_cf7v579xf().b[51][1]++, 'inactive'),
          createdAt: row.created_at,
          updatedAt: row.updated_at,
          department: row.department_id ?
          /* istanbul ignore next */
          (cov_cf7v579xf().b[52][0]++, {
            id: row.department_id,
            name: row.department_name,
            description: row.department_description
          }) :
          /* istanbul ignore next */
          (cov_cf7v579xf().b[52][1]++, null)
        };
      }));
      /* istanbul ignore next */
      cov_cf7v579xf().s[214]++;
      return {
        departmentHeads,
        total,
        page,
        limit,
        totalPages: Math.ceil(total / limit)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[215]++;
      logger_1.default.error('Failed to get department heads', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[216]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[217]++;
      client.release();
    }
  }
  /**
   * Get department head by ID
   */
  async getDepartmentHeadById(userId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[14]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[218]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[219]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[220]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[221]++, `
        SELECT 
          u.id,
          u.first_name,
          u.last_name,
          u.email,
          u.is_active,
          u.created_at,
          u.updated_at,
          d.id as department_id,
          d.name as department_name,
          d.description as department_description
        FROM users u
        LEFT JOIN departments d ON d.department_head_user_id = u.id
        WHERE u.id = $1 AND u.role = 'department_head'
      `);
      const result =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[222]++, await client.query(query, [userId]));
      /* istanbul ignore next */
      cov_cf7v579xf().s[223]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[53][0]++;
        cov_cf7v579xf().s[224]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[53][1]++;
      }
      const row =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[225]++, result.rows[0]);
      /* istanbul ignore next */
      cov_cf7v579xf().s[226]++;
      return {
        id: row.id,
        firstName: row.first_name,
        lastName: row.last_name,
        email: row.email,
        status: row.is_active ?
        /* istanbul ignore next */
        (cov_cf7v579xf().b[54][0]++, 'active') :
        /* istanbul ignore next */
        (cov_cf7v579xf().b[54][1]++, 'inactive'),
        createdAt: row.created_at,
        updatedAt: row.updated_at,
        department: row.department_id ?
        /* istanbul ignore next */
        (cov_cf7v579xf().b[55][0]++, {
          id: row.department_id,
          name: row.department_name,
          description: row.department_description
        }) :
        /* istanbul ignore next */
        (cov_cf7v579xf().b[55][1]++, null)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[227]++;
      logger_1.default.error('Failed to get department head by ID', {
        error: error.message,
        userId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[228]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[229]++;
      client.release();
    }
  }
  /**
   * Create a new department head user
   */
  async createDepartmentHead(data) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[15]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[230]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[231]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[232]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[233]++;
      await client.query('BEGIN');
      // Check if email already exists
      const existingUser =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[234]++, await client.query('SELECT id FROM users WHERE email = $1', [data.email]));
      /* istanbul ignore next */
      cov_cf7v579xf().s[235]++;
      if (existingUser.rows.length > 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[56][0]++;
        cov_cf7v579xf().s[236]++;
        throw new Error('Email already exists');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[56][1]++;
      }
      // Generate a temporary password for initial setup
      const temporaryPassword =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[237]++, this.generateTemporaryPassword());
      const hashedPassword =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[238]++, await bcrypt_1.default.hash(temporaryPassword, 10));
      const userQuery =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[239]++, `
        INSERT INTO users (first_name, last_name, email, password_hash, role, is_active)
        VALUES ($1, $2, $3, $4, 'department_head', true)
        RETURNING id, first_name, last_name, email, is_active, created_at, updated_at
      `);
      const userResult =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[240]++, await client.query(userQuery, [data.firstName, data.lastName, data.email, hashedPassword]));
      const newUser =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[241]++, userResult.rows[0]);
      // If department is specified, assign the user as department head
      /* istanbul ignore next */
      cov_cf7v579xf().s[242]++;
      if (data.departmentId) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[57][0]++;
        cov_cf7v579xf().s[243]++;
        await this.assignDepartmentHeadWithClient(client, data.departmentId, newUser.id);
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[57][1]++;
      }
      // Generate password setup token
      const setupToken =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[244]++, Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15));
      const setupTokenKey =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[245]++, `setup_token:${setupToken}`);
      // Store setup token in cache with user ID as value (expires in 24 hours)
      /* istanbul ignore next */
      cov_cf7v579xf().s[246]++;
      await redisService_1.redisService.setCache(setupTokenKey, newUser.id, 24 * 60 * 60);
      /* istanbul ignore next */
      cov_cf7v579xf().s[247]++;
      await client.query('COMMIT');
      // Send password setup email
      const emailSent =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[248]++, await emailService_1.emailService.sendDepartmentHeadPasswordSetupEmail(data.email, data.firstName, data.lastName, setupToken));
      /* istanbul ignore next */
      cov_cf7v579xf().s[249]++;
      if (!emailSent) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[58][0]++;
        cov_cf7v579xf().s[250]++;
        logger_1.default.warn('Failed to send password setup email to department head', {
          userId: newUser.id,
          email: data.email
        });
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[58][1]++;
      }
      // Get the complete department head data
      const departmentHead =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[251]++, await this.getDepartmentHeadById(newUser.id));
      /* istanbul ignore next */
      cov_cf7v579xf().s[252]++;
      logger_1.default.info('Department head created successfully', {
        userId: newUser.id,
        email: newUser.email,
        departmentId: data.departmentId,
        emailSent
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[253]++;
      return departmentHead;
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[254]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[255]++;
      logger_1.default.error('Failed to create department head', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[256]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[257]++;
      client.release();
    }
  }
  /**
   * Update department head
   */
  async updateDepartmentHead(userId, data) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[16]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[258]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[259]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[260]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[261]++;
      await client.query('BEGIN');
      // Check if user exists and is a department head
      const existingUser =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[262]++, await client.query('SELECT id, email FROM users WHERE id = $1 AND role = $2', [userId, 'department_head']));
      /* istanbul ignore next */
      cov_cf7v579xf().s[263]++;
      if (existingUser.rows.length === 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[59][0]++;
        cov_cf7v579xf().s[264]++;
        throw new Error('Department head not found');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[59][1]++;
      }
      // Check if email is being changed and if it already exists
      cov_cf7v579xf().s[265]++;
      if (
      /* istanbul ignore next */
      (cov_cf7v579xf().b[61][0]++, data.email) &&
      /* istanbul ignore next */
      (cov_cf7v579xf().b[61][1]++, data.email !== existingUser.rows[0].email)) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[60][0]++;
        const emailCheck =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[266]++, await client.query('SELECT id FROM users WHERE email = $1 AND id != $2', [data.email, userId]));
        /* istanbul ignore next */
        cov_cf7v579xf().s[267]++;
        if (emailCheck.rows.length > 0) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[62][0]++;
          cov_cf7v579xf().s[268]++;
          throw new Error('Email already exists');
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[62][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[60][1]++;
      }
      // Update user data
      const updateFields =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[269]++, []);
      const updateValues =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[270]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[271]++, 1);
      /* istanbul ignore next */
      cov_cf7v579xf().s[272]++;
      if (data.firstName) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[63][0]++;
        cov_cf7v579xf().s[273]++;
        updateFields.push(`first_name = $${paramIndex}`);
        /* istanbul ignore next */
        cov_cf7v579xf().s[274]++;
        updateValues.push(data.firstName);
        /* istanbul ignore next */
        cov_cf7v579xf().s[275]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[63][1]++;
      }
      cov_cf7v579xf().s[276]++;
      if (data.lastName) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[64][0]++;
        cov_cf7v579xf().s[277]++;
        updateFields.push(`last_name = $${paramIndex}`);
        /* istanbul ignore next */
        cov_cf7v579xf().s[278]++;
        updateValues.push(data.lastName);
        /* istanbul ignore next */
        cov_cf7v579xf().s[279]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[64][1]++;
      }
      cov_cf7v579xf().s[280]++;
      if (data.email) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[65][0]++;
        cov_cf7v579xf().s[281]++;
        updateFields.push(`email = $${paramIndex}`);
        /* istanbul ignore next */
        cov_cf7v579xf().s[282]++;
        updateValues.push(data.email);
        /* istanbul ignore next */
        cov_cf7v579xf().s[283]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[65][1]++;
      }
      cov_cf7v579xf().s[284]++;
      if (data.status) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[66][0]++;
        cov_cf7v579xf().s[285]++;
        updateFields.push(`is_active = $${paramIndex}`);
        /* istanbul ignore next */
        cov_cf7v579xf().s[286]++;
        updateValues.push(data.status === 'active');
        /* istanbul ignore next */
        cov_cf7v579xf().s[287]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[66][1]++;
      }
      let updatedUserData =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[288]++, null);
      /* istanbul ignore next */
      cov_cf7v579xf().s[289]++;
      if (updateFields.length > 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[67][0]++;
        cov_cf7v579xf().s[290]++;
        updateFields.push(`updated_at = CURRENT_TIMESTAMP`);
        /* istanbul ignore next */
        cov_cf7v579xf().s[291]++;
        updateValues.push(userId);
        const updateQuery =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[292]++, `
          UPDATE users 
          SET ${updateFields.join(', ')}
          WHERE id = $${paramIndex}
          RETURNING id, first_name, last_name, email, is_active, created_at, updated_at
        `);
        const updateResult =
        /* istanbul ignore next */
        (cov_cf7v579xf().s[293]++, await client.query(updateQuery, updateValues));
        /* istanbul ignore next */
        cov_cf7v579xf().s[294]++;
        updatedUserData = updateResult.rows[0];
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[67][1]++;
      }
      // Handle department assignment
      cov_cf7v579xf().s[295]++;
      if (data.departmentId !== undefined) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[68][0]++;
        cov_cf7v579xf().s[296]++;
        // First, remove from current department if any
        await client.query('UPDATE departments SET department_head_user_id = NULL WHERE department_head_user_id = $1', [userId]);
        // Assign to new department if specified
        /* istanbul ignore next */
        cov_cf7v579xf().s[297]++;
        if (data.departmentId) {
          /* istanbul ignore next */
          cov_cf7v579xf().b[69][0]++;
          // Verify the user has department_head role
          const userQuery =
          /* istanbul ignore next */
          (cov_cf7v579xf().s[298]++, 'SELECT role FROM users WHERE id = $1');
          const userResult =
          /* istanbul ignore next */
          (cov_cf7v579xf().s[299]++, await client.query(userQuery, [userId]));
          /* istanbul ignore next */
          cov_cf7v579xf().s[300]++;
          if (userResult.rows.length === 0) {
            /* istanbul ignore next */
            cov_cf7v579xf().b[70][0]++;
            cov_cf7v579xf().s[301]++;
            throw new Error('User not found');
          } else
          /* istanbul ignore next */
          {
            cov_cf7v579xf().b[70][1]++;
          }
          cov_cf7v579xf().s[302]++;
          if (userResult.rows[0].role !== 'department_head') {
            /* istanbul ignore next */
            cov_cf7v579xf().b[71][0]++;
            cov_cf7v579xf().s[303]++;
            throw new Error('User must have department_head role');
          } else
          /* istanbul ignore next */
          {
            cov_cf7v579xf().b[71][1]++;
          }
          // Update the department within the same transaction
          cov_cf7v579xf().s[304]++;
          await client.query('UPDATE departments SET department_head_user_id = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2', [userId, data.departmentId]);
        } else
        /* istanbul ignore next */
        {
          cov_cf7v579xf().b[69][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[68][1]++;
      }
      cov_cf7v579xf().s[305]++;
      await client.query('COMMIT');
      // Return updated department head data from transaction
      /* istanbul ignore next */
      cov_cf7v579xf().s[306]++;
      logger_1.default.info('Transaction committed successfully', {
        userId
      });
      const result =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[307]++, {
        id:
        /* istanbul ignore next */
        (cov_cf7v579xf().b[72][0]++, updatedUserData?.id) ||
        /* istanbul ignore next */
        (cov_cf7v579xf().b[72][1]++, userId),
        firstName:
        /* istanbul ignore next */
        (cov_cf7v579xf().b[73][0]++, updatedUserData?.first_name) ||
        /* istanbul ignore next */
        (cov_cf7v579xf().b[73][1]++, data.firstName),
        lastName:
        /* istanbul ignore next */
        (cov_cf7v579xf().b[74][0]++, updatedUserData?.last_name) ||
        /* istanbul ignore next */
        (cov_cf7v579xf().b[74][1]++, data.lastName),
        email:
        /* istanbul ignore next */
        (cov_cf7v579xf().b[75][0]++, updatedUserData?.email) ||
        /* istanbul ignore next */
        (cov_cf7v579xf().b[75][1]++, data.email),
        status: updatedUserData?.is_active ?
        /* istanbul ignore next */
        (cov_cf7v579xf().b[76][0]++, 'active') :
        /* istanbul ignore next */
        (cov_cf7v579xf().b[76][1]++, 'inactive'),
        createdAt: updatedUserData?.created_at,
        updatedAt: updatedUserData?.updated_at,
        department: data.departmentId ?
        /* istanbul ignore next */
        (cov_cf7v579xf().b[77][0]++, {
          id: data.departmentId,
          name: null,
          // We'll need to fetch this separately if needed
          description: null
        }) :
        /* istanbul ignore next */
        (cov_cf7v579xf().b[77][1]++, null)
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[308]++;
      logger_1.default.info('Department head updated successfully', {
        userId,
        departmentId: data.departmentId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[309]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[310]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[311]++;
      logger_1.default.error('Failed to update department head', {
        error: error.message,
        userId,
        data
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[312]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[313]++;
      client.release();
    }
  }
  /**
   * Delete department head
   */
  async deleteDepartmentHead(userId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[17]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[314]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[315]++, await pool.connect());
    /* istanbul ignore next */
    cov_cf7v579xf().s[316]++;
    try {
      /* istanbul ignore next */
      cov_cf7v579xf().s[317]++;
      await client.query('BEGIN');
      // Check if user exists and is a department head
      const existingUser =
      /* istanbul ignore next */
      (cov_cf7v579xf().s[318]++, await client.query('SELECT id FROM users WHERE id = $1 AND role = $2', [userId, 'department_head']));
      /* istanbul ignore next */
      cov_cf7v579xf().s[319]++;
      if (existingUser.rows.length === 0) {
        /* istanbul ignore next */
        cov_cf7v579xf().b[78][0]++;
        cov_cf7v579xf().s[320]++;
        throw new Error('Department head not found');
      } else
      /* istanbul ignore next */
      {
        cov_cf7v579xf().b[78][1]++;
      }
      // Remove from any assigned department
      cov_cf7v579xf().s[321]++;
      await client.query('UPDATE departments SET department_head_user_id = NULL WHERE department_head_user_id = $1', [userId]);
      // Delete the user
      /* istanbul ignore next */
      cov_cf7v579xf().s[322]++;
      await client.query('DELETE FROM users WHERE id = $1', [userId]);
      /* istanbul ignore next */
      cov_cf7v579xf().s[323]++;
      await client.query('COMMIT');
      /* istanbul ignore next */
      cov_cf7v579xf().s[324]++;
      logger_1.default.info('Department head deleted successfully', {
        userId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[325]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_cf7v579xf().s[326]++;
      logger_1.default.error('Failed to delete department head', {
        error: error.message,
        userId
      });
      /* istanbul ignore next */
      cov_cf7v579xf().s[327]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_cf7v579xf().s[328]++;
      client.release();
    }
  }
  /**
   * Assign department head using a specific database client (for transactions)
   */
  async assignDepartmentHeadWithClient(client, departmentId, userId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[18]++;
    // First verify the user has department_head role
    const userQuery =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[329]++, 'SELECT role FROM users WHERE id = $1');
    const userResult =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[330]++, await client.query(userQuery, [userId]));
    /* istanbul ignore next */
    cov_cf7v579xf().s[331]++;
    if (userResult.rows.length === 0) {
      /* istanbul ignore next */
      cov_cf7v579xf().b[79][0]++;
      cov_cf7v579xf().s[332]++;
      throw new Error('User not found');
    } else
    /* istanbul ignore next */
    {
      cov_cf7v579xf().b[79][1]++;
    }
    cov_cf7v579xf().s[333]++;
    if (userResult.rows[0].role !== 'department_head') {
      /* istanbul ignore next */
      cov_cf7v579xf().b[80][0]++;
      cov_cf7v579xf().s[334]++;
      throw new Error('User must have department_head role');
    } else
    /* istanbul ignore next */
    {
      cov_cf7v579xf().b[80][1]++;
    }
    // Update the department
    const updateQuery =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[335]++, 'UPDATE departments SET department_head_user_id = $1 WHERE id = $2');
    /* istanbul ignore next */
    cov_cf7v579xf().s[336]++;
    await client.query(updateQuery, [userId, departmentId]);
  }
  /**
   * Generate temporary password for new department heads
   */
  generateTemporaryPassword() {
    /* istanbul ignore next */
    cov_cf7v579xf().f[19]++;
    const chars =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[337]++, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');
    let password =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[338]++, '');
    /* istanbul ignore next */
    cov_cf7v579xf().s[339]++;
    for (let i =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[340]++, 0); i < 8; i++) {
      /* istanbul ignore next */
      cov_cf7v579xf().s[341]++;
      password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    /* istanbul ignore next */
    cov_cf7v579xf().s[342]++;
    return password;
  }
  /**
   * Get employees in a department
   */
  async getDepartmentEmployees(departmentId) {
    /* istanbul ignore next */
    cov_cf7v579xf().f[20]++;
    const pool =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[343]++, (0, database_1.getPool)());
    const query =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[344]++, `
      SELECT 
        e.id,
        e.user_id as "userId",
        e.employee_id as "employeeId",
        u.email,
        u.first_name as "firstName",
        u.last_name as "lastName",
        e.department_id as "departmentId",
        d.name as "departmentName",
        e.position,
        e.employment_type as "employmentType",
        e.hire_date as "hireDate",
        e.base_salary as "baseSalary",
        e.status,
        e.created_at as "createdAt",
        e.updated_at as "updatedAt"
      FROM employees e
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      WHERE e.department_id = $1
      ORDER BY u.last_name, u.first_name
    `);
    const result =
    /* istanbul ignore next */
    (cov_cf7v579xf().s[345]++, await pool.query(query, [departmentId]));
    /* istanbul ignore next */
    cov_cf7v579xf().s[346]++;
    return result.rows;
  }
}
/* istanbul ignore next */
cov_cf7v579xf().s[347]++;
exports.DepartmentService = DepartmentService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,