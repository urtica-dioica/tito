d86700256bbd232dd06a1c7f73b1855f
"use strict";

/* istanbul ignore next */
function cov_b86wzbv2j() {
  var path = "/home/kim/tito/server/src/models/payroll/PayrollRecord.ts";
  var hash = "a3ce74a32959037a03f480f6c6d8c7341e66057c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/models/payroll/PayrollRecord.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "6": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 46
        }
      },
      "7": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 14,
          column: 48
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "9": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 24,
          column: 7
        }
      },
      "10": {
        start: {
          line: 25,
          column: 27
        },
        end: {
          line: 41,
          column: 13
        }
      },
      "11": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 42,
          column: 60
        }
      },
      "12": {
        start: {
          line: 43,
          column: 27
        },
        end: {
          line: 43,
          column: 41
        }
      },
      "13": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "14": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 26
        }
      },
      "15": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 100
        }
      },
      "16": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 24
        }
      },
      "17": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 29
        }
      },
      "18": {
        start: {
          line: 60,
          column: 23
        },
        end: {
          line: 60,
          column: 48
        }
      },
      "19": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "20": {
        start: {
          line: 62,
          column: 26
        },
        end: {
          line: 62,
          column: 71
        }
      },
      "21": {
        start: {
          line: 63,
          column: 27
        },
        end: {
          line: 63,
          column: 58
        }
      },
      "22": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 42
        }
      },
      "23": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 103
        }
      },
      "24": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 24
        }
      },
      "25": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 29
        }
      },
      "26": {
        start: {
          line: 75,
          column: 23
        },
        end: {
          line: 75,
          column: 48
        }
      },
      "27": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "28": {
        start: {
          line: 77,
          column: 26
        },
        end: {
          line: 80,
          column: 7
        }
      },
      "29": {
        start: {
          line: 81,
          column: 27
        },
        end: {
          line: 81,
          column: 83
        }
      },
      "30": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 42
        }
      },
      "31": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "32": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 24
        }
      },
      "33": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 29
        }
      },
      "34": {
        start: {
          line: 97,
          column: 23
        },
        end: {
          line: 97,
          column: 48
        }
      },
      "35": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "36": {
        start: {
          line: 99,
          column: 85
        },
        end: {
          line: 99,
          column: 91
        }
      },
      "37": {
        start: {
          line: 100,
          column: 27
        },
        end: {
          line: 100,
          column: 45
        }
      },
      "38": {
        start: {
          line: 101,
          column: 30
        },
        end: {
          line: 101,
          column: 32
        }
      },
      "39": {
        start: {
          line: 102,
          column: 31
        },
        end: {
          line: 102,
          column: 33
        }
      },
      "40": {
        start: {
          line: 103,
          column: 27
        },
        end: {
          line: 103,
          column: 29
        }
      },
      "41": {
        start: {
          line: 104,
          column: 29
        },
        end: {
          line: 104,
          column: 30
        }
      },
      "42": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "43": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 72
        }
      },
      "44": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 47
        }
      },
      "45": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "46": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 66
        }
      },
      "47": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 41
        }
      },
      "48": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "49": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 61
        }
      },
      "50": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 36
        }
      },
      "51": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "52": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 66
        }
      },
      "53": {
        start: {
          line: 121,
          column: 31
        },
        end: {
          line: 121,
          column: 84
        }
      },
      "54": {
        start: {
          line: 122,
          column: 32
        },
        end: {
          line: 122,
          column: 70
        }
      },
      "55": {
        start: {
          line: 123,
          column: 26
        },
        end: {
          line: 123,
          column: 61
        }
      },
      "56": {
        start: {
          line: 125,
          column: 26
        },
        end: {
          line: 130,
          column: 7
        }
      },
      "57": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 39
        }
      },
      "58": {
        start: {
          line: 132,
          column: 27
        },
        end: {
          line: 132,
          column: 60
        }
      },
      "59": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 136,
          column: 14
        }
      },
      "60": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 102
        }
      },
      "61": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 24
        }
      },
      "62": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 29
        }
      },
      "63": {
        start: {
          line: 147,
          column: 23
        },
        end: {
          line: 147,
          column: 48
        }
      },
      "64": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "65": {
        start: {
          line: 149,
          column: 100
        },
        end: {
          line: 149,
          column: 106
        }
      },
      "66": {
        start: {
          line: 150,
          column: 27
        },
        end: {
          line: 150,
          column: 45
        }
      },
      "67": {
        start: {
          line: 151,
          column: 30
        },
        end: {
          line: 151,
          column: 32
        }
      },
      "68": {
        start: {
          line: 152,
          column: 31
        },
        end: {
          line: 152,
          column: 33
        }
      },
      "69": {
        start: {
          line: 153,
          column: 27
        },
        end: {
          line: 153,
          column: 29
        }
      },
      "70": {
        start: {
          line: 154,
          column: 29
        },
        end: {
          line: 154,
          column: 30
        }
      },
      "71": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "72": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 75
        }
      },
      "73": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 47
        }
      },
      "74": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "75": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 69
        }
      },
      "76": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 41
        }
      },
      "77": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "78": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 70
        }
      },
      "79": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 43
        }
      },
      "80": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "81": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 64
        }
      },
      "82": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 36
        }
      },
      "83": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 173,
          column: 13
        }
      },
      "84": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 66
        }
      },
      "85": {
        start: {
          line: 175,
          column: 31
        },
        end: {
          line: 179,
          column: 7
        }
      },
      "86": {
        start: {
          line: 180,
          column: 32
        },
        end: {
          line: 180,
          column: 70
        }
      },
      "87": {
        start: {
          line: 181,
          column: 26
        },
        end: {
          line: 181,
          column: 61
        }
      },
      "88": {
        start: {
          line: 183,
          column: 26
        },
        end: {
          line: 208,
          column: 7
        }
      },
      "89": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 39
        }
      },
      "90": {
        start: {
          line: 210,
          column: 27
        },
        end: {
          line: 210,
          column: 60
        }
      },
      "91": {
        start: {
          line: 211,
          column: 28
        },
        end: {
          line: 247,
          column: 15
        }
      },
      "92": {
        start: {
          line: 211,
          column: 52
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "93": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 251,
          column: 14
        }
      },
      "94": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 116
        }
      },
      "95": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 24
        }
      },
      "96": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 29
        }
      },
      "97": {
        start: {
          line: 262,
          column: 23
        },
        end: {
          line: 262,
          column: 48
        }
      },
      "98": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 343,
          column: 9
        }
      },
      "99": {
        start: {
          line: 264,
          column: 27
        },
        end: {
          line: 264,
          column: 29
        }
      },
      "100": {
        start: {
          line: 265,
          column: 27
        },
        end: {
          line: 265,
          column: 29
        }
      },
      "101": {
        start: {
          line: 266,
          column: 29
        },
        end: {
          line: 266,
          column: 30
        }
      },
      "102": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 270,
          column: 13
        }
      },
      "103": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 62
        }
      },
      "104": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 46
        }
      },
      "105": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 274,
          column: 13
        }
      },
      "106": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 272,
          column: 69
        }
      },
      "107": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 53
        }
      },
      "108": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 278,
          column: 13
        }
      },
      "109": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 62
        }
      },
      "110": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 46
        }
      },
      "111": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 282,
          column: 13
        }
      },
      "112": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 70
        }
      },
      "113": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 54
        }
      },
      "114": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 286,
          column: 13
        }
      },
      "115": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 71
        }
      },
      "116": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 285,
          column: 55
        }
      },
      "117": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 290,
          column: 13
        }
      },
      "118": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 288,
          column: 67
        }
      },
      "119": {
        start: {
          line: 289,
          column: 16
        },
        end: {
          line: 289,
          column: 51
        }
      },
      "120": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 294,
          column: 13
        }
      },
      "121": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 292,
          column: 66
        }
      },
      "122": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 50
        }
      },
      "123": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 298,
          column: 13
        }
      },
      "124": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 296,
          column: 67
        }
      },
      "125": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 297,
          column: 51
        }
      },
      "126": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 302,
          column: 13
        }
      },
      "127": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 60
        }
      },
      "128": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 301,
          column: 44
        }
      },
      "129": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 306,
          column: 13
        }
      },
      "130": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 58
        }
      },
      "131": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 305,
          column: 42
        }
      },
      "132": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 310,
          column: 13
        }
      },
      "133": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 67
        }
      },
      "134": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 309,
          column: 51
        }
      },
      "135": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 314,
          column: 13
        }
      },
      "136": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 65
        }
      },
      "137": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 313,
          column: 49
        }
      },
      "138": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 318,
          column: 13
        }
      },
      "139": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 316,
          column: 57
        }
      },
      "140": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 317,
          column: 41
        }
      },
      "141": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 321,
          column: 13
        }
      },
      "142": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 320,
          column: 47
        }
      },
      "143": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 58
        }
      },
      "144": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 28
        }
      },
      "145": {
        start: {
          line: 324,
          column: 26
        },
        end: {
          line: 329,
          column: 7
        }
      },
      "146": {
        start: {
          line: 330,
          column: 27
        },
        end: {
          line: 330,
          column: 60
        }
      },
      "147": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 333,
          column: 13
        }
      },
      "148": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 28
        }
      },
      "149": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 93
        }
      },
      "150": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 34
        }
      },
      "151": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 104
        }
      },
      "152": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 24
        }
      },
      "153": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 29
        }
      },
      "154": {
        start: {
          line: 346,
          column: 23
        },
        end: {
          line: 346,
          column: 48
        }
      },
      "155": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "156": {
        start: {
          line: 348,
          column: 26
        },
        end: {
          line: 348,
          column: 69
        }
      },
      "157": {
        start: {
          line: 349,
          column: 27
        },
        end: {
          line: 349,
          column: 58
        }
      },
      "158": {
        start: {
          line: 350,
          column: 28
        },
        end: {
          line: 350,
          column: 54
        }
      },
      "159": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 353,
          column: 13
        }
      },
      "160": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 82
        }
      },
      "161": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 27
        }
      },
      "162": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 98
        }
      },
      "163": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 24
        }
      },
      "164": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 29
        }
      },
      "165": {
        start: {
          line: 365,
          column: 23
        },
        end: {
          line: 365,
          column: 48
        }
      },
      "166": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 384,
          column: 9
        }
      },
      "167": {
        start: {
          line: 367,
          column: 26
        },
        end: {
          line: 371,
          column: 7
        }
      },
      "168": {
        start: {
          line: 372,
          column: 27
        },
        end: {
          line: 372,
          column: 71
        }
      },
      "169": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 31
        }
      },
      "170": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 379,
          column: 15
        }
      },
      "171": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 24
        }
      },
      "172": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 383,
          column: 29
        }
      },
      "173": {
        start: {
          line: 387,
          column: 23
        },
        end: {
          line: 387,
          column: 48
        }
      },
      "174": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 399,
          column: 9
        }
      },
      "175": {
        start: {
          line: 389,
          column: 26
        },
        end: {
          line: 389,
          column: 108
        }
      },
      "176": {
        start: {
          line: 390,
          column: 27
        },
        end: {
          line: 390,
          column: 62
        }
      },
      "177": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 57
        }
      },
      "178": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 394,
          column: 92
        }
      },
      "179": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 24
        }
      },
      "180": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 29
        }
      },
      "181": {
        start: {
          line: 402,
          column: 23
        },
        end: {
          line: 402,
          column: 48
        }
      },
      "182": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 414,
          column: 9
        }
      },
      "183": {
        start: {
          line: 404,
          column: 26
        },
        end: {
          line: 404,
          column: 117
        }
      },
      "184": {
        start: {
          line: 405,
          column: 27
        },
        end: {
          line: 405,
          column: 62
        }
      },
      "185": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 57
        }
      },
      "186": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 95
        }
      },
      "187": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 24
        }
      },
      "188": {
        start: {
          line: 413,
          column: 12
        },
        end: {
          line: 413,
          column: 29
        }
      },
      "189": {
        start: {
          line: 417,
          column: 0
        },
        end: {
          line: 417,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 23
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 13
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 23
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 59
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 63
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 74
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 31
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 96
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        loc: {
          start: {
            line: 146,
            column: 43
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 146
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 211,
            column: 44
          },
          end: {
            line: 211,
            column: 45
          }
        },
        loc: {
          start: {
            line: 211,
            column: 52
          },
          end: {
            line: 247,
            column: 13
          }
        },
        line: 211
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 27
          },
          end: {
            line: 344,
            column: 5
          }
        },
        line: 261
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        loc: {
          start: {
            line: 345,
            column: 21
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 345
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 364,
            column: 4
          },
          end: {
            line: 364,
            column: 5
          }
        },
        loc: {
          start: {
            line: 364,
            column: 47
          },
          end: {
            line: 385,
            column: 5
          }
        },
        line: 364
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 386,
            column: 4
          },
          end: {
            line: 386,
            column: 5
          }
        },
        loc: {
          start: {
            line: 386,
            column: 27
          },
          end: {
            line: 400,
            column: 5
          }
        },
        line: 386
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 401,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 401,
            column: 31
          },
          end: {
            line: 415,
            column: 5
          }
        },
        line: 401
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 29,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 29,
            column: 39
          }
        }, {
          start: {
            line: 29,
            column: 43
          },
          end: {
            line: 29,
            column: 44
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 32
          }
        }, {
          start: {
            line: 30,
            column: 36
          },
          end: {
            line: 30,
            column: 37
          }
        }],
        line: 30
      },
      "5": {
        loc: {
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 31,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 31,
            column: 40
          }
        }, {
          start: {
            line: 31,
            column: 44
          },
          end: {
            line: 31,
            column: 45
          }
        }],
        line: 31
      },
      "6": {
        loc: {
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 32,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 32,
            column: 41
          }
        }, {
          start: {
            line: 32,
            column: 45
          },
          end: {
            line: 32,
            column: 46
          }
        }],
        line: 32
      },
      "7": {
        loc: {
          start: {
            line: 33,
            column: 16
          },
          end: {
            line: 33,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 16
          },
          end: {
            line: 33,
            column: 37
          }
        }, {
          start: {
            line: 33,
            column: 41
          },
          end: {
            line: 33,
            column: 42
          }
        }],
        line: 33
      },
      "8": {
        loc: {
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 34,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 34,
            column: 36
          }
        }, {
          start: {
            line: 34,
            column: 40
          },
          end: {
            line: 34,
            column: 41
          }
        }],
        line: 34
      },
      "9": {
        loc: {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 35,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 35,
            column: 37
          }
        }, {
          start: {
            line: 35,
            column: 41
          },
          end: {
            line: 35,
            column: 42
          }
        }],
        line: 35
      },
      "10": {
        loc: {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 36,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 36,
            column: 30
          }
        }, {
          start: {
            line: 36,
            column: 34
          },
          end: {
            line: 36,
            column: 35
          }
        }],
        line: 36
      },
      "11": {
        loc: {
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 37,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 37,
            column: 28
          }
        }, {
          start: {
            line: 37,
            column: 32
          },
          end: {
            line: 37,
            column: 33
          }
        }],
        line: 37
      },
      "12": {
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 38,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 38,
            column: 37
          }
        }, {
          start: {
            line: 38,
            column: 41
          },
          end: {
            line: 38,
            column: 42
          }
        }],
        line: 38
      },
      "13": {
        loc: {
          start: {
            line: 39,
            column: 16
          },
          end: {
            line: 39,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 16
          },
          end: {
            line: 39,
            column: 35
          }
        }, {
          start: {
            line: 39,
            column: 39
          },
          end: {
            line: 39,
            column: 40
          }
        }],
        line: 39
      },
      "14": {
        loc: {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 27
          }
        }, {
          start: {
            line: 40,
            column: 31
          },
          end: {
            line: 40,
            column: 38
          }
        }],
        line: 40
      },
      "15": {
        loc: {
          start: {
            line: 64,
            column: 19
          },
          end: {
            line: 64,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 19
          },
          end: {
            line: 64,
            column: 33
          }
        }, {
          start: {
            line: 64,
            column: 37
          },
          end: {
            line: 64,
            column: 41
          }
        }],
        line: 64
      },
      "16": {
        loc: {
          start: {
            line: 82,
            column: 19
          },
          end: {
            line: 82,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 19
          },
          end: {
            line: 82,
            column: 33
          }
        }, {
          start: {
            line: 82,
            column: 37
          },
          end: {
            line: 82,
            column: 41
          }
        }],
        line: 82
      },
      "17": {
        loc: {
          start: {
            line: 96,
            column: 18
          },
          end: {
            line: 96,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 96,
            column: 27
          },
          end: {
            line: 96,
            column: 29
          }
        }],
        line: 96
      },
      "18": {
        loc: {
          start: {
            line: 99,
            column: 20
          },
          end: {
            line: 99,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 99,
            column: 27
          },
          end: {
            line: 99,
            column: 28
          }
        }],
        line: 99
      },
      "19": {
        loc: {
          start: {
            line: 99,
            column: 30
          },
          end: {
            line: 99,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 99,
            column: 38
          },
          end: {
            line: 99,
            column: 40
          }
        }],
        line: 99
      },
      "20": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "21": {
        loc: {
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "22": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "23": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "24": {
        loc: {
          start: {
            line: 146,
            column: 30
          },
          end: {
            line: 146,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 146,
            column: 39
          },
          end: {
            line: 146,
            column: 41
          }
        }],
        line: 146
      },
      "25": {
        loc: {
          start: {
            line: 149,
            column: 20
          },
          end: {
            line: 149,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 149,
            column: 27
          },
          end: {
            line: 149,
            column: 28
          }
        }],
        line: 149
      },
      "26": {
        loc: {
          start: {
            line: 149,
            column: 30
          },
          end: {
            line: 149,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 149,
            column: 38
          },
          end: {
            line: 149,
            column: 40
          }
        }],
        line: 149
      },
      "27": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "28": {
        loc: {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "29": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "30": {
        loc: {
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "31": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "32": {
        loc: {
          start: {
            line: 225,
            column: 34
          },
          end: {
            line: 225,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 225,
            column: 34
          },
          end: {
            line: 225,
            column: 54
          }
        }, {
          start: {
            line: 225,
            column: 58
          },
          end: {
            line: 225,
            column: 59
          }
        }],
        line: 225
      },
      "33": {
        loc: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 270,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 270,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "34": {
        loc: {
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 274,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 274,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "35": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "36": {
        loc: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "37": {
        loc: {
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 286,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 286,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "38": {
        loc: {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 290,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 290,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "39": {
        loc: {
          start: {
            line: 291,
            column: 12
          },
          end: {
            line: 294,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 12
          },
          end: {
            line: 294,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "40": {
        loc: {
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "41": {
        loc: {
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 302,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 302,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "42": {
        loc: {
          start: {
            line: 303,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "43": {
        loc: {
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 310,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 310,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "44": {
        loc: {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "45": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "46": {
        loc: {
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "47": {
        loc: {
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 333,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 333,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "48": {
        loc: {
          start: {
            line: 350,
            column: 29
          },
          end: {
            line: 350,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 350,
            column: 29
          },
          end: {
            line: 350,
            column: 44
          }
        }, {
          start: {
            line: 350,
            column: 48
          },
          end: {
            line: 350,
            column: 49
          }
        }],
        line: 350
      },
      "49": {
        loc: {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "50": {
        loc: {
          start: {
            line: 391,
            column: 19
          },
          end: {
            line: 391,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 391,
            column: 19
          },
          end: {
            line: 391,
            column: 51
          }
        }, {
          start: {
            line: 391,
            column: 55
          },
          end: {
            line: 391,
            column: 56
          }
        }],
        line: 391
      },
      "51": {
        loc: {
          start: {
            line: 406,
            column: 19
          },
          end: {
            line: 406,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 406,
            column: 19
          },
          end: {
            line: 406,
            column: 51
          }
        }, {
          start: {
            line: 406,
            column: 55
          },
          end: {
            line: 406,
            column: 56
          }
        }],
        line: 406
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0],
      "19": [0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0],
      "26": [0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/models/payroll/PayrollRecord.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/models/payroll/PayrollRecord.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface PayrollRecord {\n  id: string;\n  payroll_period_id: string;\n  employee_id: string;\n  base_salary: number;\n  total_worked_hours: number;\n  hourly_rate: number;\n  total_regular_hours: number;\n  total_overtime_hours: number;\n  total_late_hours: number;\n  late_deductions: number;\n  paid_leave_hours: number; // Hours from approved leave days\n  gross_pay: number;\n  net_pay: number;\n  total_deductions: number;\n  total_benefits: number;\n  status: 'draft' | 'processed' | 'paid';\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface PayrollRecordWithEmployee extends PayrollRecord {\n  period_name?: string;\n  department_id?: string;\n  department_name?: string;\n  approval_status?: 'pending' | 'approved' | 'rejected';\n  approval_approved_at?: Date;\n  approval_comments?: string;\n  employee: {\n    employee_id: string;\n    user: {\n      first_name: string;\n      last_name: string;\n    };\n    department: {\n      id?: string;\n      name: string;\n    };\n  };\n}\n\nexport interface CreatePayrollRecordData {\n  payroll_period_id: string;\n  employee_id: string;\n  base_salary: number;\n  total_worked_hours?: number;\n  hourly_rate?: number;\n  total_regular_hours?: number;\n  total_overtime_hours?: number;\n  total_late_hours?: number;\n  late_deductions?: number;\n  paid_leave_hours?: number; // Hours from approved leave days\n  gross_pay?: number;\n  net_pay?: number;\n  total_deductions?: number;\n  total_benefits?: number;\n  status?: 'draft' | 'processed' | 'paid';\n}\n\nexport interface UpdatePayrollRecordData {\n  base_salary?: number;\n  total_worked_hours?: number;\n  hourly_rate?: number;\n  total_regular_hours?: number;\n  total_overtime_hours?: number;\n  total_late_hours?: number;\n  late_deductions?: number;\n  paid_leave_hours?: number; // Hours from approved leave days\n  gross_pay?: number;\n  net_pay?: number;\n  total_deductions?: number;\n  total_benefits?: number;\n  status?: 'draft' | 'processed' | 'paid';\n}\n\nexport interface PayrollRecordListParams {\n  payroll_period_id?: string;\n  employee_id?: string;\n  department_id?: string;\n  status?: string;\n  page?: number;\n  limit?: number;\n}\n\nclass PayrollRecordModel {\n  private pool = getPool();\n\n  async create(data: CreatePayrollRecordData): Promise<PayrollRecord> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        INSERT INTO payroll_records (\n          payroll_period_id, employee_id, base_salary, total_worked_hours, \n          hourly_rate, total_regular_hours, total_overtime_hours, total_late_hours,\n          late_deductions, paid_leave_hours, gross_pay, net_pay, total_deductions, total_benefits, status\n        )\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)\n        RETURNING *\n      `;\n      const values = [\n        data.payroll_period_id,\n        data.employee_id,\n        data.base_salary,\n        data.total_worked_hours ?? 0,\n        data.hourly_rate ?? 0,\n        data.total_regular_hours ?? 0,\n        data.total_overtime_hours ?? 0,\n        data.total_late_hours ?? 0,\n        data.late_deductions ?? 0,\n        data.paid_leave_hours ?? 0,\n        data.gross_pay ?? 0,\n        data.net_pay ?? 0,\n        data.total_deductions ?? 0,\n        data.total_benefits ?? 0,\n        data.status ?? 'draft'\n      ];\n      \n      const result = await client.query(query, values);\n      const record = result.rows[0];\n      \n      logger.info('Payroll record created', { \n        recordId: record.id, \n        employeeId: record.employee_id,\n        payrollPeriodId: record.payroll_period_id\n      });\n      return record;\n    } catch (error) {\n      logger.error('Error creating payroll record', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findById(id: string): Promise<PayrollRecord | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT * FROM payroll_records WHERE id = $1';\n      const result = await client.query(query, [id]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding payroll record by ID', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findByPeriodAndEmployee(payrollPeriodId: string, employeeId: string): Promise<PayrollRecord | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT * FROM payroll_records \n        WHERE payroll_period_id = $1 AND employee_id = $2\n      `;\n      const result = await client.query(query, [payrollPeriodId, employeeId]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding payroll record by period and employee', { \n        error: (error as Error).message, \n        payrollPeriodId, \n        employeeId \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findAll(params: PayrollRecordListParams = {}): Promise<{ records: PayrollRecord[]; total: number }> {\n    const client = await this.pool.connect();\n    try {\n      const { page = 1, limit = 10, payroll_period_id, employee_id, status } = params;\n      const offset = (page - 1) * limit;\n      \n      let whereClause = '';\n      const conditions: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (payroll_period_id) {\n        conditions.push(`payroll_period_id = $${paramIndex++}`);\n        values.push(payroll_period_id);\n      }\n\n      if (employee_id) {\n        conditions.push(`employee_id = $${paramIndex++}`);\n        values.push(employee_id);\n      }\n\n      if (status) {\n        conditions.push(`status = $${paramIndex++}`);\n        values.push(status);\n      }\n\n      if (conditions.length > 0) {\n        whereClause = `WHERE ${conditions.join(' AND ')}`;\n      }\n\n      // Get total count\n      const countQuery = `SELECT COUNT(*) FROM payroll_records ${whereClause}`;\n      const countResult = await client.query(countQuery, values);\n      const total = parseInt(countResult.rows[0].count);\n\n      // Get records\n      const query = `\n        SELECT * FROM payroll_records \n        ${whereClause}\n        ORDER BY created_at DESC\n        LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n      `;\n      values.push(limit, offset);\n      \n      const result = await client.query(query, values);\n      \n      return {\n        records: result.rows,\n        total\n      };\n    } catch (error) {\n      logger.error('Error finding payroll records', { error: (error as Error).message, params });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findAllWithEmployee(params: PayrollRecordListParams = {}): Promise<{ records: PayrollRecordWithEmployee[]; total: number }> {\n    const client = await this.pool.connect();\n    try {\n      const { page = 1, limit = 10, payroll_period_id, employee_id, department_id, status } = params;\n      const offset = (page - 1) * limit;\n      \n      let whereClause = '';\n      const conditions: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (payroll_period_id) {\n        conditions.push(`pr.payroll_period_id = $${paramIndex++}`);\n        values.push(payroll_period_id);\n      }\n\n      if (employee_id) {\n        conditions.push(`pr.employee_id = $${paramIndex++}`);\n        values.push(employee_id);\n      }\n\n      if (department_id) {\n        conditions.push(`e.department_id = $${paramIndex++}`);\n        values.push(department_id);\n      }\n\n      if (status) {\n        conditions.push(`pr.status = $${paramIndex++}`);\n        values.push(status);\n      }\n\n      if (conditions.length > 0) {\n        whereClause = `WHERE ${conditions.join(' AND ')}`;\n      }\n\n      // Get total count\n      const countQuery = `\n        SELECT COUNT(*) FROM payroll_records pr\n        JOIN employees e ON pr.employee_id = e.id\n        ${whereClause}\n      `;\n      const countResult = await client.query(countQuery, values);\n      const total = parseInt(countResult.rows[0].count);\n\n      // Get records with employee info and overall period approval status\n      const query = `\n        SELECT \n          pr.*,\n          e.employee_id as employee_display_id,\n          e.department_id,\n          u.first_name,\n          u.last_name,\n          d.name as department_name,\n          pp.period_name,\n          pp.status as period_status,\n          CASE \n            WHEN pp.status = 'completed' THEN 'approved'\n            WHEN pp.status = 'sent_for_review' THEN 'pending'\n            ELSE 'pending'\n          END as approval_status,\n          NULL as approval_approved_at,\n          NULL as approval_comments\n        FROM payroll_records pr\n        JOIN employees e ON pr.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        LEFT JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n        ${whereClause}\n        ORDER BY pr.created_at DESC\n        LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n      `;\n      values.push(limit, offset);\n      \n      const result = await client.query(query, values);\n      \n      const records: PayrollRecordWithEmployee[] = result.rows.map(row => ({\n        id: row.id,\n        payroll_period_id: row.payroll_period_id,\n        employee_id: row.employee_id, // This is pr.employee_id (UUID)\n        period_name: row.period_name,\n        department_id: row.department_id,\n        department_name: row.department_name,\n        base_salary: row.base_salary,\n        total_worked_hours: row.total_worked_hours,\n        hourly_rate: row.hourly_rate,\n        total_regular_hours: row.total_regular_hours,\n        total_overtime_hours: row.total_overtime_hours,\n        total_late_hours: row.total_late_hours,\n        late_deductions: row.late_deductions,\n        paid_leave_hours: row.paid_leave_hours || 0,\n        gross_pay: row.gross_pay,\n        net_pay: row.net_pay,\n        total_deductions: row.total_deductions,\n        total_benefits: row.total_benefits,\n        status: row.status,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        approval_status: row.approval_status,\n        approval_approved_at: row.approval_approved_at,\n        approval_comments: row.approval_comments,\n        employee: {\n          employee_id: row.employee_display_id,\n          user: {\n            first_name: row.first_name,\n            last_name: row.last_name\n          },\n          department: {\n            id: row.department_id,\n            name: row.department_name\n          }\n        }\n      }));\n      \n      return {\n        records,\n        total\n      };\n    } catch (error) {\n      logger.error('Error finding payroll records with employee', { error: (error as Error).message, params });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async update(id: string, data: UpdatePayrollRecordData): Promise<PayrollRecord | null> {\n    const client = await this.pool.connect();\n    try {\n      const fields: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (data.base_salary !== undefined) {\n        fields.push(`base_salary = $${paramIndex++}`);\n        values.push(data.base_salary);\n      }\n\n      if (data.total_worked_hours !== undefined) {\n        fields.push(`total_worked_hours = $${paramIndex++}`);\n        values.push(data.total_worked_hours);\n      }\n\n      if (data.hourly_rate !== undefined) {\n        fields.push(`hourly_rate = $${paramIndex++}`);\n        values.push(data.hourly_rate);\n      }\n\n      if (data.total_regular_hours !== undefined) {\n        fields.push(`total_regular_hours = $${paramIndex++}`);\n        values.push(data.total_regular_hours);\n      }\n\n      if (data.total_overtime_hours !== undefined) {\n        fields.push(`total_overtime_hours = $${paramIndex++}`);\n        values.push(data.total_overtime_hours);\n      }\n\n      if (data.total_late_hours !== undefined) {\n        fields.push(`total_late_hours = $${paramIndex++}`);\n        values.push(data.total_late_hours);\n      }\n\n      if (data.late_deductions !== undefined) {\n        fields.push(`late_deductions = $${paramIndex++}`);\n        values.push(data.late_deductions);\n      }\n\n      if (data.paid_leave_hours !== undefined) {\n        fields.push(`paid_leave_hours = $${paramIndex++}`);\n        values.push(data.paid_leave_hours);\n      }\n\n      if (data.gross_pay !== undefined) {\n        fields.push(`gross_pay = $${paramIndex++}`);\n        values.push(data.gross_pay);\n      }\n\n      if (data.net_pay !== undefined) {\n        fields.push(`net_pay = $${paramIndex++}`);\n        values.push(data.net_pay);\n      }\n\n      if (data.total_deductions !== undefined) {\n        fields.push(`total_deductions = $${paramIndex++}`);\n        values.push(data.total_deductions);\n      }\n\n      if (data.total_benefits !== undefined) {\n        fields.push(`total_benefits = $${paramIndex++}`);\n        values.push(data.total_benefits);\n      }\n\n      if (data.status !== undefined) {\n        fields.push(`status = $${paramIndex++}`);\n        values.push(data.status);\n      }\n\n      if (fields.length === 0) {\n        return await this.findById(id);\n      }\n\n      fields.push(`updated_at = CURRENT_TIMESTAMP`);\n      values.push(id);\n\n      const query = `\n        UPDATE payroll_records \n        SET ${fields.join(', ')}\n        WHERE id = $${paramIndex}\n        RETURNING *\n      `;\n\n      const result = await client.query(query, values);\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      logger.info('Payroll record updated', { recordId: id, updates: data });\n      return result.rows[0];\n    } catch (error) {\n      logger.error('Error updating payroll record', { error: (error as Error).message, id, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async delete(id: string): Promise<boolean> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'DELETE FROM payroll_records WHERE id = $1';\n      const result = await client.query(query, [id]);\n      \n      const deleted = (result.rowCount || 0) > 0;\n      if (deleted) {\n        logger.info('Payroll record deleted', { recordId: id });\n      }\n      \n      return deleted;\n    } catch (error) {\n      logger.error('Error deleting payroll record', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findByPayrollPeriod(payrollPeriodId: string): Promise<PayrollRecord[]> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT * FROM payroll_records \n        WHERE payroll_period_id = $1\n        ORDER BY created_at ASC\n      `;\n      const result = await client.query(query, [payrollPeriodId]);\n      return result.rows;\n    } catch (error) {\n      logger.error('Error finding payroll records by period', { \n        error: (error as Error).message, \n        payrollPeriodId \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getTotalNetPay(): Promise<number> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT COALESCE(SUM(net_pay), 0) as total FROM payroll_records WHERE status = $1';\n      const result = await client.query(query, ['paid']);\n      return parseFloat(result.rows[0].total) || 0;\n    } catch (error) {\n      logger.error('Error getting total net pay', { error: (error as Error).message });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getTotalDeductions(): Promise<number> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT COALESCE(SUM(total_deductions), 0) as total FROM payroll_records WHERE status = $1';\n      const result = await client.query(query, ['paid']);\n      return parseFloat(result.rows[0].total) || 0;\n    } catch (error) {\n      logger.error('Error getting total deductions', { error: (error as Error).message });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n}\n\nexport const payrollRecordModel = new PayrollRecordModel();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a3ce74a32959037a03f480f6c6d8c7341e66057c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_b86wzbv2j = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_b86wzbv2j();
var __importDefault =
/* istanbul ignore next */
(cov_b86wzbv2j().s[0]++,
/* istanbul ignore next */
(cov_b86wzbv2j().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_b86wzbv2j().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_b86wzbv2j().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_b86wzbv2j().f[0]++;
  cov_b86wzbv2j().s[1]++;
  return /* istanbul ignore next */(cov_b86wzbv2j().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_b86wzbv2j().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_b86wzbv2j().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_b86wzbv2j().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_b86wzbv2j().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_b86wzbv2j().s[3]++;
exports.payrollRecordModel = void 0;
const database_1 =
/* istanbul ignore next */
(cov_b86wzbv2j().s[4]++, require("../../config/database"));
const logger_1 =
/* istanbul ignore next */
(cov_b86wzbv2j().s[5]++, __importDefault(require("../../utils/logger")));
class PayrollRecordModel {
  constructor() {
    /* istanbul ignore next */
    cov_b86wzbv2j().f[1]++;
    cov_b86wzbv2j().s[6]++;
    this.pool = (0, database_1.getPool)();
  }
  async create(data) {
    /* istanbul ignore next */
    cov_b86wzbv2j().f[2]++;
    const client =
    /* istanbul ignore next */
    (cov_b86wzbv2j().s[7]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_b86wzbv2j().s[8]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[9]++, `
        INSERT INTO payroll_records (
          payroll_period_id, employee_id, base_salary, total_worked_hours, 
          hourly_rate, total_regular_hours, total_overtime_hours, total_late_hours,
          late_deductions, paid_leave_hours, gross_pay, net_pay, total_deductions, total_benefits, status
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
        RETURNING *
      `);
      const values =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[10]++, [data.payroll_period_id, data.employee_id, data.base_salary,
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[3][0]++, data.total_worked_hours) ??
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[3][1]++, 0),
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[4][0]++, data.hourly_rate) ??
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[4][1]++, 0),
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[5][0]++, data.total_regular_hours) ??
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[5][1]++, 0),
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[6][0]++, data.total_overtime_hours) ??
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[6][1]++, 0),
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[7][0]++, data.total_late_hours) ??
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[7][1]++, 0),
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[8][0]++, data.late_deductions) ??
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[8][1]++, 0),
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[9][0]++, data.paid_leave_hours) ??
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[9][1]++, 0),
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[10][0]++, data.gross_pay) ??
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[10][1]++, 0),
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[11][0]++, data.net_pay) ??
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[11][1]++, 0),
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[12][0]++, data.total_deductions) ??
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[12][1]++, 0),
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[13][0]++, data.total_benefits) ??
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[13][1]++, 0),
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[14][0]++, data.status) ??
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[14][1]++, 'draft')]);
      const result =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[11]++, await client.query(query, values));
      const record =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[12]++, result.rows[0]);
      /* istanbul ignore next */
      cov_b86wzbv2j().s[13]++;
      logger_1.default.info('Payroll record created', {
        recordId: record.id,
        employeeId: record.employee_id,
        payrollPeriodId: record.payroll_period_id
      });
      /* istanbul ignore next */
      cov_b86wzbv2j().s[14]++;
      return record;
    } catch (error) {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[15]++;
      logger_1.default.error('Error creating payroll record', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_b86wzbv2j().s[16]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[17]++;
      client.release();
    }
  }
  async findById(id) {
    /* istanbul ignore next */
    cov_b86wzbv2j().f[3]++;
    const client =
    /* istanbul ignore next */
    (cov_b86wzbv2j().s[18]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_b86wzbv2j().s[19]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[20]++, 'SELECT * FROM payroll_records WHERE id = $1');
      const result =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[21]++, await client.query(query, [id]));
      /* istanbul ignore next */
      cov_b86wzbv2j().s[22]++;
      return /* istanbul ignore next */(cov_b86wzbv2j().b[15][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[15][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[23]++;
      logger_1.default.error('Error finding payroll record by ID', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_b86wzbv2j().s[24]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[25]++;
      client.release();
    }
  }
  async findByPeriodAndEmployee(payrollPeriodId, employeeId) {
    /* istanbul ignore next */
    cov_b86wzbv2j().f[4]++;
    const client =
    /* istanbul ignore next */
    (cov_b86wzbv2j().s[26]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_b86wzbv2j().s[27]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[28]++, `
        SELECT * FROM payroll_records 
        WHERE payroll_period_id = $1 AND employee_id = $2
      `);
      const result =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[29]++, await client.query(query, [payrollPeriodId, employeeId]));
      /* istanbul ignore next */
      cov_b86wzbv2j().s[30]++;
      return /* istanbul ignore next */(cov_b86wzbv2j().b[16][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[16][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[31]++;
      logger_1.default.error('Error finding payroll record by period and employee', {
        error: error.message,
        payrollPeriodId,
        employeeId
      });
      /* istanbul ignore next */
      cov_b86wzbv2j().s[32]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[33]++;
      client.release();
    }
  }
  async findAll(params =
  /* istanbul ignore next */
  (cov_b86wzbv2j().b[17][0]++, {})) {
    /* istanbul ignore next */
    cov_b86wzbv2j().f[5]++;
    const client =
    /* istanbul ignore next */
    (cov_b86wzbv2j().s[34]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_b86wzbv2j().s[35]++;
    try {
      const {
        page =
        /* istanbul ignore next */
        (cov_b86wzbv2j().b[18][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_b86wzbv2j().b[19][0]++, 10),
        payroll_period_id,
        employee_id,
        status
      } =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[36]++, params);
      const offset =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[37]++, (page - 1) * limit);
      let whereClause =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[38]++, '');
      const conditions =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[39]++, []);
      const values =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[40]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[41]++, 1);
      /* istanbul ignore next */
      cov_b86wzbv2j().s[42]++;
      if (payroll_period_id) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[20][0]++;
        cov_b86wzbv2j().s[43]++;
        conditions.push(`payroll_period_id = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[44]++;
        values.push(payroll_period_id);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[20][1]++;
      }
      cov_b86wzbv2j().s[45]++;
      if (employee_id) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[21][0]++;
        cov_b86wzbv2j().s[46]++;
        conditions.push(`employee_id = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[47]++;
        values.push(employee_id);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[21][1]++;
      }
      cov_b86wzbv2j().s[48]++;
      if (status) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[22][0]++;
        cov_b86wzbv2j().s[49]++;
        conditions.push(`status = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[50]++;
        values.push(status);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[22][1]++;
      }
      cov_b86wzbv2j().s[51]++;
      if (conditions.length > 0) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[23][0]++;
        cov_b86wzbv2j().s[52]++;
        whereClause = `WHERE ${conditions.join(' AND ')}`;
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[23][1]++;
      }
      // Get total count
      const countQuery =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[53]++, `SELECT COUNT(*) FROM payroll_records ${whereClause}`);
      const countResult =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[54]++, await client.query(countQuery, values));
      const total =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[55]++, parseInt(countResult.rows[0].count));
      // Get records
      const query =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[56]++, `
        SELECT * FROM payroll_records 
        ${whereClause}
        ORDER BY created_at DESC
        LIMIT $${paramIndex++} OFFSET $${paramIndex++}
      `);
      /* istanbul ignore next */
      cov_b86wzbv2j().s[57]++;
      values.push(limit, offset);
      const result =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[58]++, await client.query(query, values));
      /* istanbul ignore next */
      cov_b86wzbv2j().s[59]++;
      return {
        records: result.rows,
        total
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[60]++;
      logger_1.default.error('Error finding payroll records', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_b86wzbv2j().s[61]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[62]++;
      client.release();
    }
  }
  async findAllWithEmployee(params =
  /* istanbul ignore next */
  (cov_b86wzbv2j().b[24][0]++, {})) {
    /* istanbul ignore next */
    cov_b86wzbv2j().f[6]++;
    const client =
    /* istanbul ignore next */
    (cov_b86wzbv2j().s[63]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_b86wzbv2j().s[64]++;
    try {
      const {
        page =
        /* istanbul ignore next */
        (cov_b86wzbv2j().b[25][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_b86wzbv2j().b[26][0]++, 10),
        payroll_period_id,
        employee_id,
        department_id,
        status
      } =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[65]++, params);
      const offset =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[66]++, (page - 1) * limit);
      let whereClause =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[67]++, '');
      const conditions =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[68]++, []);
      const values =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[69]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[70]++, 1);
      /* istanbul ignore next */
      cov_b86wzbv2j().s[71]++;
      if (payroll_period_id) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[27][0]++;
        cov_b86wzbv2j().s[72]++;
        conditions.push(`pr.payroll_period_id = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[73]++;
        values.push(payroll_period_id);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[27][1]++;
      }
      cov_b86wzbv2j().s[74]++;
      if (employee_id) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[28][0]++;
        cov_b86wzbv2j().s[75]++;
        conditions.push(`pr.employee_id = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[76]++;
        values.push(employee_id);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[28][1]++;
      }
      cov_b86wzbv2j().s[77]++;
      if (department_id) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[29][0]++;
        cov_b86wzbv2j().s[78]++;
        conditions.push(`e.department_id = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[79]++;
        values.push(department_id);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[29][1]++;
      }
      cov_b86wzbv2j().s[80]++;
      if (status) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[30][0]++;
        cov_b86wzbv2j().s[81]++;
        conditions.push(`pr.status = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[82]++;
        values.push(status);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[30][1]++;
      }
      cov_b86wzbv2j().s[83]++;
      if (conditions.length > 0) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[31][0]++;
        cov_b86wzbv2j().s[84]++;
        whereClause = `WHERE ${conditions.join(' AND ')}`;
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[31][1]++;
      }
      // Get total count
      const countQuery =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[85]++, `
        SELECT COUNT(*) FROM payroll_records pr
        JOIN employees e ON pr.employee_id = e.id
        ${whereClause}
      `);
      const countResult =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[86]++, await client.query(countQuery, values));
      const total =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[87]++, parseInt(countResult.rows[0].count));
      // Get records with employee info and overall period approval status
      const query =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[88]++, `
        SELECT 
          pr.*,
          e.employee_id as employee_display_id,
          e.department_id,
          u.first_name,
          u.last_name,
          d.name as department_name,
          pp.period_name,
          pp.status as period_status,
          CASE 
            WHEN pp.status = 'completed' THEN 'approved'
            WHEN pp.status = 'sent_for_review' THEN 'pending'
            ELSE 'pending'
          END as approval_status,
          NULL as approval_approved_at,
          NULL as approval_comments
        FROM payroll_records pr
        JOIN employees e ON pr.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        LEFT JOIN payroll_periods pp ON pr.payroll_period_id = pp.id
        ${whereClause}
        ORDER BY pr.created_at DESC
        LIMIT $${paramIndex++} OFFSET $${paramIndex++}
      `);
      /* istanbul ignore next */
      cov_b86wzbv2j().s[89]++;
      values.push(limit, offset);
      const result =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[90]++, await client.query(query, values));
      const records =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[91]++, result.rows.map(row => {
        /* istanbul ignore next */
        cov_b86wzbv2j().f[7]++;
        cov_b86wzbv2j().s[92]++;
        return {
          id: row.id,
          payroll_period_id: row.payroll_period_id,
          employee_id: row.employee_id,
          // This is pr.employee_id (UUID)
          period_name: row.period_name,
          department_id: row.department_id,
          department_name: row.department_name,
          base_salary: row.base_salary,
          total_worked_hours: row.total_worked_hours,
          hourly_rate: row.hourly_rate,
          total_regular_hours: row.total_regular_hours,
          total_overtime_hours: row.total_overtime_hours,
          total_late_hours: row.total_late_hours,
          late_deductions: row.late_deductions,
          paid_leave_hours:
          /* istanbul ignore next */
          (cov_b86wzbv2j().b[32][0]++, row.paid_leave_hours) ||
          /* istanbul ignore next */
          (cov_b86wzbv2j().b[32][1]++, 0),
          gross_pay: row.gross_pay,
          net_pay: row.net_pay,
          total_deductions: row.total_deductions,
          total_benefits: row.total_benefits,
          status: row.status,
          created_at: row.created_at,
          updated_at: row.updated_at,
          approval_status: row.approval_status,
          approval_approved_at: row.approval_approved_at,
          approval_comments: row.approval_comments,
          employee: {
            employee_id: row.employee_display_id,
            user: {
              first_name: row.first_name,
              last_name: row.last_name
            },
            department: {
              id: row.department_id,
              name: row.department_name
            }
          }
        };
      }));
      /* istanbul ignore next */
      cov_b86wzbv2j().s[93]++;
      return {
        records,
        total
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[94]++;
      logger_1.default.error('Error finding payroll records with employee', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_b86wzbv2j().s[95]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[96]++;
      client.release();
    }
  }
  async update(id, data) {
    /* istanbul ignore next */
    cov_b86wzbv2j().f[8]++;
    const client =
    /* istanbul ignore next */
    (cov_b86wzbv2j().s[97]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_b86wzbv2j().s[98]++;
    try {
      const fields =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[99]++, []);
      const values =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[100]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[101]++, 1);
      /* istanbul ignore next */
      cov_b86wzbv2j().s[102]++;
      if (data.base_salary !== undefined) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[33][0]++;
        cov_b86wzbv2j().s[103]++;
        fields.push(`base_salary = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[104]++;
        values.push(data.base_salary);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[33][1]++;
      }
      cov_b86wzbv2j().s[105]++;
      if (data.total_worked_hours !== undefined) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[34][0]++;
        cov_b86wzbv2j().s[106]++;
        fields.push(`total_worked_hours = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[107]++;
        values.push(data.total_worked_hours);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[34][1]++;
      }
      cov_b86wzbv2j().s[108]++;
      if (data.hourly_rate !== undefined) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[35][0]++;
        cov_b86wzbv2j().s[109]++;
        fields.push(`hourly_rate = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[110]++;
        values.push(data.hourly_rate);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[35][1]++;
      }
      cov_b86wzbv2j().s[111]++;
      if (data.total_regular_hours !== undefined) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[36][0]++;
        cov_b86wzbv2j().s[112]++;
        fields.push(`total_regular_hours = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[113]++;
        values.push(data.total_regular_hours);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[36][1]++;
      }
      cov_b86wzbv2j().s[114]++;
      if (data.total_overtime_hours !== undefined) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[37][0]++;
        cov_b86wzbv2j().s[115]++;
        fields.push(`total_overtime_hours = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[116]++;
        values.push(data.total_overtime_hours);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[37][1]++;
      }
      cov_b86wzbv2j().s[117]++;
      if (data.total_late_hours !== undefined) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[38][0]++;
        cov_b86wzbv2j().s[118]++;
        fields.push(`total_late_hours = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[119]++;
        values.push(data.total_late_hours);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[38][1]++;
      }
      cov_b86wzbv2j().s[120]++;
      if (data.late_deductions !== undefined) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[39][0]++;
        cov_b86wzbv2j().s[121]++;
        fields.push(`late_deductions = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[122]++;
        values.push(data.late_deductions);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[39][1]++;
      }
      cov_b86wzbv2j().s[123]++;
      if (data.paid_leave_hours !== undefined) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[40][0]++;
        cov_b86wzbv2j().s[124]++;
        fields.push(`paid_leave_hours = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[125]++;
        values.push(data.paid_leave_hours);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[40][1]++;
      }
      cov_b86wzbv2j().s[126]++;
      if (data.gross_pay !== undefined) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[41][0]++;
        cov_b86wzbv2j().s[127]++;
        fields.push(`gross_pay = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[128]++;
        values.push(data.gross_pay);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[41][1]++;
      }
      cov_b86wzbv2j().s[129]++;
      if (data.net_pay !== undefined) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[42][0]++;
        cov_b86wzbv2j().s[130]++;
        fields.push(`net_pay = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[131]++;
        values.push(data.net_pay);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[42][1]++;
      }
      cov_b86wzbv2j().s[132]++;
      if (data.total_deductions !== undefined) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[43][0]++;
        cov_b86wzbv2j().s[133]++;
        fields.push(`total_deductions = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[134]++;
        values.push(data.total_deductions);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[43][1]++;
      }
      cov_b86wzbv2j().s[135]++;
      if (data.total_benefits !== undefined) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[44][0]++;
        cov_b86wzbv2j().s[136]++;
        fields.push(`total_benefits = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[137]++;
        values.push(data.total_benefits);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[44][1]++;
      }
      cov_b86wzbv2j().s[138]++;
      if (data.status !== undefined) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[45][0]++;
        cov_b86wzbv2j().s[139]++;
        fields.push(`status = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_b86wzbv2j().s[140]++;
        values.push(data.status);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[45][1]++;
      }
      cov_b86wzbv2j().s[141]++;
      if (fields.length === 0) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[46][0]++;
        cov_b86wzbv2j().s[142]++;
        return await this.findById(id);
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[46][1]++;
      }
      cov_b86wzbv2j().s[143]++;
      fields.push(`updated_at = CURRENT_TIMESTAMP`);
      /* istanbul ignore next */
      cov_b86wzbv2j().s[144]++;
      values.push(id);
      const query =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[145]++, `
        UPDATE payroll_records 
        SET ${fields.join(', ')}
        WHERE id = $${paramIndex}
        RETURNING *
      `);
      const result =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[146]++, await client.query(query, values));
      /* istanbul ignore next */
      cov_b86wzbv2j().s[147]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[47][0]++;
        cov_b86wzbv2j().s[148]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[47][1]++;
      }
      cov_b86wzbv2j().s[149]++;
      logger_1.default.info('Payroll record updated', {
        recordId: id,
        updates: data
      });
      /* istanbul ignore next */
      cov_b86wzbv2j().s[150]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[151]++;
      logger_1.default.error('Error updating payroll record', {
        error: error.message,
        id,
        data
      });
      /* istanbul ignore next */
      cov_b86wzbv2j().s[152]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[153]++;
      client.release();
    }
  }
  async delete(id) {
    /* istanbul ignore next */
    cov_b86wzbv2j().f[9]++;
    const client =
    /* istanbul ignore next */
    (cov_b86wzbv2j().s[154]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_b86wzbv2j().s[155]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[156]++, 'DELETE FROM payroll_records WHERE id = $1');
      const result =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[157]++, await client.query(query, [id]));
      const deleted =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[158]++, (
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[48][0]++, result.rowCount) ||
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[48][1]++, 0)) > 0);
      /* istanbul ignore next */
      cov_b86wzbv2j().s[159]++;
      if (deleted) {
        /* istanbul ignore next */
        cov_b86wzbv2j().b[49][0]++;
        cov_b86wzbv2j().s[160]++;
        logger_1.default.info('Payroll record deleted', {
          recordId: id
        });
      } else
      /* istanbul ignore next */
      {
        cov_b86wzbv2j().b[49][1]++;
      }
      cov_b86wzbv2j().s[161]++;
      return deleted;
    } catch (error) {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[162]++;
      logger_1.default.error('Error deleting payroll record', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_b86wzbv2j().s[163]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[164]++;
      client.release();
    }
  }
  async findByPayrollPeriod(payrollPeriodId) {
    /* istanbul ignore next */
    cov_b86wzbv2j().f[10]++;
    const client =
    /* istanbul ignore next */
    (cov_b86wzbv2j().s[165]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_b86wzbv2j().s[166]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[167]++, `
        SELECT * FROM payroll_records 
        WHERE payroll_period_id = $1
        ORDER BY created_at ASC
      `);
      const result =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[168]++, await client.query(query, [payrollPeriodId]));
      /* istanbul ignore next */
      cov_b86wzbv2j().s[169]++;
      return result.rows;
    } catch (error) {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[170]++;
      logger_1.default.error('Error finding payroll records by period', {
        error: error.message,
        payrollPeriodId
      });
      /* istanbul ignore next */
      cov_b86wzbv2j().s[171]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[172]++;
      client.release();
    }
  }
  async getTotalNetPay() {
    /* istanbul ignore next */
    cov_b86wzbv2j().f[11]++;
    const client =
    /* istanbul ignore next */
    (cov_b86wzbv2j().s[173]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_b86wzbv2j().s[174]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[175]++, 'SELECT COALESCE(SUM(net_pay), 0) as total FROM payroll_records WHERE status = $1');
      const result =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[176]++, await client.query(query, ['paid']));
      /* istanbul ignore next */
      cov_b86wzbv2j().s[177]++;
      return /* istanbul ignore next */(cov_b86wzbv2j().b[50][0]++, parseFloat(result.rows[0].total)) ||
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[50][1]++, 0);
    } catch (error) {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[178]++;
      logger_1.default.error('Error getting total net pay', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_b86wzbv2j().s[179]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[180]++;
      client.release();
    }
  }
  async getTotalDeductions() {
    /* istanbul ignore next */
    cov_b86wzbv2j().f[12]++;
    const client =
    /* istanbul ignore next */
    (cov_b86wzbv2j().s[181]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_b86wzbv2j().s[182]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[183]++, 'SELECT COALESCE(SUM(total_deductions), 0) as total FROM payroll_records WHERE status = $1');
      const result =
      /* istanbul ignore next */
      (cov_b86wzbv2j().s[184]++, await client.query(query, ['paid']));
      /* istanbul ignore next */
      cov_b86wzbv2j().s[185]++;
      return /* istanbul ignore next */(cov_b86wzbv2j().b[51][0]++, parseFloat(result.rows[0].total)) ||
      /* istanbul ignore next */
      (cov_b86wzbv2j().b[51][1]++, 0);
    } catch (error) {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[186]++;
      logger_1.default.error('Error getting total deductions', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_b86wzbv2j().s[187]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_b86wzbv2j().s[188]++;
      client.release();
    }
  }
}
/* istanbul ignore next */
cov_b86wzbv2j().s[189]++;
exports.payrollRecordModel = new PayrollRecordModel();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,