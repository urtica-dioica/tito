5a4ed007f3cea66f596bc958fc459186
"use strict";

/* istanbul ignore next */
function cov_tic3jq0qa() {
  var path = "/home/kim/tito/server/src/controllers/auth/authController.ts";
  var hash = "25dc68e14e91af6add5f205c288b97a360e69f3a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/auth/authController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 57
        }
      },
      "2": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 64
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 48
        }
      },
      "4": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 54
        }
      },
      "5": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 42
        }
      },
      "6": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "7": {
        start: {
          line: 19,
          column: 40
        },
        end: {
          line: 19,
          column: 48
        }
      },
      "8": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 30,
          column: 13
        }
      },
      "9": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 28,
          column: 19
        }
      },
      "10": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "11": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 85
        }
      },
      "12": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "13": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 40,
          column: 19
        }
      },
      "14": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 23
        }
      },
      "15": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 49,
          column: 15
        }
      },
      "16": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 58,
          column: 15
        }
      },
      "17": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "18": {
        start: {
          line: 67,
          column: 27
        },
        end: {
          line: 67,
          column: 43
        }
      },
      "19": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 77,
          column: 13
        }
      },
      "20": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 75,
          column: 19
        }
      },
      "21": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 23
        }
      },
      "22": {
        start: {
          line: 79,
          column: 27
        },
        end: {
          line: 79,
          column: 73
        }
      },
      "23": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "24": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 87,
          column: 19
        }
      },
      "25": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 23
        }
      },
      "26": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 95,
          column: 15
        }
      },
      "27": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 104,
          column: 15
        }
      },
      "28": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "29": {
        start: {
          line: 112,
          column: 37
        },
        end: {
          line: 112,
          column: 45
        }
      },
      "30": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "31": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 120,
          column: 19
        }
      },
      "32": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 23
        }
      },
      "33": {
        start: {
          line: 124,
          column: 27
        },
        end: {
          line: 124,
          column: 85
        }
      },
      "34": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 134,
          column: 13
        }
      },
      "35": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 132,
          column: 19
        }
      },
      "36": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 23
        }
      },
      "37": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "38": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 150,
          column: 15
        }
      },
      "39": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "40": {
        start: {
          line: 158,
          column: 53
        },
        end: {
          line: 158,
          column: 61
        }
      },
      "41": {
        start: {
          line: 159,
          column: 27
        },
        end: {
          line: 159,
          column: 43
        }
      },
      "42": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 169,
          column: 13
        }
      },
      "43": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 167,
          column: 19
        }
      },
      "44": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 23
        }
      },
      "45": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 179,
          column: 13
        }
      },
      "46": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 177,
          column: 19
        }
      },
      "47": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 23
        }
      },
      "48": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "49": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 187,
          column: 19
        }
      },
      "50": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 23
        }
      },
      "51": {
        start: {
          line: 191,
          column: 27
        },
        end: {
          line: 191,
          column: 111
        }
      },
      "52": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "53": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 199,
          column: 19
        }
      },
      "54": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 23
        }
      },
      "55": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 207,
          column: 15
        }
      },
      "56": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 216,
          column: 15
        }
      },
      "57": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "58": {
        start: {
          line: 224,
          column: 30
        },
        end: {
          line: 224,
          column: 38
        }
      },
      "59": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "60": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 232,
          column: 19
        }
      },
      "61": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 23
        }
      },
      "62": {
        start: {
          line: 236,
          column: 27
        },
        end: {
          line: 236,
          column: 86
        }
      },
      "63": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 246,
          column: 13
        }
      },
      "64": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 244,
          column: 19
        }
      },
      "65": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 23
        }
      },
      "66": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 252,
          column: 15
        }
      },
      "67": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 261,
          column: 15
        }
      },
      "68": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "69": {
        start: {
          line: 269,
          column: 55
        },
        end: {
          line: 269,
          column: 63
        }
      },
      "70": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 279,
          column: 13
        }
      },
      "71": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 277,
          column: 19
        }
      },
      "72": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 23
        }
      },
      "73": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 289,
          column: 13
        }
      },
      "74": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 287,
          column: 19
        }
      },
      "75": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 288,
          column: 23
        }
      },
      "76": {
        start: {
          line: 291,
          column: 27
        },
        end: {
          line: 291,
          column: 104
        }
      },
      "77": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "78": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 299,
          column: 19
        }
      },
      "79": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 23
        }
      },
      "80": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 307,
          column: 15
        }
      },
      "81": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 316,
          column: 15
        }
      },
      "82": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "83": {
        start: {
          line: 324,
          column: 40
        },
        end: {
          line: 324,
          column: 48
        }
      },
      "84": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 334,
          column: 13
        }
      },
      "85": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 332,
          column: 19
        }
      },
      "86": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 333,
          column: 23
        }
      },
      "87": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 344,
          column: 13
        }
      },
      "88": {
        start: {
          line: 336,
          column: 16
        },
        end: {
          line: 342,
          column: 19
        }
      },
      "89": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 343,
          column: 23
        }
      },
      "90": {
        start: {
          line: 346,
          column: 27
        },
        end: {
          line: 346,
          column: 89
        }
      },
      "91": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 356,
          column: 13
        }
      },
      "92": {
        start: {
          line: 348,
          column: 16
        },
        end: {
          line: 354,
          column: 19
        }
      },
      "93": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 355,
          column: 23
        }
      },
      "94": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 362,
          column: 15
        }
      },
      "95": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 371,
          column: 15
        }
      },
      "96": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 418,
          column: 9
        }
      },
      "97": {
        start: {
          line: 379,
          column: 27
        },
        end: {
          line: 379,
          column: 43
        }
      },
      "98": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 389,
          column: 13
        }
      },
      "99": {
        start: {
          line: 381,
          column: 16
        },
        end: {
          line: 387,
          column: 19
        }
      },
      "100": {
        start: {
          line: 388,
          column: 16
        },
        end: {
          line: 388,
          column: 23
        }
      },
      "101": {
        start: {
          line: 391,
          column: 27
        },
        end: {
          line: 391,
          column: 81
        }
      },
      "102": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 401,
          column: 13
        }
      },
      "103": {
        start: {
          line: 393,
          column: 16
        },
        end: {
          line: 399,
          column: 19
        }
      },
      "104": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 400,
          column: 23
        }
      },
      "105": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 408,
          column: 15
        }
      },
      "106": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 417,
          column: 15
        }
      },
      "107": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 476,
          column: 9
        }
      },
      "108": {
        start: {
          line: 425,
          column: 27
        },
        end: {
          line: 425,
          column: 43
        }
      },
      "109": {
        start: {
          line: 426,
          column: 51
        },
        end: {
          line: 426,
          column: 59
        }
      },
      "110": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 436,
          column: 13
        }
      },
      "111": {
        start: {
          line: 428,
          column: 16
        },
        end: {
          line: 434,
          column: 19
        }
      },
      "112": {
        start: {
          line: 435,
          column: 16
        },
        end: {
          line: 435,
          column: 23
        }
      },
      "113": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 447,
          column: 13
        }
      },
      "114": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 445,
          column: 19
        }
      },
      "115": {
        start: {
          line: 446,
          column: 16
        },
        end: {
          line: 446,
          column: 23
        }
      },
      "116": {
        start: {
          line: 449,
          column: 27
        },
        end: {
          line: 449,
          column: 116
        }
      },
      "117": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 459,
          column: 13
        }
      },
      "118": {
        start: {
          line: 451,
          column: 16
        },
        end: {
          line: 457,
          column: 19
        }
      },
      "119": {
        start: {
          line: 458,
          column: 16
        },
        end: {
          line: 458,
          column: 23
        }
      },
      "120": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 466,
          column: 15
        }
      },
      "121": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 475,
          column: 15
        }
      },
      "122": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 552,
          column: 9
        }
      },
      "123": {
        start: {
          line: 483,
          column: 69
        },
        end: {
          line: 483,
          column: 77
        }
      },
      "124": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 494,
          column: 13
        }
      },
      "125": {
        start: {
          line: 486,
          column: 16
        },
        end: {
          line: 492,
          column: 19
        }
      },
      "126": {
        start: {
          line: 493,
          column: 16
        },
        end: {
          line: 493,
          column: 23
        }
      },
      "127": {
        start: {
          line: 496,
          column: 12
        },
        end: {
          line: 505,
          column: 13
        }
      },
      "128": {
        start: {
          line: 497,
          column: 16
        },
        end: {
          line: 503,
          column: 19
        }
      },
      "129": {
        start: {
          line: 504,
          column: 16
        },
        end: {
          line: 504,
          column: 23
        }
      },
      "130": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 515,
          column: 13
        }
      },
      "131": {
        start: {
          line: 507,
          column: 16
        },
        end: {
          line: 513,
          column: 19
        }
      },
      "132": {
        start: {
          line: 514,
          column: 16
        },
        end: {
          line: 514,
          column: 23
        }
      },
      "133": {
        start: {
          line: 517,
          column: 31
        },
        end: {
          line: 517,
          column: 71
        }
      },
      "134": {
        start: {
          line: 518,
          column: 12
        },
        end: {
          line: 527,
          column: 13
        }
      },
      "135": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 525,
          column: 19
        }
      },
      "136": {
        start: {
          line: 526,
          column: 16
        },
        end: {
          line: 526,
          column: 23
        }
      },
      "137": {
        start: {
          line: 529,
          column: 28
        },
        end: {
          line: 535,
          column: 14
        }
      },
      "138": {
        start: {
          line: 536,
          column: 12
        },
        end: {
          line: 542,
          column: 15
        }
      },
      "139": {
        start: {
          line: 545,
          column: 12
        },
        end: {
          line: 551,
          column: 15
        }
      },
      "140": {
        start: {
          line: 558,
          column: 8
        },
        end: {
          line: 576,
          column: 9
        }
      },
      "141": {
        start: {
          line: 559,
          column: 26
        },
        end: {
          line: 559,
          column: 63
        }
      },
      "142": {
        start: {
          line: 560,
          column: 12
        },
        end: {
          line: 566,
          column: 15
        }
      },
      "143": {
        start: {
          line: 569,
          column: 12
        },
        end: {
          line: 575,
          column: 15
        }
      },
      "144": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 622,
          column: 9
        }
      },
      "145": {
        start: {
          line: 583,
          column: 27
        },
        end: {
          line: 583,
          column: 37
        }
      },
      "146": {
        start: {
          line: 584,
          column: 67
        },
        end: {
          line: 584,
          column: 75
        }
      },
      "147": {
        start: {
          line: 585,
          column: 12
        },
        end: {
          line: 594,
          column: 13
        }
      },
      "148": {
        start: {
          line: 586,
          column: 16
        },
        end: {
          line: 592,
          column: 19
        }
      },
      "149": {
        start: {
          line: 593,
          column: 16
        },
        end: {
          line: 593,
          column: 23
        }
      },
      "150": {
        start: {
          line: 595,
          column: 27
        },
        end: {
          line: 595,
          column: 121
        }
      },
      "151": {
        start: {
          line: 596,
          column: 12
        },
        end: {
          line: 605,
          column: 13
        }
      },
      "152": {
        start: {
          line: 597,
          column: 16
        },
        end: {
          line: 603,
          column: 19
        }
      },
      "153": {
        start: {
          line: 604,
          column: 16
        },
        end: {
          line: 604,
          column: 23
        }
      },
      "154": {
        start: {
          line: 606,
          column: 12
        },
        end: {
          line: 612,
          column: 15
        }
      },
      "155": {
        start: {
          line: 615,
          column: 12
        },
        end: {
          line: 621,
          column: 15
        }
      },
      "156": {
        start: {
          line: 625,
          column: 0
        },
        end: {
          line: 625,
          column: 40
        }
      },
      "157": {
        start: {
          line: 627,
          column: 0
        },
        end: {
          line: 627,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 22
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 26
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 27
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 64
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 33
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 110
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 35
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 156
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 222,
            column: 4
          },
          end: {
            line: 222,
            column: 5
          }
        },
        loc: {
          start: {
            line: 222,
            column: 41
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 222
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 34
          },
          end: {
            line: 318,
            column: 5
          }
        },
        line: 267
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        loc: {
          start: {
            line: 322,
            column: 34
          },
          end: {
            line: 373,
            column: 5
          }
        },
        line: 322
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 377,
            column: 5
          }
        },
        loc: {
          start: {
            line: 377,
            column: 31
          },
          end: {
            line: 419,
            column: 5
          }
        },
        line: 377
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 423,
            column: 4
          },
          end: {
            line: 423,
            column: 5
          }
        },
        loc: {
          start: {
            line: 423,
            column: 34
          },
          end: {
            line: 477,
            column: 5
          }
        },
        line: 423
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 481,
            column: 4
          },
          end: {
            line: 481,
            column: 5
          }
        },
        loc: {
          start: {
            line: 481,
            column: 31
          },
          end: {
            line: 553,
            column: 5
          }
        },
        line: 481
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 557,
            column: 4
          },
          end: {
            line: 557,
            column: 5
          }
        },
        loc: {
          start: {
            line: 557,
            column: 32
          },
          end: {
            line: 577,
            column: 5
          }
        },
        line: 557
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 581,
            column: 4
          },
          end: {
            line: 581,
            column: 5
          }
        },
        loc: {
          start: {
            line: 581,
            column: 31
          },
          end: {
            line: 623,
            column: 5
          }
        },
        line: 581
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 28
          }
        }, {
          start: {
            line: 12,
            column: 32
          },
          end: {
            line: 12,
            column: 41
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 22
          }
        }, {
          start: {
            line: 21,
            column: 26
          },
          end: {
            line: 21,
            column: 35
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 37,
            column: 27
          },
          end: {
            line: 37,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 27
          },
          end: {
            line: 37,
            column: 39
          }
        }, {
          start: {
            line: 37,
            column: 43
          },
          end: {
            line: 37,
            column: 66
          }
        }],
        line: 37
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 77,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 77,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "6": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "7": {
        loc: {
          start: {
            line: 84,
            column: 27
          },
          end: {
            line: 84,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 27
          },
          end: {
            line: 84,
            column: 39
          }
        }, {
          start: {
            line: 84,
            column: 43
          },
          end: {
            line: 84,
            column: 58
          }
        }],
        line: 84
      },
      "8": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "9": {
        loc: {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "10": {
        loc: {
          start: {
            line: 129,
            column: 27
          },
          end: {
            line: 129,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 27
          },
          end: {
            line: 129,
            column: 39
          }
        }, {
          start: {
            line: 129,
            column: 43
          },
          end: {
            line: 129,
            column: 65
          }
        }],
        line: 129
      },
      "11": {
        loc: {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "12": {
        loc: {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "13": {
        loc: {
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 170,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 170,
            column: 32
          }
        }, {
          start: {
            line: 170,
            column: 36
          },
          end: {
            line: 170,
            column: 48
          }
        }],
        line: 170
      },
      "14": {
        loc: {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "15": {
        loc: {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "16": {
        loc: {
          start: {
            line: 196,
            column: 27
          },
          end: {
            line: 196,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 27
          },
          end: {
            line: 196,
            column: 39
          }
        }, {
          start: {
            line: 196,
            column: 43
          },
          end: {
            line: 196,
            column: 67
          }
        }],
        line: 196
      },
      "17": {
        loc: {
          start: {
            line: 225,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "18": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 246,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 246,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "19": {
        loc: {
          start: {
            line: 241,
            column: 27
          },
          end: {
            line: 241,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 27
          },
          end: {
            line: 241,
            column: 39
          }
        }, {
          start: {
            line: 241,
            column: 43
          },
          end: {
            line: 241,
            column: 74
          }
        }],
        line: 241
      },
      "20": {
        loc: {
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "21": {
        loc: {
          start: {
            line: 270,
            column: 16
          },
          end: {
            line: 270,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 16
          },
          end: {
            line: 270,
            column: 22
          }
        }, {
          start: {
            line: 270,
            column: 26
          },
          end: {
            line: 270,
            column: 37
          }
        }, {
          start: {
            line: 270,
            column: 41
          },
          end: {
            line: 270,
            column: 53
          }
        }],
        line: 270
      },
      "22": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 289,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 289,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "23": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "24": {
        loc: {
          start: {
            line: 296,
            column: 27
          },
          end: {
            line: 296,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 296,
            column: 27
          },
          end: {
            line: 296,
            column: 39
          }
        }, {
          start: {
            line: 296,
            column: 43
          },
          end: {
            line: 296,
            column: 66
          }
        }],
        line: 296
      },
      "25": {
        loc: {
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 334,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 334,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "26": {
        loc: {
          start: {
            line: 325,
            column: 16
          },
          end: {
            line: 325,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 325,
            column: 16
          },
          end: {
            line: 325,
            column: 22
          }
        }, {
          start: {
            line: 325,
            column: 26
          },
          end: {
            line: 325,
            column: 35
          }
        }],
        line: 325
      },
      "27": {
        loc: {
          start: {
            line: 335,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 335
      },
      "28": {
        loc: {
          start: {
            line: 347,
            column: 12
          },
          end: {
            line: 356,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 12
          },
          end: {
            line: 356,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "29": {
        loc: {
          start: {
            line: 351,
            column: 27
          },
          end: {
            line: 351,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 351,
            column: 27
          },
          end: {
            line: 351,
            column: 39
          }
        }, {
          start: {
            line: 351,
            column: 43
          },
          end: {
            line: 351,
            column: 66
          }
        }],
        line: 351
      },
      "30": {
        loc: {
          start: {
            line: 380,
            column: 12
          },
          end: {
            line: 389,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 12
          },
          end: {
            line: 389,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 380
      },
      "31": {
        loc: {
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 401,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 401,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "32": {
        loc: {
          start: {
            line: 396,
            column: 27
          },
          end: {
            line: 396,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 396,
            column: 27
          },
          end: {
            line: 396,
            column: 39
          }
        }, {
          start: {
            line: 396,
            column: 43
          },
          end: {
            line: 396,
            column: 62
          }
        }],
        line: 396
      },
      "33": {
        loc: {
          start: {
            line: 427,
            column: 12
          },
          end: {
            line: 436,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 427,
            column: 12
          },
          end: {
            line: 436,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 427
      },
      "34": {
        loc: {
          start: {
            line: 438,
            column: 12
          },
          end: {
            line: 447,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 438,
            column: 12
          },
          end: {
            line: 447,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 438
      },
      "35": {
        loc: {
          start: {
            line: 438,
            column: 16
          },
          end: {
            line: 438,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 438,
            column: 16
          },
          end: {
            line: 438,
            column: 26
          }
        }, {
          start: {
            line: 438,
            column: 30
          },
          end: {
            line: 438,
            column: 39
          }
        }, {
          start: {
            line: 438,
            column: 43
          },
          end: {
            line: 438,
            column: 49
          }
        }],
        line: 438
      },
      "36": {
        loc: {
          start: {
            line: 450,
            column: 12
          },
          end: {
            line: 459,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 450,
            column: 12
          },
          end: {
            line: 459,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 450
      },
      "37": {
        loc: {
          start: {
            line: 454,
            column: 27
          },
          end: {
            line: 454,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 454,
            column: 27
          },
          end: {
            line: 454,
            column: 39
          }
        }, {
          start: {
            line: 454,
            column: 43
          },
          end: {
            line: 454,
            column: 58
          }
        }],
        line: 454
      },
      "38": {
        loc: {
          start: {
            line: 485,
            column: 12
          },
          end: {
            line: 494,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 485,
            column: 12
          },
          end: {
            line: 494,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 485
      },
      "39": {
        loc: {
          start: {
            line: 485,
            column: 16
          },
          end: {
            line: 485,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 485,
            column: 16
          },
          end: {
            line: 485,
            column: 22
          }
        }, {
          start: {
            line: 485,
            column: 26
          },
          end: {
            line: 485,
            column: 35
          }
        }, {
          start: {
            line: 485,
            column: 39
          },
          end: {
            line: 485,
            column: 50
          }
        }, {
          start: {
            line: 485,
            column: 54
          },
          end: {
            line: 485,
            column: 64
          }
        }, {
          start: {
            line: 485,
            column: 68
          },
          end: {
            line: 485,
            column: 73
          }
        }],
        line: 485
      },
      "40": {
        loc: {
          start: {
            line: 496,
            column: 12
          },
          end: {
            line: 505,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 496,
            column: 12
          },
          end: {
            line: 505,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 496
      },
      "41": {
        loc: {
          start: {
            line: 506,
            column: 12
          },
          end: {
            line: 515,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 12
          },
          end: {
            line: 515,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "42": {
        loc: {
          start: {
            line: 518,
            column: 12
          },
          end: {
            line: 527,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 518,
            column: 12
          },
          end: {
            line: 527,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 518
      },
      "43": {
        loc: {
          start: {
            line: 585,
            column: 12
          },
          end: {
            line: 594,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 585,
            column: 12
          },
          end: {
            line: 594,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 585
      },
      "44": {
        loc: {
          start: {
            line: 596,
            column: 12
          },
          end: {
            line: 605,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 596,
            column: 12
          },
          end: {
            line: 605,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 596
      },
      "45": {
        loc: {
          start: {
            line: 600,
            column: 27
          },
          end: {
            line: 600,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 600,
            column: 27
          },
          end: {
            line: 600,
            column: 39
          }
        }, {
          start: {
            line: 600,
            column: 43
          },
          end: {
            line: 600,
            column: 58
          }
        }],
        line: 600
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0, 0, 0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/auth/authController.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/auth/authController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { authService } from '../../services/auth/authService';\nimport { userModel } from '../../models/auth/User';\nimport { USER_ROLES } from '../../utils/constants/roles';\nimport { ApiResponse } from '../../utils/types/express';\n\nexport class AuthController {\n  /**\n   * Helper method to get request ID safely\n   */\n  private getRequestId(req: Request): string {\n    return req.requestId || 'unknown';\n  }\n\n  /**\n   * User login\n   */\n  async login(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { email, password } = req.body;\n\n      // Validate input\n      if (!email || !password) {\n        res.status(400).json({\n          success: false,\n          message: 'Email and password are required',\n          error: 'MISSING_CREDENTIALS',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Attempt login\n      const result = await authService.login({ email, password });\n\n      if (!result.success) {\n        res.status(401).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'AUTHENTICATION_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        data: result.data,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Login failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * User logout\n   */\n  async logout(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      // Get user ID from authenticated request\n      const userId = (req as any).user?.userId;\n      \n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'Authentication required',\n          error: 'AUTHENTICATION_REQUIRED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Perform logout\n      const result = await authService.logout(userId);\n\n      if (!result.success) {\n        res.status(500).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'LOGOUT_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Logout failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshToken(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { refreshToken } = req.body;\n\n      if (!refreshToken) {\n        res.status(400).json({\n          success: false,\n          message: 'Refresh token is required',\n          error: 'MISSING_REFRESH_TOKEN',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Attempt token refresh\n      const result = await authService.refreshToken(refreshToken);\n\n      if (!result.success) {\n        res.status(401).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'TOKEN_REFRESH_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        data: result.data,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Token refresh failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Change password\n   */\n  async changePassword(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { currentPassword, newPassword } = req.body;\n      const userId = (req as any).user?.userId;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'Authentication required',\n          error: 'AUTHENTICATION_REQUIRED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      if (!currentPassword || !newPassword) {\n        res.status(400).json({\n          success: false,\n          message: 'Current password and new password are required',\n          error: 'MISSING_PASSWORDS',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      if (newPassword.length < 8) {\n        res.status(400).json({\n          success: false,\n          message: 'New password must be at least 8 characters long',\n          error: 'PASSWORD_TOO_SHORT',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Attempt password change\n      const result = await authService.changePassword(userId, currentPassword, newPassword);\n\n      if (!result.success) {\n        res.status(400).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'PASSWORD_CHANGE_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Password change failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Request password reset\n   */\n  async requestPasswordReset(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { email } = req.body;\n\n      if (!email) {\n        res.status(400).json({\n          success: false,\n          message: 'Email is required',\n          error: 'MISSING_EMAIL',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Attempt password reset request\n      const result = await authService.requestPasswordReset(email);\n\n      if (!result.success) {\n        res.status(500).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'PASSWORD_RESET_REQUEST_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Password reset request failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Reset password with token\n   */\n  async resetPassword(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { email, resetToken, newPassword } = req.body;\n\n      if (!email || !resetToken || !newPassword) {\n        res.status(400).json({\n          success: false,\n          message: 'Email, reset token, and new password are required',\n          error: 'MISSING_RESET_DATA',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      if (newPassword.length < 8) {\n        res.status(400).json({\n          success: false,\n          message: 'New password must be at least 8 characters long',\n          error: 'PASSWORD_TOO_SHORT',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Attempt password reset\n      const result = await authService.resetPassword(email, resetToken, newPassword);\n\n      if (!result.success) {\n        res.status(400).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'PASSWORD_RESET_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Password reset failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Setup password for department head\n   */\n  async setupPassword(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { token, password } = req.body;\n\n      if (!token || !password) {\n        res.status(400).json({\n          success: false,\n          message: 'Setup token and password are required',\n          error: 'MISSING_SETUP_DATA',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      if (password.length < 8) {\n        res.status(400).json({\n          success: false,\n          message: 'Password must be at least 8 characters long',\n          error: 'PASSWORD_TOO_SHORT',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Attempt password setup\n      const result = await authService.setupPassword(token, password);\n\n      if (!result.success) {\n        res.status(400).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'PASSWORD_SETUP_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Password setup failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Get user profile\n   */\n  async getProfile(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const userId = (req as any).user?.userId;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'Authentication required',\n          error: 'AUTHENTICATION_REQUIRED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Get user profile\n      const result = await authService.getUserProfile(userId);\n\n      if (!result.success) {\n        res.status(404).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'PROFILE_NOT_FOUND',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        data: result.data,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get profile',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Update user profile\n   */\n  async updateProfile(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const userId = (req as any).user?.userId;\n      const { firstName, lastName, email } = req.body;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'Authentication required',\n          error: 'AUTHENTICATION_REQUIRED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Validate input\n      if (!firstName || !lastName || !email) {\n        res.status(400).json({\n          success: false,\n          message: 'All fields are required',\n          error: 'MISSING_FIELDS',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Update user profile\n      const result = await authService.updateUserProfile(userId, { firstName, lastName, email });\n\n      if (!result.success) {\n        res.status(400).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'UPDATE_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        data: result.data,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to update profile',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Create new user (HR only)\n   */\n  async createUser(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { email, password, first_name, last_name, role } = req.body;\n\n      // Validate input\n      if (!email || !password || !first_name || !last_name || !role) {\n        res.status(400).json({\n          success: false,\n          message: 'All fields are required',\n          error: 'MISSING_FIELDS',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Validate role\n      if (!Object.values(USER_ROLES).includes(role)) {\n        res.status(400).json({\n          success: false,\n          message: 'Invalid role',\n          error: 'INVALID_ROLE',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      if (password.length < 8) {\n        res.status(400).json({\n          success: false,\n          message: 'Password must be at least 8 characters long',\n          error: 'PASSWORD_TOO_SHORT',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Check if user already exists\n      const userExists = await userModel.userExists(email);\n      if (userExists) {\n        res.status(409).json({\n          success: false,\n          message: 'User with this email already exists',\n          error: 'USER_ALREADY_EXISTS',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Create user\n      const newUser = await userModel.createUser({\n        email,\n        password,\n        first_name,\n        last_name,\n        role\n      });\n\n      res.status(201).json({\n        success: true,\n        message: 'User created successfully',\n        data: { user: newUser },\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to create user',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Get all users (HR only)\n   */\n  async getAllUsers(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const users = await userModel.listAllUsers();\n\n      res.status(200).json({\n        success: true,\n        message: 'Users retrieved successfully',\n        data: { users },\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve users',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Update user (HR only)\n   */\n  async updateUser(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { id } = req.params;\n      const { firstName, lastName, email, role, isActive } = req.body;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'User ID is required',\n          error: 'MISSING_USER_ID',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      const result = await authService.updateUser(id, { firstName, lastName, email, role, isActive });\n\n      if (!result.success) {\n        res.status(400).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'UPDATE_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        data: result.data,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to update user',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n}\n\n// Export singleton instance\nexport const authController = new AuthController(); "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "25dc68e14e91af6add5f205c288b97a360e69f3a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_tic3jq0qa = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_tic3jq0qa();
cov_tic3jq0qa().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_tic3jq0qa().s[1]++;
exports.authController = exports.AuthController = void 0;
const authService_1 =
/* istanbul ignore next */
(cov_tic3jq0qa().s[2]++, require("../../services/auth/authService"));
const User_1 =
/* istanbul ignore next */
(cov_tic3jq0qa().s[3]++, require("../../models/auth/User"));
const roles_1 =
/* istanbul ignore next */
(cov_tic3jq0qa().s[4]++, require("../../utils/constants/roles"));
class AuthController {
  /**
   * Helper method to get request ID safely
   */
  getRequestId(req) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[0]++;
    cov_tic3jq0qa().s[5]++;
    return /* istanbul ignore next */(cov_tic3jq0qa().b[0][0]++, req.requestId) ||
    /* istanbul ignore next */
    (cov_tic3jq0qa().b[0][1]++, 'unknown');
  }
  /**
   * User login
   */
  async login(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[1]++;
    cov_tic3jq0qa().s[6]++;
    try {
      const {
        email,
        password
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[7]++, req.body);
      // Validate input
      /* istanbul ignore next */
      cov_tic3jq0qa().s[8]++;
      if (
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[2][0]++, !email) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[2][1]++, !password)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[1][0]++;
        cov_tic3jq0qa().s[9]++;
        res.status(400).json({
          success: false,
          message: 'Email and password are required',
          error: 'MISSING_CREDENTIALS',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[10]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[1][1]++;
      }
      // Attempt login
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[11]++, await authService_1.authService.login({
        email,
        password
      }));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[12]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[3][0]++;
        cov_tic3jq0qa().s[13]++;
        res.status(401).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[4][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[4][1]++, 'AUTHENTICATION_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[14]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[3][1]++;
      }
      cov_tic3jq0qa().s[15]++;
      res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[16]++;
      res.status(500).json({
        success: false,
        message: 'Login failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * User logout
   */
  async logout(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[2]++;
    cov_tic3jq0qa().s[17]++;
    try {
      // Get user ID from authenticated request
      const userId =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[18]++, req.user?.userId);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[19]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[5][0]++;
        cov_tic3jq0qa().s[20]++;
        res.status(401).json({
          success: false,
          message: 'Authentication required',
          error: 'AUTHENTICATION_REQUIRED',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[21]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[5][1]++;
      }
      // Perform logout
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[22]++, await authService_1.authService.logout(userId));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[23]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[6][0]++;
        cov_tic3jq0qa().s[24]++;
        res.status(500).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[7][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[7][1]++, 'LOGOUT_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[25]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[6][1]++;
      }
      cov_tic3jq0qa().s[26]++;
      res.status(200).json({
        success: true,
        message: result.message,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[27]++;
      res.status(500).json({
        success: false,
        message: 'Logout failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Refresh access token
   */
  async refreshToken(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[3]++;
    cov_tic3jq0qa().s[28]++;
    try {
      const {
        refreshToken
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[29]++, req.body);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[30]++;
      if (!refreshToken) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[8][0]++;
        cov_tic3jq0qa().s[31]++;
        res.status(400).json({
          success: false,
          message: 'Refresh token is required',
          error: 'MISSING_REFRESH_TOKEN',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[32]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[8][1]++;
      }
      // Attempt token refresh
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[33]++, await authService_1.authService.refreshToken(refreshToken));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[34]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[9][0]++;
        cov_tic3jq0qa().s[35]++;
        res.status(401).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[10][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[10][1]++, 'TOKEN_REFRESH_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[36]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[9][1]++;
      }
      cov_tic3jq0qa().s[37]++;
      res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[38]++;
      res.status(500).json({
        success: false,
        message: 'Token refresh failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Change password
   */
  async changePassword(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[4]++;
    cov_tic3jq0qa().s[39]++;
    try {
      const {
        currentPassword,
        newPassword
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[40]++, req.body);
      const userId =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[41]++, req.user?.userId);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[42]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[11][0]++;
        cov_tic3jq0qa().s[43]++;
        res.status(401).json({
          success: false,
          message: 'Authentication required',
          error: 'AUTHENTICATION_REQUIRED',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[44]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[11][1]++;
      }
      cov_tic3jq0qa().s[45]++;
      if (
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[13][0]++, !currentPassword) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[13][1]++, !newPassword)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[12][0]++;
        cov_tic3jq0qa().s[46]++;
        res.status(400).json({
          success: false,
          message: 'Current password and new password are required',
          error: 'MISSING_PASSWORDS',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[47]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[12][1]++;
      }
      cov_tic3jq0qa().s[48]++;
      if (newPassword.length < 8) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[14][0]++;
        cov_tic3jq0qa().s[49]++;
        res.status(400).json({
          success: false,
          message: 'New password must be at least 8 characters long',
          error: 'PASSWORD_TOO_SHORT',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[50]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[14][1]++;
      }
      // Attempt password change
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[51]++, await authService_1.authService.changePassword(userId, currentPassword, newPassword));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[52]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[15][0]++;
        cov_tic3jq0qa().s[53]++;
        res.status(400).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[16][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[16][1]++, 'PASSWORD_CHANGE_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[54]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[15][1]++;
      }
      cov_tic3jq0qa().s[55]++;
      res.status(200).json({
        success: true,
        message: result.message,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[56]++;
      res.status(500).json({
        success: false,
        message: 'Password change failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Request password reset
   */
  async requestPasswordReset(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[5]++;
    cov_tic3jq0qa().s[57]++;
    try {
      const {
        email
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[58]++, req.body);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[59]++;
      if (!email) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[17][0]++;
        cov_tic3jq0qa().s[60]++;
        res.status(400).json({
          success: false,
          message: 'Email is required',
          error: 'MISSING_EMAIL',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[61]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[17][1]++;
      }
      // Attempt password reset request
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[62]++, await authService_1.authService.requestPasswordReset(email));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[63]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[18][0]++;
        cov_tic3jq0qa().s[64]++;
        res.status(500).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[19][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[19][1]++, 'PASSWORD_RESET_REQUEST_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[65]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[18][1]++;
      }
      cov_tic3jq0qa().s[66]++;
      res.status(200).json({
        success: true,
        message: result.message,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[67]++;
      res.status(500).json({
        success: false,
        message: 'Password reset request failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Reset password with token
   */
  async resetPassword(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[6]++;
    cov_tic3jq0qa().s[68]++;
    try {
      const {
        email,
        resetToken,
        newPassword
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[69]++, req.body);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[70]++;
      if (
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[21][0]++, !email) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[21][1]++, !resetToken) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[21][2]++, !newPassword)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[20][0]++;
        cov_tic3jq0qa().s[71]++;
        res.status(400).json({
          success: false,
          message: 'Email, reset token, and new password are required',
          error: 'MISSING_RESET_DATA',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[72]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[20][1]++;
      }
      cov_tic3jq0qa().s[73]++;
      if (newPassword.length < 8) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[22][0]++;
        cov_tic3jq0qa().s[74]++;
        res.status(400).json({
          success: false,
          message: 'New password must be at least 8 characters long',
          error: 'PASSWORD_TOO_SHORT',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[75]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[22][1]++;
      }
      // Attempt password reset
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[76]++, await authService_1.authService.resetPassword(email, resetToken, newPassword));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[77]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[23][0]++;
        cov_tic3jq0qa().s[78]++;
        res.status(400).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[24][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[24][1]++, 'PASSWORD_RESET_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[79]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[23][1]++;
      }
      cov_tic3jq0qa().s[80]++;
      res.status(200).json({
        success: true,
        message: result.message,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[81]++;
      res.status(500).json({
        success: false,
        message: 'Password reset failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Setup password for department head
   */
  async setupPassword(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[7]++;
    cov_tic3jq0qa().s[82]++;
    try {
      const {
        token,
        password
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[83]++, req.body);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[84]++;
      if (
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[26][0]++, !token) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[26][1]++, !password)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[25][0]++;
        cov_tic3jq0qa().s[85]++;
        res.status(400).json({
          success: false,
          message: 'Setup token and password are required',
          error: 'MISSING_SETUP_DATA',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[86]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[25][1]++;
      }
      cov_tic3jq0qa().s[87]++;
      if (password.length < 8) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[27][0]++;
        cov_tic3jq0qa().s[88]++;
        res.status(400).json({
          success: false,
          message: 'Password must be at least 8 characters long',
          error: 'PASSWORD_TOO_SHORT',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[89]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[27][1]++;
      }
      // Attempt password setup
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[90]++, await authService_1.authService.setupPassword(token, password));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[91]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[28][0]++;
        cov_tic3jq0qa().s[92]++;
        res.status(400).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[29][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[29][1]++, 'PASSWORD_SETUP_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[93]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[28][1]++;
      }
      cov_tic3jq0qa().s[94]++;
      res.status(200).json({
        success: true,
        message: result.message,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[95]++;
      res.status(500).json({
        success: false,
        message: 'Password setup failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Get user profile
   */
  async getProfile(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[8]++;
    cov_tic3jq0qa().s[96]++;
    try {
      const userId =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[97]++, req.user?.userId);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[98]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[30][0]++;
        cov_tic3jq0qa().s[99]++;
        res.status(401).json({
          success: false,
          message: 'Authentication required',
          error: 'AUTHENTICATION_REQUIRED',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[100]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[30][1]++;
      }
      // Get user profile
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[101]++, await authService_1.authService.getUserProfile(userId));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[102]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[31][0]++;
        cov_tic3jq0qa().s[103]++;
        res.status(404).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[32][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[32][1]++, 'PROFILE_NOT_FOUND'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[104]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[31][1]++;
      }
      cov_tic3jq0qa().s[105]++;
      res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[106]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get profile',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Update user profile
   */
  async updateProfile(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[9]++;
    cov_tic3jq0qa().s[107]++;
    try {
      const userId =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[108]++, req.user?.userId);
      const {
        firstName,
        lastName,
        email
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[109]++, req.body);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[110]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[33][0]++;
        cov_tic3jq0qa().s[111]++;
        res.status(401).json({
          success: false,
          message: 'Authentication required',
          error: 'AUTHENTICATION_REQUIRED',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[112]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[33][1]++;
      }
      // Validate input
      cov_tic3jq0qa().s[113]++;
      if (
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[35][0]++, !firstName) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[35][1]++, !lastName) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[35][2]++, !email)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[34][0]++;
        cov_tic3jq0qa().s[114]++;
        res.status(400).json({
          success: false,
          message: 'All fields are required',
          error: 'MISSING_FIELDS',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[115]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[34][1]++;
      }
      // Update user profile
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[116]++, await authService_1.authService.updateUserProfile(userId, {
        firstName,
        lastName,
        email
      }));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[117]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[36][0]++;
        cov_tic3jq0qa().s[118]++;
        res.status(400).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[37][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[37][1]++, 'UPDATE_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[119]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[36][1]++;
      }
      cov_tic3jq0qa().s[120]++;
      res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[121]++;
      res.status(500).json({
        success: false,
        message: 'Failed to update profile',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Create new user (HR only)
   */
  async createUser(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[10]++;
    cov_tic3jq0qa().s[122]++;
    try {
      const {
        email,
        password,
        first_name,
        last_name,
        role
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[123]++, req.body);
      // Validate input
      /* istanbul ignore next */
      cov_tic3jq0qa().s[124]++;
      if (
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[39][0]++, !email) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[39][1]++, !password) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[39][2]++, !first_name) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[39][3]++, !last_name) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[39][4]++, !role)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[38][0]++;
        cov_tic3jq0qa().s[125]++;
        res.status(400).json({
          success: false,
          message: 'All fields are required',
          error: 'MISSING_FIELDS',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[126]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[38][1]++;
      }
      // Validate role
      cov_tic3jq0qa().s[127]++;
      if (!Object.values(roles_1.USER_ROLES).includes(role)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[40][0]++;
        cov_tic3jq0qa().s[128]++;
        res.status(400).json({
          success: false,
          message: 'Invalid role',
          error: 'INVALID_ROLE',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[129]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[40][1]++;
      }
      cov_tic3jq0qa().s[130]++;
      if (password.length < 8) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[41][0]++;
        cov_tic3jq0qa().s[131]++;
        res.status(400).json({
          success: false,
          message: 'Password must be at least 8 characters long',
          error: 'PASSWORD_TOO_SHORT',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[132]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[41][1]++;
      }
      // Check if user already exists
      const userExists =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[133]++, await User_1.userModel.userExists(email));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[134]++;
      if (userExists) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[42][0]++;
        cov_tic3jq0qa().s[135]++;
        res.status(409).json({
          success: false,
          message: 'User with this email already exists',
          error: 'USER_ALREADY_EXISTS',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[136]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[42][1]++;
      }
      // Create user
      const newUser =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[137]++, await User_1.userModel.createUser({
        email,
        password,
        first_name,
        last_name,
        role
      }));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[138]++;
      res.status(201).json({
        success: true,
        message: 'User created successfully',
        data: {
          user: newUser
        },
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[139]++;
      res.status(500).json({
        success: false,
        message: 'Failed to create user',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Get all users (HR only)
   */
  async getAllUsers(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[11]++;
    cov_tic3jq0qa().s[140]++;
    try {
      const users =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[141]++, await User_1.userModel.listAllUsers());
      /* istanbul ignore next */
      cov_tic3jq0qa().s[142]++;
      res.status(200).json({
        success: true,
        message: 'Users retrieved successfully',
        data: {
          users
        },
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[143]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve users',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Update user (HR only)
   */
  async updateUser(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[12]++;
    cov_tic3jq0qa().s[144]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[145]++, req.params);
      const {
        firstName,
        lastName,
        email,
        role,
        isActive
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[146]++, req.body);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[147]++;
      if (!id) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[43][0]++;
        cov_tic3jq0qa().s[148]++;
        res.status(400).json({
          success: false,
          message: 'User ID is required',
          error: 'MISSING_USER_ID',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[149]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[43][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[150]++, await authService_1.authService.updateUser(id, {
        firstName,
        lastName,
        email,
        role,
        isActive
      }));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[151]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[44][0]++;
        cov_tic3jq0qa().s[152]++;
        res.status(400).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[45][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[45][1]++, 'UPDATE_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[153]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[44][1]++;
      }
      cov_tic3jq0qa().s[154]++;
      res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[155]++;
      res.status(500).json({
        success: false,
        message: 'Failed to update user',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
}
/* istanbul ignore next */
cov_tic3jq0qa().s[156]++;
exports.AuthController = AuthController;
// Export singleton instance
/* istanbul ignore next */
cov_tic3jq0qa().s[157]++;
exports.authController = new AuthController();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,