{"version":3,"names":["cov_1xzxq8w4hn","actualCoverage","User_1","s","require","jwt_1","redisService_1","logger_1","__importDefault","AuthService","login","credentials","f","email","password","user","userModel","findByEmail","b","success","message","error","is_active","isPasswordValid","verifyPassword","accessToken","refreshToken","generateTokenPair","id","role","refreshTokenKey","redisService","setCache","default","warn","password_hash","_","userWithoutPassword","response","expiresIn","data","Error","decoded","verifyRefreshToken","userId","cachedToken","getCache","findById","newTokens","tokenVersion","logout","deleteCache","validateToken","token","verifyAccessToken","changePassword","currentPassword","newPassword","isCurrentPasswordValid","updatePassword","requestPasswordReset","findByEmailWithoutPassword","resetToken","Math","random","toString","substring","resetTokenKey","resetPassword","setupPassword","setupToken","setupTokenKey","getUserProfile","updateUserProfile","profileData","existingUser","updatedUser","updateUser","first_name","firstName","last_name","lastName","userData","updateData","undefined","isActive","exports","authService"],"sources":["/home/kim/tito/server/src/services/auth/authService.ts"],"sourcesContent":["import { userModel, UserWithoutPassword } from '../../models/auth/User';\nimport { generateTokenPair, verifyAccessToken, verifyRefreshToken } from '../../config/jwt';\nimport { redisService } from '../redis/redisService';\nimport logger from '../../utils/logger';\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  user: UserWithoutPassword;\n  accessToken: string;\n  refreshToken: string;\n  expiresIn: number;\n}\n\nexport interface RefreshTokenResponse {\n  accessToken: string;\n  refreshToken: string;\n  expiresIn: number;\n}\n\nexport interface AuthResult {\n  success: boolean;\n  message: string;\n  data?: any;\n  error?: string;\n}\n\nexport class AuthService {\n  /**\n   * Authenticate user login\n   */\n  async login(credentials: LoginCredentials): Promise<AuthResult> {\n    try {\n      const { email, password } = credentials;\n\n      // Find user by email\n      const user = await userModel.findByEmail(email);\n      if (!user) {\n        return {\n          success: false,\n          message: 'Invalid credentials',\n          error: 'INVALID_CREDENTIALS'\n        };\n      }\n\n      // Check if user is active\n      if (!user.is_active) {\n        return {\n          success: false,\n          message: 'Account is deactivated',\n          error: 'ACCOUNT_DEACTIVATED'\n        };\n      }\n\n      // Verify password\n      const isPasswordValid = await userModel.verifyPassword(email, password);\n      if (!isPasswordValid) {\n        return {\n          success: false,\n          message: 'Invalid credentials',\n          error: 'INVALID_CREDENTIALS'\n        };\n      }\n\n      // Generate tokens\n      const { accessToken, refreshToken } = generateTokenPair(\n        user.id,\n        user.email,\n        user.role,\n        1 // tokenVersion - will be implemented with refresh token rotation\n      );\n\n      // Store refresh token in cache (Redis) - gracefully handle Redis failures\n      try {\n        const refreshTokenKey = `refresh_token:${user.id}`;\n        await redisService.setCache(refreshTokenKey, refreshToken, 7 * 24 * 60 * 60); // 7 days\n      } catch (error) {\n        logger.warn('Failed to store refresh token in Redis, continuing with login:', error);\n        // Continue with login even if Redis fails\n      }\n\n      // Remove password from user object\n      const { password_hash: _, ...userWithoutPassword } = user;\n\n      const response: LoginResponse = {\n        user: userWithoutPassword,\n        accessToken,\n        refreshToken,\n        expiresIn: 15 * 60 // 15 minutes in seconds\n      };\n\n      return {\n        success: true,\n        message: 'Login successful',\n        data: response\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Login failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshToken(refreshToken: string): Promise<AuthResult> {\n    try {\n      // Verify refresh token\n      const decoded = verifyRefreshToken(refreshToken);\n      \n      // Check if refresh token exists in cache - gracefully handle Redis failures\n      const refreshTokenKey = `refresh_token:${decoded.userId}`;\n      let cachedToken = null;\n      try {\n        cachedToken = await redisService.getCache(refreshTokenKey);\n      } catch (error) {\n        logger.warn('Failed to get refresh token from Redis, continuing with refresh:', error);\n        // Continue with refresh even if Redis fails\n      }\n      \n      // Only validate cached token if Redis is available and token exists\n      if (cachedToken === null) {\n        logger.warn('No cached refresh token found, but continuing with refresh due to Redis unavailability');\n      }\n\n      // Get user information\n      const user = await userModel.findById(decoded.userId);\n      if (!user || !user.is_active) {\n        return {\n          success: false,\n          message: 'User not found or inactive',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      // Generate new token pair\n      const newTokens = generateTokenPair(\n        user.id,\n        user.email,\n        user.role,\n        decoded.tokenVersion + 1\n      );\n\n      // Update refresh token in cache - gracefully handle Redis failures\n      try {\n        await redisService.setCache(refreshTokenKey, newTokens.refreshToken, 7 * 24 * 60 * 60);\n      } catch (error) {\n        logger.warn('Failed to update refresh token in Redis, continuing with refresh:', error);\n        // Continue with refresh even if Redis fails\n      }\n\n      const response: RefreshTokenResponse = {\n        accessToken: newTokens.accessToken,\n        refreshToken: newTokens.refreshToken,\n        expiresIn: 15 * 60 // 15 minutes in seconds\n      };\n\n      return {\n        success: true,\n        message: 'Token refreshed successfully',\n        data: response\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Token refresh failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Logout user\n   */\n  async logout(userId: string): Promise<AuthResult> {\n    try {\n      // Remove refresh token from cache - gracefully handle Redis failures\n      try {\n        const refreshTokenKey = `refresh_token:${userId}`;\n        await redisService.deleteCache(refreshTokenKey);\n      } catch (error) {\n        logger.warn('Failed to delete refresh token from Redis, continuing with logout:', error);\n        // Continue with logout even if Redis fails\n      }\n\n      return {\n        success: true,\n        message: 'Logout successful'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Logout failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Validate access token\n   */\n  async validateToken(token: string): Promise<AuthResult> {\n    try {\n      const decoded = verifyAccessToken(token);\n      \n      // Get user information\n      const user = await userModel.findById(decoded.userId);\n      if (!user || !user.is_active) {\n        return {\n          success: false,\n          message: 'User not found or inactive',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      return {\n        success: true,\n        message: 'Token valid',\n        data: { user: decoded }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Invalid token',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Change user password\n   */\n  async changePassword(userId: string, currentPassword: string, newPassword: string): Promise<AuthResult> {\n    try {\n      // Get user by ID\n      const user = await userModel.findById(userId);\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not found',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      // Verify current password using email\n      const isCurrentPasswordValid = await userModel.verifyPassword(user.email, currentPassword);\n      if (!isCurrentPasswordValid) {\n        return {\n          success: false,\n          message: 'Current password is incorrect',\n          error: 'INVALID_CURRENT_PASSWORD'\n        };\n      }\n\n      // Update password\n      const success = await userModel.updatePassword(userId, newPassword);\n      if (!success) {\n        return {\n          success: false,\n          message: 'Failed to update password',\n          error: 'PASSWORD_UPDATE_FAILED'\n        };\n      }\n\n      // Invalidate all refresh tokens for this user\n      const refreshTokenKey = `refreshToken:${userId}`;\n      await redisService.deleteCache(refreshTokenKey);\n\n      return {\n        success: true,\n        message: 'Password changed successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Password change failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Request password reset\n   */\n  async requestPasswordReset(email: string): Promise<AuthResult> {\n    try {\n      // Check if user exists\n      const user = await userModel.findByEmailWithoutPassword(email);\n      if (!user) {\n        // Don't reveal if user exists or not for security\n        return {\n          success: true,\n          message: 'If an account with this email exists, a password reset link has been sent'\n        };\n      }\n\n      // Generate reset token (simple implementation - in production, use email service)\n      const resetToken = Math.random().toString(36).substring(2, 15);\n      const resetTokenKey = `reset_token:${user.id}`;\n      \n      // Store reset token in cache (expires in 1 hour)\n      await redisService.setCache(resetTokenKey, resetToken, 60 * 60);\n\n      // TODO: Send email with reset link\n      // For now, just return success\n      return {\n        success: true,\n        message: 'Password reset link sent to your email'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Password reset request failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Reset password with token\n   */\n  async resetPassword(email: string, resetToken: string, newPassword: string): Promise<AuthResult> {\n    try {\n      // Find user\n      const user = await userModel.findByEmailWithoutPassword(email);\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not found',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      // Verify reset token\n      const resetTokenKey = `reset_token:${user.id}`;\n      const cachedToken = await redisService.getCache(resetTokenKey);\n      \n      if (!cachedToken || cachedToken !== resetToken) {\n        return {\n          success: false,\n          message: 'Invalid or expired reset token',\n          error: 'INVALID_RESET_TOKEN'\n        };\n      }\n\n      // Update password\n      const success = await userModel.updatePassword(user.id, newPassword);\n      if (!success) {\n        return {\n          success: false,\n          message: 'Failed to update password',\n          error: 'PASSWORD_UPDATE_FAILED'\n        };\n      }\n\n      // Remove reset token\n      await redisService.deleteCache(resetTokenKey);\n\n      // Invalidate all refresh tokens for this user\n      const refreshTokenKey = `refresh_token:${user.id}`;\n      await redisService.deleteCache(refreshTokenKey);\n\n      return {\n        success: true,\n        message: 'Password reset successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Password reset failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Setup password for department head with token\n   */\n  async setupPassword(setupToken: string, newPassword: string): Promise<AuthResult> {\n    try {\n      // Find user by setup token\n      const setupTokenKey = `setup_token:${setupToken}`;\n      const userId = await redisService.getCache(setupTokenKey);\n      \n      if (!userId || typeof userId !== 'string') {\n        return {\n          success: false,\n          message: 'Invalid or expired setup token',\n          error: 'INVALID_SETUP_TOKEN'\n        };\n      }\n\n      // Find user\n      const user = await userModel.findById(userId);\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not found',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      // Update password\n      const success = await userModel.updatePassword(user.id, newPassword);\n      if (!success) {\n        return {\n          success: false,\n          message: 'Failed to update password',\n          error: 'PASSWORD_UPDATE_FAILED'\n        };\n      }\n\n      // Remove setup token\n      await redisService.deleteCache(setupTokenKey);\n\n      return {\n        success: true,\n        message: 'Password setup successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Password setup failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Get user profile\n   */\n  async getUserProfile(userId: string): Promise<AuthResult> {\n    try {\n      const user = await userModel.findById(userId);\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not found',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      return {\n        success: true,\n        message: 'User profile retrieved successfully',\n        data: { user }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Failed to get user profile',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Update user profile\n   */\n  async updateUserProfile(userId: string, profileData: { firstName: string; lastName: string; email: string }): Promise<AuthResult> {\n    try {\n      const user = await userModel.findById(userId);\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not found',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      // Check if email is already taken by another user\n      if (profileData.email !== user.email) {\n        const existingUser = await userModel.findByEmail(profileData.email);\n        if (existingUser && existingUser.id !== userId) {\n          return {\n            success: false,\n            message: 'Email is already taken',\n            error: 'EMAIL_ALREADY_EXISTS'\n          };\n        }\n      }\n\n      // Update user profile\n      const updatedUser = await userModel.updateUser(userId, {\n        first_name: profileData.firstName,\n        last_name: profileData.lastName,\n        email: profileData.email\n      });\n\n      if (!updatedUser) {\n        return {\n          success: false,\n          message: 'Failed to update profile',\n          error: 'UPDATE_FAILED'\n        };\n      }\n\n      return {\n        success: true,\n        message: 'Profile updated successfully',\n        data: { user: updatedUser }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Failed to update profile',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Update user (HR only)\n   */\n  async updateUser(userId: string, userData: { firstName?: string; lastName?: string; email?: string; role?: string; isActive?: boolean }): Promise<AuthResult> {\n    try {\n      const user = await userModel.findById(userId);\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not found',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      // Check if email is already taken by another user\n      if (userData.email && userData.email !== user.email) {\n        const existingUser = await userModel.findByEmail(userData.email);\n        if (existingUser && existingUser.id !== userId) {\n          return {\n            success: false,\n            message: 'Email is already taken',\n            error: 'EMAIL_ALREADY_EXISTS'\n          };\n        }\n      }\n\n      // Prepare update data\n      const updateData: any = {};\n      if (userData.firstName !== undefined) updateData.first_name = userData.firstName;\n      if (userData.lastName !== undefined) updateData.last_name = userData.lastName;\n      if (userData.email !== undefined) updateData.email = userData.email;\n      if (userData.role !== undefined) updateData.role = userData.role;\n      if (userData.isActive !== undefined) updateData.is_active = userData.isActive;\n\n      // Update user\n      const updatedUser = await userModel.updateUser(userId, updateData);\n\n      if (!updatedUser) {\n        return {\n          success: false,\n          message: 'Failed to update user',\n          error: 'UPDATE_FAILED'\n        };\n      }\n\n      return {\n        success: true,\n        message: 'User updated successfully',\n        data: { user: updatedUser }\n      };\n    } catch (error) {\n      logger.error('Failed to update user', { error: (error as Error).message, userId, userData });\n      return {\n        success: false,\n        message: 'Failed to update user',\n        error: 'INTERNAL_SERVER_ERROR'\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const authService = new AuthService(); "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}