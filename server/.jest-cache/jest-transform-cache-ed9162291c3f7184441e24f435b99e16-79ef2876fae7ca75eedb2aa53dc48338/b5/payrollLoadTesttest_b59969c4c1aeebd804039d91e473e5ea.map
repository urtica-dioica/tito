{"file":"/home/kim/tito/server/tests/performance/payrollLoadTest.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/performance/payrollLoadTest.test.ts"],"sourcesContent":["import { LoadTestRunner, LoadTestConfig, LoadTestResult } from './loadTestUtils';\n// Mock axios for testing\ninterface AxiosResponse {\n  status: number;\n  data: any;\n}\n\nconst axios = {\n  create: () => ({\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n    patch: jest.fn(),\n    interceptors: {\n      request: { use: jest.fn() },\n      response: { use: jest.fn() }\n    }\n  })\n};\n\ndescribe('Payroll Load Tests', () => {\n  let loadTestRunner: LoadTestRunner;\n  let baseURL: string;\n  let authToken: string;\n\n  beforeAll(async () => {\n    baseURL = process.env.TEST_BASE_URL || 'http://localhost:3000';\n    \n    const config: LoadTestConfig = {\n      baseURL,\n      concurrentUsers: 5,\n      requestsPerUser: 3,\n      rampUpTime: 1000, // 1 second\n      testDuration: 20000, // 20 seconds\n      timeout: 15000 // 15 seconds\n    };\n    \n    loadTestRunner = new LoadTestRunner(config);\n\n    // Get authentication token for HR user\n    try {\n      const response = await axios.create().post(`${baseURL}/api/v1/auth/login`, {\n        email: 'hr@example.com',\n        password: 'password123'\n      });\n      authToken = response.data.data.accessToken;\n    } catch (error) {\n      console.warn('Could not obtain HR auth token for payroll load test');\n      authToken = 'test-hr-token';\n    }\n  });\n\n  describe('Payroll Periods Load Test', () => {\n    it('should handle concurrent requests to get payroll periods', async () => {\n      const requestFunction = async (axios: any): Promise<AxiosResponse> => {\n        return axios.create().get('/api/v1/payroll/periods', {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          },\n          params: {\n            page: 1,\n            limit: 10\n          }\n        });\n      };\n\n      const result: LoadTestResult = await loadTestRunner.runLoadTest(\n        requestFunction,\n        'Get Payroll Periods Load Test'\n      );\n\n      // Performance assertions\n      expect(result.averageResponseTime).toBeLessThan(2000); // Less than 2 seconds\n      expect(result.errorRate).toBeLessThan(0.1); // Less than 10% error rate\n      expect(result.requestsPerSecond).toBeGreaterThan(2); // At least 2 RPS\n      \n      console.log(loadTestRunner.generateReport(result, 'Get Payroll Periods Load Test'));\n    }, 60000);\n  });\n\n  describe('Payroll Records Load Test', () => {\n    it('should handle concurrent requests to get payroll records', async () => {\n      const requestFunction = async (axios: any): Promise<AxiosResponse> => {\n        return axios.create().get('/api/v1/payroll/periods/test-period-id/records', {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          },\n          params: {\n            page: 1,\n            limit: 20\n          }\n        });\n      };\n\n      const result: LoadTestResult = await loadTestRunner.runLoadTest(\n        requestFunction,\n        'Get Payroll Records Load Test'\n      );\n\n      // Performance assertions\n      expect(result.averageResponseTime).toBeLessThan(3000); // Less than 3 seconds\n      expect(result.errorRate).toBeLessThan(0.15); // Less than 15% error rate\n      expect(result.requestsPerSecond).toBeGreaterThan(1); // At least 1 RPS\n      \n      console.log(loadTestRunner.generateReport(result, 'Get Payroll Records Load Test'));\n    }, 60000);\n  });\n\n  describe('Payroll Summary Load Test', () => {\n    it('should handle concurrent requests to get payroll summary', async () => {\n      const requestFunction = async (axios: any): Promise<AxiosResponse> => {\n        return axios.create().get('/api/v1/payroll/periods/test-period-id/summary', {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          }\n        });\n      };\n\n      const result: LoadTestResult = await loadTestRunner.runLoadTest(\n        requestFunction,\n        'Get Payroll Summary Load Test'\n      );\n\n      // Performance assertions\n      expect(result.averageResponseTime).toBeLessThan(2500); // Less than 2.5 seconds\n      expect(result.errorRate).toBeLessThan(0.1); // Less than 10% error rate\n      expect(result.requestsPerSecond).toBeGreaterThan(2); // At least 2 RPS\n      \n      console.log(loadTestRunner.generateReport(result, 'Get Payroll Summary Load Test'));\n    }, 60000);\n  });\n\n  describe('Payroll Generation Load Test', () => {\n    it('should handle concurrent payroll generation requests', async () => {\n      const requestFunction = async (axios: any): Promise<AxiosResponse> => {\n        return axios.create().post('/api/v1/payroll/periods/test-period-id/generate', {}, {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          }\n        });\n      };\n\n      const result: LoadTestResult = await loadTestRunner.runLoadTest(\n        requestFunction,\n        'Payroll Generation Load Test'\n      );\n\n      // Performance assertions (more lenient for generation)\n      expect(result.averageResponseTime).toBeLessThan(10000); // Less than 10 seconds\n      expect(result.errorRate).toBeLessThan(0.2); // Less than 20% error rate\n      expect(result.requestsPerSecond).toBeGreaterThan(0.5); // At least 0.5 RPS\n      \n      console.log(loadTestRunner.generateReport(result, 'Payroll Generation Load Test'));\n    }, 90000);\n  });\n\n  describe('Payroll Stats Load Test', () => {\n    it('should handle concurrent requests to get payroll statistics', async () => {\n      const requestFunction = async (axios: any): Promise<AxiosResponse> => {\n        return axios.create().get('/api/v1/payroll/stats', {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          },\n          params: {\n            period: '2024-01'\n          }\n        });\n      };\n\n      const result: LoadTestResult = await loadTestRunner.runLoadTest(\n        requestFunction,\n        'Get Payroll Stats Load Test'\n      );\n\n      // Performance assertions\n      expect(result.averageResponseTime).toBeLessThan(3000); // Less than 3 seconds\n      expect(result.errorRate).toBeLessThan(0.1); // Less than 10% error rate\n      expect(result.requestsPerSecond).toBeGreaterThan(1); // At least 1 RPS\n      \n      console.log(loadTestRunner.generateReport(result, 'Get Payroll Stats Load Test'));\n    }, 60000);\n  });\n\n  describe('High Load Payroll Test', () => {\n    it('should handle high concurrent load on payroll endpoints', async () => {\n      const highLoadConfig: LoadTestConfig = {\n        baseURL,\n        concurrentUsers: 20,\n        requestsPerUser: 5,\n        rampUpTime: 3000, // 3 seconds\n        testDuration: 45000, // 45 seconds\n        timeout: 20000 // 20 seconds\n      };\n\n      const highLoadRunner = new LoadTestRunner(highLoadConfig);\n\n      const requestFunction = async (axios: any): Promise<AxiosResponse> => {\n        return axios.create().get('/api/v1/payroll/periods', {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          },\n          params: {\n            page: 1,\n            limit: 10\n          }\n        });\n      };\n\n      const result: LoadTestResult = await highLoadRunner.runLoadTest(\n        requestFunction,\n        'High Load Payroll Test'\n      );\n\n      // High load performance assertions\n      expect(result.averageResponseTime).toBeLessThan(4000); // Less than 4 seconds\n      expect(result.errorRate).toBeLessThan(0.15); // Less than 15% error rate\n      expect(result.requestsPerSecond).toBeGreaterThan(5); // At least 5 RPS\n      expect(result.totalRequests).toBe(100); // 20 users * 5 requests each\n      \n      console.log(highLoadRunner.generateReport(result, 'High Load Payroll Test'));\n    }, 90000);\n  });\n\n  describe('Payroll Endpoint Comparison', () => {\n    it('should compare performance across different payroll endpoints', async () => {\n      const endpoints = [\n        { \n          name: 'Get Periods', \n          request: (axios: any) => axios.create().get('/api/v1/payroll/periods', {\n            headers: { 'Authorization': `Bearer ${authToken}` },\n            params: { page: 1, limit: 10 }\n          })\n        },\n        { \n          name: 'Get Records', \n          request: (axios: any) => axios.create().get('/api/v1/payroll/periods/test-period-id/records', {\n            headers: { 'Authorization': `Bearer ${authToken}` },\n            params: { page: 1, limit: 20 }\n          })\n        },\n        { \n          name: 'Get Summary', \n          request: (axios: any) => axios.create().get('/api/v1/payroll/periods/test-period-id/summary', {\n            headers: { 'Authorization': `Bearer ${authToken}` }\n          })\n        },\n        { \n          name: 'Get Stats', \n          request: (axios: any) => axios.create().get('/api/v1/payroll/stats', {\n            headers: { 'Authorization': `Bearer ${authToken}` },\n            params: { period: '2024-01' }\n          })\n        }\n      ];\n\n      const results: { [key: string]: LoadTestResult } = {};\n\n      for (const endpoint of endpoints) {\n        const result = await loadTestRunner.runLoadTest(\n          endpoint.request,\n          `${endpoint.name} Performance`\n        );\n\n        results[endpoint.name] = result;\n      }\n\n      // Compare results\n      console.log('\\n📊 PAYROLL ENDPOINT COMPARISON');\n      console.log('==============================');\n      \n      for (const [name, result] of Object.entries(results)) {\n        console.log(`\\n${name}:`);\n        console.log(`  Average Response Time: ${result.averageResponseTime.toFixed(2)}ms`);\n        console.log(`  Error Rate: ${(result.errorRate * 100).toFixed(2)}%`);\n        console.log(`  Requests/Second: ${result.requestsPerSecond.toFixed(2)}`);\n      }\n\n      // Assertions for endpoint comparison\n      expect(results['Get Periods'].averageResponseTime).toBeLessThan(2000);\n      expect(results['Get Records'].averageResponseTime).toBeLessThan(3000);\n      expect(results['Get Summary'].averageResponseTime).toBeLessThan(2500);\n      expect(results['Get Stats'].averageResponseTime).toBeLessThan(3000);\n    }, 120000);\n  });\n\n  describe('Payroll Stress Test', () => {\n    it('should handle stress conditions on payroll endpoints', async () => {\n      const stressConfig: LoadTestConfig = {\n        baseURL,\n        concurrentUsers: 30,\n        requestsPerUser: 10,\n        rampUpTime: 5000, // 5 seconds\n        testDuration: 90000, // 90 seconds\n        timeout: 30000 // 30 seconds\n      };\n\n      const stressRunner = new LoadTestRunner(stressConfig);\n\n      const requestFunction = async (axios: any): Promise<AxiosResponse> => {\n        return axios.create().get('/api/v1/payroll/periods', {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          },\n          params: {\n            page: 1,\n            limit: 10\n          }\n        });\n      };\n\n      const result: LoadTestResult = await stressRunner.runLoadTest(\n        requestFunction,\n        'Payroll Stress Test'\n      );\n\n      // Stress test performance assertions (more lenient)\n      expect(result.averageResponseTime).toBeLessThan(6000); // Less than 6 seconds\n      expect(result.errorRate).toBeLessThan(0.25); // Less than 25% error rate\n      expect(result.requestsPerSecond).toBeGreaterThan(3); // At least 3 RPS\n      expect(result.totalRequests).toBe(300); // 30 users * 10 requests each\n      \n      console.log(stressRunner.generateReport(result, 'Payroll Stress Test'));\n    }, 150000);\n  });\n});\n"],"version":3}