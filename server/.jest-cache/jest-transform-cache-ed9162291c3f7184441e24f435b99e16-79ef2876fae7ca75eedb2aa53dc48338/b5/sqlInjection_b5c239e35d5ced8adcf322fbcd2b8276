c986e483f580791b2a3d662268d84720
"use strict";

/* istanbul ignore next */
function cov_2a28m9qu1g() {
  var path = "/home/kim/tito/server/src/middleware/security/sqlInjection.ts";
  var hash = "2e96c81b0e6ecc65ee149606ad2379320bacb97b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/middleware/security/sqlInjection.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 126
        }
      },
      "2": {
        start: {
          line: 7,
          column: 31
        },
        end: {
          line: 38,
          column: 1
        }
      },
      "3": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 71
        }
      },
      "4": {
        start: {
          line: 43,
          column: 50
        },
        end: {
          line: 43,
          column: 69
        }
      },
      "5": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "6": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "7": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 65
        }
      },
      "8": {
        start: {
          line: 54,
          column: 9
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "9": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "10": {
        start: {
          line: 55,
          column: 21
        },
        end: {
          line: 55,
          column: 22
        }
      },
      "11": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 56,
          column: 61
        }
      },
      "12": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "13": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 68
        }
      },
      "14": {
        start: {
          line: 62,
          column: 9
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "15": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "16": {
        start: {
          line: 64,
          column: 27
        },
        end: {
          line: 64,
          column: 60
        }
      },
      "17": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "18": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 58
        }
      },
      "19": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 70,
          column: 46
        }
      },
      "20": {
        start: {
          line: 75,
          column: 28
        },
        end: {
          line: 168,
          column: 1
        }
      },
      "21": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 167,
          column: 5
        }
      },
      "22": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "23": {
        start: {
          line: 79,
          column: 30
        },
        end: {
          line: 79,
          column: 66
        }
      },
      "24": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "25": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 92,
          column: 19
        }
      },
      "26": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 23
        }
      },
      "27": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "28": {
        start: {
          line: 98,
          column: 31
        },
        end: {
          line: 98,
          column: 68
        }
      },
      "29": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "30": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 111,
          column: 19
        }
      },
      "31": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 23
        }
      },
      "32": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "33": {
        start: {
          line: 117,
          column: 32
        },
        end: {
          line: 117,
          column: 70
        }
      },
      "34": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "35": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 130,
          column: 19
        }
      },
      "36": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 23
        }
      },
      "37": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "38": {
        start: {
          line: 136,
          column: 33
        },
        end: {
          line: 136,
          column: 72
        }
      },
      "39": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "40": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 149,
          column: 19
        }
      },
      "41": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 23
        }
      },
      "42": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 15
        }
      },
      "43": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 64
        }
      },
      "44": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "45": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 15
        }
      },
      "46": {
        start: {
          line: 169,
          column: 0
        },
        end: {
          line: 169,
          column: 50
        }
      },
      "47": {
        start: {
          line: 173,
          column: 39
        },
        end: {
          line: 329,
          column: 1
        }
      },
      "48": {
        start: {
          line: 174,
          column: 22
        },
        end: {
          line: 174,
          column: 32
        }
      },
      "49": {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 328,
          column: 5
        }
      },
      "50": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "51": {
        start: {
          line: 178,
          column: 30
        },
        end: {
          line: 178,
          column: 66
        }
      },
      "52": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "53": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 190,
          column: 19
        }
      },
      "54": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 202,
          column: 19
        }
      },
      "55": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 23
        }
      },
      "56": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "57": {
        start: {
          line: 208,
          column: 31
        },
        end: {
          line: 208,
          column: 68
        }
      },
      "58": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 233,
          column: 13
        }
      },
      "59": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 219,
          column: 19
        }
      },
      "60": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 231,
          column: 19
        }
      },
      "61": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 23
        }
      },
      "62": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "63": {
        start: {
          line: 237,
          column: 32
        },
        end: {
          line: 237,
          column: 70
        }
      },
      "64": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "65": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 248,
          column: 19
        }
      },
      "66": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 260,
          column: 19
        }
      },
      "67": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 23
        }
      },
      "68": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "69": {
        start: {
          line: 266,
          column: 33
        },
        end: {
          line: 266,
          column: 72
        }
      },
      "70": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 291,
          column: 13
        }
      },
      "71": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 277,
          column: 19
        }
      },
      "72": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 289,
          column: 19
        }
      },
      "73": {
        start: {
          line: 290,
          column: 16
        },
        end: {
          line: 290,
          column: 23
        }
      },
      "74": {
        start: {
          line: 294,
          column: 25
        },
        end: {
          line: 294,
          column: 47
        }
      },
      "75": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "76": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 303,
          column: 15
        }
      },
      "77": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 15
        }
      },
      "78": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 64
        }
      },
      "79": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 317,
          column: 11
        }
      },
      "80": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 326,
          column: 11
        }
      },
      "81": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 15
        }
      },
      "82": {
        start: {
          line: 330,
          column: 0
        },
        end: {
          line: 330,
          column: 72
        }
      },
      "83": {
        start: {
          line: 334,
          column: 46
        },
        end: {
          line: 414,
          column: 1
        }
      },
      "84": {
        start: {
          line: 335,
          column: 4
        },
        end: {
          line: 413,
          column: 6
        }
      },
      "85": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 412,
          column: 9
        }
      },
      "86": {
        start: {
          line: 337,
          column: 31
        },
        end: {
          line: 364,
          column: 13
        }
      },
      "87": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 362,
          column: 17
        }
      },
      "88": {
        start: {
          line: 340,
          column: 20
        },
        end: {
          line: 345,
          column: 21
        }
      },
      "89": {
        start: {
          line: 340,
          column: 63
        },
        end: {
          line: 340,
          column: 82
        }
      },
      "90": {
        start: {
          line: 342,
          column: 24
        },
        end: {
          line: 344,
          column: 25
        }
      },
      "91": {
        start: {
          line: 342,
          column: 61
        },
        end: {
          line: 342,
          column: 80
        }
      },
      "92": {
        start: {
          line: 343,
          column: 28
        },
        end: {
          line: 343,
          column: 81
        }
      },
      "93": {
        start: {
          line: 347,
          column: 21
        },
        end: {
          line: 362,
          column: 17
        }
      },
      "94": {
        start: {
          line: 348,
          column: 20
        },
        end: {
          line: 353,
          column: 21
        }
      },
      "95": {
        start: {
          line: 348,
          column: 33
        },
        end: {
          line: 348,
          column: 34
        }
      },
      "96": {
        start: {
          line: 349,
          column: 39
        },
        end: {
          line: 349,
          column: 59
        }
      },
      "97": {
        start: {
          line: 350,
          column: 24
        },
        end: {
          line: 352,
          column: 25
        }
      },
      "98": {
        start: {
          line: 351,
          column: 28
        },
        end: {
          line: 351,
          column: 80
        }
      },
      "99": {
        start: {
          line: 355,
          column: 21
        },
        end: {
          line: 362,
          column: 17
        }
      },
      "100": {
        start: {
          line: 356,
          column: 20
        },
        end: {
          line: 361,
          column: 21
        }
      },
      "101": {
        start: {
          line: 357,
          column: 39
        },
        end: {
          line: 357,
          column: 56
        }
      },
      "102": {
        start: {
          line: 358,
          column: 24
        },
        end: {
          line: 360,
          column: 25
        }
      },
      "103": {
        start: {
          line: 359,
          column: 28
        },
        end: {
          line: 359,
          column: 70
        }
      },
      "104": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 363,
          column: 58
        }
      },
      "105": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 376,
          column: 13
        }
      },
      "106": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 374,
          column: 19
        }
      },
      "107": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 23
        }
      },
      "108": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 387,
          column: 13
        }
      },
      "109": {
        start: {
          line: 378,
          column: 16
        },
        end: {
          line: 385,
          column: 19
        }
      },
      "110": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 386,
          column: 23
        }
      },
      "111": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 398,
          column: 13
        }
      },
      "112": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 396,
          column: 19
        }
      },
      "113": {
        start: {
          line: 397,
          column: 16
        },
        end: {
          line: 397,
          column: 23
        }
      },
      "114": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 19
        }
      },
      "115": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 78
        }
      },
      "116": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 410,
          column: 15
        }
      },
      "117": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 19
        }
      },
      "118": {
        start: {
          line: 415,
          column: 0
        },
        end: {
          line: 415,
          column: 86
        }
      }
    },
    fnMap: {
      "0": {
        name: "containsSqlInjection",
        decl: {
          start: {
            line: 42,
            column: 9
          },
          end: {
            line: 42,
            column: 29
          }
        },
        loc: {
          start: {
            line: 42,
            column: 37
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 42
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 43,
            column: 39
          },
          end: {
            line: 43,
            column: 40
          }
        },
        loc: {
          start: {
            line: 43,
            column: 50
          },
          end: {
            line: 43,
            column: 69
          }
        },
        line: 43
      },
      "2": {
        name: "checkObjectForSqlInjection",
        decl: {
          start: {
            line: 48,
            column: 9
          },
          end: {
            line: 48,
            column: 35
          }
        },
        loc: {
          start: {
            line: 48,
            column: 41
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 48
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 75,
            column: 28
          },
          end: {
            line: 75,
            column: 29
          }
        },
        loc: {
          start: {
            line: 75,
            column: 48
          },
          end: {
            line: 168,
            column: 1
          }
        },
        line: 75
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 173,
            column: 39
          },
          end: {
            line: 173,
            column: 40
          }
        },
        loc: {
          start: {
            line: 173,
            column: 59
          },
          end: {
            line: 329,
            column: 1
          }
        },
        line: 173
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 334,
            column: 46
          },
          end: {
            line: 334,
            column: 47
          }
        },
        loc: {
          start: {
            line: 334,
            column: 67
          },
          end: {
            line: 414,
            column: 1
          }
        },
        line: 334
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 335,
            column: 11
          },
          end: {
            line: 335,
            column: 12
          }
        },
        loc: {
          start: {
            line: 335,
            column: 31
          },
          end: {
            line: 413,
            column: 5
          }
        },
        line: 335
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 337,
            column: 31
          },
          end: {
            line: 337,
            column: 32
          }
        },
        loc: {
          start: {
            line: 337,
            column: 42
          },
          end: {
            line: 364,
            column: 13
          }
        },
        line: 337
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 340,
            column: 52
          },
          end: {
            line: 340,
            column: 53
          }
        },
        loc: {
          start: {
            line: 340,
            column: 63
          },
          end: {
            line: 340,
            column: 82
          }
        },
        line: 340
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 342,
            column: 50
          },
          end: {
            line: 342,
            column: 51
          }
        },
        loc: {
          start: {
            line: 342,
            column: 61
          },
          end: {
            line: 342,
            column: 80
          }
        },
        line: 342
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }, {
          start: {
            line: 54,
            column: 9
          },
          end: {
            line: 69,
            column: 5
          }
        }],
        line: 49
      },
      "1": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 9
          },
          end: {
            line: 69,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 9
          },
          end: {
            line: 69,
            column: 5
          }
        }, {
          start: {
            line: 62,
            column: 9
          },
          end: {
            line: 69,
            column: 5
          }
        }],
        line: 54
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 62,
            column: 9
          },
          end: {
            line: 69,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 9
          },
          end: {
            line: 69,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "5": {
        loc: {
          start: {
            line: 62,
            column: 13
          },
          end: {
            line: 62,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 13
          },
          end: {
            line: 62,
            column: 25
          }
        }, {
          start: {
            line: 62,
            column: 29
          },
          end: {
            line: 62,
            column: 52
          }
        }],
        line: 62
      },
      "6": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "7": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "8": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "9": {
        loc: {
          start: {
            line: 86,
            column: 31
          },
          end: {
            line: 86,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 31
          },
          end: {
            line: 86,
            column: 44
          }
        }, {
          start: {
            line: 86,
            column: 48
          },
          end: {
            line: 86,
            column: 57
          }
        }],
        line: 86
      },
      "10": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "11": {
        loc: {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "12": {
        loc: {
          start: {
            line: 105,
            column: 31
          },
          end: {
            line: 105,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 31
          },
          end: {
            line: 105,
            column: 44
          }
        }, {
          start: {
            line: 105,
            column: 48
          },
          end: {
            line: 105,
            column: 57
          }
        }],
        line: 105
      },
      "13": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "14": {
        loc: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "15": {
        loc: {
          start: {
            line: 124,
            column: 31
          },
          end: {
            line: 124,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 124,
            column: 31
          },
          end: {
            line: 124,
            column: 44
          }
        }, {
          start: {
            line: 124,
            column: 48
          },
          end: {
            line: 124,
            column: 57
          }
        }],
        line: 124
      },
      "16": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "17": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "18": {
        loc: {
          start: {
            line: 143,
            column: 31
          },
          end: {
            line: 143,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 31
          },
          end: {
            line: 143,
            column: 44
          }
        }, {
          start: {
            line: 143,
            column: 48
          },
          end: {
            line: 143,
            column: 57
          }
        }],
        line: 143
      },
      "19": {
        loc: {
          start: {
            line: 163,
            column: 23
          },
          end: {
            line: 163,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 23
          },
          end: {
            line: 163,
            column: 36
          }
        }, {
          start: {
            line: 163,
            column: 40
          },
          end: {
            line: 163,
            column: 49
          }
        }],
        line: 163
      },
      "20": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "21": {
        loc: {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "22": {
        loc: {
          start: {
            line: 189,
            column: 31
          },
          end: {
            line: 189,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 31
          },
          end: {
            line: 189,
            column: 44
          }
        }, {
          start: {
            line: 189,
            column: 48
          },
          end: {
            line: 189,
            column: 57
          }
        }],
        line: 189
      },
      "23": {
        loc: {
          start: {
            line: 196,
            column: 31
          },
          end: {
            line: 196,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 31
          },
          end: {
            line: 196,
            column: 44
          }
        }, {
          start: {
            line: 196,
            column: 48
          },
          end: {
            line: 196,
            column: 57
          }
        }],
        line: 196
      },
      "24": {
        loc: {
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "25": {
        loc: {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 233,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 233,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "26": {
        loc: {
          start: {
            line: 218,
            column: 31
          },
          end: {
            line: 218,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 31
          },
          end: {
            line: 218,
            column: 44
          }
        }, {
          start: {
            line: 218,
            column: 48
          },
          end: {
            line: 218,
            column: 57
          }
        }],
        line: 218
      },
      "27": {
        loc: {
          start: {
            line: 225,
            column: 31
          },
          end: {
            line: 225,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 225,
            column: 31
          },
          end: {
            line: 225,
            column: 44
          }
        }, {
          start: {
            line: 225,
            column: 48
          },
          end: {
            line: 225,
            column: 57
          }
        }],
        line: 225
      },
      "28": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "29": {
        loc: {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "30": {
        loc: {
          start: {
            line: 247,
            column: 31
          },
          end: {
            line: 247,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 247,
            column: 31
          },
          end: {
            line: 247,
            column: 44
          }
        }, {
          start: {
            line: 247,
            column: 48
          },
          end: {
            line: 247,
            column: 57
          }
        }],
        line: 247
      },
      "31": {
        loc: {
          start: {
            line: 254,
            column: 31
          },
          end: {
            line: 254,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 31
          },
          end: {
            line: 254,
            column: 44
          }
        }, {
          start: {
            line: 254,
            column: 48
          },
          end: {
            line: 254,
            column: 57
          }
        }],
        line: 254
      },
      "32": {
        loc: {
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "33": {
        loc: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 291,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 291,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "34": {
        loc: {
          start: {
            line: 276,
            column: 31
          },
          end: {
            line: 276,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 31
          },
          end: {
            line: 276,
            column: 44
          }
        }, {
          start: {
            line: 276,
            column: 48
          },
          end: {
            line: 276,
            column: 57
          }
        }],
        line: 276
      },
      "35": {
        loc: {
          start: {
            line: 283,
            column: 31
          },
          end: {
            line: 283,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 31
          },
          end: {
            line: 283,
            column: 44
          }
        }, {
          start: {
            line: 283,
            column: 48
          },
          end: {
            line: 283,
            column: 57
          }
        }],
        line: 283
      },
      "36": {
        loc: {
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "37": {
        loc: {
          start: {
            line: 302,
            column: 27
          },
          end: {
            line: 302,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 302,
            column: 27
          },
          end: {
            line: 302,
            column: 40
          }
        }, {
          start: {
            line: 302,
            column: 44
          },
          end: {
            line: 302,
            column: 53
          }
        }],
        line: 302
      },
      "38": {
        loc: {
          start: {
            line: 316,
            column: 23
          },
          end: {
            line: 316,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 316,
            column: 23
          },
          end: {
            line: 316,
            column: 36
          }
        }, {
          start: {
            line: 316,
            column: 40
          },
          end: {
            line: 316,
            column: 49
          }
        }],
        line: 316
      },
      "39": {
        loc: {
          start: {
            line: 324,
            column: 23
          },
          end: {
            line: 324,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 324,
            column: 23
          },
          end: {
            line: 324,
            column: 36
          }
        }, {
          start: {
            line: 324,
            column: 40
          },
          end: {
            line: 324,
            column: 49
          }
        }],
        line: 324
      },
      "40": {
        loc: {
          start: {
            line: 338,
            column: 16
          },
          end: {
            line: 362,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 16
          },
          end: {
            line: 362,
            column: 17
          }
        }, {
          start: {
            line: 347,
            column: 21
          },
          end: {
            line: 362,
            column: 17
          }
        }],
        line: 338
      },
      "41": {
        loc: {
          start: {
            line: 340,
            column: 20
          },
          end: {
            line: 345,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 20
          },
          end: {
            line: 345,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "42": {
        loc: {
          start: {
            line: 342,
            column: 24
          },
          end: {
            line: 344,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 24
          },
          end: {
            line: 344,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      },
      "43": {
        loc: {
          start: {
            line: 347,
            column: 21
          },
          end: {
            line: 362,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 21
          },
          end: {
            line: 362,
            column: 17
          }
        }, {
          start: {
            line: 355,
            column: 21
          },
          end: {
            line: 362,
            column: 17
          }
        }],
        line: 347
      },
      "44": {
        loc: {
          start: {
            line: 350,
            column: 24
          },
          end: {
            line: 352,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 24
          },
          end: {
            line: 352,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 350
      },
      "45": {
        loc: {
          start: {
            line: 355,
            column: 21
          },
          end: {
            line: 362,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 21
          },
          end: {
            line: 362,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "46": {
        loc: {
          start: {
            line: 355,
            column: 25
          },
          end: {
            line: 355,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 355,
            column: 25
          },
          end: {
            line: 355,
            column: 39
          }
        }, {
          start: {
            line: 355,
            column: 43
          },
          end: {
            line: 355,
            column: 68
          }
        }],
        line: 355
      },
      "47": {
        loc: {
          start: {
            line: 358,
            column: 24
          },
          end: {
            line: 360,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 358,
            column: 24
          },
          end: {
            line: 360,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 358
      },
      "48": {
        loc: {
          start: {
            line: 366,
            column: 12
          },
          end: {
            line: 376,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 12
          },
          end: {
            line: 376,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "49": {
        loc: {
          start: {
            line: 366,
            column: 16
          },
          end: {
            line: 366,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 366,
            column: 16
          },
          end: {
            line: 366,
            column: 24
          }
        }, {
          start: {
            line: 366,
            column: 28
          },
          end: {
            line: 366,
            column: 61
          }
        }],
        line: 366
      },
      "50": {
        loc: {
          start: {
            line: 372,
            column: 31
          },
          end: {
            line: 372,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 372,
            column: 31
          },
          end: {
            line: 372,
            column: 44
          }
        }, {
          start: {
            line: 372,
            column: 48
          },
          end: {
            line: 372,
            column: 57
          }
        }],
        line: 372
      },
      "51": {
        loc: {
          start: {
            line: 377,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "52": {
        loc: {
          start: {
            line: 377,
            column: 16
          },
          end: {
            line: 377,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 377,
            column: 16
          },
          end: {
            line: 377,
            column: 25
          }
        }, {
          start: {
            line: 377,
            column: 29
          },
          end: {
            line: 377,
            column: 63
          }
        }],
        line: 377
      },
      "53": {
        loc: {
          start: {
            line: 383,
            column: 31
          },
          end: {
            line: 383,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 383,
            column: 31
          },
          end: {
            line: 383,
            column: 44
          }
        }, {
          start: {
            line: 383,
            column: 48
          },
          end: {
            line: 383,
            column: 57
          }
        }],
        line: 383
      },
      "54": {
        loc: {
          start: {
            line: 388,
            column: 12
          },
          end: {
            line: 398,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 12
          },
          end: {
            line: 398,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 388
      },
      "55": {
        loc: {
          start: {
            line: 388,
            column: 16
          },
          end: {
            line: 388,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 388,
            column: 16
          },
          end: {
            line: 388,
            column: 26
          }
        }, {
          start: {
            line: 388,
            column: 30
          },
          end: {
            line: 388,
            column: 65
          }
        }],
        line: 388
      },
      "56": {
        loc: {
          start: {
            line: 394,
            column: 31
          },
          end: {
            line: 394,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 394,
            column: 31
          },
          end: {
            line: 394,
            column: 44
          }
        }, {
          start: {
            line: 394,
            column: 48
          },
          end: {
            line: 394,
            column: 57
          }
        }],
        line: 394
      },
      "57": {
        loc: {
          start: {
            line: 408,
            column: 27
          },
          end: {
            line: 408,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 408,
            column: 27
          },
          end: {
            line: 408,
            column: 40
          }
        }, {
          start: {
            line: 408,
            column: 44
          },
          end: {
            line: 408,
            column: 53
          }
        }],
        line: 408
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/middleware/security/sqlInjection.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/middleware/security/sqlInjection.ts"],
      sourcesContent: ["import { Request, Response, NextFunction } from 'express';\nimport { ErrorResponse } from '../../utils/types/express';\n\n/**\n * SQL Injection prevention patterns\n */\nconst SQL_INJECTION_PATTERNS = [\n  // Common SQL keywords\n  /\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|EXECUTE|UNION|SCRIPT|SCRIPT>)\\b/i,\n  \n  // SQL comments\n  /--/,\n  /\\/\\*/,\n  /\\*\\//,\n  \n  // SQL operators\n  /\\b(OR|AND)\\s+\\d+\\s*=\\s*\\d+/i,\n  /\\b(OR|AND)\\s+['\"]?\\w+['\"]?\\s*=\\s*['\"]?\\w+['\"]?/i,\n  \n  // SQL functions\n  /\\b(CHAR|CONCAT|SUBSTRING|LENGTH|COUNT|SUM|AVG|MAX|MIN)\\s*\\(/i,\n  \n  // SQL injection attempts\n  /(\\bOR\\b|\\bAND\\b)\\s+\\d+\\s*=\\s*\\d+/i,\n  /(\\bOR\\b|\\bAND\\b)\\s+['\"]?\\w+['\"]?\\s*=\\s*['\"]?\\w+['\"]?/i,\n  \n  // Hex encoded attacks\n  /0x[0-9a-fA-F]+/i,\n  \n  // URL encoded attacks\n  /%27|%22|%2D%2D|%2F%2A|%2A%2F/i,\n  \n  // Unicode attacks\n  /\\u0027|\\u0022|\\u002D\\u002D|\\u002F\\u002A|\\u002A\\u002F/i,\n  \n  // Null byte attacks\n  /\\x00/,\n  \n  // Stacked queries\n  /;\\s*(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER)/i,\n  \n  // Time-based attacks\n  /(SLEEP|BENCHMARK|WAIT)\\s*\\(/i,\n  \n  // Boolean-based attacks\n  /(\\bOR\\b|\\bAND\\b)\\s+\\d+\\s*=\\s*\\d+\\s*--/i,\n  \n  // Error-based attacks\n  /(UPDATEXML|EXTRACTVALUE|FLOOR|RAND)\\s*\\(/i\n];\n\n/**\n * Check if a string contains SQL injection patterns\n */\nfunction containsSqlInjection(input: string): boolean {\n  return SQL_INJECTION_PATTERNS.some(pattern => pattern.test(input));\n}\n\n/**\n * Recursively check object for SQL injection\n */\nfunction checkObjectForSqlInjection(obj: any): { hasInjection: boolean; field: string } {\n  if (typeof obj === 'string') {\n    if (containsSqlInjection(obj)) {\n      return { hasInjection: true, field: 'string_value' };\n    }\n  } else if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      const result = checkObjectForSqlInjection(obj[i]);\n      if (result.hasInjection) {\n        return { hasInjection: true, field: `array[${i}]` };\n      }\n    }\n  } else if (obj !== null && typeof obj === 'object') {\n    for (const [key, value] of Object.entries(obj)) {\n      const result = checkObjectForSqlInjection(value);\n      if (result.hasInjection) {\n        return { hasInjection: true, field: key };\n      }\n    }\n  }\n  \n  return { hasInjection: false, field: '' };\n}\n\n/**\n * SQL Injection prevention middleware\n */\nexport const preventSqlInjection = (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n  try {\n    // Check request body\n    if (req.body) {\n      const bodyCheck = checkObjectForSqlInjection(req.body);\n      if (bodyCheck.hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in request body',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: bodyCheck.field,\n            type: 'body'\n          }\n        });\n        return;\n      }\n    }\n\n    // Check query parameters\n    if (req.query) {\n      const queryCheck = checkObjectForSqlInjection(req.query);\n      if (queryCheck.hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in query parameters',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: queryCheck.field,\n            type: 'query'\n          }\n        });\n        return;\n      }\n    }\n\n    // Check path parameters\n    if (req.params) {\n      const paramsCheck = checkObjectForSqlInjection(req.params);\n      if (paramsCheck.hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in path parameters',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: paramsCheck.field,\n            type: 'query'\n          }\n        });\n        return;\n      }\n    }\n\n    // Check headers (for potential header injection)\n    if (req.headers) {\n      const headersCheck = checkObjectForSqlInjection(req.headers);\n      if (headersCheck.hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in headers',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: headersCheck.field,\n            type: 'headers'\n          }\n        });\n        return;\n      }\n    }\n\n    next();\n  } catch (error) {\n    console.error('SQL injection prevention error:', error);\n    \n    // If prevention fails, block the request for safety\n    res.status(500).json({\n      success: false,\n      message: 'Security check failed - request blocked',\n      error: 'SECURITY_CHECK_FAILED',\n      timestamp: new Date().toISOString(),\n      requestId: req.requestId || 'unknown',\n      path: req.path\n    });\n    return;\n  }\n};\n\n/**\n * Enhanced SQL injection prevention with logging\n */\nexport const preventSqlInjectionWithLogging = (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n  const startTime = Date.now();\n  \n  try {\n    // Check request body\n    if (req.body) {\n      const bodyCheck = checkObjectForSqlInjection(req.body);\n      if (bodyCheck.hasInjection) {\n        // Log the attempt\n        console.warn(`SQL Injection attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          body: req.body,\n          field: bodyCheck.field,\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in request body',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: bodyCheck.field,\n            type: 'body'\n          }\n        });\n        return;\n      }\n    }\n\n    // Check query parameters\n    if (req.query) {\n      const queryCheck = checkObjectForSqlInjection(req.query);\n      if (queryCheck.hasInjection) {\n        console.warn(`SQL Injection attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          query: req.query,\n          field: queryCheck.field,\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in query parameters',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: queryCheck.field,\n            type: 'query'\n          }\n        });\n        return;\n      }\n    }\n\n    // Check path parameters\n    if (req.params) {\n      const paramsCheck = checkObjectForSqlInjection(req.params);\n      if (paramsCheck.hasInjection) {\n        console.warn(`SQL Injection attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          params: req.params,\n          field: paramsCheck.field,\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in path parameters',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: paramsCheck.field,\n            type: 'params'\n          }\n        });\n        return;\n      }\n    }\n\n    // Check headers\n    if (req.headers) {\n      const headersCheck = checkObjectForSqlInjection(req.headers);\n      if (headersCheck.hasInjection) {\n        console.warn(`SQL Injection attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          headers: req.headers,\n          field: headersCheck.field,\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in headers',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: headersCheck.field,\n            type: 'headers'\n          }\n        });\n        return;\n      }\n    }\n\n    // Log successful security check\n    const duration = Date.now() - startTime;\n    if (duration > 100) { // Log slow security checks\n      console.info(`Security check completed in ${duration}ms:`, {\n        timestamp: new Date().toISOString(),\n        ip: req.ip,\n        path: req.path,\n        method: req.method,\n        duration,\n        requestId: req.requestId || 'unknown'\n      });\n    }\n\n    next();\n  } catch (error) {\n    console.error('SQL injection prevention error:', error);\n    \n    // Log the error\n    console.error(`Security check failed:`, {\n      timestamp: new Date().toISOString(),\n      ip: req.ip,\n      path: req.path,\n      method: req.method,\n      error: (error as Error).message,\n      requestId: req.requestId || 'unknown'\n    });\n\n    // Block the request for safety\n    res.status(500).json({\n      success: false,\n      message: 'Security check failed - request blocked',\n      error: 'SECURITY_CHECK_FAILED',\n      timestamp: new Date().toISOString(),\n      requestId: req.requestId || 'unknown',\n      path: req.path\n    });\n    return;\n  }\n};\n\n/**\n * Whitelist-based SQL injection prevention\n */\nexport const createWhitelistSqlInjectionPrevention = (allowedPatterns: RegExp[]) => {\n  return (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n    try {\n      const checkInput = (input: any): { hasInjection: boolean; field: string } => {\n        if (typeof input === 'string') {\n          // Check against blacklist patterns\n          if (SQL_INJECTION_PATTERNS.some(pattern => pattern.test(input))) {\n            // Check if it matches any whitelist patterns\n            if (!allowedPatterns.some(pattern => pattern.test(input))) {\n              return { hasInjection: true, field: 'string_value' };\n            }\n          }\n        } else if (Array.isArray(input)) {\n          for (let i = 0; i < input.length; i++) {\n            const result = checkInput(input[i]);\n            if (result.hasInjection) {\n              return { hasInjection: true, field: `array[${i}]` };\n            }\n          }\n        } else if (input !== null && typeof input === 'object') {\n          for (const [key, value] of Object.entries(input)) {\n            const result = checkInput(value);\n            if (result.hasInjection) {\n              return { hasInjection: true, field: key };\n            }\n          }\n        }\n        \n        return { hasInjection: false, field: '' };\n      };\n\n      // Check all request data\n      if (req.body && checkInput(req.body).hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n\n      if (req.query && checkInput(req.query).hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n\n      if (req.params && checkInput(req.params).hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n\n      next();\n    } catch (error) {\n      console.error('Whitelist SQL injection prevention error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Security check failed - request blocked',\n        error: 'SECURITY_CHECK_FAILED',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId || 'unknown',\n        path: req.path\n      });\n      return;\n    }\n  };\n}; "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2e96c81b0e6ecc65ee149606ad2379320bacb97b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2a28m9qu1g = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2a28m9qu1g();
cov_2a28m9qu1g().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2a28m9qu1g().s[1]++;
exports.createWhitelistSqlInjectionPrevention = exports.preventSqlInjectionWithLogging = exports.preventSqlInjection = void 0;
/**
 * SQL Injection prevention patterns
 */
const SQL_INJECTION_PATTERNS =
/* istanbul ignore next */
(cov_2a28m9qu1g().s[2]++, [
// Common SQL keywords
/\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|EXECUTE|UNION|SCRIPT|SCRIPT>)\b/i,
// SQL comments
/--/, /\/\*/, /\*\//,
// SQL operators
/\b(OR|AND)\s+\d+\s*=\s*\d+/i, /\b(OR|AND)\s+['"]?\w+['"]?\s*=\s*['"]?\w+['"]?/i,
// SQL functions
/\b(CHAR|CONCAT|SUBSTRING|LENGTH|COUNT|SUM|AVG|MAX|MIN)\s*\(/i,
// SQL injection attempts
/(\bOR\b|\bAND\b)\s+\d+\s*=\s*\d+/i, /(\bOR\b|\bAND\b)\s+['"]?\w+['"]?\s*=\s*['"]?\w+['"]?/i,
// Hex encoded attacks
/0x[0-9a-fA-F]+/i,
// URL encoded attacks
/%27|%22|%2D%2D|%2F%2A|%2A%2F/i,
// Unicode attacks
/\u0027|\u0022|\u002D\u002D|\u002F\u002A|\u002A\u002F/i,
// Null byte attacks
/\x00/,
// Stacked queries
/;\s*(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER)/i,
// Time-based attacks
/(SLEEP|BENCHMARK|WAIT)\s*\(/i,
// Boolean-based attacks
/(\bOR\b|\bAND\b)\s+\d+\s*=\s*\d+\s*--/i,
// Error-based attacks
/(UPDATEXML|EXTRACTVALUE|FLOOR|RAND)\s*\(/i]);
/**
 * Check if a string contains SQL injection patterns
 */
function containsSqlInjection(input) {
  /* istanbul ignore next */
  cov_2a28m9qu1g().f[0]++;
  cov_2a28m9qu1g().s[3]++;
  return SQL_INJECTION_PATTERNS.some(pattern => {
    /* istanbul ignore next */
    cov_2a28m9qu1g().f[1]++;
    cov_2a28m9qu1g().s[4]++;
    return pattern.test(input);
  });
}
/**
 * Recursively check object for SQL injection
 */
function checkObjectForSqlInjection(obj) {
  /* istanbul ignore next */
  cov_2a28m9qu1g().f[2]++;
  cov_2a28m9qu1g().s[5]++;
  if (typeof obj === 'string') {
    /* istanbul ignore next */
    cov_2a28m9qu1g().b[0][0]++;
    cov_2a28m9qu1g().s[6]++;
    if (containsSqlInjection(obj)) {
      /* istanbul ignore next */
      cov_2a28m9qu1g().b[1][0]++;
      cov_2a28m9qu1g().s[7]++;
      return {
        hasInjection: true,
        field: 'string_value'
      };
    } else
    /* istanbul ignore next */
    {
      cov_2a28m9qu1g().b[1][1]++;
    }
  } else {
    /* istanbul ignore next */
    cov_2a28m9qu1g().b[0][1]++;
    cov_2a28m9qu1g().s[8]++;
    if (Array.isArray(obj)) {
      /* istanbul ignore next */
      cov_2a28m9qu1g().b[2][0]++;
      cov_2a28m9qu1g().s[9]++;
      for (let i =
      /* istanbul ignore next */
      (cov_2a28m9qu1g().s[10]++, 0); i < obj.length; i++) {
        const result =
        /* istanbul ignore next */
        (cov_2a28m9qu1g().s[11]++, checkObjectForSqlInjection(obj[i]));
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[12]++;
        if (result.hasInjection) {
          /* istanbul ignore next */
          cov_2a28m9qu1g().b[3][0]++;
          cov_2a28m9qu1g().s[13]++;
          return {
            hasInjection: true,
            field: `array[${i}]`
          };
        } else
        /* istanbul ignore next */
        {
          cov_2a28m9qu1g().b[3][1]++;
        }
      }
    } else {
      /* istanbul ignore next */
      cov_2a28m9qu1g().b[2][1]++;
      cov_2a28m9qu1g().s[14]++;
      if (
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[5][0]++, obj !== null) &&
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[5][1]++, typeof obj === 'object')) {
        /* istanbul ignore next */
        cov_2a28m9qu1g().b[4][0]++;
        cov_2a28m9qu1g().s[15]++;
        for (const [key, value] of Object.entries(obj)) {
          const result =
          /* istanbul ignore next */
          (cov_2a28m9qu1g().s[16]++, checkObjectForSqlInjection(value));
          /* istanbul ignore next */
          cov_2a28m9qu1g().s[17]++;
          if (result.hasInjection) {
            /* istanbul ignore next */
            cov_2a28m9qu1g().b[6][0]++;
            cov_2a28m9qu1g().s[18]++;
            return {
              hasInjection: true,
              field: key
            };
          } else
          /* istanbul ignore next */
          {
            cov_2a28m9qu1g().b[6][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_2a28m9qu1g().b[4][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_2a28m9qu1g().s[19]++;
  return {
    hasInjection: false,
    field: ''
  };
}
/**
 * SQL Injection prevention middleware
 */
/* istanbul ignore next */
cov_2a28m9qu1g().s[20]++;
const preventSqlInjection = (req, res, next) => {
  /* istanbul ignore next */
  cov_2a28m9qu1g().f[3]++;
  cov_2a28m9qu1g().s[21]++;
  try {
    /* istanbul ignore next */
    cov_2a28m9qu1g().s[22]++;
    // Check request body
    if (req.body) {
      /* istanbul ignore next */
      cov_2a28m9qu1g().b[7][0]++;
      const bodyCheck =
      /* istanbul ignore next */
      (cov_2a28m9qu1g().s[23]++, checkObjectForSqlInjection(req.body));
      /* istanbul ignore next */
      cov_2a28m9qu1g().s[24]++;
      if (bodyCheck.hasInjection) {
        /* istanbul ignore next */
        cov_2a28m9qu1g().b[8][0]++;
        cov_2a28m9qu1g().s[25]++;
        res.status(400).json({
          success: false,
          message: 'Potential SQL injection detected in request body',
          error: 'SQL_INJECTION_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[9][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[9][1]++, 'unknown'),
          path: req.path,
          details: {
            field: bodyCheck.field,
            type: 'body'
          }
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[26]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2a28m9qu1g().b[8][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2a28m9qu1g().b[7][1]++;
    }
    // Check query parameters
    cov_2a28m9qu1g().s[27]++;
    if (req.query) {
      /* istanbul ignore next */
      cov_2a28m9qu1g().b[10][0]++;
      const queryCheck =
      /* istanbul ignore next */
      (cov_2a28m9qu1g().s[28]++, checkObjectForSqlInjection(req.query));
      /* istanbul ignore next */
      cov_2a28m9qu1g().s[29]++;
      if (queryCheck.hasInjection) {
        /* istanbul ignore next */
        cov_2a28m9qu1g().b[11][0]++;
        cov_2a28m9qu1g().s[30]++;
        res.status(400).json({
          success: false,
          message: 'Potential SQL injection detected in query parameters',
          error: 'SQL_INJECTION_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[12][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[12][1]++, 'unknown'),
          path: req.path,
          details: {
            field: queryCheck.field,
            type: 'query'
          }
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[31]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2a28m9qu1g().b[11][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2a28m9qu1g().b[10][1]++;
    }
    // Check path parameters
    cov_2a28m9qu1g().s[32]++;
    if (req.params) {
      /* istanbul ignore next */
      cov_2a28m9qu1g().b[13][0]++;
      const paramsCheck =
      /* istanbul ignore next */
      (cov_2a28m9qu1g().s[33]++, checkObjectForSqlInjection(req.params));
      /* istanbul ignore next */
      cov_2a28m9qu1g().s[34]++;
      if (paramsCheck.hasInjection) {
        /* istanbul ignore next */
        cov_2a28m9qu1g().b[14][0]++;
        cov_2a28m9qu1g().s[35]++;
        res.status(400).json({
          success: false,
          message: 'Potential SQL injection detected in path parameters',
          error: 'SQL_INJECTION_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[15][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[15][1]++, 'unknown'),
          path: req.path,
          details: {
            field: paramsCheck.field,
            type: 'query'
          }
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[36]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2a28m9qu1g().b[14][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2a28m9qu1g().b[13][1]++;
    }
    // Check headers (for potential header injection)
    cov_2a28m9qu1g().s[37]++;
    if (req.headers) {
      /* istanbul ignore next */
      cov_2a28m9qu1g().b[16][0]++;
      const headersCheck =
      /* istanbul ignore next */
      (cov_2a28m9qu1g().s[38]++, checkObjectForSqlInjection(req.headers));
      /* istanbul ignore next */
      cov_2a28m9qu1g().s[39]++;
      if (headersCheck.hasInjection) {
        /* istanbul ignore next */
        cov_2a28m9qu1g().b[17][0]++;
        cov_2a28m9qu1g().s[40]++;
        res.status(400).json({
          success: false,
          message: 'Potential SQL injection detected in headers',
          error: 'SQL_INJECTION_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[18][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[18][1]++, 'unknown'),
          path: req.path,
          details: {
            field: headersCheck.field,
            type: 'headers'
          }
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[41]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2a28m9qu1g().b[17][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2a28m9qu1g().b[16][1]++;
    }
    cov_2a28m9qu1g().s[42]++;
    next();
  } catch (error) {
    /* istanbul ignore next */
    cov_2a28m9qu1g().s[43]++;
    console.error('SQL injection prevention error:', error);
    // If prevention fails, block the request for safety
    /* istanbul ignore next */
    cov_2a28m9qu1g().s[44]++;
    res.status(500).json({
      success: false,
      message: 'Security check failed - request blocked',
      error: 'SECURITY_CHECK_FAILED',
      timestamp: new Date().toISOString(),
      requestId:
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[19][0]++, req.requestId) ||
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[19][1]++, 'unknown'),
      path: req.path
    });
    /* istanbul ignore next */
    cov_2a28m9qu1g().s[45]++;
    return;
  }
};
/* istanbul ignore next */
cov_2a28m9qu1g().s[46]++;
exports.preventSqlInjection = preventSqlInjection;
/**
 * Enhanced SQL injection prevention with logging
 */
/* istanbul ignore next */
cov_2a28m9qu1g().s[47]++;
const preventSqlInjectionWithLogging = (req, res, next) => {
  /* istanbul ignore next */
  cov_2a28m9qu1g().f[4]++;
  const startTime =
  /* istanbul ignore next */
  (cov_2a28m9qu1g().s[48]++, Date.now());
  /* istanbul ignore next */
  cov_2a28m9qu1g().s[49]++;
  try {
    /* istanbul ignore next */
    cov_2a28m9qu1g().s[50]++;
    // Check request body
    if (req.body) {
      /* istanbul ignore next */
      cov_2a28m9qu1g().b[20][0]++;
      const bodyCheck =
      /* istanbul ignore next */
      (cov_2a28m9qu1g().s[51]++, checkObjectForSqlInjection(req.body));
      /* istanbul ignore next */
      cov_2a28m9qu1g().s[52]++;
      if (bodyCheck.hasInjection) {
        /* istanbul ignore next */
        cov_2a28m9qu1g().b[21][0]++;
        cov_2a28m9qu1g().s[53]++;
        // Log the attempt
        console.warn(`SQL Injection attempt detected:`, {
          timestamp: new Date().toISOString(),
          ip: req.ip,
          userAgent: req.get('User-Agent'),
          path: req.path,
          method: req.method,
          body: req.body,
          field: bodyCheck.field,
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[22][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[22][1]++, 'unknown')
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[54]++;
        res.status(400).json({
          success: false,
          message: 'Potential SQL injection detected in request body',
          error: 'SQL_INJECTION_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[23][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[23][1]++, 'unknown'),
          path: req.path,
          details: {
            field: bodyCheck.field,
            type: 'body'
          }
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[55]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2a28m9qu1g().b[21][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2a28m9qu1g().b[20][1]++;
    }
    // Check query parameters
    cov_2a28m9qu1g().s[56]++;
    if (req.query) {
      /* istanbul ignore next */
      cov_2a28m9qu1g().b[24][0]++;
      const queryCheck =
      /* istanbul ignore next */
      (cov_2a28m9qu1g().s[57]++, checkObjectForSqlInjection(req.query));
      /* istanbul ignore next */
      cov_2a28m9qu1g().s[58]++;
      if (queryCheck.hasInjection) {
        /* istanbul ignore next */
        cov_2a28m9qu1g().b[25][0]++;
        cov_2a28m9qu1g().s[59]++;
        console.warn(`SQL Injection attempt detected:`, {
          timestamp: new Date().toISOString(),
          ip: req.ip,
          userAgent: req.get('User-Agent'),
          path: req.path,
          method: req.method,
          query: req.query,
          field: queryCheck.field,
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[26][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[26][1]++, 'unknown')
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[60]++;
        res.status(400).json({
          success: false,
          message: 'Potential SQL injection detected in query parameters',
          error: 'SQL_INJECTION_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[27][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[27][1]++, 'unknown'),
          path: req.path,
          details: {
            field: queryCheck.field,
            type: 'query'
          }
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[61]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2a28m9qu1g().b[25][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2a28m9qu1g().b[24][1]++;
    }
    // Check path parameters
    cov_2a28m9qu1g().s[62]++;
    if (req.params) {
      /* istanbul ignore next */
      cov_2a28m9qu1g().b[28][0]++;
      const paramsCheck =
      /* istanbul ignore next */
      (cov_2a28m9qu1g().s[63]++, checkObjectForSqlInjection(req.params));
      /* istanbul ignore next */
      cov_2a28m9qu1g().s[64]++;
      if (paramsCheck.hasInjection) {
        /* istanbul ignore next */
        cov_2a28m9qu1g().b[29][0]++;
        cov_2a28m9qu1g().s[65]++;
        console.warn(`SQL Injection attempt detected:`, {
          timestamp: new Date().toISOString(),
          ip: req.ip,
          userAgent: req.get('User-Agent'),
          path: req.path,
          method: req.method,
          params: req.params,
          field: paramsCheck.field,
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[30][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[30][1]++, 'unknown')
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[66]++;
        res.status(400).json({
          success: false,
          message: 'Potential SQL injection detected in path parameters',
          error: 'SQL_INJECTION_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[31][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[31][1]++, 'unknown'),
          path: req.path,
          details: {
            field: paramsCheck.field,
            type: 'params'
          }
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[67]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2a28m9qu1g().b[29][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2a28m9qu1g().b[28][1]++;
    }
    // Check headers
    cov_2a28m9qu1g().s[68]++;
    if (req.headers) {
      /* istanbul ignore next */
      cov_2a28m9qu1g().b[32][0]++;
      const headersCheck =
      /* istanbul ignore next */
      (cov_2a28m9qu1g().s[69]++, checkObjectForSqlInjection(req.headers));
      /* istanbul ignore next */
      cov_2a28m9qu1g().s[70]++;
      if (headersCheck.hasInjection) {
        /* istanbul ignore next */
        cov_2a28m9qu1g().b[33][0]++;
        cov_2a28m9qu1g().s[71]++;
        console.warn(`SQL Injection attempt detected:`, {
          timestamp: new Date().toISOString(),
          ip: req.ip,
          userAgent: req.get('User-Agent'),
          path: req.path,
          method: req.method,
          headers: req.headers,
          field: headersCheck.field,
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[34][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[34][1]++, 'unknown')
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[72]++;
        res.status(400).json({
          success: false,
          message: 'Potential SQL injection detected in headers',
          error: 'SQL_INJECTION_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[35][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[35][1]++, 'unknown'),
          path: req.path,
          details: {
            field: headersCheck.field,
            type: 'headers'
          }
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[73]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2a28m9qu1g().b[33][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2a28m9qu1g().b[32][1]++;
    }
    // Log successful security check
    const duration =
    /* istanbul ignore next */
    (cov_2a28m9qu1g().s[74]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_2a28m9qu1g().s[75]++;
    if (duration > 100) {
      /* istanbul ignore next */
      cov_2a28m9qu1g().b[36][0]++;
      cov_2a28m9qu1g().s[76]++;
      // Log slow security checks
      console.info(`Security check completed in ${duration}ms:`, {
        timestamp: new Date().toISOString(),
        ip: req.ip,
        path: req.path,
        method: req.method,
        duration,
        requestId:
        /* istanbul ignore next */
        (cov_2a28m9qu1g().b[37][0]++, req.requestId) ||
        /* istanbul ignore next */
        (cov_2a28m9qu1g().b[37][1]++, 'unknown')
      });
    } else
    /* istanbul ignore next */
    {
      cov_2a28m9qu1g().b[36][1]++;
    }
    cov_2a28m9qu1g().s[77]++;
    next();
  } catch (error) {
    /* istanbul ignore next */
    cov_2a28m9qu1g().s[78]++;
    console.error('SQL injection prevention error:', error);
    // Log the error
    /* istanbul ignore next */
    cov_2a28m9qu1g().s[79]++;
    console.error(`Security check failed:`, {
      timestamp: new Date().toISOString(),
      ip: req.ip,
      path: req.path,
      method: req.method,
      error: error.message,
      requestId:
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[38][0]++, req.requestId) ||
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[38][1]++, 'unknown')
    });
    // Block the request for safety
    /* istanbul ignore next */
    cov_2a28m9qu1g().s[80]++;
    res.status(500).json({
      success: false,
      message: 'Security check failed - request blocked',
      error: 'SECURITY_CHECK_FAILED',
      timestamp: new Date().toISOString(),
      requestId:
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[39][0]++, req.requestId) ||
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[39][1]++, 'unknown'),
      path: req.path
    });
    /* istanbul ignore next */
    cov_2a28m9qu1g().s[81]++;
    return;
  }
};
/* istanbul ignore next */
cov_2a28m9qu1g().s[82]++;
exports.preventSqlInjectionWithLogging = preventSqlInjectionWithLogging;
/**
 * Whitelist-based SQL injection prevention
 */
/* istanbul ignore next */
cov_2a28m9qu1g().s[83]++;
const createWhitelistSqlInjectionPrevention = allowedPatterns => {
  /* istanbul ignore next */
  cov_2a28m9qu1g().f[5]++;
  cov_2a28m9qu1g().s[84]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_2a28m9qu1g().f[6]++;
    cov_2a28m9qu1g().s[85]++;
    try {
      /* istanbul ignore next */
      cov_2a28m9qu1g().s[86]++;
      const checkInput = input => {
        /* istanbul ignore next */
        cov_2a28m9qu1g().f[7]++;
        cov_2a28m9qu1g().s[87]++;
        if (typeof input === 'string') {
          /* istanbul ignore next */
          cov_2a28m9qu1g().b[40][0]++;
          cov_2a28m9qu1g().s[88]++;
          // Check against blacklist patterns
          if (SQL_INJECTION_PATTERNS.some(pattern => {
            /* istanbul ignore next */
            cov_2a28m9qu1g().f[8]++;
            cov_2a28m9qu1g().s[89]++;
            return pattern.test(input);
          })) {
            /* istanbul ignore next */
            cov_2a28m9qu1g().b[41][0]++;
            cov_2a28m9qu1g().s[90]++;
            // Check if it matches any whitelist patterns
            if (!allowedPatterns.some(pattern => {
              /* istanbul ignore next */
              cov_2a28m9qu1g().f[9]++;
              cov_2a28m9qu1g().s[91]++;
              return pattern.test(input);
            })) {
              /* istanbul ignore next */
              cov_2a28m9qu1g().b[42][0]++;
              cov_2a28m9qu1g().s[92]++;
              return {
                hasInjection: true,
                field: 'string_value'
              };
            } else
            /* istanbul ignore next */
            {
              cov_2a28m9qu1g().b[42][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_2a28m9qu1g().b[41][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_2a28m9qu1g().b[40][1]++;
          cov_2a28m9qu1g().s[93]++;
          if (Array.isArray(input)) {
            /* istanbul ignore next */
            cov_2a28m9qu1g().b[43][0]++;
            cov_2a28m9qu1g().s[94]++;
            for (let i =
            /* istanbul ignore next */
            (cov_2a28m9qu1g().s[95]++, 0); i < input.length; i++) {
              const result =
              /* istanbul ignore next */
              (cov_2a28m9qu1g().s[96]++, checkInput(input[i]));
              /* istanbul ignore next */
              cov_2a28m9qu1g().s[97]++;
              if (result.hasInjection) {
                /* istanbul ignore next */
                cov_2a28m9qu1g().b[44][0]++;
                cov_2a28m9qu1g().s[98]++;
                return {
                  hasInjection: true,
                  field: `array[${i}]`
                };
              } else
              /* istanbul ignore next */
              {
                cov_2a28m9qu1g().b[44][1]++;
              }
            }
          } else {
            /* istanbul ignore next */
            cov_2a28m9qu1g().b[43][1]++;
            cov_2a28m9qu1g().s[99]++;
            if (
            /* istanbul ignore next */
            (cov_2a28m9qu1g().b[46][0]++, input !== null) &&
            /* istanbul ignore next */
            (cov_2a28m9qu1g().b[46][1]++, typeof input === 'object')) {
              /* istanbul ignore next */
              cov_2a28m9qu1g().b[45][0]++;
              cov_2a28m9qu1g().s[100]++;
              for (const [key, value] of Object.entries(input)) {
                const result =
                /* istanbul ignore next */
                (cov_2a28m9qu1g().s[101]++, checkInput(value));
                /* istanbul ignore next */
                cov_2a28m9qu1g().s[102]++;
                if (result.hasInjection) {
                  /* istanbul ignore next */
                  cov_2a28m9qu1g().b[47][0]++;
                  cov_2a28m9qu1g().s[103]++;
                  return {
                    hasInjection: true,
                    field: key
                  };
                } else
                /* istanbul ignore next */
                {
                  cov_2a28m9qu1g().b[47][1]++;
                }
              }
            } else
            /* istanbul ignore next */
            {
              cov_2a28m9qu1g().b[45][1]++;
            }
          }
        }
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[104]++;
        return {
          hasInjection: false,
          field: ''
        };
      };
      // Check all request data
      /* istanbul ignore next */
      cov_2a28m9qu1g().s[105]++;
      if (
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[49][0]++, req.body) &&
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[49][1]++, checkInput(req.body).hasInjection)) {
        /* istanbul ignore next */
        cov_2a28m9qu1g().b[48][0]++;
        cov_2a28m9qu1g().s[106]++;
        res.status(400).json({
          success: false,
          message: 'Potential SQL injection detected',
          error: 'SQL_INJECTION_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[50][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[50][1]++, 'unknown'),
          path: req.path
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[107]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2a28m9qu1g().b[48][1]++;
      }
      cov_2a28m9qu1g().s[108]++;
      if (
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[52][0]++, req.query) &&
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[52][1]++, checkInput(req.query).hasInjection)) {
        /* istanbul ignore next */
        cov_2a28m9qu1g().b[51][0]++;
        cov_2a28m9qu1g().s[109]++;
        res.status(400).json({
          success: false,
          message: 'Potential SQL injection detected',
          error: 'SQL_INJECTION_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[53][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[53][1]++, 'unknown'),
          path: req.path
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[110]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2a28m9qu1g().b[51][1]++;
      }
      cov_2a28m9qu1g().s[111]++;
      if (
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[55][0]++, req.params) &&
      /* istanbul ignore next */
      (cov_2a28m9qu1g().b[55][1]++, checkInput(req.params).hasInjection)) {
        /* istanbul ignore next */
        cov_2a28m9qu1g().b[54][0]++;
        cov_2a28m9qu1g().s[112]++;
        res.status(400).json({
          success: false,
          message: 'Potential SQL injection detected',
          error: 'SQL_INJECTION_DETECTED',
          timestamp: new Date().toISOString(),
          requestId:
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[56][0]++, req.requestId) ||
          /* istanbul ignore next */
          (cov_2a28m9qu1g().b[56][1]++, 'unknown'),
          path: req.path
        });
        /* istanbul ignore next */
        cov_2a28m9qu1g().s[113]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2a28m9qu1g().b[54][1]++;
      }
      cov_2a28m9qu1g().s[114]++;
      next();
    } catch (error) {
      /* istanbul ignore next */
      cov_2a28m9qu1g().s[115]++;
      console.error('Whitelist SQL injection prevention error:', error);
      /* istanbul ignore next */
      cov_2a28m9qu1g().s[116]++;
      res.status(500).json({
        success: false,
        message: 'Security check failed - request blocked',
        error: 'SECURITY_CHECK_FAILED',
        timestamp: new Date().toISOString(),
        requestId:
        /* istanbul ignore next */
        (cov_2a28m9qu1g().b[57][0]++, req.requestId) ||
        /* istanbul ignore next */
        (cov_2a28m9qu1g().b[57][1]++, 'unknown'),
        path: req.path
      });
      /* istanbul ignore next */
      cov_2a28m9qu1g().s[117]++;
      return;
    }
  };
};
/* istanbul ignore next */
cov_2a28m9qu1g().s[118]++;
exports.createWhitelistSqlInjectionPrevention = createWhitelistSqlInjectionPrevention;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,