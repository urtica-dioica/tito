835c7531e4821825ca8ee356b974cc93
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.testRedisClient = exports.testDbPool = void 0;
exports.initializeTestConnections = initializeTestConnections;
exports.setupTestDatabase = setupTestDatabase;
exports.setupTestRedis = setupTestRedis;
exports.cleanupTestDatabase = cleanupTestDatabase;
exports.cleanupTestRedis = cleanupTestRedis;
// Mock the Redis service module
jest.mock('../../src/services/redis/redisService', () => ({
    RedisService: jest.fn().mockImplementation(() => mockRedisService_1.mockRedisService),
    redisService: mockRedisService_1.mockRedisService
}));
// Test environment setup
process.env.NODE_ENV = 'test';
process.env.DATABASE_URL = process.env.TEST_DATABASE_URL || 'postgresql://postgres:password@localhost:5432/tito_hr_test';
process.env.REDIS_URL = process.env.TEST_REDIS_URL || 'redis://localhost:6379/1';
process.env.JWT_SECRET = 'test-jwt-secret-key';
process.env.JWT_REFRESH_SECRET = 'test-refresh-secret-key';
process.env.JWT_EXPIRES_IN = '15m';
process.env.JWT_REFRESH_EXPIRES_IN = '7d';
process.env.PORT = '3001';
// Mock Redis service for tests
const mockRedisService_1 = require("./utils/mockRedisService");
// Global test database connection (only for tests that need it)
let testDbPool = null;
exports.testDbPool = testDbPool;
let testRedisClient = null;
exports.testRedisClient = testRedisClient;
// Initialize connections for integration tests
async function initializeTestConnections() {
    if (!testDbPool) {
        exports.testDbPool = testDbPool = await setupTestDatabase();
    }
    if (!testRedisClient) {
        exports.testRedisClient = testRedisClient = await setupTestRedis();
    }
    return { testDbPool, testRedisClient };
}
// Only setup database connections for tests that actually need them
async function setupTestDatabase() {
    if (testDbPool)
        return testDbPool;
    const { Pool } = await Promise.resolve().then(() => __importStar(require('pg')));
    exports.testDbPool = testDbPool = new Pool({
        connectionString: process.env.DATABASE_URL,
        max: 5,
        idleTimeoutMillis: 30000,
        connectionTimeoutMillis: 2000,
    });
    return testDbPool;
}
async function setupTestRedis() {
    if (testRedisClient)
        return testRedisClient;
    // Use mock Redis service for tests
    exports.testRedisClient = testRedisClient = mockRedisService_1.mockRedisService;
    await testRedisClient.connect();
    return testRedisClient;
}
async function cleanupTestDatabase() {
    if (!testDbPool)
        return;
    try {
        const client = await testDbPool.connect();
        try {
            // Disable foreign key checks temporarily
            await client.query('SET session_replication_role = replica;');
            // Clean all tables in reverse dependency order
            const tables = [
                'payroll_approvals',
                'payroll_deductions',
                'payroll_records',
                'payroll_periods',
                'deduction_types',
                'leave_balances',
                'leaves',
                'overtime_requests',
                'time_correction_requests',
                'attendance_sessions',
                'attendance_records',
                'id_cards',
                'system_settings',
                'employees',
                'departments',
                'users'
            ];
            for (const table of tables) {
                await client.query(`DELETE FROM ${table}`);
            }
            // Reset sequences
            await client.query('ALTER SEQUENCE users_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE departments_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE employees_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE attendance_records_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE attendance_sessions_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE time_correction_requests_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE overtime_requests_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE leaves_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE leave_balances_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE payroll_periods_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE payroll_records_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE payroll_deductions_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE deduction_types_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE payroll_approvals_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE system_settings_id_seq RESTART WITH 1');
            await client.query('ALTER SEQUENCE id_cards_id_seq RESTART WITH 1');
            // Re-enable foreign key checks
            await client.query('SET session_replication_role = DEFAULT;');
        }
        finally {
            client.release();
        }
    }
    catch (error) {
        console.warn('Database cleanup failed (this is expected if database is not available):', error.message);
    }
}
async function cleanupTestRedis() {
    if (!testRedisClient)
        return;
    try {
        await testRedisClient.flushDb();
    }
    catch (error) {
        console.warn('Redis cleanup failed:', error.message);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,