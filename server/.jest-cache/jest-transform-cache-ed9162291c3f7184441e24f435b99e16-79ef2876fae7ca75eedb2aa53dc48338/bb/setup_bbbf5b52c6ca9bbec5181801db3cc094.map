{"file":"/home/kim/tito/server/tests/setup.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/setup.ts"],"sourcesContent":["// Test environment setup\nprocess.env.NODE_ENV = 'test';\nprocess.env.DATABASE_URL = process.env.TEST_DATABASE_URL || 'postgresql://postgres:password@localhost:5432/tito_hr_test';\nprocess.env.REDIS_URL = process.env.TEST_REDIS_URL || 'redis://localhost:6379/1';\nprocess.env.JWT_SECRET = 'test-jwt-secret-key';\nprocess.env.JWT_REFRESH_SECRET = 'test-refresh-secret-key';\nprocess.env.JWT_EXPIRES_IN = '15m';\nprocess.env.JWT_REFRESH_EXPIRES_IN = '7d';\nprocess.env.PORT = '3001';\n\n// Mock Redis service for tests\nimport { mockRedisService } from './utils/mockRedisService';\n\n// Mock the Redis service module\njest.mock('../../src/services/redis/redisService', () => ({\n  RedisService: jest.fn().mockImplementation(() => mockRedisService),\n  redisService: mockRedisService\n}));\n\n// Global test database connection (only for tests that need it)\nlet testDbPool: any = null;\nlet testRedisClient: any = null;\n\n// Initialize connections for integration tests\nexport async function initializeTestConnections() {\n  if (!testDbPool) {\n    testDbPool = await setupTestDatabase();\n  }\n  if (!testRedisClient) {\n    testRedisClient = await setupTestRedis();\n  }\n  return { testDbPool, testRedisClient };\n}\n\n// Only setup database connections for tests that actually need them\nexport async function setupTestDatabase() {\n  if (testDbPool) return testDbPool;\n  \n  const { Pool } = await import('pg');\n  testDbPool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    max: 5,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 2000,\n  });\n  \n  return testDbPool;\n}\n\nexport async function setupTestRedis() {\n  if (testRedisClient) return testRedisClient;\n  \n  // Use mock Redis service for tests\n  testRedisClient = mockRedisService;\n  await testRedisClient.connect();\n  return testRedisClient;\n}\n\nexport async function cleanupTestDatabase() {\n  if (!testDbPool) return;\n  \n  try {\n    const client = await testDbPool.connect();\n    try {\n      // Disable foreign key checks temporarily\n      await client.query('SET session_replication_role = replica;');\n      \n      // Clean all tables in reverse dependency order\n      const tables = [\n        'payroll_approvals',\n        'payroll_deductions', \n        'payroll_records',\n        'payroll_periods',\n        'deduction_types',\n        'leave_balances',\n        'leaves',\n        'overtime_requests',\n        'time_correction_requests',\n        'attendance_sessions',\n        'attendance_records',\n        'id_cards',\n        'system_settings',\n        'employees',\n        'departments',\n        'users'\n      ];\n\n      for (const table of tables) {\n        await client.query(`DELETE FROM ${table}`);\n      }\n\n      // Reset sequences\n      await client.query('ALTER SEQUENCE users_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE departments_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE employees_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE attendance_records_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE attendance_sessions_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE time_correction_requests_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE overtime_requests_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE leaves_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE leave_balances_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE payroll_periods_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE payroll_records_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE payroll_deductions_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE deduction_types_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE payroll_approvals_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE system_settings_id_seq RESTART WITH 1');\n      await client.query('ALTER SEQUENCE id_cards_id_seq RESTART WITH 1');\n\n      // Re-enable foreign key checks\n      await client.query('SET session_replication_role = DEFAULT;');\n    } finally {\n      client.release();\n    }\n  } catch (error) {\n    console.warn('Database cleanup failed (this is expected if database is not available):', (error as Error).message);\n  }\n}\n\nexport async function cleanupTestRedis() {\n  if (!testRedisClient) return;\n  \n  try {\n    await testRedisClient.flushDb();\n  } catch (error) {\n    console.warn('Redis cleanup failed:', (error as Error).message);\n  }\n}\n\n// Export test utilities\nexport { testDbPool, testRedisClient };"],"version":3}