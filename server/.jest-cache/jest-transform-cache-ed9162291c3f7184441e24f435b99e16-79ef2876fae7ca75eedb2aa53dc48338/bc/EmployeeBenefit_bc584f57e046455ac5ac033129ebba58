2e6e0887649e2c8ecdf289faddb4ff0a
"use strict";

/* istanbul ignore next */
function cov_1rmywnkc63() {
  var path = "/home/kim/tito/server/src/models/payroll/EmployeeBenefit.ts";
  var hash = "b70eaba94a3256171a513819500634adbb2ebbbb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/models/payroll/EmployeeBenefit.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "6": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 46
        }
      },
      "7": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 14,
          column: 48
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "9": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 22,
          column: 7
        }
      },
      "10": {
        start: {
          line: 23,
          column: 27
        },
        end: {
          line: 30,
          column: 13
        }
      },
      "11": {
        start: {
          line: 31,
          column: 27
        },
        end: {
          line: 31,
          column: 60
        }
      },
      "12": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 41
        }
      },
      "13": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "14": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 26
        }
      },
      "15": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 102
        }
      },
      "16": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 24
        }
      },
      "17": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 29
        }
      },
      "18": {
        start: {
          line: 49,
          column: 23
        },
        end: {
          line: 49,
          column: 48
        }
      },
      "19": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "20": {
        start: {
          line: 51,
          column: 26
        },
        end: {
          line: 51,
          column: 73
        }
      },
      "21": {
        start: {
          line: 52,
          column: 27
        },
        end: {
          line: 52,
          column: 58
        }
      },
      "22": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 42
        }
      },
      "23": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 105
        }
      },
      "24": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 24
        }
      },
      "25": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 29
        }
      },
      "26": {
        start: {
          line: 64,
          column: 23
        },
        end: {
          line: 64,
          column: 48
        }
      },
      "27": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "28": {
        start: {
          line: 66,
          column: 26
        },
        end: {
          line: 80,
          column: 7
        }
      },
      "29": {
        start: {
          line: 81,
          column: 27
        },
        end: {
          line: 81,
          column: 66
        }
      },
      "30": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 103,
          column: 16
        }
      },
      "31": {
        start: {
          line: 82,
          column: 43
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "32": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 109,
          column: 15
        }
      },
      "33": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 24
        }
      },
      "34": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 29
        }
      },
      "35": {
        start: {
          line: 117,
          column: 23
        },
        end: {
          line: 117,
          column: 48
        }
      },
      "36": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "37": {
        start: {
          line: 119,
          column: 26
        },
        end: {
          line: 130,
          column: 7
        }
      },
      "38": {
        start: {
          line: 131,
          column: 27
        },
        end: {
          line: 131,
          column: 66
        }
      },
      "39": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 146,
          column: 16
        }
      },
      "40": {
        start: {
          line: 132,
          column: 43
        },
        end: {
          line: 146,
          column: 13
        }
      },
      "41": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 152,
          column: 15
        }
      },
      "42": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 24
        }
      },
      "43": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 29
        }
      },
      "44": {
        start: {
          line: 160,
          column: 23
        },
        end: {
          line: 160,
          column: 48
        }
      },
      "45": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "46": {
        start: {
          line: 162,
          column: 86
        },
        end: {
          line: 162,
          column: 92
        }
      },
      "47": {
        start: {
          line: 163,
          column: 27
        },
        end: {
          line: 163,
          column: 45
        }
      },
      "48": {
        start: {
          line: 164,
          column: 30
        },
        end: {
          line: 164,
          column: 32
        }
      },
      "49": {
        start: {
          line: 165,
          column: 31
        },
        end: {
          line: 165,
          column: 33
        }
      },
      "50": {
        start: {
          line: 166,
          column: 27
        },
        end: {
          line: 166,
          column: 29
        }
      },
      "51": {
        start: {
          line: 167,
          column: 29
        },
        end: {
          line: 167,
          column: 30
        }
      },
      "52": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 171,
          column: 13
        }
      },
      "53": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 69
        }
      },
      "54": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 41
        }
      },
      "55": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 175,
          column: 13
        }
      },
      "56": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 73
        }
      },
      "57": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 45
        }
      },
      "58": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 179,
          column: 13
        }
      },
      "59": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 67
        }
      },
      "60": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 39
        }
      },
      "61": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 182,
          column: 13
        }
      },
      "62": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 66
        }
      },
      "63": {
        start: {
          line: 184,
          column: 31
        },
        end: {
          line: 187,
          column: 7
        }
      },
      "64": {
        start: {
          line: 188,
          column: 32
        },
        end: {
          line: 188,
          column: 70
        }
      },
      "65": {
        start: {
          line: 189,
          column: 26
        },
        end: {
          line: 189,
          column: 61
        }
      },
      "66": {
        start: {
          line: 191,
          column: 26
        },
        end: {
          line: 206,
          column: 7
        }
      },
      "67": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 39
        }
      },
      "68": {
        start: {
          line: 208,
          column: 27
        },
        end: {
          line: 208,
          column: 60
        }
      },
      "69": {
        start: {
          line: 209,
          column: 28
        },
        end: {
          line: 230,
          column: 15
        }
      },
      "70": {
        start: {
          line: 209,
          column: 52
        },
        end: {
          line: 230,
          column: 13
        }
      },
      "71": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 234,
          column: 14
        }
      },
      "72": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 104
        }
      },
      "73": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 24
        }
      },
      "74": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 29
        }
      },
      "75": {
        start: {
          line: 245,
          column: 23
        },
        end: {
          line: 245,
          column: 48
        }
      },
      "76": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "77": {
        start: {
          line: 247,
          column: 27
        },
        end: {
          line: 247,
          column: 29
        }
      },
      "78": {
        start: {
          line: 248,
          column: 27
        },
        end: {
          line: 248,
          column: 29
        }
      },
      "79": {
        start: {
          line: 249,
          column: 29
        },
        end: {
          line: 249,
          column: 30
        }
      },
      "80": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 253,
          column: 13
        }
      },
      "81": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 66
        }
      },
      "82": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 50
        }
      },
      "83": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 257,
          column: 13
        }
      },
      "84": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 57
        }
      },
      "85": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 256,
          column: 41
        }
      },
      "86": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 261,
          column: 13
        }
      },
      "87": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 259,
          column: 61
        }
      },
      "88": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 260,
          column: 45
        }
      },
      "89": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 265,
          column: 13
        }
      },
      "90": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 59
        }
      },
      "91": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 43
        }
      },
      "92": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "93": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 60
        }
      },
      "94": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 44
        }
      },
      "95": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 272,
          column: 13
        }
      },
      "96": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 47
        }
      },
      "97": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 58
        }
      },
      "98": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 28
        }
      },
      "99": {
        start: {
          line: 275,
          column: 26
        },
        end: {
          line: 280,
          column: 7
        }
      },
      "100": {
        start: {
          line: 281,
          column: 27
        },
        end: {
          line: 281,
          column: 60
        }
      },
      "101": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "102": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 28
        }
      },
      "103": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 95
        }
      },
      "104": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 34
        }
      },
      "105": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 106
        }
      },
      "106": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 24
        }
      },
      "107": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 29
        }
      },
      "108": {
        start: {
          line: 297,
          column: 23
        },
        end: {
          line: 297,
          column: 48
        }
      },
      "109": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "110": {
        start: {
          line: 299,
          column: 26
        },
        end: {
          line: 299,
          column: 71
        }
      },
      "111": {
        start: {
          line: 300,
          column: 27
        },
        end: {
          line: 300,
          column: 58
        }
      },
      "112": {
        start: {
          line: 301,
          column: 28
        },
        end: {
          line: 301,
          column: 54
        }
      },
      "113": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "114": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 84
        }
      },
      "115": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 27
        }
      },
      "116": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 100
        }
      },
      "117": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 24
        }
      },
      "118": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 29
        }
      },
      "119": {
        start: {
          line: 316,
          column: 23
        },
        end: {
          line: 316,
          column: 48
        }
      },
      "120": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 338,
          column: 9
        }
      },
      "121": {
        start: {
          line: 318,
          column: 26
        },
        end: {
          line: 323,
          column: 7
        }
      },
      "122": {
        start: {
          line: 324,
          column: 27
        },
        end: {
          line: 324,
          column: 92
        }
      },
      "123": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 42
        }
      },
      "124": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 333,
          column: 15
        }
      },
      "125": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 24
        }
      },
      "126": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 29
        }
      },
      "127": {
        start: {
          line: 341,
          column: 23
        },
        end: {
          line: 341,
          column: 48
        }
      },
      "128": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 375,
          column: 9
        }
      },
      "129": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 40
        }
      },
      "130": {
        start: {
          line: 344,
          column: 28
        },
        end: {
          line: 344,
          column: 30
        }
      },
      "131": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 363,
          column: 13
        }
      },
      "132": {
        start: {
          line: 346,
          column: 30
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "133": {
        start: {
          line: 353,
          column: 31
        },
        end: {
          line: 360,
          column: 17
        }
      },
      "134": {
        start: {
          line: 361,
          column: 31
        },
        end: {
          line: 361,
          column: 64
        }
      },
      "135": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 45
        }
      },
      "136": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 364,
          column: 41
        }
      },
      "137": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 95
        }
      },
      "138": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 27
        }
      },
      "139": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 43
        }
      },
      "140": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 102
        }
      },
      "141": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 24
        }
      },
      "142": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 29
        }
      },
      "143": {
        start: {
          line: 378,
          column: 0
        },
        end: {
          line: 378,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 23
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 13
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 23
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 48
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 37
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 63
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 82,
            column: 35
          },
          end: {
            line: 82,
            column: 36
          }
        },
        loc: {
          start: {
            line: 82,
            column: 43
          },
          end: {
            line: 103,
            column: 13
          }
        },
        line: 82
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 43
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 116
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 132,
            column: 35
          },
          end: {
            line: 132,
            column: 36
          }
        },
        loc: {
          start: {
            line: 132,
            column: 43
          },
          end: {
            line: 146,
            column: 13
          }
        },
        line: 132
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 31
          },
          end: {
            line: 243,
            column: 5
          }
        },
        line: 159
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 209,
            column: 44
          },
          end: {
            line: 209,
            column: 45
          }
        },
        loc: {
          start: {
            line: 209,
            column: 52
          },
          end: {
            line: 230,
            column: 13
          }
        },
        line: 209
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 27
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 244
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 21
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 296
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 315,
            column: 4
          },
          end: {
            line: 315,
            column: 5
          }
        },
        loc: {
          start: {
            line: 315,
            column: 84
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 315
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        loc: {
          start: {
            line: 340,
            column: 27
          },
          end: {
            line: 376,
            column: 5
          }
        },
        line: 340
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 28,
            column: 16
          },
          end: {
            line: 28,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 16
          },
          end: {
            line: 28,
            column: 29
          }
        }, {
          start: {
            line: 28,
            column: 33
          },
          end: {
            line: 28,
            column: 37
          }
        }],
        line: 28
      },
      "4": {
        loc: {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 29,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 29,
            column: 30
          }
        }, {
          start: {
            line: 29,
            column: 34
          },
          end: {
            line: 29,
            column: 38
          }
        }],
        line: 29
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 19
          },
          end: {
            line: 53,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 19
          },
          end: {
            line: 53,
            column: 33
          }
        }, {
          start: {
            line: 53,
            column: 37
          },
          end: {
            line: 53,
            column: 41
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 86,
            column: 24
          },
          end: {
            line: 86,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 24
          },
          end: {
            line: 86,
            column: 46
          }
        }, {
          start: {
            line: 86,
            column: 50
          },
          end: {
            line: 86,
            column: 51
          }
        }],
        line: 86
      },
      "7": {
        loc: {
          start: {
            line: 136,
            column: 24
          },
          end: {
            line: 136,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 24
          },
          end: {
            line: 136,
            column: 46
          }
        }, {
          start: {
            line: 136,
            column: 50
          },
          end: {
            line: 136,
            column: 51
          }
        }],
        line: 136
      },
      "8": {
        loc: {
          start: {
            line: 159,
            column: 18
          },
          end: {
            line: 159,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 159,
            column: 27
          },
          end: {
            line: 159,
            column: 29
          }
        }],
        line: 159
      },
      "9": {
        loc: {
          start: {
            line: 162,
            column: 20
          },
          end: {
            line: 162,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 162,
            column: 27
          },
          end: {
            line: 162,
            column: 28
          }
        }],
        line: 162
      },
      "10": {
        loc: {
          start: {
            line: 162,
            column: 30
          },
          end: {
            line: 162,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 162,
            column: 38
          },
          end: {
            line: 162,
            column: 40
          }
        }],
        line: 162
      },
      "11": {
        loc: {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "12": {
        loc: {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "13": {
        loc: {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "14": {
        loc: {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "15": {
        loc: {
          start: {
            line: 213,
            column: 24
          },
          end: {
            line: 213,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 213,
            column: 24
          },
          end: {
            line: 213,
            column: 46
          }
        }, {
          start: {
            line: 213,
            column: 50
          },
          end: {
            line: 213,
            column: 51
          }
        }],
        line: 213
      },
      "16": {
        loc: {
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "17": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "18": {
        loc: {
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "19": {
        loc: {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 265,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 265,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "20": {
        loc: {
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "21": {
        loc: {
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "22": {
        loc: {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "23": {
        loc: {
          start: {
            line: 301,
            column: 29
          },
          end: {
            line: 301,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 29
          },
          end: {
            line: 301,
            column: 44
          }
        }, {
          start: {
            line: 301,
            column: 48
          },
          end: {
            line: 301,
            column: 49
          }
        }],
        line: 301
      },
      "24": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "25": {
        loc: {
          start: {
            line: 325,
            column: 19
          },
          end: {
            line: 325,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 325,
            column: 19
          },
          end: {
            line: 325,
            column: 33
          }
        }, {
          start: {
            line: 325,
            column: 37
          },
          end: {
            line: 325,
            column: 41
          }
        }],
        line: 325
      },
      "26": {
        loc: {
          start: {
            line: 358,
            column: 20
          },
          end: {
            line: 358,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 358,
            column: 20
          },
          end: {
            line: 358,
            column: 33
          }
        }, {
          start: {
            line: 358,
            column: 37
          },
          end: {
            line: 358,
            column: 41
          }
        }],
        line: 358
      },
      "27": {
        loc: {
          start: {
            line: 359,
            column: 20
          },
          end: {
            line: 359,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 359,
            column: 20
          },
          end: {
            line: 359,
            column: 34
          }
        }, {
          start: {
            line: 359,
            column: 38
          },
          end: {
            line: 359,
            column: 42
          }
        }],
        line: 359
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/models/payroll/EmployeeBenefit.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/models/payroll/EmployeeBenefit.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface EmployeeBenefit {\n  id: string;\n  employee_id: string;\n  benefit_type_id: string;\n  amount: number;\n  start_date: Date;\n  end_date?: Date;\n  is_active: boolean;\n  created_at: Date;\n  updated_at: Date;\n  benefit_type?: { // Added for joined queries\n    name: string;\n    description?: string;\n  };\n}\n\nexport interface EmployeeBenefitWithDetails extends EmployeeBenefit {\n  benefit_type: {\n    name: string;\n    description?: string;\n  };\n  employee: {\n    employee_id: string;\n    user: {\n      first_name: string;\n      last_name: string;\n    };\n  };\n}\n\nexport interface CreateEmployeeBenefitData {\n  employee_id: string;\n  benefit_type_id: string;\n  amount: number;\n  start_date: Date;\n  end_date?: Date;\n  is_active?: boolean;\n}\n\nexport interface UpdateEmployeeBenefitData {\n  benefit_type_id?: string;\n  amount?: number;\n  start_date?: Date;\n  end_date?: Date;\n  is_active?: boolean;\n}\n\nexport interface EmployeeBenefitListParams {\n  employee_id?: string;\n  benefit_type_id?: string;\n  is_active?: boolean;\n  page?: number;\n  limit?: number;\n}\n\nclass EmployeeBenefitModel {\n  private pool = getPool();\n\n  async create(data: CreateEmployeeBenefitData): Promise<EmployeeBenefit> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        INSERT INTO employee_benefits (\n          employee_id, benefit_type_id, amount, start_date, end_date, is_active\n        )\n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *\n      `;\n      const values = [\n        data.employee_id,\n        data.benefit_type_id,\n        data.amount,\n        data.start_date,\n        data.end_date || null,\n        data.is_active ?? true\n      ];\n      \n      const result = await client.query(query, values);\n      const record = result.rows[0];\n      \n      logger.info('Employee benefit created', { \n        recordId: record.id, \n        employeeId: record.employee_id,\n        benefitTypeId: record.benefit_type_id\n      });\n      return record;\n    } catch (error) {\n      logger.error('Error creating employee benefit', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findById(id: string): Promise<EmployeeBenefit | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT * FROM employee_benefits WHERE id = $1';\n      const result = await client.query(query, [id]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding employee benefit by ID', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findByEmployee(employeeId: string): Promise<EmployeeBenefitWithDetails[]> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT \n          eb.*,\n          bt.name as benefit_type_name,\n          bt.description as benefit_type_description,\n          e.employee_id,\n          u.first_name,\n          u.last_name\n        FROM employee_benefits eb\n        JOIN benefit_types bt ON eb.benefit_type_id = bt.id\n        JOIN employees e ON eb.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        WHERE eb.employee_id = $1\n        ORDER BY eb.created_at DESC\n      `;\n      const result = await client.query(query, [employeeId]);\n      \n      return result.rows.map(row => ({\n        id: row.id,\n        employee_id: row.employee_id,\n        benefit_type_id: row.benefit_type_id,\n        amount: parseFloat(row.amount) || 0,\n        start_date: row.start_date,\n        end_date: row.end_date,\n        is_active: row.is_active,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        benefit_type: {\n          name: row.benefit_type_name,\n          description: row.benefit_type_description\n        },\n        employee: {\n          employee_id: row.employee_id,\n          user: {\n            first_name: row.first_name,\n            last_name: row.last_name\n          }\n        }\n      }));\n    } catch (error) {\n      logger.error('Error finding employee benefits by employee', { \n        error: (error as Error).message, \n        employeeId \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findActiveByEmployee(employeeId: string): Promise<EmployeeBenefit[]> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT \n          eb.*,\n          bt.name as benefit_type_name,\n          bt.description as benefit_type_description\n        FROM employee_benefits eb\n        JOIN benefit_types bt ON eb.benefit_type_id = bt.id\n        WHERE eb.employee_id = $1 \n        AND eb.is_active = true\n        AND (eb.end_date IS NULL OR eb.end_date >= CURRENT_DATE)\n        ORDER BY eb.created_at DESC\n      `;\n      const result = await client.query(query, [employeeId]);\n      \n      return result.rows.map(row => ({\n        id: row.id,\n        employee_id: row.employee_id,\n        benefit_type_id: row.benefit_type_id,\n        amount: parseFloat(row.amount) || 0,\n        start_date: row.start_date,\n        end_date: row.end_date,\n        is_active: row.is_active,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        benefit_type: {\n          name: row.benefit_type_name,\n          description: row.benefit_type_description\n        }\n      }));\n    } catch (error) {\n      logger.error('Error finding active employee benefits', { \n        error: (error as Error).message, \n        employeeId \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findAll(params: EmployeeBenefitListParams = {}): Promise<{ records: EmployeeBenefitWithDetails[]; total: number }> {\n    const client = await this.pool.connect();\n    try {\n      const { page = 1, limit = 10, employee_id, benefit_type_id, is_active } = params;\n      const offset = (page - 1) * limit;\n      \n      let whereClause = '';\n      const conditions: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (employee_id) {\n        conditions.push(`eb.employee_id = $${paramIndex++}`);\n        values.push(employee_id);\n      }\n\n      if (benefit_type_id) {\n        conditions.push(`eb.benefit_type_id = $${paramIndex++}`);\n        values.push(benefit_type_id);\n      }\n\n      if (is_active !== undefined) {\n        conditions.push(`eb.is_active = $${paramIndex++}`);\n        values.push(is_active);\n      }\n\n      if (conditions.length > 0) {\n        whereClause = `WHERE ${conditions.join(' AND ')}`;\n      }\n\n      // Get total count\n      const countQuery = `\n        SELECT COUNT(*) FROM employee_benefits eb\n        ${whereClause}\n      `;\n      const countResult = await client.query(countQuery, values);\n      const total = parseInt(countResult.rows[0].count);\n\n      // Get records\n      const query = `\n        SELECT \n          eb.*,\n          bt.name as benefit_type_name,\n          bt.description as benefit_type_description,\n          e.employee_id,\n          u.first_name,\n          u.last_name\n        FROM employee_benefits eb\n        JOIN benefit_types bt ON eb.benefit_type_id = bt.id\n        JOIN employees e ON eb.employee_id = e.id\n        JOIN users u ON e.user_id = u.id\n        ${whereClause}\n        ORDER BY eb.created_at DESC\n        LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n      `;\n      values.push(limit, offset);\n      \n      const result = await client.query(query, values);\n      \n      const records: EmployeeBenefitWithDetails[] = result.rows.map(row => ({\n        id: row.id,\n        employee_id: row.employee_id,\n        benefit_type_id: row.benefit_type_id,\n        amount: parseFloat(row.amount) || 0,\n        start_date: row.start_date,\n        end_date: row.end_date,\n        is_active: row.is_active,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        benefit_type: {\n          name: row.benefit_type_name,\n          description: row.benefit_type_description\n        },\n        employee: {\n          employee_id: row.employee_id,\n          user: {\n            first_name: row.first_name,\n            last_name: row.last_name\n          }\n        }\n      }));\n      \n      return {\n        records,\n        total\n      };\n    } catch (error) {\n      logger.error('Error finding employee benefits', { error: (error as Error).message, params });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async update(id: string, data: UpdateEmployeeBenefitData): Promise<EmployeeBenefit | null> {\n    const client = await this.pool.connect();\n    try {\n      const fields: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (data.benefit_type_id !== undefined) {\n        fields.push(`benefit_type_id = $${paramIndex++}`);\n        values.push(data.benefit_type_id);\n      }\n\n      if (data.amount !== undefined) {\n        fields.push(`amount = $${paramIndex++}`);\n        values.push(data.amount);\n      }\n\n      if (data.start_date !== undefined) {\n        fields.push(`start_date = $${paramIndex++}`);\n        values.push(data.start_date);\n      }\n\n      if (data.end_date !== undefined) {\n        fields.push(`end_date = $${paramIndex++}`);\n        values.push(data.end_date);\n      }\n\n      if (data.is_active !== undefined) {\n        fields.push(`is_active = $${paramIndex++}`);\n        values.push(data.is_active);\n      }\n\n      if (fields.length === 0) {\n        return await this.findById(id);\n      }\n\n      fields.push(`updated_at = CURRENT_TIMESTAMP`);\n      values.push(id);\n\n      const query = `\n        UPDATE employee_benefits \n        SET ${fields.join(', ')}\n        WHERE id = $${paramIndex}\n        RETURNING *\n      `;\n\n      const result = await client.query(query, values);\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      logger.info('Employee benefit updated', { recordId: id, updates: data });\n      return result.rows[0];\n    } catch (error) {\n      logger.error('Error updating employee benefit', { error: (error as Error).message, id, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async delete(id: string): Promise<boolean> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'DELETE FROM employee_benefits WHERE id = $1';\n      const result = await client.query(query, [id]);\n      \n      const deleted = (result.rowCount || 0) > 0;\n      if (deleted) {\n        logger.info('Employee benefit deleted', { recordId: id });\n      }\n      \n      return deleted;\n    } catch (error) {\n      logger.error('Error deleting employee benefit', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findByEmployeeAndBenefitTypeAndDate(employeeId: string, benefitTypeId: string, startDate: Date): Promise<EmployeeBenefit | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT * FROM employee_benefits \n        WHERE employee_id = $1 \n        AND benefit_type_id = $2 \n        AND start_date = $3\n      `;\n      const result = await client.query(query, [employeeId, benefitTypeId, startDate]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding employee benefit by employee, benefit type, and date', { \n        error: (error as Error).message, \n        employeeId, \n        benefitTypeId, \n        startDate \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async bulkCreate(data: CreateEmployeeBenefitData[]): Promise<EmployeeBenefit[]> {\n    const client = await this.pool.connect();\n    try {\n      await client.query('BEGIN');\n      \n      const records: EmployeeBenefit[] = [];\n      \n      for (const item of data) {\n        const query = `\n          INSERT INTO employee_benefits (\n            employee_id, benefit_type_id, amount, start_date, end_date, is_active\n          )\n          VALUES ($1, $2, $3, $4, $5, $6)\n          RETURNING *\n        `;\n        const values = [\n          item.employee_id,\n          item.benefit_type_id,\n          item.amount,\n          item.start_date,\n          item.end_date || null,\n          item.is_active ?? true\n        ];\n        \n        const result = await client.query(query, values);\n        records.push(result.rows[0]);\n      }\n      \n      await client.query('COMMIT');\n      \n      logger.info('Employee benefits bulk created', { count: records.length });\n      return records;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Error bulk creating employee benefits', { error: (error as Error).message });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n}\n\nexport const employeeBenefitModel = new EmployeeBenefitModel();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b70eaba94a3256171a513819500634adbb2ebbbb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1rmywnkc63 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1rmywnkc63();
var __importDefault =
/* istanbul ignore next */
(cov_1rmywnkc63().s[0]++,
/* istanbul ignore next */
(cov_1rmywnkc63().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1rmywnkc63().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1rmywnkc63().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1rmywnkc63().f[0]++;
  cov_1rmywnkc63().s[1]++;
  return /* istanbul ignore next */(cov_1rmywnkc63().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1rmywnkc63().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1rmywnkc63().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1rmywnkc63().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1rmywnkc63().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1rmywnkc63().s[3]++;
exports.employeeBenefitModel = void 0;
const database_1 =
/* istanbul ignore next */
(cov_1rmywnkc63().s[4]++, require("../../config/database"));
const logger_1 =
/* istanbul ignore next */
(cov_1rmywnkc63().s[5]++, __importDefault(require("../../utils/logger")));
class EmployeeBenefitModel {
  constructor() {
    /* istanbul ignore next */
    cov_1rmywnkc63().f[1]++;
    cov_1rmywnkc63().s[6]++;
    this.pool = (0, database_1.getPool)();
  }
  async create(data) {
    /* istanbul ignore next */
    cov_1rmywnkc63().f[2]++;
    const client =
    /* istanbul ignore next */
    (cov_1rmywnkc63().s[7]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_1rmywnkc63().s[8]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[9]++, `
        INSERT INTO employee_benefits (
          employee_id, benefit_type_id, amount, start_date, end_date, is_active
        )
        VALUES ($1, $2, $3, $4, $5, $6)
        RETURNING *
      `);
      const values =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[10]++, [data.employee_id, data.benefit_type_id, data.amount, data.start_date,
      /* istanbul ignore next */
      (cov_1rmywnkc63().b[3][0]++, data.end_date) ||
      /* istanbul ignore next */
      (cov_1rmywnkc63().b[3][1]++, null),
      /* istanbul ignore next */
      (cov_1rmywnkc63().b[4][0]++, data.is_active) ??
      /* istanbul ignore next */
      (cov_1rmywnkc63().b[4][1]++, true)]);
      const result =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[11]++, await client.query(query, values));
      const record =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[12]++, result.rows[0]);
      /* istanbul ignore next */
      cov_1rmywnkc63().s[13]++;
      logger_1.default.info('Employee benefit created', {
        recordId: record.id,
        employeeId: record.employee_id,
        benefitTypeId: record.benefit_type_id
      });
      /* istanbul ignore next */
      cov_1rmywnkc63().s[14]++;
      return record;
    } catch (error) {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[15]++;
      logger_1.default.error('Error creating employee benefit', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_1rmywnkc63().s[16]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[17]++;
      client.release();
    }
  }
  async findById(id) {
    /* istanbul ignore next */
    cov_1rmywnkc63().f[3]++;
    const client =
    /* istanbul ignore next */
    (cov_1rmywnkc63().s[18]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_1rmywnkc63().s[19]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[20]++, 'SELECT * FROM employee_benefits WHERE id = $1');
      const result =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[21]++, await client.query(query, [id]));
      /* istanbul ignore next */
      cov_1rmywnkc63().s[22]++;
      return /* istanbul ignore next */(cov_1rmywnkc63().b[5][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_1rmywnkc63().b[5][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[23]++;
      logger_1.default.error('Error finding employee benefit by ID', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_1rmywnkc63().s[24]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[25]++;
      client.release();
    }
  }
  async findByEmployee(employeeId) {
    /* istanbul ignore next */
    cov_1rmywnkc63().f[4]++;
    const client =
    /* istanbul ignore next */
    (cov_1rmywnkc63().s[26]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_1rmywnkc63().s[27]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[28]++, `
        SELECT 
          eb.*,
          bt.name as benefit_type_name,
          bt.description as benefit_type_description,
          e.employee_id,
          u.first_name,
          u.last_name
        FROM employee_benefits eb
        JOIN benefit_types bt ON eb.benefit_type_id = bt.id
        JOIN employees e ON eb.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        WHERE eb.employee_id = $1
        ORDER BY eb.created_at DESC
      `);
      const result =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[29]++, await client.query(query, [employeeId]));
      /* istanbul ignore next */
      cov_1rmywnkc63().s[30]++;
      return result.rows.map(row => {
        /* istanbul ignore next */
        cov_1rmywnkc63().f[5]++;
        cov_1rmywnkc63().s[31]++;
        return {
          id: row.id,
          employee_id: row.employee_id,
          benefit_type_id: row.benefit_type_id,
          amount:
          /* istanbul ignore next */
          (cov_1rmywnkc63().b[6][0]++, parseFloat(row.amount)) ||
          /* istanbul ignore next */
          (cov_1rmywnkc63().b[6][1]++, 0),
          start_date: row.start_date,
          end_date: row.end_date,
          is_active: row.is_active,
          created_at: row.created_at,
          updated_at: row.updated_at,
          benefit_type: {
            name: row.benefit_type_name,
            description: row.benefit_type_description
          },
          employee: {
            employee_id: row.employee_id,
            user: {
              first_name: row.first_name,
              last_name: row.last_name
            }
          }
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[32]++;
      logger_1.default.error('Error finding employee benefits by employee', {
        error: error.message,
        employeeId
      });
      /* istanbul ignore next */
      cov_1rmywnkc63().s[33]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[34]++;
      client.release();
    }
  }
  async findActiveByEmployee(employeeId) {
    /* istanbul ignore next */
    cov_1rmywnkc63().f[6]++;
    const client =
    /* istanbul ignore next */
    (cov_1rmywnkc63().s[35]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_1rmywnkc63().s[36]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[37]++, `
        SELECT 
          eb.*,
          bt.name as benefit_type_name,
          bt.description as benefit_type_description
        FROM employee_benefits eb
        JOIN benefit_types bt ON eb.benefit_type_id = bt.id
        WHERE eb.employee_id = $1 
        AND eb.is_active = true
        AND (eb.end_date IS NULL OR eb.end_date >= CURRENT_DATE)
        ORDER BY eb.created_at DESC
      `);
      const result =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[38]++, await client.query(query, [employeeId]));
      /* istanbul ignore next */
      cov_1rmywnkc63().s[39]++;
      return result.rows.map(row => {
        /* istanbul ignore next */
        cov_1rmywnkc63().f[7]++;
        cov_1rmywnkc63().s[40]++;
        return {
          id: row.id,
          employee_id: row.employee_id,
          benefit_type_id: row.benefit_type_id,
          amount:
          /* istanbul ignore next */
          (cov_1rmywnkc63().b[7][0]++, parseFloat(row.amount)) ||
          /* istanbul ignore next */
          (cov_1rmywnkc63().b[7][1]++, 0),
          start_date: row.start_date,
          end_date: row.end_date,
          is_active: row.is_active,
          created_at: row.created_at,
          updated_at: row.updated_at,
          benefit_type: {
            name: row.benefit_type_name,
            description: row.benefit_type_description
          }
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[41]++;
      logger_1.default.error('Error finding active employee benefits', {
        error: error.message,
        employeeId
      });
      /* istanbul ignore next */
      cov_1rmywnkc63().s[42]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[43]++;
      client.release();
    }
  }
  async findAll(params =
  /* istanbul ignore next */
  (cov_1rmywnkc63().b[8][0]++, {})) {
    /* istanbul ignore next */
    cov_1rmywnkc63().f[8]++;
    const client =
    /* istanbul ignore next */
    (cov_1rmywnkc63().s[44]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_1rmywnkc63().s[45]++;
    try {
      const {
        page =
        /* istanbul ignore next */
        (cov_1rmywnkc63().b[9][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_1rmywnkc63().b[10][0]++, 10),
        employee_id,
        benefit_type_id,
        is_active
      } =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[46]++, params);
      const offset =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[47]++, (page - 1) * limit);
      let whereClause =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[48]++, '');
      const conditions =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[49]++, []);
      const values =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[50]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[51]++, 1);
      /* istanbul ignore next */
      cov_1rmywnkc63().s[52]++;
      if (employee_id) {
        /* istanbul ignore next */
        cov_1rmywnkc63().b[11][0]++;
        cov_1rmywnkc63().s[53]++;
        conditions.push(`eb.employee_id = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_1rmywnkc63().s[54]++;
        values.push(employee_id);
      } else
      /* istanbul ignore next */
      {
        cov_1rmywnkc63().b[11][1]++;
      }
      cov_1rmywnkc63().s[55]++;
      if (benefit_type_id) {
        /* istanbul ignore next */
        cov_1rmywnkc63().b[12][0]++;
        cov_1rmywnkc63().s[56]++;
        conditions.push(`eb.benefit_type_id = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_1rmywnkc63().s[57]++;
        values.push(benefit_type_id);
      } else
      /* istanbul ignore next */
      {
        cov_1rmywnkc63().b[12][1]++;
      }
      cov_1rmywnkc63().s[58]++;
      if (is_active !== undefined) {
        /* istanbul ignore next */
        cov_1rmywnkc63().b[13][0]++;
        cov_1rmywnkc63().s[59]++;
        conditions.push(`eb.is_active = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_1rmywnkc63().s[60]++;
        values.push(is_active);
      } else
      /* istanbul ignore next */
      {
        cov_1rmywnkc63().b[13][1]++;
      }
      cov_1rmywnkc63().s[61]++;
      if (conditions.length > 0) {
        /* istanbul ignore next */
        cov_1rmywnkc63().b[14][0]++;
        cov_1rmywnkc63().s[62]++;
        whereClause = `WHERE ${conditions.join(' AND ')}`;
      } else
      /* istanbul ignore next */
      {
        cov_1rmywnkc63().b[14][1]++;
      }
      // Get total count
      const countQuery =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[63]++, `
        SELECT COUNT(*) FROM employee_benefits eb
        ${whereClause}
      `);
      const countResult =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[64]++, await client.query(countQuery, values));
      const total =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[65]++, parseInt(countResult.rows[0].count));
      // Get records
      const query =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[66]++, `
        SELECT 
          eb.*,
          bt.name as benefit_type_name,
          bt.description as benefit_type_description,
          e.employee_id,
          u.first_name,
          u.last_name
        FROM employee_benefits eb
        JOIN benefit_types bt ON eb.benefit_type_id = bt.id
        JOIN employees e ON eb.employee_id = e.id
        JOIN users u ON e.user_id = u.id
        ${whereClause}
        ORDER BY eb.created_at DESC
        LIMIT $${paramIndex++} OFFSET $${paramIndex++}
      `);
      /* istanbul ignore next */
      cov_1rmywnkc63().s[67]++;
      values.push(limit, offset);
      const result =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[68]++, await client.query(query, values));
      const records =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[69]++, result.rows.map(row => {
        /* istanbul ignore next */
        cov_1rmywnkc63().f[9]++;
        cov_1rmywnkc63().s[70]++;
        return {
          id: row.id,
          employee_id: row.employee_id,
          benefit_type_id: row.benefit_type_id,
          amount:
          /* istanbul ignore next */
          (cov_1rmywnkc63().b[15][0]++, parseFloat(row.amount)) ||
          /* istanbul ignore next */
          (cov_1rmywnkc63().b[15][1]++, 0),
          start_date: row.start_date,
          end_date: row.end_date,
          is_active: row.is_active,
          created_at: row.created_at,
          updated_at: row.updated_at,
          benefit_type: {
            name: row.benefit_type_name,
            description: row.benefit_type_description
          },
          employee: {
            employee_id: row.employee_id,
            user: {
              first_name: row.first_name,
              last_name: row.last_name
            }
          }
        };
      }));
      /* istanbul ignore next */
      cov_1rmywnkc63().s[71]++;
      return {
        records,
        total
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[72]++;
      logger_1.default.error('Error finding employee benefits', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_1rmywnkc63().s[73]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[74]++;
      client.release();
    }
  }
  async update(id, data) {
    /* istanbul ignore next */
    cov_1rmywnkc63().f[10]++;
    const client =
    /* istanbul ignore next */
    (cov_1rmywnkc63().s[75]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_1rmywnkc63().s[76]++;
    try {
      const fields =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[77]++, []);
      const values =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[78]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[79]++, 1);
      /* istanbul ignore next */
      cov_1rmywnkc63().s[80]++;
      if (data.benefit_type_id !== undefined) {
        /* istanbul ignore next */
        cov_1rmywnkc63().b[16][0]++;
        cov_1rmywnkc63().s[81]++;
        fields.push(`benefit_type_id = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_1rmywnkc63().s[82]++;
        values.push(data.benefit_type_id);
      } else
      /* istanbul ignore next */
      {
        cov_1rmywnkc63().b[16][1]++;
      }
      cov_1rmywnkc63().s[83]++;
      if (data.amount !== undefined) {
        /* istanbul ignore next */
        cov_1rmywnkc63().b[17][0]++;
        cov_1rmywnkc63().s[84]++;
        fields.push(`amount = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_1rmywnkc63().s[85]++;
        values.push(data.amount);
      } else
      /* istanbul ignore next */
      {
        cov_1rmywnkc63().b[17][1]++;
      }
      cov_1rmywnkc63().s[86]++;
      if (data.start_date !== undefined) {
        /* istanbul ignore next */
        cov_1rmywnkc63().b[18][0]++;
        cov_1rmywnkc63().s[87]++;
        fields.push(`start_date = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_1rmywnkc63().s[88]++;
        values.push(data.start_date);
      } else
      /* istanbul ignore next */
      {
        cov_1rmywnkc63().b[18][1]++;
      }
      cov_1rmywnkc63().s[89]++;
      if (data.end_date !== undefined) {
        /* istanbul ignore next */
        cov_1rmywnkc63().b[19][0]++;
        cov_1rmywnkc63().s[90]++;
        fields.push(`end_date = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_1rmywnkc63().s[91]++;
        values.push(data.end_date);
      } else
      /* istanbul ignore next */
      {
        cov_1rmywnkc63().b[19][1]++;
      }
      cov_1rmywnkc63().s[92]++;
      if (data.is_active !== undefined) {
        /* istanbul ignore next */
        cov_1rmywnkc63().b[20][0]++;
        cov_1rmywnkc63().s[93]++;
        fields.push(`is_active = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_1rmywnkc63().s[94]++;
        values.push(data.is_active);
      } else
      /* istanbul ignore next */
      {
        cov_1rmywnkc63().b[20][1]++;
      }
      cov_1rmywnkc63().s[95]++;
      if (fields.length === 0) {
        /* istanbul ignore next */
        cov_1rmywnkc63().b[21][0]++;
        cov_1rmywnkc63().s[96]++;
        return await this.findById(id);
      } else
      /* istanbul ignore next */
      {
        cov_1rmywnkc63().b[21][1]++;
      }
      cov_1rmywnkc63().s[97]++;
      fields.push(`updated_at = CURRENT_TIMESTAMP`);
      /* istanbul ignore next */
      cov_1rmywnkc63().s[98]++;
      values.push(id);
      const query =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[99]++, `
        UPDATE employee_benefits 
        SET ${fields.join(', ')}
        WHERE id = $${paramIndex}
        RETURNING *
      `);
      const result =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[100]++, await client.query(query, values));
      /* istanbul ignore next */
      cov_1rmywnkc63().s[101]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_1rmywnkc63().b[22][0]++;
        cov_1rmywnkc63().s[102]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1rmywnkc63().b[22][1]++;
      }
      cov_1rmywnkc63().s[103]++;
      logger_1.default.info('Employee benefit updated', {
        recordId: id,
        updates: data
      });
      /* istanbul ignore next */
      cov_1rmywnkc63().s[104]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[105]++;
      logger_1.default.error('Error updating employee benefit', {
        error: error.message,
        id,
        data
      });
      /* istanbul ignore next */
      cov_1rmywnkc63().s[106]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[107]++;
      client.release();
    }
  }
  async delete(id) {
    /* istanbul ignore next */
    cov_1rmywnkc63().f[11]++;
    const client =
    /* istanbul ignore next */
    (cov_1rmywnkc63().s[108]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_1rmywnkc63().s[109]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[110]++, 'DELETE FROM employee_benefits WHERE id = $1');
      const result =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[111]++, await client.query(query, [id]));
      const deleted =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[112]++, (
      /* istanbul ignore next */
      (cov_1rmywnkc63().b[23][0]++, result.rowCount) ||
      /* istanbul ignore next */
      (cov_1rmywnkc63().b[23][1]++, 0)) > 0);
      /* istanbul ignore next */
      cov_1rmywnkc63().s[113]++;
      if (deleted) {
        /* istanbul ignore next */
        cov_1rmywnkc63().b[24][0]++;
        cov_1rmywnkc63().s[114]++;
        logger_1.default.info('Employee benefit deleted', {
          recordId: id
        });
      } else
      /* istanbul ignore next */
      {
        cov_1rmywnkc63().b[24][1]++;
      }
      cov_1rmywnkc63().s[115]++;
      return deleted;
    } catch (error) {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[116]++;
      logger_1.default.error('Error deleting employee benefit', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_1rmywnkc63().s[117]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[118]++;
      client.release();
    }
  }
  async findByEmployeeAndBenefitTypeAndDate(employeeId, benefitTypeId, startDate) {
    /* istanbul ignore next */
    cov_1rmywnkc63().f[12]++;
    const client =
    /* istanbul ignore next */
    (cov_1rmywnkc63().s[119]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_1rmywnkc63().s[120]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[121]++, `
        SELECT * FROM employee_benefits 
        WHERE employee_id = $1 
        AND benefit_type_id = $2 
        AND start_date = $3
      `);
      const result =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[122]++, await client.query(query, [employeeId, benefitTypeId, startDate]));
      /* istanbul ignore next */
      cov_1rmywnkc63().s[123]++;
      return /* istanbul ignore next */(cov_1rmywnkc63().b[25][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_1rmywnkc63().b[25][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[124]++;
      logger_1.default.error('Error finding employee benefit by employee, benefit type, and date', {
        error: error.message,
        employeeId,
        benefitTypeId,
        startDate
      });
      /* istanbul ignore next */
      cov_1rmywnkc63().s[125]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[126]++;
      client.release();
    }
  }
  async bulkCreate(data) {
    /* istanbul ignore next */
    cov_1rmywnkc63().f[13]++;
    const client =
    /* istanbul ignore next */
    (cov_1rmywnkc63().s[127]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_1rmywnkc63().s[128]++;
    try {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[129]++;
      await client.query('BEGIN');
      const records =
      /* istanbul ignore next */
      (cov_1rmywnkc63().s[130]++, []);
      /* istanbul ignore next */
      cov_1rmywnkc63().s[131]++;
      for (const item of data) {
        const query =
        /* istanbul ignore next */
        (cov_1rmywnkc63().s[132]++, `
          INSERT INTO employee_benefits (
            employee_id, benefit_type_id, amount, start_date, end_date, is_active
          )
          VALUES ($1, $2, $3, $4, $5, $6)
          RETURNING *
        `);
        const values =
        /* istanbul ignore next */
        (cov_1rmywnkc63().s[133]++, [item.employee_id, item.benefit_type_id, item.amount, item.start_date,
        /* istanbul ignore next */
        (cov_1rmywnkc63().b[26][0]++, item.end_date) ||
        /* istanbul ignore next */
        (cov_1rmywnkc63().b[26][1]++, null),
        /* istanbul ignore next */
        (cov_1rmywnkc63().b[27][0]++, item.is_active) ??
        /* istanbul ignore next */
        (cov_1rmywnkc63().b[27][1]++, true)]);
        const result =
        /* istanbul ignore next */
        (cov_1rmywnkc63().s[134]++, await client.query(query, values));
        /* istanbul ignore next */
        cov_1rmywnkc63().s[135]++;
        records.push(result.rows[0]);
      }
      /* istanbul ignore next */
      cov_1rmywnkc63().s[136]++;
      await client.query('COMMIT');
      /* istanbul ignore next */
      cov_1rmywnkc63().s[137]++;
      logger_1.default.info('Employee benefits bulk created', {
        count: records.length
      });
      /* istanbul ignore next */
      cov_1rmywnkc63().s[138]++;
      return records;
    } catch (error) {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[139]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_1rmywnkc63().s[140]++;
      logger_1.default.error('Error bulk creating employee benefits', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_1rmywnkc63().s[141]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_1rmywnkc63().s[142]++;
      client.release();
    }
  }
}
/* istanbul ignore next */
cov_1rmywnkc63().s[143]++;
exports.employeeBenefitModel = new EmployeeBenefitModel();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,