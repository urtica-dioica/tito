{"version":3,"names":["express_1","cov_3uv1ebtyd","s","require","payrollController_1","deductionTypeController_1","payrollApprovalController_1","authenticate_1","authorize_1","router","Router","payrollApprovalController","PayrollApprovalController","use","authenticate","post","authorize","payrollController","createPayrollPeriod","bind","get","getPayrollPeriods","getPayrollPeriod","put","updatePayrollPeriod","delete","deletePayrollPeriod","generatePayrollRecords","reprocessPayrollRecords","getPayrollSummary","getPayrollRecords","exportPayrollRecords","getPayrollRecord","getPayrollStats","bulkUpdatePayrollRecordsToPaid","updatePayrollRecord","approvePayrollRecord","updatePayrollRecordStatus","completePayrollPeriod","bulkUpdatePayrollRecordsStatus","exportPeriodPaystubsPDF","exportDepartmentPaystubsPDF","markPayrollAsPaid","deductionTypeController","createDeductionType","getDeductionTypes","getActiveDeductionTypes","getDeductionType","updateDeductionType","deleteDeductionType","activateDeductionType","deactivateDeductionType","createPayrollApproval","listPayrollApprovals","getPayrollApprovalStats","getPayrollApproval","getPendingApprovalsForApprover","approvePayrollApproval","createApprovalsForPayrollPeriod","getApprovalWorkflowStatus","deletePayrollApproval","createBenefitType","getBenefitTypes","updateBenefitType","deleteBenefitType","getEmployeeDeductionBalances","createEmployeeDeductionBalance","uploadEmployeeDeductionBalances","deleteEmployeeDeductionBalance","getEmployeeBenefits","createEmployeeBenefit","uploadEmployeeBenefits","updateEmployeeBenefit","deleteEmployeeBenefit","initializePayrollPeriods","generateCurrentMonthPeriod","getExpectedMonthlyHours","generateDepartmentPaystubs","exports","default"],"sources":["/home/kim/tito/server/src/routes/payroll/payrollRoutes.ts"],"sourcesContent":["import { Router } from 'express';\nimport { payrollController } from '../../controllers/payroll/payrollController';\nimport { deductionTypeController } from '../../controllers/payroll/deductionTypeController';\nimport { PayrollApprovalController } from '../../controllers/payroll/payrollApprovalController';\nimport { authenticate } from '../../middleware/auth/authenticate';\nimport { authorize } from '../../middleware/auth/authorize';\n\nconst router = Router();\nconst payrollApprovalController = new PayrollApprovalController();\n\n// Apply authentication to all routes\nrouter.use(authenticate);\n\n/**\n * @route POST /api/v1/payroll/periods\n * @desc Create a new payroll period\n * @access HR Admin\n */\nrouter.post('/periods', authorize(['hr']), payrollController.createPayrollPeriod.bind(payrollController));\n\n/**\n * @route GET /api/v1/payroll/periods\n * @desc Get all payroll periods\n * @access HR Admin\n */\nrouter.get('/periods', authorize(['hr']), payrollController.getPayrollPeriods.bind(payrollController));\n\n/**\n * @route GET /api/v1/payroll/periods/:id\n * @desc Get payroll period by ID\n * @access HR Admin\n */\nrouter.get('/periods/:id', authorize(['hr']), payrollController.getPayrollPeriod.bind(payrollController));\n\n/**\n * @route PUT /api/v1/payroll/periods/:id\n * @desc Update payroll period\n * @access HR Admin\n */\nrouter.put('/periods/:id', authorize(['hr']), payrollController.updatePayrollPeriod.bind(payrollController));\n\n/**\n * @route DELETE /api/v1/payroll/periods/:id\n * @desc Delete payroll period\n * @access HR Admin\n */\nrouter.delete('/periods/:id', authorize(['hr']), payrollController.deletePayrollPeriod.bind(payrollController));\n\n/**\n * @route POST /api/v1/payroll/periods/:id/generate\n * @desc Generate payroll records for a period\n * @access HR Admin\n */\nrouter.post('/periods/:id/generate', authorize(['hr']), payrollController.generatePayrollRecords.bind(payrollController));\n\n/**\n * @route POST /api/v1/payroll/periods/:id/reprocess\n * @desc Reprocess payroll records for a period (clears existing and regenerates)\n * @access HR Admin\n */\nrouter.post('/periods/:id/reprocess', authorize(['hr']), payrollController.reprocessPayrollRecords.bind(payrollController));\n\n/**\n * @route GET /api/v1/payroll/periods/:id/summary\n * @desc Get payroll period summary\n * @access HR Admin\n */\nrouter.get('/periods/:id/summary', authorize(['hr']), payrollController.getPayrollSummary.bind(payrollController));\n\n/**\n * @route GET /api/v1/payroll/records\n * @desc Get payroll records\n * @access HR Admin\n */\nrouter.get('/records', authorize(['hr']), payrollController.getPayrollRecords.bind(payrollController));\n\n/**\n * @route GET /api/v1/payroll/records/export\n * @desc Export payroll records\n * @access HR Admin\n */\nrouter.get('/records/export', authorize(['hr']), payrollController.exportPayrollRecords.bind(payrollController));\n\n/**\n * @route GET /api/v1/payroll/records/:id\n * @desc Get payroll record by ID\n * @access HR Admin\n */\nrouter.get('/records/:id', authorize(['hr']), payrollController.getPayrollRecord.bind(payrollController));\n\n/**\n * @route GET /api/v1/payroll/stats\n * @desc Get payroll statistics\n * @access HR Admin\n */\nrouter.get('/stats', authorize(['hr']), payrollController.getPayrollStats.bind(payrollController));\n\n/**\n * @route PUT /api/v1/payroll/records/bulk-paid\n * @desc Bulk update payroll records to paid status\n * @access HR Admin\n */\nrouter.put('/records/bulk-paid', authorize(['hr']), payrollController.bulkUpdatePayrollRecordsToPaid.bind(payrollController));\n\n/**\n * @route PUT /api/v1/payroll/records/:id\n * @desc Update payroll record\n * @access HR Admin\n */\nrouter.put('/records/:id', authorize(['hr']), payrollController.updatePayrollRecord.bind(payrollController));\n\n/**\n * @route POST /api/v1/payroll/records/:id/approve\n * @desc Approve payroll record\n * @access HR Admin\n */\nrouter.post('/records/:id/approve', authorize(['hr']), payrollController.approvePayrollRecord.bind(payrollController));\n\n/**\n * @route PUT /api/v1/payroll/records/:id/status\n * @desc Update payroll record status\n * @access HR Admin\n */\nrouter.put('/records/:id/status', authorize(['hr']), payrollController.updatePayrollRecordStatus.bind(payrollController));\n\n/**\n * @route PUT /api/v1/payroll/periods/:id/complete\n * @desc Complete payroll period (mark as completed when all departments approve)\n * @access HR Admin\n */\nrouter.put('/periods/:id/complete', authorize(['hr']), payrollController.completePayrollPeriod.bind(payrollController));\n\n/**\n * @route PUT /api/v1/payroll/periods/:id/records/status\n * @desc Bulk update payroll records status for a period\n * @access HR Admin\n */\nrouter.put('/periods/:id/records/status', authorize(['hr']), payrollController.bulkUpdatePayrollRecordsStatus.bind(payrollController));\n\n/**\n * @route GET /api/v1/payroll/periods/:id/export/paystubs/pdf\n * @desc Export all employee paystubs for a period as PDF\n * @access HR Admin\n */\nrouter.get('/periods/:id/export/paystubs/pdf', authorize(['hr']), payrollController.exportPeriodPaystubsPDF.bind(payrollController));\n\n/**\n * @route GET /api/v1/payroll/periods/:id/export/paystubs/department/pdf\n * @desc Export department employee paystubs for a period as PDF\n * @access Department Head\n */\nrouter.get('/periods/:id/export/paystubs/department/pdf', authorize(['department_head']), payrollController.exportDepartmentPaystubsPDF.bind(payrollController));\n\n/**\n * @route POST /api/v1/payroll/records/:id/mark-paid\n * @desc Mark payroll record as paid\n * @access HR Admin\n */\nrouter.post('/records/:id/mark-paid', authorize(['hr']), payrollController.markPayrollAsPaid.bind(payrollController));\n\n/**\n * @route POST /api/v1/payroll/deduction-types\n * @desc Create a new deduction type\n * @access HR Admin\n */\nrouter.post('/deduction-types', authorize(['hr']), deductionTypeController.createDeductionType.bind(deductionTypeController));\n\n/**\n * @route GET /api/v1/payroll/deduction-types\n * @desc Get all deduction types\n * @access HR Admin\n */\nrouter.get('/deduction-types', authorize(['hr']), deductionTypeController.getDeductionTypes.bind(deductionTypeController));\n\n/**\n * @route GET /api/v1/payroll/deduction-types/active\n * @desc Get active deduction types\n * @access HR Admin\n */\nrouter.get('/deduction-types/active', authorize(['hr']), deductionTypeController.getActiveDeductionTypes.bind(deductionTypeController));\n\n/**\n * @route GET /api/v1/payroll/deduction-types/:id\n * @desc Get deduction type by ID\n * @access HR Admin\n */\nrouter.get('/deduction-types/:id', authorize(['hr']), deductionTypeController.getDeductionType.bind(deductionTypeController));\n\n/**\n * @route PUT /api/v1/payroll/deduction-types/:id\n * @desc Update deduction type\n * @access HR Admin\n */\nrouter.put('/deduction-types/:id', authorize(['hr']), deductionTypeController.updateDeductionType.bind(deductionTypeController));\n\n/**\n * @route DELETE /api/v1/payroll/deduction-types/:id\n * @desc Delete deduction type\n * @access HR Admin\n */\nrouter.delete('/deduction-types/:id', authorize(['hr']), deductionTypeController.deleteDeductionType.bind(deductionTypeController));\n\n/**\n * @route POST /api/v1/payroll/deduction-types/:id/activate\n * @desc Activate deduction type\n * @access HR Admin\n */\nrouter.post('/deduction-types/:id/activate', authorize(['hr']), deductionTypeController.activateDeductionType.bind(deductionTypeController));\n\n/**\n * @route POST /api/v1/payroll/deduction-types/:id/deactivate\n * @desc Deactivate deduction type\n * @access HR Admin\n */\nrouter.post('/deduction-types/:id/deactivate', authorize(['hr']), deductionTypeController.deactivateDeductionType.bind(deductionTypeController));\n\n// ===== PAYROLL APPROVAL ROUTES =====\n\n/**\n * @route POST /api/v1/payroll/approvals\n * @desc Create a new payroll approval\n * @access HR Admin\n */\nrouter.post('/approvals', authorize(['hr']), payrollApprovalController.createPayrollApproval.bind(payrollApprovalController));\n\n/**\n * @route GET /api/v1/payroll/approvals\n * @desc Get all payroll approvals\n * @access HR Admin\n */\nrouter.get('/approvals', authorize(['hr']), payrollApprovalController.listPayrollApprovals.bind(payrollApprovalController));\n\n/**\n * @route GET /api/v1/payroll/approvals/stats\n * @desc Get payroll approval statistics\n * @access HR Admin\n */\nrouter.get('/approvals/stats', authorize(['hr']), payrollApprovalController.getPayrollApprovalStats.bind(payrollApprovalController));\n\n/**\n * @route GET /api/v1/payroll/approvals/:id\n * @desc Get payroll approval by ID\n * @access HR Admin, Department Head\n */\nrouter.get('/approvals/:id', authorize(['hr', 'department_head']), payrollApprovalController.getPayrollApproval.bind(payrollApprovalController));\n\n/**\n * @route GET /api/v1/payroll/approvals/approver/:approverId/pending\n * @desc Get pending approvals for a specific approver\n * @access HR Admin, Department Head\n */\nrouter.get('/approvals/approver/:approverId/pending', authorize(['hr', 'department_head']), payrollApprovalController.getPendingApprovalsForApprover.bind(payrollApprovalController));\n\n/**\n * @route PUT /api/v1/payroll/approvals/:id/approve\n * @desc Approve or reject a payroll approval\n * @access HR Admin, Department Head\n */\nrouter.put('/approvals/:id/approve', authorize(['hr', 'department_head']), payrollApprovalController.approvePayrollApproval.bind(payrollApprovalController));\n\n/**\n * @route POST /api/v1/payroll/periods/:payrollPeriodId/approvals\n * @desc Create approvals for a payroll period\n * @access HR Admin\n */\nrouter.post('/periods/:payrollPeriodId/approvals', authorize(['hr']), payrollApprovalController.createApprovalsForPayrollPeriod.bind(payrollApprovalController));\n\n/**\n * @route GET /api/v1/payroll/periods/:payrollPeriodId/approvals/workflow\n * @desc Get approval workflow status for a payroll period\n * @access HR Admin\n */\nrouter.get('/periods/:payrollPeriodId/approvals/workflow', authorize(['hr']), payrollApprovalController.getApprovalWorkflowStatus.bind(payrollApprovalController));\n\n/**\n * @route DELETE /api/v1/payroll/approvals/:id\n * @desc Delete a payroll approval\n * @access HR Admin\n */\nrouter.delete('/approvals/:id', authorize(['hr']), payrollApprovalController.deletePayrollApproval.bind(payrollApprovalController));\n\n// ===== NEW PAYROLL SYSTEM ROUTES =====\n\n// New routes for benefit types management\n/**\n * @route POST /api/v1/payroll/benefit-types\n * @desc Create a new benefit type\n * @access HR Admin\n */\nrouter.post('/benefit-types', authorize(['hr']), payrollController.createBenefitType.bind(payrollController));\n\n/**\n * @route GET /api/v1/payroll/benefit-types\n * @desc Get all benefit types\n * @access HR Admin\n */\nrouter.get('/benefit-types', authorize(['hr']), payrollController.getBenefitTypes.bind(payrollController));\n\n/**\n * @route PUT /api/v1/payroll/benefit-types/:id\n * @desc Update benefit type\n * @access HR Admin\n */\nrouter.put('/benefit-types/:id', authorize(['hr']), payrollController.updateBenefitType.bind(payrollController));\n\n/**\n * @route DELETE /api/v1/payroll/benefit-types/:id\n * @desc Delete benefit type\n * @access HR Admin\n */\nrouter.delete('/benefit-types/:id', authorize(['hr']), payrollController.deleteBenefitType.bind(payrollController));\n\n// New routes for employee deduction balances management\n/**\n * @route GET /api/v1/payroll/employee-deduction-balances\n * @desc Get employee deduction balances\n * @access HR Admin\n */\nrouter.get('/employee-deduction-balances', authorize(['hr']), payrollController.getEmployeeDeductionBalances.bind(payrollController));\n\n/**\n * @route POST /api/v1/payroll/employee-deduction-balances\n * @desc Create employee deduction balance\n * @access HR Admin\n */\nrouter.post('/employee-deduction-balances', authorize(['hr']), payrollController.createEmployeeDeductionBalance.bind(payrollController));\n\n/**\n * @route POST /api/v1/payroll/employee-deduction-balances/upload\n * @desc Upload employee deduction balances from CSV\n * @access HR Admin\n */\nrouter.post('/employee-deduction-balances/upload', authorize(['hr']), payrollController.uploadEmployeeDeductionBalances.bind(payrollController));\n\n/**\n * @route DELETE /api/v1/payroll/employee-deduction-balances/:id\n * @desc Delete employee deduction balance\n * @access HR Admin\n */\nrouter.delete('/employee-deduction-balances/:id', authorize(['hr']), payrollController.deleteEmployeeDeductionBalance.bind(payrollController));\n\n// New routes for employee benefits management\n/**\n * @route GET /api/v1/payroll/employee-benefits\n * @desc Get employee benefits\n * @access HR Admin\n */\nrouter.get('/employee-benefits', authorize(['hr']), payrollController.getEmployeeBenefits.bind(payrollController));\n\n/**\n * @route POST /api/v1/payroll/employee-benefits\n * @desc Create employee benefit\n * @access HR Admin\n */\nrouter.post('/employee-benefits', authorize(['hr']), payrollController.createEmployeeBenefit.bind(payrollController));\n\n/**\n * @route POST /api/v1/payroll/employee-benefits/upload\n * @desc Upload employee benefits from CSV\n * @access HR Admin\n */\nrouter.post('/employee-benefits/upload', authorize(['hr']), payrollController.uploadEmployeeBenefits.bind(payrollController));\n\n/**\n * @route PUT /api/v1/payroll/employee-benefits/:id\n * @desc Update employee benefit\n * @access HR Admin\n */\nrouter.put('/employee-benefits/:id', authorize(['hr']), payrollController.updateEmployeeBenefit.bind(payrollController));\n\n/**\n * @route DELETE /api/v1/payroll/employee-benefits/:id\n * @desc Delete employee benefit\n * @access HR Admin\n */\nrouter.delete('/employee-benefits/:id', authorize(['hr']), payrollController.deleteEmployeeBenefit.bind(payrollController));\n\n/**\n * @route POST /api/v1/payroll/initialize-periods\n * @desc Initialize payroll periods for the current year\n * @access HR Admin\n */\nrouter.post('/initialize-periods', authorize(['hr']), payrollController.initializePayrollPeriods.bind(payrollController));\n\n/**\n * @route POST /api/v1/payroll/generate-current-month\n * @desc Generate payroll period for the current month only\n * @access HR Admin\n */\nrouter.post('/generate-current-month', authorize(['hr']), payrollController.generateCurrentMonthPeriod.bind(payrollController));\n\n/**\n * @route GET /api/v1/payroll/expected-hours\n * @desc Get expected monthly hours from system settings\n * @access HR Admin\n */\nrouter.get('/expected-hours', authorize(['hr']), payrollController.getExpectedMonthlyHours.bind(payrollController));\n\n/**\n * @route GET /api/v1/payroll/paystubs/department/:departmentId/period/:periodId\n * @desc Generate PDF paystubs for a department's employees for a specific period\n * @access HR Admin\n */\nrouter.get('/paystubs/department/:departmentId/period/:periodId', authorize(['hr']), payrollController.generateDepartmentPaystubs.bind(payrollController));\n\nexport default router;"],"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","ignoreList":[]}