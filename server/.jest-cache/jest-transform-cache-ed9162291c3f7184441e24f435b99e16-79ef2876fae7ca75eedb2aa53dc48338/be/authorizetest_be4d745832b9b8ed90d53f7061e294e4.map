{"file":"/home/kim/tito/server/tests/unit/middleware/authorize.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/unit/middleware/authorize.test.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { \n  authorize, \n  requireHR, \n  requireHROrDeptHead, \n  requireAuthenticatedUser, \n  requireDepartmentHead, \n  requireEmployee \n} from '../../../src/middleware/auth/authorize';\nimport { USER_ROLES } from '../../../src/utils/constants/roles';\n\ndescribe('Authorization Middleware', () => {\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockNext: NextFunction;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Mock request object\n    mockRequest = {\n      method: 'GET',\n      user: undefined\n    };\n\n    // Mock response object\n    mockResponse = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis()\n    };\n\n    // Mock next function\n    mockNext = jest.fn();\n  });\n\n  describe('authorize', () => {\n    it('should authorize user with correct role', () => {\n      // Arrange\n      const hrUser = {\n        userId: 'user-123',\n        email: 'hr@example.com',\n        role: USER_ROLES.HR,\n        tokenVersion: 1\n      };\n      mockRequest.user = hrUser;\n      const authorizeHR = authorize([USER_ROLES.HR]);\n\n      // Act\n      authorizeHR(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n      expect(mockResponse.json).not.toHaveBeenCalled();\n    });\n\n    it('should authorize user with one of multiple allowed roles', () => {\n      // Arrange\n      const deptHeadUser = {\n        userId: 'user-456',\n        email: 'depthead@example.com',\n        role: USER_ROLES.DEPARTMENT_HEAD,\n        tokenVersion: 1\n      };\n      mockRequest.user = deptHeadUser;\n      const authorizeHRorDeptHead = authorize([USER_ROLES.HR, USER_ROLES.DEPARTMENT_HEAD]);\n\n      // Act\n      authorizeHRorDeptHead(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n      expect(mockResponse.json).not.toHaveBeenCalled();\n    });\n\n    it('should handle CORS preflight requests', () => {\n      // Arrange\n      mockRequest.method = 'OPTIONS';\n      const authorizeHR = authorize([USER_ROLES.HR]);\n\n      // Act\n      authorizeHR(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n      expect(mockResponse.json).not.toHaveBeenCalled();\n    });\n\n    it('should return 401 when user is not authenticated', () => {\n      // Arrange\n      mockRequest.user = undefined;\n      const authorizeHR = authorize([USER_ROLES.HR]);\n\n      // Act\n      authorizeHR(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Authentication required',\n        error: 'AUTHENTICATION_REQUIRED'\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should return 403 when user has insufficient permissions', () => {\n      // Arrange\n      const employeeUser = {\n        userId: 'user-789',\n        email: 'employee@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.user = employeeUser;\n      const authorizeHR = authorize([USER_ROLES.HR]);\n\n      // Act\n      authorizeHR(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Insufficient permissions',\n        error: 'INSUFFICIENT_PERMISSIONS',\n        requiredRoles: [USER_ROLES.HR],\n        userRole: USER_ROLES.EMPLOYEE\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should return 403 when user role is not in allowed roles', () => {\n      // Arrange\n      const employeeUser = {\n        userId: 'user-789',\n        email: 'employee@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.user = employeeUser;\n      const authorizeHRorDeptHead = authorize([USER_ROLES.HR, USER_ROLES.DEPARTMENT_HEAD]);\n\n      // Act\n      authorizeHRorDeptHead(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Insufficient permissions',\n        error: 'INSUFFICIENT_PERMISSIONS',\n        requiredRoles: [USER_ROLES.HR, USER_ROLES.DEPARTMENT_HEAD],\n        userRole: USER_ROLES.EMPLOYEE\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should handle errors gracefully', () => {\n      // Arrange\n      const invalidUser = {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: null, // Invalid role\n        tokenVersion: 1\n      };\n      mockRequest.user = invalidUser as any;\n      const authorizeHR = authorize([USER_ROLES.HR]);\n\n      // Act\n      authorizeHR(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Authorization check failed',\n        error: 'AUTHORIZATION_FAILED'\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('requireHR', () => {\n    it('should allow HR users', () => {\n      // Arrange\n      const hrUser = {\n        userId: 'user-123',\n        email: 'hr@example.com',\n        role: USER_ROLES.HR,\n        tokenVersion: 1\n      };\n      mockRequest.user = hrUser;\n\n      // Act\n      requireHR(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n    });\n\n    it('should deny non-HR users', () => {\n      // Arrange\n      const employeeUser = {\n        userId: 'user-456',\n        email: 'employee@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.user = employeeUser;\n\n      // Act\n      requireHR(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Insufficient permissions',\n        error: 'INSUFFICIENT_PERMISSIONS',\n        requiredRoles: [USER_ROLES.HR],\n        userRole: USER_ROLES.EMPLOYEE\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('requireHROrDeptHead', () => {\n    it('should allow HR users', () => {\n      // Arrange\n      const hrUser = {\n        userId: 'user-123',\n        email: 'hr@example.com',\n        role: USER_ROLES.HR,\n        tokenVersion: 1\n      };\n      mockRequest.user = hrUser;\n\n      // Act\n      requireHROrDeptHead(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n    });\n\n    it('should allow department head users', () => {\n      // Arrange\n      const deptHeadUser = {\n        userId: 'user-456',\n        email: 'depthead@example.com',\n        role: USER_ROLES.DEPARTMENT_HEAD,\n        tokenVersion: 1\n      };\n      mockRequest.user = deptHeadUser;\n\n      // Act\n      requireHROrDeptHead(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n    });\n\n    it('should deny employee users', () => {\n      // Arrange\n      const employeeUser = {\n        userId: 'user-789',\n        email: 'employee@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.user = employeeUser;\n\n      // Act\n      requireHROrDeptHead(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Insufficient permissions',\n        error: 'INSUFFICIENT_PERMISSIONS',\n        requiredRoles: [USER_ROLES.HR, USER_ROLES.DEPARTMENT_HEAD],\n        userRole: USER_ROLES.EMPLOYEE\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('requireAuthenticatedUser', () => {\n    it('should allow HR users', () => {\n      // Arrange\n      const hrUser = {\n        userId: 'user-123',\n        email: 'hr@example.com',\n        role: USER_ROLES.HR,\n        tokenVersion: 1\n      };\n      mockRequest.user = hrUser;\n\n      // Act\n      requireAuthenticatedUser(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n    });\n\n    it('should allow department head users', () => {\n      // Arrange\n      const deptHeadUser = {\n        userId: 'user-456',\n        email: 'depthead@example.com',\n        role: USER_ROLES.DEPARTMENT_HEAD,\n        tokenVersion: 1\n      };\n      mockRequest.user = deptHeadUser;\n\n      // Act\n      requireAuthenticatedUser(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n    });\n\n    it('should allow employee users', () => {\n      // Arrange\n      const employeeUser = {\n        userId: 'user-789',\n        email: 'employee@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.user = employeeUser;\n\n      // Act\n      requireAuthenticatedUser(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n    });\n\n    it('should deny unauthenticated users', () => {\n      // Arrange\n      mockRequest.user = undefined;\n\n      // Act\n      requireAuthenticatedUser(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(401);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Authentication required',\n        error: 'AUTHENTICATION_REQUIRED'\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('requireDepartmentHead', () => {\n    it('should allow department head users', () => {\n      // Arrange\n      const deptHeadUser = {\n        userId: 'user-456',\n        email: 'depthead@example.com',\n        role: USER_ROLES.DEPARTMENT_HEAD,\n        tokenVersion: 1\n      };\n      mockRequest.user = deptHeadUser;\n\n      // Act\n      requireDepartmentHead(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n    });\n\n    it('should deny HR users', () => {\n      // Arrange\n      const hrUser = {\n        userId: 'user-123',\n        email: 'hr@example.com',\n        role: USER_ROLES.HR,\n        tokenVersion: 1\n      };\n      mockRequest.user = hrUser;\n\n      // Act\n      requireDepartmentHead(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Insufficient permissions',\n        error: 'INSUFFICIENT_PERMISSIONS',\n        requiredRoles: [USER_ROLES.DEPARTMENT_HEAD],\n        userRole: USER_ROLES.HR\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should deny employee users', () => {\n      // Arrange\n      const employeeUser = {\n        userId: 'user-789',\n        email: 'employee@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.user = employeeUser;\n\n      // Act\n      requireDepartmentHead(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Insufficient permissions',\n        error: 'INSUFFICIENT_PERMISSIONS',\n        requiredRoles: [USER_ROLES.DEPARTMENT_HEAD],\n        userRole: USER_ROLES.EMPLOYEE\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('requireEmployee', () => {\n    it('should allow employee users', () => {\n      // Arrange\n      const employeeUser = {\n        userId: 'user-789',\n        email: 'employee@example.com',\n        role: USER_ROLES.EMPLOYEE,\n        tokenVersion: 1\n      };\n      mockRequest.user = employeeUser;\n\n      // Act\n      requireEmployee(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockResponse.status).not.toHaveBeenCalled();\n    });\n\n    it('should deny HR users', () => {\n      // Arrange\n      const hrUser = {\n        userId: 'user-123',\n        email: 'hr@example.com',\n        role: USER_ROLES.HR,\n        tokenVersion: 1\n      };\n      mockRequest.user = hrUser;\n\n      // Act\n      requireEmployee(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Insufficient permissions',\n        error: 'INSUFFICIENT_PERMISSIONS',\n        requiredRoles: [USER_ROLES.EMPLOYEE],\n        userRole: USER_ROLES.HR\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should deny department head users', () => {\n      // Arrange\n      const deptHeadUser = {\n        userId: 'user-456',\n        email: 'depthead@example.com',\n        role: USER_ROLES.DEPARTMENT_HEAD,\n        tokenVersion: 1\n      };\n      mockRequest.user = deptHeadUser;\n\n      // Act\n      requireEmployee(mockRequest as Request, mockResponse as Response, mockNext);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(403);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Insufficient permissions',\n        error: 'INSUFFICIENT_PERMISSIONS',\n        requiredRoles: [USER_ROLES.EMPLOYEE],\n        userRole: USER_ROLES.DEPARTMENT_HEAD\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}