911c4b5665f4696cb5163a6c1549571a
"use strict";
/**
 * Authentication Security Tests
 *
 * Comprehensive testing of authentication mechanisms, including:
 * - Brute force protection
 * - Password strength validation
 * - Account lockout mechanisms
 * - Session management
 * - JWT token security
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock axios for testing
const axios = {
    create: () => ({
        get: jest.fn(),
        post: jest.fn(),
        put: jest.fn(),
        delete: jest.fn(),
        patch: jest.fn(),
        interceptors: {
            request: { use: jest.fn() },
            response: { use: jest.fn() }
        }
    })
};
describe('Authentication Security Tests', () => {
    let config;
    beforeAll(() => {
        config = {
            baseURL: process.env.TEST_BASE_URL || 'http://localhost:3000',
            timeout: 30000,
            maxRetries: 3,
            testUser: {
                username: 'testuser',
                password: 'TestPassword123!',
                role: 'employee'
            },
            adminUser: {
                username: 'admin',
                password: 'AdminPassword123!',
                role: 'hr'
            }
        };
    });
    describe('Brute Force Protection', () => {
        it('should prevent brute force attacks on login endpoint', async () => {
            const startTime = Date.now();
            let failedAttempts = 0;
            let lockedOut = false;
            // Attempt multiple failed logins
            for (let i = 0; i < 10; i++) {
                try {
                    const response = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                        username: 'testuser',
                        password: 'wrongpassword'
                    }, {
                        timeout: 5000,
                        validateStatus: () => true
                    });
                    if (response.status === 401) {
                        failedAttempts++;
                    }
                    else if (response.status === 429) {
                        lockedOut = true;
                        break;
                    }
                }
                catch (error) {
                    // Network error, continue
                }
            }
            const duration = Date.now() - startTime;
            // Should either lock out or have reasonable delay
            expect(lockedOut || failedAttempts < 5).toBe(true);
            if (lockedOut) {
                console.log(`✅ Account locked after ${failedAttempts} attempts in ${duration}ms`);
            }
            else {
                console.log(`⚠️ No lockout after ${failedAttempts} attempts in ${duration}ms`);
            }
        }, 60000);
        it('should implement rate limiting on authentication endpoints', async () => {
            const requests = [];
            // Send multiple requests rapidly
            for (let i = 0; i < 50; i++) {
                requests.push(axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                    username: 'testuser',
                    password: 'wrongpassword'
                }, {
                    timeout: 5000,
                    validateStatus: () => true
                }));
            }
            const responses = await Promise.all(requests);
            const rateLimitedResponses = responses.filter(r => r.status === 429);
            // Should have some rate limiting in place
            expect(rateLimitedResponses.length).toBeGreaterThan(0);
            console.log(`✅ ${rateLimitedResponses.length} requests were rate limited`);
        }, 30000);
    });
    describe('Password Security', () => {
        it('should enforce strong password requirements', async () => {
            const weakPasswords = [
                '123456',
                'password',
                'admin',
                'qwerty',
                'abc123',
                'password123',
                '12345678',
                'welcome',
                'monkey',
                'dragon'
            ];
            let weakPasswordsAccepted = 0;
            for (const password of weakPasswords) {
                try {
                    const response = await axios.create().post(`${config.baseURL}/api/v1/auth/register`, {
                        username: `testuser${Date.now()}`,
                        password: password,
                        email: `test${Date.now()}@example.com`
                    }, {
                        timeout: 5000,
                        validateStatus: () => true
                    });
                    if (response.status === 200 || response.status === 201) {
                        weakPasswordsAccepted++;
                    }
                }
                catch (error) {
                    // Network error, continue
                }
            }
            // Should reject all weak passwords
            expect(weakPasswordsAccepted).toBe(0);
            if (weakPasswordsAccepted === 0) {
                console.log('✅ All weak passwords were rejected');
            }
            else {
                console.log(`⚠️ ${weakPasswordsAccepted} weak passwords were accepted`);
            }
        }, 30000);
        it('should validate password complexity requirements', async () => {
            const testCases = [
                { password: 'short', shouldPass: false, reason: 'Too short' },
                { password: 'nouppercase123!', shouldPass: false, reason: 'No uppercase' },
                { password: 'NOLOWERCASE123!', shouldPass: false, reason: 'No lowercase' },
                { password: 'NoNumbers!', shouldPass: false, reason: 'No numbers' },
                { password: 'NoSpecialChars123', shouldPass: false, reason: 'No special characters' },
                { password: 'ValidPassword123!', shouldPass: true, reason: 'Valid password' }
            ];
            for (const testCase of testCases) {
                try {
                    const response = await axios.create().post(`${config.baseURL}/api/v1/auth/register`, {
                        username: `testuser${Date.now()}`,
                        password: testCase.password,
                        email: `test${Date.now()}@example.com`
                    }, {
                        timeout: 5000,
                        validateStatus: () => true
                    });
                    const passed = response.status === 200 || response.status === 201;
                    if (testCase.shouldPass) {
                        expect(passed).toBe(true);
                    }
                    else {
                        expect(passed).toBe(false);
                    }
                }
                catch (error) {
                    // Network error, continue
                }
            }
        }, 30000);
    });
    describe('Session Management', () => {
        it('should implement secure session management', async () => {
            // Test session creation
            const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                username: config.testUser.username,
                password: config.testUser.password
            }, {
                timeout: 10000,
                validateStatus: () => true
            });
            expect(loginResponse.status).toBe(200);
            const token = loginResponse.data.token;
            expect(token).toBeDefined();
            expect(typeof token).toBe('string');
            expect(token.length).toBeGreaterThan(50); // JWT tokens are typically long
            // Test token validation
            const protectedResponse = await axios.create().get(`${config.baseURL}/api/v1/employees`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                timeout: 10000,
                validateStatus: () => true
            });
            expect(protectedResponse.status).toBe(200);
        }, 30000);
        it('should handle token expiration properly', async () => {
            // This test would require a short-lived token or token manipulation
            // For now, we'll test that expired tokens are rejected
            const expiredToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ0ZXN0IiwiaWF0IjoxNjAwMDAwMDAwLCJleHAiOjE2MDAwMDAwMDB9.invalid';
            const response = await axios.create().get(`${config.baseURL}/api/v1/employees`, {
                headers: {
                    'Authorization': `Bearer ${expiredToken}`
                },
                timeout: 10000,
                validateStatus: () => true
            });
            expect(response.status).toBe(401);
        }, 30000);
        it('should implement secure logout', async () => {
            // Login first
            const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                username: config.testUser.username,
                password: config.testUser.password
            }, {
                timeout: 10000,
                validateStatus: () => true
            });
            expect(loginResponse.status).toBe(200);
            const token = loginResponse.data.token;
            // Logout
            const logoutResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/logout`, {}, {
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                timeout: 10000,
                validateStatus: () => true
            });
            expect(logoutResponse.status).toBe(200);
            // Try to use token after logout
            const protectedResponse = await axios.create().get(`${config.baseURL}/api/v1/employees`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                timeout: 10000,
                validateStatus: () => true
            });
            // Token should be invalid after logout
            expect(protectedResponse.status).toBe(401);
        }, 30000);
    });
    describe('JWT Token Security', () => {
        it('should use secure JWT token configuration', async () => {
            const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                username: config.testUser.username,
                password: config.testUser.password
            }, {
                timeout: 10000,
                validateStatus: () => true
            });
            expect(loginResponse.status).toBe(200);
            const token = loginResponse.data.token;
            // Decode JWT token (without verification for testing)
            const parts = token.split('.');
            expect(parts.length).toBe(3); // Header, payload, signature
            const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());
            // Check token structure
            expect(payload).toHaveProperty('userId');
            expect(payload).toHaveProperty('role');
            expect(payload).toHaveProperty('iat'); // issued at
            expect(payload).toHaveProperty('exp'); // expiration
            // Check token expiration (should be reasonable, not too long)
            const expirationTime = payload.exp * 1000; // Convert to milliseconds
            const currentTime = Date.now();
            const tokenLifetime = expirationTime - currentTime;
            // Token should expire within 24 hours (86400000 ms)
            expect(tokenLifetime).toBeLessThan(86400000);
            expect(tokenLifetime).toBeGreaterThan(0);
        }, 30000);
        it('should prevent token manipulation', async () => {
            const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                username: config.testUser.username,
                password: config.testUser.password
            }, {
                timeout: 10000,
                validateStatus: () => true
            });
            expect(loginResponse.status).toBe(200);
            const originalToken = loginResponse.data.token;
            // Try to manipulate the token
            const parts = originalToken.split('.');
            const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());
            // Change the role
            payload.role = 'hr';
            // Recreate token with modified payload
            const modifiedPayload = Buffer.from(JSON.stringify(payload)).toString('base64');
            const modifiedToken = `${parts[0]}.${modifiedPayload}.${parts[2]}`;
            // Try to use modified token
            const response = await axios.create().get(`${config.baseURL}/api/v1/employees`, {
                headers: {
                    'Authorization': `Bearer ${modifiedToken}`
                },
                timeout: 10000,
                validateStatus: () => true
            });
            // Should be rejected due to signature mismatch
            expect(response.status).toBe(401);
        }, 30000);
    });
    describe('Account Security', () => {
        it('should implement account lockout after failed attempts', async () => {
            const testUsername = `testuser${Date.now()}`;
            let failedAttempts = 0;
            let accountLocked = false;
            // Attempt multiple failed logins
            for (let i = 0; i < 10; i++) {
                try {
                    const response = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                        username: testUsername,
                        password: 'wrongpassword'
                    }, {
                        timeout: 5000,
                        validateStatus: () => true
                    });
                    if (response.status === 401) {
                        failedAttempts++;
                    }
                    else if (response.status === 423 || response.status === 429) {
                        accountLocked = true;
                        break;
                    }
                }
                catch (error) {
                    // Network error, continue
                }
            }
            // Should either lock out or have reasonable protection
            expect(accountLocked || failedAttempts < 5).toBe(true);
            if (accountLocked) {
                console.log(`✅ Account locked after ${failedAttempts} attempts`);
            }
            else {
                console.log(`⚠️ No account lockout after ${failedAttempts} attempts`);
            }
        }, 60000);
        it('should handle password reset securely', async () => {
            // Test password reset request
            const resetResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/forgot-password`, {
                email: 'test@example.com'
            }, {
                timeout: 10000,
                validateStatus: () => true
            });
            // Should not reveal whether email exists or not
            expect(resetResponse.status).toBe(200);
            // Response should not contain sensitive information
            const responseText = JSON.stringify(resetResponse.data);
            expect(responseText).not.toContain('user');
            expect(responseText).not.toContain('email');
            expect(responseText).not.toContain('exists');
        }, 30000);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,