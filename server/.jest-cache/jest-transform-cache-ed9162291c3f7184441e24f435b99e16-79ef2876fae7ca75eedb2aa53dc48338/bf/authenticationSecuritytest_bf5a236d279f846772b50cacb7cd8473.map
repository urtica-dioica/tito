{"file":"/home/kim/tito/server/tests/security/authenticationSecurity.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/security/authenticationSecurity.test.ts"],"sourcesContent":["/**\n * Authentication Security Tests\n * \n * Comprehensive testing of authentication mechanisms, including:\n * - Brute force protection\n * - Password strength validation\n * - Account lockout mechanisms\n * - Session management\n * - JWT token security\n */\n\nimport { SecurityTestConfig } from './securityTestUtils';\n// Mock axios for testing\nconst axios = {\n  create: () => ({\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n    patch: jest.fn(),\n    interceptors: {\n      request: { use: jest.fn() },\n      response: { use: jest.fn() }\n    }\n  })\n};\n\ndescribe('Authentication Security Tests', () => {\n  let config: SecurityTestConfig;\n\n  beforeAll(() => {\n    config = {\n      baseURL: process.env.TEST_BASE_URL || 'http://localhost:3000',\n      timeout: 30000,\n      maxRetries: 3,\n      testUser: {\n        username: 'testuser',\n        password: 'TestPassword123!',\n        role: 'employee'\n      },\n      adminUser: {\n        username: 'admin',\n        password: 'AdminPassword123!',\n        role: 'hr'\n      }\n    };\n\n  });\n\n  describe('Brute Force Protection', () => {\n    it('should prevent brute force attacks on login endpoint', async () => {\n      const startTime = Date.now();\n      let failedAttempts = 0;\n      let lockedOut = false;\n\n      // Attempt multiple failed logins\n      for (let i = 0; i < 10; i++) {\n        try {\n          const response = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {\n            username: 'testuser',\n            password: 'wrongpassword'\n          }, {\n            timeout: 5000,\n            validateStatus: () => true\n          });\n\n          if (response.status === 401) {\n            failedAttempts++;\n          } else if (response.status === 429) {\n            lockedOut = true;\n            break;\n          }\n        } catch (error) {\n          // Network error, continue\n        }\n      }\n\n      const duration = Date.now() - startTime;\n\n      // Should either lock out or have reasonable delay\n      expect(lockedOut || failedAttempts < 5).toBe(true);\n      \n      if (lockedOut) {\n        console.log(`✅ Account locked after ${failedAttempts} attempts in ${duration}ms`);\n      } else {\n        console.log(`⚠️ No lockout after ${failedAttempts} attempts in ${duration}ms`);\n      }\n    }, 60000);\n\n    it('should implement rate limiting on authentication endpoints', async () => {\n      const requests = [];\n      \n      // Send multiple requests rapidly\n      for (let i = 0; i < 50; i++) {\n        requests.push(\n          axios.create().post(`${config.baseURL}/api/v1/auth/login`, {\n            username: 'testuser',\n            password: 'wrongpassword'\n          }, {\n            timeout: 5000,\n            validateStatus: () => true\n          })\n        );\n      }\n\n      const responses = await Promise.all(requests);\n      const rateLimitedResponses = responses.filter(r => r.status === 429);\n\n      // Should have some rate limiting in place\n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n      \n      console.log(`✅ ${rateLimitedResponses.length} requests were rate limited`);\n    }, 30000);\n  });\n\n  describe('Password Security', () => {\n    it('should enforce strong password requirements', async () => {\n      const weakPasswords = [\n        '123456',\n        'password',\n        'admin',\n        'qwerty',\n        'abc123',\n        'password123',\n        '12345678',\n        'welcome',\n        'monkey',\n        'dragon'\n      ];\n\n      let weakPasswordsAccepted = 0;\n\n      for (const password of weakPasswords) {\n        try {\n          const response = await axios.create().post(`${config.baseURL}/api/v1/auth/register`, {\n            username: `testuser${Date.now()}`,\n            password: password,\n            email: `test${Date.now()}@example.com`\n          }, {\n            timeout: 5000,\n            validateStatus: () => true\n          });\n\n          if (response.status === 200 || response.status === 201) {\n            weakPasswordsAccepted++;\n          }\n        } catch (error) {\n          // Network error, continue\n        }\n      }\n\n      // Should reject all weak passwords\n      expect(weakPasswordsAccepted).toBe(0);\n      \n      if (weakPasswordsAccepted === 0) {\n        console.log('✅ All weak passwords were rejected');\n      } else {\n        console.log(`⚠️ ${weakPasswordsAccepted} weak passwords were accepted`);\n      }\n    }, 30000);\n\n    it('should validate password complexity requirements', async () => {\n      const testCases = [\n        { password: 'short', shouldPass: false, reason: 'Too short' },\n        { password: 'nouppercase123!', shouldPass: false, reason: 'No uppercase' },\n        { password: 'NOLOWERCASE123!', shouldPass: false, reason: 'No lowercase' },\n        { password: 'NoNumbers!', shouldPass: false, reason: 'No numbers' },\n        { password: 'NoSpecialChars123', shouldPass: false, reason: 'No special characters' },\n        { password: 'ValidPassword123!', shouldPass: true, reason: 'Valid password' }\n      ];\n\n      for (const testCase of testCases) {\n        try {\n          const response = await axios.create().post(`${config.baseURL}/api/v1/auth/register`, {\n            username: `testuser${Date.now()}`,\n            password: testCase.password,\n            email: `test${Date.now()}@example.com`\n          }, {\n            timeout: 5000,\n            validateStatus: () => true\n          });\n\n          const passed = response.status === 200 || response.status === 201;\n          \n          if (testCase.shouldPass) {\n            expect(passed).toBe(true);\n          } else {\n            expect(passed).toBe(false);\n          }\n        } catch (error) {\n          // Network error, continue\n        }\n      }\n    }, 30000);\n  });\n\n  describe('Session Management', () => {\n    it('should implement secure session management', async () => {\n      // Test session creation\n      const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {\n        username: config.testUser.username,\n        password: config.testUser.password\n      }, {\n        timeout: 10000,\n        validateStatus: () => true\n      });\n\n      expect(loginResponse.status).toBe(200);\n      \n      const token = loginResponse.data.token;\n      expect(token).toBeDefined();\n      expect(typeof token).toBe('string');\n      expect(token.length).toBeGreaterThan(50); // JWT tokens are typically long\n\n      // Test token validation\n      const protectedResponse = await axios.create().get(`${config.baseURL}/api/v1/employees`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        },\n        timeout: 10000,\n        validateStatus: () => true\n      });\n\n      expect(protectedResponse.status).toBe(200);\n    }, 30000);\n\n    it('should handle token expiration properly', async () => {\n      // This test would require a short-lived token or token manipulation\n      // For now, we'll test that expired tokens are rejected\n      const expiredToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ0ZXN0IiwiaWF0IjoxNjAwMDAwMDAwLCJleHAiOjE2MDAwMDAwMDB9.invalid';\n\n      const response = await axios.create().get(`${config.baseURL}/api/v1/employees`, {\n        headers: {\n          'Authorization': `Bearer ${expiredToken}`\n        },\n        timeout: 10000,\n        validateStatus: () => true\n      });\n\n      expect(response.status).toBe(401);\n    }, 30000);\n\n    it('should implement secure logout', async () => {\n      // Login first\n      const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {\n        username: config.testUser.username,\n        password: config.testUser.password\n      }, {\n        timeout: 10000,\n        validateStatus: () => true\n      });\n\n      expect(loginResponse.status).toBe(200);\n      const token = loginResponse.data.token;\n\n      // Logout\n      const logoutResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/logout`, {}, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        },\n        timeout: 10000,\n        validateStatus: () => true\n      });\n\n      expect(logoutResponse.status).toBe(200);\n\n      // Try to use token after logout\n      const protectedResponse = await axios.create().get(`${config.baseURL}/api/v1/employees`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        },\n        timeout: 10000,\n        validateStatus: () => true\n      });\n\n      // Token should be invalid after logout\n      expect(protectedResponse.status).toBe(401);\n    }, 30000);\n  });\n\n  describe('JWT Token Security', () => {\n    it('should use secure JWT token configuration', async () => {\n      const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {\n        username: config.testUser.username,\n        password: config.testUser.password\n      }, {\n        timeout: 10000,\n        validateStatus: () => true\n      });\n\n      expect(loginResponse.status).toBe(200);\n      \n      const token = loginResponse.data.token;\n      \n      // Decode JWT token (without verification for testing)\n      const parts = token.split('.');\n      expect(parts.length).toBe(3); // Header, payload, signature\n\n      const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());\n      \n      // Check token structure\n      expect(payload).toHaveProperty('userId');\n      expect(payload).toHaveProperty('role');\n      expect(payload).toHaveProperty('iat'); // issued at\n      expect(payload).toHaveProperty('exp'); // expiration\n      \n      // Check token expiration (should be reasonable, not too long)\n      const expirationTime = payload.exp * 1000; // Convert to milliseconds\n      const currentTime = Date.now();\n      const tokenLifetime = expirationTime - currentTime;\n      \n      // Token should expire within 24 hours (86400000 ms)\n      expect(tokenLifetime).toBeLessThan(86400000);\n      expect(tokenLifetime).toBeGreaterThan(0);\n    }, 30000);\n\n    it('should prevent token manipulation', async () => {\n      const loginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {\n        username: config.testUser.username,\n        password: config.testUser.password\n      }, {\n        timeout: 10000,\n        validateStatus: () => true\n      });\n\n      expect(loginResponse.status).toBe(200);\n      \n      const originalToken = loginResponse.data.token;\n      \n      // Try to manipulate the token\n      const parts = originalToken.split('.');\n      const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());\n      \n      // Change the role\n      payload.role = 'hr';\n      \n      // Recreate token with modified payload\n      const modifiedPayload = Buffer.from(JSON.stringify(payload)).toString('base64');\n      const modifiedToken = `${parts[0]}.${modifiedPayload}.${parts[2]}`;\n      \n      // Try to use modified token\n      const response = await axios.create().get(`${config.baseURL}/api/v1/employees`, {\n        headers: {\n          'Authorization': `Bearer ${modifiedToken}`\n        },\n        timeout: 10000,\n        validateStatus: () => true\n      });\n\n      // Should be rejected due to signature mismatch\n      expect(response.status).toBe(401);\n    }, 30000);\n  });\n\n  describe('Account Security', () => {\n    it('should implement account lockout after failed attempts', async () => {\n      const testUsername = `testuser${Date.now()}`;\n      let failedAttempts = 0;\n      let accountLocked = false;\n\n      // Attempt multiple failed logins\n      for (let i = 0; i < 10; i++) {\n        try {\n          const response = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {\n            username: testUsername,\n            password: 'wrongpassword'\n          }, {\n            timeout: 5000,\n            validateStatus: () => true\n          });\n\n          if (response.status === 401) {\n            failedAttempts++;\n          } else if (response.status === 423 || response.status === 429) {\n            accountLocked = true;\n            break;\n          }\n        } catch (error) {\n          // Network error, continue\n        }\n      }\n\n      // Should either lock out or have reasonable protection\n      expect(accountLocked || failedAttempts < 5).toBe(true);\n      \n      if (accountLocked) {\n        console.log(`✅ Account locked after ${failedAttempts} attempts`);\n      } else {\n        console.log(`⚠️ No account lockout after ${failedAttempts} attempts`);\n      }\n    }, 60000);\n\n    it('should handle password reset securely', async () => {\n      // Test password reset request\n      const resetResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/forgot-password`, {\n        email: 'test@example.com'\n      }, {\n        timeout: 10000,\n        validateStatus: () => true\n      });\n\n      // Should not reveal whether email exists or not\n      expect(resetResponse.status).toBe(200);\n      \n      // Response should not contain sensitive information\n      const responseText = JSON.stringify(resetResponse.data);\n      expect(responseText).not.toContain('user');\n      expect(responseText).not.toContain('email');\n      expect(responseText).not.toContain('exists');\n    }, 30000);\n  });\n});\n"],"version":3}