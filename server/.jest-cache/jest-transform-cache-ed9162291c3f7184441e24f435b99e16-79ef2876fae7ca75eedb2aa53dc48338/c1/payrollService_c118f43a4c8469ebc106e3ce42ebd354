176bce7fa6a6b20646512cd875663b25
"use strict";

/* istanbul ignore next */
function cov_u5rw4oz9l() {
  var path = "/home/kim/tito/server/src/services/payroll/payrollService.ts";
  var hash = "1fa4cfb7db4daebe1126d1da889ff419f6dd8696";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/payroll/payrollService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 22
        },
        end: {
          line: 37,
          column: 1
        }
      },
      "36": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 62
        }
      },
      "37": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 38,
          column: 62
        }
      },
      "38": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 32
        }
      },
      "39": {
        start: {
          line: 40,
          column: 24
        },
        end: {
          line: 40,
          column: 69
        }
      },
      "40": {
        start: {
          line: 41,
          column: 24
        },
        end: {
          line: 41,
          column: 69
        }
      },
      "41": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 42,
          column: 75
        }
      },
      "42": {
        start: {
          line: 43,
          column: 24
        },
        end: {
          line: 43,
          column: 69
        }
      },
      "43": {
        start: {
          line: 44,
          column: 35
        },
        end: {
          line: 44,
          column: 91
        }
      },
      "44": {
        start: {
          line: 45,
          column: 22
        },
        end: {
          line: 45,
          column: 65
        }
      },
      "45": {
        start: {
          line: 46,
          column: 26
        },
        end: {
          line: 46,
          column: 73
        }
      },
      "46": {
        start: {
          line: 47,
          column: 19
        },
        end: {
          line: 47,
          column: 54
        }
      },
      "47": {
        start: {
          line: 48,
          column: 19
        },
        end: {
          line: 48,
          column: 51
        }
      },
      "48": {
        start: {
          line: 49,
          column: 24
        },
        end: {
          line: 49,
          column: 61
        }
      },
      "49": {
        start: {
          line: 51,
          column: 28
        },
        end: {
          line: 51,
          column: 80
        }
      },
      "50": {
        start: {
          line: 54,
          column: 17
        },
        end: {
          line: 54,
          column: 63
        }
      },
      "51": {
        start: {
          line: 55,
          column: 36
        },
        end: {
          line: 55,
          column: 84
        }
      },
      "52": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "53": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 62,
          column: 13
        }
      },
      "54": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 70
        }
      },
      "55": {
        start: {
          line: 64,
          column: 39
        },
        end: {
          line: 64,
          column: 127
        }
      },
      "56": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "57": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 80
        }
      },
      "58": {
        start: {
          line: 68,
          column: 27
        },
        end: {
          line: 68,
          column: 80
        }
      },
      "59": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 117
        }
      },
      "60": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 26
        }
      },
      "61": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 100
        }
      },
      "62": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 24
        }
      },
      "63": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "64": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 76
        }
      },
      "65": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 102
        }
      },
      "66": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 24
        }
      },
      "67": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "68": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 73
        }
      },
      "69": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 97
        }
      },
      "70": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 24
        }
      },
      "71": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "72": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 77
        }
      },
      "73": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 104
        }
      },
      "74": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 24
        }
      },
      "75": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "76": {
        start: {
          line: 107,
          column: 28
        },
        end: {
          line: 107,
          column: 92
        }
      },
      "77": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "78": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 86
        }
      },
      "79": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 71
        }
      },
      "80": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 98
        }
      },
      "81": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 24
        }
      },
      "82": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "83": {
        start: {
          line: 121,
          column: 29
        },
        end: {
          line: 121,
          column: 91
        }
      },
      "84": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 124,
          column: 13
        }
      },
      "85": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 54
        }
      },
      "86": {
        start: {
          line: 126,
          column: 27
        },
        end: {
          line: 126,
          column: 93
        }
      },
      "87": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "88": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 60
        }
      },
      "89": {
        start: {
          line: 131,
          column: 30
        },
        end: {
          line: 131,
          column: 57
        }
      },
      "90": {
        start: {
          line: 132,
          column: 28
        },
        end: {
          line: 132,
          column: 53
        }
      },
      "91": {
        start: {
          line: 133,
          column: 40
        },
        end: {
          line: 133,
          column: 85
        }
      },
      "92": {
        start: {
          line: 134,
          column: 34
        },
        end: {
          line: 134,
          column: 57
        }
      },
      "93": {
        start: {
          line: 137,
          column: 35
        },
        end: {
          line: 137,
          column: 118
        }
      },
      "94": {
        start: {
          line: 138,
          column: 37
        },
        end: {
          line: 138,
          column: 68
        }
      },
      "95": {
        start: {
          line: 139,
          column: 38
        },
        end: {
          line: 139,
          column: 70
        }
      },
      "96": {
        start: {
          line: 140,
          column: 39
        },
        end: {
          line: 140,
          column: 72
        }
      },
      "97": {
        start: {
          line: 141,
          column: 35
        },
        end: {
          line: 141,
          column: 64
        }
      },
      "98": {
        start: {
          line: 143,
          column: 35
        },
        end: {
          line: 143,
          column: 95
        }
      },
      "99": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 155,
          column: 15
        }
      },
      "100": {
        start: {
          line: 157,
          column: 31
        },
        end: {
          line: 157,
          column: 64
        }
      },
      "101": {
        start: {
          line: 159,
          column: 31
        },
        end: {
          line: 159,
          column: 57
        }
      },
      "102": {
        start: {
          line: 161,
          column: 35
        },
        end: {
          line: 161,
          column: 62
        }
      },
      "103": {
        start: {
          line: 163,
          column: 46
        },
        end: {
          line: 163,
          column: 141
        }
      },
      "104": {
        start: {
          line: 165,
          column: 39
        },
        end: {
          line: 165,
          column: 41
        }
      },
      "105": {
        start: {
          line: 166,
          column: 42
        },
        end: {
          line: 166,
          column: 43
        }
      },
      "106": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 180,
          column: 13
        }
      },
      "107": {
        start: {
          line: 169,
          column: 38
        },
        end: {
          line: 169,
          column: 83
        }
      },
      "108": {
        start: {
          line: 170,
          column: 41
        },
        end: {
          line: 170,
          column: 79
        }
      },
      "109": {
        start: {
          line: 171,
          column: 40
        },
        end: {
          line: 171,
          column: 81
        }
      },
      "110": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 179,
          column: 17
        }
      },
      "111": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 177,
          column: 23
        }
      },
      "112": {
        start: {
          line: 178,
          column: 20
        },
        end: {
          line: 178,
          column: 63
        }
      },
      "113": {
        start: {
          line: 182,
          column: 37
        },
        end: {
          line: 182,
          column: 114
        }
      },
      "114": {
        start: {
          line: 183,
          column: 29
        },
        end: {
          line: 183,
          column: 31
        }
      },
      "115": {
        start: {
          line: 184,
          column: 32
        },
        end: {
          line: 184,
          column: 33
        }
      },
      "116": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 192,
          column: 13
        }
      },
      "117": {
        start: {
          line: 186,
          column: 38
        },
        end: {
          line: 186,
          column: 65
        }
      },
      "118": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 190,
          column: 19
        }
      },
      "119": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 191,
          column: 47
        }
      },
      "120": {
        start: {
          line: 195,
          column: 35
        },
        end: {
          line: 195,
          column: 68
        }
      },
      "121": {
        start: {
          line: 196,
          column: 29
        },
        end: {
          line: 196,
          column: 98
        }
      },
      "122": {
        start: {
          line: 198,
          column: 27
        },
        end: {
          line: 198,
          column: 94
        }
      },
      "123": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 212,
          column: 15
        }
      },
      "124": {
        start: {
          line: 213,
          column: 32
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "125": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 242,
          column: 15
        }
      },
      "126": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 31
        }
      },
      "127": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 250,
          column: 15
        }
      },
      "128": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 24
        }
      },
      "129": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "130": {
        start: {
          line: 257,
          column: 30
        },
        end: {
          line: 259,
          column: 78
        }
      },
      "131": {
        start: {
          line: 260,
          column: 28
        },
        end: {
          line: 260,
          column: 30
        }
      },
      "132": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 336,
          column: 13
        }
      },
      "133": {
        start: {
          line: 263,
          column: 36
        },
        end: {
          line: 263,
          column: 101
        }
      },
      "134": {
        start: {
          line: 265,
          column: 39
        },
        end: {
          line: 265,
          column: 133
        }
      },
      "135": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 307,
          column: 17
        }
      },
      "136": {
        start: {
          line: 268,
          column: 42
        },
        end: {
          line: 282,
          column: 22
        }
      },
      "137": {
        start: {
          line: 283,
          column: 20
        },
        end: {
          line: 285,
          column: 21
        }
      },
      "138": {
        start: {
          line: 284,
          column: 24
        },
        end: {
          line: 284,
          column: 52
        }
      },
      "139": {
        start: {
          line: 289,
          column: 38
        },
        end: {
          line: 305,
          column: 22
        }
      },
      "140": {
        start: {
          line: 306,
          column: 20
        },
        end: {
          line: 306,
          column: 44
        }
      },
      "141": {
        start: {
          line: 309,
          column: 31
        },
        end: {
          line: 309,
          column: 58
        }
      },
      "142": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 335,
          column: 17
        }
      },
      "143": {
        start: {
          line: 312,
          column: 20
        },
        end: {
          line: 312,
          column: 100
        }
      },
      "144": {
        start: {
          line: 314,
          column: 20
        },
        end: {
          line: 334,
          column: 21
        }
      },
      "145": {
        start: {
          line: 316,
          column: 46
        },
        end: {
          line: 316,
          column: 113
        }
      },
      "146": {
        start: {
          line: 317,
          column: 24
        },
        end: {
          line: 333,
          column: 25
        }
      },
      "147": {
        start: {
          line: 318,
          column: 28
        },
        end: {
          line: 323,
          column: 31
        }
      },
      "148": {
        start: {
          line: 325,
          column: 62
        },
        end: {
          line: 325,
          column: 152
        }
      },
      "149": {
        start: {
          line: 326,
          column: 44
        },
        end: {
          line: 326,
          column: 121
        }
      },
      "150": {
        start: {
          line: 326,
          column: 80
        },
        end: {
          line: 326,
          column: 120
        }
      },
      "151": {
        start: {
          line: 327,
          column: 28
        },
        end: {
          line: 332,
          column: 29
        }
      },
      "152": {
        start: {
          line: 328,
          column: 32
        },
        end: {
          line: 331,
          column: 35
        }
      },
      "153": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 340,
          column: 15
        }
      },
      "154": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 27
        }
      },
      "155": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 347,
          column: 15
        }
      },
      "156": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 24
        }
      },
      "157": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 358,
          column: 9
        }
      },
      "158": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 88
        }
      },
      "159": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 102
        }
      },
      "160": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 24
        }
      },
      "161": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 383,
          column: 9
        }
      },
      "162": {
        start: {
          line: 365,
          column: 34
        },
        end: {
          line: 365,
          column: 103
        }
      },
      "163": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 368,
          column: 13
        }
      },
      "164": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 367,
          column: 60
        }
      },
      "165": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 373,
          column: 15
        }
      },
      "166": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 33
        }
      },
      "167": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 381,
          column: 15
        }
      },
      "168": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 382,
          column: 24
        }
      },
      "169": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 406,
          column: 9
        }
      },
      "170": {
        start: {
          line: 390,
          column: 34
        },
        end: {
          line: 390,
          column: 116
        }
      },
      "171": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 393,
          column: 13
        }
      },
      "172": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 392,
          column: 60
        }
      },
      "173": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 397,
          column: 15
        }
      },
      "174": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 33
        }
      },
      "175": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 404,
          column: 15
        }
      },
      "176": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 24
        }
      },
      "177": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 457,
          column: 9
        }
      },
      "178": {
        start: {
          line: 413,
          column: 32
        },
        end: {
          line: 413,
          column: 114
        }
      },
      "179": {
        start: {
          line: 413,
          column: 67
        },
        end: {
          line: 413,
          column: 113
        }
      },
      "180": {
        start: {
          line: 414,
          column: 25
        },
        end: {
          line: 414,
          column: 34
        }
      },
      "181": {
        start: {
          line: 415,
          column: 30
        },
        end: {
          line: 415,
          column: 32
        }
      },
      "182": {
        start: {
          line: 416,
          column: 27
        },
        end: {
          line: 416,
          column: 29
        }
      },
      "183": {
        start: {
          line: 417,
          column: 29
        },
        end: {
          line: 417,
          column: 30
        }
      },
      "184": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 422,
          column: 13
        }
      },
      "185": {
        start: {
          line: 419,
          column: 16
        },
        end: {
          line: 419,
          column: 75
        }
      },
      "186": {
        start: {
          line: 420,
          column: 16
        },
        end: {
          line: 420,
          column: 46
        }
      },
      "187": {
        start: {
          line: 421,
          column: 16
        },
        end: {
          line: 421,
          column: 29
        }
      },
      "188": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 428,
          column: 13
        }
      },
      "189": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 424,
          column: 68
        }
      },
      "190": {
        start: {
          line: 425,
          column: 16
        },
        end: {
          line: 425,
          column: 113
        }
      },
      "191": {
        start: {
          line: 426,
          column: 16
        },
        end: {
          line: 426,
          column: 50
        }
      },
      "192": {
        start: {
          line: 427,
          column: 16
        },
        end: {
          line: 427,
          column: 29
        }
      },
      "193": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 434,
          column: 13
        }
      },
      "194": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 430,
          column: 92
        }
      },
      "195": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 431,
          column: 59
        }
      },
      "196": {
        start: {
          line: 432,
          column: 16
        },
        end: {
          line: 432,
          column: 47
        }
      },
      "197": {
        start: {
          line: 433,
          column: 16
        },
        end: {
          line: 433,
          column: 29
        }
      },
      "198": {
        start: {
          line: 435,
          column: 32
        },
        end: {
          line: 439,
          column: 7
        }
      },
      "199": {
        start: {
          line: 440,
          column: 27
        },
        end: {
          line: 440,
          column: 64
        }
      },
      "200": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 444,
          column: 15
        }
      },
      "201": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 448,
          column: 13
        }
      },
      "202": {
        start: {
          line: 447,
          column: 16
        },
        end: {
          line: 447,
          column: 75
        }
      },
      "203": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 449,
          column: 58
        }
      },
      "204": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 455,
          column: 15
        }
      },
      "205": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 456,
          column: 24
        }
      },
      "206": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 487,
          column: 9
        }
      },
      "207": {
        start: {
          line: 464,
          column: 32
        },
        end: {
          line: 464,
          column: 114
        }
      },
      "208": {
        start: {
          line: 464,
          column: 67
        },
        end: {
          line: 464,
          column: 113
        }
      },
      "209": {
        start: {
          line: 465,
          column: 25
        },
        end: {
          line: 465,
          column: 34
        }
      },
      "210": {
        start: {
          line: 467,
          column: 31
        },
        end: {
          line: 473,
          column: 7
        }
      },
      "211": {
        start: {
          line: 474,
          column: 27
        },
        end: {
          line: 474,
          column: 67
        }
      },
      "212": {
        start: {
          line: 475,
          column: 52
        },
        end: {
          line: 475,
          column: 66
        }
      },
      "213": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 480,
          column: 13
        }
      },
      "214": {
        start: {
          line: 478,
          column: 16
        },
        end: {
          line: 478,
          column: 59
        }
      },
      "215": {
        start: {
          line: 479,
          column: 16
        },
        end: {
          line: 479,
          column: 106
        }
      },
      "216": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 486,
          column: 15
        }
      },
      "217": {
        start: {
          line: 493,
          column: 8
        },
        end: {
          line: 523,
          column: 9
        }
      },
      "218": {
        start: {
          line: 495,
          column: 32
        },
        end: {
          line: 498,
          column: 14
        }
      },
      "219": {
        start: {
          line: 500,
          column: 35
        },
        end: {
          line: 500,
          column: 37
        }
      },
      "220": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 506,
          column: 13
        }
      },
      "221": {
        start: {
          line: 502,
          column: 38
        },
        end: {
          line: 502,
          column: 108
        }
      },
      "222": {
        start: {
          line: 503,
          column: 16
        },
        end: {
          line: 505,
          column: 17
        }
      },
      "223": {
        start: {
          line: 504,
          column: 20
        },
        end: {
          line: 504,
          column: 55
        }
      },
      "224": {
        start: {
          line: 507,
          column: 12
        },
        end: {
          line: 512,
          column: 15
        }
      },
      "225": {
        start: {
          line: 513,
          column: 12
        },
        end: {
          line: 513,
          column: 34
        }
      },
      "226": {
        start: {
          line: 516,
          column: 12
        },
        end: {
          line: 521,
          column: 15
        }
      },
      "227": {
        start: {
          line: 522,
          column: 12
        },
        end: {
          line: 522,
          column: 24
        }
      },
      "228": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 573,
          column: 9
        }
      },
      "229": {
        start: {
          line: 530,
          column: 12
        },
        end: {
          line: 533,
          column: 15
        }
      },
      "230": {
        start: {
          line: 535,
          column: 36
        },
        end: {
          line: 538,
          column: 14
        }
      },
      "231": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 544,
          column: 13
        }
      },
      "232": {
        start: {
          line: 541,
          column: 16
        },
        end: {
          line: 541,
          column: 96
        }
      },
      "233": {
        start: {
          line: 543,
          column: 16
        },
        end: {
          line: 543,
          column: 75
        }
      },
      "234": {
        start: {
          line: 545,
          column: 12
        },
        end: {
          line: 549,
          column: 15
        }
      },
      "235": {
        start: {
          line: 551,
          column: 12
        },
        end: {
          line: 556,
          column: 13
        }
      },
      "236": {
        start: {
          line: 552,
          column: 51
        },
        end: {
          line: 552,
          column: 136
        }
      },
      "237": {
        start: {
          line: 552,
          column: 86
        },
        end: {
          line: 552,
          column: 135
        }
      },
      "238": {
        start: {
          line: 553,
          column: 47
        },
        end: {
          line: 553,
          column: 75
        }
      },
      "239": {
        start: {
          line: 554,
          column: 16
        },
        end: {
          line: 554,
          column: 91
        }
      },
      "240": {
        start: {
          line: 555,
          column: 16
        },
        end: {
          line: 555,
          column: 103
        }
      },
      "241": {
        start: {
          line: 558,
          column: 31
        },
        end: {
          line: 558,
          column: 95
        }
      },
      "242": {
        start: {
          line: 559,
          column: 12
        },
        end: {
          line: 563,
          column: 15
        }
      },
      "243": {
        start: {
          line: 564,
          column: 12
        },
        end: {
          line: 564,
          column: 30
        }
      },
      "244": {
        start: {
          line: 567,
          column: 12
        },
        end: {
          line: 571,
          column: 15
        }
      },
      "245": {
        start: {
          line: 572,
          column: 12
        },
        end: {
          line: 572,
          column: 24
        }
      },
      "246": {
        start: {
          line: 576,
          column: 8
        },
        end: {
          line: 582,
          column: 9
        }
      },
      "247": {
        start: {
          line: 577,
          column: 12
        },
        end: {
          line: 577,
          column: 73
        }
      },
      "248": {
        start: {
          line: 580,
          column: 12
        },
        end: {
          line: 580,
          column: 97
        }
      },
      "249": {
        start: {
          line: 581,
          column: 12
        },
        end: {
          line: 581,
          column: 24
        }
      },
      "250": {
        start: {
          line: 585,
          column: 8
        },
        end: {
          line: 591,
          column: 9
        }
      },
      "251": {
        start: {
          line: 586,
          column: 12
        },
        end: {
          line: 586,
          column: 77
        }
      },
      "252": {
        start: {
          line: 589,
          column: 12
        },
        end: {
          line: 589,
          column: 104
        }
      },
      "253": {
        start: {
          line: 590,
          column: 12
        },
        end: {
          line: 590,
          column: 24
        }
      },
      "254": {
        start: {
          line: 594,
          column: 8
        },
        end: {
          line: 639,
          column: 9
        }
      },
      "255": {
        start: {
          line: 595,
          column: 27
        },
        end: {
          line: 595,
          column: 93
        }
      },
      "256": {
        start: {
          line: 596,
          column: 12
        },
        end: {
          line: 598,
          column: 13
        }
      },
      "257": {
        start: {
          line: 597,
          column: 16
        },
        end: {
          line: 597,
          column: 60
        }
      },
      "258": {
        start: {
          line: 599,
          column: 28
        },
        end: {
          line: 599,
          column: 105
        }
      },
      "259": {
        start: {
          line: 600,
          column: 35
        },
        end: {
          line: 600,
          column: 49
        }
      },
      "260": {
        start: {
          line: 601,
          column: 34
        },
        end: {
          line: 601,
          column: 92
        }
      },
      "261": {
        start: {
          line: 601,
          column: 66
        },
        end: {
          line: 601,
          column: 88
        }
      },
      "262": {
        start: {
          line: 602,
          column: 34
        },
        end: {
          line: 602,
          column: 35
        }
      },
      "263": {
        start: {
          line: 603,
          column: 35
        },
        end: {
          line: 603,
          column: 36
        }
      },
      "264": {
        start: {
          line: 604,
          column: 33
        },
        end: {
          line: 604,
          column: 34
        }
      },
      "265": {
        start: {
          line: 605,
          column: 12
        },
        end: {
          line: 615,
          column: 13
        }
      },
      "266": {
        start: {
          line: 606,
          column: 35
        },
        end: {
          line: 606,
          column: 112
        }
      },
      "267": {
        start: {
          line: 607,
          column: 41
        },
        end: {
          line: 607,
          column: 105
        }
      },
      "268": {
        start: {
          line: 607,
          column: 79
        },
        end: {
          line: 607,
          column: 101
        }
      },
      "269": {
        start: {
          line: 608,
          column: 16
        },
        end: {
          line: 608,
          column: 52
        }
      },
      "270": {
        start: {
          line: 609,
          column: 16
        },
        end: {
          line: 614,
          column: 17
        }
      },
      "271": {
        start: {
          line: 610,
          column: 20
        },
        end: {
          line: 610,
          column: 39
        }
      },
      "272": {
        start: {
          line: 613,
          column: 20
        },
        end: {
          line: 613,
          column: 37
        }
      },
      "273": {
        start: {
          line: 616,
          column: 32
        },
        end: {
          line: 616,
          column: 63
        }
      },
      "274": {
        start: {
          line: 617,
          column: 28
        },
        end: {
          line: 625,
          column: 13
        }
      },
      "275": {
        start: {
          line: 626,
          column: 12
        },
        end: {
          line: 630,
          column: 15
        }
      },
      "276": {
        start: {
          line: 631,
          column: 12
        },
        end: {
          line: 631,
          column: 27
        }
      },
      "277": {
        start: {
          line: 634,
          column: 12
        },
        end: {
          line: 637,
          column: 15
        }
      },
      "278": {
        start: {
          line: 638,
          column: 12
        },
        end: {
          line: 638,
          column: 24
        }
      },
      "279": {
        start: {
          line: 642,
          column: 8
        },
        end: {
          line: 656,
          column: 9
        }
      },
      "280": {
        start: {
          line: 643,
          column: 27
        },
        end: {
          line: 643,
          column: 109
        }
      },
      "281": {
        start: {
          line: 644,
          column: 12
        },
        end: {
          line: 646,
          column: 13
        }
      },
      "282": {
        start: {
          line: 645,
          column: 16
        },
        end: {
          line: 645,
          column: 91
        }
      },
      "283": {
        start: {
          line: 647,
          column: 12
        },
        end: {
          line: 647,
          column: 26
        }
      },
      "284": {
        start: {
          line: 650,
          column: 12
        },
        end: {
          line: 654,
          column: 15
        }
      },
      "285": {
        start: {
          line: 655,
          column: 12
        },
        end: {
          line: 655,
          column: 24
        }
      },
      "286": {
        start: {
          line: 659,
          column: 8
        },
        end: {
          line: 672,
          column: 9
        }
      },
      "287": {
        start: {
          line: 660,
          column: 27
        },
        end: {
          line: 660,
          column: 104
        }
      },
      "288": {
        start: {
          line: 661,
          column: 12
        },
        end: {
          line: 663,
          column: 13
        }
      },
      "289": {
        start: {
          line: 662,
          column: 16
        },
        end: {
          line: 662,
          column: 85
        }
      },
      "290": {
        start: {
          line: 664,
          column: 12
        },
        end: {
          line: 664,
          column: 26
        }
      },
      "291": {
        start: {
          line: 667,
          column: 12
        },
        end: {
          line: 670,
          column: 15
        }
      },
      "292": {
        start: {
          line: 671,
          column: 12
        },
        end: {
          line: 671,
          column: 24
        }
      },
      "293": {
        start: {
          line: 675,
          column: 8
        },
        end: {
          line: 691,
          column: 9
        }
      },
      "294": {
        start: {
          line: 676,
          column: 28
        },
        end: {
          line: 676,
          column: 96
        }
      },
      "295": {
        start: {
          line: 677,
          column: 12
        },
        end: {
          line: 682,
          column: 13
        }
      },
      "296": {
        start: {
          line: 678,
          column: 16
        },
        end: {
          line: 678,
          column: 57
        }
      },
      "297": {
        start: {
          line: 681,
          column: 16
        },
        end: {
          line: 681,
          column: 57
        }
      },
      "298": {
        start: {
          line: 685,
          column: 12
        },
        end: {
          line: 689,
          column: 15
        }
      },
      "299": {
        start: {
          line: 690,
          column: 12
        },
        end: {
          line: 690,
          column: 24
        }
      },
      "300": {
        start: {
          line: 694,
          column: 24
        },
        end: {
          line: 706,
          column: 9
        }
      },
      "301": {
        start: {
          line: 707,
          column: 21
        },
        end: {
          line: 719,
          column: 10
        }
      },
      "302": {
        start: {
          line: 707,
          column: 43
        },
        end: {
          line: 719,
          column: 9
        }
      },
      "303": {
        start: {
          line: 720,
          column: 27
        },
        end: {
          line: 722,
          column: 23
        }
      },
      "304": {
        start: {
          line: 721,
          column: 24
        },
        end: {
          line: 721,
          column: 64
        }
      },
      "305": {
        start: {
          line: 721,
          column: 41
        },
        end: {
          line: 721,
          column: 53
        }
      },
      "306": {
        start: {
          line: 723,
          column: 8
        },
        end: {
          line: 723,
          column: 26
        }
      },
      "307": {
        start: {
          line: 728,
          column: 24
        },
        end: {
          line: 728,
          column: 148
        }
      },
      "308": {
        start: {
          line: 728,
          column: 46
        },
        end: {
          line: 728,
          column: 136
        }
      },
      "309": {
        start: {
          line: 729,
          column: 8
        },
        end: {
          line: 729,
          column: 45
        }
      },
      "310": {
        start: {
          line: 732,
          column: 8
        },
        end: {
          line: 754,
          column: 9
        }
      },
      "311": {
        start: {
          line: 734,
          column: 35
        },
        end: {
          line: 734,
          column: 89
        }
      },
      "312": {
        start: {
          line: 736,
          column: 39
        },
        end: {
          line: 736,
          column: 96
        }
      },
      "313": {
        start: {
          line: 737,
          column: 33
        },
        end: {
          line: 737,
          column: 56
        }
      },
      "314": {
        start: {
          line: 739,
          column: 37
        },
        end: {
          line: 739,
          column: 106
        }
      },
      "315": {
        start: {
          line: 741,
          column: 35
        },
        end: {
          line: 741,
          column: 100
        }
      },
      "316": {
        start: {
          line: 742,
          column: 12
        },
        end: {
          line: 747,
          column: 14
        }
      },
      "317": {
        start: {
          line: 750,
          column: 12
        },
        end: {
          line: 752,
          column: 15
        }
      },
      "318": {
        start: {
          line: 753,
          column: 12
        },
        end: {
          line: 753,
          column: 24
        }
      },
      "319": {
        start: {
          line: 758,
          column: 8
        },
        end: {
          line: 764,
          column: 9
        }
      },
      "320": {
        start: {
          line: 759,
          column: 12
        },
        end: {
          line: 759,
          column: 73
        }
      },
      "321": {
        start: {
          line: 762,
          column: 12
        },
        end: {
          line: 762,
          column: 100
        }
      },
      "322": {
        start: {
          line: 763,
          column: 12
        },
        end: {
          line: 763,
          column: 24
        }
      },
      "323": {
        start: {
          line: 767,
          column: 8
        },
        end: {
          line: 773,
          column: 9
        }
      },
      "324": {
        start: {
          line: 768,
          column: 12
        },
        end: {
          line: 768,
          column: 76
        }
      },
      "325": {
        start: {
          line: 771,
          column: 12
        },
        end: {
          line: 771,
          column: 102
        }
      },
      "326": {
        start: {
          line: 772,
          column: 12
        },
        end: {
          line: 772,
          column: 24
        }
      },
      "327": {
        start: {
          line: 776,
          column: 8
        },
        end: {
          line: 782,
          column: 9
        }
      },
      "328": {
        start: {
          line: 777,
          column: 12
        },
        end: {
          line: 777,
          column: 77
        }
      },
      "329": {
        start: {
          line: 780,
          column: 12
        },
        end: {
          line: 780,
          column: 104
        }
      },
      "330": {
        start: {
          line: 781,
          column: 12
        },
        end: {
          line: 781,
          column: 24
        }
      },
      "331": {
        start: {
          line: 785,
          column: 8
        },
        end: {
          line: 791,
          column: 9
        }
      },
      "332": {
        start: {
          line: 786,
          column: 12
        },
        end: {
          line: 786,
          column: 71
        }
      },
      "333": {
        start: {
          line: 789,
          column: 12
        },
        end: {
          line: 789,
          column: 98
        }
      },
      "334": {
        start: {
          line: 790,
          column: 12
        },
        end: {
          line: 790,
          column: 24
        }
      },
      "335": {
        start: {
          line: 795,
          column: 8
        },
        end: {
          line: 801,
          column: 9
        }
      },
      "336": {
        start: {
          line: 796,
          column: 12
        },
        end: {
          line: 796,
          column: 69
        }
      },
      "337": {
        start: {
          line: 799,
          column: 12
        },
        end: {
          line: 799,
          column: 98
        }
      },
      "338": {
        start: {
          line: 800,
          column: 12
        },
        end: {
          line: 800,
          column: 24
        }
      },
      "339": {
        start: {
          line: 804,
          column: 8
        },
        end: {
          line: 810,
          column: 9
        }
      },
      "340": {
        start: {
          line: 805,
          column: 12
        },
        end: {
          line: 805,
          column: 72
        }
      },
      "341": {
        start: {
          line: 808,
          column: 12
        },
        end: {
          line: 808,
          column: 100
        }
      },
      "342": {
        start: {
          line: 809,
          column: 12
        },
        end: {
          line: 809,
          column: 24
        }
      },
      "343": {
        start: {
          line: 813,
          column: 8
        },
        end: {
          line: 819,
          column: 9
        }
      },
      "344": {
        start: {
          line: 814,
          column: 12
        },
        end: {
          line: 814,
          column: 73
        }
      },
      "345": {
        start: {
          line: 817,
          column: 12
        },
        end: {
          line: 817,
          column: 102
        }
      },
      "346": {
        start: {
          line: 818,
          column: 12
        },
        end: {
          line: 818,
          column: 24
        }
      },
      "347": {
        start: {
          line: 822,
          column: 8
        },
        end: {
          line: 828,
          column: 9
        }
      },
      "348": {
        start: {
          line: 823,
          column: 12
        },
        end: {
          line: 823,
          column: 67
        }
      },
      "349": {
        start: {
          line: 826,
          column: 12
        },
        end: {
          line: 826,
          column: 96
        }
      },
      "350": {
        start: {
          line: 827,
          column: 12
        },
        end: {
          line: 827,
          column: 24
        }
      },
      "351": {
        start: {
          line: 832,
          column: 8
        },
        end: {
          line: 838,
          column: 9
        }
      },
      "352": {
        start: {
          line: 833,
          column: 12
        },
        end: {
          line: 833,
          column: 98
        }
      },
      "353": {
        start: {
          line: 836,
          column: 12
        },
        end: {
          line: 836,
          column: 114
        }
      },
      "354": {
        start: {
          line: 837,
          column: 12
        },
        end: {
          line: 837,
          column: 24
        }
      },
      "355": {
        start: {
          line: 841,
          column: 8
        },
        end: {
          line: 847,
          column: 9
        }
      },
      "356": {
        start: {
          line: 842,
          column: 12
        },
        end: {
          line: 842,
          column: 95
        }
      },
      "357": {
        start: {
          line: 845,
          column: 12
        },
        end: {
          line: 845,
          column: 112
        }
      },
      "358": {
        start: {
          line: 846,
          column: 12
        },
        end: {
          line: 846,
          column: 24
        }
      },
      "359": {
        start: {
          line: 850,
          column: 8
        },
        end: {
          line: 856,
          column: 9
        }
      },
      "360": {
        start: {
          line: 851,
          column: 12
        },
        end: {
          line: 851,
          column: 99
        }
      },
      "361": {
        start: {
          line: 854,
          column: 12
        },
        end: {
          line: 854,
          column: 116
        }
      },
      "362": {
        start: {
          line: 855,
          column: 12
        },
        end: {
          line: 855,
          column: 24
        }
      },
      "363": {
        start: {
          line: 859,
          column: 8
        },
        end: {
          line: 865,
          column: 9
        }
      },
      "364": {
        start: {
          line: 860,
          column: 12
        },
        end: {
          line: 860,
          column: 93
        }
      },
      "365": {
        start: {
          line: 863,
          column: 12
        },
        end: {
          line: 863,
          column: 110
        }
      },
      "366": {
        start: {
          line: 864,
          column: 12
        },
        end: {
          line: 864,
          column: 24
        }
      },
      "367": {
        start: {
          line: 869,
          column: 8
        },
        end: {
          line: 875,
          column: 9
        }
      },
      "368": {
        start: {
          line: 870,
          column: 12
        },
        end: {
          line: 870,
          column: 80
        }
      },
      "369": {
        start: {
          line: 873,
          column: 12
        },
        end: {
          line: 873,
          column: 104
        }
      },
      "370": {
        start: {
          line: 874,
          column: 12
        },
        end: {
          line: 874,
          column: 24
        }
      },
      "371": {
        start: {
          line: 878,
          column: 8
        },
        end: {
          line: 884,
          column: 9
        }
      },
      "372": {
        start: {
          line: 879,
          column: 12
        },
        end: {
          line: 879,
          column: 77
        }
      },
      "373": {
        start: {
          line: 882,
          column: 12
        },
        end: {
          line: 882,
          column: 102
        }
      },
      "374": {
        start: {
          line: 883,
          column: 12
        },
        end: {
          line: 883,
          column: 24
        }
      },
      "375": {
        start: {
          line: 887,
          column: 8
        },
        end: {
          line: 893,
          column: 9
        }
      },
      "376": {
        start: {
          line: 888,
          column: 12
        },
        end: {
          line: 888,
          column: 81
        }
      },
      "377": {
        start: {
          line: 891,
          column: 12
        },
        end: {
          line: 891,
          column: 106
        }
      },
      "378": {
        start: {
          line: 892,
          column: 12
        },
        end: {
          line: 892,
          column: 24
        }
      },
      "379": {
        start: {
          line: 896,
          column: 8
        },
        end: {
          line: 902,
          column: 9
        }
      },
      "380": {
        start: {
          line: 897,
          column: 12
        },
        end: {
          line: 897,
          column: 75
        }
      },
      "381": {
        start: {
          line: 900,
          column: 12
        },
        end: {
          line: 900,
          column: 100
        }
      },
      "382": {
        start: {
          line: 901,
          column: 12
        },
        end: {
          line: 901,
          column: 24
        }
      },
      "383": {
        start: {
          line: 906,
          column: 8
        },
        end: {
          line: 981,
          column: 9
        }
      },
      "384": {
        start: {
          line: 907,
          column: 27
        },
        end: {
          line: 907,
          column: 29
        }
      },
      "385": {
        start: {
          line: 908,
          column: 32
        },
        end: {
          line: 908,
          column: 34
        }
      },
      "386": {
        start: {
          line: 909,
          column: 12
        },
        end: {
          line: 964,
          column: 13
        }
      },
      "387": {
        start: {
          line: 909,
          column: 25
        },
        end: {
          line: 909,
          column: 26
        }
      },
      "388": {
        start: {
          line: 910,
          column: 28
        },
        end: {
          line: 910,
          column: 38
        }
      },
      "389": {
        start: {
          line: 911,
          column: 16
        },
        end: {
          line: 963,
          column: 17
        }
      },
      "390": {
        start: {
          line: 913,
          column: 20
        },
        end: {
          line: 919,
          column: 21
        }
      },
      "391": {
        start: {
          line: 914,
          column: 24
        },
        end: {
          line: 917,
          column: 27
        }
      },
      "392": {
        start: {
          line: 918,
          column: 24
        },
        end: {
          line: 918,
          column: 33
        }
      },
      "393": {
        start: {
          line: 921,
          column: 37
        },
        end: {
          line: 921,
          column: 101
        }
      },
      "394": {
        start: {
          line: 922,
          column: 20
        },
        end: {
          line: 928,
          column: 21
        }
      },
      "395": {
        start: {
          line: 923,
          column: 24
        },
        end: {
          line: 926,
          column: 27
        }
      },
      "396": {
        start: {
          line: 927,
          column: 24
        },
        end: {
          line: 927,
          column: 33
        }
      },
      "397": {
        start: {
          line: 930,
          column: 40
        },
        end: {
          line: 930,
          column: 106
        }
      },
      "398": {
        start: {
          line: 931,
          column: 20
        },
        end: {
          line: 937,
          column: 21
        }
      },
      "399": {
        start: {
          line: 932,
          column: 24
        },
        end: {
          line: 935,
          column: 27
        }
      },
      "400": {
        start: {
          line: 936,
          column: 24
        },
        end: {
          line: 936,
          column: 33
        }
      },
      "401": {
        start: {
          line: 939,
          column: 43
        },
        end: {
          line: 939,
          column: 192
        }
      },
      "402": {
        start: {
          line: 940,
          column: 20
        },
        end: {
          line: 946,
          column: 21
        }
      },
      "403": {
        start: {
          line: 941,
          column: 24
        },
        end: {
          line: 944,
          column: 27
        }
      },
      "404": {
        start: {
          line: 945,
          column: 24
        },
        end: {
          line: 945,
          column: 33
        }
      },
      "405": {
        start: {
          line: 948,
          column: 40
        },
        end: {
          line: 955,
          column: 21
        }
      },
      "406": {
        start: {
          line: 956,
          column: 20
        },
        end: {
          line: 956,
          column: 50
        }
      },
      "407": {
        start: {
          line: 959,
          column: 20
        },
        end: {
          line: 962,
          column: 23
        }
      },
      "408": {
        start: {
          line: 966,
          column: 12
        },
        end: {
          line: 968,
          column: 13
        }
      },
      "409": {
        start: {
          line: 967,
          column: 16
        },
        end: {
          line: 967,
          column: 85
        }
      },
      "410": {
        start: {
          line: 969,
          column: 12
        },
        end: {
          line: 972,
          column: 15
        }
      },
      "411": {
        start: {
          line: 973,
          column: 12
        },
        end: {
          line: 976,
          column: 14
        }
      },
      "412": {
        start: {
          line: 979,
          column: 12
        },
        end: {
          line: 979,
          column: 98
        }
      },
      "413": {
        start: {
          line: 980,
          column: 12
        },
        end: {
          line: 980,
          column: 24
        }
      },
      "414": {
        start: {
          line: 985,
          column: 8
        },
        end: {
          line: 1062,
          column: 9
        }
      },
      "415": {
        start: {
          line: 986,
          column: 27
        },
        end: {
          line: 986,
          column: 29
        }
      },
      "416": {
        start: {
          line: 987,
          column: 32
        },
        end: {
          line: 987,
          column: 34
        }
      },
      "417": {
        start: {
          line: 988,
          column: 12
        },
        end: {
          line: 1045,
          column: 13
        }
      },
      "418": {
        start: {
          line: 988,
          column: 25
        },
        end: {
          line: 988,
          column: 26
        }
      },
      "419": {
        start: {
          line: 989,
          column: 28
        },
        end: {
          line: 989,
          column: 38
        }
      },
      "420": {
        start: {
          line: 990,
          column: 16
        },
        end: {
          line: 1044,
          column: 17
        }
      },
      "421": {
        start: {
          line: 992,
          column: 20
        },
        end: {
          line: 998,
          column: 21
        }
      },
      "422": {
        start: {
          line: 993,
          column: 24
        },
        end: {
          line: 996,
          column: 27
        }
      },
      "423": {
        start: {
          line: 997,
          column: 24
        },
        end: {
          line: 997,
          column: 33
        }
      },
      "424": {
        start: {
          line: 1000,
          column: 37
        },
        end: {
          line: 1000,
          column: 101
        }
      },
      "425": {
        start: {
          line: 1001,
          column: 20
        },
        end: {
          line: 1007,
          column: 21
        }
      },
      "426": {
        start: {
          line: 1002,
          column: 24
        },
        end: {
          line: 1005,
          column: 27
        }
      },
      "427": {
        start: {
          line: 1006,
          column: 24
        },
        end: {
          line: 1006,
          column: 33
        }
      },
      "428": {
        start: {
          line: 1009,
          column: 42
        },
        end: {
          line: 1009,
          column: 114
        }
      },
      "429": {
        start: {
          line: 1010,
          column: 20
        },
        end: {
          line: 1016,
          column: 21
        }
      },
      "430": {
        start: {
          line: 1011,
          column: 24
        },
        end: {
          line: 1014,
          column: 27
        }
      },
      "431": {
        start: {
          line: 1015,
          column: 24
        },
        end: {
          line: 1015,
          column: 33
        }
      },
      "432": {
        start: {
          line: 1018,
          column: 43
        },
        end: {
          line: 1018,
          column: 214
        }
      },
      "433": {
        start: {
          line: 1019,
          column: 20
        },
        end: {
          line: 1025,
          column: 21
        }
      },
      "434": {
        start: {
          line: 1020,
          column: 24
        },
        end: {
          line: 1023,
          column: 27
        }
      },
      "435": {
        start: {
          line: 1024,
          column: 24
        },
        end: {
          line: 1024,
          column: 33
        }
      },
      "436": {
        start: {
          line: 1027,
          column: 40
        },
        end: {
          line: 1036,
          column: 21
        }
      },
      "437": {
        start: {
          line: 1037,
          column: 20
        },
        end: {
          line: 1037,
          column: 50
        }
      },
      "438": {
        start: {
          line: 1040,
          column: 20
        },
        end: {
          line: 1043,
          column: 23
        }
      },
      "439": {
        start: {
          line: 1047,
          column: 12
        },
        end: {
          line: 1049,
          column: 13
        }
      },
      "440": {
        start: {
          line: 1048,
          column: 16
        },
        end: {
          line: 1048,
          column: 103
        }
      },
      "441": {
        start: {
          line: 1050,
          column: 12
        },
        end: {
          line: 1053,
          column: 15
        }
      },
      "442": {
        start: {
          line: 1054,
          column: 12
        },
        end: {
          line: 1057,
          column: 14
        }
      },
      "443": {
        start: {
          line: 1060,
          column: 12
        },
        end: {
          line: 1060,
          column: 108
        }
      },
      "444": {
        start: {
          line: 1061,
          column: 12
        },
        end: {
          line: 1061,
          column: 24
        }
      },
      "445": {
        start: {
          line: 1071,
          column: 26
        },
        end: {
          line: 1071,
          column: 27
        }
      },
      "446": {
        start: {
          line: 1072,
          column: 28
        },
        end: {
          line: 1072,
          column: 47
        }
      },
      "447": {
        start: {
          line: 1073,
          column: 8
        },
        end: {
          line: 1079,
          column: 9
        }
      },
      "448": {
        start: {
          line: 1075,
          column: 12
        },
        end: {
          line: 1077,
          column: 13
        }
      },
      "449": {
        start: {
          line: 1076,
          column: 16
        },
        end: {
          line: 1076,
          column: 30
        }
      },
      "450": {
        start: {
          line: 1078,
          column: 12
        },
        end: {
          line: 1078,
          column: 59
        }
      },
      "451": {
        start: {
          line: 1080,
          column: 8
        },
        end: {
          line: 1080,
          column: 27
        }
      },
      "452": {
        start: {
          line: 1086,
          column: 21
        },
        end: {
          line: 1086,
          column: 46
        }
      },
      "453": {
        start: {
          line: 1088,
          column: 32
        },
        end: {
          line: 1096,
          column: 5
        }
      },
      "454": {
        start: {
          line: 1097,
          column: 23
        },
        end: {
          line: 1097,
          column: 90
        }
      },
      "455": {
        start: {
          line: 1098,
          column: 34
        },
        end: {
          line: 1098,
          column: 45
        }
      },
      "456": {
        start: {
          line: 1099,
          column: 31
        },
        end: {
          line: 1099,
          column: 32
        }
      },
      "457": {
        start: {
          line: 1100,
          column: 32
        },
        end: {
          line: 1100,
          column: 33
        }
      },
      "458": {
        start: {
          line: 1101,
          column: 33
        },
        end: {
          line: 1101,
          column: 34
        }
      },
      "459": {
        start: {
          line: 1102,
          column: 29
        },
        end: {
          line: 1102,
          column: 30
        }
      },
      "460": {
        start: {
          line: 1103,
          column: 31
        },
        end: {
          line: 1103,
          column: 55
        }
      },
      "461": {
        start: {
          line: 1105,
          column: 8
        },
        end: {
          line: 1129,
          column: 9
        }
      },
      "462": {
        start: {
          line: 1106,
          column: 29
        },
        end: {
          line: 1106,
          column: 118
        }
      },
      "463": {
        start: {
          line: 1107,
          column: 32
        },
        end: {
          line: 1107,
          column: 114
        }
      },
      "464": {
        start: {
          line: 1108,
          column: 12
        },
        end: {
          line: 1108,
          column: 55
        }
      },
      "465": {
        start: {
          line: 1110,
          column: 12
        },
        end: {
          line: 1116,
          column: 13
        }
      },
      "466": {
        start: {
          line: 1111,
          column: 16
        },
        end: {
          line: 1111,
          column: 60
        }
      },
      "467": {
        start: {
          line: 1114,
          column: 16
        },
        end: {
          line: 1114,
          column: 39
        }
      },
      "468": {
        start: {
          line: 1115,
          column: 16
        },
        end: {
          line: 1115,
          column: 67
        }
      },
      "469": {
        start: {
          line: 1118,
          column: 12
        },
        end: {
          line: 1128,
          column: 15
        }
      },
      "470": {
        start: {
          line: 1130,
          column: 8
        },
        end: {
          line: 1136,
          column: 10
        }
      },
      "471": {
        start: {
          line: 1143,
          column: 8
        },
        end: {
          line: 1170,
          column: 9
        }
      },
      "472": {
        start: {
          line: 1145,
          column: 32
        },
        end: {
          line: 1145,
          column: 114
        }
      },
      "473": {
        start: {
          line: 1145,
          column: 67
        },
        end: {
          line: 1145,
          column: 113
        }
      },
      "474": {
        start: {
          line: 1146,
          column: 25
        },
        end: {
          line: 1146,
          column: 34
        }
      },
      "475": {
        start: {
          line: 1147,
          column: 37
        },
        end: {
          line: 1153,
          column: 7
        }
      },
      "476": {
        start: {
          line: 1154,
          column: 38
        },
        end: {
          line: 1154,
          column: 72
        }
      },
      "477": {
        start: {
          line: 1155,
          column: 38
        },
        end: {
          line: 1155,
          column: 40
        }
      },
      "478": {
        start: {
          line: 1157,
          column: 12
        },
        end: {
          line: 1164,
          column: 13
        }
      },
      "479": {
        start: {
          line: 1158,
          column: 32
        },
        end: {
          line: 1158,
          column: 97
        }
      },
      "480": {
        start: {
          line: 1159,
          column: 16
        },
        end: {
          line: 1162,
          column: 19
        }
      },
      "481": {
        start: {
          line: 1163,
          column: 16
        },
        end: {
          line: 1163,
          column: 120
        }
      },
      "482": {
        start: {
          line: 1165,
          column: 12
        },
        end: {
          line: 1165,
          column: 37
        }
      },
      "483": {
        start: {
          line: 1168,
          column: 12
        },
        end: {
          line: 1168,
          column: 99
        }
      },
      "484": {
        start: {
          line: 1169,
          column: 12
        },
        end: {
          line: 1169,
          column: 24
        }
      },
      "485": {
        start: {
          line: 1173,
          column: 8
        },
        end: {
          line: 1200,
          column: 9
        }
      },
      "486": {
        start: {
          line: 1174,
          column: 32
        },
        end: {
          line: 1174,
          column: 114
        }
      },
      "487": {
        start: {
          line: 1174,
          column: 67
        },
        end: {
          line: 1174,
          column: 113
        }
      },
      "488": {
        start: {
          line: 1175,
          column: 25
        },
        end: {
          line: 1175,
          column: 34
        }
      },
      "489": {
        start: {
          line: 1176,
          column: 26
        },
        end: {
          line: 1193,
          column: 7
        }
      },
      "490": {
        start: {
          line: 1194,
          column: 27
        },
        end: {
          line: 1194,
          column: 76
        }
      },
      "491": {
        start: {
          line: 1195,
          column: 12
        },
        end: {
          line: 1195,
          column: 31
        }
      },
      "492": {
        start: {
          line: 1198,
          column: 12
        },
        end: {
          line: 1198,
          column: 101
        }
      },
      "493": {
        start: {
          line: 1199,
          column: 12
        },
        end: {
          line: 1199,
          column: 24
        }
      },
      "494": {
        start: {
          line: 1208,
          column: 8
        },
        end: {
          line: 1291,
          column: 9
        }
      },
      "495": {
        start: {
          line: 1209,
          column: 32
        },
        end: {
          line: 1209,
          column: 114
        }
      },
      "496": {
        start: {
          line: 1209,
          column: 67
        },
        end: {
          line: 1209,
          column: 113
        }
      },
      "497": {
        start: {
          line: 1210,
          column: 25
        },
        end: {
          line: 1210,
          column: 34
        }
      },
      "498": {
        start: {
          line: 1212,
          column: 31
        },
        end: {
          line: 1226,
          column: 7
        }
      },
      "499": {
        start: {
          line: 1227,
          column: 27
        },
        end: {
          line: 1231,
          column: 14
        }
      },
      "500": {
        start: {
          line: 1232,
          column: 33
        },
        end: {
          line: 1232,
          column: 34
        }
      },
      "501": {
        start: {
          line: 1233,
          column: 12
        },
        end: {
          line: 1273,
          column: 13
        }
      },
      "502": {
        start: {
          line: 1234,
          column: 34
        },
        end: {
          line: 1234,
          column: 50
        }
      },
      "503": {
        start: {
          line: 1235,
          column: 34
        },
        end: {
          line: 1235,
          column: 67
        }
      },
      "504": {
        start: {
          line: 1237,
          column: 16
        },
        end: {
          line: 1244,
          column: 17
        }
      },
      "505": {
        start: {
          line: 1238,
          column: 20
        },
        end: {
          line: 1242,
          column: 23
        }
      },
      "506": {
        start: {
          line: 1243,
          column: 20
        },
        end: {
          line: 1243,
          column: 29
        }
      },
      "507": {
        start: {
          line: 1246,
          column: 42
        },
        end: {
          line: 1246,
          column: 99
        }
      },
      "508": {
        start: {
          line: 1247,
          column: 43
        },
        end: {
          line: 1247,
          column: 96
        }
      },
      "509": {
        start: {
          line: 1249,
          column: 31
        },
        end: {
          line: 1249,
          column: 40
        }
      },
      "510": {
        start: {
          line: 1250,
          column: 16
        },
        end: {
          line: 1258,
          column: 17
        }
      },
      "511": {
        start: {
          line: 1253,
          column: 20
        },
        end: {
          line: 1257,
          column: 23
        }
      },
      "512": {
        start: {
          line: 1260,
          column: 34
        },
        end: {
          line: 1260,
          column: 74
        }
      },
      "513": {
        start: {
          line: 1261,
          column: 16
        },
        end: {
          line: 1261,
          column: 44
        }
      },
      "514": {
        start: {
          line: 1262,
          column: 16
        },
        end: {
          line: 1272,
          column: 19
        }
      },
      "515": {
        start: {
          line: 1274,
          column: 12
        },
        end: {
          line: 1280,
          column: 15
        }
      },
      "516": {
        start: {
          line: 1281,
          column: 12
        },
        end: {
          line: 1281,
          column: 34
        }
      },
      "517": {
        start: {
          line: 1284,
          column: 12
        },
        end: {
          line: 1289,
          column: 15
        }
      },
      "518": {
        start: {
          line: 1290,
          column: 12
        },
        end: {
          line: 1290,
          column: 24
        }
      },
      "519": {
        start: {
          line: 1297,
          column: 8
        },
        end: {
          line: 1344,
          column: 9
        }
      },
      "520": {
        start: {
          line: 1298,
          column: 32
        },
        end: {
          line: 1298,
          column: 49
        }
      },
      "521": {
        start: {
          line: 1299,
          column: 24
        },
        end: {
          line: 1299,
          column: 55
        }
      },
      "522": {
        start: {
          line: 1300,
          column: 28
        },
        end: {
          line: 1300,
          column: 30
        }
      },
      "523": {
        start: {
          line: 1301,
          column: 12
        },
        end: {
          line: 1301,
          column: 55
        }
      },
      "524": {
        start: {
          line: 1303,
          column: 27
        },
        end: {
          line: 1303,
          column: 86
        }
      },
      "525": {
        start: {
          line: 1304,
          column: 12
        },
        end: {
          line: 1306,
          column: 13
        }
      },
      "526": {
        start: {
          line: 1305,
          column: 16
        },
        end: {
          line: 1305,
          column: 60
        }
      },
      "527": {
        start: {
          line: 1308,
          column: 27
        },
        end: {
          line: 1308,
          column: 133
        }
      },
      "528": {
        start: {
          line: 1309,
          column: 28
        },
        end: {
          line: 1309,
          column: 42
        }
      },
      "529": {
        start: {
          line: 1311,
          column: 12
        },
        end: {
          line: 1311,
          column: 75
        }
      },
      "530": {
        start: {
          line: 1312,
          column: 12
        },
        end: {
          line: 1312,
          column: 88
        }
      },
      "531": {
        start: {
          line: 1313,
          column: 12
        },
        end: {
          line: 1313,
          column: 142
        }
      },
      "532": {
        start: {
          line: 1314,
          column: 12
        },
        end: {
          line: 1314,
          column: 28
        }
      },
      "533": {
        start: {
          line: 1316,
          column: 12
        },
        end: {
          line: 1328,
          column: 13
        }
      },
      "534": {
        start: {
          line: 1317,
          column: 16
        },
        end: {
          line: 1327,
          column: 17
        }
      },
      "535": {
        start: {
          line: 1318,
          column: 20
        },
        end: {
          line: 1318,
          column: 61
        }
      },
      "536": {
        start: {
          line: 1321,
          column: 20
        },
        end: {
          line: 1325,
          column: 23
        }
      },
      "537": {
        start: {
          line: 1329,
          column: 12
        },
        end: {
          line: 1329,
          column: 22
        }
      },
      "538": {
        start: {
          line: 1330,
          column: 12
        },
        end: {
          line: 1336,
          column: 15
        }
      },
      "539": {
        start: {
          line: 1331,
          column: 16
        },
        end: {
          line: 1334,
          column: 19
        }
      },
      "540": {
        start: {
          line: 1332,
          column: 38
        },
        end: {
          line: 1332,
          column: 60
        }
      },
      "541": {
        start: {
          line: 1333,
          column: 20
        },
        end: {
          line: 1333,
          column: 39
        }
      },
      "542": {
        start: {
          line: 1335,
          column: 16
        },
        end: {
          line: 1335,
          column: 40
        }
      },
      "543": {
        start: {
          line: 1339,
          column: 12
        },
        end: {
          line: 1342,
          column: 15
        }
      },
      "544": {
        start: {
          line: 1343,
          column: 12
        },
        end: {
          line: 1343,
          column: 24
        }
      },
      "545": {
        start: {
          line: 1350,
          column: 8
        },
        end: {
          line: 1410,
          column: 9
        }
      },
      "546": {
        start: {
          line: 1351,
          column: 32
        },
        end: {
          line: 1351,
          column: 49
        }
      },
      "547": {
        start: {
          line: 1352,
          column: 24
        },
        end: {
          line: 1352,
          column: 55
        }
      },
      "548": {
        start: {
          line: 1353,
          column: 28
        },
        end: {
          line: 1353,
          column: 30
        }
      },
      "549": {
        start: {
          line: 1354,
          column: 12
        },
        end: {
          line: 1354,
          column: 55
        }
      },
      "550": {
        start: {
          line: 1356,
          column: 46
        },
        end: {
          line: 1356,
          column: 147
        }
      },
      "551": {
        start: {
          line: 1356,
          column: 81
        },
        end: {
          line: 1356,
          column: 146
        }
      },
      "552": {
        start: {
          line: 1357,
          column: 42
        },
        end: {
          line: 1357,
          column: 69
        }
      },
      "553": {
        start: {
          line: 1358,
          column: 31
        },
        end: {
          line: 1358,
          column: 84
        }
      },
      "554": {
        start: {
          line: 1359,
          column: 12
        },
        end: {
          line: 1361,
          column: 13
        }
      },
      "555": {
        start: {
          line: 1360,
          column: 16
        },
        end: {
          line: 1360,
          column: 65
        }
      },
      "556": {
        start: {
          line: 1363,
          column: 27
        },
        end: {
          line: 1363,
          column: 86
        }
      },
      "557": {
        start: {
          line: 1364,
          column: 12
        },
        end: {
          line: 1366,
          column: 13
        }
      },
      "558": {
        start: {
          line: 1365,
          column: 16
        },
        end: {
          line: 1365,
          column: 60
        }
      },
      "559": {
        start: {
          line: 1368,
          column: 27
        },
        end: {
          line: 1372,
          column: 14
        }
      },
      "560": {
        start: {
          line: 1373,
          column: 28
        },
        end: {
          line: 1373,
          column: 42
        }
      },
      "561": {
        start: {
          line: 1375,
          column: 12
        },
        end: {
          line: 1375,
          column: 86
        }
      },
      "562": {
        start: {
          line: 1376,
          column: 12
        },
        end: {
          line: 1376,
          column: 89
        }
      },
      "563": {
        start: {
          line: 1377,
          column: 12
        },
        end: {
          line: 1377,
          column: 88
        }
      },
      "564": {
        start: {
          line: 1378,
          column: 12
        },
        end: {
          line: 1378,
          column: 142
        }
      },
      "565": {
        start: {
          line: 1379,
          column: 12
        },
        end: {
          line: 1379,
          column: 28
        }
      },
      "566": {
        start: {
          line: 1381,
          column: 12
        },
        end: {
          line: 1393,
          column: 13
        }
      },
      "567": {
        start: {
          line: 1382,
          column: 16
        },
        end: {
          line: 1392,
          column: 17
        }
      },
      "568": {
        start: {
          line: 1383,
          column: 20
        },
        end: {
          line: 1383,
          column: 61
        }
      },
      "569": {
        start: {
          line: 1386,
          column: 20
        },
        end: {
          line: 1390,
          column: 23
        }
      },
      "570": {
        start: {
          line: 1394,
          column: 12
        },
        end: {
          line: 1394,
          column: 22
        }
      },
      "571": {
        start: {
          line: 1395,
          column: 12
        },
        end: {
          line: 1401,
          column: 15
        }
      },
      "572": {
        start: {
          line: 1396,
          column: 16
        },
        end: {
          line: 1399,
          column: 19
        }
      },
      "573": {
        start: {
          line: 1397,
          column: 38
        },
        end: {
          line: 1397,
          column: 60
        }
      },
      "574": {
        start: {
          line: 1398,
          column: 20
        },
        end: {
          line: 1398,
          column: 39
        }
      },
      "575": {
        start: {
          line: 1400,
          column: 16
        },
        end: {
          line: 1400,
          column: 40
        }
      },
      "576": {
        start: {
          line: 1404,
          column: 12
        },
        end: {
          line: 1408,
          column: 15
        }
      },
      "577": {
        start: {
          line: 1409,
          column: 12
        },
        end: {
          line: 1409,
          column: 24
        }
      },
      "578": {
        start: {
          line: 1416,
          column: 8
        },
        end: {
          line: 1426,
          column: 9
        }
      },
      "579": {
        start: {
          line: 1417,
          column: 12
        },
        end: {
          line: 1418,
          column: 31
        }
      },
      "580": {
        start: {
          line: 1418,
          column: 16
        },
        end: {
          line: 1418,
          column: 31
        }
      },
      "581": {
        start: {
          line: 1419,
          column: 24
        },
        end: {
          line: 1419,
          column: 38
        }
      },
      "582": {
        start: {
          line: 1420,
          column: 12
        },
        end: {
          line: 1421,
          column: 31
        }
      },
      "583": {
        start: {
          line: 1421,
          column: 16
        },
        end: {
          line: 1421,
          column: 31
        }
      },
      "584": {
        start: {
          line: 1422,
          column: 12
        },
        end: {
          line: 1422,
          column: 40
        }
      },
      "585": {
        start: {
          line: 1425,
          column: 12
        },
        end: {
          line: 1425,
          column: 27
        }
      },
      "586": {
        start: {
          line: 1432,
          column: 8
        },
        end: {
          line: 1439,
          column: 9
        }
      },
      "587": {
        start: {
          line: 1433,
          column: 12
        },
        end: {
          line: 1434,
          column: 29
        }
      },
      "588": {
        start: {
          line: 1434,
          column: 16
        },
        end: {
          line: 1434,
          column: 29
        }
      },
      "589": {
        start: {
          line: 1435,
          column: 12
        },
        end: {
          line: 1435,
          column: 55
        }
      },
      "590": {
        start: {
          line: 1438,
          column: 12
        },
        end: {
          line: 1438,
          column: 25
        }
      },
      "591": {
        start: {
          line: 1446,
          column: 8
        },
        end: {
          line: 1446,
          column: 22
        }
      },
      "592": {
        start: {
          line: 1448,
          column: 8
        },
        end: {
          line: 1448,
          column: 62
        }
      },
      "593": {
        start: {
          line: 1449,
          column: 8
        },
        end: {
          line: 1449,
          column: 24
        }
      },
      "594": {
        start: {
          line: 1450,
          column: 8
        },
        end: {
          line: 1450,
          column: 25
        }
      },
      "595": {
        start: {
          line: 1451,
          column: 8
        },
        end: {
          line: 1451,
          column: 73
        }
      },
      "596": {
        start: {
          line: 1452,
          column: 8
        },
        end: {
          line: 1452,
          column: 104
        }
      },
      "597": {
        start: {
          line: 1453,
          column: 8
        },
        end: {
          line: 1453,
          column: 76
        }
      },
      "598": {
        start: {
          line: 1454,
          column: 8
        },
        end: {
          line: 1454,
          column: 63
        }
      },
      "599": {
        start: {
          line: 1455,
          column: 8
        },
        end: {
          line: 1455,
          column: 113
        }
      },
      "600": {
        start: {
          line: 1457,
          column: 8
        },
        end: {
          line: 1457,
          column: 24
        }
      },
      "601": {
        start: {
          line: 1458,
          column: 8
        },
        end: {
          line: 1458,
          column: 67
        }
      },
      "602": {
        start: {
          line: 1459,
          column: 8
        },
        end: {
          line: 1459,
          column: 26
        }
      },
      "603": {
        start: {
          line: 1460,
          column: 8
        },
        end: {
          line: 1460,
          column: 25
        }
      },
      "604": {
        start: {
          line: 1461,
          column: 29
        },
        end: {
          line: 1461,
          column: 68
        }
      },
      "605": {
        start: {
          line: 1462,
          column: 30
        },
        end: {
          line: 1462,
          column: 70
        }
      },
      "606": {
        start: {
          line: 1463,
          column: 26
        },
        end: {
          line: 1463,
          column: 62
        }
      },
      "607": {
        start: {
          line: 1464,
          column: 31
        },
        end: {
          line: 1464,
          column: 67
        }
      },
      "608": {
        start: {
          line: 1465,
          column: 27
        },
        end: {
          line: 1465,
          column: 72
        }
      },
      "609": {
        start: {
          line: 1466,
          column: 8
        },
        end: {
          line: 1466,
          column: 55
        }
      },
      "610": {
        start: {
          line: 1467,
          column: 8
        },
        end: {
          line: 1467,
          column: 57
        }
      },
      "611": {
        start: {
          line: 1468,
          column: 8
        },
        end: {
          line: 1468,
          column: 49
        }
      },
      "612": {
        start: {
          line: 1469,
          column: 8
        },
        end: {
          line: 1469,
          column: 60
        }
      },
      "613": {
        start: {
          line: 1470,
          column: 8
        },
        end: {
          line: 1470,
          column: 51
        }
      },
      "614": {
        start: {
          line: 1472,
          column: 8
        },
        end: {
          line: 1472,
          column: 24
        }
      },
      "615": {
        start: {
          line: 1473,
          column: 8
        },
        end: {
          line: 1473,
          column: 63
        }
      },
      "616": {
        start: {
          line: 1474,
          column: 8
        },
        end: {
          line: 1474,
          column: 26
        }
      },
      "617": {
        start: {
          line: 1475,
          column: 8
        },
        end: {
          line: 1475,
          column: 25
        }
      },
      "618": {
        start: {
          line: 1476,
          column: 8
        },
        end: {
          line: 1476,
          column: 80
        }
      },
      "619": {
        start: {
          line: 1478,
          column: 27
        },
        end: {
          line: 1478,
          column: 58
        }
      },
      "620": {
        start: {
          line: 1479,
          column: 25
        },
        end: {
          line: 1479,
          column: 52
        }
      },
      "621": {
        start: {
          line: 1480,
          column: 8
        },
        end: {
          line: 1482,
          column: 9
        }
      },
      "622": {
        start: {
          line: 1481,
          column: 12
        },
        end: {
          line: 1481,
          column: 72
        }
      },
      "623": {
        start: {
          line: 1483,
          column: 8
        },
        end: {
          line: 1483,
          column: 80
        }
      },
      "624": {
        start: {
          line: 1484,
          column: 8
        },
        end: {
          line: 1484,
          column: 76
        }
      },
      "625": {
        start: {
          line: 1486,
          column: 8
        },
        end: {
          line: 1486,
          column: 24
        }
      },
      "626": {
        start: {
          line: 1487,
          column: 8
        },
        end: {
          line: 1487,
          column: 65
        }
      },
      "627": {
        start: {
          line: 1488,
          column: 8
        },
        end: {
          line: 1488,
          column: 26
        }
      },
      "628": {
        start: {
          line: 1489,
          column: 8
        },
        end: {
          line: 1489,
          column: 25
        }
      },
      "629": {
        start: {
          line: 1490,
          column: 8
        },
        end: {
          line: 1490,
          column: 88
        }
      },
      "630": {
        start: {
          line: 1491,
          column: 8
        },
        end: {
          line: 1491,
          column: 90
        }
      },
      "631": {
        start: {
          line: 1493,
          column: 8
        },
        end: {
          line: 1493,
          column: 24
        }
      },
      "632": {
        start: {
          line: 1494,
          column: 8
        },
        end: {
          line: 1494,
          column: 106
        }
      },
      "633": {
        start: {
          line: 1496,
          column: 8
        },
        end: {
          line: 1496,
          column: 25
        }
      },
      "634": {
        start: {
          line: 1497,
          column: 8
        },
        end: {
          line: 1497,
          column: 92
        }
      },
      "635": {
        start: {
          line: 1498,
          column: 8
        },
        end: {
          line: 1498,
          column: 86
        }
      },
      "636": {
        start: {
          line: 1501,
          column: 0
        },
        end: {
          line: 1501,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 35,
            column: 56
          },
          end: {
            line: 35,
            column: 57
          }
        },
        loc: {
          start: {
            line: 35,
            column: 71
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 35
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 36
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 57
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 41
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 77
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        loc: {
          start: {
            line: 86,
            column: 31
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 86
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 40
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 95
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 34
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 104
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 64
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 118
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 64
          },
          end: {
            line: 350,
            column: 5
          }
        },
        line: 254
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 326,
            column: 75
          },
          end: {
            line: 326,
            column: 76
          }
        },
        loc: {
          start: {
            line: 326,
            column: 80
          },
          end: {
            line: 326,
            column: 120
          }
        },
        line: 326
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 41
          },
          end: {
            line: 359,
            column: 5
          }
        },
        line: 351
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 363,
            column: 4
          },
          end: {
            line: 363,
            column: 5
          }
        },
        loc: {
          start: {
            line: 363,
            column: 54
          },
          end: {
            line: 384,
            column: 5
          }
        },
        line: 363
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 388,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        },
        loc: {
          start: {
            line: 388,
            column: 42
          },
          end: {
            line: 407,
            column: 5
          }
        },
        line: 388
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 411,
            column: 4
          },
          end: {
            line: 411,
            column: 5
          }
        },
        loc: {
          start: {
            line: 411,
            column: 50
          },
          end: {
            line: 458,
            column: 5
          }
        },
        line: 411
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 413,
            column: 61
          },
          end: {
            line: 413,
            column: 62
          }
        },
        loc: {
          start: {
            line: 413,
            column: 67
          },
          end: {
            line: 413,
            column: 113
          }
        },
        line: 413
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 462,
            column: 4
          },
          end: {
            line: 462,
            column: 5
          }
        },
        loc: {
          start: {
            line: 462,
            column: 50
          },
          end: {
            line: 488,
            column: 5
          }
        },
        line: 462
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 464,
            column: 61
          },
          end: {
            line: 464,
            column: 62
          }
        },
        loc: {
          start: {
            line: 464,
            column: 67
          },
          end: {
            line: 464,
            column: 113
          }
        },
        line: 464
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 492,
            column: 4
          },
          end: {
            line: 492,
            column: 5
          }
        },
        loc: {
          start: {
            line: 492,
            column: 80
          },
          end: {
            line: 524,
            column: 5
          }
        },
        line: 492
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 528,
            column: 4
          },
          end: {
            line: 528,
            column: 5
          }
        },
        loc: {
          start: {
            line: 528,
            column: 65
          },
          end: {
            line: 574,
            column: 5
          }
        },
        line: 528
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 552,
            column: 80
          },
          end: {
            line: 552,
            column: 81
          }
        },
        loc: {
          start: {
            line: 552,
            column: 86
          },
          end: {
            line: 552,
            column: 135
          }
        },
        line: 552
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 575,
            column: 4
          },
          end: {
            line: 575,
            column: 5
          }
        },
        loc: {
          start: {
            line: 575,
            column: 31
          },
          end: {
            line: 583,
            column: 5
          }
        },
        line: 575
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 584,
            column: 4
          },
          end: {
            line: 584,
            column: 5
          }
        },
        loc: {
          start: {
            line: 584,
            column: 40
          },
          end: {
            line: 592,
            column: 5
          }
        },
        line: 584
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 593,
            column: 4
          },
          end: {
            line: 593,
            column: 5
          }
        },
        loc: {
          start: {
            line: 593,
            column: 45
          },
          end: {
            line: 640,
            column: 5
          }
        },
        line: 593
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 601,
            column: 49
          },
          end: {
            line: 601,
            column: 50
          }
        },
        loc: {
          start: {
            line: 601,
            column: 66
          },
          end: {
            line: 601,
            column: 88
          }
        },
        line: 601
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 607,
            column: 59
          },
          end: {
            line: 607,
            column: 60
          }
        },
        loc: {
          start: {
            line: 607,
            column: 79
          },
          end: {
            line: 607,
            column: 101
          }
        },
        line: 607
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 641,
            column: 4
          },
          end: {
            line: 641,
            column: 5
          }
        },
        loc: {
          start: {
            line: 641,
            column: 53
          },
          end: {
            line: 657,
            column: 5
          }
        },
        line: 641
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 658,
            column: 4
          },
          end: {
            line: 658,
            column: 5
          }
        },
        loc: {
          start: {
            line: 658,
            column: 38
          },
          end: {
            line: 673,
            column: 5
          }
        },
        line: 658
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 674,
            column: 4
          },
          end: {
            line: 674,
            column: 5
          }
        },
        loc: {
          start: {
            line: 674,
            column: 52
          },
          end: {
            line: 692,
            column: 5
          }
        },
        line: 674
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 693,
            column: 4
          },
          end: {
            line: 693,
            column: 5
          }
        },
        loc: {
          start: {
            line: 693,
            column: 25
          },
          end: {
            line: 724,
            column: 5
          }
        },
        line: 693
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 707,
            column: 33
          },
          end: {
            line: 707,
            column: 34
          }
        },
        loc: {
          start: {
            line: 707,
            column: 43
          },
          end: {
            line: 719,
            column: 9
          }
        },
        line: 707
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 721,
            column: 17
          },
          end: {
            line: 721,
            column: 18
          }
        },
        loc: {
          start: {
            line: 721,
            column: 24
          },
          end: {
            line: 721,
            column: 64
          }
        },
        line: 721
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 721,
            column: 32
          },
          end: {
            line: 721,
            column: 33
          }
        },
        loc: {
          start: {
            line: 721,
            column: 41
          },
          end: {
            line: 721,
            column: 53
          }
        },
        line: 721
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 725,
            column: 4
          },
          end: {
            line: 725,
            column: 5
          }
        },
        loc: {
          start: {
            line: 725,
            column: 25
          },
          end: {
            line: 730,
            column: 5
          }
        },
        line: 725
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 728,
            column: 36
          },
          end: {
            line: 728,
            column: 37
          }
        },
        loc: {
          start: {
            line: 728,
            column: 46
          },
          end: {
            line: 728,
            column: 136
          }
        },
        line: 728
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 731,
            column: 4
          },
          end: {
            line: 731,
            column: 5
          }
        },
        loc: {
          start: {
            line: 731,
            column: 28
          },
          end: {
            line: 755,
            column: 5
          }
        },
        line: 731
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 757,
            column: 4
          },
          end: {
            line: 757,
            column: 5
          }
        },
        loc: {
          start: {
            line: 757,
            column: 36
          },
          end: {
            line: 765,
            column: 5
          }
        },
        line: 757
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 766,
            column: 4
          },
          end: {
            line: 766,
            column: 5
          }
        },
        loc: {
          start: {
            line: 766,
            column: 41
          },
          end: {
            line: 774,
            column: 5
          }
        },
        line: 766
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 775,
            column: 4
          },
          end: {
            line: 775,
            column: 5
          }
        },
        loc: {
          start: {
            line: 775,
            column: 40
          },
          end: {
            line: 783,
            column: 5
          }
        },
        line: 775
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 784,
            column: 4
          },
          end: {
            line: 784,
            column: 5
          }
        },
        loc: {
          start: {
            line: 784,
            column: 34
          },
          end: {
            line: 792,
            column: 5
          }
        },
        line: 784
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 794,
            column: 4
          },
          end: {
            line: 794,
            column: 5
          }
        },
        loc: {
          start: {
            line: 794,
            column: 34
          },
          end: {
            line: 802,
            column: 5
          }
        },
        line: 794
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 803,
            column: 4
          },
          end: {
            line: 803,
            column: 5
          }
        },
        loc: {
          start: {
            line: 803,
            column: 39
          },
          end: {
            line: 811,
            column: 5
          }
        },
        line: 803
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 812,
            column: 4
          },
          end: {
            line: 812,
            column: 5
          }
        },
        loc: {
          start: {
            line: 812,
            column: 38
          },
          end: {
            line: 820,
            column: 5
          }
        },
        line: 812
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 821,
            column: 4
          },
          end: {
            line: 821,
            column: 5
          }
        },
        loc: {
          start: {
            line: 821,
            column: 32
          },
          end: {
            line: 829,
            column: 5
          }
        },
        line: 821
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 831,
            column: 4
          },
          end: {
            line: 831,
            column: 5
          }
        },
        loc: {
          start: {
            line: 831,
            column: 52
          },
          end: {
            line: 839,
            column: 5
          }
        },
        line: 831
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 840,
            column: 4
          },
          end: {
            line: 840,
            column: 5
          }
        },
        loc: {
          start: {
            line: 840,
            column: 47
          },
          end: {
            line: 848,
            column: 5
          }
        },
        line: 840
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 849,
            column: 4
          },
          end: {
            line: 849,
            column: 5
          }
        },
        loc: {
          start: {
            line: 849,
            column: 51
          },
          end: {
            line: 857,
            column: 5
          }
        },
        line: 849
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 858,
            column: 4
          },
          end: {
            line: 858,
            column: 5
          }
        },
        loc: {
          start: {
            line: 858,
            column: 45
          },
          end: {
            line: 866,
            column: 5
          }
        },
        line: 858
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 868,
            column: 4
          },
          end: {
            line: 868,
            column: 5
          }
        },
        loc: {
          start: {
            line: 868,
            column: 43
          },
          end: {
            line: 876,
            column: 5
          }
        },
        line: 868
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 877,
            column: 4
          },
          end: {
            line: 877,
            column: 5
          }
        },
        loc: {
          start: {
            line: 877,
            column: 38
          },
          end: {
            line: 885,
            column: 5
          }
        },
        line: 877
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 886,
            column: 4
          },
          end: {
            line: 886,
            column: 5
          }
        },
        loc: {
          start: {
            line: 886,
            column: 42
          },
          end: {
            line: 894,
            column: 5
          }
        },
        line: 886
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 895,
            column: 4
          },
          end: {
            line: 895,
            column: 5
          }
        },
        loc: {
          start: {
            line: 895,
            column: 36
          },
          end: {
            line: 903,
            column: 5
          }
        },
        line: 895
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 905,
            column: 4
          },
          end: {
            line: 905,
            column: 5
          }
        },
        loc: {
          start: {
            line: 905,
            column: 42
          },
          end: {
            line: 982,
            column: 5
          }
        },
        line: 905
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 984,
            column: 4
          },
          end: {
            line: 984,
            column: 5
          }
        },
        loc: {
          start: {
            line: 984,
            column: 51
          },
          end: {
            line: 1063,
            column: 5
          }
        },
        line: 984
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 1070,
            column: 4
          },
          end: {
            line: 1070,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1070,
            column: 45
          },
          end: {
            line: 1081,
            column: 5
          }
        },
        line: 1070
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 1085,
            column: 4
          },
          end: {
            line: 1085,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1085,
            column: 67
          },
          end: {
            line: 1137,
            column: 5
          }
        },
        line: 1085
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 1142,
            column: 4
          },
          end: {
            line: 1142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1142,
            column: 67
          },
          end: {
            line: 1171,
            column: 5
          }
        },
        line: 1142
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 1145,
            column: 61
          },
          end: {
            line: 1145,
            column: 62
          }
        },
        loc: {
          start: {
            line: 1145,
            column: 67
          },
          end: {
            line: 1145,
            column: 113
          }
        },
        line: 1145
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 1172,
            column: 4
          },
          end: {
            line: 1172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1172,
            column: 73
          },
          end: {
            line: 1201,
            column: 5
          }
        },
        line: 1172
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 1174,
            column: 61
          },
          end: {
            line: 1174,
            column: 62
          }
        },
        loc: {
          start: {
            line: 1174,
            column: 67
          },
          end: {
            line: 1174,
            column: 113
          }
        },
        line: 1174
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 1207,
            column: 4
          },
          end: {
            line: 1207,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1207,
            column: 60
          },
          end: {
            line: 1292,
            column: 5
          }
        },
        line: 1207
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 1209,
            column: 61
          },
          end: {
            line: 1209,
            column: 62
          }
        },
        loc: {
          start: {
            line: 1209,
            column: 67
          },
          end: {
            line: 1209,
            column: 113
          }
        },
        line: 1209
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 1296,
            column: 4
          },
          end: {
            line: 1296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1296,
            column: 44
          },
          end: {
            line: 1345,
            column: 5
          }
        },
        line: 1296
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 1330,
            column: 31
          },
          end: {
            line: 1330,
            column: 32
          }
        },
        loc: {
          start: {
            line: 1330,
            column: 52
          },
          end: {
            line: 1336,
            column: 13
          }
        },
        line: 1330
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 1331,
            column: 30
          },
          end: {
            line: 1331,
            column: 31
          }
        },
        loc: {
          start: {
            line: 1331,
            column: 36
          },
          end: {
            line: 1334,
            column: 17
          }
        },
        line: 1331
      },
      "72": {
        name: "(anonymous_72)",
        decl: {
          start: {
            line: 1349,
            column: 4
          },
          end: {
            line: 1349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1349,
            column: 56
          },
          end: {
            line: 1411,
            column: 5
          }
        },
        line: 1349
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 1356,
            column: 75
          },
          end: {
            line: 1356,
            column: 76
          }
        },
        loc: {
          start: {
            line: 1356,
            column: 81
          },
          end: {
            line: 1356,
            column: 146
          }
        },
        line: 1356
      },
      "74": {
        name: "(anonymous_74)",
        decl: {
          start: {
            line: 1395,
            column: 31
          },
          end: {
            line: 1395,
            column: 32
          }
        },
        loc: {
          start: {
            line: 1395,
            column: 52
          },
          end: {
            line: 1401,
            column: 13
          }
        },
        line: 1395
      },
      "75": {
        name: "(anonymous_75)",
        decl: {
          start: {
            line: 1396,
            column: 30
          },
          end: {
            line: 1396,
            column: 31
          }
        },
        loc: {
          start: {
            line: 1396,
            column: 36
          },
          end: {
            line: 1399,
            column: 17
          }
        },
        line: 1396
      },
      "76": {
        name: "(anonymous_76)",
        decl: {
          start: {
            line: 1415,
            column: 4
          },
          end: {
            line: 1415,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1415,
            column: 27
          },
          end: {
            line: 1427,
            column: 5
          }
        },
        line: 1415
      },
      "77": {
        name: "(anonymous_77)",
        decl: {
          start: {
            line: 1431,
            column: 4
          },
          end: {
            line: 1431,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1431,
            column: 21
          },
          end: {
            line: 1440,
            column: 5
          }
        },
        line: 1431
      },
      "78": {
        name: "(anonymous_78)",
        decl: {
          start: {
            line: 1444,
            column: 4
          },
          end: {
            line: 1444,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1444,
            column: 40
          },
          end: {
            line: 1499,
            column: 5
          }
        },
        line: 1444
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 35,
            column: 22
          },
          end: {
            line: 37,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 23
          },
          end: {
            line: 35,
            column: 27
          }
        }, {
          start: {
            line: 35,
            column: 31
          },
          end: {
            line: 35,
            column: 51
          }
        }, {
          start: {
            line: 35,
            column: 56
          },
          end: {
            line: 37,
            column: 1
          }
        }],
        line: 35
      },
      "18": {
        loc: {
          start: {
            line: 36,
            column: 11
          },
          end: {
            line: 36,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 37
          },
          end: {
            line: 36,
            column: 40
          }
        }, {
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 36,
            column: 61
          }
        }],
        line: 36
      },
      "19": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 15
          }
        }, {
          start: {
            line: 36,
            column: 19
          },
          end: {
            line: 36,
            column: 33
          }
        }],
        line: 36
      },
      "20": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "21": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "22": {
        loc: {
          start: {
            line: 77,
            column: 28
          },
          end: {
            line: 77,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 77,
            column: 37
          },
          end: {
            line: 77,
            column: 39
          }
        }],
        line: 77
      },
      "23": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "24": {
        loc: {
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "25": {
        loc: {
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "26": {
        loc: {
          start: {
            line: 157,
            column: 31
          },
          end: {
            line: 157,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 31
          },
          end: {
            line: 157,
            column: 59
          }
        }, {
          start: {
            line: 157,
            column: 63
          },
          end: {
            line: 157,
            column: 64
          }
        }],
        line: 157
      },
      "27": {
        loc: {
          start: {
            line: 169,
            column: 38
          },
          end: {
            line: 169,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 38
          },
          end: {
            line: 169,
            column: 78
          }
        }, {
          start: {
            line: 169,
            column: 82
          },
          end: {
            line: 169,
            column: 83
          }
        }],
        line: 169
      },
      "28": {
        loc: {
          start: {
            line: 170,
            column: 41
          },
          end: {
            line: 170,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 41
          },
          end: {
            line: 170,
            column: 74
          }
        }, {
          start: {
            line: 170,
            column: 78
          },
          end: {
            line: 170,
            column: 79
          }
        }],
        line: 170
      },
      "29": {
        loc: {
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 179,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 179,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "30": {
        loc: {
          start: {
            line: 174,
            column: 30
          },
          end: {
            line: 174,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 30
          },
          end: {
            line: 174,
            column: 57
          }
        }, {
          start: {
            line: 174,
            column: 61
          },
          end: {
            line: 174,
            column: 70
          }
        }],
        line: 174
      },
      "31": {
        loc: {
          start: {
            line: 186,
            column: 38
          },
          end: {
            line: 186,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 38
          },
          end: {
            line: 186,
            column: 60
          }
        }, {
          start: {
            line: 186,
            column: 64
          },
          end: {
            line: 186,
            column: 65
          }
        }],
        line: 186
      },
      "32": {
        loc: {
          start: {
            line: 188,
            column: 26
          },
          end: {
            line: 188,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 26
          },
          end: {
            line: 188,
            column: 52
          }
        }, {
          start: {
            line: 188,
            column: 56
          },
          end: {
            line: 188,
            column: 65
          }
        }],
        line: 188
      },
      "33": {
        loc: {
          start: {
            line: 196,
            column: 29
          },
          end: {
            line: 196,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 196,
            column: 49
          },
          end: {
            line: 196,
            column: 94
          }
        }, {
          start: {
            line: 196,
            column: 97
          },
          end: {
            line: 196,
            column: 98
          }
        }],
        line: 196
      },
      "34": {
        loc: {
          start: {
            line: 218,
            column: 32
          },
          end: {
            line: 218,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 32
          },
          end: {
            line: 218,
            column: 57
          }
        }, {
          start: {
            line: 218,
            column: 61
          },
          end: {
            line: 218,
            column: 66
          }
        }],
        line: 218
      },
      "35": {
        loc: {
          start: {
            line: 257,
            column: 30
          },
          end: {
            line: 259,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 258,
            column: 18
          },
          end: {
            line: 258,
            column: 107
          }
        }, {
          start: {
            line: 259,
            column: 18
          },
          end: {
            line: 259,
            column: 78
          }
        }],
        line: 257
      },
      "36": {
        loc: {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 307,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 307,
            column: 17
          }
        }, {
          start: {
            line: 287,
            column: 21
          },
          end: {
            line: 307,
            column: 17
          }
        }],
        line: 266
      },
      "37": {
        loc: {
          start: {
            line: 283,
            column: 20
          },
          end: {
            line: 285,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 20
          },
          end: {
            line: 285,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "38": {
        loc: {
          start: {
            line: 310,
            column: 16
          },
          end: {
            line: 335,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 16
          },
          end: {
            line: 335,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "39": {
        loc: {
          start: {
            line: 317,
            column: 24
          },
          end: {
            line: 333,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 24
          },
          end: {
            line: 333,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "40": {
        loc: {
          start: {
            line: 327,
            column: 28
          },
          end: {
            line: 332,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 28
          },
          end: {
            line: 332,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "41": {
        loc: {
          start: {
            line: 351,
            column: 28
          },
          end: {
            line: 351,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 351,
            column: 37
          },
          end: {
            line: 351,
            column: 39
          }
        }],
        line: 351
      },
      "42": {
        loc: {
          start: {
            line: 366,
            column: 12
          },
          end: {
            line: 368,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 12
          },
          end: {
            line: 368,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "43": {
        loc: {
          start: {
            line: 391,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 391,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 391
      },
      "44": {
        loc: {
          start: {
            line: 418,
            column: 12
          },
          end: {
            line: 422,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 418,
            column: 12
          },
          end: {
            line: 422,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 418
      },
      "45": {
        loc: {
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 428,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 428,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      },
      "46": {
        loc: {
          start: {
            line: 424,
            column: 31
          },
          end: {
            line: 424,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 424,
            column: 50
          },
          end: {
            line: 424,
            column: 56
          }
        }, {
          start: {
            line: 424,
            column: 59
          },
          end: {
            line: 424,
            column: 67
          }
        }],
        line: 424
      },
      "47": {
        loc: {
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 429
      },
      "48": {
        loc: {
          start: {
            line: 429,
            column: 16
          },
          end: {
            line: 429,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 429,
            column: 16
          },
          end: {
            line: 429,
            column: 33
          }
        }, {
          start: {
            line: 429,
            column: 37
          },
          end: {
            line: 429,
            column: 65
          }
        }],
        line: 429
      },
      "49": {
        loc: {
          start: {
            line: 430,
            column: 31
          },
          end: {
            line: 430,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 430,
            column: 74
          },
          end: {
            line: 430,
            column: 80
          }
        }, {
          start: {
            line: 430,
            column: 83
          },
          end: {
            line: 430,
            column: 91
          }
        }],
        line: 430
      },
      "50": {
        loc: {
          start: {
            line: 430,
            column: 31
          },
          end: {
            line: 430,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 430,
            column: 31
          },
          end: {
            line: 430,
            column: 47
          }
        }, {
          start: {
            line: 430,
            column: 51
          },
          end: {
            line: 430,
            column: 71
          }
        }],
        line: 430
      },
      "51": {
        loc: {
          start: {
            line: 446,
            column: 12
          },
          end: {
            line: 448,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 446,
            column: 12
          },
          end: {
            line: 448,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 446
      },
      "52": {
        loc: {
          start: {
            line: 449,
            column: 35
          },
          end: {
            line: 449,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 449,
            column: 35
          },
          end: {
            line: 449,
            column: 50
          }
        }, {
          start: {
            line: 449,
            column: 54
          },
          end: {
            line: 449,
            column: 55
          }
        }],
        line: 449
      },
      "53": {
        loc: {
          start: {
            line: 477,
            column: 12
          },
          end: {
            line: 480,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 477,
            column: 12
          },
          end: {
            line: 480,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 477
      },
      "54": {
        loc: {
          start: {
            line: 477,
            column: 16
          },
          end: {
            line: 477,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 477,
            column: 16
          },
          end: {
            line: 477,
            column: 33
          }
        }, {
          start: {
            line: 477,
            column: 37
          },
          end: {
            line: 477,
            column: 87
          }
        }],
        line: 477
      },
      "55": {
        loc: {
          start: {
            line: 503,
            column: 16
          },
          end: {
            line: 505,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 503,
            column: 16
          },
          end: {
            line: 505,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 503
      },
      "56": {
        loc: {
          start: {
            line: 551,
            column: 12
          },
          end: {
            line: 556,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 551,
            column: 12
          },
          end: {
            line: 556,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 551
      },
      "57": {
        loc: {
          start: {
            line: 596,
            column: 12
          },
          end: {
            line: 598,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 596,
            column: 12
          },
          end: {
            line: 598,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 596
      },
      "58": {
        loc: {
          start: {
            line: 609,
            column: 16
          },
          end: {
            line: 614,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 609,
            column: 16
          },
          end: {
            line: 614,
            column: 17
          }
        }, {
          start: {
            line: 612,
            column: 21
          },
          end: {
            line: 614,
            column: 17
          }
        }],
        line: 609
      },
      "59": {
        loc: {
          start: {
            line: 609,
            column: 20
          },
          end: {
            line: 609,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 609,
            column: 20
          },
          end: {
            line: 609,
            column: 49
          }
        }, {
          start: {
            line: 609,
            column: 53
          },
          end: {
            line: 609,
            column: 77
          }
        }],
        line: 609
      },
      "60": {
        loc: {
          start: {
            line: 644,
            column: 12
          },
          end: {
            line: 646,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 644,
            column: 12
          },
          end: {
            line: 646,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 644
      },
      "61": {
        loc: {
          start: {
            line: 661,
            column: 12
          },
          end: {
            line: 663,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 661,
            column: 12
          },
          end: {
            line: 663,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 661
      },
      "62": {
        loc: {
          start: {
            line: 674,
            column: 39
          },
          end: {
            line: 674,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 674,
            column: 48
          },
          end: {
            line: 674,
            column: 50
          }
        }],
        line: 674
      },
      "63": {
        loc: {
          start: {
            line: 677,
            column: 12
          },
          end: {
            line: 682,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 677,
            column: 12
          },
          end: {
            line: 682,
            column: 13
          }
        }, {
          start: {
            line: 680,
            column: 17
          },
          end: {
            line: 682,
            column: 13
          }
        }],
        line: 677
      },
      "64": {
        loc: {
          start: {
            line: 709,
            column: 12
          },
          end: {
            line: 709,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 709,
            column: 12
          },
          end: {
            line: 709,
            column: 31
          }
        }, {
          start: {
            line: 709,
            column: 35
          },
          end: {
            line: 709,
            column: 40
          }
        }],
        line: 709
      },
      "65": {
        loc: {
          start: {
            line: 710,
            column: 12
          },
          end: {
            line: 710,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 710,
            column: 12
          },
          end: {
            line: 710,
            column: 29
          }
        }, {
          start: {
            line: 710,
            column: 33
          },
          end: {
            line: 710,
            column: 38
          }
        }],
        line: 710
      },
      "66": {
        loc: {
          start: {
            line: 711,
            column: 12
          },
          end: {
            line: 711,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 711,
            column: 12
          },
          end: {
            line: 711,
            column: 29
          }
        }, {
          start: {
            line: 711,
            column: 33
          },
          end: {
            line: 711,
            column: 34
          }
        }],
        line: 711
      },
      "67": {
        loc: {
          start: {
            line: 712,
            column: 12
          },
          end: {
            line: 712,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 712,
            column: 12
          },
          end: {
            line: 712,
            column: 30
          }
        }, {
          start: {
            line: 712,
            column: 34
          },
          end: {
            line: 712,
            column: 35
          }
        }],
        line: 712
      },
      "68": {
        loc: {
          start: {
            line: 713,
            column: 12
          },
          end: {
            line: 713,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 713,
            column: 12
          },
          end: {
            line: 713,
            column: 27
          }
        }, {
          start: {
            line: 713,
            column: 31
          },
          end: {
            line: 713,
            column: 32
          }
        }],
        line: 713
      },
      "69": {
        loc: {
          start: {
            line: 714,
            column: 12
          },
          end: {
            line: 714,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 714,
            column: 12
          },
          end: {
            line: 714,
            column: 34
          }
        }, {
          start: {
            line: 714,
            column: 38
          },
          end: {
            line: 714,
            column: 39
          }
        }],
        line: 714
      },
      "70": {
        loc: {
          start: {
            line: 715,
            column: 12
          },
          end: {
            line: 715,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 715,
            column: 12
          },
          end: {
            line: 715,
            column: 32
          }
        }, {
          start: {
            line: 715,
            column: 36
          },
          end: {
            line: 715,
            column: 37
          }
        }],
        line: 715
      },
      "71": {
        loc: {
          start: {
            line: 716,
            column: 12
          },
          end: {
            line: 716,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 716,
            column: 12
          },
          end: {
            line: 716,
            column: 25
          }
        }, {
          start: {
            line: 716,
            column: 29
          },
          end: {
            line: 716,
            column: 30
          }
        }],
        line: 716
      },
      "72": {
        loc: {
          start: {
            line: 717,
            column: 12
          },
          end: {
            line: 717,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 717,
            column: 12
          },
          end: {
            line: 717,
            column: 25
          }
        }, {
          start: {
            line: 717,
            column: 29
          },
          end: {
            line: 717,
            column: 36
          }
        }],
        line: 717
      },
      "73": {
        loc: {
          start: {
            line: 718,
            column: 12
          },
          end: {
            line: 718,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 718,
            column: 31
          },
          end: {
            line: 718,
            column: 78
          }
        }, {
          start: {
            line: 718,
            column: 81
          },
          end: {
            line: 718,
            column: 86
          }
        }],
        line: 718
      },
      "74": {
        loc: {
          start: {
            line: 728,
            column: 49
          },
          end: {
            line: 728,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 728,
            column: 49
          },
          end: {
            line: 728,
            column: 68
          }
        }, {
          start: {
            line: 728,
            column: 72
          },
          end: {
            line: 728,
            column: 77
          }
        }],
        line: 728
      },
      "75": {
        loc: {
          start: {
            line: 728,
            column: 83
          },
          end: {
            line: 728,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 728,
            column: 83
          },
          end: {
            line: 728,
            column: 100
          }
        }, {
          start: {
            line: 728,
            column: 104
          },
          end: {
            line: 728,
            column: 109
          }
        }],
        line: 728
      },
      "76": {
        loc: {
          start: {
            line: 728,
            column: 116
          },
          end: {
            line: 728,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 728,
            column: 116
          },
          end: {
            line: 728,
            column: 129
          }
        }, {
          start: {
            line: 728,
            column: 133
          },
          end: {
            line: 728,
            column: 134
          }
        }],
        line: 728
      },
      "77": {
        loc: {
          start: {
            line: 737,
            column: 33
          },
          end: {
            line: 737,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 737,
            column: 33
          },
          end: {
            line: 737,
            column: 51
          }
        }, {
          start: {
            line: 737,
            column: 55
          },
          end: {
            line: 737,
            column: 56
          }
        }],
        line: 737
      },
      "78": {
        loc: {
          start: {
            line: 766,
            column: 28
          },
          end: {
            line: 766,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 766,
            column: 37
          },
          end: {
            line: 766,
            column: 39
          }
        }],
        line: 766
      },
      "79": {
        loc: {
          start: {
            line: 803,
            column: 26
          },
          end: {
            line: 803,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 803,
            column: 35
          },
          end: {
            line: 803,
            column: 37
          }
        }],
        line: 803
      },
      "80": {
        loc: {
          start: {
            line: 831,
            column: 39
          },
          end: {
            line: 831,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 831,
            column: 48
          },
          end: {
            line: 831,
            column: 50
          }
        }],
        line: 831
      },
      "81": {
        loc: {
          start: {
            line: 868,
            column: 30
          },
          end: {
            line: 868,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 868,
            column: 39
          },
          end: {
            line: 868,
            column: 41
          }
        }],
        line: 868
      },
      "82": {
        loc: {
          start: {
            line: 913,
            column: 20
          },
          end: {
            line: 919,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 913,
            column: 20
          },
          end: {
            line: 919,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 913
      },
      "83": {
        loc: {
          start: {
            line: 913,
            column: 24
          },
          end: {
            line: 913,
            column: 127
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 913,
            column: 24
          },
          end: {
            line: 913,
            column: 42
          }
        }, {
          start: {
            line: 913,
            column: 46
          },
          end: {
            line: 913,
            column: 62
          }
        }, {
          start: {
            line: 913,
            column: 66
          },
          end: {
            line: 913,
            column: 88
          }
        }, {
          start: {
            line: 913,
            column: 92
          },
          end: {
            line: 913,
            column: 112
          }
        }, {
          start: {
            line: 913,
            column: 116
          },
          end: {
            line: 913,
            column: 127
          }
        }],
        line: 913
      },
      "84": {
        loc: {
          start: {
            line: 922,
            column: 20
          },
          end: {
            line: 928,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 922,
            column: 20
          },
          end: {
            line: 928,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 922
      },
      "85": {
        loc: {
          start: {
            line: 931,
            column: 20
          },
          end: {
            line: 937,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 931,
            column: 20
          },
          end: {
            line: 937,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 931
      },
      "86": {
        loc: {
          start: {
            line: 939,
            column: 162
          },
          end: {
            line: 939,
            column: 190
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 939,
            column: 162
          },
          end: {
            line: 939,
            column: 176
          }
        }, {
          start: {
            line: 939,
            column: 180
          },
          end: {
            line: 939,
            column: 190
          }
        }],
        line: 939
      },
      "87": {
        loc: {
          start: {
            line: 940,
            column: 20
          },
          end: {
            line: 946,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 940,
            column: 20
          },
          end: {
            line: 946,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 940
      },
      "88": {
        loc: {
          start: {
            line: 952,
            column: 45
          },
          end: {
            line: 952,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 952,
            column: 45
          },
          end: {
            line: 952,
            column: 59
          }
        }, {
          start: {
            line: 952,
            column: 63
          },
          end: {
            line: 952,
            column: 73
          }
        }],
        line: 952
      },
      "89": {
        loc: {
          start: {
            line: 953,
            column: 34
          },
          end: {
            line: 953,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 953,
            column: 49
          },
          end: {
            line: 953,
            column: 71
          }
        }, {
          start: {
            line: 953,
            column: 74
          },
          end: {
            line: 953,
            column: 78
          }
        }],
        line: 953
      },
      "90": {
        loc: {
          start: {
            line: 966,
            column: 12
          },
          end: {
            line: 968,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 966,
            column: 12
          },
          end: {
            line: 968,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 966
      },
      "91": {
        loc: {
          start: {
            line: 992,
            column: 20
          },
          end: {
            line: 998,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 992,
            column: 20
          },
          end: {
            line: 998,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 992
      },
      "92": {
        loc: {
          start: {
            line: 992,
            column: 24
          },
          end: {
            line: 992,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 992,
            column: 24
          },
          end: {
            line: 992,
            column: 42
          }
        }, {
          start: {
            line: 992,
            column: 46
          },
          end: {
            line: 992,
            column: 62
          }
        }, {
          start: {
            line: 992,
            column: 66
          },
          end: {
            line: 992,
            column: 90
          }
        }, {
          start: {
            line: 992,
            column: 94
          },
          end: {
            line: 992,
            column: 116
          }
        }],
        line: 992
      },
      "93": {
        loc: {
          start: {
            line: 1001,
            column: 20
          },
          end: {
            line: 1007,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1001,
            column: 20
          },
          end: {
            line: 1007,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1001
      },
      "94": {
        loc: {
          start: {
            line: 1010,
            column: 20
          },
          end: {
            line: 1016,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1010,
            column: 20
          },
          end: {
            line: 1016,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1010
      },
      "95": {
        loc: {
          start: {
            line: 1018,
            column: 184
          },
          end: {
            line: 1018,
            column: 212
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1018,
            column: 184
          },
          end: {
            line: 1018,
            column: 198
          }
        }, {
          start: {
            line: 1018,
            column: 202
          },
          end: {
            line: 1018,
            column: 212
          }
        }],
        line: 1018
      },
      "96": {
        loc: {
          start: {
            line: 1019,
            column: 20
          },
          end: {
            line: 1025,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1019,
            column: 20
          },
          end: {
            line: 1025,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1019
      },
      "97": {
        loc: {
          start: {
            line: 1032,
            column: 61
          },
          end: {
            line: 1032,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1032,
            column: 61
          },
          end: {
            line: 1032,
            column: 89
          }
        }, {
          start: {
            line: 1032,
            column: 93
          },
          end: {
            line: 1032,
            column: 96
          }
        }],
        line: 1032
      },
      "98": {
        loc: {
          start: {
            line: 1033,
            column: 45
          },
          end: {
            line: 1033,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1033,
            column: 45
          },
          end: {
            line: 1033,
            column: 59
          }
        }, {
          start: {
            line: 1033,
            column: 63
          },
          end: {
            line: 1033,
            column: 73
          }
        }],
        line: 1033
      },
      "99": {
        loc: {
          start: {
            line: 1034,
            column: 34
          },
          end: {
            line: 1034,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1034,
            column: 49
          },
          end: {
            line: 1034,
            column: 71
          }
        }, {
          start: {
            line: 1034,
            column: 74
          },
          end: {
            line: 1034,
            column: 78
          }
        }],
        line: 1034
      },
      "100": {
        loc: {
          start: {
            line: 1047,
            column: 12
          },
          end: {
            line: 1049,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1047,
            column: 12
          },
          end: {
            line: 1049,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1047
      },
      "101": {
        loc: {
          start: {
            line: 1075,
            column: 12
          },
          end: {
            line: 1077,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1075,
            column: 12
          },
          end: {
            line: 1077,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1075
      },
      "102": {
        loc: {
          start: {
            line: 1075,
            column: 16
          },
          end: {
            line: 1075,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1075,
            column: 16
          },
          end: {
            line: 1075,
            column: 42
          }
        }, {
          start: {
            line: 1075,
            column: 46
          },
          end: {
            line: 1075,
            column: 72
          }
        }],
        line: 1075
      },
      "103": {
        loc: {
          start: {
            line: 1110,
            column: 12
          },
          end: {
            line: 1116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1110,
            column: 12
          },
          end: {
            line: 1116,
            column: 13
          }
        }, {
          start: {
            line: 1113,
            column: 17
          },
          end: {
            line: 1116,
            column: 13
          }
        }],
        line: 1110
      },
      "104": {
        loc: {
          start: {
            line: 1235,
            column: 34
          },
          end: {
            line: 1235,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1235,
            column: 34
          },
          end: {
            line: 1235,
            column: 62
          }
        }, {
          start: {
            line: 1235,
            column: 66
          },
          end: {
            line: 1235,
            column: 67
          }
        }],
        line: 1235
      },
      "105": {
        loc: {
          start: {
            line: 1237,
            column: 16
          },
          end: {
            line: 1244,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1237,
            column: 16
          },
          end: {
            line: 1244,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1237
      },
      "106": {
        loc: {
          start: {
            line: 1250,
            column: 16
          },
          end: {
            line: 1258,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1250,
            column: 16
          },
          end: {
            line: 1258,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1250
      },
      "107": {
        loc: {
          start: {
            line: 1304,
            column: 12
          },
          end: {
            line: 1306,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1304,
            column: 12
          },
          end: {
            line: 1306,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1304
      },
      "108": {
        loc: {
          start: {
            line: 1359,
            column: 12
          },
          end: {
            line: 1361,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1359,
            column: 12
          },
          end: {
            line: 1361,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1359
      },
      "109": {
        loc: {
          start: {
            line: 1364,
            column: 12
          },
          end: {
            line: 1366,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1364,
            column: 12
          },
          end: {
            line: 1366,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1364
      },
      "110": {
        loc: {
          start: {
            line: 1417,
            column: 12
          },
          end: {
            line: 1418,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1417,
            column: 12
          },
          end: {
            line: 1418,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1417
      },
      "111": {
        loc: {
          start: {
            line: 1417,
            column: 16
          },
          end: {
            line: 1417,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1417,
            column: 16
          },
          end: {
            line: 1417,
            column: 31
          }
        }, {
          start: {
            line: 1417,
            column: 35
          },
          end: {
            line: 1417,
            column: 55
          }
        }],
        line: 1417
      },
      "112": {
        loc: {
          start: {
            line: 1420,
            column: 12
          },
          end: {
            line: 1421,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1420,
            column: 12
          },
          end: {
            line: 1421,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1420
      },
      "113": {
        loc: {
          start: {
            line: 1420,
            column: 16
          },
          end: {
            line: 1420,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1420,
            column: 16
          },
          end: {
            line: 1420,
            column: 26
          }
        }, {
          start: {
            line: 1420,
            column: 30
          },
          end: {
            line: 1420,
            column: 44
          }
        }],
        line: 1420
      },
      "114": {
        loc: {
          start: {
            line: 1433,
            column: 12
          },
          end: {
            line: 1434,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1433,
            column: 12
          },
          end: {
            line: 1434,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1433
      },
      "115": {
        loc: {
          start: {
            line: 1461,
            column: 29
          },
          end: {
            line: 1461,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1461,
            column: 29
          },
          end: {
            line: 1461,
            column: 63
          }
        }, {
          start: {
            line: 1461,
            column: 67
          },
          end: {
            line: 1461,
            column: 68
          }
        }],
        line: 1461
      },
      "116": {
        loc: {
          start: {
            line: 1462,
            column: 30
          },
          end: {
            line: 1462,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1462,
            column: 30
          },
          end: {
            line: 1462,
            column: 65
          }
        }, {
          start: {
            line: 1462,
            column: 69
          },
          end: {
            line: 1462,
            column: 70
          }
        }],
        line: 1462
      },
      "117": {
        loc: {
          start: {
            line: 1463,
            column: 26
          },
          end: {
            line: 1463,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1463,
            column: 26
          },
          end: {
            line: 1463,
            column: 57
          }
        }, {
          start: {
            line: 1463,
            column: 61
          },
          end: {
            line: 1463,
            column: 62
          }
        }],
        line: 1463
      },
      "118": {
        loc: {
          start: {
            line: 1464,
            column: 31
          },
          end: {
            line: 1464,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1464,
            column: 31
          },
          end: {
            line: 1464,
            column: 62
          }
        }, {
          start: {
            line: 1464,
            column: 66
          },
          end: {
            line: 1464,
            column: 67
          }
        }],
        line: 1464
      },
      "119": {
        loc: {
          start: {
            line: 1478,
            column: 27
          },
          end: {
            line: 1478,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1478,
            column: 27
          },
          end: {
            line: 1478,
            column: 53
          }
        }, {
          start: {
            line: 1478,
            column: 57
          },
          end: {
            line: 1478,
            column: 58
          }
        }],
        line: 1478
      },
      "120": {
        loc: {
          start: {
            line: 1480,
            column: 8
          },
          end: {
            line: 1482,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1480,
            column: 8
          },
          end: {
            line: 1482,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1480
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0,
      "378": 0,
      "379": 0,
      "380": 0,
      "381": 0,
      "382": 0,
      "383": 0,
      "384": 0,
      "385": 0,
      "386": 0,
      "387": 0,
      "388": 0,
      "389": 0,
      "390": 0,
      "391": 0,
      "392": 0,
      "393": 0,
      "394": 0,
      "395": 0,
      "396": 0,
      "397": 0,
      "398": 0,
      "399": 0,
      "400": 0,
      "401": 0,
      "402": 0,
      "403": 0,
      "404": 0,
      "405": 0,
      "406": 0,
      "407": 0,
      "408": 0,
      "409": 0,
      "410": 0,
      "411": 0,
      "412": 0,
      "413": 0,
      "414": 0,
      "415": 0,
      "416": 0,
      "417": 0,
      "418": 0,
      "419": 0,
      "420": 0,
      "421": 0,
      "422": 0,
      "423": 0,
      "424": 0,
      "425": 0,
      "426": 0,
      "427": 0,
      "428": 0,
      "429": 0,
      "430": 0,
      "431": 0,
      "432": 0,
      "433": 0,
      "434": 0,
      "435": 0,
      "436": 0,
      "437": 0,
      "438": 0,
      "439": 0,
      "440": 0,
      "441": 0,
      "442": 0,
      "443": 0,
      "444": 0,
      "445": 0,
      "446": 0,
      "447": 0,
      "448": 0,
      "449": 0,
      "450": 0,
      "451": 0,
      "452": 0,
      "453": 0,
      "454": 0,
      "455": 0,
      "456": 0,
      "457": 0,
      "458": 0,
      "459": 0,
      "460": 0,
      "461": 0,
      "462": 0,
      "463": 0,
      "464": 0,
      "465": 0,
      "466": 0,
      "467": 0,
      "468": 0,
      "469": 0,
      "470": 0,
      "471": 0,
      "472": 0,
      "473": 0,
      "474": 0,
      "475": 0,
      "476": 0,
      "477": 0,
      "478": 0,
      "479": 0,
      "480": 0,
      "481": 0,
      "482": 0,
      "483": 0,
      "484": 0,
      "485": 0,
      "486": 0,
      "487": 0,
      "488": 0,
      "489": 0,
      "490": 0,
      "491": 0,
      "492": 0,
      "493": 0,
      "494": 0,
      "495": 0,
      "496": 0,
      "497": 0,
      "498": 0,
      "499": 0,
      "500": 0,
      "501": 0,
      "502": 0,
      "503": 0,
      "504": 0,
      "505": 0,
      "506": 0,
      "507": 0,
      "508": 0,
      "509": 0,
      "510": 0,
      "511": 0,
      "512": 0,
      "513": 0,
      "514": 0,
      "515": 0,
      "516": 0,
      "517": 0,
      "518": 0,
      "519": 0,
      "520": 0,
      "521": 0,
      "522": 0,
      "523": 0,
      "524": 0,
      "525": 0,
      "526": 0,
      "527": 0,
      "528": 0,
      "529": 0,
      "530": 0,
      "531": 0,
      "532": 0,
      "533": 0,
      "534": 0,
      "535": 0,
      "536": 0,
      "537": 0,
      "538": 0,
      "539": 0,
      "540": 0,
      "541": 0,
      "542": 0,
      "543": 0,
      "544": 0,
      "545": 0,
      "546": 0,
      "547": 0,
      "548": 0,
      "549": 0,
      "550": 0,
      "551": 0,
      "552": 0,
      "553": 0,
      "554": 0,
      "555": 0,
      "556": 0,
      "557": 0,
      "558": 0,
      "559": 0,
      "560": 0,
      "561": 0,
      "562": 0,
      "563": 0,
      "564": 0,
      "565": 0,
      "566": 0,
      "567": 0,
      "568": 0,
      "569": 0,
      "570": 0,
      "571": 0,
      "572": 0,
      "573": 0,
      "574": 0,
      "575": 0,
      "576": 0,
      "577": 0,
      "578": 0,
      "579": 0,
      "580": 0,
      "581": 0,
      "582": 0,
      "583": 0,
      "584": 0,
      "585": 0,
      "586": 0,
      "587": 0,
      "588": 0,
      "589": 0,
      "590": 0,
      "591": 0,
      "592": 0,
      "593": 0,
      "594": 0,
      "595": 0,
      "596": 0,
      "597": 0,
      "598": 0,
      "599": 0,
      "600": 0,
      "601": 0,
      "602": 0,
      "603": 0,
      "604": 0,
      "605": 0,
      "606": 0,
      "607": 0,
      "608": 0,
      "609": 0,
      "610": 0,
      "611": 0,
      "612": 0,
      "613": 0,
      "614": 0,
      "615": 0,
      "616": 0,
      "617": 0,
      "618": 0,
      "619": 0,
      "620": 0,
      "621": 0,
      "622": 0,
      "623": 0,
      "624": 0,
      "625": 0,
      "626": 0,
      "627": 0,
      "628": 0,
      "629": 0,
      "630": 0,
      "631": 0,
      "632": 0,
      "633": 0,
      "634": 0,
      "635": 0,
      "636": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0],
      "79": [0],
      "80": [0],
      "81": [0],
      "82": [0, 0],
      "83": [0, 0, 0, 0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0, 0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0],
      "96": [0, 0],
      "97": [0, 0],
      "98": [0, 0],
      "99": [0, 0],
      "100": [0, 0],
      "101": [0, 0],
      "102": [0, 0],
      "103": [0, 0],
      "104": [0, 0],
      "105": [0, 0],
      "106": [0, 0],
      "107": [0, 0],
      "108": [0, 0],
      "109": [0, 0],
      "110": [0, 0],
      "111": [0, 0],
      "112": [0, 0],
      "113": [0, 0],
      "114": [0, 0],
      "115": [0, 0],
      "116": [0, 0],
      "117": [0, 0],
      "118": [0, 0],
      "119": [0, 0],
      "120": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/payroll/payrollService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/services/payroll/payrollService.ts"],
      sourcesContent: ["import { payrollPeriodModel, PayrollPeriod, CreatePayrollPeriodData } from '../../models/payroll/PayrollPeriod';\nimport { payrollRecordModel, PayrollRecord, PayrollRecordWithEmployee } from '../../models/payroll/PayrollRecord';\nimport { payrollDeductionModel } from '../../models/payroll/PayrollDeduction';\nimport { deductionTypeModel } from '../../models/payroll/DeductionType';\nimport { employeeDeductionBalanceModel } from '../../models/payroll/EmployeeDeductionBalance';\nimport { benefitTypeModel } from '../../models/payroll/BenefitType';\nimport { employeeBenefitModel } from '../../models/payroll/EmployeeBenefit';\nimport { employeeModel } from '../../models/hr/Employee';\nimport { getPool } from '../../config/database';\nimport { isLeaveTypePaid, getLeavePaymentPercentage, getMaxPaidDaysPerYear } from '../../config/leavePolicies';\n// import { attendanceRecordModel } from '../../models/attendance/AttendanceRecord';\nimport { attendanceSessionModel } from '../../models/attendance/AttendanceSession';\n// import { overtimeRequestModel } from '../../models/attendance/OvertimeRequest';\n// import { systemSettingsModel } from '../../models/hr/SystemSettings'; // Temporarily disabled\nimport logger from '../../utils/logger';\nimport { defaultHoursCalculator } from '../../utils/attendanceHoursCalculator';\n\nexport interface PayrollCalculationData {\n  employeeId: string;\n  payrollPeriodId: string;\n  baseSalary: number;\n  totalWorkedHours: number;\n  totalRegularHours: number;\n  totalOvertimeHours: number;\n  totalLateHours: number;\n  lateDeductions: number;\n  employeeDeductions: Array<{\n    type: string;\n    amount: number;\n    remainingBalance: number;\n  }>;\n  employeeBenefits: Array<{\n    type: string;\n    amount: number;\n  }>;\n}\n\nexport interface PayrollSummary {\n  period: PayrollPeriod;\n  totalEmployees: number;\n  totalGrossPay: number;\n  totalDeductions: number;\n  totalNetPay: number;\n  processedRecords: number;\n  pendingRecords: number;\n}\n\nexport interface EmployeePayrollData {\n  employee: {\n    id: string;\n    employee_id: string;\n    name: string;\n    department: string;\n  };\n  baseSalary: number;\n  totalWorkedHours: number;\n  totalRegularHours: number;\n  totalOvertimeHours: number;\n  totalLateHours: number;\n  lateDeductions: number;\n  hourlyRate: number;\n  grossPay: number;\n  employeeDeductions: Array<{\n    type: string;\n    amount: number;\n    remainingBalance: number;\n  }>;\n  employeeBenefits: Array<{\n    type: string;\n    amount: number;\n  }>;\n  totalDeductions: number;\n  totalBenefits: number;\n  netPay: number;\n  paidLeaveHours: number; // Hours from approved leave days\n}\n\nclass PayrollService {\n  async createPayrollPeriod(data: CreatePayrollPeriodData): Promise<PayrollPeriod> {\n    try {\n      // Validate date range\n      if (data.start_date >= data.end_date) {\n        throw new Error('Start date must be before end date');\n      }\n\n      // Check for overlapping periods\n      const overlappingPeriods = await payrollPeriodModel.findByDateRange(data.start_date, data.end_date);\n      if (overlappingPeriods.length > 0) {\n        throw new Error('Payroll period overlaps with existing period');\n      }\n\n      const period = await payrollPeriodModel.create(data);\n      logger.info('Payroll period created', { periodId: period.id, periodName: period.period_name });\n      return period;\n    } catch (error) {\n      logger.error('Error creating payroll period', { error: (error as Error).message, data });\n      throw error;\n    }\n  }\n\n  async getPayrollPeriods(params: any = {}): Promise<{ periods: PayrollPeriod[]; total: number }> {\n    try {\n      return await payrollPeriodModel.findAll(params);\n    } catch (error) {\n      logger.error('Error getting payroll periods', { error: (error as Error).message, params });\n      throw error;\n    }\n  }\n\n  async getPayrollPeriod(id: string): Promise<PayrollPeriod | null> {\n    try {\n      return await payrollPeriodModel.findById(id);\n    } catch (error) {\n      logger.error('Error getting payroll period', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  async updatePayrollPeriod(id: string, data: any): Promise<PayrollPeriod | null> {\n    try {\n      return await payrollPeriodModel.update(id, data);\n    } catch (error) {\n      logger.error('Error updating payroll period', { error: (error as Error).message, id, data });\n      throw error;\n    }\n  }\n\n  async deletePayrollPeriod(id: string): Promise<boolean> {\n    try {\n      // Check if period has payroll records\n      const records = await payrollRecordModel.findByPayrollPeriod(id);\n      if (records.length > 0) {\n        throw new Error('Cannot delete payroll period with existing records');\n      }\n\n      return await payrollPeriodModel.delete(id);\n    } catch (error) {\n      logger.error('Error deleting payroll period', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  async calculateEmployeePayroll(employeeId: string, payrollPeriodId: string): Promise<EmployeePayrollData> {\n    try {\n      // Get employee data\n      const employee = await employeeModel.findByIdWithDetails(employeeId);\n      if (!employee) {\n        throw new Error('Employee not found');\n      }\n\n      // Get payroll period\n      const period = await payrollPeriodModel.findById(payrollPeriodId);\n      if (!period) {\n        throw new Error('Payroll period not found');\n      }\n\n      // Calculate expected working days for the month\n      const startDate = new Date(period.start_date);\n      const endDate = new Date(period.end_date);\n      const expectedWorkingDays = this.calculateWorkingDays(startDate, endDate);\n      const expectedHours = expectedWorkingDays * 8; // 8 hours per working day\n\n      // Get attendance data using the mathematical formulation\n      // This uses grace periods, session caps, and proper morning/afternoon calculations\n      const attendanceData = await this.calculateAttendanceHours(\n        employeeId, \n        period.start_date, \n        period.end_date\n      );\n      \n      const totalWorkedHours = attendanceData.totalWorkedHours;\n      const totalRegularHours = attendanceData.totalRegularHours;\n      const totalOvertimeHours = attendanceData.totalOvertimeHours;\n      const totalLateHours = attendanceData.totalLateHours;\n\n      // Get approved leave days for the payroll period\n      const paidLeaveHours = await this.getPaidLeaveHours(employeeId, startDate, endDate);\n\n      // Debug logging for payroll calculation\n      logger.info('Payroll calculation debug', {\n        employeeId,\n        payrollPeriodId,\n        attendanceData: attendanceData,\n        totalWorkedHours,\n        totalRegularHours,\n        totalOvertimeHours,\n        totalLateHours,\n        expectedHours,\n        baseSalary: employee.base_salary\n      });\n\n      // Parse base salary\n      const baseSalary = Number(employee.base_salary) || 0;\n\n      // Calculate hourly rate\n      const hourlyRate = baseSalary / expectedHours;\n\n      // Calculate late deductions\n      const lateDeductions = totalLateHours * hourlyRate;\n\n      // Get employee-specific deduction balances\n      const employeeDeductionBalances = await employeeDeductionBalanceModel.findActiveByEmployee(employeeId);\n      \n      // Apply employee deductions (until balance reaches zero)\n      const employeeDeductions: Array<{ type: string; amount: number; remainingBalance: number }> = [];\n      let totalEmployeeDeductions = 0;\n\n      for (const balance of employeeDeductionBalances) {\n        // Calculate actual deduction (minimum of monthly amount or remaining balance)\n        const monthlyAmount = Number(balance.monthly_deduction_amount) || 0;\n        const remainingBalance = Number(balance.remaining_balance) || 0;\n        const actualDeduction = Math.min(monthlyAmount, remainingBalance);\n        \n        if (actualDeduction > 0) {\n          employeeDeductions.push({\n            type: balance.deduction_type_name || 'Unknown',\n            amount: actualDeduction,\n            remainingBalance: remainingBalance - actualDeduction\n          });\n          totalEmployeeDeductions += actualDeduction;\n        }\n      }\n\n      // Get employee benefits\n      const employeeBenefits = await employeeBenefitModel.findActiveByEmployee(employeeId);\n      \n      const benefits: Array<{ type: string; amount: number }> = [];\n      let totalBenefits = 0;\n\n      for (const benefit of employeeBenefits) {\n        const benefitAmount = Number(benefit.amount) || 0;\n        benefits.push({\n          type: benefit.benefit_type?.name || 'Unknown',\n          amount: benefitAmount\n        });\n        totalBenefits += benefitAmount;\n      }\n\n      // Calculate gross pay based on worked hours + paid leave hours: (total paid hours / total working hours in month) * base salary\n      // Include approved leave days as paid time\n      const totalPaidHours = totalWorkedHours + paidLeaveHours;\n      const grossPay = expectedHours > 0 ? (totalPaidHours / expectedHours) * baseSalary : 0;\n      \n      // Calculate net pay: gross pay + benefits - deductions\n      const netPay = grossPay + totalBenefits - totalEmployeeDeductions - lateDeductions;\n\n      // Debug logging for gross pay calculation\n      logger.info('Gross pay calculation debug', {\n        employeeId,\n        totalWorkedHours,\n        paidLeaveHours,\n        totalPaidHours,\n        expectedHours,\n        baseSalary,\n        grossPay,\n        totalBenefits,\n        totalEmployeeDeductions,\n        lateDeductions,\n        netPay\n      });\n\n      const payrollData: EmployeePayrollData = {\n        employee: {\n          id: employee.id,\n          employee_id: employee.employee_id,\n          name: `${employee.user.first_name} ${employee.user.last_name}`,\n          department: employee.department?.name || 'N/A'\n        },\n        baseSalary: baseSalary, // Full monthly base salary\n        totalWorkedHours,\n        totalRegularHours,\n        totalOvertimeHours,\n        totalLateHours,\n        lateDeductions,\n        hourlyRate,\n        grossPay,\n        employeeDeductions,\n        employeeBenefits: benefits,\n        totalDeductions: totalEmployeeDeductions,\n        totalBenefits,\n        netPay,\n        paidLeaveHours // Add paid leave hours to the response\n      };\n\n      logger.info('Employee payroll calculated', { \n        employeeId, \n        payrollPeriodId, \n        baseSalary: employee.base_salary,\n        totalDeductions: totalEmployeeDeductions,\n        totalBenefits,\n        netPay \n      });\n\n      return payrollData;\n    } catch (error) {\n      logger.error('Error calculating employee payroll', { \n        error: (error as Error).message, \n        employeeId, \n        payrollPeriodId \n      });\n      throw error;\n    }\n  }\n\n  async generatePayrollRecords(payrollPeriodId: string, departmentId?: string): Promise<PayrollRecord[]> {\n    try {\n      // Get active employees - either all or filtered by department\n      const employees = departmentId \n        ? await employeeModel.findAll({ status: 'active', department_id: departmentId })\n        : await employeeModel.findAll({ status: 'active' });\n      const records: PayrollRecord[] = [];\n\n      for (const employee of employees.employees) {\n        // Calculate payroll for this employee using new logic\n        const payrollData = await this.calculateEmployeePayroll(employee.id, payrollPeriodId);\n\n        // Check if record already exists\n        const existingRecord = await payrollRecordModel.findByPeriodAndEmployee(\n          payrollPeriodId,\n          employee.id\n        );\n\n        if (existingRecord) {\n          // Update existing record\n          const updatedRecord = await payrollRecordModel.update(existingRecord.id, {\n            base_salary: payrollData.baseSalary,\n            total_worked_hours: payrollData.totalWorkedHours,\n            hourly_rate: payrollData.hourlyRate,\n            total_regular_hours: payrollData.totalRegularHours,\n            total_overtime_hours: payrollData.totalOvertimeHours,\n            total_late_hours: payrollData.totalLateHours,\n            late_deductions: payrollData.lateDeductions,\n            paid_leave_hours: payrollData.paidLeaveHours,\n            gross_pay: payrollData.grossPay,\n            net_pay: payrollData.netPay,\n            total_deductions: payrollData.totalDeductions,\n            total_benefits: payrollData.totalBenefits,\n            status: 'draft'\n          });\n\n          if (updatedRecord) {\n            records.push(updatedRecord);\n          }\n        } else {\n          // Create new record\n          const newRecord = await payrollRecordModel.create({\n            payroll_period_id: payrollPeriodId,\n            employee_id: employee.id,\n            base_salary: payrollData.baseSalary,\n            total_worked_hours: payrollData.totalWorkedHours,\n            hourly_rate: payrollData.hourlyRate,\n            total_regular_hours: payrollData.totalRegularHours,\n            total_overtime_hours: payrollData.totalOvertimeHours,\n            total_late_hours: payrollData.totalLateHours,\n            late_deductions: payrollData.lateDeductions,\n            paid_leave_hours: payrollData.paidLeaveHours,\n            gross_pay: payrollData.grossPay,\n            net_pay: payrollData.netPay,\n            total_deductions: payrollData.totalDeductions,\n            total_benefits: payrollData.totalBenefits,\n            status: 'draft'\n          });\n\n          records.push(newRecord);\n        }\n\n        // Create deduction records and update employee deduction balances\n        const record = records[records.length - 1];\n        if (record) {\n          // Delete existing deductions\n          await payrollDeductionModel.deleteByPayrollRecord(record.id);\n\n          // Create new deduction records and update balances\n          for (const deduction of payrollData.employeeDeductions) {\n            // Find the deduction type ID by name\n            const deductionType = await deductionTypeModel.findByName(deduction.type);\n            if (deductionType) {\n              await payrollDeductionModel.create({\n                payroll_record_id: record.id,\n                deduction_type_id: deductionType.id,\n                name: deduction.type,\n                amount: deduction.amount\n              });\n\n              // Update employee deduction balance\n              const employeeDeductionBalances = await employeeDeductionBalanceModel.findByEmployee(employee.id);\n              const balance = employeeDeductionBalances.find(b => b.deduction_type_id === deductionType.id);\n              \n              if (balance) {\n                await employeeDeductionBalanceModel.update(balance.id, {\n                  remaining_balance: deduction.remainingBalance,\n                  is_active: deduction.remainingBalance > 0\n                });\n              }\n            }\n          }\n        }\n      }\n\n      logger.info('Payroll records generated', { \n        payrollPeriodId, \n        recordCount: records.length \n      });\n\n      return records;\n    } catch (error) {\n      logger.error('Error generating payroll records', { \n        error: (error as Error).message, \n        payrollPeriodId \n      });\n      throw error;\n    }\n  }\n\n  async getPayrollRecords(params: any = {}): Promise<{ records: PayrollRecordWithEmployee[]; total: number }> {\n    try {\n      return await payrollRecordModel.findAllWithEmployee(params);\n    } catch (error) {\n      logger.error('Error getting payroll records', { error: (error as Error).message, params });\n      throw error;\n    }\n  }\n\n  /**\n   * Update payroll record status\n   */\n  async updatePayrollRecordStatus(recordId: string, status: 'draft' | 'processed' | 'paid'): Promise<PayrollRecord> {\n    try {\n      const updatedRecord = await payrollRecordModel.update(recordId, { status });\n      if (!updatedRecord) {\n        throw new Error('Payroll record not found');\n      }\n\n      logger.info('Payroll record status updated', {\n        recordId,\n        status,\n        employeeId: updatedRecord.employee_id\n      });\n\n      return updatedRecord;\n    } catch (error) {\n      logger.error('Error updating payroll record status', { \n        error: (error as Error).message, \n        recordId, \n        status \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Mark payroll period as completed (when all departments have approved)\n   */\n  async completePayrollPeriod(periodId: string): Promise<PayrollPeriod> {\n    try {\n      const updatedPeriod = await payrollPeriodModel.update(periodId, { status: 'completed' });\n      if (!updatedPeriod) {\n        throw new Error('Payroll period not found');\n      }\n\n      logger.info('Payroll period marked as completed', {\n        periodId,\n        periodName: updatedPeriod.period_name\n      });\n\n      return updatedPeriod;\n    } catch (error) {\n      logger.error('Error completing payroll period', { \n        error: (error as Error).message, \n        periodId \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Bulk update payroll records to paid status\n   */\n  async bulkUpdatePayrollRecordsToPaid(options: {\n    periodId?: string;\n    departmentId?: string;\n    recordIds?: string[];\n  }): Promise<{ updatedCount: number }> {\n    try {\n      const { getPool } = await import('../../config/database');\n      const pool = getPool();\n\n      let whereClause = '';\n      const params: any[] = [];\n      let paramIndex = 1;\n\n      if (options.periodId) {\n        whereClause += ` WHERE payroll_period_id = $${paramIndex}`;\n        params.push(options.periodId);\n        paramIndex++;\n      }\n\n      if (options.departmentId) {\n        whereClause += options.periodId ? ' AND' : ' WHERE';\n        whereClause += ` employee_id IN (SELECT id FROM employees WHERE department_id = $${paramIndex})`;\n        params.push(options.departmentId);\n        paramIndex++;\n      }\n\n      if (options.recordIds && options.recordIds.length > 0) {\n        whereClause += options.periodId || options.departmentId ? ' AND' : ' WHERE';\n        whereClause += ` id = ANY($${paramIndex})`;\n        params.push(options.recordIds);\n        paramIndex++;\n      }\n\n      const updateQuery = `\n        UPDATE payroll_records \n        SET status = 'paid', updated_at = CURRENT_TIMESTAMP\n        ${whereClause}\n      `;\n\n      const result = await pool.query(updateQuery, params);\n\n      logger.info('Bulk updated payroll records to paid', {\n        updatedCount: result.rowCount,\n        options\n      });\n\n      // If updating by periodId, check if all records in the period are now paid\n      if (options.periodId) {\n        await this.checkAndCompletePayrollPeriod(options.periodId);\n      }\n\n      return { updatedCount: result.rowCount || 0 };\n    } catch (error) {\n      logger.error('Error bulk updating payroll records to paid', { \n        error: (error as Error).message, \n        options \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Check if all payroll records in a period are paid and auto-complete the period\n   */\n  async checkAndCompletePayrollPeriod(periodId: string): Promise<void> {\n    try {\n      const { getPool } = await import('../../config/database');\n      const pool = getPool();\n\n      // Check if all records in the period are paid\n      const checkQuery = `\n        SELECT \n          COUNT(*) as total_records,\n          COUNT(CASE WHEN status = 'paid' THEN 1 END) as paid_records\n        FROM payroll_records \n        WHERE payroll_period_id = $1\n      `;\n      \n      const result = await pool.query(checkQuery, [periodId]);\n      const { total_records, paid_records } = result.rows[0];\n      \n      // If all records are paid, complete the period\n      if (total_records > 0 && parseInt(total_records) === parseInt(paid_records)) {\n        await this.completePayrollPeriod(periodId);\n        logger.info(`Auto-completed payroll period ${periodId} - all records are paid`);\n      }\n    } catch (error) {\n      logger.error('Error checking and completing payroll period', { \n        error: (error as Error).message, \n        periodId \n      });\n    }\n  }\n\n\n\n\n  /**\n   * Bulk update payroll records status for a period\n   */\n  async bulkUpdatePayrollRecordsStatus(\n    payrollPeriodId: string, \n    status: 'draft' | 'processed' | 'paid',\n    departmentId?: string\n  ): Promise<PayrollRecord[]> {\n    try {\n      // Get all records for the period\n      const { records } = await payrollRecordModel.findAllWithEmployee({\n        payroll_period_id: payrollPeriodId,\n        department_id: departmentId\n      });\n\n      // Update each record\n      const updatedRecords: PayrollRecord[] = [];\n      for (const record of records) {\n        const updatedRecord = await payrollRecordModel.update(record.id, { status });\n        if (updatedRecord) {\n          updatedRecords.push(updatedRecord);\n        }\n      }\n\n      logger.info('Bulk payroll records status updated', {\n        payrollPeriodId,\n        status,\n        departmentId,\n        updatedCount: updatedRecords.length\n      });\n\n      return updatedRecords;\n    } catch (error) {\n      logger.error('Error bulk updating payroll records status', { \n        error: (error as Error).message, \n        payrollPeriodId, \n        status,\n        departmentId\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Reprocess payroll records for a period (clears existing records and regenerates)\n   */\n  async reprocessPayrollRecords(payrollPeriodId: string, departmentId?: string): Promise<PayrollRecord[]> {\n    try {\n      logger.info('Starting payroll reprocessing', {\n        payrollPeriodId,\n        departmentId\n      });\n\n      // First, delete existing payroll records for this period\n      const existingRecords = await payrollRecordModel.findAllWithEmployee({\n        payroll_period_id: payrollPeriodId,\n        department_id: departmentId\n      });\n\n      for (const record of existingRecords.records) {\n        // Delete associated payroll deductions first\n        await payrollDeductionModel.deleteByPayrollRecord(record.id);\n        // Delete the payroll record\n        await payrollRecordModel.delete(record.id);\n      }\n\n      logger.info('Cleared existing payroll records', {\n        payrollPeriodId,\n        departmentId,\n        deletedCount: existingRecords.records.length\n      });\n\n      // Reset approval status for this period (if reprocessing all departments)\n      if (!departmentId) {\n        const { PayrollApprovalService } = await import('./payrollApprovalService');\n        const payrollApprovalService = new PayrollApprovalService();\n        await payrollApprovalService.resetApprovalStatusForPeriod(payrollPeriodId);\n        logger.info('Reset approval status for payroll period', { payrollPeriodId });\n      }\n\n      // Now regenerate the payroll records\n      const newRecords = await this.generatePayrollRecords(payrollPeriodId, departmentId);\n\n      logger.info('Payroll reprocessing completed', {\n        payrollPeriodId,\n        departmentId,\n        newRecordCount: newRecords.length\n      });\n\n      return newRecords;\n    } catch (error) {\n      logger.error('Error reprocessing payroll records', { \n        error: (error as Error).message, \n        payrollPeriodId, \n        departmentId\n      });\n      throw error;\n    }\n  }\n\n  async getPayrollRecord(id: string): Promise<PayrollRecord | null> {\n    try {\n      return await payrollRecordModel.findById(id);\n    } catch (error) {\n      logger.error('Error getting payroll record', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  async updatePayrollRecord(id: string, data: any): Promise<PayrollRecord | null> {\n    try {\n      return await payrollRecordModel.update(id, data);\n    } catch (error) {\n      logger.error('Error updating payroll record', { error: (error as Error).message, id, data });\n      throw error;\n    }\n  }\n\n  async getPayrollSummary(payrollPeriodId: string): Promise<PayrollSummary> {\n    try {\n      const period = await payrollPeriodModel.findById(payrollPeriodId);\n      if (!period) {\n        throw new Error('Payroll period not found');\n      }\n\n      const records = await payrollRecordModel.findByPayrollPeriod(payrollPeriodId);\n      \n      const totalEmployees = records.length;\n      const totalGrossPay = records.reduce((sum, record) => sum + record.gross_pay, 0);\n      \n      let totalDeductions = 0;\n      let processedRecords = 0;\n      let pendingRecords = 0;\n\n      for (const record of records) {\n        const deductions = await payrollDeductionModel.findByPayrollRecord(record.id);\n        const recordDeductions = deductions.reduce((sum, deduction) => sum + deduction.amount, 0);\n        totalDeductions += recordDeductions;\n\n        if (record.status === 'processed' || record.status === 'paid') {\n          processedRecords++;\n        } else {\n          pendingRecords++;\n        }\n      }\n\n      const totalNetPay = totalGrossPay - totalDeductions;\n\n      const summary: PayrollSummary = {\n        period,\n        totalEmployees,\n        totalGrossPay,\n        totalDeductions,\n        totalNetPay,\n        processedRecords,\n        pendingRecords\n      };\n\n      logger.info('Payroll summary generated', { \n        payrollPeriodId, \n        totalEmployees, \n        totalNetPay \n      });\n\n      return summary;\n    } catch (error) {\n      logger.error('Error getting payroll summary', { \n        error: (error as Error).message, \n        payrollPeriodId \n      });\n      throw error;\n    }\n  }\n\n  async approvePayrollRecord(recordId: string, approverId: string): Promise<PayrollRecord | null> {\n    try {\n      const record = await payrollRecordModel.update(recordId, { status: 'processed' });\n      \n      if (record) {\n        logger.info('Payroll record approved', { recordId, approverId });\n      }\n\n      return record;\n    } catch (error) {\n      logger.error('Error approving payroll record', { \n        error: (error as Error).message, \n        recordId, \n        approverId \n      });\n      throw error;\n    }\n  }\n\n  async markPayrollAsPaid(recordId: string): Promise<PayrollRecord | null> {\n    try {\n      const record = await payrollRecordModel.update(recordId, { status: 'paid' });\n      \n      if (record) {\n        logger.info('Payroll record marked as paid', { recordId });\n      }\n\n      return record;\n    } catch (error) {\n      logger.error('Error marking payroll as paid', { \n        error: (error as Error).message, \n        recordId \n      });\n      throw error;\n    }\n  }\n\n  async exportPayrollRecords(format: 'csv' | 'pdf', params: any = {}): Promise<string | Buffer> {\n    try {\n      const records = await payrollRecordModel.findAllWithEmployee(params);\n      \n      if (format === 'csv') {\n        return this.generateCSV(records.records);\n      } else {\n        return this.generatePDF(records.records);\n      }\n    } catch (error) {\n      logger.error('Error exporting payroll records', { \n        error: (error as Error).message, \n        format,\n        params \n      });\n      throw error;\n    }\n  }\n\n  private generateCSV(records: any[]): string {\n    const headers = [\n      'Employee ID',\n      'Employee Name',\n      'Period',\n      'Base Salary',\n      'Hours Worked',\n      'Gross Pay',\n      'Deductions',\n      'Benefits',\n      'Net Pay',\n      'Status',\n      'Created At'\n    ];\n\n    const rows = records.map(record => [\n      record.employeeId,\n      record.employeeName || 'N/A',\n      record.periodName || 'N/A',\n      record.baseSalary || 0,\n      record.hoursWorked || 0,\n      record.grossPay || 0,\n      record.totalDeductions || 0,\n      record.totalBenefits || 0,\n      record.netPay || 0,\n      record.status || 'draft',\n      record.createdAt ? new Date(record.createdAt).toLocaleDateString() : 'N/A'\n    ]);\n\n    const csvContent = [headers, ...rows]\n      .map(row => row.map(field => `\"${field}\"`).join(','))\n      .join('\\n');\n\n    return csvContent;\n  }\n\n  private generatePDF(records: any[]): Buffer {\n    // For now, return a simple text representation\n    // In a real implementation, you would use a PDF library like puppeteer or pdfkit\n    const content = records.map(record => \n      `${record.employeeName || 'N/A'} - ${record.periodName || 'N/A'} - \u20B1${record.netPay || 0}`\n    ).join('\\n');\n    \n    return Buffer.from(content, 'utf-8');\n  }\n\n  async getPayrollStats(): Promise<{\n    totalEmployees: number;\n    totalPayroll: number;\n    processedPeriods: number;\n    pendingPeriods: number;\n  }> {\n    try {\n      // Get total employees\n      const totalEmployees = await employeeModel.getTotalEmployeeCount();\n      \n      // Get total payroll (sum of all net pay from completed records)\n      const totalPayrollResult = await payrollRecordModel.getTotalNetPay();\n      const totalPayroll = totalPayrollResult || 0;\n      \n      // Get processed periods (completed status)\n      const processedPeriods = await payrollPeriodModel.countByStatus(['completed']);\n      \n      // Get pending periods (draft status)\n      const pendingPeriods = await payrollPeriodModel.countByStatus(['draft']);\n\n      return {\n        totalEmployees,\n        totalPayroll,\n        processedPeriods,\n        pendingPeriods\n      };\n    } catch (error) {\n      logger.error('Error getting payroll statistics', { \n        error: (error as Error).message \n      });\n      throw error;\n    }\n  }\n\n  // New methods for deduction types management\n  async createDeductionType(data: any): Promise<any> {\n    try {\n      return await deductionTypeModel.create(data);\n    } catch (error) {\n      logger.error('Error creating deduction type', { error: (error as Error).message, data });\n      throw error;\n    }\n  }\n\n  async getDeductionTypes(params: any = {}): Promise<{ records: any[]; total: number }> {\n    try {\n      return await deductionTypeModel.findAll(params);\n    } catch (error) {\n      logger.error('Error getting deduction types', { error: (error as Error).message, params });\n      throw error;\n    }\n  }\n\n  async updateDeductionType(id: string, data: any): Promise<any> {\n    try {\n      return await deductionTypeModel.update(id, data);\n    } catch (error) {\n      logger.error('Error updating deduction type', { error: (error as Error).message, id, data });\n      throw error;\n    }\n  }\n\n  async deleteDeductionType(id: string): Promise<boolean> {\n    try {\n      return await deductionTypeModel.delete(id);\n    } catch (error) {\n      logger.error('Error deleting deduction type', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  // New methods for benefit types management\n  async createBenefitType(data: any): Promise<any> {\n    try {\n      return await benefitTypeModel.create(data);\n    } catch (error) {\n      logger.error('Error creating benefit type', { error: (error as Error).message, data });\n      throw error;\n    }\n  }\n\n  async getBenefitTypes(params: any = {}): Promise<{ records: any[]; total: number }> {\n    try {\n      return await benefitTypeModel.findAll(params);\n    } catch (error) {\n      logger.error('Error getting benefit types', { error: (error as Error).message, params });\n      throw error;\n    }\n  }\n\n  async updateBenefitType(id: string, data: any): Promise<any> {\n    try {\n      return await benefitTypeModel.update(id, data);\n    } catch (error) {\n      logger.error('Error updating benefit type', { error: (error as Error).message, id, data });\n      throw error;\n    }\n  }\n\n  async deleteBenefitType(id: string): Promise<boolean> {\n    try {\n      return await benefitTypeModel.delete(id);\n    } catch (error) {\n      logger.error('Error deleting benefit type', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  // New methods for employee deduction balances management\n  async getEmployeeDeductionBalances(params: any = {}): Promise<{ records: any[]; total: number }> {\n    try {\n      return await employeeDeductionBalanceModel.findAll(params);\n    } catch (error) {\n      logger.error('Error getting employee deduction balances', { error: (error as Error).message, params });\n      throw error;\n    }\n  }\n\n  async createEmployeeDeductionBalance(data: any): Promise<any> {\n    try {\n      return await employeeDeductionBalanceModel.create(data);\n    } catch (error) {\n      logger.error('Error creating employee deduction balance', { error: (error as Error).message, data });\n      throw error;\n    }\n  }\n\n  async updateEmployeeDeductionBalance(id: string, data: any): Promise<any> {\n    try {\n      return await employeeDeductionBalanceModel.update(id, data);\n    } catch (error) {\n      logger.error('Error updating employee deduction balance', { error: (error as Error).message, id, data });\n      throw error;\n    }\n  }\n\n  async deleteEmployeeDeductionBalance(id: string): Promise<boolean> {\n    try {\n      return await employeeDeductionBalanceModel.delete(id);\n    } catch (error) {\n      logger.error('Error deleting employee deduction balance', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  // New methods for employee benefits management\n  async getEmployeeBenefits(params: any = {}): Promise<{ records: any[]; total: number }> {\n    try {\n      return await employeeBenefitModel.findAll(params);\n    } catch (error) {\n      logger.error('Error getting employee benefits', { error: (error as Error).message, params });\n      throw error;\n    }\n  }\n\n  async createEmployeeBenefit(data: any): Promise<any> {\n    try {\n      return await employeeBenefitModel.create(data);\n    } catch (error) {\n      logger.error('Error creating employee benefit', { error: (error as Error).message, data });\n      throw error;\n    }\n  }\n\n  async updateEmployeeBenefit(id: string, data: any): Promise<any> {\n    try {\n      return await employeeBenefitModel.update(id, data);\n    } catch (error) {\n      logger.error('Error updating employee benefit', { error: (error as Error).message, id, data });\n      throw error;\n    }\n  }\n\n  async deleteEmployeeBenefit(id: string): Promise<boolean> {\n    try {\n      return await employeeBenefitModel.delete(id);\n    } catch (error) {\n      logger.error('Error deleting employee benefit', { error: (error as Error).message, id });\n      throw error;\n    }\n  }\n\n  // CSV upload for employee benefits\n  async uploadEmployeeBenefits(csvData: any[]): Promise<{ success: number; errors: any[] }> {\n    try {\n      const errors: any[] = [];\n      const successData: any[] = [];\n\n      for (let i = 0; i < csvData.length; i++) {\n        const row = csvData[i];\n        try {\n          // Validate required fields\n          if (!row.employee_name || !row.employee_id || !row.benefit_type_name || !row.benefit_type_id || !row.amount) {\n            errors.push({\n              row: i + 1,\n              error: 'Missing required fields: employee_name, employee_id, benefit_type_name, benefit_type_id, amount'\n            });\n            continue;\n          }\n\n          // Find employee by employee_id\n          const employee = await employeeModel.findByEmployeeId(row.employee_id);\n          if (!employee) {\n            errors.push({\n              row: i + 1,\n              error: `Employee not found: ${row.employee_id}`\n            });\n            continue;\n          }\n\n          // Find benefit type by UUID\n          const benefitType = await benefitTypeModel.findById(row.benefit_type_id);\n          if (!benefitType) {\n            errors.push({\n              row: i + 1,\n              error: `Benefit type not found: ${row.benefit_type_id}`\n            });\n            continue;\n          }\n\n          // Check if record already exists (unique constraint: employee_id, benefit_type_id, start_date)\n          const existingRecord = await employeeBenefitModel.findByEmployeeAndBenefitTypeAndDate(\n            employee.id, \n            benefitType.id, \n            new Date(row.start_date || new Date())\n          );\n          \n          if (existingRecord) {\n            errors.push({\n              row: i + 1,\n              error: `Record already exists for employee ${row.employee_id} with benefit type ${row.benefit_type_name} on ${row.start_date}`\n            });\n            continue;\n          }\n\n          // Prepare data for creation\n          const benefitData = {\n            employee_id: employee.id,\n            benefit_type_id: benefitType.id,\n            amount: parseFloat(row.amount),\n            start_date: new Date(row.start_date || new Date()),\n            end_date: row.end_date ? new Date(row.end_date) : null,\n            is_active: row.is_active !== 'false'\n          };\n\n          successData.push(benefitData);\n        } catch (error) {\n          errors.push({\n            row: i + 1,\n            error: (error as Error).message\n          });\n        }\n      }\n\n      // Bulk create successful records\n      if (successData.length > 0) {\n        await employeeBenefitModel.bulkCreate(successData);\n      }\n\n      logger.info('Employee benefits uploaded', { \n        success: successData.length, \n        errors: errors.length \n      });\n\n      return {\n        success: successData.length,\n        errors\n      };\n    } catch (error) {\n      logger.error('Error uploading employee benefits', { error: (error as Error).message });\n      throw error;\n    }\n  }\n\n  // CSV upload for employee deduction balances\n  async uploadEmployeeDeductionBalances(csvData: any[]): Promise<{ success: number; errors: any[] }> {\n    try {\n      const errors: any[] = [];\n      const successData: any[] = [];\n\n      for (let i = 0; i < csvData.length; i++) {\n        const row = csvData[i];\n        try {\n          // Validate required fields\n          if (!row.employee_name || !row.employee_id || !row.deduction_type_name || !row.remaining_balance) {\n            errors.push({\n              row: i + 1,\n              error: 'Missing required fields: employee_name, employee_id, deduction_type_name, remaining_balance'\n            });\n            continue;\n          }\n\n          // Find employee by employee_id\n          const employee = await employeeModel.findByEmployeeId(row.employee_id);\n          if (!employee) {\n            errors.push({\n              row: i + 1,\n              error: `Employee not found: ${row.employee_id}`\n            });\n            continue;\n          }\n\n          // Find deduction type by UUID\n          const deductionType = await deductionTypeModel.findById(row.deduction_type_id);\n          if (!deductionType) {\n            errors.push({\n              row: i + 1,\n              error: `Deduction type not found: ${row.deduction_type_id}`\n            });\n            continue;\n          }\n\n          // Check if record already exists (unique constraint: employee_id, deduction_type_id, start_date)\n          const existingRecord = await employeeDeductionBalanceModel.findByEmployeeAndDeductionTypeAndDate(\n            employee.id, \n            deductionType.id, \n            new Date(row.start_date || new Date())\n          );\n          \n          if (existingRecord) {\n            errors.push({\n              row: i + 1,\n              error: `Record already exists for employee ${row.employee_id} with deduction type ${row.deduction_type_name} on ${row.start_date}`\n            });\n            continue;\n          }\n\n          // Prepare data for creation\n          const balanceData = {\n            employee_id: employee.id,\n            deduction_type_id: deductionType.id,\n            original_amount: parseFloat(row.remaining_balance),\n            remaining_balance: parseFloat(row.remaining_balance),\n            monthly_deduction_amount: parseFloat(row.monthly_deduction_amount || '0'),\n            start_date: new Date(row.start_date || new Date()),\n            end_date: row.end_date ? new Date(row.end_date) : null,\n            is_active: row.is_active !== 'false'\n          };\n\n          successData.push(balanceData);\n        } catch (error) {\n          errors.push({\n            row: i + 1,\n            error: (error as Error).message\n          });\n        }\n      }\n\n      // Bulk create successful records\n      if (successData.length > 0) {\n        await employeeDeductionBalanceModel.bulkCreate(successData);\n      }\n\n      logger.info('Employee deduction balances uploaded', { \n        success: successData.length, \n        errors: errors.length \n      });\n\n      return {\n        success: successData.length,\n        errors\n      };\n    } catch (error) {\n      logger.error('Error uploading employee deduction balances', { error: (error as Error).message });\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate working days between two dates (excluding weekends)\n   * @param startDate Start date\n   * @param endDate End date\n   * @returns Number of working days\n   */\n  private calculateWorkingDays(startDate: Date, endDate: Date): number {\n    let workingDays = 0;\n    const currentDate = new Date(startDate);\n    \n    while (currentDate <= endDate) {\n      // Check if it's not a weekend (Saturday = 6, Sunday = 0)\n      if (currentDate.getDay() !== 0 && currentDate.getDay() !== 6) {\n        workingDays++;\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    \n    return workingDays;\n  }\n\n  /**\n   * Calculate attendance hours using the mathematical formulation\n   */\n  private async calculateAttendanceHours(employeeId: string, startDate: Date, endDate: Date): Promise<{\n    totalWorkedHours: number;\n    totalRegularHours: number;\n    totalOvertimeHours: number;\n    totalLateHours: number;\n    totalWorkingDays: number;\n  }> {\n    const pool = getPool();\n    \n    // Get all attendance records for the period\n    const attendanceQuery = `\n      SELECT ar.id, ar.date, ar.overall_status\n      FROM attendance_records ar\n      WHERE ar.employee_id = $1 \n        AND ar.date >= $2 \n        AND ar.date <= $3\n        AND ar.overall_status IN ('present', 'late', 'partial')\n      ORDER BY ar.date\n    `;\n\n    const result = await pool.query(attendanceQuery, [employeeId, startDate, endDate]);\n    const attendanceRecords = result.rows;\n\n    let totalWorkedHours = 0;\n    let totalRegularHours = 0;\n    let totalOvertimeHours = 0;\n    let totalLateHours = 0;\n    let totalWorkingDays = attendanceRecords.length;\n\n    // Calculate hours for each attendance record using the new formula\n    for (const record of attendanceRecords) {\n      const sessions = await attendanceSessionModel.getSessionsByAttendanceRecord(record.id);\n      const hoursResult = defaultHoursCalculator.calculateFromSessions(sessions);\n\n      totalWorkedHours += hoursResult.totalHours;\n\n      // Calculate regular and overtime hours (8 hours per day is regular)\n      if (hoursResult.totalHours <= 8) {\n        totalRegularHours += hoursResult.totalHours;\n      } else {\n        totalRegularHours += 8;\n        totalOvertimeHours += (hoursResult.totalHours - 8);\n      }\n\n      // Log the calculation for debugging\n      logger.info('Payroll hours calculation', {\n        employeeId,\n        date: record.date,\n        morningHours: hoursResult.morningHours,\n        afternoonHours: hoursResult.afternoonHours,\n        totalHours: hoursResult.totalHours,\n        regularHours: Math.min(hoursResult.totalHours, 8),\n        overtimeHours: Math.max(0, hoursResult.totalHours - 8),\n        effectiveMorningStart: hoursResult.effectiveMorningStart,\n        effectiveAfternoonStart: hoursResult.effectiveAfternoonStart\n      });\n    }\n\n    return {\n      totalWorkedHours: Math.round(totalWorkedHours * 100) / 100,\n      totalRegularHours: Math.round(totalRegularHours * 100) / 100,\n      totalOvertimeHours: Math.round(totalOvertimeHours * 100) / 100, // Fixed: was hardcoded to 0\n      totalLateHours: Math.round(totalLateHours * 100) / 100,\n      totalWorkingDays\n    };\n  }\n\n  /**\n   * Generate payroll records for all departments\n   * This creates separate payroll records for each department\n   */\n  async generatePayrollRecordsForAllDepartments(payrollPeriodId: string): Promise<{ departmentId: string; records: PayrollRecord[] }[]> {\n    try {\n      // Get all departments with active employees\n      const { getPool } = await import('../../config/database');\n      const pool = getPool();\n      \n      const departmentsQuery = `\n        SELECT DISTINCT d.id, d.name\n        FROM departments d\n        INNER JOIN employees e ON d.id = e.department_id\n        WHERE e.status = 'active' AND d.is_active = true\n        ORDER BY d.name\n      `;\n      \n      const departmentsResult = await pool.query(departmentsQuery);\n      const departmentResults: { departmentId: string; records: PayrollRecord[] }[] = [];\n\n      // Generate payroll records for each department\n      for (const department of departmentsResult.rows) {\n        const records = await this.generatePayrollRecords(payrollPeriodId, department.id);\n        departmentResults.push({\n          departmentId: department.id,\n          records\n        });\n        \n        logger.info(`Generated ${records.length} payroll records for department: ${department.name}`);\n      }\n\n      return departmentResults;\n    } catch (error) {\n      logger.error('Error generating payroll records for all departments:', error);\n      throw error;\n    }\n  }\n\n  async getPayrollRecordsByDepartmentAndPeriod(departmentId: string, periodId: string): Promise<PayrollRecord[]> {\n    try {\n      const { getPool } = await import('../../config/database');\n      const pool = getPool();\n      \n      const query = `\n        SELECT \n          pr.*,\n          u.first_name,\n          u.last_name,\n          e.employee_id,\n          e.position,\n          e.department_id,\n          d.name as department_name,\n          pp.period_name\n        FROM payroll_records pr\n        INNER JOIN employees e ON pr.employee_id = e.id\n        INNER JOIN users u ON e.user_id = u.id\n        INNER JOIN departments d ON e.department_id = d.id\n        INNER JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n        WHERE pr.payroll_period_id = $1 AND e.department_id = $2\n        ORDER BY u.first_name, u.last_name\n      `;\n      \n      const result = await pool.query(query, [periodId, departmentId]);\n      return result.rows;\n    } catch (error) {\n      logger.error('Error getting payroll records by department and period:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get paid leave hours for an employee within a payroll period\n   * This method uses the leave payment policies to determine which leave types are paid\n   * and calculates the total hours with proper payment percentages\n   */\n  private async getPaidLeaveHours(employeeId: string, startDate: Date, endDate: Date): Promise<number> {\n    try {\n      const { getPool } = await import('../../config/database');\n      const pool = getPool();\n\n      // Get all approved leave days within the payroll period\n      const leaveQuery = `\n        SELECT \n          leave_type,\n          start_date,\n          end_date,\n          (end_date - start_date + 1) as total_days\n        FROM leaves\n        WHERE employee_id = $1 \n          AND status = 'approved'\n          AND (\n            (start_date <= $2 AND end_date >= $3) OR  -- Leave spans the period\n            (start_date >= $3 AND start_date <= $2) OR  -- Leave starts within period\n            (end_date >= $3 AND end_date <= $2)  -- Leave ends within period\n          )\n      `;\n\n      const result = await pool.query(leaveQuery, [\n        employeeId,\n        endDate,\n        startDate\n      ]);\n\n      let totalPaidHours = 0;\n      \n      for (const leave of result.rows) {\n        const leaveType = leave.leave_type;\n        const leaveDays = parseFloat(leave.total_days) || 0;\n        \n        // Check if this leave type is paid\n        if (!isLeaveTypePaid(leaveType)) {\n          logger.info('Unpaid leave skipped', {\n            employeeId,\n            leaveType,\n            days: leaveDays\n          });\n          continue;\n        }\n\n        // Get payment percentage for this leave type\n        const paymentPercentage = getLeavePaymentPercentage(leaveType);\n        const maxPaidDaysPerYear = getMaxPaidDaysPerYear(leaveType);\n        \n        // Calculate paid days (considering yearly limits if applicable)\n        let paidDays = leaveDays;\n        if (maxPaidDaysPerYear) {\n          // TODO: Implement yearly limit checking (would need to track used days per year)\n          // For now, we'll use the full leave days\n          logger.info('Yearly limit check not implemented yet', {\n            leaveType,\n            maxPaidDaysPerYear,\n            requestedDays: leaveDays\n          });\n        }\n        \n        // Calculate paid hours with payment percentage\n        const paidHours = (paidDays * 8 * paymentPercentage) / 100; // 8 hours per working day\n        totalPaidHours += paidHours;\n        \n        logger.info('Paid leave calculated', {\n          employeeId,\n          leaveType,\n          startDate: leave.start_date,\n          endDate: leave.end_date,\n          totalDays: leaveDays,\n          paidDays,\n          paymentPercentage,\n          paidHours,\n          maxPaidDaysPerYear\n        });\n      }\n\n      logger.info('Total paid leave hours calculated', {\n        employeeId,\n        startDate,\n        endDate,\n        totalPaidHours,\n        leaveCount: result.rows.length\n      });\n\n      return totalPaidHours;\n    } catch (error) {\n      logger.error('Error calculating paid leave hours', {\n        error: (error as Error).message,\n        employeeId,\n        startDate,\n        endDate\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Export all employee paystubs for a period as PDF\n   */\n  async exportPeriodPaystubsPDF(periodId: string): Promise<Buffer> {\n    try {\n      const PDFDocument = require('pdfkit');\n      const doc = new PDFDocument({ margin: 50 });\n      const buffers: Buffer[] = [];\n\n      doc.on('data', buffers.push.bind(buffers));\n\n      // Get payroll period information\n      const period = await payrollPeriodModel.findById(periodId);\n      if (!period) {\n        throw new Error('Payroll period not found');\n      }\n\n      // Get all payroll records for the period\n      const result = await payrollRecordModel.findAllWithEmployee({ payroll_period_id: periodId, limit: 1000 });\n      const records = result.records;\n\n      // Add title page\n      doc.fontSize(20).text('PAYROLL PAYSTUBS', { align: 'center' });\n      doc.fontSize(16).text(`Period: ${period.period_name}`, { align: 'center' });\n      doc.fontSize(12).text(`From: ${this.formatDate(period.start_date)} To: ${this.formatDate(period.end_date)}`, { align: 'center' });\n      doc.moveDown(2);\n\n      // Generate paystub for each employee\n      for (const record of records) {\n        try {\n          this.addPaystubPage(doc, record, period);\n        } catch (error) {\n          logger.error('Error adding paystub page', { \n            error: (error as Error).message, \n            recordId: record.id,\n            employeeId: record.employee_id\n          });\n          // Continue with next record instead of failing completely\n        }\n      }\n\n      doc.end();\n\n      return new Promise((resolve, reject) => {\n        doc.on('end', () => {\n          const pdfBuffer = Buffer.concat(buffers);\n          resolve(pdfBuffer);\n        });\n        doc.on('error', reject);\n      });\n    } catch (error) {\n      logger.error('Error exporting period paystubs PDF', { \n        error: (error as Error).message, \n        periodId \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Export department employee paystubs for a period as PDF\n   */\n  async exportDepartmentPaystubsPDF(periodId: string, userId: string): Promise<Buffer> {\n    try {\n      const PDFDocument = require('pdfkit');\n      const doc = new PDFDocument({ margin: 50 });\n      const buffers: Buffer[] = [];\n\n      doc.on('data', buffers.push.bind(buffers));\n\n      // Get department head's department\n      const { DepartmentHeadService } = await import('../department-head/departmentHeadService');\n      const departmentHeadService = new DepartmentHeadService();\n      const department = await departmentHeadService.getDepartmentInfo(userId);\n      \n      if (!department) {\n        throw new Error('Department not found for user');\n      }\n\n      // Get payroll period information\n      const period = await payrollPeriodModel.findById(periodId);\n      if (!period) {\n        throw new Error('Payroll period not found');\n      }\n\n      // Get payroll records for the department\n      const result = await payrollRecordModel.findAllWithEmployee({ \n        payroll_period_id: periodId,\n        department_id: department.id,\n        limit: 1000\n      });\n      const records = result.records;\n\n      // Add title page\n      doc.fontSize(20).text('DEPARTMENT PAYROLL PAYSTUBS', { align: 'center' });\n      doc.fontSize(16).text(`Department: ${department.name}`, { align: 'center' });\n      doc.fontSize(16).text(`Period: ${period.period_name}`, { align: 'center' });\n      doc.fontSize(12).text(`From: ${this.formatDate(period.start_date)} To: ${this.formatDate(period.end_date)}`, { align: 'center' });\n      doc.moveDown(2);\n\n      // Generate paystub for each employee\n      for (const record of records) {\n        try {\n          this.addPaystubPage(doc, record, period);\n        } catch (error) {\n          logger.error('Error adding paystub page', { \n            error: (error as Error).message, \n            recordId: record.id,\n            employeeId: record.employee_id\n          });\n          // Continue with next record instead of failing completely\n        }\n      }\n\n      doc.end();\n\n      return new Promise((resolve, reject) => {\n        doc.on('end', () => {\n          const pdfBuffer = Buffer.concat(buffers);\n          resolve(pdfBuffer);\n        });\n        doc.on('error', reject);\n      });\n    } catch (error) {\n      logger.error('Error exporting department paystubs PDF', { \n        error: (error as Error).message, \n        periodId,\n        userId \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Helper function to safely format numbers for PDF\n   */\n  private formatCurrency(amount: any): string {\n    try {\n      if (amount === null || amount === undefined) return '\u20B10.00';\n      const num = Number(amount);\n      if (isNaN(num) || !isFinite(num)) return '\u20B10.00';\n      return `\u20B1${num.toFixed(2)}`;\n    } catch (error) {\n      return '\u20B10.00';\n    }\n  }\n\n  /**\n   * Helper function to safely format dates for PDF\n   */\n  private formatDate(date: any): string {\n    try {\n      if (!date) return 'N/A';\n      return new Date(date).toLocaleDateString();\n    } catch (error) {\n      return 'N/A';\n    }\n  }\n\n  /**\n   * Add a paystub page to the PDF document\n   */\n  private addPaystubPage(doc: any, record: PayrollRecordWithEmployee, period: any): void {\n    // Add new page for each employee\n    doc.addPage();\n\n    // Employee Information\n    doc.fontSize(18).text('PAYSTUB', { align: 'center' });\n    doc.moveDown(1);\n\n    doc.fontSize(12);\n    doc.text(`Employee ID: ${record.employee.employee_id}`, 50, 100);\n    doc.text(`Name: ${record.employee.user.first_name} ${record.employee.user.last_name}`, 50, 120);\n    doc.text(`Department: ${record.employee.department.name}`, 50, 140);\n    doc.text(`Pay Period: ${period.period_name}`, 50, 180);\n    doc.text(`Period: ${this.formatDate(period.start_date)} - ${this.formatDate(period.end_date)}`, 50, 200);\n\n    // Hours Worked Section\n    doc.moveDown(2);\n    doc.fontSize(14).text('HOURS WORKED', { underline: true });\n    doc.moveDown(0.5);\n    \n    doc.fontSize(12);\n    const regularHours = Number(record.total_regular_hours) || 0;\n    const overtimeHours = Number(record.total_overtime_hours) || 0;\n    const lateHours = Number(record.total_late_hours) || 0;\n    const paidLeaveHours = Number(record.paid_leave_hours) || 0;\n    const totalHours = regularHours + overtimeHours + paidLeaveHours;\n    \n    doc.text(`Regular Hours: ${regularHours}`, 50);\n    doc.text(`Overtime Hours: ${overtimeHours}`, 50);\n    doc.text(`Late Hours: ${lateHours}`, 50);\n    doc.text(`Paid Leave Hours: ${paidLeaveHours}`, 50);\n    doc.text(`Total Hours: ${totalHours}`, 50);\n\n    // Earnings Section\n    doc.moveDown(1);\n    doc.fontSize(14).text('EARNINGS', { underline: true });\n    doc.moveDown(0.5);\n    \n    doc.fontSize(12);\n    doc.text(`Base Salary: ${this.formatCurrency(record.base_salary)}`, 50);\n    \n    // Calculate Leave Pay\n    const hourlyRate = Number(record.hourly_rate) || 0;\n    const leavePay = paidLeaveHours * hourlyRate;\n    if (leavePay > 0) {\n      doc.text(`Leave Pay: ${this.formatCurrency(leavePay)}`, 50);\n    }\n    \n    doc.text(`Benefits: ${this.formatCurrency(record.total_benefits)}`, 50);\n    doc.text(`Gross Pay: ${this.formatCurrency(record.gross_pay)}`, 50);\n\n    // Deductions Section\n    doc.moveDown(1);\n    doc.fontSize(14).text('DEDUCTIONS', { underline: true });\n    doc.moveDown(0.5);\n    \n    doc.fontSize(12);\n    doc.text(`Late Deductions: ${this.formatCurrency(record.late_deductions)}`, 50);\n    doc.text(`Total Deductions: ${this.formatCurrency(record.total_deductions)}`, 50);\n\n    // Net Pay Section\n    doc.moveDown(1);\n    doc.fontSize(16).text(`NET PAY: ${this.formatCurrency(record.net_pay)}`, 50, { underline: true });\n\n    // Footer\n    doc.fontSize(10);\n    doc.text(`Generated on: ${this.formatDate(new Date())}`, 50, doc.page.height - 100);\n    doc.text(`Status: ${record.status?.toUpperCase()}`, 50, doc.page.height - 80);\n  }\n}\n\nexport const payrollService = new PayrollService();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1fa4cfb7db4daebe1126d1da889ff419f6dd8696"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_u5rw4oz9l = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_u5rw4oz9l();
var __createBinding =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[0]++,
/* istanbul ignore next */
(cov_u5rw4oz9l().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_u5rw4oz9l().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_u5rw4oz9l().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_u5rw4oz9l().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_u5rw4oz9l().f[0]++;
  cov_u5rw4oz9l().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().b[2][0]++;
    cov_u5rw4oz9l().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_u5rw4oz9l().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_u5rw4oz9l().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_u5rw4oz9l().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[5][1]++,
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().b[3][0]++;
    cov_u5rw4oz9l().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_u5rw4oz9l().f[1]++;
        cov_u5rw4oz9l().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_u5rw4oz9l().b[3][1]++;
  }
  cov_u5rw4oz9l().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_u5rw4oz9l().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_u5rw4oz9l().f[2]++;
  cov_u5rw4oz9l().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().b[7][0]++;
    cov_u5rw4oz9l().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_u5rw4oz9l().b[7][1]++;
  }
  cov_u5rw4oz9l().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[11]++,
/* istanbul ignore next */
(cov_u5rw4oz9l().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_u5rw4oz9l().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_u5rw4oz9l().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_u5rw4oz9l().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_u5rw4oz9l().f[3]++;
  cov_u5rw4oz9l().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_u5rw4oz9l().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_u5rw4oz9l().f[4]++;
  cov_u5rw4oz9l().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[14]++,
/* istanbul ignore next */
(cov_u5rw4oz9l().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_u5rw4oz9l().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_u5rw4oz9l().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_u5rw4oz9l().f[5]++;
  cov_u5rw4oz9l().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[6]++;
    cov_u5rw4oz9l().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[17]++, []);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_u5rw4oz9l().b[12][0]++;
          cov_u5rw4oz9l().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_u5rw4oz9l().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_u5rw4oz9l().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[8]++;
    cov_u5rw4oz9l().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().b[13][0]++;
      cov_u5rw4oz9l().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_u5rw4oz9l().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[26]++, {});
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().b[15][0]++;
      cov_u5rw4oz9l().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_u5rw4oz9l().b[16][0]++;
          cov_u5rw4oz9l().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_u5rw4oz9l().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_u5rw4oz9l().b[15][1]++;
    }
    cov_u5rw4oz9l().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[34]++;
    return result;
  };
}()));
var __importDefault =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[35]++,
/* istanbul ignore next */
(cov_u5rw4oz9l().b[17][0]++, this) &&
/* istanbul ignore next */
(cov_u5rw4oz9l().b[17][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_u5rw4oz9l().b[17][2]++, function (mod) {
  /* istanbul ignore next */
  cov_u5rw4oz9l().f[9]++;
  cov_u5rw4oz9l().s[36]++;
  return /* istanbul ignore next */(cov_u5rw4oz9l().b[19][0]++, mod) &&
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[19][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[18][0]++, mod) :
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[18][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_u5rw4oz9l().s[37]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_u5rw4oz9l().s[38]++;
exports.payrollService = void 0;
const PayrollPeriod_1 =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[39]++, require("../../models/payroll/PayrollPeriod"));
const PayrollRecord_1 =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[40]++, require("../../models/payroll/PayrollRecord"));
const PayrollDeduction_1 =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[41]++, require("../../models/payroll/PayrollDeduction"));
const DeductionType_1 =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[42]++, require("../../models/payroll/DeductionType"));
const EmployeeDeductionBalance_1 =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[43]++, require("../../models/payroll/EmployeeDeductionBalance"));
const BenefitType_1 =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[44]++, require("../../models/payroll/BenefitType"));
const EmployeeBenefit_1 =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[45]++, require("../../models/payroll/EmployeeBenefit"));
const Employee_1 =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[46]++, require("../../models/hr/Employee"));
const database_1 =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[47]++, require("../../config/database"));
const leavePolicies_1 =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[48]++, require("../../config/leavePolicies"));
// import { attendanceRecordModel } from '../../models/attendance/AttendanceRecord';
const AttendanceSession_1 =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[49]++, require("../../models/attendance/AttendanceSession"));
// import { overtimeRequestModel } from '../../models/attendance/OvertimeRequest';
// import { systemSettingsModel } from '../../models/hr/SystemSettings'; // Temporarily disabled
const logger_1 =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[50]++, __importDefault(require("../../utils/logger")));
const attendanceHoursCalculator_1 =
/* istanbul ignore next */
(cov_u5rw4oz9l().s[51]++, require("../../utils/attendanceHoursCalculator"));
class PayrollService {
  async createPayrollPeriod(data) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[10]++;
    cov_u5rw4oz9l().s[52]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[53]++;
      // Validate date range
      if (data.start_date >= data.end_date) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[20][0]++;
        cov_u5rw4oz9l().s[54]++;
        throw new Error('Start date must be before end date');
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[20][1]++;
      }
      // Check for overlapping periods
      const overlappingPeriods =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[55]++, await PayrollPeriod_1.payrollPeriodModel.findByDateRange(data.start_date, data.end_date));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[56]++;
      if (overlappingPeriods.length > 0) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[21][0]++;
        cov_u5rw4oz9l().s[57]++;
        throw new Error('Payroll period overlaps with existing period');
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[21][1]++;
      }
      const period =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[58]++, await PayrollPeriod_1.payrollPeriodModel.create(data));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[59]++;
      logger_1.default.info('Payroll period created', {
        periodId: period.id,
        periodName: period.period_name
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[60]++;
      return period;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[61]++;
      logger_1.default.error('Error creating payroll period', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[62]++;
      throw error;
    }
  }
  async getPayrollPeriods(params =
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[22][0]++, {})) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[11]++;
    cov_u5rw4oz9l().s[63]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[64]++;
      return await PayrollPeriod_1.payrollPeriodModel.findAll(params);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[65]++;
      logger_1.default.error('Error getting payroll periods', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[66]++;
      throw error;
    }
  }
  async getPayrollPeriod(id) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[12]++;
    cov_u5rw4oz9l().s[67]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[68]++;
      return await PayrollPeriod_1.payrollPeriodModel.findById(id);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[69]++;
      logger_1.default.error('Error getting payroll period', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[70]++;
      throw error;
    }
  }
  async updatePayrollPeriod(id, data) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[13]++;
    cov_u5rw4oz9l().s[71]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[72]++;
      return await PayrollPeriod_1.payrollPeriodModel.update(id, data);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[73]++;
      logger_1.default.error('Error updating payroll period', {
        error: error.message,
        id,
        data
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[74]++;
      throw error;
    }
  }
  async deletePayrollPeriod(id) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[14]++;
    cov_u5rw4oz9l().s[75]++;
    try {
      // Check if period has payroll records
      const records =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[76]++, await PayrollRecord_1.payrollRecordModel.findByPayrollPeriod(id));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[77]++;
      if (records.length > 0) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[23][0]++;
        cov_u5rw4oz9l().s[78]++;
        throw new Error('Cannot delete payroll period with existing records');
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[23][1]++;
      }
      cov_u5rw4oz9l().s[79]++;
      return await PayrollPeriod_1.payrollPeriodModel.delete(id);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[80]++;
      logger_1.default.error('Error deleting payroll period', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[81]++;
      throw error;
    }
  }
  async calculateEmployeePayroll(employeeId, payrollPeriodId) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[15]++;
    cov_u5rw4oz9l().s[82]++;
    try {
      // Get employee data
      const employee =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[83]++, await Employee_1.employeeModel.findByIdWithDetails(employeeId));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[84]++;
      if (!employee) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[24][0]++;
        cov_u5rw4oz9l().s[85]++;
        throw new Error('Employee not found');
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[24][1]++;
      }
      // Get payroll period
      const period =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[86]++, await PayrollPeriod_1.payrollPeriodModel.findById(payrollPeriodId));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[87]++;
      if (!period) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[25][0]++;
        cov_u5rw4oz9l().s[88]++;
        throw new Error('Payroll period not found');
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[25][1]++;
      }
      // Calculate expected working days for the month
      const startDate =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[89]++, new Date(period.start_date));
      const endDate =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[90]++, new Date(period.end_date));
      const expectedWorkingDays =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[91]++, this.calculateWorkingDays(startDate, endDate));
      const expectedHours =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[92]++, expectedWorkingDays * 8); // 8 hours per working day
      // Get attendance data using the mathematical formulation
      // This uses grace periods, session caps, and proper morning/afternoon calculations
      const attendanceData =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[93]++, await this.calculateAttendanceHours(employeeId, period.start_date, period.end_date));
      const totalWorkedHours =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[94]++, attendanceData.totalWorkedHours);
      const totalRegularHours =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[95]++, attendanceData.totalRegularHours);
      const totalOvertimeHours =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[96]++, attendanceData.totalOvertimeHours);
      const totalLateHours =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[97]++, attendanceData.totalLateHours);
      // Get approved leave days for the payroll period
      const paidLeaveHours =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[98]++, await this.getPaidLeaveHours(employeeId, startDate, endDate));
      // Debug logging for payroll calculation
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[99]++;
      logger_1.default.info('Payroll calculation debug', {
        employeeId,
        payrollPeriodId,
        attendanceData: attendanceData,
        totalWorkedHours,
        totalRegularHours,
        totalOvertimeHours,
        totalLateHours,
        expectedHours,
        baseSalary: employee.base_salary
      });
      // Parse base salary
      const baseSalary =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[100]++,
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[26][0]++, Number(employee.base_salary)) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[26][1]++, 0));
      // Calculate hourly rate
      const hourlyRate =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[101]++, baseSalary / expectedHours);
      // Calculate late deductions
      const lateDeductions =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[102]++, totalLateHours * hourlyRate);
      // Get employee-specific deduction balances
      const employeeDeductionBalances =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[103]++, await EmployeeDeductionBalance_1.employeeDeductionBalanceModel.findActiveByEmployee(employeeId));
      // Apply employee deductions (until balance reaches zero)
      const employeeDeductions =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[104]++, []);
      let totalEmployeeDeductions =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[105]++, 0);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[106]++;
      for (const balance of employeeDeductionBalances) {
        // Calculate actual deduction (minimum of monthly amount or remaining balance)
        const monthlyAmount =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[107]++,
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[27][0]++, Number(balance.monthly_deduction_amount)) ||
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[27][1]++, 0));
        const remainingBalance =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[108]++,
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[28][0]++, Number(balance.remaining_balance)) ||
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[28][1]++, 0));
        const actualDeduction =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[109]++, Math.min(monthlyAmount, remainingBalance));
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[110]++;
        if (actualDeduction > 0) {
          /* istanbul ignore next */
          cov_u5rw4oz9l().b[29][0]++;
          cov_u5rw4oz9l().s[111]++;
          employeeDeductions.push({
            type:
            /* istanbul ignore next */
            (cov_u5rw4oz9l().b[30][0]++, balance.deduction_type_name) ||
            /* istanbul ignore next */
            (cov_u5rw4oz9l().b[30][1]++, 'Unknown'),
            amount: actualDeduction,
            remainingBalance: remainingBalance - actualDeduction
          });
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[112]++;
          totalEmployeeDeductions += actualDeduction;
        } else
        /* istanbul ignore next */
        {
          cov_u5rw4oz9l().b[29][1]++;
        }
      }
      // Get employee benefits
      const employeeBenefits =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[113]++, await EmployeeBenefit_1.employeeBenefitModel.findActiveByEmployee(employeeId));
      const benefits =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[114]++, []);
      let totalBenefits =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[115]++, 0);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[116]++;
      for (const benefit of employeeBenefits) {
        const benefitAmount =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[117]++,
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[31][0]++, Number(benefit.amount)) ||
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[31][1]++, 0));
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[118]++;
        benefits.push({
          type:
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[32][0]++, benefit.benefit_type?.name) ||
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[32][1]++, 'Unknown'),
          amount: benefitAmount
        });
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[119]++;
        totalBenefits += benefitAmount;
      }
      // Calculate gross pay based on worked hours + paid leave hours: (total paid hours / total working hours in month) * base salary
      // Include approved leave days as paid time
      const totalPaidHours =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[120]++, totalWorkedHours + paidLeaveHours);
      const grossPay =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[121]++, expectedHours > 0 ?
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[33][0]++, totalPaidHours / expectedHours * baseSalary) :
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[33][1]++, 0));
      // Calculate net pay: gross pay + benefits - deductions
      const netPay =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[122]++, grossPay + totalBenefits - totalEmployeeDeductions - lateDeductions);
      // Debug logging for gross pay calculation
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[123]++;
      logger_1.default.info('Gross pay calculation debug', {
        employeeId,
        totalWorkedHours,
        paidLeaveHours,
        totalPaidHours,
        expectedHours,
        baseSalary,
        grossPay,
        totalBenefits,
        totalEmployeeDeductions,
        lateDeductions,
        netPay
      });
      const payrollData =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[124]++, {
        employee: {
          id: employee.id,
          employee_id: employee.employee_id,
          name: `${employee.user.first_name} ${employee.user.last_name}`,
          department:
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[34][0]++, employee.department?.name) ||
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[34][1]++, 'N/A')
        },
        baseSalary: baseSalary,
        // Full monthly base salary
        totalWorkedHours,
        totalRegularHours,
        totalOvertimeHours,
        totalLateHours,
        lateDeductions,
        hourlyRate,
        grossPay,
        employeeDeductions,
        employeeBenefits: benefits,
        totalDeductions: totalEmployeeDeductions,
        totalBenefits,
        netPay,
        paidLeaveHours // Add paid leave hours to the response
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[125]++;
      logger_1.default.info('Employee payroll calculated', {
        employeeId,
        payrollPeriodId,
        baseSalary: employee.base_salary,
        totalDeductions: totalEmployeeDeductions,
        totalBenefits,
        netPay
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[126]++;
      return payrollData;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[127]++;
      logger_1.default.error('Error calculating employee payroll', {
        error: error.message,
        employeeId,
        payrollPeriodId
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[128]++;
      throw error;
    }
  }
  async generatePayrollRecords(payrollPeriodId, departmentId) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[16]++;
    cov_u5rw4oz9l().s[129]++;
    try {
      // Get active employees - either all or filtered by department
      const employees =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[130]++, departmentId ?
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[35][0]++, await Employee_1.employeeModel.findAll({
        status: 'active',
        department_id: departmentId
      })) :
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[35][1]++, await Employee_1.employeeModel.findAll({
        status: 'active'
      })));
      const records =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[131]++, []);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[132]++;
      for (const employee of employees.employees) {
        // Calculate payroll for this employee using new logic
        const payrollData =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[133]++, await this.calculateEmployeePayroll(employee.id, payrollPeriodId));
        // Check if record already exists
        const existingRecord =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[134]++, await PayrollRecord_1.payrollRecordModel.findByPeriodAndEmployee(payrollPeriodId, employee.id));
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[135]++;
        if (existingRecord) {
          /* istanbul ignore next */
          cov_u5rw4oz9l().b[36][0]++;
          // Update existing record
          const updatedRecord =
          /* istanbul ignore next */
          (cov_u5rw4oz9l().s[136]++, await PayrollRecord_1.payrollRecordModel.update(existingRecord.id, {
            base_salary: payrollData.baseSalary,
            total_worked_hours: payrollData.totalWorkedHours,
            hourly_rate: payrollData.hourlyRate,
            total_regular_hours: payrollData.totalRegularHours,
            total_overtime_hours: payrollData.totalOvertimeHours,
            total_late_hours: payrollData.totalLateHours,
            late_deductions: payrollData.lateDeductions,
            paid_leave_hours: payrollData.paidLeaveHours,
            gross_pay: payrollData.grossPay,
            net_pay: payrollData.netPay,
            total_deductions: payrollData.totalDeductions,
            total_benefits: payrollData.totalBenefits,
            status: 'draft'
          }));
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[137]++;
          if (updatedRecord) {
            /* istanbul ignore next */
            cov_u5rw4oz9l().b[37][0]++;
            cov_u5rw4oz9l().s[138]++;
            records.push(updatedRecord);
          } else
          /* istanbul ignore next */
          {
            cov_u5rw4oz9l().b[37][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_u5rw4oz9l().b[36][1]++;
          // Create new record
          const newRecord =
          /* istanbul ignore next */
          (cov_u5rw4oz9l().s[139]++, await PayrollRecord_1.payrollRecordModel.create({
            payroll_period_id: payrollPeriodId,
            employee_id: employee.id,
            base_salary: payrollData.baseSalary,
            total_worked_hours: payrollData.totalWorkedHours,
            hourly_rate: payrollData.hourlyRate,
            total_regular_hours: payrollData.totalRegularHours,
            total_overtime_hours: payrollData.totalOvertimeHours,
            total_late_hours: payrollData.totalLateHours,
            late_deductions: payrollData.lateDeductions,
            paid_leave_hours: payrollData.paidLeaveHours,
            gross_pay: payrollData.grossPay,
            net_pay: payrollData.netPay,
            total_deductions: payrollData.totalDeductions,
            total_benefits: payrollData.totalBenefits,
            status: 'draft'
          }));
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[140]++;
          records.push(newRecord);
        }
        // Create deduction records and update employee deduction balances
        const record =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[141]++, records[records.length - 1]);
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[142]++;
        if (record) {
          /* istanbul ignore next */
          cov_u5rw4oz9l().b[38][0]++;
          cov_u5rw4oz9l().s[143]++;
          // Delete existing deductions
          await PayrollDeduction_1.payrollDeductionModel.deleteByPayrollRecord(record.id);
          // Create new deduction records and update balances
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[144]++;
          for (const deduction of payrollData.employeeDeductions) {
            // Find the deduction type ID by name
            const deductionType =
            /* istanbul ignore next */
            (cov_u5rw4oz9l().s[145]++, await DeductionType_1.deductionTypeModel.findByName(deduction.type));
            /* istanbul ignore next */
            cov_u5rw4oz9l().s[146]++;
            if (deductionType) {
              /* istanbul ignore next */
              cov_u5rw4oz9l().b[39][0]++;
              cov_u5rw4oz9l().s[147]++;
              await PayrollDeduction_1.payrollDeductionModel.create({
                payroll_record_id: record.id,
                deduction_type_id: deductionType.id,
                name: deduction.type,
                amount: deduction.amount
              });
              // Update employee deduction balance
              const employeeDeductionBalances =
              /* istanbul ignore next */
              (cov_u5rw4oz9l().s[148]++, await EmployeeDeductionBalance_1.employeeDeductionBalanceModel.findByEmployee(employee.id));
              const balance =
              /* istanbul ignore next */
              (cov_u5rw4oz9l().s[149]++, employeeDeductionBalances.find(b => {
                /* istanbul ignore next */
                cov_u5rw4oz9l().f[17]++;
                cov_u5rw4oz9l().s[150]++;
                return b.deduction_type_id === deductionType.id;
              }));
              /* istanbul ignore next */
              cov_u5rw4oz9l().s[151]++;
              if (balance) {
                /* istanbul ignore next */
                cov_u5rw4oz9l().b[40][0]++;
                cov_u5rw4oz9l().s[152]++;
                await EmployeeDeductionBalance_1.employeeDeductionBalanceModel.update(balance.id, {
                  remaining_balance: deduction.remainingBalance,
                  is_active: deduction.remainingBalance > 0
                });
              } else
              /* istanbul ignore next */
              {
                cov_u5rw4oz9l().b[40][1]++;
              }
            } else
            /* istanbul ignore next */
            {
              cov_u5rw4oz9l().b[39][1]++;
            }
          }
        } else
        /* istanbul ignore next */
        {
          cov_u5rw4oz9l().b[38][1]++;
        }
      }
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[153]++;
      logger_1.default.info('Payroll records generated', {
        payrollPeriodId,
        recordCount: records.length
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[154]++;
      return records;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[155]++;
      logger_1.default.error('Error generating payroll records', {
        error: error.message,
        payrollPeriodId
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[156]++;
      throw error;
    }
  }
  async getPayrollRecords(params =
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[41][0]++, {})) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[18]++;
    cov_u5rw4oz9l().s[157]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[158]++;
      return await PayrollRecord_1.payrollRecordModel.findAllWithEmployee(params);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[159]++;
      logger_1.default.error('Error getting payroll records', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[160]++;
      throw error;
    }
  }
  /**
   * Update payroll record status
   */
  async updatePayrollRecordStatus(recordId, status) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[19]++;
    cov_u5rw4oz9l().s[161]++;
    try {
      const updatedRecord =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[162]++, await PayrollRecord_1.payrollRecordModel.update(recordId, {
        status
      }));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[163]++;
      if (!updatedRecord) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[42][0]++;
        cov_u5rw4oz9l().s[164]++;
        throw new Error('Payroll record not found');
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[42][1]++;
      }
      cov_u5rw4oz9l().s[165]++;
      logger_1.default.info('Payroll record status updated', {
        recordId,
        status,
        employeeId: updatedRecord.employee_id
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[166]++;
      return updatedRecord;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[167]++;
      logger_1.default.error('Error updating payroll record status', {
        error: error.message,
        recordId,
        status
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[168]++;
      throw error;
    }
  }
  /**
   * Mark payroll period as completed (when all departments have approved)
   */
  async completePayrollPeriod(periodId) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[20]++;
    cov_u5rw4oz9l().s[169]++;
    try {
      const updatedPeriod =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[170]++, await PayrollPeriod_1.payrollPeriodModel.update(periodId, {
        status: 'completed'
      }));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[171]++;
      if (!updatedPeriod) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[43][0]++;
        cov_u5rw4oz9l().s[172]++;
        throw new Error('Payroll period not found');
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[43][1]++;
      }
      cov_u5rw4oz9l().s[173]++;
      logger_1.default.info('Payroll period marked as completed', {
        periodId,
        periodName: updatedPeriod.period_name
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[174]++;
      return updatedPeriod;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[175]++;
      logger_1.default.error('Error completing payroll period', {
        error: error.message,
        periodId
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[176]++;
      throw error;
    }
  }
  /**
   * Bulk update payroll records to paid status
   */
  async bulkUpdatePayrollRecordsToPaid(options) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[21]++;
    cov_u5rw4oz9l().s[177]++;
    try {
      const {
        getPool
      } =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[178]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_u5rw4oz9l().f[22]++;
        cov_u5rw4oz9l().s[179]++;
        return __importStar(require('../../config/database'));
      }));
      const pool =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[180]++, getPool());
      let whereClause =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[181]++, '');
      const params =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[182]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[183]++, 1);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[184]++;
      if (options.periodId) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[44][0]++;
        cov_u5rw4oz9l().s[185]++;
        whereClause += ` WHERE payroll_period_id = $${paramIndex}`;
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[186]++;
        params.push(options.periodId);
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[187]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[44][1]++;
      }
      cov_u5rw4oz9l().s[188]++;
      if (options.departmentId) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[45][0]++;
        cov_u5rw4oz9l().s[189]++;
        whereClause += options.periodId ?
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[46][0]++, ' AND') :
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[46][1]++, ' WHERE');
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[190]++;
        whereClause += ` employee_id IN (SELECT id FROM employees WHERE department_id = $${paramIndex})`;
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[191]++;
        params.push(options.departmentId);
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[192]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[45][1]++;
      }
      cov_u5rw4oz9l().s[193]++;
      if (
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[48][0]++, options.recordIds) &&
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[48][1]++, options.recordIds.length > 0)) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[47][0]++;
        cov_u5rw4oz9l().s[194]++;
        whereClause +=
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[50][0]++, options.periodId) ||
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[50][1]++, options.departmentId) ?
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[49][0]++, ' AND') :
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[49][1]++, ' WHERE');
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[195]++;
        whereClause += ` id = ANY($${paramIndex})`;
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[196]++;
        params.push(options.recordIds);
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[197]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[47][1]++;
      }
      const updateQuery =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[198]++, `
        UPDATE payroll_records 
        SET status = 'paid', updated_at = CURRENT_TIMESTAMP
        ${whereClause}
      `);
      const result =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[199]++, await pool.query(updateQuery, params));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[200]++;
      logger_1.default.info('Bulk updated payroll records to paid', {
        updatedCount: result.rowCount,
        options
      });
      // If updating by periodId, check if all records in the period are now paid
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[201]++;
      if (options.periodId) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[51][0]++;
        cov_u5rw4oz9l().s[202]++;
        await this.checkAndCompletePayrollPeriod(options.periodId);
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[51][1]++;
      }
      cov_u5rw4oz9l().s[203]++;
      return {
        updatedCount:
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[52][0]++, result.rowCount) ||
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[52][1]++, 0)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[204]++;
      logger_1.default.error('Error bulk updating payroll records to paid', {
        error: error.message,
        options
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[205]++;
      throw error;
    }
  }
  /**
   * Check if all payroll records in a period are paid and auto-complete the period
   */
  async checkAndCompletePayrollPeriod(periodId) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[23]++;
    cov_u5rw4oz9l().s[206]++;
    try {
      const {
        getPool
      } =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[207]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_u5rw4oz9l().f[24]++;
        cov_u5rw4oz9l().s[208]++;
        return __importStar(require('../../config/database'));
      }));
      const pool =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[209]++, getPool());
      // Check if all records in the period are paid
      const checkQuery =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[210]++, `
        SELECT 
          COUNT(*) as total_records,
          COUNT(CASE WHEN status = 'paid' THEN 1 END) as paid_records
        FROM payroll_records 
        WHERE payroll_period_id = $1
      `);
      const result =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[211]++, await pool.query(checkQuery, [periodId]));
      const {
        total_records,
        paid_records
      } =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[212]++, result.rows[0]);
      // If all records are paid, complete the period
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[213]++;
      if (
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[54][0]++, total_records > 0) &&
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[54][1]++, parseInt(total_records) === parseInt(paid_records))) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[53][0]++;
        cov_u5rw4oz9l().s[214]++;
        await this.completePayrollPeriod(periodId);
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[215]++;
        logger_1.default.info(`Auto-completed payroll period ${periodId} - all records are paid`);
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[53][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[216]++;
      logger_1.default.error('Error checking and completing payroll period', {
        error: error.message,
        periodId
      });
    }
  }
  /**
   * Bulk update payroll records status for a period
   */
  async bulkUpdatePayrollRecordsStatus(payrollPeriodId, status, departmentId) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[25]++;
    cov_u5rw4oz9l().s[217]++;
    try {
      // Get all records for the period
      const {
        records
      } =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[218]++, await PayrollRecord_1.payrollRecordModel.findAllWithEmployee({
        payroll_period_id: payrollPeriodId,
        department_id: departmentId
      }));
      // Update each record
      const updatedRecords =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[219]++, []);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[220]++;
      for (const record of records) {
        const updatedRecord =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[221]++, await PayrollRecord_1.payrollRecordModel.update(record.id, {
          status
        }));
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[222]++;
        if (updatedRecord) {
          /* istanbul ignore next */
          cov_u5rw4oz9l().b[55][0]++;
          cov_u5rw4oz9l().s[223]++;
          updatedRecords.push(updatedRecord);
        } else
        /* istanbul ignore next */
        {
          cov_u5rw4oz9l().b[55][1]++;
        }
      }
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[224]++;
      logger_1.default.info('Bulk payroll records status updated', {
        payrollPeriodId,
        status,
        departmentId,
        updatedCount: updatedRecords.length
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[225]++;
      return updatedRecords;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[226]++;
      logger_1.default.error('Error bulk updating payroll records status', {
        error: error.message,
        payrollPeriodId,
        status,
        departmentId
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[227]++;
      throw error;
    }
  }
  /**
   * Reprocess payroll records for a period (clears existing records and regenerates)
   */
  async reprocessPayrollRecords(payrollPeriodId, departmentId) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[26]++;
    cov_u5rw4oz9l().s[228]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[229]++;
      logger_1.default.info('Starting payroll reprocessing', {
        payrollPeriodId,
        departmentId
      });
      // First, delete existing payroll records for this period
      const existingRecords =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[230]++, await PayrollRecord_1.payrollRecordModel.findAllWithEmployee({
        payroll_period_id: payrollPeriodId,
        department_id: departmentId
      }));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[231]++;
      for (const record of existingRecords.records) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[232]++;
        // Delete associated payroll deductions first
        await PayrollDeduction_1.payrollDeductionModel.deleteByPayrollRecord(record.id);
        // Delete the payroll record
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[233]++;
        await PayrollRecord_1.payrollRecordModel.delete(record.id);
      }
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[234]++;
      logger_1.default.info('Cleared existing payroll records', {
        payrollPeriodId,
        departmentId,
        deletedCount: existingRecords.records.length
      });
      // Reset approval status for this period (if reprocessing all departments)
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[235]++;
      if (!departmentId) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[56][0]++;
        const {
          PayrollApprovalService
        } =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[236]++, await Promise.resolve().then(() => {
          /* istanbul ignore next */
          cov_u5rw4oz9l().f[27]++;
          cov_u5rw4oz9l().s[237]++;
          return __importStar(require('./payrollApprovalService'));
        }));
        const payrollApprovalService =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[238]++, new PayrollApprovalService());
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[239]++;
        await payrollApprovalService.resetApprovalStatusForPeriod(payrollPeriodId);
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[240]++;
        logger_1.default.info('Reset approval status for payroll period', {
          payrollPeriodId
        });
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[56][1]++;
      }
      // Now regenerate the payroll records
      const newRecords =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[241]++, await this.generatePayrollRecords(payrollPeriodId, departmentId));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[242]++;
      logger_1.default.info('Payroll reprocessing completed', {
        payrollPeriodId,
        departmentId,
        newRecordCount: newRecords.length
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[243]++;
      return newRecords;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[244]++;
      logger_1.default.error('Error reprocessing payroll records', {
        error: error.message,
        payrollPeriodId,
        departmentId
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[245]++;
      throw error;
    }
  }
  async getPayrollRecord(id) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[28]++;
    cov_u5rw4oz9l().s[246]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[247]++;
      return await PayrollRecord_1.payrollRecordModel.findById(id);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[248]++;
      logger_1.default.error('Error getting payroll record', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[249]++;
      throw error;
    }
  }
  async updatePayrollRecord(id, data) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[29]++;
    cov_u5rw4oz9l().s[250]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[251]++;
      return await PayrollRecord_1.payrollRecordModel.update(id, data);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[252]++;
      logger_1.default.error('Error updating payroll record', {
        error: error.message,
        id,
        data
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[253]++;
      throw error;
    }
  }
  async getPayrollSummary(payrollPeriodId) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[30]++;
    cov_u5rw4oz9l().s[254]++;
    try {
      const period =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[255]++, await PayrollPeriod_1.payrollPeriodModel.findById(payrollPeriodId));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[256]++;
      if (!period) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[57][0]++;
        cov_u5rw4oz9l().s[257]++;
        throw new Error('Payroll period not found');
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[57][1]++;
      }
      const records =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[258]++, await PayrollRecord_1.payrollRecordModel.findByPayrollPeriod(payrollPeriodId));
      const totalEmployees =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[259]++, records.length);
      const totalGrossPay =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[260]++, records.reduce((sum, record) => {
        /* istanbul ignore next */
        cov_u5rw4oz9l().f[31]++;
        cov_u5rw4oz9l().s[261]++;
        return sum + record.gross_pay;
      }, 0));
      let totalDeductions =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[262]++, 0);
      let processedRecords =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[263]++, 0);
      let pendingRecords =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[264]++, 0);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[265]++;
      for (const record of records) {
        const deductions =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[266]++, await PayrollDeduction_1.payrollDeductionModel.findByPayrollRecord(record.id));
        const recordDeductions =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[267]++, deductions.reduce((sum, deduction) => {
          /* istanbul ignore next */
          cov_u5rw4oz9l().f[32]++;
          cov_u5rw4oz9l().s[268]++;
          return sum + deduction.amount;
        }, 0));
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[269]++;
        totalDeductions += recordDeductions;
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[270]++;
        if (
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[59][0]++, record.status === 'processed') ||
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[59][1]++, record.status === 'paid')) {
          /* istanbul ignore next */
          cov_u5rw4oz9l().b[58][0]++;
          cov_u5rw4oz9l().s[271]++;
          processedRecords++;
        } else {
          /* istanbul ignore next */
          cov_u5rw4oz9l().b[58][1]++;
          cov_u5rw4oz9l().s[272]++;
          pendingRecords++;
        }
      }
      const totalNetPay =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[273]++, totalGrossPay - totalDeductions);
      const summary =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[274]++, {
        period,
        totalEmployees,
        totalGrossPay,
        totalDeductions,
        totalNetPay,
        processedRecords,
        pendingRecords
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[275]++;
      logger_1.default.info('Payroll summary generated', {
        payrollPeriodId,
        totalEmployees,
        totalNetPay
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[276]++;
      return summary;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[277]++;
      logger_1.default.error('Error getting payroll summary', {
        error: error.message,
        payrollPeriodId
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[278]++;
      throw error;
    }
  }
  async approvePayrollRecord(recordId, approverId) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[33]++;
    cov_u5rw4oz9l().s[279]++;
    try {
      const record =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[280]++, await PayrollRecord_1.payrollRecordModel.update(recordId, {
        status: 'processed'
      }));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[281]++;
      if (record) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[60][0]++;
        cov_u5rw4oz9l().s[282]++;
        logger_1.default.info('Payroll record approved', {
          recordId,
          approverId
        });
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[60][1]++;
      }
      cov_u5rw4oz9l().s[283]++;
      return record;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[284]++;
      logger_1.default.error('Error approving payroll record', {
        error: error.message,
        recordId,
        approverId
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[285]++;
      throw error;
    }
  }
  async markPayrollAsPaid(recordId) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[34]++;
    cov_u5rw4oz9l().s[286]++;
    try {
      const record =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[287]++, await PayrollRecord_1.payrollRecordModel.update(recordId, {
        status: 'paid'
      }));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[288]++;
      if (record) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[61][0]++;
        cov_u5rw4oz9l().s[289]++;
        logger_1.default.info('Payroll record marked as paid', {
          recordId
        });
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[61][1]++;
      }
      cov_u5rw4oz9l().s[290]++;
      return record;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[291]++;
      logger_1.default.error('Error marking payroll as paid', {
        error: error.message,
        recordId
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[292]++;
      throw error;
    }
  }
  async exportPayrollRecords(format, params =
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[62][0]++, {})) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[35]++;
    cov_u5rw4oz9l().s[293]++;
    try {
      const records =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[294]++, await PayrollRecord_1.payrollRecordModel.findAllWithEmployee(params));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[295]++;
      if (format === 'csv') {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[63][0]++;
        cov_u5rw4oz9l().s[296]++;
        return this.generateCSV(records.records);
      } else {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[63][1]++;
        cov_u5rw4oz9l().s[297]++;
        return this.generatePDF(records.records);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[298]++;
      logger_1.default.error('Error exporting payroll records', {
        error: error.message,
        format,
        params
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[299]++;
      throw error;
    }
  }
  generateCSV(records) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[36]++;
    const headers =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[300]++, ['Employee ID', 'Employee Name', 'Period', 'Base Salary', 'Hours Worked', 'Gross Pay', 'Deductions', 'Benefits', 'Net Pay', 'Status', 'Created At']);
    const rows =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[301]++, records.map(record => {
      /* istanbul ignore next */
      cov_u5rw4oz9l().f[37]++;
      cov_u5rw4oz9l().s[302]++;
      return [record.employeeId,
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[64][0]++, record.employeeName) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[64][1]++, 'N/A'),
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[65][0]++, record.periodName) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[65][1]++, 'N/A'),
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[66][0]++, record.baseSalary) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[66][1]++, 0),
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[67][0]++, record.hoursWorked) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[67][1]++, 0),
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[68][0]++, record.grossPay) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[68][1]++, 0),
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[69][0]++, record.totalDeductions) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[69][1]++, 0),
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[70][0]++, record.totalBenefits) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[70][1]++, 0),
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[71][0]++, record.netPay) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[71][1]++, 0),
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[72][0]++, record.status) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[72][1]++, 'draft'), record.createdAt ?
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[73][0]++, new Date(record.createdAt).toLocaleDateString()) :
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[73][1]++, 'N/A')];
    }));
    const csvContent =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[303]++, [headers, ...rows].map(row => {
      /* istanbul ignore next */
      cov_u5rw4oz9l().f[38]++;
      cov_u5rw4oz9l().s[304]++;
      return row.map(field => {
        /* istanbul ignore next */
        cov_u5rw4oz9l().f[39]++;
        cov_u5rw4oz9l().s[305]++;
        return `"${field}"`;
      }).join(',');
    }).join('\n'));
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[306]++;
    return csvContent;
  }
  generatePDF(records) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[40]++;
    // For now, return a simple text representation
    // In a real implementation, you would use a PDF library like puppeteer or pdfkit
    const content =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[307]++, records.map(record => {
      /* istanbul ignore next */
      cov_u5rw4oz9l().f[41]++;
      cov_u5rw4oz9l().s[308]++;
      return `${
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[74][0]++, record.employeeName) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[74][1]++, 'N/A')} - ${
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[75][0]++, record.periodName) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[75][1]++, 'N/A')} - ₱${
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[76][0]++, record.netPay) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[76][1]++, 0)}`;
    }).join('\n'));
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[309]++;
    return Buffer.from(content, 'utf-8');
  }
  async getPayrollStats() {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[42]++;
    cov_u5rw4oz9l().s[310]++;
    try {
      // Get total employees
      const totalEmployees =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[311]++, await Employee_1.employeeModel.getTotalEmployeeCount());
      // Get total payroll (sum of all net pay from completed records)
      const totalPayrollResult =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[312]++, await PayrollRecord_1.payrollRecordModel.getTotalNetPay());
      const totalPayroll =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[313]++,
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[77][0]++, totalPayrollResult) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[77][1]++, 0));
      // Get processed periods (completed status)
      const processedPeriods =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[314]++, await PayrollPeriod_1.payrollPeriodModel.countByStatus(['completed']));
      // Get pending periods (draft status)
      const pendingPeriods =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[315]++, await PayrollPeriod_1.payrollPeriodModel.countByStatus(['draft']));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[316]++;
      return {
        totalEmployees,
        totalPayroll,
        processedPeriods,
        pendingPeriods
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[317]++;
      logger_1.default.error('Error getting payroll statistics', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[318]++;
      throw error;
    }
  }
  // New methods for deduction types management
  async createDeductionType(data) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[43]++;
    cov_u5rw4oz9l().s[319]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[320]++;
      return await DeductionType_1.deductionTypeModel.create(data);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[321]++;
      logger_1.default.error('Error creating deduction type', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[322]++;
      throw error;
    }
  }
  async getDeductionTypes(params =
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[78][0]++, {})) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[44]++;
    cov_u5rw4oz9l().s[323]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[324]++;
      return await DeductionType_1.deductionTypeModel.findAll(params);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[325]++;
      logger_1.default.error('Error getting deduction types', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[326]++;
      throw error;
    }
  }
  async updateDeductionType(id, data) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[45]++;
    cov_u5rw4oz9l().s[327]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[328]++;
      return await DeductionType_1.deductionTypeModel.update(id, data);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[329]++;
      logger_1.default.error('Error updating deduction type', {
        error: error.message,
        id,
        data
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[330]++;
      throw error;
    }
  }
  async deleteDeductionType(id) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[46]++;
    cov_u5rw4oz9l().s[331]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[332]++;
      return await DeductionType_1.deductionTypeModel.delete(id);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[333]++;
      logger_1.default.error('Error deleting deduction type', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[334]++;
      throw error;
    }
  }
  // New methods for benefit types management
  async createBenefitType(data) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[47]++;
    cov_u5rw4oz9l().s[335]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[336]++;
      return await BenefitType_1.benefitTypeModel.create(data);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[337]++;
      logger_1.default.error('Error creating benefit type', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[338]++;
      throw error;
    }
  }
  async getBenefitTypes(params =
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[79][0]++, {})) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[48]++;
    cov_u5rw4oz9l().s[339]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[340]++;
      return await BenefitType_1.benefitTypeModel.findAll(params);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[341]++;
      logger_1.default.error('Error getting benefit types', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[342]++;
      throw error;
    }
  }
  async updateBenefitType(id, data) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[49]++;
    cov_u5rw4oz9l().s[343]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[344]++;
      return await BenefitType_1.benefitTypeModel.update(id, data);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[345]++;
      logger_1.default.error('Error updating benefit type', {
        error: error.message,
        id,
        data
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[346]++;
      throw error;
    }
  }
  async deleteBenefitType(id) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[50]++;
    cov_u5rw4oz9l().s[347]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[348]++;
      return await BenefitType_1.benefitTypeModel.delete(id);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[349]++;
      logger_1.default.error('Error deleting benefit type', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[350]++;
      throw error;
    }
  }
  // New methods for employee deduction balances management
  async getEmployeeDeductionBalances(params =
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[80][0]++, {})) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[51]++;
    cov_u5rw4oz9l().s[351]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[352]++;
      return await EmployeeDeductionBalance_1.employeeDeductionBalanceModel.findAll(params);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[353]++;
      logger_1.default.error('Error getting employee deduction balances', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[354]++;
      throw error;
    }
  }
  async createEmployeeDeductionBalance(data) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[52]++;
    cov_u5rw4oz9l().s[355]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[356]++;
      return await EmployeeDeductionBalance_1.employeeDeductionBalanceModel.create(data);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[357]++;
      logger_1.default.error('Error creating employee deduction balance', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[358]++;
      throw error;
    }
  }
  async updateEmployeeDeductionBalance(id, data) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[53]++;
    cov_u5rw4oz9l().s[359]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[360]++;
      return await EmployeeDeductionBalance_1.employeeDeductionBalanceModel.update(id, data);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[361]++;
      logger_1.default.error('Error updating employee deduction balance', {
        error: error.message,
        id,
        data
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[362]++;
      throw error;
    }
  }
  async deleteEmployeeDeductionBalance(id) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[54]++;
    cov_u5rw4oz9l().s[363]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[364]++;
      return await EmployeeDeductionBalance_1.employeeDeductionBalanceModel.delete(id);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[365]++;
      logger_1.default.error('Error deleting employee deduction balance', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[366]++;
      throw error;
    }
  }
  // New methods for employee benefits management
  async getEmployeeBenefits(params =
  /* istanbul ignore next */
  (cov_u5rw4oz9l().b[81][0]++, {})) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[55]++;
    cov_u5rw4oz9l().s[367]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[368]++;
      return await EmployeeBenefit_1.employeeBenefitModel.findAll(params);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[369]++;
      logger_1.default.error('Error getting employee benefits', {
        error: error.message,
        params
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[370]++;
      throw error;
    }
  }
  async createEmployeeBenefit(data) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[56]++;
    cov_u5rw4oz9l().s[371]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[372]++;
      return await EmployeeBenefit_1.employeeBenefitModel.create(data);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[373]++;
      logger_1.default.error('Error creating employee benefit', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[374]++;
      throw error;
    }
  }
  async updateEmployeeBenefit(id, data) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[57]++;
    cov_u5rw4oz9l().s[375]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[376]++;
      return await EmployeeBenefit_1.employeeBenefitModel.update(id, data);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[377]++;
      logger_1.default.error('Error updating employee benefit', {
        error: error.message,
        id,
        data
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[378]++;
      throw error;
    }
  }
  async deleteEmployeeBenefit(id) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[58]++;
    cov_u5rw4oz9l().s[379]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[380]++;
      return await EmployeeBenefit_1.employeeBenefitModel.delete(id);
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[381]++;
      logger_1.default.error('Error deleting employee benefit', {
        error: error.message,
        id
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[382]++;
      throw error;
    }
  }
  // CSV upload for employee benefits
  async uploadEmployeeBenefits(csvData) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[59]++;
    cov_u5rw4oz9l().s[383]++;
    try {
      const errors =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[384]++, []);
      const successData =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[385]++, []);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[386]++;
      for (let i =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[387]++, 0); i < csvData.length; i++) {
        const row =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[388]++, csvData[i]);
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[389]++;
        try {
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[390]++;
          // Validate required fields
          if (
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[83][0]++, !row.employee_name) ||
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[83][1]++, !row.employee_id) ||
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[83][2]++, !row.benefit_type_name) ||
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[83][3]++, !row.benefit_type_id) ||
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[83][4]++, !row.amount)) {
            /* istanbul ignore next */
            cov_u5rw4oz9l().b[82][0]++;
            cov_u5rw4oz9l().s[391]++;
            errors.push({
              row: i + 1,
              error: 'Missing required fields: employee_name, employee_id, benefit_type_name, benefit_type_id, amount'
            });
            /* istanbul ignore next */
            cov_u5rw4oz9l().s[392]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_u5rw4oz9l().b[82][1]++;
          }
          // Find employee by employee_id
          const employee =
          /* istanbul ignore next */
          (cov_u5rw4oz9l().s[393]++, await Employee_1.employeeModel.findByEmployeeId(row.employee_id));
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[394]++;
          if (!employee) {
            /* istanbul ignore next */
            cov_u5rw4oz9l().b[84][0]++;
            cov_u5rw4oz9l().s[395]++;
            errors.push({
              row: i + 1,
              error: `Employee not found: ${row.employee_id}`
            });
            /* istanbul ignore next */
            cov_u5rw4oz9l().s[396]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_u5rw4oz9l().b[84][1]++;
          }
          // Find benefit type by UUID
          const benefitType =
          /* istanbul ignore next */
          (cov_u5rw4oz9l().s[397]++, await BenefitType_1.benefitTypeModel.findById(row.benefit_type_id));
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[398]++;
          if (!benefitType) {
            /* istanbul ignore next */
            cov_u5rw4oz9l().b[85][0]++;
            cov_u5rw4oz9l().s[399]++;
            errors.push({
              row: i + 1,
              error: `Benefit type not found: ${row.benefit_type_id}`
            });
            /* istanbul ignore next */
            cov_u5rw4oz9l().s[400]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_u5rw4oz9l().b[85][1]++;
          }
          // Check if record already exists (unique constraint: employee_id, benefit_type_id, start_date)
          const existingRecord =
          /* istanbul ignore next */
          (cov_u5rw4oz9l().s[401]++, await EmployeeBenefit_1.employeeBenefitModel.findByEmployeeAndBenefitTypeAndDate(employee.id, benefitType.id, new Date(
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[86][0]++, row.start_date) ||
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[86][1]++, new Date()))));
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[402]++;
          if (existingRecord) {
            /* istanbul ignore next */
            cov_u5rw4oz9l().b[87][0]++;
            cov_u5rw4oz9l().s[403]++;
            errors.push({
              row: i + 1,
              error: `Record already exists for employee ${row.employee_id} with benefit type ${row.benefit_type_name} on ${row.start_date}`
            });
            /* istanbul ignore next */
            cov_u5rw4oz9l().s[404]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_u5rw4oz9l().b[87][1]++;
          }
          // Prepare data for creation
          const benefitData =
          /* istanbul ignore next */
          (cov_u5rw4oz9l().s[405]++, {
            employee_id: employee.id,
            benefit_type_id: benefitType.id,
            amount: parseFloat(row.amount),
            start_date: new Date(
            /* istanbul ignore next */
            (cov_u5rw4oz9l().b[88][0]++, row.start_date) ||
            /* istanbul ignore next */
            (cov_u5rw4oz9l().b[88][1]++, new Date())),
            end_date: row.end_date ?
            /* istanbul ignore next */
            (cov_u5rw4oz9l().b[89][0]++, new Date(row.end_date)) :
            /* istanbul ignore next */
            (cov_u5rw4oz9l().b[89][1]++, null),
            is_active: row.is_active !== 'false'
          });
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[406]++;
          successData.push(benefitData);
        } catch (error) {
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[407]++;
          errors.push({
            row: i + 1,
            error: error.message
          });
        }
      }
      // Bulk create successful records
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[408]++;
      if (successData.length > 0) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[90][0]++;
        cov_u5rw4oz9l().s[409]++;
        await EmployeeBenefit_1.employeeBenefitModel.bulkCreate(successData);
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[90][1]++;
      }
      cov_u5rw4oz9l().s[410]++;
      logger_1.default.info('Employee benefits uploaded', {
        success: successData.length,
        errors: errors.length
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[411]++;
      return {
        success: successData.length,
        errors
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[412]++;
      logger_1.default.error('Error uploading employee benefits', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[413]++;
      throw error;
    }
  }
  // CSV upload for employee deduction balances
  async uploadEmployeeDeductionBalances(csvData) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[60]++;
    cov_u5rw4oz9l().s[414]++;
    try {
      const errors =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[415]++, []);
      const successData =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[416]++, []);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[417]++;
      for (let i =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[418]++, 0); i < csvData.length; i++) {
        const row =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[419]++, csvData[i]);
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[420]++;
        try {
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[421]++;
          // Validate required fields
          if (
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[92][0]++, !row.employee_name) ||
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[92][1]++, !row.employee_id) ||
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[92][2]++, !row.deduction_type_name) ||
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[92][3]++, !row.remaining_balance)) {
            /* istanbul ignore next */
            cov_u5rw4oz9l().b[91][0]++;
            cov_u5rw4oz9l().s[422]++;
            errors.push({
              row: i + 1,
              error: 'Missing required fields: employee_name, employee_id, deduction_type_name, remaining_balance'
            });
            /* istanbul ignore next */
            cov_u5rw4oz9l().s[423]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_u5rw4oz9l().b[91][1]++;
          }
          // Find employee by employee_id
          const employee =
          /* istanbul ignore next */
          (cov_u5rw4oz9l().s[424]++, await Employee_1.employeeModel.findByEmployeeId(row.employee_id));
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[425]++;
          if (!employee) {
            /* istanbul ignore next */
            cov_u5rw4oz9l().b[93][0]++;
            cov_u5rw4oz9l().s[426]++;
            errors.push({
              row: i + 1,
              error: `Employee not found: ${row.employee_id}`
            });
            /* istanbul ignore next */
            cov_u5rw4oz9l().s[427]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_u5rw4oz9l().b[93][1]++;
          }
          // Find deduction type by UUID
          const deductionType =
          /* istanbul ignore next */
          (cov_u5rw4oz9l().s[428]++, await DeductionType_1.deductionTypeModel.findById(row.deduction_type_id));
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[429]++;
          if (!deductionType) {
            /* istanbul ignore next */
            cov_u5rw4oz9l().b[94][0]++;
            cov_u5rw4oz9l().s[430]++;
            errors.push({
              row: i + 1,
              error: `Deduction type not found: ${row.deduction_type_id}`
            });
            /* istanbul ignore next */
            cov_u5rw4oz9l().s[431]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_u5rw4oz9l().b[94][1]++;
          }
          // Check if record already exists (unique constraint: employee_id, deduction_type_id, start_date)
          const existingRecord =
          /* istanbul ignore next */
          (cov_u5rw4oz9l().s[432]++, await EmployeeDeductionBalance_1.employeeDeductionBalanceModel.findByEmployeeAndDeductionTypeAndDate(employee.id, deductionType.id, new Date(
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[95][0]++, row.start_date) ||
          /* istanbul ignore next */
          (cov_u5rw4oz9l().b[95][1]++, new Date()))));
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[433]++;
          if (existingRecord) {
            /* istanbul ignore next */
            cov_u5rw4oz9l().b[96][0]++;
            cov_u5rw4oz9l().s[434]++;
            errors.push({
              row: i + 1,
              error: `Record already exists for employee ${row.employee_id} with deduction type ${row.deduction_type_name} on ${row.start_date}`
            });
            /* istanbul ignore next */
            cov_u5rw4oz9l().s[435]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_u5rw4oz9l().b[96][1]++;
          }
          // Prepare data for creation
          const balanceData =
          /* istanbul ignore next */
          (cov_u5rw4oz9l().s[436]++, {
            employee_id: employee.id,
            deduction_type_id: deductionType.id,
            original_amount: parseFloat(row.remaining_balance),
            remaining_balance: parseFloat(row.remaining_balance),
            monthly_deduction_amount: parseFloat(
            /* istanbul ignore next */
            (cov_u5rw4oz9l().b[97][0]++, row.monthly_deduction_amount) ||
            /* istanbul ignore next */
            (cov_u5rw4oz9l().b[97][1]++, '0')),
            start_date: new Date(
            /* istanbul ignore next */
            (cov_u5rw4oz9l().b[98][0]++, row.start_date) ||
            /* istanbul ignore next */
            (cov_u5rw4oz9l().b[98][1]++, new Date())),
            end_date: row.end_date ?
            /* istanbul ignore next */
            (cov_u5rw4oz9l().b[99][0]++, new Date(row.end_date)) :
            /* istanbul ignore next */
            (cov_u5rw4oz9l().b[99][1]++, null),
            is_active: row.is_active !== 'false'
          });
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[437]++;
          successData.push(balanceData);
        } catch (error) {
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[438]++;
          errors.push({
            row: i + 1,
            error: error.message
          });
        }
      }
      // Bulk create successful records
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[439]++;
      if (successData.length > 0) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[100][0]++;
        cov_u5rw4oz9l().s[440]++;
        await EmployeeDeductionBalance_1.employeeDeductionBalanceModel.bulkCreate(successData);
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[100][1]++;
      }
      cov_u5rw4oz9l().s[441]++;
      logger_1.default.info('Employee deduction balances uploaded', {
        success: successData.length,
        errors: errors.length
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[442]++;
      return {
        success: successData.length,
        errors
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[443]++;
      logger_1.default.error('Error uploading employee deduction balances', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[444]++;
      throw error;
    }
  }
  /**
   * Calculate working days between two dates (excluding weekends)
   * @param startDate Start date
   * @param endDate End date
   * @returns Number of working days
   */
  calculateWorkingDays(startDate, endDate) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[61]++;
    let workingDays =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[445]++, 0);
    const currentDate =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[446]++, new Date(startDate));
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[447]++;
    while (currentDate <= endDate) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[448]++;
      // Check if it's not a weekend (Saturday = 6, Sunday = 0)
      if (
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[102][0]++, currentDate.getDay() !== 0) &&
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[102][1]++, currentDate.getDay() !== 6)) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[101][0]++;
        cov_u5rw4oz9l().s[449]++;
        workingDays++;
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[101][1]++;
      }
      cov_u5rw4oz9l().s[450]++;
      currentDate.setDate(currentDate.getDate() + 1);
    }
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[451]++;
    return workingDays;
  }
  /**
   * Calculate attendance hours using the mathematical formulation
   */
  async calculateAttendanceHours(employeeId, startDate, endDate) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[62]++;
    const pool =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[452]++, (0, database_1.getPool)());
    // Get all attendance records for the period
    const attendanceQuery =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[453]++, `
      SELECT ar.id, ar.date, ar.overall_status
      FROM attendance_records ar
      WHERE ar.employee_id = $1 
        AND ar.date >= $2 
        AND ar.date <= $3
        AND ar.overall_status IN ('present', 'late', 'partial')
      ORDER BY ar.date
    `);
    const result =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[454]++, await pool.query(attendanceQuery, [employeeId, startDate, endDate]));
    const attendanceRecords =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[455]++, result.rows);
    let totalWorkedHours =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[456]++, 0);
    let totalRegularHours =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[457]++, 0);
    let totalOvertimeHours =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[458]++, 0);
    let totalLateHours =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[459]++, 0);
    let totalWorkingDays =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[460]++, attendanceRecords.length);
    // Calculate hours for each attendance record using the new formula
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[461]++;
    for (const record of attendanceRecords) {
      const sessions =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[462]++, await AttendanceSession_1.attendanceSessionModel.getSessionsByAttendanceRecord(record.id));
      const hoursResult =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[463]++, attendanceHoursCalculator_1.defaultHoursCalculator.calculateFromSessions(sessions));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[464]++;
      totalWorkedHours += hoursResult.totalHours;
      // Calculate regular and overtime hours (8 hours per day is regular)
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[465]++;
      if (hoursResult.totalHours <= 8) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[103][0]++;
        cov_u5rw4oz9l().s[466]++;
        totalRegularHours += hoursResult.totalHours;
      } else {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[103][1]++;
        cov_u5rw4oz9l().s[467]++;
        totalRegularHours += 8;
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[468]++;
        totalOvertimeHours += hoursResult.totalHours - 8;
      }
      // Log the calculation for debugging
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[469]++;
      logger_1.default.info('Payroll hours calculation', {
        employeeId,
        date: record.date,
        morningHours: hoursResult.morningHours,
        afternoonHours: hoursResult.afternoonHours,
        totalHours: hoursResult.totalHours,
        regularHours: Math.min(hoursResult.totalHours, 8),
        overtimeHours: Math.max(0, hoursResult.totalHours - 8),
        effectiveMorningStart: hoursResult.effectiveMorningStart,
        effectiveAfternoonStart: hoursResult.effectiveAfternoonStart
      });
    }
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[470]++;
    return {
      totalWorkedHours: Math.round(totalWorkedHours * 100) / 100,
      totalRegularHours: Math.round(totalRegularHours * 100) / 100,
      totalOvertimeHours: Math.round(totalOvertimeHours * 100) / 100,
      // Fixed: was hardcoded to 0
      totalLateHours: Math.round(totalLateHours * 100) / 100,
      totalWorkingDays
    };
  }
  /**
   * Generate payroll records for all departments
   * This creates separate payroll records for each department
   */
  async generatePayrollRecordsForAllDepartments(payrollPeriodId) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[63]++;
    cov_u5rw4oz9l().s[471]++;
    try {
      // Get all departments with active employees
      const {
        getPool
      } =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[472]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_u5rw4oz9l().f[64]++;
        cov_u5rw4oz9l().s[473]++;
        return __importStar(require('../../config/database'));
      }));
      const pool =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[474]++, getPool());
      const departmentsQuery =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[475]++, `
        SELECT DISTINCT d.id, d.name
        FROM departments d
        INNER JOIN employees e ON d.id = e.department_id
        WHERE e.status = 'active' AND d.is_active = true
        ORDER BY d.name
      `);
      const departmentsResult =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[476]++, await pool.query(departmentsQuery));
      const departmentResults =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[477]++, []);
      // Generate payroll records for each department
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[478]++;
      for (const department of departmentsResult.rows) {
        const records =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[479]++, await this.generatePayrollRecords(payrollPeriodId, department.id));
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[480]++;
        departmentResults.push({
          departmentId: department.id,
          records
        });
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[481]++;
        logger_1.default.info(`Generated ${records.length} payroll records for department: ${department.name}`);
      }
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[482]++;
      return departmentResults;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[483]++;
      logger_1.default.error('Error generating payroll records for all departments:', error);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[484]++;
      throw error;
    }
  }
  async getPayrollRecordsByDepartmentAndPeriod(departmentId, periodId) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[65]++;
    cov_u5rw4oz9l().s[485]++;
    try {
      const {
        getPool
      } =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[486]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_u5rw4oz9l().f[66]++;
        cov_u5rw4oz9l().s[487]++;
        return __importStar(require('../../config/database'));
      }));
      const pool =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[488]++, getPool());
      const query =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[489]++, `
        SELECT 
          pr.*,
          u.first_name,
          u.last_name,
          e.employee_id,
          e.position,
          e.department_id,
          d.name as department_name,
          pp.period_name
        FROM payroll_records pr
        INNER JOIN employees e ON pr.employee_id = e.id
        INNER JOIN users u ON e.user_id = u.id
        INNER JOIN departments d ON e.department_id = d.id
        INNER JOIN payroll_periods pp ON pr.payroll_period_id = pp.id
        WHERE pr.payroll_period_id = $1 AND e.department_id = $2
        ORDER BY u.first_name, u.last_name
      `);
      const result =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[490]++, await pool.query(query, [periodId, departmentId]));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[491]++;
      return result.rows;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[492]++;
      logger_1.default.error('Error getting payroll records by department and period:', error);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[493]++;
      throw error;
    }
  }
  /**
   * Get paid leave hours for an employee within a payroll period
   * This method uses the leave payment policies to determine which leave types are paid
   * and calculates the total hours with proper payment percentages
   */
  async getPaidLeaveHours(employeeId, startDate, endDate) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[67]++;
    cov_u5rw4oz9l().s[494]++;
    try {
      const {
        getPool
      } =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[495]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_u5rw4oz9l().f[68]++;
        cov_u5rw4oz9l().s[496]++;
        return __importStar(require('../../config/database'));
      }));
      const pool =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[497]++, getPool());
      // Get all approved leave days within the payroll period
      const leaveQuery =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[498]++, `
        SELECT 
          leave_type,
          start_date,
          end_date,
          (end_date - start_date + 1) as total_days
        FROM leaves
        WHERE employee_id = $1 
          AND status = 'approved'
          AND (
            (start_date <= $2 AND end_date >= $3) OR  -- Leave spans the period
            (start_date >= $3 AND start_date <= $2) OR  -- Leave starts within period
            (end_date >= $3 AND end_date <= $2)  -- Leave ends within period
          )
      `);
      const result =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[499]++, await pool.query(leaveQuery, [employeeId, endDate, startDate]));
      let totalPaidHours =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[500]++, 0);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[501]++;
      for (const leave of result.rows) {
        const leaveType =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[502]++, leave.leave_type);
        const leaveDays =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[503]++,
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[104][0]++, parseFloat(leave.total_days)) ||
        /* istanbul ignore next */
        (cov_u5rw4oz9l().b[104][1]++, 0));
        // Check if this leave type is paid
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[504]++;
        if (!(0, leavePolicies_1.isLeaveTypePaid)(leaveType)) {
          /* istanbul ignore next */
          cov_u5rw4oz9l().b[105][0]++;
          cov_u5rw4oz9l().s[505]++;
          logger_1.default.info('Unpaid leave skipped', {
            employeeId,
            leaveType,
            days: leaveDays
          });
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[506]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_u5rw4oz9l().b[105][1]++;
        }
        // Get payment percentage for this leave type
        const paymentPercentage =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[507]++, (0, leavePolicies_1.getLeavePaymentPercentage)(leaveType));
        const maxPaidDaysPerYear =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[508]++, (0, leavePolicies_1.getMaxPaidDaysPerYear)(leaveType));
        // Calculate paid days (considering yearly limits if applicable)
        let paidDays =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[509]++, leaveDays);
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[510]++;
        if (maxPaidDaysPerYear) {
          /* istanbul ignore next */
          cov_u5rw4oz9l().b[106][0]++;
          cov_u5rw4oz9l().s[511]++;
          // TODO: Implement yearly limit checking (would need to track used days per year)
          // For now, we'll use the full leave days
          logger_1.default.info('Yearly limit check not implemented yet', {
            leaveType,
            maxPaidDaysPerYear,
            requestedDays: leaveDays
          });
        } else
        /* istanbul ignore next */
        {
          cov_u5rw4oz9l().b[106][1]++;
        }
        // Calculate paid hours with payment percentage
        const paidHours =
        /* istanbul ignore next */
        (cov_u5rw4oz9l().s[512]++, paidDays * 8 * paymentPercentage / 100); // 8 hours per working day
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[513]++;
        totalPaidHours += paidHours;
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[514]++;
        logger_1.default.info('Paid leave calculated', {
          employeeId,
          leaveType,
          startDate: leave.start_date,
          endDate: leave.end_date,
          totalDays: leaveDays,
          paidDays,
          paymentPercentage,
          paidHours,
          maxPaidDaysPerYear
        });
      }
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[515]++;
      logger_1.default.info('Total paid leave hours calculated', {
        employeeId,
        startDate,
        endDate,
        totalPaidHours,
        leaveCount: result.rows.length
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[516]++;
      return totalPaidHours;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[517]++;
      logger_1.default.error('Error calculating paid leave hours', {
        error: error.message,
        employeeId,
        startDate,
        endDate
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[518]++;
      throw error;
    }
  }
  /**
   * Export all employee paystubs for a period as PDF
   */
  async exportPeriodPaystubsPDF(periodId) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[69]++;
    cov_u5rw4oz9l().s[519]++;
    try {
      const PDFDocument =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[520]++, require('pdfkit'));
      const doc =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[521]++, new PDFDocument({
        margin: 50
      }));
      const buffers =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[522]++, []);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[523]++;
      doc.on('data', buffers.push.bind(buffers));
      // Get payroll period information
      const period =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[524]++, await PayrollPeriod_1.payrollPeriodModel.findById(periodId));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[525]++;
      if (!period) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[107][0]++;
        cov_u5rw4oz9l().s[526]++;
        throw new Error('Payroll period not found');
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[107][1]++;
      }
      // Get all payroll records for the period
      const result =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[527]++, await PayrollRecord_1.payrollRecordModel.findAllWithEmployee({
        payroll_period_id: periodId,
        limit: 1000
      }));
      const records =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[528]++, result.records);
      // Add title page
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[529]++;
      doc.fontSize(20).text('PAYROLL PAYSTUBS', {
        align: 'center'
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[530]++;
      doc.fontSize(16).text(`Period: ${period.period_name}`, {
        align: 'center'
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[531]++;
      doc.fontSize(12).text(`From: ${this.formatDate(period.start_date)} To: ${this.formatDate(period.end_date)}`, {
        align: 'center'
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[532]++;
      doc.moveDown(2);
      // Generate paystub for each employee
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[533]++;
      for (const record of records) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[534]++;
        try {
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[535]++;
          this.addPaystubPage(doc, record, period);
        } catch (error) {
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[536]++;
          logger_1.default.error('Error adding paystub page', {
            error: error.message,
            recordId: record.id,
            employeeId: record.employee_id
          });
          // Continue with next record instead of failing completely
        }
      }
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[537]++;
      doc.end();
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[538]++;
      return new Promise((resolve, reject) => {
        /* istanbul ignore next */
        cov_u5rw4oz9l().f[70]++;
        cov_u5rw4oz9l().s[539]++;
        doc.on('end', () => {
          /* istanbul ignore next */
          cov_u5rw4oz9l().f[71]++;
          const pdfBuffer =
          /* istanbul ignore next */
          (cov_u5rw4oz9l().s[540]++, Buffer.concat(buffers));
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[541]++;
          resolve(pdfBuffer);
        });
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[542]++;
        doc.on('error', reject);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[543]++;
      logger_1.default.error('Error exporting period paystubs PDF', {
        error: error.message,
        periodId
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[544]++;
      throw error;
    }
  }
  /**
   * Export department employee paystubs for a period as PDF
   */
  async exportDepartmentPaystubsPDF(periodId, userId) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[72]++;
    cov_u5rw4oz9l().s[545]++;
    try {
      const PDFDocument =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[546]++, require('pdfkit'));
      const doc =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[547]++, new PDFDocument({
        margin: 50
      }));
      const buffers =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[548]++, []);
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[549]++;
      doc.on('data', buffers.push.bind(buffers));
      // Get department head's department
      const {
        DepartmentHeadService
      } =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[550]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_u5rw4oz9l().f[73]++;
        cov_u5rw4oz9l().s[551]++;
        return __importStar(require('../department-head/departmentHeadService'));
      }));
      const departmentHeadService =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[552]++, new DepartmentHeadService());
      const department =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[553]++, await departmentHeadService.getDepartmentInfo(userId));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[554]++;
      if (!department) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[108][0]++;
        cov_u5rw4oz9l().s[555]++;
        throw new Error('Department not found for user');
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[108][1]++;
      }
      // Get payroll period information
      const period =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[556]++, await PayrollPeriod_1.payrollPeriodModel.findById(periodId));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[557]++;
      if (!period) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[109][0]++;
        cov_u5rw4oz9l().s[558]++;
        throw new Error('Payroll period not found');
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[109][1]++;
      }
      // Get payroll records for the department
      const result =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[559]++, await PayrollRecord_1.payrollRecordModel.findAllWithEmployee({
        payroll_period_id: periodId,
        department_id: department.id,
        limit: 1000
      }));
      const records =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[560]++, result.records);
      // Add title page
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[561]++;
      doc.fontSize(20).text('DEPARTMENT PAYROLL PAYSTUBS', {
        align: 'center'
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[562]++;
      doc.fontSize(16).text(`Department: ${department.name}`, {
        align: 'center'
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[563]++;
      doc.fontSize(16).text(`Period: ${period.period_name}`, {
        align: 'center'
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[564]++;
      doc.fontSize(12).text(`From: ${this.formatDate(period.start_date)} To: ${this.formatDate(period.end_date)}`, {
        align: 'center'
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[565]++;
      doc.moveDown(2);
      // Generate paystub for each employee
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[566]++;
      for (const record of records) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[567]++;
        try {
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[568]++;
          this.addPaystubPage(doc, record, period);
        } catch (error) {
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[569]++;
          logger_1.default.error('Error adding paystub page', {
            error: error.message,
            recordId: record.id,
            employeeId: record.employee_id
          });
          // Continue with next record instead of failing completely
        }
      }
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[570]++;
      doc.end();
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[571]++;
      return new Promise((resolve, reject) => {
        /* istanbul ignore next */
        cov_u5rw4oz9l().f[74]++;
        cov_u5rw4oz9l().s[572]++;
        doc.on('end', () => {
          /* istanbul ignore next */
          cov_u5rw4oz9l().f[75]++;
          const pdfBuffer =
          /* istanbul ignore next */
          (cov_u5rw4oz9l().s[573]++, Buffer.concat(buffers));
          /* istanbul ignore next */
          cov_u5rw4oz9l().s[574]++;
          resolve(pdfBuffer);
        });
        /* istanbul ignore next */
        cov_u5rw4oz9l().s[575]++;
        doc.on('error', reject);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[576]++;
      logger_1.default.error('Error exporting department paystubs PDF', {
        error: error.message,
        periodId,
        userId
      });
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[577]++;
      throw error;
    }
  }
  /**
   * Helper function to safely format numbers for PDF
   */
  formatCurrency(amount) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[76]++;
    cov_u5rw4oz9l().s[578]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[579]++;
      if (
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[111][0]++, amount === null) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[111][1]++, amount === undefined)) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[110][0]++;
        cov_u5rw4oz9l().s[580]++;
        return '₱0.00';
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[110][1]++;
      }
      const num =
      /* istanbul ignore next */
      (cov_u5rw4oz9l().s[581]++, Number(amount));
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[582]++;
      if (
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[113][0]++, isNaN(num)) ||
      /* istanbul ignore next */
      (cov_u5rw4oz9l().b[113][1]++, !isFinite(num))) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[112][0]++;
        cov_u5rw4oz9l().s[583]++;
        return '₱0.00';
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[112][1]++;
      }
      cov_u5rw4oz9l().s[584]++;
      return `₱${num.toFixed(2)}`;
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[585]++;
      return '₱0.00';
    }
  }
  /**
   * Helper function to safely format dates for PDF
   */
  formatDate(date) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[77]++;
    cov_u5rw4oz9l().s[586]++;
    try {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[587]++;
      if (!date) {
        /* istanbul ignore next */
        cov_u5rw4oz9l().b[114][0]++;
        cov_u5rw4oz9l().s[588]++;
        return 'N/A';
      } else
      /* istanbul ignore next */
      {
        cov_u5rw4oz9l().b[114][1]++;
      }
      cov_u5rw4oz9l().s[589]++;
      return new Date(date).toLocaleDateString();
    } catch (error) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().s[590]++;
      return 'N/A';
    }
  }
  /**
   * Add a paystub page to the PDF document
   */
  addPaystubPage(doc, record, period) {
    /* istanbul ignore next */
    cov_u5rw4oz9l().f[78]++;
    cov_u5rw4oz9l().s[591]++;
    // Add new page for each employee
    doc.addPage();
    // Employee Information
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[592]++;
    doc.fontSize(18).text('PAYSTUB', {
      align: 'center'
    });
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[593]++;
    doc.moveDown(1);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[594]++;
    doc.fontSize(12);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[595]++;
    doc.text(`Employee ID: ${record.employee.employee_id}`, 50, 100);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[596]++;
    doc.text(`Name: ${record.employee.user.first_name} ${record.employee.user.last_name}`, 50, 120);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[597]++;
    doc.text(`Department: ${record.employee.department.name}`, 50, 140);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[598]++;
    doc.text(`Pay Period: ${period.period_name}`, 50, 180);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[599]++;
    doc.text(`Period: ${this.formatDate(period.start_date)} - ${this.formatDate(period.end_date)}`, 50, 200);
    // Hours Worked Section
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[600]++;
    doc.moveDown(2);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[601]++;
    doc.fontSize(14).text('HOURS WORKED', {
      underline: true
    });
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[602]++;
    doc.moveDown(0.5);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[603]++;
    doc.fontSize(12);
    const regularHours =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[604]++,
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[115][0]++, Number(record.total_regular_hours)) ||
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[115][1]++, 0));
    const overtimeHours =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[605]++,
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[116][0]++, Number(record.total_overtime_hours)) ||
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[116][1]++, 0));
    const lateHours =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[606]++,
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[117][0]++, Number(record.total_late_hours)) ||
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[117][1]++, 0));
    const paidLeaveHours =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[607]++,
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[118][0]++, Number(record.paid_leave_hours)) ||
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[118][1]++, 0));
    const totalHours =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[608]++, regularHours + overtimeHours + paidLeaveHours);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[609]++;
    doc.text(`Regular Hours: ${regularHours}`, 50);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[610]++;
    doc.text(`Overtime Hours: ${overtimeHours}`, 50);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[611]++;
    doc.text(`Late Hours: ${lateHours}`, 50);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[612]++;
    doc.text(`Paid Leave Hours: ${paidLeaveHours}`, 50);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[613]++;
    doc.text(`Total Hours: ${totalHours}`, 50);
    // Earnings Section
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[614]++;
    doc.moveDown(1);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[615]++;
    doc.fontSize(14).text('EARNINGS', {
      underline: true
    });
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[616]++;
    doc.moveDown(0.5);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[617]++;
    doc.fontSize(12);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[618]++;
    doc.text(`Base Salary: ${this.formatCurrency(record.base_salary)}`, 50);
    // Calculate Leave Pay
    const hourlyRate =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[619]++,
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[119][0]++, Number(record.hourly_rate)) ||
    /* istanbul ignore next */
    (cov_u5rw4oz9l().b[119][1]++, 0));
    const leavePay =
    /* istanbul ignore next */
    (cov_u5rw4oz9l().s[620]++, paidLeaveHours * hourlyRate);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[621]++;
    if (leavePay > 0) {
      /* istanbul ignore next */
      cov_u5rw4oz9l().b[120][0]++;
      cov_u5rw4oz9l().s[622]++;
      doc.text(`Leave Pay: ${this.formatCurrency(leavePay)}`, 50);
    } else
    /* istanbul ignore next */
    {
      cov_u5rw4oz9l().b[120][1]++;
    }
    cov_u5rw4oz9l().s[623]++;
    doc.text(`Benefits: ${this.formatCurrency(record.total_benefits)}`, 50);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[624]++;
    doc.text(`Gross Pay: ${this.formatCurrency(record.gross_pay)}`, 50);
    // Deductions Section
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[625]++;
    doc.moveDown(1);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[626]++;
    doc.fontSize(14).text('DEDUCTIONS', {
      underline: true
    });
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[627]++;
    doc.moveDown(0.5);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[628]++;
    doc.fontSize(12);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[629]++;
    doc.text(`Late Deductions: ${this.formatCurrency(record.late_deductions)}`, 50);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[630]++;
    doc.text(`Total Deductions: ${this.formatCurrency(record.total_deductions)}`, 50);
    // Net Pay Section
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[631]++;
    doc.moveDown(1);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[632]++;
    doc.fontSize(16).text(`NET PAY: ${this.formatCurrency(record.net_pay)}`, 50, {
      underline: true
    });
    // Footer
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[633]++;
    doc.fontSize(10);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[634]++;
    doc.text(`Generated on: ${this.formatDate(new Date())}`, 50, doc.page.height - 100);
    /* istanbul ignore next */
    cov_u5rw4oz9l().s[635]++;
    doc.text(`Status: ${record.status?.toUpperCase()}`, 50, doc.page.height - 80);
  }
}
/* istanbul ignore next */
cov_u5rw4oz9l().s[636]++;
exports.payrollService = new PayrollService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,