{"version":3,"names":["TimeCorrectionRequest_1","cov_1ft8dm7n3c","s","require","AttendanceRecord_1","AttendanceSession_1","Employee_1","database_1","logger_1","__importDefault","attendanceHoursCalculator_1","TimeCorrectionService","createTimeCorrectionRequest","data","f","employeeId","requestDate","sessionType","requestedTime","reason","employee","employeeModel","findById","b","Error","status","today","Date","setHours","existingRequest","getExistingRequest","requestData","request","timeCorrectionRequestModel","default","info","requestId","id","employeeCode","employee_id","getTimeCorrectionRequest","findByIdWithDetails","updateTimeCorrectionRequest","listTimeCorrectionRequests","params","getPendingRequestsForDepartmentHead","departmentHeadUserId","approveTimeCorrectionRequest","approverId","approved","comments","updateData","approvedBy","approvedAt","updatedRequest","applyTimeCorrection","attendanceRecord","attendanceRecordModel","findByEmployeeAndDate","createAttendanceRecord","date","overallStatus","existingSessions","attendanceSessionModel","getSessionsByAttendanceRecord","existingSession","find","updateAttendanceSession","timestamp","createAttendanceSession","attendanceRecordId","totalHours","calculateDailyHours","updateAttendanceRecord","query","result","getPool","rows","length","row","requestedClockIn","requestedClockOut","sessions","defaultHoursCalculator","calculateFromSessions","getTimeCorrectionStats","departmentId","getTimeCorrectionRequestStats","deleteTimeCorrectionRequest","getEmployeeTimeCorrectionRequests","startDate","endDate","page","limit","sortBy","sortOrder","validateTimeCorrectionRequest","errors","push","trim","isValid","exports","timeCorrectionService"],"sources":["/home/kim/tito/server/src/services/attendance/timeCorrectionService.ts"],"sourcesContent":["import { timeCorrectionRequestModel, TimeCorrectionRequest, CreateTimeCorrectionRequestData, UpdateTimeCorrectionRequestData } from '../../models/attendance/TimeCorrectionRequest';\nimport { attendanceRecordModel } from '../../models/attendance/AttendanceRecord';\nimport { attendanceSessionModel } from '../../models/attendance/AttendanceSession';\nimport { employeeModel } from '../../models/hr/Employee';\nimport { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\nimport { defaultHoursCalculator } from '../../utils/attendanceHoursCalculator';\n\nexport interface CreateTimeCorrectionData {\n  employeeId: string;\n  requestDate: Date;\n  sessionType: 'morning_in' | 'morning_out' | 'afternoon_in' | 'afternoon_out';\n  requestedTime: Date;\n  reason: string;\n}\n\nexport interface ApproveTimeCorrectionData {\n  requestId: string;\n  approverId: string;\n  approved: boolean;\n  comments?: string;\n}\n\nexport interface TimeCorrectionWithDetails extends TimeCorrectionRequest {\n  employeeCode: string;\n  employeeName: string;\n  departmentName: string | null;\n  approverName: string | null;\n}\n\nexport class TimeCorrectionService {\n  /**\n   * Create a time correction request\n   */\n  async createTimeCorrectionRequest(data: CreateTimeCorrectionData): Promise<TimeCorrectionRequest> {\n    const { employeeId, requestDate, sessionType, requestedTime, reason } = data;\n\n    // Verify employee exists and is active\n    const employee = await employeeModel.findById(employeeId);\n    if (!employee) {\n      throw new Error('Employee not found');\n    }\n\n    if (employee.status !== 'active') {\n      throw new Error('Employee is not active');\n    }\n\n    // Validate request date (cannot be in the future)\n    const today = new Date();\n    today.setHours(23, 59, 59, 999);\n    if (requestDate > today) {\n      throw new Error('Cannot request correction for future dates');\n    }\n\n    // Check if there's already a pending request for the same date and session type\n    const existingRequest = await this.getExistingRequest(employeeId, requestDate, sessionType);\n    if (existingRequest) {\n      throw new Error('A pending time correction request already exists for this date and session type');\n    }\n\n    // Create the time correction request\n    const requestData: CreateTimeCorrectionRequestData = {\n      employeeId,\n      requestDate,\n      sessionType,\n      requestedTime,\n      reason\n    };\n\n    const request = await timeCorrectionRequestModel.createTimeCorrectionRequest(requestData);\n\n    logger.info('Time correction request created', {\n      requestId: request.id,\n      employeeId,\n      employeeCode: employee.employee_id,\n      requestDate,\n      sessionType,\n      requestedTime,\n      reason\n    });\n\n    return request;\n  }\n\n  /**\n   * Get time correction request by ID\n   */\n  async getTimeCorrectionRequest(id: string): Promise<TimeCorrectionWithDetails | null> {\n    return await timeCorrectionRequestModel.findByIdWithDetails(id);\n  }\n\n  /**\n   * Update time correction request\n   */\n  async updateTimeCorrectionRequest(id: string, data: UpdateTimeCorrectionRequestData): Promise<TimeCorrectionRequest | null> {\n    return await timeCorrectionRequestModel.updateTimeCorrectionRequest(id, data);\n  }\n\n  /**\n   * List time correction requests with filtering\n   */\n  async listTimeCorrectionRequests(params: {\n    page?: number;\n    limit?: number;\n    employeeId?: string;\n    departmentId?: string;\n    status?: 'pending' | 'approved' | 'rejected';\n    sessionType?: 'morning_in' | 'morning_out' | 'afternoon_in' | 'afternoon_out';\n    startDate?: Date;\n    endDate?: Date;\n    search?: string;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n  } = {}): Promise<{\n    requests: TimeCorrectionWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return await timeCorrectionRequestModel.listTimeCorrectionRequests(params);\n  }\n\n  /**\n   * Get pending requests for a department head\n   */\n  async getPendingRequestsForDepartmentHead(departmentHeadUserId: string): Promise<TimeCorrectionWithDetails[]> {\n    return await timeCorrectionRequestModel.getPendingRequestsForDepartmentHead(departmentHeadUserId);\n  }\n\n  /**\n   * Approve or reject a time correction request\n   */\n  async approveTimeCorrectionRequest(data: ApproveTimeCorrectionData): Promise<TimeCorrectionRequest> {\n    const { requestId, approverId, approved, comments } = data;\n\n    // Get the request\n    const request = await timeCorrectionRequestModel.findById(requestId);\n    if (!request) {\n      throw new Error('Time correction request not found');\n    }\n\n    if (request.status !== 'pending') {\n      throw new Error('Request has already been processed');\n    }\n\n    // Update the request status\n    const updateData: UpdateTimeCorrectionRequestData = {\n      status: approved ? 'approved' : 'rejected',\n      approvedBy: approverId,\n      approvedAt: new Date()\n    };\n\n    const updatedRequest = await timeCorrectionRequestModel.updateTimeCorrectionRequest(requestId, updateData);\n    if (!updatedRequest) {\n      throw new Error('Failed to update time correction request');\n    }\n\n    // If approved, apply the time correction\n    if (approved) {\n      await this.applyTimeCorrection(updatedRequest);\n    }\n\n    logger.info('Time correction request processed', {\n      requestId,\n      approverId,\n      approved,\n      comments,\n      employeeId: request.employeeId,\n      requestDate: request.requestDate,\n      sessionType: request.sessionType,\n      requestedTime: request.requestedTime\n    });\n\n    return updatedRequest;\n  }\n\n  /**\n   * Apply approved time correction to attendance records\n   */\n  private async applyTimeCorrection(request: TimeCorrectionRequest): Promise<void> {\n    const { employeeId, requestDate, sessionType, requestedTime } = request;\n\n    // Get or create attendance record for the date\n    let attendanceRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, requestDate);\n    \n    if (!attendanceRecord) {\n      attendanceRecord = await attendanceRecordModel.createAttendanceRecord({\n        employeeId,\n        date: requestDate,\n        overallStatus: 'present'\n      });\n    }\n\n    // Check if session already exists\n    const existingSessions = await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id);\n    const existingSession = existingSessions.find(s => s.sessionType === sessionType);\n\n    if (existingSession) {\n      // Update existing session\n      await attendanceSessionModel.updateAttendanceSession(existingSession.id, {\n        timestamp: requestedTime\n      });\n    } else {\n      // Create new session\n      await attendanceSessionModel.createAttendanceSession({\n        attendanceRecordId: attendanceRecord.id,\n        sessionType,\n        timestamp: requestedTime\n      });\n    }\n\n    // Recalculate overall status\n    const totalHours = await this.calculateDailyHours(attendanceRecord.id);\n    let overallStatus: 'present' | 'late' | 'absent' | 'partial' = 'present';\n    \n    if (totalHours < 4) {\n      overallStatus = 'partial';\n    } else if (totalHours < 8) {\n      overallStatus = 'late';\n    }\n\n    await attendanceRecordModel.updateAttendanceRecord(attendanceRecord.id, {\n      overallStatus\n    });\n\n    logger.info('Time correction applied successfully', {\n      requestId: request.id,\n      employeeId,\n      requestDate,\n      sessionType,\n      requestedTime,\n      totalHours,\n      overallStatus\n    });\n  }\n\n  /**\n   * Get existing time correction request\n   */\n  private async getExistingRequest(\n    employeeId: string, \n    requestDate: Date, \n    sessionType: 'morning_in' | 'morning_out' | 'afternoon_in' | 'afternoon_out'\n  ): Promise<TimeCorrectionRequest | null> {\n    const query = `\n      SELECT \n        id,\n        employee_id as \"employeeId\",\n        correction_date as \"requestDate\",\n        session_type as \"sessionType\",\n        requested_clock_in as \"requestedClockIn\",\n        requested_clock_out as \"requestedClockOut\",\n        reason,\n        status,\n        approver_id as \"approvedBy\",\n        approved_at as \"approvedAt\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM time_correction_requests\n      WHERE employee_id = $1 \n        AND correction_date = $2 \n        AND session_type = $3 \n        AND status = 'pending'\n    `;\n\n    const result = await getPool().query(query, [employeeId, requestDate, sessionType]);\n    if (result.rows.length === 0) {\n      return null;\n    }\n\n    // Transform the result to match the interface\n    const row = result.rows[0];\n    return {\n      ...row,\n      requestedTime: row.sessionType === 'clock_in' ? row.requestedClockIn : row.requestedClockOut\n    };\n  }\n\n  /**\n   * Calculate daily hours for an attendance record using the new mathematical formulation\n   */\n  private async calculateDailyHours(attendanceRecordId: string): Promise<number> {\n    const sessions = await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecordId);\n    \n    // Use the new hours calculator\n    const result = defaultHoursCalculator.calculateFromSessions(sessions);\n    \n    return result.totalHours;\n  }\n\n  /**\n   * Get time correction request statistics\n   */\n  async getTimeCorrectionStats(employeeId?: string, departmentId?: string): Promise<{\n    totalRequests: number;\n    pendingRequests: number;\n    approvedRequests: number;\n    rejectedRequests: number;\n  }> {\n    return await timeCorrectionRequestModel.getTimeCorrectionRequestStats(employeeId, departmentId);\n  }\n\n  /**\n   * Delete time correction request\n   */\n  async deleteTimeCorrectionRequest(id: string): Promise<boolean> {\n    const request = await timeCorrectionRequestModel.findById(id);\n    if (!request) {\n      throw new Error('Time correction request not found');\n    }\n\n    if (request.status !== 'pending') {\n      throw new Error('Cannot delete processed requests');\n    }\n\n    return await timeCorrectionRequestModel.deleteTimeCorrectionRequest(id);\n  }\n\n  /**\n   * Get time correction requests for an employee\n   */\n  async getEmployeeTimeCorrectionRequests(\n    employeeId: string,\n    startDate?: Date,\n    endDate?: Date,\n    page: number = 1,\n    limit: number = 20\n  ): Promise<{\n    requests: TimeCorrectionWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return await timeCorrectionRequestModel.listTimeCorrectionRequests({\n      employeeId,\n      startDate,\n      endDate,\n      page,\n      limit,\n      sortBy: 'created_at',\n      sortOrder: 'desc'\n    });\n  }\n\n  /**\n   * Validate time correction request\n   */\n  async validateTimeCorrectionRequest(data: CreateTimeCorrectionData): Promise<{\n    isValid: boolean;\n    errors: string[];\n  }> {\n    const errors: string[] = [];\n\n    // Check if employee exists\n    const employee = await employeeModel.findById(data.employeeId);\n    if (!employee) {\n      errors.push('Employee not found');\n    } else if (employee.status !== 'active') {\n      errors.push('Employee is not active');\n    }\n\n    // Validate request date\n    const today = new Date();\n    today.setHours(23, 59, 59, 999);\n    if (data.requestDate > today) {\n      errors.push('Cannot request correction for future dates');\n    }\n\n    // Validate requested time\n    if (data.requestedTime > new Date()) {\n      errors.push('Requested time cannot be in the future');\n    }\n\n    // Validate reason\n    if (!data.reason || data.reason.trim().length < 10) {\n      errors.push('Reason must be at least 10 characters long');\n    }\n\n    // Check for existing pending request\n    if (employee) {\n      const existingRequest = await this.getExistingRequest(\n        data.employeeId, \n        data.requestDate, \n        data.sessionType\n      );\n      if (existingRequest) {\n        errors.push('A pending time correction request already exists for this date and session type');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n}\n\nexport const timeCorrectionService = new TimeCorrectionService();"],"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","ignoreList":[]}