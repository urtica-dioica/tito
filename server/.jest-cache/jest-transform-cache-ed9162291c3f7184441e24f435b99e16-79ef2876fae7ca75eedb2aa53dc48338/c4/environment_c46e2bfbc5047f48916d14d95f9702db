ae0ab787ab0fdf371c7a0083ae4df499
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTest = exports.isDevelopment = exports.isProduction = exports.validateEnvironment = exports.config = void 0;
const dotenv_1 = __importDefault(require("dotenv"));
// Load environment variables from .env file
dotenv_1.default.config();
exports.config = {
    // Server Configuration
    server: {
        port: parseInt(process.env['PORT'] || '3000'),
        host: process.env['HOST'] || 'localhost',
        nodeEnv: process.env['NODE_ENV'] || 'development',
    },
    // Frontend Configuration
    frontend: {
        port: parseInt(process.env['FRONTEND_PORT'] || '3001'),
        host: process.env['FRONTEND_HOST'] || 'localhost',
        url: process.env['FRONTEND_URL'] || 'http://localhost:3001',
    },
    // Database Configuration (PostgreSQL)
    database: {
        host: process.env['DB_HOST'] || 'localhost',
        port: parseInt(process.env['DB_PORT'] || '5432'),
        name: process.env['DB_NAME'] || 'tito_hr',
        user: process.env['DB_USER'] || 'postgres',
        password: process.env['DB_PASSWORD'] || '',
        ssl: process.env['DB_SSL'] === 'true',
        maxConnections: 20,
        idleTimeoutMillis: 30000,
        connectionTimeoutMillis: 10000,
    },
    // Redis Configuration
    redis: {
        host: process.env['REDIS_HOST'] || 'localhost',
        port: parseInt(process.env['REDIS_PORT'] || '6379'),
        password: process.env['REDIS_PASSWORD'] || undefined,
        db: parseInt(process.env['REDIS_DB'] || '0'),
    },
    // JWT Configuration
    jwt: {
        secret: process.env['JWT_SECRET'] || 'dev-secret-change-in-production',
        expiresIn: process.env['JWT_EXPIRES_IN'] || '15m',
        refreshExpiresIn: process.env['JWT_REFRESH_EXPIRES_IN'] || '7d',
    },
    // Security Configuration
    security: {
        bcryptRounds: parseInt(process.env['BCRYPT_ROUNDS'] || '12'),
        rateLimitWindowMs: parseInt(process.env['RATE_LIMIT_WINDOW_MS'] || '900000'),
        rateLimitMaxRequests: parseInt(process.env['RATE_LIMIT_MAX_REQUESTS'] || '100'),
    },
    // Email Configuration
    email: {
        host: process.env['EMAIL_HOST'] || 'smtp.gmail.com',
        port: parseInt(process.env['EMAIL_PORT'] || '587'),
        user: process.env['EMAIL_USER'] || '',
        pass: process.env['EMAIL_PASS'] || '',
        from: process.env['EMAIL_FROM'] || 'noreply@tito-hr.com',
    },
    // File Upload Configuration
    upload: {
        maxSize: parseInt(process.env['UPLOAD_MAX_SIZE'] || '5242880'), // 5MB
        path: process.env['UPLOAD_PATH'] || './uploads',
        selfieRetentionDays: parseInt(process.env['SELFIE_RETENTION_DAYS'] || '2'),
    },
    // Logging Configuration
    logging: {
        level: process.env['LOG_LEVEL'] || 'info',
        file: process.env['LOG_FILE'] || './logs/app.log',
    },
    // CORS Configuration - Enhanced Security
    cors: {
        origin: (origin, callback) => {
            // SECURITY: Define strict allowed origins
            const allowedOrigins = process.env['CORS_ORIGIN']
                ? process.env['CORS_ORIGIN'].split(',').map(origin => origin.trim())
                : ['http://localhost:3001', 'http://localhost:5173'];
            // SECURITY: Only allow HTTPS in production
            if (process.env['NODE_ENV'] === 'production') {
                // Validate that all origins use HTTPS
                const invalidOrigins = allowedOrigins.filter(origin => !origin.startsWith('https://'));
                if (invalidOrigins.length > 0) {
                    console.warn('SECURITY WARNING: Non-HTTPS origins found in production:', invalidOrigins);
                }
            }
            // SECURITY: Validate origin format
            const validateOrigin = (origin) => {
                try {
                    const url = new URL(origin);
                    // Only allow http/https protocols
                    return ['http:', 'https:'].includes(url.protocol);
                }
                catch {
                    return false;
                }
            };
            // SECURITY: Reject requests with no origin (prevents some CSRF attacks)
            // Allow requests without origin in development for testing
            if (!origin && process.env['NODE_ENV'] !== 'production') {
                return callback(null, true);
            }
            if (!origin) {
                return callback(new Error('Origin header required'));
            }
            // SECURITY: Validate origin format
            if (!validateOrigin(origin)) {
                return callback(new Error('Invalid origin format'));
            }
            // SECURITY: Check against allowed origins
            if (allowedOrigins.includes(origin)) {
                callback(null, true);
            }
            else {
                console.warn('CORS blocked request from:', origin);
                callback(new Error('Not allowed by CORS policy'));
            }
        },
        credentials: process.env['CORS_CREDENTIALS'] === 'true',
        methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
        allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept'],
        maxAge: 86400, // 24 hours
        optionsSuccessStatus: 200 // Some legacy browsers choke on 204
    },
    // API Configuration
    api: {
        prefix: process.env['API_PREFIX'] || '/api',
        version: process.env['API_VERSION'] || 'v1',
    },
    // Health Check Configuration
    healthCheck: {
        interval: parseInt(process.env['HEALTH_CHECK_INTERVAL'] || '30000'),
        timeout: parseInt(process.env['HEALTH_CHECK_TIMEOUT'] || '5000'),
    },
};
// Validate required environment variables
const validateEnvironment = () => {
    // Only require JWT_SECRET for development
    const required = process.env['NODE_ENV'] === 'production' ? [
        'DB_HOST',
        'DB_NAME',
        'DB_USER',
        'DB_PASSWORD',
        'JWT_SECRET',
    ] : [
        'JWT_SECRET',
    ];
    const missing = required.filter(key => !process.env[key]);
    if (missing.length > 0) {
        throw new Error(`Missing required environment variables: ${missing.join(', ')}`);
    }
};
exports.validateEnvironment = validateEnvironment;
// Check if we're in production
const isProduction = () => exports.config.server.nodeEnv === 'production';
exports.isProduction = isProduction;
const isDevelopment = () => exports.config.server.nodeEnv === 'development';
exports.isDevelopment = isDevelopment;
const isTest = () => exports.config.server.nodeEnv === 'test';
exports.isTest = isTest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,