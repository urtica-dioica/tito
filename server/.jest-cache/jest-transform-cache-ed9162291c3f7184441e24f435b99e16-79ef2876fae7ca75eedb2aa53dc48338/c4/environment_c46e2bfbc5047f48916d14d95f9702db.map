{"file":"/home/kim/tito/server/src/config/environment.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/src/config/environment.ts"],"sourcesContent":["import dotenv from 'dotenv';\n\n// Load environment variables from .env file\ndotenv.config();\n\nexport const config = {\n  // Server Configuration\n  server: {\n    port: parseInt(process.env['PORT'] || '3000'),\n    host: process.env['HOST'] || 'localhost',\n    nodeEnv: process.env['NODE_ENV'] || 'development',\n  },\n\n  // Frontend Configuration\n  frontend: {\n    port: parseInt(process.env['FRONTEND_PORT'] || '3001'),\n    host: process.env['FRONTEND_HOST'] || 'localhost',\n    url: process.env['FRONTEND_URL'] || 'http://localhost:3001',\n  },\n\n  // Database Configuration (PostgreSQL)\n  database: {\n    host: process.env['DB_HOST'] || 'localhost',\n    port: parseInt(process.env['DB_PORT'] || '5432'),\n    name: process.env['DB_NAME'] || 'tito_hr',\n    user: process.env['DB_USER'] || 'postgres',\n    password: process.env['DB_PASSWORD'] || '',\n    ssl: process.env['DB_SSL'] === 'true',\n    maxConnections: 20,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 10000,\n  },\n\n  // Redis Configuration\n  redis: {\n    host: process.env['REDIS_HOST'] || 'localhost',\n    port: parseInt(process.env['REDIS_PORT'] || '6379'),\n    password: process.env['REDIS_PASSWORD'] || undefined,\n    db: parseInt(process.env['REDIS_DB'] || '0'),\n  },\n\n  // JWT Configuration\n  jwt: {\n    secret: process.env['JWT_SECRET'] || 'dev-secret-change-in-production',\n    expiresIn: process.env['JWT_EXPIRES_IN'] || '15m',\n    refreshExpiresIn: process.env['JWT_REFRESH_EXPIRES_IN'] || '7d',\n  },\n\n  // Security Configuration\n  security: {\n    bcryptRounds: parseInt(process.env['BCRYPT_ROUNDS'] || '12'),\n    rateLimitWindowMs: parseInt(process.env['RATE_LIMIT_WINDOW_MS'] || '900000'),\n    rateLimitMaxRequests: parseInt(process.env['RATE_LIMIT_MAX_REQUESTS'] || '100'),\n  },\n\n  // Email Configuration\n  email: {\n    host: process.env['EMAIL_HOST'] || 'smtp.gmail.com',\n    port: parseInt(process.env['EMAIL_PORT'] || '587'),\n    user: process.env['EMAIL_USER'] || '',\n    pass: process.env['EMAIL_PASS'] || '',\n    from: process.env['EMAIL_FROM'] || 'noreply@tito-hr.com',\n  },\n\n  // File Upload Configuration\n  upload: {\n    maxSize: parseInt(process.env['UPLOAD_MAX_SIZE'] || '5242880'), // 5MB\n    path: process.env['UPLOAD_PATH'] || './uploads',\n    selfieRetentionDays: parseInt(process.env['SELFIE_RETENTION_DAYS'] || '2'),\n  },\n\n  // Logging Configuration\n  logging: {\n    level: process.env['LOG_LEVEL'] || 'info',\n    file: process.env['LOG_FILE'] || './logs/app.log',\n  },\n\n  // CORS Configuration - Enhanced Security\n  cors: {\n    origin: (origin: string | undefined, callback: (err: Error | null, allow?: boolean) => void) => {\n      // SECURITY: Define strict allowed origins\n      const allowedOrigins = process.env['CORS_ORIGIN']\n        ? process.env['CORS_ORIGIN'].split(',').map(origin => origin.trim())\n        : ['http://localhost:3001', 'http://localhost:5173'];\n\n      // SECURITY: Only allow HTTPS in production\n      if (process.env['NODE_ENV'] === 'production') {\n        // Validate that all origins use HTTPS\n        const invalidOrigins = allowedOrigins.filter(origin => !origin.startsWith('https://'));\n        if (invalidOrigins.length > 0) {\n          console.warn('SECURITY WARNING: Non-HTTPS origins found in production:', invalidOrigins);\n        }\n      }\n\n      // SECURITY: Validate origin format\n      const validateOrigin = (origin: string): boolean => {\n        try {\n          const url = new URL(origin);\n          // Only allow http/https protocols\n          return ['http:', 'https:'].includes(url.protocol);\n        } catch {\n          return false;\n        }\n      };\n\n      // SECURITY: Reject requests with no origin (prevents some CSRF attacks)\n      // Allow requests without origin in development for testing\n      if (!origin && process.env['NODE_ENV'] !== 'production') {\n        return callback(null, true);\n      }\n\n      if (!origin) {\n        return callback(new Error('Origin header required'));\n      }\n\n      // SECURITY: Validate origin format\n      if (!validateOrigin(origin)) {\n        return callback(new Error('Invalid origin format'));\n      }\n\n      // SECURITY: Check against allowed origins\n      if (allowedOrigins.includes(origin)) {\n        callback(null, true);\n      } else {\n        console.warn('CORS blocked request from:', origin);\n        callback(new Error('Not allowed by CORS policy'));\n      }\n    },\n    credentials: process.env['CORS_CREDENTIALS'] === 'true',\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept'],\n    maxAge: 86400, // 24 hours\n    optionsSuccessStatus: 200 // Some legacy browsers choke on 204\n  },\n\n  // API Configuration\n  api: {\n    prefix: process.env['API_PREFIX'] || '/api',\n    version: process.env['API_VERSION'] || 'v1',\n  },\n\n  // Health Check Configuration\n  healthCheck: {\n    interval: parseInt(process.env['HEALTH_CHECK_INTERVAL'] || '30000'),\n    timeout: parseInt(process.env['HEALTH_CHECK_TIMEOUT'] || '5000'),\n  },\n};\n\n// Validate required environment variables\nexport const validateEnvironment = (): void => {\n  // Only require JWT_SECRET for development\n  const required = process.env['NODE_ENV'] === 'production' ? [\n    'DB_HOST',\n    'DB_NAME',\n    'DB_USER',\n    'DB_PASSWORD',\n    'JWT_SECRET',\n  ] : [\n    'JWT_SECRET',\n  ];\n\n  const missing = required.filter(key => !process.env[key]);\n  \n  if (missing.length > 0) {\n    throw new Error(`Missing required environment variables: ${missing.join(', ')}`);\n  }\n};\n\n// Check if we're in production\nexport const isProduction = (): boolean => config.server.nodeEnv === 'production';\nexport const isDevelopment = (): boolean => config.server.nodeEnv === 'development';\nexport const isTest = (): boolean => config.server.nodeEnv === 'test'; "],"version":3}