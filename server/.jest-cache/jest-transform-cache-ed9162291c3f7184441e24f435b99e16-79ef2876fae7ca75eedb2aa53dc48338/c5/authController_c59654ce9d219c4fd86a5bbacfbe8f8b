7859ca8c83e5863f3132c1f1628f17b6
"use strict";

/* istanbul ignore next */
function cov_tic3jq0qa() {
  var path = "/home/kim/tito/server/src/controllers/auth/authController.ts";
  var hash = "e3d4827a4481c9b6d59c2b2d2bf2acbd042eb7e3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/auth/authController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 57
        }
      },
      "2": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 64
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 48
        }
      },
      "4": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 54
        }
      },
      "5": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 42
        }
      },
      "6": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "7": {
        start: {
          line: 19,
          column: 40
        },
        end: {
          line: 19,
          column: 48
        }
      },
      "8": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 30,
          column: 13
        }
      },
      "9": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 28,
          column: 19
        }
      },
      "10": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "11": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 85
        }
      },
      "12": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "13": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 40,
          column: 19
        }
      },
      "14": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 23
        }
      },
      "15": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 49,
          column: 15
        }
      },
      "16": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "17": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 65,
          column: 15
        }
      },
      "18": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 74,
          column: 15
        }
      },
      "19": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "20": {
        start: {
          line: 83,
          column: 27
        },
        end: {
          line: 83,
          column: 43
        }
      },
      "21": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "22": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 91,
          column: 19
        }
      },
      "23": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 23
        }
      },
      "24": {
        start: {
          line: 95,
          column: 27
        },
        end: {
          line: 95,
          column: 73
        }
      },
      "25": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "26": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 103,
          column: 19
        }
      },
      "27": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 23
        }
      },
      "28": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 43
        }
      },
      "29": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 44
        }
      },
      "30": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 114,
          column: 15
        }
      },
      "31": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 123,
          column: 15
        }
      },
      "32": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "33": {
        start: {
          line: 131,
          column: 37
        },
        end: {
          line: 131,
          column: 45
        }
      },
      "34": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 141,
          column: 13
        }
      },
      "35": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 139,
          column: 19
        }
      },
      "36": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 23
        }
      },
      "37": {
        start: {
          line: 143,
          column: 27
        },
        end: {
          line: 143,
          column: 85
        }
      },
      "38": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "39": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 151,
          column: 19
        }
      },
      "40": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 23
        }
      },
      "41": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 160,
          column: 15
        }
      },
      "42": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 166,
          column: 15
        }
      },
      "43": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 175,
          column: 15
        }
      },
      "44": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 184,
          column: 15
        }
      },
      "45": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "46": {
        start: {
          line: 192,
          column: 53
        },
        end: {
          line: 192,
          column: 61
        }
      },
      "47": {
        start: {
          line: 193,
          column: 27
        },
        end: {
          line: 193,
          column: 43
        }
      },
      "48": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 203,
          column: 13
        }
      },
      "49": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 201,
          column: 19
        }
      },
      "50": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 23
        }
      },
      "51": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 213,
          column: 13
        }
      },
      "52": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 211,
          column: 19
        }
      },
      "53": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 23
        }
      },
      "54": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "55": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 221,
          column: 19
        }
      },
      "56": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 23
        }
      },
      "57": {
        start: {
          line: 225,
          column: 27
        },
        end: {
          line: 225,
          column: 111
        }
      },
      "58": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 235,
          column: 13
        }
      },
      "59": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 233,
          column: 19
        }
      },
      "60": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 23
        }
      },
      "61": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 241,
          column: 15
        }
      },
      "62": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 250,
          column: 15
        }
      },
      "63": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "64": {
        start: {
          line: 258,
          column: 30
        },
        end: {
          line: 258,
          column: 38
        }
      },
      "65": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 268,
          column: 13
        }
      },
      "66": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 266,
          column: 19
        }
      },
      "67": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 23
        }
      },
      "68": {
        start: {
          line: 270,
          column: 27
        },
        end: {
          line: 270,
          column: 86
        }
      },
      "69": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 280,
          column: 13
        }
      },
      "70": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 278,
          column: 19
        }
      },
      "71": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 23
        }
      },
      "72": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 286,
          column: 15
        }
      },
      "73": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 295,
          column: 15
        }
      },
      "74": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "75": {
        start: {
          line: 303,
          column: 55
        },
        end: {
          line: 303,
          column: 63
        }
      },
      "76": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "77": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 311,
          column: 19
        }
      },
      "78": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 23
        }
      },
      "79": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 323,
          column: 13
        }
      },
      "80": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 321,
          column: 19
        }
      },
      "81": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 322,
          column: 23
        }
      },
      "82": {
        start: {
          line: 325,
          column: 27
        },
        end: {
          line: 325,
          column: 104
        }
      },
      "83": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "84": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 333,
          column: 19
        }
      },
      "85": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 334,
          column: 23
        }
      },
      "86": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 341,
          column: 15
        }
      },
      "87": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 350,
          column: 15
        }
      },
      "88": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 406,
          column: 9
        }
      },
      "89": {
        start: {
          line: 358,
          column: 40
        },
        end: {
          line: 358,
          column: 48
        }
      },
      "90": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 368,
          column: 13
        }
      },
      "91": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 366,
          column: 19
        }
      },
      "92": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 367,
          column: 23
        }
      },
      "93": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 378,
          column: 13
        }
      },
      "94": {
        start: {
          line: 370,
          column: 16
        },
        end: {
          line: 376,
          column: 19
        }
      },
      "95": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 377,
          column: 23
        }
      },
      "96": {
        start: {
          line: 380,
          column: 27
        },
        end: {
          line: 380,
          column: 89
        }
      },
      "97": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 390,
          column: 13
        }
      },
      "98": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 388,
          column: 19
        }
      },
      "99": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 389,
          column: 23
        }
      },
      "100": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 396,
          column: 15
        }
      },
      "101": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 405,
          column: 15
        }
      },
      "102": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 452,
          column: 9
        }
      },
      "103": {
        start: {
          line: 413,
          column: 27
        },
        end: {
          line: 413,
          column: 43
        }
      },
      "104": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 423,
          column: 13
        }
      },
      "105": {
        start: {
          line: 415,
          column: 16
        },
        end: {
          line: 421,
          column: 19
        }
      },
      "106": {
        start: {
          line: 422,
          column: 16
        },
        end: {
          line: 422,
          column: 23
        }
      },
      "107": {
        start: {
          line: 425,
          column: 27
        },
        end: {
          line: 425,
          column: 81
        }
      },
      "108": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 435,
          column: 13
        }
      },
      "109": {
        start: {
          line: 427,
          column: 16
        },
        end: {
          line: 433,
          column: 19
        }
      },
      "110": {
        start: {
          line: 434,
          column: 16
        },
        end: {
          line: 434,
          column: 23
        }
      },
      "111": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 442,
          column: 15
        }
      },
      "112": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 451,
          column: 15
        }
      },
      "113": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 510,
          column: 9
        }
      },
      "114": {
        start: {
          line: 459,
          column: 27
        },
        end: {
          line: 459,
          column: 43
        }
      },
      "115": {
        start: {
          line: 460,
          column: 51
        },
        end: {
          line: 460,
          column: 59
        }
      },
      "116": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 470,
          column: 13
        }
      },
      "117": {
        start: {
          line: 462,
          column: 16
        },
        end: {
          line: 468,
          column: 19
        }
      },
      "118": {
        start: {
          line: 469,
          column: 16
        },
        end: {
          line: 469,
          column: 23
        }
      },
      "119": {
        start: {
          line: 472,
          column: 12
        },
        end: {
          line: 481,
          column: 13
        }
      },
      "120": {
        start: {
          line: 473,
          column: 16
        },
        end: {
          line: 479,
          column: 19
        }
      },
      "121": {
        start: {
          line: 480,
          column: 16
        },
        end: {
          line: 480,
          column: 23
        }
      },
      "122": {
        start: {
          line: 483,
          column: 27
        },
        end: {
          line: 483,
          column: 116
        }
      },
      "123": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 493,
          column: 13
        }
      },
      "124": {
        start: {
          line: 485,
          column: 16
        },
        end: {
          line: 491,
          column: 19
        }
      },
      "125": {
        start: {
          line: 492,
          column: 16
        },
        end: {
          line: 492,
          column: 23
        }
      },
      "126": {
        start: {
          line: 494,
          column: 12
        },
        end: {
          line: 500,
          column: 15
        }
      },
      "127": {
        start: {
          line: 503,
          column: 12
        },
        end: {
          line: 509,
          column: 15
        }
      },
      "128": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 586,
          column: 9
        }
      },
      "129": {
        start: {
          line: 517,
          column: 69
        },
        end: {
          line: 517,
          column: 77
        }
      },
      "130": {
        start: {
          line: 519,
          column: 12
        },
        end: {
          line: 528,
          column: 13
        }
      },
      "131": {
        start: {
          line: 520,
          column: 16
        },
        end: {
          line: 526,
          column: 19
        }
      },
      "132": {
        start: {
          line: 527,
          column: 16
        },
        end: {
          line: 527,
          column: 23
        }
      },
      "133": {
        start: {
          line: 530,
          column: 12
        },
        end: {
          line: 539,
          column: 13
        }
      },
      "134": {
        start: {
          line: 531,
          column: 16
        },
        end: {
          line: 537,
          column: 19
        }
      },
      "135": {
        start: {
          line: 538,
          column: 16
        },
        end: {
          line: 538,
          column: 23
        }
      },
      "136": {
        start: {
          line: 540,
          column: 12
        },
        end: {
          line: 549,
          column: 13
        }
      },
      "137": {
        start: {
          line: 541,
          column: 16
        },
        end: {
          line: 547,
          column: 19
        }
      },
      "138": {
        start: {
          line: 548,
          column: 16
        },
        end: {
          line: 548,
          column: 23
        }
      },
      "139": {
        start: {
          line: 551,
          column: 31
        },
        end: {
          line: 551,
          column: 71
        }
      },
      "140": {
        start: {
          line: 552,
          column: 12
        },
        end: {
          line: 561,
          column: 13
        }
      },
      "141": {
        start: {
          line: 553,
          column: 16
        },
        end: {
          line: 559,
          column: 19
        }
      },
      "142": {
        start: {
          line: 560,
          column: 16
        },
        end: {
          line: 560,
          column: 23
        }
      },
      "143": {
        start: {
          line: 563,
          column: 28
        },
        end: {
          line: 569,
          column: 14
        }
      },
      "144": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 576,
          column: 15
        }
      },
      "145": {
        start: {
          line: 579,
          column: 12
        },
        end: {
          line: 585,
          column: 15
        }
      },
      "146": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 610,
          column: 9
        }
      },
      "147": {
        start: {
          line: 593,
          column: 26
        },
        end: {
          line: 593,
          column: 63
        }
      },
      "148": {
        start: {
          line: 594,
          column: 12
        },
        end: {
          line: 600,
          column: 15
        }
      },
      "149": {
        start: {
          line: 603,
          column: 12
        },
        end: {
          line: 609,
          column: 15
        }
      },
      "150": {
        start: {
          line: 616,
          column: 8
        },
        end: {
          line: 656,
          column: 9
        }
      },
      "151": {
        start: {
          line: 617,
          column: 27
        },
        end: {
          line: 617,
          column: 37
        }
      },
      "152": {
        start: {
          line: 618,
          column: 67
        },
        end: {
          line: 618,
          column: 75
        }
      },
      "153": {
        start: {
          line: 619,
          column: 12
        },
        end: {
          line: 628,
          column: 13
        }
      },
      "154": {
        start: {
          line: 620,
          column: 16
        },
        end: {
          line: 626,
          column: 19
        }
      },
      "155": {
        start: {
          line: 627,
          column: 16
        },
        end: {
          line: 627,
          column: 23
        }
      },
      "156": {
        start: {
          line: 629,
          column: 27
        },
        end: {
          line: 629,
          column: 121
        }
      },
      "157": {
        start: {
          line: 630,
          column: 12
        },
        end: {
          line: 639,
          column: 13
        }
      },
      "158": {
        start: {
          line: 631,
          column: 16
        },
        end: {
          line: 637,
          column: 19
        }
      },
      "159": {
        start: {
          line: 638,
          column: 16
        },
        end: {
          line: 638,
          column: 23
        }
      },
      "160": {
        start: {
          line: 640,
          column: 12
        },
        end: {
          line: 646,
          column: 15
        }
      },
      "161": {
        start: {
          line: 649,
          column: 12
        },
        end: {
          line: 655,
          column: 15
        }
      },
      "162": {
        start: {
          line: 659,
          column: 0
        },
        end: {
          line: 659,
          column: 40
        }
      },
      "163": {
        start: {
          line: 661,
          column: 0
        },
        end: {
          line: 661,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 22
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 26
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 27
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 80
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 33
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 129
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 35
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 190
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 41
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 256
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 301,
            column: 4
          },
          end: {
            line: 301,
            column: 5
          }
        },
        loc: {
          start: {
            line: 301,
            column: 34
          },
          end: {
            line: 352,
            column: 5
          }
        },
        line: 301
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 356,
            column: 5
          }
        },
        loc: {
          start: {
            line: 356,
            column: 34
          },
          end: {
            line: 407,
            column: 5
          }
        },
        line: 356
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 411,
            column: 4
          },
          end: {
            line: 411,
            column: 5
          }
        },
        loc: {
          start: {
            line: 411,
            column: 31
          },
          end: {
            line: 453,
            column: 5
          }
        },
        line: 411
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 457,
            column: 4
          },
          end: {
            line: 457,
            column: 5
          }
        },
        loc: {
          start: {
            line: 457,
            column: 34
          },
          end: {
            line: 511,
            column: 5
          }
        },
        line: 457
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 515,
            column: 4
          },
          end: {
            line: 515,
            column: 5
          }
        },
        loc: {
          start: {
            line: 515,
            column: 31
          },
          end: {
            line: 587,
            column: 5
          }
        },
        line: 515
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 591,
            column: 4
          },
          end: {
            line: 591,
            column: 5
          }
        },
        loc: {
          start: {
            line: 591,
            column: 32
          },
          end: {
            line: 611,
            column: 5
          }
        },
        line: 591
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 615,
            column: 4
          },
          end: {
            line: 615,
            column: 5
          }
        },
        loc: {
          start: {
            line: 615,
            column: 31
          },
          end: {
            line: 657,
            column: 5
          }
        },
        line: 615
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 28
          }
        }, {
          start: {
            line: 12,
            column: 32
          },
          end: {
            line: 12,
            column: 41
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 22
          }
        }, {
          start: {
            line: 21,
            column: 26
          },
          end: {
            line: 21,
            column: 35
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 37,
            column: 27
          },
          end: {
            line: 37,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 27
          },
          end: {
            line: 37,
            column: 39
          }
        }, {
          start: {
            line: 37,
            column: 43
          },
          end: {
            line: 37,
            column: 66
          }
        }],
        line: 37
      },
      "5": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "6": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "7": {
        loc: {
          start: {
            line: 100,
            column: 27
          },
          end: {
            line: 100,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 27
          },
          end: {
            line: 100,
            column: 39
          }
        }, {
          start: {
            line: 100,
            column: 43
          },
          end: {
            line: 100,
            column: 58
          }
        }],
        line: 100
      },
      "8": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 141,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 141,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "9": {
        loc: {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "10": {
        loc: {
          start: {
            line: 148,
            column: 27
          },
          end: {
            line: 148,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 27
          },
          end: {
            line: 148,
            column: 39
          }
        }, {
          start: {
            line: 148,
            column: 43
          },
          end: {
            line: 148,
            column: 65
          }
        }],
        line: 148
      },
      "11": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "12": {
        loc: {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 213,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 213,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "13": {
        loc: {
          start: {
            line: 204,
            column: 16
          },
          end: {
            line: 204,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 204,
            column: 16
          },
          end: {
            line: 204,
            column: 32
          }
        }, {
          start: {
            line: 204,
            column: 36
          },
          end: {
            line: 204,
            column: 48
          }
        }],
        line: 204
      },
      "14": {
        loc: {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "15": {
        loc: {
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 235,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 235,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "16": {
        loc: {
          start: {
            line: 230,
            column: 27
          },
          end: {
            line: 230,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 27
          },
          end: {
            line: 230,
            column: 39
          }
        }, {
          start: {
            line: 230,
            column: 43
          },
          end: {
            line: 230,
            column: 67
          }
        }],
        line: 230
      },
      "17": {
        loc: {
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "18": {
        loc: {
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "19": {
        loc: {
          start: {
            line: 275,
            column: 27
          },
          end: {
            line: 275,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 275,
            column: 27
          },
          end: {
            line: 275,
            column: 39
          }
        }, {
          start: {
            line: 275,
            column: 43
          },
          end: {
            line: 275,
            column: 74
          }
        }],
        line: 275
      },
      "20": {
        loc: {
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "21": {
        loc: {
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 304,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 304,
            column: 22
          }
        }, {
          start: {
            line: 304,
            column: 26
          },
          end: {
            line: 304,
            column: 37
          }
        }, {
          start: {
            line: 304,
            column: 41
          },
          end: {
            line: 304,
            column: 53
          }
        }],
        line: 304
      },
      "22": {
        loc: {
          start: {
            line: 314,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 314
      },
      "23": {
        loc: {
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "24": {
        loc: {
          start: {
            line: 330,
            column: 27
          },
          end: {
            line: 330,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 27
          },
          end: {
            line: 330,
            column: 39
          }
        }, {
          start: {
            line: 330,
            column: 43
          },
          end: {
            line: 330,
            column: 66
          }
        }],
        line: 330
      },
      "25": {
        loc: {
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 368,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 368,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "26": {
        loc: {
          start: {
            line: 359,
            column: 16
          },
          end: {
            line: 359,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 359,
            column: 16
          },
          end: {
            line: 359,
            column: 22
          }
        }, {
          start: {
            line: 359,
            column: 26
          },
          end: {
            line: 359,
            column: 35
          }
        }],
        line: 359
      },
      "27": {
        loc: {
          start: {
            line: 369,
            column: 12
          },
          end: {
            line: 378,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 369,
            column: 12
          },
          end: {
            line: 378,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 369
      },
      "28": {
        loc: {
          start: {
            line: 381,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "29": {
        loc: {
          start: {
            line: 385,
            column: 27
          },
          end: {
            line: 385,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 385,
            column: 27
          },
          end: {
            line: 385,
            column: 39
          }
        }, {
          start: {
            line: 385,
            column: 43
          },
          end: {
            line: 385,
            column: 66
          }
        }],
        line: 385
      },
      "30": {
        loc: {
          start: {
            line: 414,
            column: 12
          },
          end: {
            line: 423,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 414,
            column: 12
          },
          end: {
            line: 423,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 414
      },
      "31": {
        loc: {
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 435,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 435,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 426
      },
      "32": {
        loc: {
          start: {
            line: 430,
            column: 27
          },
          end: {
            line: 430,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 430,
            column: 27
          },
          end: {
            line: 430,
            column: 39
          }
        }, {
          start: {
            line: 430,
            column: 43
          },
          end: {
            line: 430,
            column: 62
          }
        }],
        line: 430
      },
      "33": {
        loc: {
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 470,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 470,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      },
      "34": {
        loc: {
          start: {
            line: 472,
            column: 12
          },
          end: {
            line: 481,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 12
          },
          end: {
            line: 481,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "35": {
        loc: {
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 472,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 472,
            column: 26
          }
        }, {
          start: {
            line: 472,
            column: 30
          },
          end: {
            line: 472,
            column: 39
          }
        }, {
          start: {
            line: 472,
            column: 43
          },
          end: {
            line: 472,
            column: 49
          }
        }],
        line: 472
      },
      "36": {
        loc: {
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 493,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 493,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "37": {
        loc: {
          start: {
            line: 488,
            column: 27
          },
          end: {
            line: 488,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 488,
            column: 27
          },
          end: {
            line: 488,
            column: 39
          }
        }, {
          start: {
            line: 488,
            column: 43
          },
          end: {
            line: 488,
            column: 58
          }
        }],
        line: 488
      },
      "38": {
        loc: {
          start: {
            line: 519,
            column: 12
          },
          end: {
            line: 528,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 519,
            column: 12
          },
          end: {
            line: 528,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 519
      },
      "39": {
        loc: {
          start: {
            line: 519,
            column: 16
          },
          end: {
            line: 519,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 519,
            column: 16
          },
          end: {
            line: 519,
            column: 22
          }
        }, {
          start: {
            line: 519,
            column: 26
          },
          end: {
            line: 519,
            column: 35
          }
        }, {
          start: {
            line: 519,
            column: 39
          },
          end: {
            line: 519,
            column: 50
          }
        }, {
          start: {
            line: 519,
            column: 54
          },
          end: {
            line: 519,
            column: 64
          }
        }, {
          start: {
            line: 519,
            column: 68
          },
          end: {
            line: 519,
            column: 73
          }
        }],
        line: 519
      },
      "40": {
        loc: {
          start: {
            line: 530,
            column: 12
          },
          end: {
            line: 539,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 530,
            column: 12
          },
          end: {
            line: 539,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 530
      },
      "41": {
        loc: {
          start: {
            line: 540,
            column: 12
          },
          end: {
            line: 549,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 540,
            column: 12
          },
          end: {
            line: 549,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 540
      },
      "42": {
        loc: {
          start: {
            line: 552,
            column: 12
          },
          end: {
            line: 561,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 552,
            column: 12
          },
          end: {
            line: 561,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 552
      },
      "43": {
        loc: {
          start: {
            line: 619,
            column: 12
          },
          end: {
            line: 628,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 619,
            column: 12
          },
          end: {
            line: 628,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 619
      },
      "44": {
        loc: {
          start: {
            line: 630,
            column: 12
          },
          end: {
            line: 639,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 630,
            column: 12
          },
          end: {
            line: 639,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 630
      },
      "45": {
        loc: {
          start: {
            line: 634,
            column: 27
          },
          end: {
            line: 634,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 634,
            column: 27
          },
          end: {
            line: 634,
            column: 39
          }
        }, {
          start: {
            line: 634,
            column: 43
          },
          end: {
            line: 634,
            column: 58
          }
        }],
        line: 634
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0, 0, 0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/auth/authController.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/auth/authController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { authService } from '../../services/auth/authService';\nimport { userModel } from '../../models/auth/User';\nimport { USER_ROLES } from '../../utils/constants/roles';\nimport { ApiResponse } from '../../utils/types/express';\n\nexport class AuthController {\n  /**\n   * Helper method to get request ID safely\n   */\n  private getRequestId(req: Request): string {\n    return req.requestId || 'unknown';\n  }\n\n  /**\n   * User login\n   */\n  async login(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { email, password } = req.body;\n\n      // Validate input\n      if (!email || !password) {\n        res.status(400).json({\n          success: false,\n          message: 'Email and password are required',\n          error: 'MISSING_CREDENTIALS',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Attempt login\n      const result = await authService.login({ email, password });\n\n      if (!result.success) {\n        res.status(401).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'AUTHENTICATION_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Set HttpOnly cookies for security\n      res.cookie('accessToken', result.data.accessToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'strict',\n        maxAge: 15 * 60 * 1000 // 15 minutes\n      });\n\n      res.cookie('refreshToken', result.data.refreshToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'strict',\n        maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days\n      });\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        data: {\n          user: result.data.user\n          // Tokens are now in HttpOnly cookies, not in response\n        },\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Login failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * User logout\n   */\n  async logout(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      // Get user ID from authenticated request\n      const userId = (req as any).user?.userId;\n      \n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'Authentication required',\n          error: 'AUTHENTICATION_REQUIRED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Perform logout\n      const result = await authService.logout(userId);\n\n      if (!result.success) {\n        res.status(500).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'LOGOUT_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Clear HttpOnly cookies\n      res.clearCookie('accessToken');\n      res.clearCookie('refreshToken');\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Logout failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshToken(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { refreshToken } = req.body;\n\n      if (!refreshToken) {\n        res.status(400).json({\n          success: false,\n          message: 'Refresh token is required',\n          error: 'MISSING_REFRESH_TOKEN',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Attempt token refresh\n      const result = await authService.refreshToken(refreshToken);\n\n      if (!result.success) {\n        res.status(401).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'TOKEN_REFRESH_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Set new HttpOnly cookies\n      res.cookie('accessToken', result.data.accessToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'strict',\n        maxAge: 15 * 60 * 1000 // 15 minutes\n      });\n\n      res.cookie('refreshToken', result.data.refreshToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'strict',\n        maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days\n      });\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        data: {\n          // Tokens are now in HttpOnly cookies, not in response\n        },\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Token refresh failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Change password\n   */\n  async changePassword(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { currentPassword, newPassword } = req.body;\n      const userId = (req as any).user?.userId;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'Authentication required',\n          error: 'AUTHENTICATION_REQUIRED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      if (!currentPassword || !newPassword) {\n        res.status(400).json({\n          success: false,\n          message: 'Current password and new password are required',\n          error: 'MISSING_PASSWORDS',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      if (newPassword.length < 8) {\n        res.status(400).json({\n          success: false,\n          message: 'New password must be at least 8 characters long',\n          error: 'PASSWORD_TOO_SHORT',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Attempt password change\n      const result = await authService.changePassword(userId, currentPassword, newPassword);\n\n      if (!result.success) {\n        res.status(400).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'PASSWORD_CHANGE_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Password change failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Request password reset\n   */\n  async requestPasswordReset(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { email } = req.body;\n\n      if (!email) {\n        res.status(400).json({\n          success: false,\n          message: 'Email is required',\n          error: 'MISSING_EMAIL',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Attempt password reset request\n      const result = await authService.requestPasswordReset(email);\n\n      if (!result.success) {\n        res.status(500).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'PASSWORD_RESET_REQUEST_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Password reset request failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Reset password with token\n   */\n  async resetPassword(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { email, resetToken, newPassword } = req.body;\n\n      if (!email || !resetToken || !newPassword) {\n        res.status(400).json({\n          success: false,\n          message: 'Email, reset token, and new password are required',\n          error: 'MISSING_RESET_DATA',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      if (newPassword.length < 8) {\n        res.status(400).json({\n          success: false,\n          message: 'New password must be at least 8 characters long',\n          error: 'PASSWORD_TOO_SHORT',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Attempt password reset\n      const result = await authService.resetPassword(email, resetToken, newPassword);\n\n      if (!result.success) {\n        res.status(400).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'PASSWORD_RESET_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Password reset failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Setup password for department head\n   */\n  async setupPassword(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { token, password } = req.body;\n\n      if (!token || !password) {\n        res.status(400).json({\n          success: false,\n          message: 'Setup token and password are required',\n          error: 'MISSING_SETUP_DATA',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      if (password.length < 8) {\n        res.status(400).json({\n          success: false,\n          message: 'Password must be at least 8 characters long',\n          error: 'PASSWORD_TOO_SHORT',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Attempt password setup\n      const result = await authService.setupPassword(token, password);\n\n      if (!result.success) {\n        res.status(400).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'PASSWORD_SETUP_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Password setup failed',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Get user profile\n   */\n  async getProfile(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const userId = (req as any).user?.userId;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'Authentication required',\n          error: 'AUTHENTICATION_REQUIRED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Get user profile\n      const result = await authService.getUserProfile(userId);\n\n      if (!result.success) {\n        res.status(404).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'PROFILE_NOT_FOUND',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        data: result.data,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get profile',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Update user profile\n   */\n  async updateProfile(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const userId = (req as any).user?.userId;\n      const { firstName, lastName, email } = req.body;\n\n      if (!userId) {\n        res.status(401).json({\n          success: false,\n          message: 'Authentication required',\n          error: 'AUTHENTICATION_REQUIRED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Validate input\n      if (!firstName || !lastName || !email) {\n        res.status(400).json({\n          success: false,\n          message: 'All fields are required',\n          error: 'MISSING_FIELDS',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Update user profile\n      const result = await authService.updateUserProfile(userId, { firstName, lastName, email });\n\n      if (!result.success) {\n        res.status(400).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'UPDATE_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        data: result.data,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to update profile',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Create new user (HR only)\n   */\n  async createUser(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { email, password, first_name, last_name, role } = req.body;\n\n      // Validate input\n      if (!email || !password || !first_name || !last_name || !role) {\n        res.status(400).json({\n          success: false,\n          message: 'All fields are required',\n          error: 'MISSING_FIELDS',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Validate role\n      if (!Object.values(USER_ROLES).includes(role)) {\n        res.status(400).json({\n          success: false,\n          message: 'Invalid role',\n          error: 'INVALID_ROLE',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      if (password.length < 8) {\n        res.status(400).json({\n          success: false,\n          message: 'Password must be at least 8 characters long',\n          error: 'PASSWORD_TOO_SHORT',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Check if user already exists\n      const userExists = await userModel.userExists(email);\n      if (userExists) {\n        res.status(409).json({\n          success: false,\n          message: 'User with this email already exists',\n          error: 'USER_ALREADY_EXISTS',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      // Create user\n      const newUser = await userModel.createUser({\n        email,\n        password,\n        first_name,\n        last_name,\n        role\n      });\n\n      res.status(201).json({\n        success: true,\n        message: 'User created successfully',\n        data: { user: newUser },\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to create user',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Get all users (HR only)\n   */\n  async getAllUsers(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const users = await userModel.listAllUsers();\n\n      res.status(200).json({\n        success: true,\n        message: 'Users retrieved successfully',\n        data: { users },\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve users',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n\n  /**\n   * Update user (HR only)\n   */\n  async updateUser(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { id } = req.params;\n      const { firstName, lastName, email, role, isActive } = req.body;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'User ID is required',\n          error: 'MISSING_USER_ID',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      const result = await authService.updateUser(id, { firstName, lastName, email, role, isActive });\n\n      if (!result.success) {\n        res.status(400).json({\n          success: false,\n          message: result.message,\n          error: result.error || 'UPDATE_FAILED',\n          timestamp: new Date().toISOString(),\n          requestId: this.getRequestId(req)\n        });\n        return;\n      }\n\n      res.status(200).json({\n        success: true,\n        message: result.message,\n        data: result.data,\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to update user',\n        error: 'INTERNAL_SERVER_ERROR',\n        timestamp: new Date().toISOString(),\n        requestId: this.getRequestId(req)\n      });\n    }\n  }\n}\n\n// Export singleton instance\nexport const authController = new AuthController(); "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e3d4827a4481c9b6d59c2b2d2bf2acbd042eb7e3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_tic3jq0qa = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_tic3jq0qa();
cov_tic3jq0qa().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_tic3jq0qa().s[1]++;
exports.authController = exports.AuthController = void 0;
const authService_1 =
/* istanbul ignore next */
(cov_tic3jq0qa().s[2]++, require("../../services/auth/authService"));
const User_1 =
/* istanbul ignore next */
(cov_tic3jq0qa().s[3]++, require("../../models/auth/User"));
const roles_1 =
/* istanbul ignore next */
(cov_tic3jq0qa().s[4]++, require("../../utils/constants/roles"));
class AuthController {
  /**
   * Helper method to get request ID safely
   */
  getRequestId(req) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[0]++;
    cov_tic3jq0qa().s[5]++;
    return /* istanbul ignore next */(cov_tic3jq0qa().b[0][0]++, req.requestId) ||
    /* istanbul ignore next */
    (cov_tic3jq0qa().b[0][1]++, 'unknown');
  }
  /**
   * User login
   */
  async login(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[1]++;
    cov_tic3jq0qa().s[6]++;
    try {
      const {
        email,
        password
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[7]++, req.body);
      // Validate input
      /* istanbul ignore next */
      cov_tic3jq0qa().s[8]++;
      if (
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[2][0]++, !email) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[2][1]++, !password)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[1][0]++;
        cov_tic3jq0qa().s[9]++;
        res.status(400).json({
          success: false,
          message: 'Email and password are required',
          error: 'MISSING_CREDENTIALS',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[10]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[1][1]++;
      }
      // Attempt login
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[11]++, await authService_1.authService.login({
        email,
        password
      }));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[12]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[3][0]++;
        cov_tic3jq0qa().s[13]++;
        res.status(401).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[4][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[4][1]++, 'AUTHENTICATION_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[14]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[3][1]++;
      }
      // Set HttpOnly cookies for security
      cov_tic3jq0qa().s[15]++;
      res.cookie('accessToken', result.data.accessToken, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict',
        maxAge: 15 * 60 * 1000 // 15 minutes
      });
      /* istanbul ignore next */
      cov_tic3jq0qa().s[16]++;
      res.cookie('refreshToken', result.data.refreshToken, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict',
        maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days
      });
      /* istanbul ignore next */
      cov_tic3jq0qa().s[17]++;
      res.status(200).json({
        success: true,
        message: result.message,
        data: {
          user: result.data.user
          // Tokens are now in HttpOnly cookies, not in response
        },
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[18]++;
      res.status(500).json({
        success: false,
        message: 'Login failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * User logout
   */
  async logout(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[2]++;
    cov_tic3jq0qa().s[19]++;
    try {
      // Get user ID from authenticated request
      const userId =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[20]++, req.user?.userId);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[21]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[5][0]++;
        cov_tic3jq0qa().s[22]++;
        res.status(401).json({
          success: false,
          message: 'Authentication required',
          error: 'AUTHENTICATION_REQUIRED',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[23]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[5][1]++;
      }
      // Perform logout
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[24]++, await authService_1.authService.logout(userId));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[25]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[6][0]++;
        cov_tic3jq0qa().s[26]++;
        res.status(500).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[7][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[7][1]++, 'LOGOUT_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[27]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[6][1]++;
      }
      // Clear HttpOnly cookies
      cov_tic3jq0qa().s[28]++;
      res.clearCookie('accessToken');
      /* istanbul ignore next */
      cov_tic3jq0qa().s[29]++;
      res.clearCookie('refreshToken');
      /* istanbul ignore next */
      cov_tic3jq0qa().s[30]++;
      res.status(200).json({
        success: true,
        message: result.message,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[31]++;
      res.status(500).json({
        success: false,
        message: 'Logout failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Refresh access token
   */
  async refreshToken(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[3]++;
    cov_tic3jq0qa().s[32]++;
    try {
      const {
        refreshToken
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[33]++, req.body);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[34]++;
      if (!refreshToken) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[8][0]++;
        cov_tic3jq0qa().s[35]++;
        res.status(400).json({
          success: false,
          message: 'Refresh token is required',
          error: 'MISSING_REFRESH_TOKEN',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[36]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[8][1]++;
      }
      // Attempt token refresh
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[37]++, await authService_1.authService.refreshToken(refreshToken));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[38]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[9][0]++;
        cov_tic3jq0qa().s[39]++;
        res.status(401).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[10][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[10][1]++, 'TOKEN_REFRESH_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[40]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[9][1]++;
      }
      // Set new HttpOnly cookies
      cov_tic3jq0qa().s[41]++;
      res.cookie('accessToken', result.data.accessToken, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict',
        maxAge: 15 * 60 * 1000 // 15 minutes
      });
      /* istanbul ignore next */
      cov_tic3jq0qa().s[42]++;
      res.cookie('refreshToken', result.data.refreshToken, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict',
        maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days
      });
      /* istanbul ignore next */
      cov_tic3jq0qa().s[43]++;
      res.status(200).json({
        success: true,
        message: result.message,
        data: {
          // Tokens are now in HttpOnly cookies, not in response
        },
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[44]++;
      res.status(500).json({
        success: false,
        message: 'Token refresh failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Change password
   */
  async changePassword(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[4]++;
    cov_tic3jq0qa().s[45]++;
    try {
      const {
        currentPassword,
        newPassword
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[46]++, req.body);
      const userId =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[47]++, req.user?.userId);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[48]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[11][0]++;
        cov_tic3jq0qa().s[49]++;
        res.status(401).json({
          success: false,
          message: 'Authentication required',
          error: 'AUTHENTICATION_REQUIRED',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[50]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[11][1]++;
      }
      cov_tic3jq0qa().s[51]++;
      if (
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[13][0]++, !currentPassword) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[13][1]++, !newPassword)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[12][0]++;
        cov_tic3jq0qa().s[52]++;
        res.status(400).json({
          success: false,
          message: 'Current password and new password are required',
          error: 'MISSING_PASSWORDS',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[53]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[12][1]++;
      }
      cov_tic3jq0qa().s[54]++;
      if (newPassword.length < 8) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[14][0]++;
        cov_tic3jq0qa().s[55]++;
        res.status(400).json({
          success: false,
          message: 'New password must be at least 8 characters long',
          error: 'PASSWORD_TOO_SHORT',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[56]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[14][1]++;
      }
      // Attempt password change
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[57]++, await authService_1.authService.changePassword(userId, currentPassword, newPassword));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[58]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[15][0]++;
        cov_tic3jq0qa().s[59]++;
        res.status(400).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[16][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[16][1]++, 'PASSWORD_CHANGE_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[60]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[15][1]++;
      }
      cov_tic3jq0qa().s[61]++;
      res.status(200).json({
        success: true,
        message: result.message,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[62]++;
      res.status(500).json({
        success: false,
        message: 'Password change failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Request password reset
   */
  async requestPasswordReset(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[5]++;
    cov_tic3jq0qa().s[63]++;
    try {
      const {
        email
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[64]++, req.body);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[65]++;
      if (!email) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[17][0]++;
        cov_tic3jq0qa().s[66]++;
        res.status(400).json({
          success: false,
          message: 'Email is required',
          error: 'MISSING_EMAIL',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[67]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[17][1]++;
      }
      // Attempt password reset request
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[68]++, await authService_1.authService.requestPasswordReset(email));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[69]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[18][0]++;
        cov_tic3jq0qa().s[70]++;
        res.status(500).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[19][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[19][1]++, 'PASSWORD_RESET_REQUEST_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[71]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[18][1]++;
      }
      cov_tic3jq0qa().s[72]++;
      res.status(200).json({
        success: true,
        message: result.message,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[73]++;
      res.status(500).json({
        success: false,
        message: 'Password reset request failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Reset password with token
   */
  async resetPassword(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[6]++;
    cov_tic3jq0qa().s[74]++;
    try {
      const {
        email,
        resetToken,
        newPassword
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[75]++, req.body);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[76]++;
      if (
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[21][0]++, !email) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[21][1]++, !resetToken) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[21][2]++, !newPassword)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[20][0]++;
        cov_tic3jq0qa().s[77]++;
        res.status(400).json({
          success: false,
          message: 'Email, reset token, and new password are required',
          error: 'MISSING_RESET_DATA',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[78]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[20][1]++;
      }
      cov_tic3jq0qa().s[79]++;
      if (newPassword.length < 8) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[22][0]++;
        cov_tic3jq0qa().s[80]++;
        res.status(400).json({
          success: false,
          message: 'New password must be at least 8 characters long',
          error: 'PASSWORD_TOO_SHORT',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[81]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[22][1]++;
      }
      // Attempt password reset
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[82]++, await authService_1.authService.resetPassword(email, resetToken, newPassword));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[83]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[23][0]++;
        cov_tic3jq0qa().s[84]++;
        res.status(400).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[24][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[24][1]++, 'PASSWORD_RESET_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[85]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[23][1]++;
      }
      cov_tic3jq0qa().s[86]++;
      res.status(200).json({
        success: true,
        message: result.message,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[87]++;
      res.status(500).json({
        success: false,
        message: 'Password reset failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Setup password for department head
   */
  async setupPassword(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[7]++;
    cov_tic3jq0qa().s[88]++;
    try {
      const {
        token,
        password
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[89]++, req.body);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[90]++;
      if (
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[26][0]++, !token) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[26][1]++, !password)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[25][0]++;
        cov_tic3jq0qa().s[91]++;
        res.status(400).json({
          success: false,
          message: 'Setup token and password are required',
          error: 'MISSING_SETUP_DATA',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[92]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[25][1]++;
      }
      cov_tic3jq0qa().s[93]++;
      if (password.length < 8) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[27][0]++;
        cov_tic3jq0qa().s[94]++;
        res.status(400).json({
          success: false,
          message: 'Password must be at least 8 characters long',
          error: 'PASSWORD_TOO_SHORT',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[95]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[27][1]++;
      }
      // Attempt password setup
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[96]++, await authService_1.authService.setupPassword(token, password));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[97]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[28][0]++;
        cov_tic3jq0qa().s[98]++;
        res.status(400).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[29][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[29][1]++, 'PASSWORD_SETUP_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[99]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[28][1]++;
      }
      cov_tic3jq0qa().s[100]++;
      res.status(200).json({
        success: true,
        message: result.message,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[101]++;
      res.status(500).json({
        success: false,
        message: 'Password setup failed',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Get user profile
   */
  async getProfile(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[8]++;
    cov_tic3jq0qa().s[102]++;
    try {
      const userId =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[103]++, req.user?.userId);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[104]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[30][0]++;
        cov_tic3jq0qa().s[105]++;
        res.status(401).json({
          success: false,
          message: 'Authentication required',
          error: 'AUTHENTICATION_REQUIRED',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[106]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[30][1]++;
      }
      // Get user profile
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[107]++, await authService_1.authService.getUserProfile(userId));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[108]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[31][0]++;
        cov_tic3jq0qa().s[109]++;
        res.status(404).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[32][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[32][1]++, 'PROFILE_NOT_FOUND'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[110]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[31][1]++;
      }
      cov_tic3jq0qa().s[111]++;
      res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[112]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get profile',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Update user profile
   */
  async updateProfile(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[9]++;
    cov_tic3jq0qa().s[113]++;
    try {
      const userId =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[114]++, req.user?.userId);
      const {
        firstName,
        lastName,
        email
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[115]++, req.body);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[116]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[33][0]++;
        cov_tic3jq0qa().s[117]++;
        res.status(401).json({
          success: false,
          message: 'Authentication required',
          error: 'AUTHENTICATION_REQUIRED',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[118]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[33][1]++;
      }
      // Validate input
      cov_tic3jq0qa().s[119]++;
      if (
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[35][0]++, !firstName) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[35][1]++, !lastName) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[35][2]++, !email)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[34][0]++;
        cov_tic3jq0qa().s[120]++;
        res.status(400).json({
          success: false,
          message: 'All fields are required',
          error: 'MISSING_FIELDS',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[121]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[34][1]++;
      }
      // Update user profile
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[122]++, await authService_1.authService.updateUserProfile(userId, {
        firstName,
        lastName,
        email
      }));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[123]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[36][0]++;
        cov_tic3jq0qa().s[124]++;
        res.status(400).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[37][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[37][1]++, 'UPDATE_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[125]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[36][1]++;
      }
      cov_tic3jq0qa().s[126]++;
      res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[127]++;
      res.status(500).json({
        success: false,
        message: 'Failed to update profile',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Create new user (HR only)
   */
  async createUser(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[10]++;
    cov_tic3jq0qa().s[128]++;
    try {
      const {
        email,
        password,
        first_name,
        last_name,
        role
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[129]++, req.body);
      // Validate input
      /* istanbul ignore next */
      cov_tic3jq0qa().s[130]++;
      if (
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[39][0]++, !email) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[39][1]++, !password) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[39][2]++, !first_name) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[39][3]++, !last_name) ||
      /* istanbul ignore next */
      (cov_tic3jq0qa().b[39][4]++, !role)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[38][0]++;
        cov_tic3jq0qa().s[131]++;
        res.status(400).json({
          success: false,
          message: 'All fields are required',
          error: 'MISSING_FIELDS',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[132]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[38][1]++;
      }
      // Validate role
      cov_tic3jq0qa().s[133]++;
      if (!Object.values(roles_1.USER_ROLES).includes(role)) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[40][0]++;
        cov_tic3jq0qa().s[134]++;
        res.status(400).json({
          success: false,
          message: 'Invalid role',
          error: 'INVALID_ROLE',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[135]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[40][1]++;
      }
      cov_tic3jq0qa().s[136]++;
      if (password.length < 8) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[41][0]++;
        cov_tic3jq0qa().s[137]++;
        res.status(400).json({
          success: false,
          message: 'Password must be at least 8 characters long',
          error: 'PASSWORD_TOO_SHORT',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[138]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[41][1]++;
      }
      // Check if user already exists
      const userExists =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[139]++, await User_1.userModel.userExists(email));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[140]++;
      if (userExists) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[42][0]++;
        cov_tic3jq0qa().s[141]++;
        res.status(409).json({
          success: false,
          message: 'User with this email already exists',
          error: 'USER_ALREADY_EXISTS',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[142]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[42][1]++;
      }
      // Create user
      const newUser =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[143]++, await User_1.userModel.createUser({
        email,
        password,
        first_name,
        last_name,
        role
      }));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[144]++;
      res.status(201).json({
        success: true,
        message: 'User created successfully',
        data: {
          user: newUser
        },
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[145]++;
      res.status(500).json({
        success: false,
        message: 'Failed to create user',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Get all users (HR only)
   */
  async getAllUsers(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[11]++;
    cov_tic3jq0qa().s[146]++;
    try {
      const users =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[147]++, await User_1.userModel.listAllUsers());
      /* istanbul ignore next */
      cov_tic3jq0qa().s[148]++;
      res.status(200).json({
        success: true,
        message: 'Users retrieved successfully',
        data: {
          users
        },
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[149]++;
      res.status(500).json({
        success: false,
        message: 'Failed to retrieve users',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
  /**
   * Update user (HR only)
   */
  async updateUser(req, res) {
    /* istanbul ignore next */
    cov_tic3jq0qa().f[12]++;
    cov_tic3jq0qa().s[150]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[151]++, req.params);
      const {
        firstName,
        lastName,
        email,
        role,
        isActive
      } =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[152]++, req.body);
      /* istanbul ignore next */
      cov_tic3jq0qa().s[153]++;
      if (!id) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[43][0]++;
        cov_tic3jq0qa().s[154]++;
        res.status(400).json({
          success: false,
          message: 'User ID is required',
          error: 'MISSING_USER_ID',
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[155]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[43][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_tic3jq0qa().s[156]++, await authService_1.authService.updateUser(id, {
        firstName,
        lastName,
        email,
        role,
        isActive
      }));
      /* istanbul ignore next */
      cov_tic3jq0qa().s[157]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_tic3jq0qa().b[44][0]++;
        cov_tic3jq0qa().s[158]++;
        res.status(400).json({
          success: false,
          message: result.message,
          error:
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[45][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_tic3jq0qa().b[45][1]++, 'UPDATE_FAILED'),
          timestamp: new Date().toISOString(),
          requestId: this.getRequestId(req)
        });
        /* istanbul ignore next */
        cov_tic3jq0qa().s[159]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_tic3jq0qa().b[44][1]++;
      }
      cov_tic3jq0qa().s[160]++;
      res.status(200).json({
        success: true,
        message: result.message,
        data: result.data,
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tic3jq0qa().s[161]++;
      res.status(500).json({
        success: false,
        message: 'Failed to update user',
        error: 'INTERNAL_SERVER_ERROR',
        timestamp: new Date().toISOString(),
        requestId: this.getRequestId(req)
      });
    }
  }
}
/* istanbul ignore next */
cov_tic3jq0qa().s[162]++;
exports.AuthController = AuthController;
// Export singleton instance
/* istanbul ignore next */
cov_tic3jq0qa().s[163]++;
exports.authController = new AuthController();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,