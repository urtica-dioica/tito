{"version":3,"names":["cov_7esvhu1wu","actualCoverage","database_1","s","require","logger_1","__importDefault","EmployeeService","calculateWorkingDays","startDate","endDate","f","workingDays","currentDate","Date","dayOfWeek","getDay","b","setDate","getDate","getEmployeeIdByUserId","userId","default","info","query","result","getPool","rows","length","id","getDashboard","employeeId","employeeInfo","getEmployeeInfo","todayStatus","getTodayAttendanceStatus","monthlyStats","getMonthlyAttendanceStats","leaveBalance","getLeaveBalance","recentActivity","getRecentActivity","pendingRequests","getPendingRequestsCount","upcomingEvents","getUpcomingEvents","employee","attendance","error","Error","row","name","department","position","hireDate","today","toISOString","split","recordQuery","recordResult","clockInTime","undefined","clockOutTime","totalHours","morningClockIn","morningClockOut","afternoonClockIn","afternoonClockOut","breakStart","breakEnd","record","sessionsQuery","sessionsResult","firstClockIn","lastClockOut","forEach","session","parseFloat","calculatedHours","sessionType","clockIn","clockOut","overallStatus","now","startOfMonth","getFullYear","getMonth","endOfMonth","monthlyPresent","parseInt","present","monthlyAbsent","absent","monthlyLate","late","balance","vacation","sick","maternity","other","leave_type","warn","attendanceQuery","attendanceResult","activities","map","type","description","toLocaleTimeString","timestamp","createdAt","status","total","_employeeId","title","date","getEmployeeProfile","firstName","lastName","email","phone","address","employmentType","baseSalary","updateEmployeeProfile","data","client","connect","userUpdateFields","userUpdateValues","paramIndex","push","userUpdateQuery","join","release","getAttendanceHistory","month","params","getAttendanceSummary","totalDays","total_days","presentDays","present_days","absentDays","absent_days","lateDays","late_days","total_hours","averageHours","average_hours","overtimeHours","overtime_hours","downloadPaystubPDF","paystubId","paystub","getEmployeePaystubs","limit","count","paystubIds","p","targetPaystub","find","availableIds","PDFDocument","doc","buffers","on","bind","Promise","resolve","reject","pdfBuffer","Buffer","concat","bufferSize","message","stack","fontSize","font","text","periodName","employeeName","Number","toFixed","align","paidLeaveHours","leavePay","periodStartDate","periodEndDate","expectedWorkingDays","expectedHours","grossPay","netPay","currentY","benefits","benefit","amount","totalBenefits","deductions","deduction","totalDeductions","toLocaleDateString","end","downloadPaystubExcel","XLSX","workbook","utils","book_new","employeeData","worksheet","aoa_to_sheet","book_append_sheet","excelBuffer","write","bookType","getEmployeeRequests","offset","leaveQuery","timeCorrectionQuery","overtimeQuery","params_array","leaveResult","timeCorrectionResult","overtimeResult","all","allRequests","sort","a","submittedAt","getTime","startIndex","endIndex","slice","console","log","r","getRequestStats","pending","approved","rejected","year","page","whereClause","queryParams","paystubs","deductionsQuery","deductionsResult","benefitsQuery","benefitsResult","payroll_period_id","period_name","period_start_date","period_end_date","employee_id","employee_name","department_name","base_salary","totalRegularHours","total_regular_hours","totalOvertimeHours","total_overtime_hours","paid_leave_hours","gross_pay","total_deductions","total_benefits","net_pay","lateDeductions","late_deductions","d","getLatestPaystub","employeeQuery","employeeResult","created_at","exports","employeeService"],"sources":["/home/kim/tito/server/src/services/employee/employeeService.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface EmployeeDashboard {\n  employee: {\n    id: string;\n    name: string;\n    employeeId: string;\n    department: string;\n    position: string;\n    hireDate: string;\n    profilePicture?: string;\n  };\n  attendance: {\n    todayStatus: 'present' | 'absent' | 'late' | 'half_day';\n    clockInTime?: string;\n    clockOutTime?: string;\n    totalHours?: number;\n    morningClockIn?: string;\n    morningClockOut?: string;\n    afternoonClockIn?: string;\n    afternoonClockOut?: string;\n    breakStart?: string;\n    breakEnd?: string;\n    monthlyPresent: number;\n    monthlyAbsent: number;\n    monthlyLate: number;\n  };\n  leaveBalance: {\n    vacation: number;\n    sick: number;\n    maternity: number;\n    other: number;\n  };\n  recentActivity: Array<{\n    id: string;\n    type: 'clock_in' | 'clock_out' | 'request_submitted' | 'request_approved' | 'request_rejected';\n    description: string;\n    timestamp: string;\n    status?: 'success' | 'warning' | 'error';\n  }>;\n  pendingRequests: number;\n  upcomingEvents: Array<{\n    id: string;\n    title: string;\n    date: string;\n    type: 'holiday' | 'meeting' | 'deadline';\n  }>;\n}\n\nexport interface EmployeeProfile {\n  id: string;\n  employeeId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  address?: string;\n  department: string;\n  position: string;\n  employmentType: string;\n  hireDate: string;\n  baseSalary: number;\n  status: string;\n  profilePicture?: string;\n}\n\nexport interface AttendanceRecord {\n  id: string;\n  date: string;\n  clockIn: string | null;\n  clockOut: string | null;\n  totalHours: number | null;\n  status: 'present' | 'absent' | 'late' | 'half_day' | 'holiday';\n  overtimeHours?: number;\n  notes?: string;\n}\n\nexport interface AttendanceSummary {\n  totalDays: number;\n  presentDays: number;\n  absentDays: number;\n  lateDays: number;\n  totalHours: number;\n  averageHours: number;\n  overtimeHours: number;\n}\n\nexport interface EmployeeRequest {\n  id: string;\n  type: 'time_correction' | 'overtime' | 'leave';\n  status: 'pending' | 'approved' | 'rejected';\n  submittedAt: string;\n  approverName?: string;\n  approvedAt?: string;\n  rejectionReason?: string;\n  details: any;\n}\n\nexport interface RequestStats {\n  total: number;\n  pending: number;\n  approved: number;\n  rejected: number;\n}\n\nexport interface PaystubData {\n  id: string;\n  periodName: string;\n  periodStartDate: string;\n  periodEndDate: string;\n  employeeId: string;\n  employeeName: string;\n  position: string;\n  department: string;\n  baseSalary: number;\n  totalRegularHours: number;\n  totalOvertimeHours: number;\n  paidLeaveHours: number;\n  grossPay: number;\n  totalDeductions: number;\n  totalBenefits: number;\n  netPay: number;\n  lateDeductions: number;\n  deductions: Array<{\n    name: string;\n    amount: number;\n  }>;\n  benefits: Array<{\n    name: string;\n    amount: number;\n  }>;\n  createdAt: string;\n}\n\nexport class EmployeeService {\n  /**\n   * Calculate working days between two dates (excluding weekends)\n   */\n  private calculateWorkingDays(startDate: Date, endDate: Date): number {\n    let workingDays = 0;\n    const currentDate = new Date(startDate);\n    \n    while (currentDate <= endDate) {\n      const dayOfWeek = currentDate.getDay();\n      // Count Monday (1) through Friday (5) as working days\n      if (dayOfWeek >= 1 && dayOfWeek <= 5) {\n        workingDays++;\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    \n    return workingDays;\n  }\n\n  /**\n   * Get employee ID by user ID\n   */\n  async getEmployeeIdByUserId(userId: string): Promise<string | null> {\n    logger.info('getEmployeeIdByUserId called with userId:', { userId });\n    const query = `\n      SELECT id\n      FROM employees\n      WHERE user_id = $1\n    `;\n    \n    const result = await getPool().query(query, [userId]);\n    logger.info('getEmployeeIdByUserId query result:', { result: result.rows });\n    return result.rows.length > 0 ? result.rows[0].id : null;\n  }\n\n  /**\n   * Get employee dashboard data\n   */\n  async getDashboard(employeeId: string): Promise<EmployeeDashboard> {\n    try {\n      // Get employee basic info\n      const employeeInfo = await this.getEmployeeInfo(employeeId);\n      \n      // Get today's attendance status\n      const todayStatus = await this.getTodayAttendanceStatus(employeeId);\n      \n      // Get monthly attendance stats\n      const monthlyStats = await this.getMonthlyAttendanceStats(employeeId);\n      \n      // Get leave balance\n      const leaveBalance = await this.getLeaveBalance(employeeId);\n      \n      // Get recent activity\n      const recentActivity = await this.getRecentActivity(employeeId);\n      \n      // Get pending requests count\n      const pendingRequests = await this.getPendingRequestsCount(employeeId);\n      \n      // Get upcoming events (placeholder for now)\n      const upcomingEvents = await this.getUpcomingEvents(employeeId);\n\n      return {\n        employee: employeeInfo,\n        attendance: {\n          ...todayStatus,\n          ...monthlyStats\n        },\n        leaveBalance,\n        recentActivity,\n        pendingRequests,\n        upcomingEvents\n      };\n    } catch (error) {\n      logger.error('Error getting employee dashboard:', { error, employeeId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get employee basic information\n   */\n  private async getEmployeeInfo(employeeId: string): Promise<EmployeeDashboard['employee']> {\n    const query = `\n      SELECT \n        e.id,\n        e.employee_id as \"employeeId\",\n        CONCAT(u.first_name, ' ', u.last_name) as name,\n        d.name as department,\n        e.position,\n        e.hire_date as \"hireDate\"\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.id = $1\n    `;\n\n    const result = await getPool().query(query, [employeeId]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('Employee not found');\n    }\n\n    const row = result.rows[0];\n    return {\n      id: row.id,\n      name: row.name,\n      employeeId: row.employeeId,\n      department: row.department || 'Unassigned',\n      position: row.position,\n      hireDate: row.hireDate\n    };\n  }\n\n  /**\n   * Get today's attendance status with session details\n   */\n  private async getTodayAttendanceStatus(employeeId: string): Promise<{\n    todayStatus: 'present' | 'absent' | 'late' | 'half_day';\n    clockInTime?: string;\n    clockOutTime?: string;\n    totalHours?: number;\n    morningClockIn?: string;\n    morningClockOut?: string;\n    afternoonClockIn?: string;\n    afternoonClockOut?: string;\n    breakStart?: string;\n    breakEnd?: string;\n  }> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    // Get overall attendance record\n    const recordQuery = `\n      SELECT \n        ar.overall_status as \"overallStatus\",\n        ar.date\n      FROM attendance_records ar\n      WHERE ar.employee_id = $1 AND ar.date = $2\n    `;\n\n    const recordResult = await getPool().query(recordQuery, [employeeId, today]);\n    \n    if (recordResult.rows.length === 0) {\n      return {\n        todayStatus: 'absent',\n        clockInTime: undefined,\n        clockOutTime: undefined,\n        totalHours: 0,\n        morningClockIn: undefined,\n        morningClockOut: undefined,\n        afternoonClockIn: undefined,\n        afternoonClockOut: undefined,\n        breakStart: undefined,\n        breakEnd: undefined\n      };\n    }\n\n    const record = recordResult.rows[0];\n\n    // Get all sessions for today\n    const sessionsQuery = `\n      SELECT \n        s.session_type as \"sessionType\",\n        s.clock_in as \"clockIn\",\n        s.clock_out as \"clockOut\",\n        s.calculated_hours as \"calculatedHours\",\n        s.created_at as \"createdAt\"\n      FROM attendance_sessions s\n      JOIN attendance_records ar ON s.attendance_record_id = ar.id\n      WHERE ar.employee_id = $1 AND ar.date = $2\n      ORDER BY s.created_at ASC\n    `;\n\n    const sessionsResult = await getPool().query(sessionsQuery, [employeeId, today]);\n    \n    let morningClockIn: string | undefined, morningClockOut: string | undefined, afternoonClockIn: string | undefined, afternoonClockOut: string | undefined, breakStart: string | undefined, breakEnd: string | undefined;\n    let totalHours = 0;\n    let firstClockIn: string | undefined, lastClockOut: string | undefined;\n\n    sessionsResult.rows.forEach(session => {\n      totalHours += parseFloat(session.calculatedHours) || 0;\n      \n      if (session.sessionType === 'morning_in') {\n        morningClockIn = session.clockIn;\n      } else if (session.sessionType === 'morning_out') {\n        morningClockOut = session.clockOut;\n      } else if (session.sessionType === 'afternoon_in') {\n        afternoonClockIn = session.clockIn;\n      } else if (session.sessionType === 'afternoon_out') {\n        afternoonClockOut = session.clockOut;\n      }\n\n      // Track first clock in and last clock out for overall times\n      if (session.clockIn && (!firstClockIn || new Date(session.clockIn) < new Date(firstClockIn))) {\n        firstClockIn = session.clockIn;\n      }\n      if (session.clockOut && (!lastClockOut || new Date(session.clockOut) > new Date(lastClockOut))) {\n        lastClockOut = session.clockOut;\n      }\n    });\n\n    return {\n      todayStatus: record.overallStatus || 'absent',\n      clockInTime: firstClockIn,\n      clockOutTime: lastClockOut,\n      totalHours: totalHours,\n      morningClockIn,\n      morningClockOut,\n      afternoonClockIn,\n      afternoonClockOut,\n      breakStart,\n      breakEnd\n    };\n  }\n\n  /**\n   * Get monthly attendance statistics\n   */\n  private async getMonthlyAttendanceStats(employeeId: string): Promise<{\n    monthlyPresent: number;\n    monthlyAbsent: number;\n    monthlyLate: number;\n  }> {\n    const now = new Date();\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n\n    const query = `\n      SELECT \n        COUNT(*) FILTER (WHERE overall_status = 'present') as present,\n        COUNT(*) FILTER (WHERE overall_status = 'absent') as absent,\n        COUNT(*) FILTER (WHERE overall_status = 'late') as late\n      FROM attendance_records\n      WHERE employee_id = $1 \n        AND date >= $2 \n        AND date <= $3\n    `;\n\n    const result = await getPool().query(query, [employeeId, startOfMonth, endOfMonth]);\n    const row = result.rows[0];\n\n    return {\n      monthlyPresent: parseInt(row.present) || 0,\n      monthlyAbsent: parseInt(row.absent) || 0,\n      monthlyLate: parseInt(row.late) || 0\n    };\n  }\n\n  /**\n   * Get leave balance\n   */\n  private async getLeaveBalance(employeeId: string): Promise<{\n    vacation: number;\n    sick: number;\n    maternity: number;\n    other: number;\n  }> {\n    try {\n      // Get leave balances from the actual database schema\n      const query = `\n        SELECT \n          leave_type,\n          balance\n        FROM leave_balances\n        WHERE employee_id = $1\n      `;\n      \n      const result = await getPool().query(query, [employeeId]);\n      \n      const balance = {\n        vacation: 0,\n        sick: 0,\n        maternity: 0,\n        other: 0\n      };\n      \n      result.rows.forEach(row => {\n        switch (row.leave_type) {\n          case 'vacation':\n            balance.vacation = parseFloat(row.balance);\n            break;\n          case 'sick':\n            balance.sick = parseFloat(row.balance);\n            break;\n          case 'other':\n            balance.other = parseFloat(row.balance);\n            break;\n          case 'maternity':\n            balance.maternity = parseFloat(row.balance);\n            break;\n        }\n      });\n      \n      return balance;\n    } catch (error) {\n      logger.warn('Error getting leave balance, returning defaults:', { error, employeeId });\n      return {\n        vacation: 0,\n        sick: 0,\n        maternity: 0,\n        other: 0\n      };\n    }\n  }\n\n  /**\n   * Get recent activity\n   */\n  private async getRecentActivity(employeeId: string): Promise<Array<{\n    id: string;\n    type: 'clock_in' | 'clock_out' | 'request_submitted' | 'request_approved' | 'request_rejected';\n    description: string;\n    timestamp: string;\n    status?: 'success' | 'warning' | 'error';\n  }>> {\n    // Get recent attendance sessions\n    const attendanceQuery = `\n      SELECT \n        s.id,\n        s.session_type as \"sessionType\",\n        s.clock_in as \"clockIn\",\n        s.clock_out as \"clockOut\",\n        s.created_at as \"createdAt\"\n      FROM attendance_sessions s\n      JOIN attendance_records ar ON s.attendance_record_id = ar.id\n      WHERE ar.employee_id = $1\n      ORDER BY s.created_at DESC\n      LIMIT 5\n    `;\n\n    const attendanceResult = await getPool().query(attendanceQuery, [employeeId]);\n    \n    const activities = attendanceResult.rows.map(row => ({\n      id: row.id,\n      type: row.sessionType === 'clock_in' ? 'clock_in' : 'clock_out' as 'clock_in' | 'clock_out',\n      description: row.sessionType === 'clock_in' \n        ? `Clocked in at ${new Date(row.clockIn).toLocaleTimeString()}`\n        : `Clocked out at ${new Date(row.clockOut).toLocaleTimeString()}`,\n      timestamp: row.createdAt,\n      status: 'success' as const\n    }));\n\n    return activities;\n  }\n\n  /**\n   * Get pending requests count\n   */\n  private async getPendingRequestsCount(employeeId: string): Promise<number> {\n    const query = `\n      SELECT \n        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1 AND status = 'pending') +\n        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1 AND status = 'pending') +\n        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1 AND status = 'pending') as total\n    `;\n\n    const result = await getPool().query(query, [employeeId]);\n    return parseInt(result.rows[0].total) || 0;\n  }\n\n  /**\n   * Get upcoming events (placeholder)\n   */\n  private async getUpcomingEvents(_employeeId: string): Promise<Array<{\n    id: string;\n    title: string;\n    date: string;\n    type: 'holiday' | 'meeting' | 'deadline';\n  }>> {\n    // Placeholder implementation - can be extended with actual events\n    return [\n      {\n        id: '1',\n        title: 'Team Meeting',\n        date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Tomorrow\n        type: 'meeting'\n      }\n    ];\n  }\n\n  /**\n   * Get employee profile\n   */\n  async getEmployeeProfile(employeeId: string): Promise<EmployeeProfile> {\n    const query = `\n      SELECT \n        e.id,\n        e.employee_id as \"employeeId\",\n        u.first_name as \"firstName\",\n        u.last_name as \"lastName\",\n        u.email,\n        u.phone,\n        u.address,\n        d.name as department,\n        e.position,\n        e.employment_type as \"employmentType\",\n        e.hire_date as \"hireDate\",\n        e.base_salary as \"baseSalary\",\n        e.status\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.id = $1\n    `;\n\n    const result = await getPool().query(query, [employeeId]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('Employee not found');\n    }\n\n    const row = result.rows[0];\n    return {\n      id: row.id,\n      employeeId: row.employeeId,\n      firstName: row.firstName,\n      lastName: row.lastName,\n      email: row.email,\n      phone: row.phone,\n      address: row.address,\n      department: row.department || 'Unassigned',\n      position: row.position,\n      employmentType: row.employmentType,\n      hireDate: row.hireDate,\n      baseSalary: parseFloat(row.baseSalary),\n      status: row.status\n    };\n  }\n\n  /**\n   * Update employee profile\n   */\n  async updateEmployeeProfile(employeeId: string, data: {\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n    phone?: string;\n    address?: string;\n  }): Promise<EmployeeProfile> {\n    const client = await getPool().connect();\n    \n    try {\n      await client.query('BEGIN');\n\n      // Update user table\n      const userUpdateFields = [];\n      const userUpdateValues = [];\n      let paramIndex = 1;\n\n      if (data.firstName) {\n        userUpdateFields.push(`first_name = $${paramIndex++}`);\n        userUpdateValues.push(data.firstName);\n      }\n      if (data.lastName) {\n        userUpdateFields.push(`last_name = $${paramIndex++}`);\n        userUpdateValues.push(data.lastName);\n      }\n      if (data.email) {\n        userUpdateFields.push(`email = $${paramIndex++}`);\n        userUpdateValues.push(data.email);\n      }\n      if (data.phone) {\n        userUpdateFields.push(`phone = $${paramIndex++}`);\n        userUpdateValues.push(data.phone);\n      }\n      if (data.address) {\n        userUpdateFields.push(`address = $${paramIndex++}`);\n        userUpdateValues.push(data.address);\n      }\n\n      if (userUpdateFields.length > 0) {\n        userUpdateFields.push(`updated_at = CURRENT_TIMESTAMP`);\n        userUpdateValues.push(employeeId);\n\n        const userUpdateQuery = `\n          UPDATE users \n          SET ${userUpdateFields.join(', ')}\n          FROM employees e\n          WHERE e.user_id = users.id AND e.id = $${paramIndex}\n        `;\n\n        await client.query(userUpdateQuery, userUpdateValues);\n      }\n\n      await client.query('COMMIT');\n\n      // Return updated profile\n      return await this.getEmployeeProfile(employeeId);\n    } catch (error) {\n      await client.query('ROLLBACK');\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get attendance history for an employee\n   */\n  async getAttendanceHistory(employeeId: string, month?: string): Promise<AttendanceRecord[]> {\n    const query = `\n      SELECT \n        ar.id,\n        ar.date,\n        s.clock_in as \"clockIn\",\n        s.clock_out as \"clockOut\",\n        s.calculated_hours as \"totalHours\",\n        ar.overall_status as status,\n        0 as \"overtimeHours\",\n        '' as notes\n      FROM attendance_records ar\n      LEFT JOIN attendance_sessions s ON ar.id = s.attendance_record_id\n      WHERE ar.employee_id = $1\n      ${month ? 'AND DATE_TRUNC(\\'month\\', ar.date) = DATE_TRUNC(\\'month\\', $2::timestamp)' : ''}\n      ORDER BY ar.date DESC\n    `;\n    \n    // Convert month string (e.g., \"2025-09\") to a proper date (e.g., \"2025-09-01\")\n    const params = month ? [employeeId, `${month}-01`] : [employeeId];\n    const result = await getPool().query(query, params);\n    return result.rows;\n  }\n\n  /**\n   * Get attendance summary for an employee\n   */\n  async getAttendanceSummary(employeeId: string, month?: string): Promise<AttendanceSummary> {\n    const query = `\n      SELECT \n        COUNT(*) as total_days,\n        COUNT(CASE WHEN ar.overall_status = 'present' THEN 1 END) as present_days,\n        COUNT(CASE WHEN ar.overall_status = 'absent' THEN 1 END) as absent_days,\n        COUNT(CASE WHEN ar.overall_status = 'late' THEN 1 END) as late_days,\n        COALESCE(SUM(s.calculated_hours), 0) as total_hours,\n        COALESCE(AVG(s.calculated_hours), 0) as average_hours,\n        0 as overtime_hours\n      FROM attendance_records ar\n      LEFT JOIN attendance_sessions s ON ar.id = s.attendance_record_id\n      WHERE ar.employee_id = $1\n      ${month ? 'AND DATE_TRUNC(\\'month\\', ar.date) = DATE_TRUNC(\\'month\\', $2::timestamp)' : ''}\n    `;\n    \n    // Convert month string (e.g., \"2025-09\") to a proper date (e.g., \"2025-09-01\")\n    const params = month ? [employeeId, `${month}-01`] : [employeeId];\n    const result = await getPool().query(query, params);\n    const row = result.rows[0];\n    \n    return {\n      totalDays: parseInt(row.total_days),\n      presentDays: parseInt(row.present_days),\n      absentDays: parseInt(row.absent_days),\n      lateDays: parseInt(row.late_days),\n      totalHours: parseFloat(row.total_hours),\n      averageHours: parseFloat(row.average_hours),\n      overtimeHours: parseFloat(row.overtime_hours),\n    };\n  }\n\n  /**\n   * Download paystub as PDF\n   */\n  async downloadPaystubPDF(employeeId: string, paystubId: string): Promise<Buffer> {\n    try {\n      logger.info('Downloading paystub PDF', { employeeId, paystubId });\n      \n      // Get the specific paystub data\n      const paystub = await this.getEmployeePaystubs(employeeId, { limit: 1000 });\n      logger.info('Retrieved paystubs', { count: paystub.length, paystubIds: paystub.map(p => p.id) });\n      \n      const targetPaystub = paystub.find(p => p.id === paystubId);\n      \n      if (!targetPaystub) {\n        logger.error('Paystub not found', { employeeId, paystubId, availableIds: paystub.map(p => p.id) });\n        throw new Error('Paystub not found');\n      }\n\n      // Generate PDF using the existing payroll service method\n      logger.info('Starting PDF generation', { paystubId: targetPaystub.id });\n      \n      const PDFDocument = require('pdfkit');\n      const doc = new PDFDocument();\n      const buffers: Buffer[] = [];\n      \n      doc.on('data', buffers.push.bind(buffers));\n      \n      return new Promise((resolve, reject) => {\n        doc.on('end', () => {\n          const pdfBuffer = Buffer.concat(buffers);\n          logger.info('PDF generation completed', { bufferSize: pdfBuffer.length });\n          resolve(pdfBuffer);\n        });\n        \n        doc.on('error', (error: any) => {\n          logger.error('PDF generation error', { error: error.message, stack: error.stack });\n          reject(error);\n        });\n        \n        try {\n          // H1 - Company header\n          doc.fontSize(20).font('Helvetica-Bold')\n             .text('TITO HR MANAGEMENT SYSTEM', 50, 50);\n\n          // H2 - Payslip title\n          doc.fontSize(16).font('Helvetica-Bold')\n             .text('PAYSLIP', 50, 85);\n\n          // H3 - Pay period\n          doc.fontSize(12).font('Helvetica-Bold')\n             .text(`Pay period: ${targetPaystub.periodName}`, 50, 115);\n\n          // H3 - Employee Information\n          doc.fontSize(12).font('Helvetica-Bold')\n             .text('Employee Information', 50, 145);\n          \n          doc.fontSize(10).font('Helvetica')\n             .text(`Employee ID: ${targetPaystub.employeeId}`, 50, 170)\n             .text(`Name: ${targetPaystub.employeeName}`, 50, 185)\n             .text(`Department: ${targetPaystub.department}`, 50, 200)\n             .text(`Base salary: ₱${(Number(targetPaystub.baseSalary) || 0).toFixed(2)}`, 50, 215);\n\n          // Earnings section\n          doc.fontSize(12).font('Helvetica-Bold')\n             .text('Earnings:', 50, 245);\n          \n          doc.fontSize(10).font('Helvetica')\n             .text('Base salary:', 50, 270)\n             .text(`₱${(Number(targetPaystub.baseSalary) || 0).toFixed(2)}`, 400, 270, { align: 'right' });\n          \n          // Add Leave Pay if applicable - using same calculation as payroll system\n          const paidLeaveHours = Number(targetPaystub.paidLeaveHours) || 0;\n          let leavePay = 0;\n          if (paidLeaveHours > 0) {\n            const startDate = new Date(targetPaystub.periodStartDate);\n            const endDate = new Date(targetPaystub.periodEndDate);\n            const expectedWorkingDays = this.calculateWorkingDays(startDate, endDate);\n            const expectedHours = expectedWorkingDays * 8; // 8 hours per working day\n            const baseSalary = Number(targetPaystub.baseSalary) || 0;\n            \n            // Use same proportional calculation as payroll system\n            leavePay = expectedHours > 0 ? (paidLeaveHours / expectedHours) * baseSalary : 0;\n            \n            if (leavePay > 0) {\n              doc.text('Leave pay:', 50, 290)\n                 .text(`₱${leavePay.toFixed(2)}`, 400, 290, { align: 'right' });\n            }\n          }\n          \n          doc.text('Gross pay:', 50, 310)\n             .text(`₱${(Number(targetPaystub.grossPay) || 0).toFixed(2)}`, 400, 310, { align: 'right' })\n             .text('Net pay:', 50, 330)\n             .text(`₱${(Number(targetPaystub.netPay) || 0).toFixed(2)}`, 400, 330, { align: 'right' });\n          \n          // Benefits section\n          let currentY = 360;\n          doc.fontSize(12).font('Helvetica-Bold')\n             .text('Benefits:', 50, currentY);\n          \n          currentY += 25;\n          \n          if (targetPaystub.benefits && targetPaystub.benefits.length > 0) {\n            // Individual benefits\n            targetPaystub.benefits.forEach((benefit: any) => {\n              doc.fontSize(10).font('Helvetica')\n                 .text(`${benefit.name}:`, 50, currentY)\n                 .text(`₱${Number(benefit.amount).toFixed(2)}`, 400, currentY, { align: 'right' });\n              currentY += 15;\n            });\n            \n            // Total Benefits\n            doc.fontSize(10).font('Helvetica')\n               .text('Total benefits:', 50, currentY)\n               .text(`₱${Number(targetPaystub.totalBenefits).toFixed(2)}`, 400, currentY, { align: 'right' });\n          } else if (targetPaystub.totalBenefits && Number(targetPaystub.totalBenefits) > 0) {\n            doc.fontSize(10).font('Helvetica')\n               .text('Total benefits:', 50, currentY)\n               .text(`₱${Number(targetPaystub.totalBenefits).toFixed(2)}`, 400, currentY, { align: 'right' });\n          } else {\n            doc.fontSize(10).font('Helvetica')\n               .text('Total benefits:', 50, currentY)\n               .text(`₱0.00`, 400, currentY, { align: 'right' });\n          }\n          \n          // Deductions section\n          currentY += 30;\n          doc.fontSize(12).font('Helvetica-Bold')\n             .text('Deductions:', 50, currentY);\n          \n          currentY += 25;\n          \n          if (targetPaystub.deductions && targetPaystub.deductions.length > 0) {\n            // Individual deductions\n            targetPaystub.deductions.forEach((deduction: any) => {\n              doc.fontSize(10).font('Helvetica')\n                 .text(`${deduction.name}:`, 50, currentY)\n                 .text(`₱${Number(deduction.amount).toFixed(2)}`, 400, currentY, { align: 'right' });\n              currentY += 15;\n            });\n            \n            // Total Deductions\n            doc.fontSize(10).font('Helvetica')\n               .text('Total deductions:', 50, currentY)\n               .text(`₱${(Number(targetPaystub.totalDeductions) || 0).toFixed(2)}`, 400, currentY, { align: 'right' });\n          } else {\n            doc.fontSize(10).font('Helvetica')\n               .text('Total deductions:', 50, currentY)\n               .text(`₱0.00`, 400, currentY, { align: 'right' });\n          }\n\n          // Footer\n          currentY += 40;\n          doc.fontSize(10).font('Helvetica')\n             .text(`Approved by hr & generated on: ${new Date().toLocaleDateString()}`, 50, currentY);\n          \n          doc.end();\n        } catch (error) {\n          logger.error('Error creating PDF content', { error: error instanceof Error ? error.message : 'Unknown error', stack: error instanceof Error ? error.stack : undefined });\n          reject(error);\n        }\n      });\n    } catch (error) {\n      logger.error('Error generating paystub PDF:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Download paystub as Excel\n   */\n  async downloadPaystubExcel(employeeId: string, paystubId: string): Promise<Buffer> {\n    try {\n      logger.info('Downloading paystub Excel', { employeeId, paystubId });\n      \n      // Get the specific paystub data\n      const paystub = await this.getEmployeePaystubs(employeeId, { limit: 1000 });\n      logger.info('Retrieved paystubs', { count: paystub.length, paystubIds: paystub.map(p => p.id) });\n      \n      const targetPaystub = paystub.find(p => p.id === paystubId);\n      \n      if (!targetPaystub) {\n        logger.error('Paystub not found', { employeeId, paystubId, availableIds: paystub.map(p => p.id) });\n        throw new Error('Paystub not found');\n      }\n\n      // Create Excel file using xlsx library\n      logger.info('Starting Excel generation', { paystubId: targetPaystub.id });\n      \n      const XLSX = require('xlsx');\n      \n      // Create workbook and worksheet\n      const workbook = XLSX.utils.book_new();\n      \n      // Calculate Leave Pay using same logic as payroll system\n      const paidLeaveHours = Number(targetPaystub.paidLeaveHours) || 0;\n      let leavePay = 0;\n      if (paidLeaveHours > 0) {\n        const startDate = new Date(targetPaystub.periodStartDate);\n        const endDate = new Date(targetPaystub.periodEndDate);\n        const expectedWorkingDays = this.calculateWorkingDays(startDate, endDate);\n        const expectedHours = expectedWorkingDays * 8; // 8 hours per working day\n        const baseSalary = Number(targetPaystub.baseSalary) || 0;\n        \n        // Use same proportional calculation as payroll system\n        leavePay = expectedHours > 0 ? (paidLeaveHours / expectedHours) * baseSalary : 0;\n      }\n\n      // Employee Information\n      const employeeData = [\n        ['Employee Information', ''],\n        ['Name', targetPaystub.employeeName],\n        ['Employee ID', targetPaystub.employeeId],\n        ['Position', targetPaystub.position],\n        ['Department', targetPaystub.department],\n        ['Period', targetPaystub.periodName],\n        ['', ''],\n        ['Payroll Details', ''],\n        ['Base Salary', targetPaystub.baseSalary],\n        ['Paid Leave Hours', targetPaystub.paidLeaveHours],\n        ['Leave Pay', leavePay],\n        ['Total Benefits', targetPaystub.totalBenefits],\n        ['Total Deductions', targetPaystub.totalDeductions],\n        ['Net Pay', targetPaystub.netPay],\n        ['', ''],\n        ['Benefits Breakdown', ''],\n        ['Benefit Name', 'Amount']\n      ];\n      \n      // Add benefits\n      if (targetPaystub.benefits && targetPaystub.benefits.length > 0) {\n        targetPaystub.benefits.forEach((benefit: any) => {\n          employeeData.push([benefit.name, `+${benefit.amount}`]);\n        });\n        employeeData.push(['', '']); // Add empty row\n      }\n      \n      // Add deductions section\n      employeeData.push(['Deductions Breakdown', '']);\n      employeeData.push(['Deduction Name', 'Amount']);\n      \n      // Add deductions\n      if (targetPaystub.deductions && targetPaystub.deductions.length > 0) {\n        targetPaystub.deductions.forEach((deduction: any) => {\n          employeeData.push([deduction.name, `-${deduction.amount}`]);\n        });\n      }\n      \n      const worksheet = XLSX.utils.aoa_to_sheet(employeeData);\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Paystub');\n      \n      // Generate Excel buffer\n      const excelBuffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n      logger.info('Excel generation completed', { bufferSize: excelBuffer.length });\n      return excelBuffer;\n    } catch (error) {\n      logger.error('Error generating paystub Excel:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get employee requests (all types)\n   */\n  async getEmployeeRequests(employeeId: string, params: {\n    type?: string;\n    status?: string;\n    limit?: number;\n    offset?: number;\n  } = {}): Promise<EmployeeRequest[]> {\n    const { type, status, limit = 50, offset = 0 } = params;\n    \n    // Get leave requests\n    let leaveQuery = `\n      SELECT \n        l.id,\n        'leave' as type,\n        l.status,\n        l.created_at as \"submittedAt\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"approverName\",\n        l.updated_at as \"approvedAt\",\n        '' as \"rejectionReason\",\n        json_build_object(\n          'leaveType', l.leave_type,\n          'startDate', l.start_date,\n          'endDate', l.end_date,\n          'reason', 'Leave request',\n          'days', (l.end_date - l.start_date + 1)\n        ) as details\n      FROM leaves l\n      LEFT JOIN users u ON l.approver_id = u.id\n      WHERE l.employee_id = $1\n    `;\n    \n    if (type && type !== 'leave') {\n      leaveQuery += ' AND FALSE';\n    }\n    \n    if (status) {\n      leaveQuery += ' AND l.status = $2';\n    }\n    \n    leaveQuery += ` ORDER BY l.created_at DESC`;\n\n    // Get time correction requests\n    let timeCorrectionQuery = `\n      SELECT \n        tcr.id,\n        'time_correction' as type,\n        tcr.status,\n        tcr.created_at as \"submittedAt\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"approverName\",\n        tcr.approved_at as \"approvedAt\",\n        tcr.comments as \"rejectionReason\",\n        json_build_object(\n          'correctionDate', tcr.correction_date,\n          'sessionType', tcr.session_type,\n          'requestedClockIn', tcr.requested_clock_in,\n          'requestedClockOut', tcr.requested_clock_out,\n          'reason', tcr.reason\n        ) as details\n      FROM time_correction_requests tcr\n      LEFT JOIN users u ON tcr.approver_id = u.id\n      WHERE tcr.employee_id = $1\n    `;\n    \n    if (type && type !== 'time_correction') {\n      timeCorrectionQuery += ' AND FALSE';\n    }\n    \n    if (status) {\n      timeCorrectionQuery += ' AND tcr.status = $2';\n    }\n    \n    timeCorrectionQuery += ` ORDER BY tcr.created_at DESC`;\n\n    // Get overtime requests\n    let overtimeQuery = `\n      SELECT \n        ot.id,\n        'overtime' as type,\n        ot.status,\n        ot.created_at as \"submittedAt\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"approverName\",\n        ot.approved_at as \"approvedAt\",\n        ot.comments as \"rejectionReason\",\n        json_build_object(\n          'overtimeDate', ot.overtime_date,\n          'startTime', ot.start_time,\n          'endTime', ot.end_time,\n          'requestedHours', ot.requested_hours,\n          'reason', ot.reason\n        ) as details\n      FROM overtime_requests ot\n      LEFT JOIN users u ON ot.approver_id = u.id\n      WHERE ot.employee_id = $1\n    `;\n    \n    if (type && type !== 'overtime') {\n      overtimeQuery += ' AND FALSE';\n    }\n    \n    if (status) {\n      overtimeQuery += ' AND ot.status = $2';\n    }\n    \n    overtimeQuery += ` ORDER BY ot.created_at DESC`;\n\n    // Build parameter array based on what filters are applied\n    const params_array = [employeeId];\n    if (status) {\n      params_array.push(status);\n    }\n    \n    const [leaveResult, timeCorrectionResult, overtimeResult] = await Promise.all([\n      getPool().query(leaveQuery, params_array),\n      getPool().query(timeCorrectionQuery, params_array),\n      getPool().query(overtimeQuery, params_array)\n    ]);\n\n    // Combine and sort all requests\n    const allRequests = [\n      ...leaveResult.rows,\n      ...timeCorrectionResult.rows,\n      ...overtimeResult.rows\n    ].sort((a, b) => new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime());\n\n    // Apply pagination to the combined results\n    const startIndex = offset;\n    const endIndex = offset + limit;\n    const result = allRequests.slice(startIndex, endIndex);\n    \n    // Debug: Log the results\n    console.log('Total requests found:', allRequests.length);\n    console.log('Request IDs:', allRequests.map(r => r.id));\n    console.log('Returning requests:', result.length);\n    console.log('Returned IDs:', result.map(r => r.id));\n    \n    return result;\n  }\n\n  /**\n   * Get request statistics for an employee\n   */\n  async getRequestStats(employeeId: string): Promise<RequestStats> {\n    const query = `\n      SELECT \n        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1) +\n        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1) +\n        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1) as total,\n        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1 AND status = 'pending') +\n        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1 AND status = 'pending') +\n        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1 AND status = 'pending') as pending,\n        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1 AND status = 'approved') +\n        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1 AND status = 'approved') +\n        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1 AND status = 'approved') as approved,\n        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1 AND status = 'rejected') +\n        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1 AND status = 'rejected') +\n        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1 AND status = 'rejected') as rejected\n    `;\n\n    const result = await getPool().query(query, [employeeId]);\n    const row = result.rows[0];\n    \n    return {\n      total: parseInt(row.total),\n      pending: parseInt(row.pending),\n      approved: parseInt(row.approved),\n      rejected: parseInt(row.rejected),\n    };\n  }\n\n  /**\n   * Get employee paystubs\n   */\n  async getEmployeePaystubs(employeeId: string, params: {\n    year?: number;\n    month?: number;\n    page?: number;\n    limit?: number;\n  } = {}): Promise<PaystubData[]> {\n    const { year, month, page = 1, limit = 10 } = params;\n    const offset = (page - 1) * limit;\n\n    let whereClause = 'WHERE pr.employee_id = $1';\n    const queryParams: any[] = [employeeId];\n    let paramIndex = 2;\n\n    if (year) {\n      whereClause += ` AND EXTRACT(YEAR FROM pp.start_date) = $${paramIndex++}`;\n      queryParams.push(year);\n    }\n\n    if (month) {\n      whereClause += ` AND EXTRACT(MONTH FROM pp.start_date) = $${paramIndex++}`;\n      queryParams.push(month);\n    }\n\n    const query = `\n      SELECT \n        pr.id,\n        pr.payroll_period_id,\n        pp.period_name,\n        pp.start_date as period_start_date,\n        pp.end_date as period_end_date,\n        e.employee_id,\n        CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n        e.position,\n        e.department_id,\n        d.name as department_name,\n        e.base_salary,\n        pr.total_regular_hours,\n        pr.total_overtime_hours,\n        pr.total_late_hours,\n        pr.paid_leave_hours,\n        pr.gross_pay,\n        pr.total_deductions,\n        pr.total_benefits,\n        pr.net_pay,\n        pr.late_deductions,\n        pr.status,\n        pr.created_at,\n        pr.updated_at\n      FROM payroll_records pr\n      JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n      JOIN employees e ON pr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n      ORDER BY pp.start_date DESC\n      LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n    `;\n\n    queryParams.push(limit, offset);\n    const result = await getPool().query(query, queryParams);\n\n    // Get deductions for each paystub\n    const paystubs: PaystubData[] = [];\n    for (const row of result.rows) {\n      const deductionsQuery = `\n        SELECT \n          pd.name,\n          pd.amount\n        FROM payroll_deductions pd\n        WHERE pd.payroll_record_id = $1\n        ORDER BY pd.name\n      `;\n\n      const deductionsResult = await getPool().query(deductionsQuery, [row.id]);\n      \n      // Get benefits for this paystub\n      const benefitsQuery = `\n        SELECT \n          bt.name,\n          eb.amount\n        FROM employee_benefits eb\n        JOIN benefit_types bt ON eb.benefit_type_id = bt.id\n        JOIN payroll_periods pp ON pp.id = $2\n        WHERE eb.employee_id = $1 \n          AND eb.is_active = true\n          AND (eb.end_date IS NULL OR eb.end_date >= pp.start_date)\n          AND eb.start_date <= pp.end_date\n        ORDER BY bt.name\n      `;\n      \n      const benefitsResult = await getPool().query(benefitsQuery, [employeeId, row.payroll_period_id]);\n      \n      paystubs.push({\n        id: row.id,\n        periodName: row.period_name,\n        periodStartDate: row.period_start_date,\n        periodEndDate: row.period_end_date,\n        employeeId: row.employee_id,\n        employeeName: row.employee_name,\n        position: row.position,\n        department: row.department_name || 'Unassigned',\n        baseSalary: parseFloat(row.base_salary),\n        totalRegularHours: parseFloat(row.total_regular_hours),\n        totalOvertimeHours: parseFloat(row.total_overtime_hours),\n        paidLeaveHours: parseFloat(row.paid_leave_hours) || 0,\n        grossPay: parseFloat(row.gross_pay),\n        totalDeductions: parseFloat(row.total_deductions),\n        totalBenefits: parseFloat(row.total_benefits),\n        netPay: parseFloat(row.net_pay),\n        lateDeductions: parseFloat(row.late_deductions),\n        deductions: deductionsResult.rows.map(d => ({\n          name: d.name,\n          amount: parseFloat(d.amount)\n        })),\n        benefits: benefitsResult.rows.map(b => ({\n          name: b.name,\n          amount: parseFloat(b.amount)\n        })),\n        createdAt: row.createdAt\n      });\n    }\n\n    return paystubs;\n  }\n\n  /**\n   * Get latest employee paystub\n   */\n  async getLatestPaystub(employeeId: string): Promise<PaystubData | null> {\n    // First try to get the latest payroll record\n    const query = `\n      SELECT \n        pr.id,\n        pr.payroll_period_id,\n        pp.period_name,\n        e.employee_id,\n        CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n        e.position,\n        e.department_id,\n        d.name as department_name,\n        e.base_salary,\n        pr.total_regular_hours,\n        pr.total_overtime_hours,\n        pr.total_late_hours,\n        pr.paid_leave_hours,\n        pr.gross_pay,\n        pr.total_deductions,\n        pr.total_benefits,\n        pr.net_pay,\n        pr.late_deductions,\n        pr.status,\n        pr.created_at,\n        pr.updated_at\n      FROM payroll_records pr\n      JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n      JOIN employees e ON pr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE pr.employee_id = $1\n      ORDER BY pp.start_date DESC\n      LIMIT 1\n    `;\n\n    const result = await getPool().query(query, [employeeId]);\n    \n    if (result.rows.length === 0) {\n      // If no payroll records exist, return employee info with zero values\n      const employeeQuery = `\n        SELECT \n          e.employee_id as \"employeeId\",\n          CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n          e.position,\n          d.name as department,\n          e.base_salary as \"baseSalary\"\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        WHERE e.id = $1\n      `;\n\n      const employeeResult = await getPool().query(employeeQuery, [employeeId]);\n      \n      if (employeeResult.rows.length === 0) {\n        return null;\n      }\n\n      const employee = employeeResult.rows[0];\n      \n      return {\n        id: 'no-payroll',\n        periodName: 'No Payroll Period',\n        periodStartDate: new Date().toISOString(),\n        periodEndDate: new Date().toISOString(),\n        employeeId: employee.employeeId,\n        employeeName: employee.employeeName,\n        position: employee.position,\n        department: employee.department || 'Unassigned',\n        baseSalary: parseFloat(employee.baseSalary),\n        totalRegularHours: 0,\n        totalOvertimeHours: 0,\n        paidLeaveHours: 0,\n        grossPay: 0,\n        totalDeductions: 0,\n        totalBenefits: 0,\n        netPay: 0,\n        lateDeductions: 0,\n        deductions: [],\n        benefits: [],\n        createdAt: new Date().toISOString()\n      };\n    }\n\n    const row = result.rows[0];\n\n    // Get deductions for the paystub\n    const deductionsQuery = `\n      SELECT \n        pd.name,\n        pd.amount\n      FROM payroll_deductions pd\n      WHERE pd.payroll_record_id = $1\n      ORDER BY pd.name\n    `;\n\n    const deductionsResult = await getPool().query(deductionsQuery, [row.id]);\n\n    // Get benefits for this paystub\n    const benefitsQuery = `\n      SELECT \n        bt.name,\n        eb.amount\n      FROM employee_benefits eb\n      JOIN benefit_types bt ON eb.benefit_type_id = bt.id\n      JOIN payroll_periods pp ON pp.id = $2\n      WHERE eb.employee_id = $1 \n        AND eb.is_active = true\n        AND (eb.end_date IS NULL OR eb.end_date >= pp.start_date)\n        AND eb.start_date <= pp.end_date\n      ORDER BY bt.name\n    `;\n    \n    const benefitsResult = await getPool().query(benefitsQuery, [employeeId, row.payroll_period_id]);\n\n    return {\n      id: row.id,\n      periodName: row.period_name,\n      periodStartDate: row.periodStartDate,\n      periodEndDate: row.periodEndDate,\n      employeeId: row.employee_id,\n      employeeName: row.employee_name,\n      position: row.position,\n      department: row.department_name || 'Unassigned',\n      baseSalary: parseFloat(row.base_salary),\n      totalRegularHours: parseFloat(row.total_regular_hours),\n      totalOvertimeHours: parseFloat(row.total_overtime_hours),\n      paidLeaveHours: parseFloat(row.paid_leave_hours) || 0,\n      grossPay: parseFloat(row.gross_pay),\n      totalDeductions: parseFloat(row.total_deductions),\n      totalBenefits: parseFloat(row.total_benefits),\n      netPay: parseFloat(row.net_pay),\n      lateDeductions: parseFloat(row.late_deductions),\n      deductions: deductionsResult.rows.map(d => ({\n        name: d.name,\n        amount: parseFloat(d.amount)\n      })),\n      benefits: benefitsResult.rows.map(b => ({\n        name: b.name,\n        amount: parseFloat(b.amount)\n      })),\n      createdAt: row.created_at\n    };\n  }\n}\n\nexport const employeeService = new EmployeeService();\n"],"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","ignoreList":[]}