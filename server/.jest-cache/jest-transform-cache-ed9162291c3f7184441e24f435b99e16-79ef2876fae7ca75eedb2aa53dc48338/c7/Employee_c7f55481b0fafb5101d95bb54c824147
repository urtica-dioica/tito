c519eaf4b51d1ba8aed3b5270d85cbd0
"use strict";

/* istanbul ignore next */
function cov_1aplrq2nyd() {
  var path = "/home/kim/tito/server/src/models/hr/Employee.ts";
  var hash = "4007266c47b833dde83830c6dbed79c912a649f2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/models/hr/Employee.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 55
        }
      },
      "2": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 51
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 46
        }
      },
      "4": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 19,
          column: 5
        }
      },
      "5": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "6": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "7": {
        start: {
          line: 30,
          column: 27
        },
        end: {
          line: 30,
          column: 63
        }
      },
      "8": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 34
        }
      },
      "9": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 24
        }
      },
      "10": {
        start: {
          line: 41,
          column: 22
        },
        end: {
          line: 41,
          column: 61
        }
      },
      "11": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "12": {
        start: {
          line: 43,
          column: 27
        },
        end: {
          line: 43,
          column: 61
        }
      },
      "13": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 42
        }
      },
      "14": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 24
        }
      },
      "15": {
        start: {
          line: 54,
          column: 22
        },
        end: {
          line: 54,
          column: 66
        }
      },
      "16": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "17": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 56,
          column: 65
        }
      },
      "18": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 42
        }
      },
      "19": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 24
        }
      },
      "20": {
        start: {
          line: 67,
          column: 22
        },
        end: {
          line: 67,
          column: 70
        }
      },
      "21": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "22": {
        start: {
          line: 69,
          column: 27
        },
        end: {
          line: 69,
          column: 69
        }
      },
      "23": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 42
        }
      },
      "24": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 24
        }
      },
      "25": {
        start: {
          line: 80,
          column: 22
        },
        end: {
          line: 96,
          column: 5
        }
      },
      "26": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "27": {
        start: {
          line: 98,
          column: 27
        },
        end: {
          line: 98,
          column: 61
        }
      },
      "28": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "29": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 28
        }
      },
      "30": {
        start: {
          line: 102,
          column: 24
        },
        end: {
          line: 102,
          column: 38
        }
      },
      "31": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 128,
          column: 14
        }
      },
      "32": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 24
        }
      },
      "33": {
        start: {
          line: 138,
          column: 23
        },
        end: {
          line: 138,
          column: 25
        }
      },
      "34": {
        start: {
          line: 139,
          column: 23
        },
        end: {
          line: 139,
          column: 25
        }
      },
      "35": {
        start: {
          line: 140,
          column: 25
        },
        end: {
          line: 140,
          column: 26
        }
      },
      "36": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "37": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 60
        }
      },
      "38": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 44
        }
      },
      "39": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "40": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 55
        }
      },
      "41": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 39
        }
      },
      "42": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "43": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 62
        }
      },
      "44": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 46
        }
      },
      "45": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "46": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 56
        }
      },
      "47": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 40
        }
      },
      "48": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "49": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 58
        }
      },
      "50": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 42
        }
      },
      "51": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "52": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 53
        }
      },
      "53": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 37
        }
      },
      "54": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "55": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 37
        }
      },
      "56": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 53
        }
      },
      "57": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 32
        }
      },
      "58": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 24
        }
      },
      "59": {
        start: {
          line: 171,
          column: 22
        },
        end: {
          line: 176,
          column: 5
        }
      },
      "60": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "61": {
        start: {
          line: 178,
          column: 27
        },
        end: {
          line: 178,
          column: 63
        }
      },
      "62": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 42
        }
      },
      "63": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 24
        }
      },
      "64": {
        start: {
          line: 189,
          column: 22
        },
        end: {
          line: 189,
          column: 59
        }
      },
      "65": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "66": {
        start: {
          line: 191,
          column: 27
        },
        end: {
          line: 191,
          column: 61
        }
      },
      "67": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 65
        }
      },
      "68": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 24
        }
      },
      "69": {
        start: {
          line: 202,
          column: 22
        },
        end: {
          line: 218,
          column: 5
        }
      },
      "70": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "71": {
        start: {
          line: 220,
          column: 27
        },
        end: {
          line: 220,
          column: 55
        }
      },
      "72": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 246,
          column: 16
        }
      },
      "73": {
        start: {
          line: 221,
          column: 43
        },
        end: {
          line: 246,
          column: 13
        }
      },
      "74": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 24
        }
      },
      "75": {
        start: {
          line: 256,
          column: 22
        },
        end: {
          line: 273,
          column: 5
        }
      },
      "76": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "77": {
        start: {
          line: 275,
          column: 27
        },
        end: {
          line: 275,
          column: 71
        }
      },
      "78": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 301,
          column: 16
        }
      },
      "79": {
        start: {
          line: 276,
          column: 43
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "80": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 24
        }
      },
      "81": {
        start: {
          line: 311,
          column: 22
        },
        end: {
          line: 311,
          column: 95
        }
      },
      "82": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 318,
          column: 9
        }
      },
      "83": {
        start: {
          line: 313,
          column: 27
        },
        end: {
          line: 313,
          column: 81
        }
      },
      "84": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 50
        }
      },
      "85": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 24
        }
      },
      "86": {
        start: {
          line: 324,
          column: 22
        },
        end: {
          line: 324,
          column: 72
        }
      },
      "87": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 331,
          column: 9
        }
      },
      "88": {
        start: {
          line: 326,
          column: 27
        },
        end: {
          line: 326,
          column: 67
        }
      },
      "89": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 50
        }
      },
      "90": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 24
        }
      },
      "91": {
        start: {
          line: 337,
          column: 23
        },
        end: {
          line: 337,
          column: 48
        }
      },
      "92": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 422,
          column: 9
        }
      },
      "93": {
        start: {
          line: 339,
          column: 68
        },
        end: {
          line: 339,
          column: 74
        }
      },
      "94": {
        start: {
          line: 340,
          column: 27
        },
        end: {
          line: 340,
          column: 45
        }
      },
      "95": {
        start: {
          line: 341,
          column: 30
        },
        end: {
          line: 341,
          column: 32
        }
      },
      "96": {
        start: {
          line: 342,
          column: 31
        },
        end: {
          line: 342,
          column: 33
        }
      },
      "97": {
        start: {
          line: 343,
          column: 27
        },
        end: {
          line: 343,
          column: 29
        }
      },
      "98": {
        start: {
          line: 344,
          column: 29
        },
        end: {
          line: 344,
          column: 30
        }
      },
      "99": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 348,
          column: 13
        }
      },
      "100": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 63
        }
      },
      "101": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 347,
          column: 36
        }
      },
      "102": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 352,
          column: 13
        }
      },
      "103": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 350,
          column: 70
        }
      },
      "104": {
        start: {
          line: 351,
          column: 16
        },
        end: {
          line: 351,
          column: 43
        }
      },
      "105": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 355,
          column: 13
        }
      },
      "106": {
        start: {
          line: 354,
          column: 16
        },
        end: {
          line: 354,
          column: 66
        }
      },
      "107": {
        start: {
          line: 357,
          column: 31
        },
        end: {
          line: 361,
          column: 7
        }
      },
      "108": {
        start: {
          line: 362,
          column: 32
        },
        end: {
          line: 362,
          column: 70
        }
      },
      "109": {
        start: {
          line: 363,
          column: 26
        },
        end: {
          line: 363,
          column: 61
        }
      },
      "110": {
        start: {
          line: 365,
          column: 26
        },
        end: {
          line: 383,
          column: 7
        }
      },
      "111": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 384,
          column: 39
        }
      },
      "112": {
        start: {
          line: 385,
          column: 27
        },
        end: {
          line: 385,
          column: 60
        }
      },
      "113": {
        start: {
          line: 386,
          column: 30
        },
        end: {
          line: 411,
          column: 15
        }
      },
      "114": {
        start: {
          line: 386,
          column: 54
        },
        end: {
          line: 411,
          column: 13
        }
      },
      "115": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 415,
          column: 14
        }
      },
      "116": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 418,
          column: 24
        }
      },
      "117": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 421,
          column: 29
        }
      },
      "118": {
        start: {
          line: 428,
          column: 22
        },
        end: {
          line: 428,
          column: 70
        }
      },
      "119": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 435,
          column: 9
        }
      },
      "120": {
        start: {
          line: 430,
          column: 27
        },
        end: {
          line: 430,
          column: 69
        }
      },
      "121": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 42
        }
      },
      "122": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 434,
          column: 24
        }
      },
      "123": {
        start: {
          line: 438,
          column: 23
        },
        end: {
          line: 438,
          column: 48
        }
      },
      "124": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 449,
          column: 9
        }
      },
      "125": {
        start: {
          line: 440,
          column: 26
        },
        end: {
          line: 440,
          column: 108
        }
      },
      "126": {
        start: {
          line: 441,
          column: 27
        },
        end: {
          line: 441,
          column: 64
        }
      },
      "127": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 442,
          column: 59
        }
      },
      "128": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 445,
          column: 24
        }
      },
      "129": {
        start: {
          line: 448,
          column: 12
        },
        end: {
          line: 448,
          column: 29
        }
      },
      "130": {
        start: {
          line: 452,
          column: 0
        },
        end: {
          line: 452,
          column: 38
        }
      },
      "131": {
        start: {
          line: 454,
          column: 0
        },
        end: {
          line: 454,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 31
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 23
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 40
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 31
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 53
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 39
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 66
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 34
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 79
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 137,
            column: 35
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 137
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 29
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 188
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 29
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 201
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 221,
            column: 35
          },
          end: {
            line: 221,
            column: 36
          }
        },
        loc: {
          start: {
            line: 221,
            column: 43
          },
          end: {
            line: 246,
            column: 13
          }
        },
        line: 221
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 50
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 255
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 276,
            column: 35
          },
          end: {
            line: 276,
            column: 36
          }
        },
        loc: {
          start: {
            line: 276,
            column: 43
          },
          end: {
            line: 301,
            column: 13
          }
        },
        line: 276
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 53
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 310
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        },
        loc: {
          start: {
            line: 323,
            column: 34
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 323
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 336,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        },
        loc: {
          start: {
            line: 336,
            column: 31
          },
          end: {
            line: 423,
            column: 5
          }
        },
        line: 336
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 386,
            column: 46
          },
          end: {
            line: 386,
            column: 47
          }
        },
        loc: {
          start: {
            line: 386,
            column: 54
          },
          end: {
            line: 411,
            column: 13
          }
        },
        line: 386
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 427,
            column: 4
          },
          end: {
            line: 427,
            column: 5
          }
        },
        loc: {
          start: {
            line: 427,
            column: 37
          },
          end: {
            line: 436,
            column: 5
          }
        },
        line: 427
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 437,
            column: 4
          },
          end: {
            line: 437,
            column: 5
          }
        },
        loc: {
          start: {
            line: 437,
            column: 29
          },
          end: {
            line: 450,
            column: 5
          }
        },
        line: 437
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 30
          }
        }, {
          start: {
            line: 22,
            column: 34
          },
          end: {
            line: 22,
            column: 38
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 27,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 27,
            column: 23
          }
        }, {
          start: {
            line: 27,
            column: 27
          },
          end: {
            line: 27,
            column: 35
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 19
          },
          end: {
            line: 44,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 19
          },
          end: {
            line: 44,
            column: 33
          }
        }, {
          start: {
            line: 44,
            column: 37
          },
          end: {
            line: 44,
            column: 41
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 19
          },
          end: {
            line: 57,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 19
          },
          end: {
            line: 57,
            column: 33
          }
        }, {
          start: {
            line: 57,
            column: 37
          },
          end: {
            line: 57,
            column: 41
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 70,
            column: 19
          },
          end: {
            line: 70,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 19
          },
          end: {
            line: 70,
            column: 33
          }
        }, {
          start: {
            line: 70,
            column: 37
          },
          end: {
            line: 70,
            column: 41
          }
        }],
        line: 70
      },
      "5": {
        loc: {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "6": {
        loc: {
          start: {
            line: 123,
            column: 28
          },
          end: {
            line: 127,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 42
          },
          end: {
            line: 127,
            column: 17
          }
        }, {
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 127,
            column: 29
          }
        }],
        line: 123
      },
      "7": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "8": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "9": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "10": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "11": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "12": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "13": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "14": {
        loc: {
          start: {
            line: 179,
            column: 19
          },
          end: {
            line: 179,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 19
          },
          end: {
            line: 179,
            column: 33
          }
        }, {
          start: {
            line: 179,
            column: 37
          },
          end: {
            line: 179,
            column: 41
          }
        }],
        line: 179
      },
      "15": {
        loc: {
          start: {
            line: 192,
            column: 19
          },
          end: {
            line: 192,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 37
          },
          end: {
            line: 192,
            column: 56
          }
        }, {
          start: {
            line: 192,
            column: 59
          },
          end: {
            line: 192,
            column: 64
          }
        }],
        line: 192
      },
      "16": {
        loc: {
          start: {
            line: 241,
            column: 28
          },
          end: {
            line: 245,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 241,
            column: 42
          },
          end: {
            line: 245,
            column: 17
          }
        }, {
          start: {
            line: 245,
            column: 20
          },
          end: {
            line: 245,
            column: 29
          }
        }],
        line: 241
      },
      "17": {
        loc: {
          start: {
            line: 296,
            column: 28
          },
          end: {
            line: 300,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 296,
            column: 42
          },
          end: {
            line: 300,
            column: 17
          }
        }, {
          start: {
            line: 300,
            column: 20
          },
          end: {
            line: 300,
            column: 29
          }
        }],
        line: 296
      },
      "18": {
        loc: {
          start: {
            line: 336,
            column: 18
          },
          end: {
            line: 336,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 336,
            column: 27
          },
          end: {
            line: 336,
            column: 29
          }
        }],
        line: 336
      },
      "19": {
        loc: {
          start: {
            line: 339,
            column: 20
          },
          end: {
            line: 339,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 339,
            column: 27
          },
          end: {
            line: 339,
            column: 28
          }
        }],
        line: 339
      },
      "20": {
        loc: {
          start: {
            line: 339,
            column: 30
          },
          end: {
            line: 339,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 339,
            column: 38
          },
          end: {
            line: 339,
            column: 40
          }
        }],
        line: 339
      },
      "21": {
        loc: {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 348,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 348,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "22": {
        loc: {
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "23": {
        loc: {
          start: {
            line: 353,
            column: 12
          },
          end: {
            line: 355,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 12
          },
          end: {
            line: 355,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "24": {
        loc: {
          start: {
            line: 406,
            column: 28
          },
          end: {
            line: 410,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 406,
            column: 48
          },
          end: {
            line: 410,
            column: 17
          }
        }, {
          start: {
            line: 410,
            column: 20
          },
          end: {
            line: 410,
            column: 24
          }
        }],
        line: 406
      },
      "25": {
        loc: {
          start: {
            line: 442,
            column: 19
          },
          end: {
            line: 442,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 442,
            column: 19
          },
          end: {
            line: 442,
            column: 53
          }
        }, {
          start: {
            line: 442,
            column: 57
          },
          end: {
            line: 442,
            column: 58
          }
        }],
        line: 442
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/models/hr/Employee.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/models/hr/Employee.ts"],
      sourcesContent: ["import { Pool } from 'pg';\nimport { getPool } from '../../config/database';\n\nexport interface Employee {\n  id: string;\n  user_id: string;\n  employee_id: string;\n  department_id: string | null;\n  position: string;\n  employment_type: 'regular' | 'contractual' | 'jo';\n  hire_date: Date;\n  base_salary: number;\n  status: 'active' | 'inactive' | 'terminated' | 'on_leave';\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface CreateEmployeeData {\n  user_id: string;\n  department_id?: string;\n  position: string;\n  employment_type: 'regular' | 'contractual' | 'jo';\n  hire_date: Date;\n  base_salary: number;\n  status?: 'active' | 'inactive' | 'terminated' | 'on_leave';\n}\n\nexport interface UpdateEmployeeData {\n  department_id?: string;\n  position?: string;\n  employment_type?: 'regular' | 'contractual' | 'jo';\n  hire_date?: Date;\n  base_salary?: number;\n  status?: 'active' | 'inactive' | 'terminated' | 'on_leave';\n}\n\nexport interface EmployeeWithUser extends Employee {\n  user: {\n    id: string;\n    email: string;\n    first_name: string;\n    last_name: string;\n    role: string;\n    is_active: boolean;\n  };\n  department?: {\n    id: string;\n    name: string;\n    description: string | null;\n  } | null | undefined;\n}\n\nexport class EmployeeModel {\n  private pool: Pool;\n\n  constructor() {\n    this.pool = getPool();\n  }\n\n  /**\n   * Create new employee\n   */\n  async createEmployee(data: CreateEmployeeData): Promise<Employee> {\n    const query = `\n      INSERT INTO employees (\n        user_id, department_id, position, employment_type, \n        hire_date, base_salary, status\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7)\n      RETURNING *\n    `;\n\n    const values = [\n      data.user_id,\n      data.department_id || null,\n      data.position,\n      data.employment_type,\n      data.hire_date,\n      data.base_salary,\n      data.status || 'active'\n    ];\n\n    try {\n      const result = await this.pool.query(query, values);\n      return result.rows[0];\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get employee by ID\n   */\n  async findById(id: string): Promise<Employee | null> {\n    const query = 'SELECT * FROM employees WHERE id = $1';\n    \n    try {\n      const result = await this.pool.query(query, [id]);\n      return result.rows[0] || null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get employee by user ID\n   */\n  async findByUserId(userId: string): Promise<Employee | null> {\n    const query = 'SELECT * FROM employees WHERE user_id = $1';\n    \n    try {\n      const result = await this.pool.query(query, [userId]);\n      return result.rows[0] || null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get employee by employee ID\n   */\n  async findByEmployeeId(employeeId: string): Promise<Employee | null> {\n    const query = 'SELECT * FROM employees WHERE employee_id = $1';\n    \n    try {\n      const result = await this.pool.query(query, [employeeId]);\n      return result.rows[0] || null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get employee with user and department information\n   */\n  async findByIdWithDetails(id: string): Promise<EmployeeWithUser | null> {\n    const query = `\n      SELECT \n        e.*,\n        u.id as user_id_inner,\n        u.email,\n        u.first_name,\n        u.last_name,\n        u.role,\n        u.is_active as user_is_active,\n        d.id as dept_id,\n        d.name as dept_name,\n        d.description as dept_description\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.id = $1\n    `;\n\n    try {\n      const result = await this.pool.query(query, [id]);\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      const row = result.rows[0];\n      \n      return {\n        id: row.id,\n        user_id: row.user_id_inner,\n        employee_id: row.employee_id,\n        department_id: row.department_id,\n        position: row.position,\n        employment_type: row.employment_type,\n        hire_date: row.hire_date,\n        base_salary: row.base_salary,\n        status: row.status,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        user: {\n          id: row.user_id_inner,\n          email: row.email,\n          first_name: row.first_name,\n          last_name: row.last_name,\n          role: row.role,\n          is_active: row.user_is_active\n        },\n        department: row.dept_id ? {\n          id: row.dept_id,\n          name: row.dept_name,\n          description: row.dept_description\n        } : undefined\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update employee\n   */\n  async updateEmployee(id: string, data: UpdateEmployeeData): Promise<Employee | null> {\n    const fields = [];\n    const values = [];\n    let paramCount = 1;\n\n    if (data.department_id !== undefined) {\n      fields.push(`department_id = $${paramCount++}`);\n      values.push(data.department_id);\n    }\n    if (data.position !== undefined) {\n      fields.push(`position = $${paramCount++}`);\n      values.push(data.position);\n    }\n    if (data.employment_type !== undefined) {\n      fields.push(`employment_type = $${paramCount++}`);\n      values.push(data.employment_type);\n    }\n    if (data.hire_date !== undefined) {\n      fields.push(`hire_date = $${paramCount++}`);\n      values.push(data.hire_date);\n    }\n    if (data.base_salary !== undefined) {\n      fields.push(`base_salary = $${paramCount++}`);\n      values.push(data.base_salary);\n    }\n    if (data.status !== undefined) {\n      fields.push(`status = $${paramCount++}`);\n      values.push(data.status);\n    }\n\n    if (fields.length === 0) {\n      return this.findById(id);\n    }\n\n    fields.push(`updated_at = $${paramCount++}`);\n    values.push(new Date());\n    values.push(id);\n\n    const query = `\n      UPDATE employees \n      SET ${fields.join(', ')}\n      WHERE id = $${paramCount}\n      RETURNING *\n    `;\n\n    try {\n      const result = await this.pool.query(query, values);\n      return result.rows[0] || null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Delete employee\n   */\n  async deleteEmployee(id: string): Promise<boolean> {\n    const query = 'DELETE FROM employees WHERE id = $1';\n    \n    try {\n      const result = await this.pool.query(query, [id]);\n      return result.rowCount ? result.rowCount > 0 : false;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * List all employees\n   */\n  async listAllEmployees(): Promise<EmployeeWithUser[]> {\n    const query = `\n      SELECT \n        e.*,\n        u.id as user_id_inner,\n        u.email,\n        u.first_name,\n        u.last_name,\n        u.role,\n        u.is_active as user_is_active,\n        d.id as dept_id,\n        d.name as dept_name,\n        d.description as dept_description\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ORDER BY u.last_name, u.first_name\n    `;\n\n    try {\n      const result = await this.pool.query(query);\n      \n      return result.rows.map(row => ({\n        id: row.id,\n        user_id: row.user_id_inner,\n        employee_id: row.employee_id,\n        department_id: row.department_id,\n        position: row.position,\n        employment_type: row.employment_type,\n        hire_date: row.hire_date,\n        base_salary: row.base_salary,\n        status: row.status,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        user: {\n          id: row.user_id_inner,\n          email: row.email,\n          first_name: row.first_name,\n          last_name: row.last_name,\n          role: row.role,\n          is_active: row.user_is_active\n        },\n        department: row.dept_id ? {\n          id: row.dept_id,\n          name: row.dept_name,\n          description: row.dept_description\n        } : undefined\n      }));\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * List employees by department\n   */\n  async listEmployeesByDepartment(departmentId: string): Promise<EmployeeWithUser[]> {\n    const query = `\n      SELECT \n        e.*,\n        u.id as user_id_inner,\n        u.email,\n        u.first_name,\n        u.last_name,\n        u.role,\n        u.is_active as user_is_active,\n        d.id as dept_id,\n        d.name as dept_name,\n        d.description as dept_description\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.department_id = $1\n      ORDER BY u.last_name, u.first_name\n    `;\n\n    try {\n      const result = await this.pool.query(query, [departmentId]);\n      \n      return result.rows.map(row => ({\n        id: row.id,\n        user_id: row.user_id_inner,\n        employee_id: row.employee_id,\n        department_id: row.department_id,\n        position: row.position,\n        employment_type: row.employment_type,\n        hire_date: row.hire_date,\n        base_salary: row.base_salary,\n        status: row.status,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        user: {\n          id: row.user_id_inner,\n          email: row.email,\n          first_name: row.first_name,\n          last_name: row.last_name,\n          role: row.role,\n          is_active: row.user_is_active\n        },\n        department: row.dept_id ? {\n          id: row.dept_id,\n          name: row.dept_name,\n          description: row.dept_description\n        } : undefined\n      }));\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get employee count by department\n   */\n  async getEmployeeCountByDepartment(departmentId: string): Promise<number> {\n    const query = 'SELECT COUNT(*) FROM employees WHERE department_id = $1 AND status = $2';\n    \n    try {\n      const result = await this.pool.query(query, [departmentId, 'active']);\n      return parseInt(result.rows[0].count);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get total employee count\n   */\n  async getTotalEmployeeCount(): Promise<number> {\n    const query = 'SELECT COUNT(*) FROM employees WHERE status = $1';\n    \n    try {\n      const result = await this.pool.query(query, ['active']);\n      return parseInt(result.rows[0].count);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Find all employees with optional filtering\n   */\n  async findAll(params: { status?: string; department_id?: string; page?: number; limit?: number } = {}): Promise<{ employees: EmployeeWithUser[]; total: number }> {\n    const client = await this.pool.connect();\n    try {\n      const { page = 1, limit = 10, status, department_id } = params;\n      const offset = (page - 1) * limit;\n      \n      let whereClause = '';\n      const conditions: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (status) {\n        conditions.push(`e.status = $${paramIndex++}`);\n        values.push(status);\n      }\n\n      if (department_id) {\n        conditions.push(`e.department_id = $${paramIndex++}`);\n        values.push(department_id);\n      }\n\n      if (conditions.length > 0) {\n        whereClause = `WHERE ${conditions.join(' AND ')}`;\n      }\n\n      // Get total count\n      const countQuery = `\n        SELECT COUNT(*) FROM employees e\n        JOIN users u ON e.user_id = u.id\n        ${whereClause}\n      `;\n      const countResult = await client.query(countQuery, values);\n      const total = parseInt(countResult.rows[0].count);\n\n      // Get employees\n      const query = `\n        SELECT \n          e.*,\n          u.id as user_id,\n          u.email,\n          u.first_name,\n          u.last_name,\n          u.role,\n          u.is_active as user_is_active,\n          d.id as department_id,\n          d.name as department_name,\n          d.description as department_description\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        ${whereClause}\n        ORDER BY e.created_at DESC\n        LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n      `;\n      values.push(limit, offset);\n      \n      const result = await client.query(query, values);\n      \n      const employees: EmployeeWithUser[] = result.rows.map(row => ({\n        id: row.id,\n        user_id: row.user_id,\n        employee_id: row.employee_id,\n        department_id: row.department_id,\n        position: row.position,\n        employment_type: row.employment_type,\n        hire_date: row.hire_date,\n        base_salary: row.base_salary,\n        status: row.status,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        user: {\n          id: row.user_id,\n          email: row.email,\n          first_name: row.first_name,\n          last_name: row.last_name,\n          role: row.role,\n          is_active: row.user_is_active\n        },\n        department: row.department_id ? {\n          id: row.department_id,\n          name: row.department_name,\n          description: row.department_description\n        } : null\n      }));\n      \n      return {\n        employees,\n        total\n      };\n    } catch (error) {\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Check if employee exists\n   */\n  async employeeExists(employeeId: string): Promise<boolean> {\n    const query = 'SELECT 1 FROM employees WHERE employee_id = $1';\n    \n    try {\n      const result = await this.pool.query(query, [employeeId]);\n      return result.rows.length > 0;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async getAverageSalary(): Promise<number> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT COALESCE(AVG(base_salary), 0) as average FROM employees WHERE status = $1';\n      const result = await client.query(query, ['active']);\n      return parseFloat(result.rows[0].average) || 0;\n    } catch (error) {\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n}\n\n// Export singleton instance\nexport const employeeModel = new EmployeeModel(); "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4007266c47b833dde83830c6dbed79c912a649f2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1aplrq2nyd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1aplrq2nyd();
cov_1aplrq2nyd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1aplrq2nyd().s[1]++;
exports.employeeModel = exports.EmployeeModel = void 0;
const database_1 =
/* istanbul ignore next */
(cov_1aplrq2nyd().s[2]++, require("../../config/database"));
class EmployeeModel {
  constructor() {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[0]++;
    cov_1aplrq2nyd().s[3]++;
    this.pool = (0, database_1.getPool)();
  }
  /**
   * Create new employee
   */
  async createEmployee(data) {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[1]++;
    const query =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[4]++, `
      INSERT INTO employees (
        user_id, department_id, position, employment_type, 
        hire_date, base_salary, status
      ) VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING *
    `);
    const values =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[5]++, [data.user_id,
    /* istanbul ignore next */
    (cov_1aplrq2nyd().b[0][0]++, data.department_id) ||
    /* istanbul ignore next */
    (cov_1aplrq2nyd().b[0][1]++, null), data.position, data.employment_type, data.hire_date, data.base_salary,
    /* istanbul ignore next */
    (cov_1aplrq2nyd().b[1][0]++, data.status) ||
    /* istanbul ignore next */
    (cov_1aplrq2nyd().b[1][1]++, 'active')]);
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[6]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[7]++, await this.pool.query(query, values));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[8]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[9]++;
      throw error;
    }
  }
  /**
   * Get employee by ID
   */
  async findById(id) {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[2]++;
    const query =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[10]++, 'SELECT * FROM employees WHERE id = $1');
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[11]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[12]++, await this.pool.query(query, [id]));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[13]++;
      return /* istanbul ignore next */(cov_1aplrq2nyd().b[2][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_1aplrq2nyd().b[2][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[14]++;
      throw error;
    }
  }
  /**
   * Get employee by user ID
   */
  async findByUserId(userId) {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[3]++;
    const query =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[15]++, 'SELECT * FROM employees WHERE user_id = $1');
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[16]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[17]++, await this.pool.query(query, [userId]));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[18]++;
      return /* istanbul ignore next */(cov_1aplrq2nyd().b[3][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_1aplrq2nyd().b[3][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[19]++;
      throw error;
    }
  }
  /**
   * Get employee by employee ID
   */
  async findByEmployeeId(employeeId) {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[4]++;
    const query =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[20]++, 'SELECT * FROM employees WHERE employee_id = $1');
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[21]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[22]++, await this.pool.query(query, [employeeId]));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[23]++;
      return /* istanbul ignore next */(cov_1aplrq2nyd().b[4][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_1aplrq2nyd().b[4][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[24]++;
      throw error;
    }
  }
  /**
   * Get employee with user and department information
   */
  async findByIdWithDetails(id) {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[5]++;
    const query =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[25]++, `
      SELECT 
        e.*,
        u.id as user_id_inner,
        u.email,
        u.first_name,
        u.last_name,
        u.role,
        u.is_active as user_is_active,
        d.id as dept_id,
        d.name as dept_name,
        d.description as dept_description
      FROM employees e
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      WHERE e.id = $1
    `);
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[26]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[27]++, await this.pool.query(query, [id]));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[28]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_1aplrq2nyd().b[5][0]++;
        cov_1aplrq2nyd().s[29]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1aplrq2nyd().b[5][1]++;
      }
      const row =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[30]++, result.rows[0]);
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[31]++;
      return {
        id: row.id,
        user_id: row.user_id_inner,
        employee_id: row.employee_id,
        department_id: row.department_id,
        position: row.position,
        employment_type: row.employment_type,
        hire_date: row.hire_date,
        base_salary: row.base_salary,
        status: row.status,
        created_at: row.created_at,
        updated_at: row.updated_at,
        user: {
          id: row.user_id_inner,
          email: row.email,
          first_name: row.first_name,
          last_name: row.last_name,
          role: row.role,
          is_active: row.user_is_active
        },
        department: row.dept_id ?
        /* istanbul ignore next */
        (cov_1aplrq2nyd().b[6][0]++, {
          id: row.dept_id,
          name: row.dept_name,
          description: row.dept_description
        }) :
        /* istanbul ignore next */
        (cov_1aplrq2nyd().b[6][1]++, undefined)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[32]++;
      throw error;
    }
  }
  /**
   * Update employee
   */
  async updateEmployee(id, data) {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[6]++;
    const fields =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[33]++, []);
    const values =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[34]++, []);
    let paramCount =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[35]++, 1);
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[36]++;
    if (data.department_id !== undefined) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().b[7][0]++;
      cov_1aplrq2nyd().s[37]++;
      fields.push(`department_id = $${paramCount++}`);
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[38]++;
      values.push(data.department_id);
    } else
    /* istanbul ignore next */
    {
      cov_1aplrq2nyd().b[7][1]++;
    }
    cov_1aplrq2nyd().s[39]++;
    if (data.position !== undefined) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().b[8][0]++;
      cov_1aplrq2nyd().s[40]++;
      fields.push(`position = $${paramCount++}`);
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[41]++;
      values.push(data.position);
    } else
    /* istanbul ignore next */
    {
      cov_1aplrq2nyd().b[8][1]++;
    }
    cov_1aplrq2nyd().s[42]++;
    if (data.employment_type !== undefined) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().b[9][0]++;
      cov_1aplrq2nyd().s[43]++;
      fields.push(`employment_type = $${paramCount++}`);
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[44]++;
      values.push(data.employment_type);
    } else
    /* istanbul ignore next */
    {
      cov_1aplrq2nyd().b[9][1]++;
    }
    cov_1aplrq2nyd().s[45]++;
    if (data.hire_date !== undefined) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().b[10][0]++;
      cov_1aplrq2nyd().s[46]++;
      fields.push(`hire_date = $${paramCount++}`);
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[47]++;
      values.push(data.hire_date);
    } else
    /* istanbul ignore next */
    {
      cov_1aplrq2nyd().b[10][1]++;
    }
    cov_1aplrq2nyd().s[48]++;
    if (data.base_salary !== undefined) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().b[11][0]++;
      cov_1aplrq2nyd().s[49]++;
      fields.push(`base_salary = $${paramCount++}`);
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[50]++;
      values.push(data.base_salary);
    } else
    /* istanbul ignore next */
    {
      cov_1aplrq2nyd().b[11][1]++;
    }
    cov_1aplrq2nyd().s[51]++;
    if (data.status !== undefined) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().b[12][0]++;
      cov_1aplrq2nyd().s[52]++;
      fields.push(`status = $${paramCount++}`);
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[53]++;
      values.push(data.status);
    } else
    /* istanbul ignore next */
    {
      cov_1aplrq2nyd().b[12][1]++;
    }
    cov_1aplrq2nyd().s[54]++;
    if (fields.length === 0) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().b[13][0]++;
      cov_1aplrq2nyd().s[55]++;
      return this.findById(id);
    } else
    /* istanbul ignore next */
    {
      cov_1aplrq2nyd().b[13][1]++;
    }
    cov_1aplrq2nyd().s[56]++;
    fields.push(`updated_at = $${paramCount++}`);
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[57]++;
    values.push(new Date());
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[58]++;
    values.push(id);
    const query =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[59]++, `
      UPDATE employees 
      SET ${fields.join(', ')}
      WHERE id = $${paramCount}
      RETURNING *
    `);
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[60]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[61]++, await this.pool.query(query, values));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[62]++;
      return /* istanbul ignore next */(cov_1aplrq2nyd().b[14][0]++, result.rows[0]) ||
      /* istanbul ignore next */
      (cov_1aplrq2nyd().b[14][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[63]++;
      throw error;
    }
  }
  /**
   * Delete employee
   */
  async deleteEmployee(id) {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[7]++;
    const query =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[64]++, 'DELETE FROM employees WHERE id = $1');
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[65]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[66]++, await this.pool.query(query, [id]));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[67]++;
      return result.rowCount ?
      /* istanbul ignore next */
      (cov_1aplrq2nyd().b[15][0]++, result.rowCount > 0) :
      /* istanbul ignore next */
      (cov_1aplrq2nyd().b[15][1]++, false);
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[68]++;
      throw error;
    }
  }
  /**
   * List all employees
   */
  async listAllEmployees() {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[8]++;
    const query =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[69]++, `
      SELECT 
        e.*,
        u.id as user_id_inner,
        u.email,
        u.first_name,
        u.last_name,
        u.role,
        u.is_active as user_is_active,
        d.id as dept_id,
        d.name as dept_name,
        d.description as dept_description
      FROM employees e
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      ORDER BY u.last_name, u.first_name
    `);
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[70]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[71]++, await this.pool.query(query));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[72]++;
      return result.rows.map(row => {
        /* istanbul ignore next */
        cov_1aplrq2nyd().f[9]++;
        cov_1aplrq2nyd().s[73]++;
        return {
          id: row.id,
          user_id: row.user_id_inner,
          employee_id: row.employee_id,
          department_id: row.department_id,
          position: row.position,
          employment_type: row.employment_type,
          hire_date: row.hire_date,
          base_salary: row.base_salary,
          status: row.status,
          created_at: row.created_at,
          updated_at: row.updated_at,
          user: {
            id: row.user_id_inner,
            email: row.email,
            first_name: row.first_name,
            last_name: row.last_name,
            role: row.role,
            is_active: row.user_is_active
          },
          department: row.dept_id ?
          /* istanbul ignore next */
          (cov_1aplrq2nyd().b[16][0]++, {
            id: row.dept_id,
            name: row.dept_name,
            description: row.dept_description
          }) :
          /* istanbul ignore next */
          (cov_1aplrq2nyd().b[16][1]++, undefined)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[74]++;
      throw error;
    }
  }
  /**
   * List employees by department
   */
  async listEmployeesByDepartment(departmentId) {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[10]++;
    const query =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[75]++, `
      SELECT 
        e.*,
        u.id as user_id_inner,
        u.email,
        u.first_name,
        u.last_name,
        u.role,
        u.is_active as user_is_active,
        d.id as dept_id,
        d.name as dept_name,
        d.description as dept_description
      FROM employees e
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      WHERE e.department_id = $1
      ORDER BY u.last_name, u.first_name
    `);
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[76]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[77]++, await this.pool.query(query, [departmentId]));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[78]++;
      return result.rows.map(row => {
        /* istanbul ignore next */
        cov_1aplrq2nyd().f[11]++;
        cov_1aplrq2nyd().s[79]++;
        return {
          id: row.id,
          user_id: row.user_id_inner,
          employee_id: row.employee_id,
          department_id: row.department_id,
          position: row.position,
          employment_type: row.employment_type,
          hire_date: row.hire_date,
          base_salary: row.base_salary,
          status: row.status,
          created_at: row.created_at,
          updated_at: row.updated_at,
          user: {
            id: row.user_id_inner,
            email: row.email,
            first_name: row.first_name,
            last_name: row.last_name,
            role: row.role,
            is_active: row.user_is_active
          },
          department: row.dept_id ?
          /* istanbul ignore next */
          (cov_1aplrq2nyd().b[17][0]++, {
            id: row.dept_id,
            name: row.dept_name,
            description: row.dept_description
          }) :
          /* istanbul ignore next */
          (cov_1aplrq2nyd().b[17][1]++, undefined)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[80]++;
      throw error;
    }
  }
  /**
   * Get employee count by department
   */
  async getEmployeeCountByDepartment(departmentId) {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[12]++;
    const query =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[81]++, 'SELECT COUNT(*) FROM employees WHERE department_id = $1 AND status = $2');
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[82]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[83]++, await this.pool.query(query, [departmentId, 'active']));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[84]++;
      return parseInt(result.rows[0].count);
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[85]++;
      throw error;
    }
  }
  /**
   * Get total employee count
   */
  async getTotalEmployeeCount() {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[13]++;
    const query =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[86]++, 'SELECT COUNT(*) FROM employees WHERE status = $1');
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[87]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[88]++, await this.pool.query(query, ['active']));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[89]++;
      return parseInt(result.rows[0].count);
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[90]++;
      throw error;
    }
  }
  /**
   * Find all employees with optional filtering
   */
  async findAll(params =
  /* istanbul ignore next */
  (cov_1aplrq2nyd().b[18][0]++, {})) {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[14]++;
    const client =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[91]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[92]++;
    try {
      const {
        page =
        /* istanbul ignore next */
        (cov_1aplrq2nyd().b[19][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_1aplrq2nyd().b[20][0]++, 10),
        status,
        department_id
      } =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[93]++, params);
      const offset =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[94]++, (page - 1) * limit);
      let whereClause =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[95]++, '');
      const conditions =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[96]++, []);
      const values =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[97]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[98]++, 1);
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[99]++;
      if (status) {
        /* istanbul ignore next */
        cov_1aplrq2nyd().b[21][0]++;
        cov_1aplrq2nyd().s[100]++;
        conditions.push(`e.status = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_1aplrq2nyd().s[101]++;
        values.push(status);
      } else
      /* istanbul ignore next */
      {
        cov_1aplrq2nyd().b[21][1]++;
      }
      cov_1aplrq2nyd().s[102]++;
      if (department_id) {
        /* istanbul ignore next */
        cov_1aplrq2nyd().b[22][0]++;
        cov_1aplrq2nyd().s[103]++;
        conditions.push(`e.department_id = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_1aplrq2nyd().s[104]++;
        values.push(department_id);
      } else
      /* istanbul ignore next */
      {
        cov_1aplrq2nyd().b[22][1]++;
      }
      cov_1aplrq2nyd().s[105]++;
      if (conditions.length > 0) {
        /* istanbul ignore next */
        cov_1aplrq2nyd().b[23][0]++;
        cov_1aplrq2nyd().s[106]++;
        whereClause = `WHERE ${conditions.join(' AND ')}`;
      } else
      /* istanbul ignore next */
      {
        cov_1aplrq2nyd().b[23][1]++;
      }
      // Get total count
      const countQuery =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[107]++, `
        SELECT COUNT(*) FROM employees e
        JOIN users u ON e.user_id = u.id
        ${whereClause}
      `);
      const countResult =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[108]++, await client.query(countQuery, values));
      const total =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[109]++, parseInt(countResult.rows[0].count));
      // Get employees
      const query =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[110]++, `
        SELECT 
          e.*,
          u.id as user_id,
          u.email,
          u.first_name,
          u.last_name,
          u.role,
          u.is_active as user_is_active,
          d.id as department_id,
          d.name as department_name,
          d.description as department_description
        FROM employees e
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        ${whereClause}
        ORDER BY e.created_at DESC
        LIMIT $${paramIndex++} OFFSET $${paramIndex++}
      `);
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[111]++;
      values.push(limit, offset);
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[112]++, await client.query(query, values));
      const employees =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[113]++, result.rows.map(row => {
        /* istanbul ignore next */
        cov_1aplrq2nyd().f[15]++;
        cov_1aplrq2nyd().s[114]++;
        return {
          id: row.id,
          user_id: row.user_id,
          employee_id: row.employee_id,
          department_id: row.department_id,
          position: row.position,
          employment_type: row.employment_type,
          hire_date: row.hire_date,
          base_salary: row.base_salary,
          status: row.status,
          created_at: row.created_at,
          updated_at: row.updated_at,
          user: {
            id: row.user_id,
            email: row.email,
            first_name: row.first_name,
            last_name: row.last_name,
            role: row.role,
            is_active: row.user_is_active
          },
          department: row.department_id ?
          /* istanbul ignore next */
          (cov_1aplrq2nyd().b[24][0]++, {
            id: row.department_id,
            name: row.department_name,
            description: row.department_description
          }) :
          /* istanbul ignore next */
          (cov_1aplrq2nyd().b[24][1]++, null)
        };
      }));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[115]++;
      return {
        employees,
        total
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[116]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[117]++;
      client.release();
    }
  }
  /**
   * Check if employee exists
   */
  async employeeExists(employeeId) {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[16]++;
    const query =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[118]++, 'SELECT 1 FROM employees WHERE employee_id = $1');
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[119]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[120]++, await this.pool.query(query, [employeeId]));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[121]++;
      return result.rows.length > 0;
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[122]++;
      throw error;
    }
  }
  async getAverageSalary() {
    /* istanbul ignore next */
    cov_1aplrq2nyd().f[17]++;
    const client =
    /* istanbul ignore next */
    (cov_1aplrq2nyd().s[123]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_1aplrq2nyd().s[124]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[125]++, 'SELECT COALESCE(AVG(base_salary), 0) as average FROM employees WHERE status = $1');
      const result =
      /* istanbul ignore next */
      (cov_1aplrq2nyd().s[126]++, await client.query(query, ['active']));
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[127]++;
      return /* istanbul ignore next */(cov_1aplrq2nyd().b[25][0]++, parseFloat(result.rows[0].average)) ||
      /* istanbul ignore next */
      (cov_1aplrq2nyd().b[25][1]++, 0);
    } catch (error) {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[128]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_1aplrq2nyd().s[129]++;
      client.release();
    }
  }
}
/* istanbul ignore next */
cov_1aplrq2nyd().s[130]++;
exports.EmployeeModel = EmployeeModel;
// Export singleton instance
/* istanbul ignore next */
cov_1aplrq2nyd().s[131]++;
exports.employeeModel = new EmployeeModel();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,