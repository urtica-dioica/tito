cbbdda5c278ebfc66f9cfca0a2c3950f
"use strict";
/**
 * Jest Setup File
 *
 * This file runs before each test file and sets up mocks and global configurations.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the Redis service module
jest.mock('../src/services/redis/redisService', () => ({
    RedisService: jest.fn().mockImplementation(() => mockRedisService_1.mockRedisService),
    redisService: mockRedisService_1.mockRedisService
}));
// Mock the database service module
jest.mock('pg', () => ({
    Pool: jest.fn().mockImplementation(() => mockDatabaseService_1.mockDatabaseService),
    Client: jest.fn().mockImplementation(() => mockDatabaseService_1.mockDatabaseService)
}));
// Mock the database config module
jest.mock('../src/config/database', () => ({
    getPool: jest.fn(() => mockDatabaseService_1.mockDatabaseService)
}));
// Mock other external services that might cause issues in tests
jest.mock('../src/services/email/emailService', () => ({
    EmailService: jest.fn().mockImplementation(() => ({
        sendEmail: jest.fn().mockResolvedValue(true),
        sendPasswordResetEmail: jest.fn().mockResolvedValue(true),
        sendWelcomeEmail: jest.fn().mockResolvedValue(true)
    }))
}));
// Mock file system operations
jest.mock('fs/promises', () => ({
    writeFile: jest.fn().mockResolvedValue(undefined),
    readFile: jest.fn().mockResolvedValue('mock file content'),
    unlink: jest.fn().mockResolvedValue(undefined),
    mkdir: jest.fn().mockResolvedValue(undefined),
    access: jest.fn().mockResolvedValue(undefined)
}));
// Mock multer for file uploads
jest.mock('multer', () => ({
    diskStorage: jest.fn(),
    memoryStorage: jest.fn(),
    __esModule: true,
    default: jest.fn(() => ({
        single: jest.fn(),
        array: jest.fn(),
        fields: jest.fn()
    }))
}));
const mockRedisService_1 = require("./utils/mockRedisService");
const mockDatabaseService_1 = require("./utils/mockDatabaseService");
// Global test timeout
jest.setTimeout(30000);
// Global error handler for unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});
// Global error handler for uncaught exceptions
process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQyxDQUFDLENBQUM7QUFoREosK0RBQTREO0FBQzVELHFFQUFrRTtBQWlEbEUsc0JBQXNCO0FBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFdkIsd0RBQXdEO0FBQ3hELE9BQU8sQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUU7SUFDbkQsT0FBTyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZFLENBQUMsQ0FBQyxDQUFDO0FBRUgsK0NBQStDO0FBQy9DLE9BQU8sQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUN4QyxPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzlDLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2tpbS90aXRvL3NlcnZlci90ZXN0cy9qZXN0LnNldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSmVzdCBTZXR1cCBGaWxlXG4gKiBcbiAqIFRoaXMgZmlsZSBydW5zIGJlZm9yZSBlYWNoIHRlc3QgZmlsZSBhbmQgc2V0cyB1cCBtb2NrcyBhbmQgZ2xvYmFsIGNvbmZpZ3VyYXRpb25zLlxuICovXG5cbmltcG9ydCB7IG1vY2tSZWRpc1NlcnZpY2UgfSBmcm9tICcuL3V0aWxzL21vY2tSZWRpc1NlcnZpY2UnO1xuaW1wb3J0IHsgbW9ja0RhdGFiYXNlU2VydmljZSB9IGZyb20gJy4vdXRpbHMvbW9ja0RhdGFiYXNlU2VydmljZSc7XG5cbi8vIE1vY2sgdGhlIFJlZGlzIHNlcnZpY2UgbW9kdWxlXG5qZXN0Lm1vY2soJy4uL3NyYy9zZXJ2aWNlcy9yZWRpcy9yZWRpc1NlcnZpY2UnLCAoKSA9PiAoe1xuICBSZWRpc1NlcnZpY2U6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbW9ja1JlZGlzU2VydmljZSksXG4gIHJlZGlzU2VydmljZTogbW9ja1JlZGlzU2VydmljZVxufSkpO1xuXG4vLyBNb2NrIHRoZSBkYXRhYmFzZSBzZXJ2aWNlIG1vZHVsZVxuamVzdC5tb2NrKCdwZycsICgpID0+ICh7XG4gIFBvb2w6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbW9ja0RhdGFiYXNlU2VydmljZSksXG4gIENsaWVudDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBtb2NrRGF0YWJhc2VTZXJ2aWNlKVxufSkpO1xuXG4vLyBNb2NrIHRoZSBkYXRhYmFzZSBjb25maWcgbW9kdWxlXG5qZXN0Lm1vY2soJy4uL3NyYy9jb25maWcvZGF0YWJhc2UnLCAoKSA9PiAoe1xuICBnZXRQb29sOiBqZXN0LmZuKCgpID0+IG1vY2tEYXRhYmFzZVNlcnZpY2UpXG59KSk7XG5cbi8vIE1vY2sgb3RoZXIgZXh0ZXJuYWwgc2VydmljZXMgdGhhdCBtaWdodCBjYXVzZSBpc3N1ZXMgaW4gdGVzdHNcbmplc3QubW9jaygnLi4vc3JjL3NlcnZpY2VzL2VtYWlsL2VtYWlsU2VydmljZScsICgpID0+ICh7XG4gIEVtYWlsU2VydmljZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgIHNlbmRFbWFpbDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICAgIHNlbmRQYXNzd29yZFJlc2V0RW1haWw6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgICBzZW5kV2VsY29tZUVtYWlsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSlcbiAgfSkpXG59KSk7XG5cbi8vIE1vY2sgZmlsZSBzeXN0ZW0gb3BlcmF0aW9uc1xuamVzdC5tb2NrKCdmcy9wcm9taXNlcycsICgpID0+ICh7XG4gIHdyaXRlRmlsZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXG4gIHJlYWRGaWxlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ21vY2sgZmlsZSBjb250ZW50JyksXG4gIHVubGluazogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXG4gIG1rZGlyOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcbiAgYWNjZXNzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKVxufSkpO1xuXG4vLyBNb2NrIG11bHRlciBmb3IgZmlsZSB1cGxvYWRzXG5qZXN0Lm1vY2soJ211bHRlcicsICgpID0+ICh7XG4gIGRpc2tTdG9yYWdlOiBqZXN0LmZuKCksXG4gIG1lbW9yeVN0b3JhZ2U6IGplc3QuZm4oKSxcbiAgX19lc01vZHVsZTogdHJ1ZSxcbiAgZGVmYXVsdDogamVzdC5mbigoKSA9PiAoe1xuICAgIHNpbmdsZTogamVzdC5mbigpLFxuICAgIGFycmF5OiBqZXN0LmZuKCksXG4gICAgZmllbGRzOiBqZXN0LmZuKClcbiAgfSkpXG59KSk7XG5cbi8vIEdsb2JhbCB0ZXN0IHRpbWVvdXRcbmplc3Quc2V0VGltZW91dCgzMDAwMCk7XG5cbi8vIEdsb2JhbCBlcnJvciBoYW5kbGVyIGZvciB1bmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb25zXG5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCAocmVhc29uLCBwcm9taXNlKSA9PiB7XG4gIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBSZWplY3Rpb24gYXQ6JywgcHJvbWlzZSwgJ3JlYXNvbjonLCByZWFzb24pO1xufSk7XG5cbi8vIEdsb2JhbCBlcnJvciBoYW5kbGVyIGZvciB1bmNhdWdodCBleGNlcHRpb25zXG5wcm9jZXNzLm9uKCd1bmNhdWdodEV4Y2VwdGlvbicsIChlcnJvcikgPT4ge1xuICBjb25zb2xlLmVycm9yKCdVbmNhdWdodCBFeGNlcHRpb246JywgZXJyb3IpO1xufSk7XG4iXSwidmVyc2lvbiI6M30=