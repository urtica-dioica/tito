{"file":"/home/kim/tito/server/tests/integration/payrollAttendanceIntegration.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/integration/payrollAttendanceIntegration.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterEach } from '@jest/globals';\nimport { payrollService } from '../../src/services/payroll/payrollService';\nimport { attendanceService } from '../../src/services/attendance/attendanceService';\nimport { TestHelpers } from '../utils/testHelpers';\nimport { initializeTestConnections } from '../setup';\n\ndescribe('Payroll-Attendance Integration', () => {\n  let testHelpers: TestHelpers;\n  let createdUserIds: string[] = [];\n  let createdEmployeeIds: string[] = [];\n  let createdDepartmentIds: string[] = [];\n\n  beforeAll(async () => {\n    const { testDbPool } = await initializeTestConnections();\n    testHelpers = new TestHelpers(testDbPool);\n  });\n\n  afterEach(async () => {\n    // Clean up created data after each test\n    for (const employeeId of createdEmployeeIds) { \n      await testHelpers.deleteEmployee(employeeId).catch(() => {}); \n    }\n    for (const userId of createdUserIds) { \n      await testHelpers.deleteUser(userId).catch(() => {}); \n    }\n    for (const departmentId of createdDepartmentIds) { \n      await testHelpers.deleteDepartment(departmentId).catch(() => {}); \n    }\n    createdEmployeeIds = [];\n    createdUserIds = [];\n    createdDepartmentIds = [];\n  });\n\n  describe('Employee Lifecycle Integration', () => {\n    it('should handle complete employee workflow from attendance to payroll', async () => {\n      // 1. Create department\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n\n      // 2. Create employee\n      const employee = await testHelpers.createTestEmployee({\n        departmentId: department.id,\n        employmentType: 'regular',\n        baseSalary: 50000\n      });\n      createdEmployeeIds.push(employee.id);\n      createdUserIds.push(employee.userId);\n\n      // 3. Test payroll operations (without creating period)\n\n      // 4. Test attendance operations\n      const clockInData = {\n        employeeId: employee.id,\n        qrCodeHash: 'test-qr-hash',\n        timestamp: new Date('2025-01-15T08:00:00Z'),\n        selfieImagePath: '/uploads/selfies/test-selfie.jpg'\n      };\n\n      const attendanceResult = await attendanceService.clockIn(clockInData);\n      expect(attendanceResult).toHaveProperty('employeeId');\n      expect(attendanceResult.employeeId).toBe(employee.id);\n\n      // 5. Test payroll operations\n      const payrollPeriods = await payrollService.getPayrollPeriods();\n      expect(payrollPeriods).toHaveProperty('periods');\n      expect(Array.isArray(payrollPeriods.periods)).toBe(true);\n\n      const payrollRecords = await payrollService.getPayrollRecords();\n      expect(payrollRecords).toHaveProperty('records');\n      expect(Array.isArray(payrollRecords.records)).toBe(true);\n\n      // 6. Test attendance history\n      const attendanceHistory = await attendanceService.getEmployeeAttendanceHistory(\n        employee.id,\n        new Date('2025-01-01'),\n        new Date('2025-01-31')\n      );\n      expect(attendanceHistory).toHaveProperty('records');\n      expect(attendanceHistory).toHaveProperty('total');\n      expect(Array.isArray(attendanceHistory.records)).toBe(true);\n\n      // 7. Test payroll statistics\n      const payrollStats = await payrollService.getPayrollStats();\n      expect(payrollStats).toHaveProperty('totalEmployees');\n      expect(payrollStats).toHaveProperty('totalPayroll');\n      expect(typeof payrollStats.totalEmployees).toBe('number');\n      expect(typeof payrollStats.totalPayroll).toBe('number');\n    });\n\n    it('should handle multiple employees in same department', async () => {\n      // 1. Create department\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n\n      // 2. Create multiple employees\n      const employees = [];\n      for (let i = 0; i < 3; i++) {\n        const employee = await testHelpers.createTestEmployee({\n          departmentId: department.id,\n          employmentType: 'regular',\n          baseSalary: 40000 + (i * 10000)\n        });\n        employees.push(employee);\n        createdEmployeeIds.push(employee.id);\n        createdUserIds.push(employee.userId);\n      }\n\n      // 3. Test attendance for each employee\n      for (const employee of employees) {\n        const clockInData = {\n          employeeId: employee.id,\n          qrCodeHash: `test-qr-hash-${employee.id}`,\n          timestamp: new Date('2025-01-15T08:00:00Z'),\n          selfieImagePath: `/uploads/selfies/test-selfie-${employee.id}.jpg`\n        };\n\n        const attendanceResult = await attendanceService.clockIn(clockInData);\n        expect(attendanceResult.employeeId).toBe(employee.id);\n      }\n\n      // 4. Test payroll operations with multiple employees\n      const payrollStats = await payrollService.getPayrollStats();\n      expect(payrollStats.totalEmployees).toBeGreaterThanOrEqual(0);\n\n      // 5. Test attendance records for all employees\n      const attendanceRecords = await attendanceService.getAttendanceRecords(\n        new Date('2025-01-01'),\n        new Date('2025-01-31')\n      );\n      expect(attendanceRecords).toHaveProperty('records');\n      expect(attendanceRecords).toHaveProperty('total');\n      expect(Array.isArray(attendanceRecords.records)).toBe(true);\n    });\n  });\n\n  describe('Data Consistency Integration', () => {\n    it('should maintain data consistency between attendance and payroll', async () => {\n      // 1. Create test data\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n\n      const employee = await testHelpers.createTestEmployee({\n        departmentId: department.id,\n        employmentType: 'regular',\n        baseSalary: 60000\n      });\n      createdEmployeeIds.push(employee.id);\n      createdUserIds.push(employee.userId);\n\n      // 2. Record attendance\n      const clockInData = {\n        employeeId: employee.id,\n        qrCodeHash: 'test-qr-hash',\n        timestamp: new Date('2025-01-15T08:00:00Z'),\n        selfieImagePath: '/uploads/selfies/test-selfie.jpg'\n      };\n\n      const attendanceResult = await attendanceService.clockIn(clockInData);\n      expect(attendanceResult.employeeId).toBe(employee.id);\n\n      // 3. Verify attendance data\n      const attendanceSummary = await attendanceService.getAttendanceSummary(\n        employee.id,\n        new Date('2025-01-15')\n      );\n      expect(attendanceSummary.employeeId).toBe(employee.id);\n      expect(attendanceSummary.date).toBeDefined();\n\n      // 4. Verify payroll data consistency\n      const payrollRecords = await payrollService.getPayrollRecords();\n      expect(payrollRecords).toHaveProperty('records');\n      expect(Array.isArray(payrollRecords.records)).toBe(true);\n\n      // 5. Test current attendance status\n      const currentStatus = await attendanceService.getCurrentAttendanceStatus(employee.id);\n      expect(currentStatus).toHaveProperty('isClockedIn');\n      expect(currentStatus).toHaveProperty('todayHours');\n      expect(typeof currentStatus.isClockedIn).toBe('boolean');\n      expect(typeof currentStatus.todayHours).toBe('number');\n    });\n\n    it('should handle error scenarios gracefully', async () => {\n      // Test with non-existent employee\n      const nonExistentEmployeeId = 'non-existent-id';\n\n      // Should handle gracefully\n      await expect(\n        attendanceService.getAttendanceSummary(nonExistentEmployeeId, new Date('2025-01-15'))\n      ).rejects.toThrow();\n\n      await expect(\n        attendanceService.getCurrentAttendanceStatus(nonExistentEmployeeId)\n      ).resolves.toBeDefined();\n\n      // Test with invalid dates\n      const invalidDate = new Date('invalid-date');\n      await expect(\n        attendanceService.getEmployeeAttendanceHistory(\n          nonExistentEmployeeId,\n          invalidDate,\n          invalidDate\n        )\n      ).resolves.toBeDefined();\n    });\n  });\n\n  describe('Service Interaction Patterns', () => {\n    it('should support concurrent operations', async () => {\n      // 1. Create test data\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n\n      const employee = await testHelpers.createTestEmployee({\n        departmentId: department.id,\n        employmentType: 'regular',\n        baseSalary: 55000\n      });\n      createdEmployeeIds.push(employee.id);\n      createdUserIds.push(employee.userId);\n\n      // 2. Perform concurrent operations\n      const promises = [\n        attendanceService.getCurrentAttendanceStatus(employee.id),\n        payrollService.getPayrollStats(),\n        attendanceService.getEmployeeAttendanceStats(\n          employee.id,\n          new Date('2025-01-01'),\n          new Date('2025-01-31')\n        ),\n        payrollService.getDeductionTypes(),\n        payrollService.getBenefitTypes()\n      ];\n\n      const results = await Promise.all(promises);\n\n      // 3. Verify all operations completed successfully\n      expect(results).toHaveLength(5);\n      results.forEach(result => {\n        expect(result).toBeDefined();\n      });\n\n      // 4. Verify specific result types\n      expect(results[0]).toHaveProperty('isClockedIn');\n      expect(results[1]).toHaveProperty('totalEmployees');\n      expect(results[2]).toHaveProperty('totalHours');\n      expect(results[3]).toHaveProperty('records');\n      expect(results[4]).toHaveProperty('records');\n    });\n\n    it('should handle service dependencies correctly', async () => {\n      // 1. Create test data\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n\n      const employee = await testHelpers.createTestEmployee({\n        departmentId: department.id,\n        employmentType: 'regular',\n        baseSalary: 45000\n      });\n      createdEmployeeIds.push(employee.id);\n      createdUserIds.push(employee.userId);\n\n      // 2. Test service dependency chain\n      // Attendance -> Employee -> Department -> Payroll\n      const attendanceStatus = await attendanceService.getCurrentAttendanceStatus(employee.id);\n      expect(attendanceStatus).toBeDefined();\n\n      const attendanceHistory = await attendanceService.getEmployeeAttendanceHistory(\n        employee.id,\n        new Date('2025-01-01'),\n        new Date('2025-01-31')\n      );\n      expect(attendanceHistory).toBeDefined();\n\n      const payrollStats = await payrollService.getPayrollStats();\n      expect(payrollStats).toBeDefined();\n\n      // 3. Verify data relationships\n      expect(attendanceStatus).toHaveProperty('isClockedIn');\n      expect(attendanceHistory).toHaveProperty('records');\n      expect(payrollStats).toHaveProperty('totalEmployees');\n    });\n  });\n});\n"],"version":3}