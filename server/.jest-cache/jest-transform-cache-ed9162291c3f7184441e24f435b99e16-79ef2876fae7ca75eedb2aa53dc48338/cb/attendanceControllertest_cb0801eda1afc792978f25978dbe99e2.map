{"file":"/home/kim/tito/server/tests/unit/controllers/attendanceController.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/unit/controllers/attendanceController.test.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { AttendanceController } from '../../../src/controllers/attendance/attendanceController';\n// import { attendanceService } from '../../../src/services/attendance/attendanceService';\nimport { getPool } from '../../../src/config/database';\nimport { getRequestId } from '../../../src/utils/types/express';\n\n// Mock the dependencies\njest.mock('../../../src/services/attendance/attendanceService');\njest.mock('../../../src/config/database');\njest.mock('../../../src/utils/types/express');\n\n// const mockAttendanceService = attendanceService as jest.Mocked<typeof attendanceService>;\nconst mockGetPool = getPool as jest.MockedFunction<typeof getPool>;\nconst mockGetRequestId = getRequestId as jest.MockedFunction<typeof getRequestId>;\n\ndescribe('AttendanceController', () => {\n  let attendanceController: AttendanceController;\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockPool: any;\n\n  beforeEach(() => {\n    attendanceController = new AttendanceController();\n    jest.clearAllMocks();\n\n    // Mock request object\n    mockRequest = {\n      body: {},\n      params: {},\n      query: {},\n      user: {\n        userId: 'user-123',\n        email: 'test@example.com',\n        role: 'hr',\n        tokenVersion: 1\n      }\n    };\n\n    // Mock response object\n    mockResponse = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis()\n    };\n\n    // Mock database pool\n    mockPool = {\n      query: jest.fn()\n    };\n    mockGetPool.mockReturnValue(mockPool);\n\n    // Mock getRequestId\n    mockGetRequestId.mockReturnValue('test-request-123');\n  });\n\n  describe('getRecentAttendance', () => {\n    it('should get recent attendance records successfully', async () => {\n      // Arrange\n      mockRequest.query = {\n        limit: '5'\n      };\n\n      const mockAttendanceData = [\n        {\n          id: 'session-1',\n          session_type: 'morning_in',\n          clock_in: '08:30:00',\n          clock_out: null,\n          created_at: '2024-01-15T08:30:00Z',\n          selfie_image_url: 'selfie1.jpg',\n          date: '2024-01-15',\n          employee_id: 'emp-123',\n          first_name: 'John',\n          last_name: 'Doe',\n          employee_code: 'EMP001',\n          department_name: 'Engineering'\n        },\n        {\n          id: 'session-2',\n          session_type: 'afternoon_out',\n          clock_in: null,\n          clock_out: '17:30:00',\n          created_at: '2024-01-15T17:30:00Z',\n          selfie_image_url: 'selfie2.jpg',\n          date: '2024-01-15',\n          employee_id: 'emp-124',\n          first_name: 'Jane',\n          last_name: 'Smith',\n          employee_code: 'EMP002',\n          department_name: 'Marketing'\n        }\n      ];\n\n      mockPool.query.mockResolvedValue({\n        rows: mockAttendanceData\n      });\n\n      // Act\n      await attendanceController.getRecentAttendance(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPool.query).toHaveBeenCalledWith(\n        expect.stringContaining('SELECT'),\n        [\"5\"]\n      );\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Recent attendance records retrieved successfully',\n        data: [\n          {\n            id: 'session-1',\n            sessionType: 'morning_in',\n            clockIn: '08:30:00',\n            clockOut: null,\n            createdAt: '2024-01-15T08:30:00Z',\n            selfieImageUrl: 'selfie1.jpg',\n            date: '2024-01-15',\n            employeeId: 'emp-123',\n            employeeName: 'John Doe',\n            employeeCode: 'EMP001',\n            departmentName: 'Engineering'\n          },\n          {\n            id: 'session-2',\n            sessionType: 'afternoon_out',\n            clockIn: null,\n            clockOut: '17:30:00',\n            createdAt: '2024-01-15T17:30:00Z',\n            selfieImageUrl: 'selfie2.jpg',\n            date: '2024-01-15',\n            employeeId: 'emp-124',\n            employeeName: 'Jane Smith',\n            employeeCode: 'EMP002',\n            departmentName: 'Marketing'\n          }\n        ],\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should use default limit when not provided', async () => {\n      // Arrange\n      mockRequest.query = {};\n\n      mockPool.query.mockResolvedValue({\n        rows: []\n      });\n\n      // Act\n      await attendanceController.getRecentAttendance(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPool.query).toHaveBeenCalledWith(\n        expect.stringContaining('SELECT'),\n        [10] // default limit\n      );\n    });\n\n    it('should handle database errors', async () => {\n      // Arrange\n      mockRequest.query = {\n        limit: '5'\n      };\n\n      mockPool.query.mockRejectedValue(new Error('Database connection failed'));\n\n      // Act\n      await attendanceController.getRecentAttendance(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(500);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Failed to get recent attendance records',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('getAttendanceStats', () => {\n    it('should get attendance stats successfully', async () => {\n      // Arrange\n      mockRequest.query = {\n        period: '2024-01',\n        department: 'engineering'\n      };\n\n      const mockStatsData = [\n        {\n          total_employees: 25,\n          present_today: 23,\n          absent_today: 2,\n          late_today: 3,\n          total_hours_today: 184,\n          average_hours_per_employee: 8.0,\n          attendance_rate: 92.0\n        }\n      ];\n\n      mockPool.query.mockResolvedValue({\n        rows: mockStatsData\n      });\n\n      // Act\n      await attendanceController.getAttendanceStats(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPool.query).toHaveBeenCalledWith(\n        expect.stringContaining('SELECT'),\n        expect.any(Array)\n      );\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Attendance statistics retrieved successfully',\n        data: {\n          totalEmployees: 25,\n          presentToday: 23,\n          absentToday: 2,\n          lateToday: 3,\n          totalHoursToday: 184,\n          averageHoursPerEmployee: 8.0,\n          attendanceRate: 92.0\n        },\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should handle missing stats data', async () => {\n      // Arrange\n      mockRequest.query = {\n        period: '2024-01'\n      };\n\n      mockPool.query.mockResolvedValue({\n        rows: []\n      });\n\n      // Act\n      await attendanceController.getAttendanceStats(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Attendance statistics retrieved successfully',\n        data: {\n          totalEmployees: 0,\n          presentToday: 0,\n          absentToday: 0,\n          lateToday: 0,\n          totalHoursToday: 0,\n          averageHoursPerEmployee: 0,\n          attendanceRate: 0\n        },\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('getDailyAttendance', () => {\n    it('should get daily attendance successfully', async () => {\n      // Arrange\n      mockRequest.query = {\n        date: '2024-01-15',\n        department: 'engineering'\n      };\n\n      const mockDailyData = [\n        {\n          id: 'emp-123',\n          employee_id: 'EMP001',\n          first_name: 'John',\n          last_name: 'Doe',\n          department_name: 'Engineering',\n          morning_clock_in: '08:30:00',\n          morning_clock_out: '12:00:00',\n          afternoon_clock_in: '13:00:00',\n          afternoon_clock_out: '17:30:00',\n          total_hours: 8.0,\n          status: 'present'\n        },\n        {\n          id: 'emp-124',\n          employee_id: 'EMP002',\n          first_name: 'Jane',\n          last_name: 'Smith',\n          department_name: 'Engineering',\n          morning_clock_in: '08:45:00',\n          morning_clock_out: '12:00:00',\n          afternoon_clock_in: '13:00:00',\n          afternoon_clock_out: '17:15:00',\n          total_hours: 7.5,\n          status: 'late'\n        }\n      ];\n\n      mockPool.query.mockResolvedValue({\n        rows: mockDailyData\n      });\n\n      // Act\n      await attendanceController.getDailyAttendance(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPool.query).toHaveBeenCalledWith(\n        expect.stringContaining('SELECT'),\n        expect.any(Array)\n      );\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Daily attendance retrieved successfully',\n        data: [\n          {\n            id: 'emp-123',\n            employeeId: 'EMP001',\n            employeeName: 'John Doe',\n            departmentName: 'Engineering',\n            morningClockIn: '08:30:00',\n            morningClockOut: '12:00:00',\n            afternoonClockIn: '13:00:00',\n            afternoonClockOut: '17:30:00',\n            totalHours: 8.0,\n            status: 'present'\n          },\n          {\n            id: 'emp-124',\n            employeeId: 'EMP002',\n            employeeName: 'Jane Smith',\n            departmentName: 'Engineering',\n            morningClockIn: '08:45:00',\n            morningClockOut: '12:00:00',\n            afternoonClockIn: '13:00:00',\n            afternoonClockOut: '17:15:00',\n            totalHours: 7.5,\n            status: 'late'\n          }\n        ],\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should use current date when date not provided', async () => {\n      // Arrange\n      mockRequest.query = {};\n\n      mockPool.query.mockResolvedValue({\n        rows: []\n      });\n\n      // Act\n      await attendanceController.getDailyAttendance(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPool.query).toHaveBeenCalledWith(\n        expect.stringContaining('SELECT'),\n        expect.any(Array)\n      );\n    });\n  });\n\n  describe('getAttendanceRecordSessions', () => {\n    it('should get attendance record sessions successfully', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'record-123'\n      };\n\n      const mockSessionsData = [\n        {\n          id: 'session-1',\n          session_type: 'morning_in',\n          clock_in: '08:30:00',\n          clock_out: '12:00:00',\n          selfie_image_url: 'selfie1.jpg',\n          created_at: '2024-01-15T08:30:00Z'\n        },\n        {\n          id: 'session-2',\n          session_type: 'afternoon_in',\n          clock_in: '13:00:00',\n          clock_out: '17:30:00',\n          selfie_image_url: 'selfie2.jpg',\n          created_at: '2024-01-15T13:00:00Z'\n        }\n      ];\n\n      mockPool.query.mockResolvedValue({\n        rows: mockSessionsData\n      });\n\n      // Act\n      await attendanceController.getAttendanceRecordSessions(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPool.query).toHaveBeenCalledWith(\n        expect.stringContaining('SELECT'),\n        ['record-123']\n      );\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Attendance record sessions retrieved successfully',\n        data: [\n          {\n            id: 'session-1',\n            sessionType: 'morning_in',\n            clockIn: '08:30:00',\n            clockOut: '12:00:00',\n            selfieImageUrl: 'selfie1.jpg',\n            createdAt: '2024-01-15T08:30:00Z'\n          },\n          {\n            id: 'session-2',\n            sessionType: 'afternoon_in',\n            clockIn: '13:00:00',\n            clockOut: '17:30:00',\n            selfieImageUrl: 'selfie2.jpg',\n            createdAt: '2024-01-15T13:00:00Z'\n          }\n        ],\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 404 if record not found', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'nonexistent-record'\n      };\n\n      mockPool.query.mockResolvedValue({\n        rows: []\n      });\n\n      // Act\n      await attendanceController.getAttendanceRecordSessions(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Attendance record not found',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('getAttendanceDetail', () => {\n    it('should get attendance detail successfully', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'record-123'\n      };\n\n      const mockDetailData = [\n        {\n          id: 'record-123',\n          employee_id: 'emp-123',\n          date: '2024-01-15',\n          total_hours: 8.0,\n          status: 'present',\n          first_name: 'John',\n          last_name: 'Doe',\n          employee_id_code: 'EMP001',\n          department_name: 'Engineering',\n          morning_clock_in: '08:30:00',\n          morning_clock_out: '12:00:00',\n          afternoon_clock_in: '13:00:00',\n          afternoon_clock_out: '17:30:00'\n        }\n      ];\n\n      mockPool.query.mockResolvedValue({\n        rows: mockDetailData\n      });\n\n      // Act\n      await attendanceController.getAttendanceDetail(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPool.query).toHaveBeenCalledWith(\n        expect.stringContaining('SELECT'),\n        ['record-123']\n      );\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Attendance detail retrieved successfully',\n        data: {\n          id: 'record-123',\n          employeeId: 'emp-123',\n          date: '2024-01-15',\n          totalHours: 8.0,\n          status: 'present',\n          employeeName: 'John Doe',\n          employeeCode: 'EMP001',\n          departmentName: 'Engineering',\n          morningClockIn: '08:30:00',\n          morningClockOut: '12:00:00',\n          afternoonClockIn: '13:00:00',\n          afternoonClockOut: '17:30:00'\n        },\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 404 if detail not found', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'nonexistent-record'\n      };\n\n      mockPool.query.mockResolvedValue({\n        rows: []\n      });\n\n      // Act\n      await attendanceController.getAttendanceDetail(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Attendance record not found',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n\n  describe('getDetailedHoursCalculation', () => {\n    it('should get detailed hours calculation successfully', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'record-123'\n      };\n\n      const mockCalculationData = [\n        {\n          id: 'record-123',\n          employee_id: 'emp-123',\n          date: '2024-01-15',\n          morning_clock_in: '08:30:00',\n          morning_clock_out: '12:00:00',\n          afternoon_clock_in: '13:00:00',\n          afternoon_clock_out: '17:30:00',\n          morning_hours: 3.5,\n          afternoon_hours: 4.5,\n          total_hours: 8.0,\n          break_hours: 1.0,\n          overtime_hours: 0.0,\n          status: 'present',\n          first_name: 'John',\n          last_name: 'Doe',\n          employee_id_code: 'EMP001'\n        }\n      ];\n\n      mockPool.query.mockResolvedValue({\n        rows: mockCalculationData\n      });\n\n      // Act\n      await attendanceController.getDetailedHoursCalculation(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockPool.query).toHaveBeenCalledWith(\n        expect.stringContaining('SELECT'),\n        ['record-123']\n      );\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Detailed hours calculation retrieved successfully',\n        data: {\n          id: 'record-123',\n          employeeId: 'emp-123',\n          date: '2024-01-15',\n          morningClockIn: '08:30:00',\n          morningClockOut: '12:00:00',\n          afternoonClockIn: '13:00:00',\n          afternoonClockOut: '17:30:00',\n          morningHours: 3.5,\n          afternoonHours: 4.5,\n          totalHours: 8.0,\n          breakHours: 1.0,\n          overtimeHours: 0.0,\n          status: 'present',\n          employeeName: 'John Doe',\n          employeeCode: 'EMP001'\n        },\n        requestId: 'test-request-123'\n      });\n    });\n\n    it('should return 404 if calculation not found', async () => {\n      // Arrange\n      mockRequest.params = {\n        id: 'nonexistent-record'\n      };\n\n      mockPool.query.mockResolvedValue({\n        rows: []\n      });\n\n      // Act\n      await attendanceController.getDetailedHoursCalculation(mockRequest as Request, mockResponse as Response);\n\n      // Assert\n      expect(mockResponse.status).toHaveBeenCalledWith(400);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: false,\n        message: 'Attendance record not found',\n        requestId: 'test-request-123'\n      });\n    });\n  });\n});\n"],"version":3}