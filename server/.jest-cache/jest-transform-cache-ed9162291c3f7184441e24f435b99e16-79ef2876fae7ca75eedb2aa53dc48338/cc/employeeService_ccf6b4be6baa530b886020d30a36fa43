dec67b29926d588ef28dc51d953a1b38
"use strict";

/* istanbul ignore next */
function cov_7esvhu1wu() {
  var path = "/home/kim/tito/server/src/services/employee/employeeService.ts";
  var hash = "cac9651e168558c2ad3d561ce88ad509486a81ac";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/employee/employeeService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 59
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "6": {
        start: {
          line: 14,
          column: 26
        },
        end: {
          line: 14,
          column: 27
        }
      },
      "7": {
        start: {
          line: 15,
          column: 28
        },
        end: {
          line: 15,
          column: 47
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "9": {
        start: {
          line: 17,
          column: 30
        },
        end: {
          line: 17,
          column: 50
        }
      },
      "10": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 21,
          column: 13
        }
      },
      "11": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 30
        }
      },
      "12": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 59
        }
      },
      "13": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 27
        }
      },
      "14": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 87
        }
      },
      "15": {
        start: {
          line: 31,
          column: 22
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "16": {
        start: {
          line: 36,
          column: 23
        },
        end: {
          line: 36,
          column: 77
        }
      },
      "17": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 94
        }
      },
      "18": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 65
        }
      },
      "19": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "20": {
        start: {
          line: 46,
          column: 33
        },
        end: {
          line: 46,
          column: 71
        }
      },
      "21": {
        start: {
          line: 48,
          column: 32
        },
        end: {
          line: 48,
          column: 79
        }
      },
      "22": {
        start: {
          line: 50,
          column: 33
        },
        end: {
          line: 50,
          column: 81
        }
      },
      "23": {
        start: {
          line: 52,
          column: 33
        },
        end: {
          line: 52,
          column: 71
        }
      },
      "24": {
        start: {
          line: 54,
          column: 35
        },
        end: {
          line: 54,
          column: 75
        }
      },
      "25": {
        start: {
          line: 56,
          column: 36
        },
        end: {
          line: 56,
          column: 82
        }
      },
      "26": {
        start: {
          line: 58,
          column: 35
        },
        end: {
          line: 58,
          column: 75
        }
      },
      "27": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 69,
          column: 14
        }
      },
      "28": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 95
        }
      },
      "29": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 24
        }
      },
      "30": {
        start: {
          line: 80,
          column: 22
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "31": {
        start: {
          line: 93,
          column: 23
        },
        end: {
          line: 93,
          column: 81
        }
      },
      "32": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "33": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 50
        }
      },
      "34": {
        start: {
          line: 97,
          column: 20
        },
        end: {
          line: 97,
          column: 34
        }
      },
      "35": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 105,
          column: 10
        }
      },
      "36": {
        start: {
          line: 111,
          column: 22
        },
        end: {
          line: 111,
          column: 60
        }
      },
      "37": {
        start: {
          line: 113,
          column: 28
        },
        end: {
          line: 119,
          column: 5
        }
      },
      "38": {
        start: {
          line: 120,
          column: 29
        },
        end: {
          line: 120,
          column: 100
        }
      },
      "39": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "40": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 133,
          column: 14
        }
      },
      "41": {
        start: {
          line: 135,
          column: 23
        },
        end: {
          line: 135,
          column: 43
        }
      },
      "42": {
        start: {
          line: 137,
          column: 30
        },
        end: {
          line: 148,
          column: 5
        }
      },
      "43": {
        start: {
          line: 149,
          column: 31
        },
        end: {
          line: 149,
          column: 104
        }
      },
      "44": {
        start: {
          line: 151,
          column: 25
        },
        end: {
          line: 151,
          column: 26
        }
      },
      "45": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "46": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 67
        }
      },
      "47": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "48": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 49
        }
      },
      "49": {
        start: {
          line: 158,
          column: 17
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "50": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 51
        }
      },
      "51": {
        start: {
          line: 161,
          column: 17
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "52": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 51
        }
      },
      "53": {
        start: {
          line: 164,
          column: 17
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "54": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 53
        }
      },
      "55": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "56": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 47
        }
      },
      "57": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 173,
          column: 13
        }
      },
      "58": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 48
        }
      },
      "59": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 186,
          column: 10
        }
      },
      "60": {
        start: {
          line: 192,
          column: 20
        },
        end: {
          line: 192,
          column: 30
        }
      },
      "61": {
        start: {
          line: 193,
          column: 29
        },
        end: {
          line: 193,
          column: 75
        }
      },
      "62": {
        start: {
          line: 194,
          column: 27
        },
        end: {
          line: 194,
          column: 77
        }
      },
      "63": {
        start: {
          line: 195,
          column: 22
        },
        end: {
          line: 204,
          column: 5
        }
      },
      "64": {
        start: {
          line: 205,
          column: 23
        },
        end: {
          line: 205,
          column: 107
        }
      },
      "65": {
        start: {
          line: 206,
          column: 20
        },
        end: {
          line: 206,
          column: 34
        }
      },
      "66": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 211,
          column: 10
        }
      },
      "67": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "68": {
        start: {
          line: 219,
          column: 26
        },
        end: {
          line: 225,
          column: 7
        }
      },
      "69": {
        start: {
          line: 226,
          column: 27
        },
        end: {
          line: 226,
          column: 85
        }
      },
      "70": {
        start: {
          line: 227,
          column: 28
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "71": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 248,
          column: 15
        }
      },
      "72": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 247,
          column: 17
        }
      },
      "73": {
        start: {
          line: 236,
          column: 24
        },
        end: {
          line: 236,
          column: 67
        }
      },
      "74": {
        start: {
          line: 237,
          column: 24
        },
        end: {
          line: 237,
          column: 30
        }
      },
      "75": {
        start: {
          line: 239,
          column: 24
        },
        end: {
          line: 239,
          column: 63
        }
      },
      "76": {
        start: {
          line: 240,
          column: 24
        },
        end: {
          line: 240,
          column: 30
        }
      },
      "77": {
        start: {
          line: 242,
          column: 24
        },
        end: {
          line: 242,
          column: 64
        }
      },
      "78": {
        start: {
          line: 243,
          column: 24
        },
        end: {
          line: 243,
          column: 30
        }
      },
      "79": {
        start: {
          line: 245,
          column: 24
        },
        end: {
          line: 245,
          column: 68
        }
      },
      "80": {
        start: {
          line: 246,
          column: 24
        },
        end: {
          line: 246,
          column: 30
        }
      },
      "81": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 27
        }
      },
      "82": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 109
        }
      },
      "83": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 258,
          column: 14
        }
      },
      "84": {
        start: {
          line: 266,
          column: 32
        },
        end: {
          line: 278,
          column: 5
        }
      },
      "85": {
        start: {
          line: 279,
          column: 33
        },
        end: {
          line: 279,
          column: 101
        }
      },
      "86": {
        start: {
          line: 280,
          column: 27
        },
        end: {
          line: 288,
          column: 11
        }
      },
      "87": {
        start: {
          line: 280,
          column: 61
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "88": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 26
        }
      },
      "89": {
        start: {
          line: 295,
          column: 22
        },
        end: {
          line: 300,
          column: 5
        }
      },
      "90": {
        start: {
          line: 301,
          column: 23
        },
        end: {
          line: 301,
          column: 81
        }
      },
      "91": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 302,
          column: 51
        }
      },
      "92": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 316,
          column: 10
        }
      },
      "93": {
        start: {
          line: 322,
          column: 22
        },
        end: {
          line: 341,
          column: 5
        }
      },
      "94": {
        start: {
          line: 342,
          column: 23
        },
        end: {
          line: 342,
          column: 81
        }
      },
      "95": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "96": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 50
        }
      },
      "97": {
        start: {
          line: 346,
          column: 20
        },
        end: {
          line: 346,
          column: 34
        }
      },
      "98": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 361,
          column: 10
        }
      },
      "99": {
        start: {
          line: 367,
          column: 23
        },
        end: {
          line: 367,
          column: 64
        }
      },
      "100": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 415,
          column: 9
        }
      },
      "101": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 40
        }
      },
      "102": {
        start: {
          line: 371,
          column: 37
        },
        end: {
          line: 371,
          column: 39
        }
      },
      "103": {
        start: {
          line: 372,
          column: 37
        },
        end: {
          line: 372,
          column: 39
        }
      },
      "104": {
        start: {
          line: 373,
          column: 29
        },
        end: {
          line: 373,
          column: 30
        }
      },
      "105": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 377,
          column: 13
        }
      },
      "106": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 71
        }
      },
      "107": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 376,
          column: 54
        }
      },
      "108": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 381,
          column: 13
        }
      },
      "109": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 379,
          column: 70
        }
      },
      "110": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 380,
          column: 53
        }
      },
      "111": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 385,
          column: 13
        }
      },
      "112": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 383,
          column: 66
        }
      },
      "113": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 384,
          column: 50
        }
      },
      "114": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 389,
          column: 13
        }
      },
      "115": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 387,
          column: 66
        }
      },
      "116": {
        start: {
          line: 388,
          column: 16
        },
        end: {
          line: 388,
          column: 50
        }
      },
      "117": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 393,
          column: 13
        }
      },
      "118": {
        start: {
          line: 391,
          column: 16
        },
        end: {
          line: 391,
          column: 68
        }
      },
      "119": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 392,
          column: 52
        }
      },
      "120": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 404,
          column: 13
        }
      },
      "121": {
        start: {
          line: 395,
          column: 16
        },
        end: {
          line: 395,
          column: 72
        }
      },
      "122": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 396,
          column: 50
        }
      },
      "123": {
        start: {
          line: 397,
          column: 40
        },
        end: {
          line: 402,
          column: 9
        }
      },
      "124": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 403,
          column: 70
        }
      },
      "125": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 41
        }
      },
      "126": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 61
        }
      },
      "127": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 43
        }
      },
      "128": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 24
        }
      },
      "129": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 29
        }
      },
      "130": {
        start: {
          line: 421,
          column: 22
        },
        end: {
          line: 436,
          column: 5
        }
      },
      "131": {
        start: {
          line: 438,
          column: 23
        },
        end: {
          line: 438,
          column: 73
        }
      },
      "132": {
        start: {
          line: 439,
          column: 23
        },
        end: {
          line: 439,
          column: 75
        }
      },
      "133": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 440,
          column: 27
        }
      },
      "134": {
        start: {
          line: 446,
          column: 22
        },
        end: {
          line: 459,
          column: 5
        }
      },
      "135": {
        start: {
          line: 461,
          column: 23
        },
        end: {
          line: 461,
          column: 73
        }
      },
      "136": {
        start: {
          line: 462,
          column: 23
        },
        end: {
          line: 462,
          column: 75
        }
      },
      "137": {
        start: {
          line: 463,
          column: 20
        },
        end: {
          line: 463,
          column: 34
        }
      },
      "138": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 472,
          column: 10
        }
      },
      "139": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 614,
          column: 9
        }
      },
      "140": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 88
        }
      },
      "141": {
        start: {
          line: 481,
          column: 28
        },
        end: {
          line: 481,
          column: 87
        }
      },
      "142": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 119
        }
      },
      "143": {
        start: {
          line: 482,
          column: 110
        },
        end: {
          line: 482,
          column: 114
        }
      },
      "144": {
        start: {
          line: 483,
          column: 34
        },
        end: {
          line: 483,
          column: 71
        }
      },
      "145": {
        start: {
          line: 483,
          column: 52
        },
        end: {
          line: 483,
          column: 70
        }
      },
      "146": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 487,
          column: 13
        }
      },
      "147": {
        start: {
          line: 485,
          column: 16
        },
        end: {
          line: 485,
          column: 125
        }
      },
      "148": {
        start: {
          line: 485,
          column: 116
        },
        end: {
          line: 485,
          column: 120
        }
      },
      "149": {
        start: {
          line: 486,
          column: 16
        },
        end: {
          line: 486,
          column: 53
        }
      },
      "150": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 489,
          column: 94
        }
      },
      "151": {
        start: {
          line: 490,
          column: 32
        },
        end: {
          line: 490,
          column: 49
        }
      },
      "152": {
        start: {
          line: 491,
          column: 24
        },
        end: {
          line: 491,
          column: 41
        }
      },
      "153": {
        start: {
          line: 492,
          column: 28
        },
        end: {
          line: 492,
          column: 30
        }
      },
      "154": {
        start: {
          line: 493,
          column: 12
        },
        end: {
          line: 493,
          column: 55
        }
      },
      "155": {
        start: {
          line: 494,
          column: 12
        },
        end: {
          line: 609,
          column: 15
        }
      },
      "156": {
        start: {
          line: 495,
          column: 16
        },
        end: {
          line: 499,
          column: 19
        }
      },
      "157": {
        start: {
          line: 496,
          column: 38
        },
        end: {
          line: 496,
          column: 60
        }
      },
      "158": {
        start: {
          line: 497,
          column: 20
        },
        end: {
          line: 497,
          column: 104
        }
      },
      "159": {
        start: {
          line: 498,
          column: 20
        },
        end: {
          line: 498,
          column: 39
        }
      },
      "160": {
        start: {
          line: 500,
          column: 16
        },
        end: {
          line: 503,
          column: 19
        }
      },
      "161": {
        start: {
          line: 501,
          column: 20
        },
        end: {
          line: 501,
          column: 113
        }
      },
      "162": {
        start: {
          line: 502,
          column: 20
        },
        end: {
          line: 502,
          column: 34
        }
      },
      "163": {
        start: {
          line: 504,
          column: 16
        },
        end: {
          line: 608,
          column: 17
        }
      },
      "164": {
        start: {
          line: 506,
          column: 20
        },
        end: {
          line: 507,
          column: 67
        }
      },
      "165": {
        start: {
          line: 509,
          column: 20
        },
        end: {
          line: 510,
          column: 49
        }
      },
      "166": {
        start: {
          line: 512,
          column: 20
        },
        end: {
          line: 513,
          column: 82
        }
      },
      "167": {
        start: {
          line: 515,
          column: 20
        },
        end: {
          line: 516,
          column: 63
        }
      },
      "168": {
        start: {
          line: 517,
          column: 20
        },
        end: {
          line: 521,
          column: 110
        }
      },
      "169": {
        start: {
          line: 523,
          column: 20
        },
        end: {
          line: 524,
          column: 52
        }
      },
      "170": {
        start: {
          line: 525,
          column: 20
        },
        end: {
          line: 527,
          column: 118
        }
      },
      "171": {
        start: {
          line: 529,
          column: 43
        },
        end: {
          line: 529,
          column: 84
        }
      },
      "172": {
        start: {
          line: 530,
          column: 35
        },
        end: {
          line: 530,
          column: 36
        }
      },
      "173": {
        start: {
          line: 531,
          column: 20
        },
        end: {
          line: 543,
          column: 21
        }
      },
      "174": {
        start: {
          line: 532,
          column: 42
        },
        end: {
          line: 532,
          column: 81
        }
      },
      "175": {
        start: {
          line: 533,
          column: 40
        },
        end: {
          line: 533,
          column: 77
        }
      },
      "176": {
        start: {
          line: 534,
          column: 52
        },
        end: {
          line: 534,
          column: 97
        }
      },
      "177": {
        start: {
          line: 535,
          column: 46
        },
        end: {
          line: 535,
          column: 69
        }
      },
      "178": {
        start: {
          line: 536,
          column: 43
        },
        end: {
          line: 536,
          column: 80
        }
      },
      "179": {
        start: {
          line: 538,
          column: 24
        },
        end: {
          line: 538,
          column: 105
        }
      },
      "180": {
        start: {
          line: 539,
          column: 24
        },
        end: {
          line: 542,
          column: 25
        }
      },
      "181": {
        start: {
          line: 540,
          column: 28
        },
        end: {
          line: 541,
          column: 95
        }
      },
      "182": {
        start: {
          line: 544,
          column: 20
        },
        end: {
          line: 547,
          column: 114
        }
      },
      "183": {
        start: {
          line: 549,
          column: 35
        },
        end: {
          line: 549,
          column: 38
        }
      },
      "184": {
        start: {
          line: 550,
          column: 20
        },
        end: {
          line: 551,
          column: 57
        }
      },
      "185": {
        start: {
          line: 552,
          column: 20
        },
        end: {
          line: 552,
          column: 35
        }
      },
      "186": {
        start: {
          line: 553,
          column: 20
        },
        end: {
          line: 575,
          column: 21
        }
      },
      "187": {
        start: {
          line: 555,
          column: 24
        },
        end: {
          line: 560,
          column: 27
        }
      },
      "188": {
        start: {
          line: 556,
          column: 28
        },
        end: {
          line: 558,
          column: 114
        }
      },
      "189": {
        start: {
          line: 559,
          column: 28
        },
        end: {
          line: 559,
          column: 43
        }
      },
      "190": {
        start: {
          line: 562,
          column: 24
        },
        end: {
          line: 564,
          column: 123
        }
      },
      "191": {
        start: {
          line: 566,
          column: 25
        },
        end: {
          line: 575,
          column: 21
        }
      },
      "192": {
        start: {
          line: 567,
          column: 24
        },
        end: {
          line: 569,
          column: 123
        }
      },
      "193": {
        start: {
          line: 572,
          column: 24
        },
        end: {
          line: 574,
          column: 78
        }
      },
      "194": {
        start: {
          line: 577,
          column: 20
        },
        end: {
          line: 577,
          column: 35
        }
      },
      "195": {
        start: {
          line: 578,
          column: 20
        },
        end: {
          line: 579,
          column: 59
        }
      },
      "196": {
        start: {
          line: 580,
          column: 20
        },
        end: {
          line: 580,
          column: 35
        }
      },
      "197": {
        start: {
          line: 581,
          column: 20
        },
        end: {
          line: 598,
          column: 21
        }
      },
      "198": {
        start: {
          line: 583,
          column: 24
        },
        end: {
          line: 588,
          column: 27
        }
      },
      "199": {
        start: {
          line: 584,
          column: 28
        },
        end: {
          line: 586,
          column: 116
        }
      },
      "200": {
        start: {
          line: 587,
          column: 28
        },
        end: {
          line: 587,
          column: 43
        }
      },
      "201": {
        start: {
          line: 590,
          column: 24
        },
        end: {
          line: 592,
          column: 132
        }
      },
      "202": {
        start: {
          line: 595,
          column: 24
        },
        end: {
          line: 597,
          column: 78
        }
      },
      "203": {
        start: {
          line: 600,
          column: 20
        },
        end: {
          line: 600,
          column: 35
        }
      },
      "204": {
        start: {
          line: 601,
          column: 20
        },
        end: {
          line: 602,
          column: 113
        }
      },
      "205": {
        start: {
          line: 603,
          column: 20
        },
        end: {
          line: 603,
          column: 30
        }
      },
      "206": {
        start: {
          line: 606,
          column: 20
        },
        end: {
          line: 606,
          column: 199
        }
      },
      "207": {
        start: {
          line: 607,
          column: 20
        },
        end: {
          line: 607,
          column: 34
        }
      },
      "208": {
        start: {
          line: 612,
          column: 12
        },
        end: {
          line: 612,
          column: 75
        }
      },
      "209": {
        start: {
          line: 613,
          column: 12
        },
        end: {
          line: 613,
          column: 24
        }
      },
      "210": {
        start: {
          line: 620,
          column: 8
        },
        end: {
          line: 693,
          column: 9
        }
      },
      "211": {
        start: {
          line: 621,
          column: 12
        },
        end: {
          line: 621,
          column: 90
        }
      },
      "212": {
        start: {
          line: 623,
          column: 28
        },
        end: {
          line: 623,
          column: 87
        }
      },
      "213": {
        start: {
          line: 624,
          column: 12
        },
        end: {
          line: 624,
          column: 119
        }
      },
      "214": {
        start: {
          line: 624,
          column: 110
        },
        end: {
          line: 624,
          column: 114
        }
      },
      "215": {
        start: {
          line: 625,
          column: 34
        },
        end: {
          line: 625,
          column: 71
        }
      },
      "216": {
        start: {
          line: 625,
          column: 52
        },
        end: {
          line: 625,
          column: 70
        }
      },
      "217": {
        start: {
          line: 626,
          column: 12
        },
        end: {
          line: 629,
          column: 13
        }
      },
      "218": {
        start: {
          line: 627,
          column: 16
        },
        end: {
          line: 627,
          column: 125
        }
      },
      "219": {
        start: {
          line: 627,
          column: 116
        },
        end: {
          line: 627,
          column: 120
        }
      },
      "220": {
        start: {
          line: 628,
          column: 16
        },
        end: {
          line: 628,
          column: 53
        }
      },
      "221": {
        start: {
          line: 631,
          column: 12
        },
        end: {
          line: 631,
          column: 96
        }
      },
      "222": {
        start: {
          line: 632,
          column: 25
        },
        end: {
          line: 632,
          column: 40
        }
      },
      "223": {
        start: {
          line: 634,
          column: 29
        },
        end: {
          line: 634,
          column: 50
        }
      },
      "224": {
        start: {
          line: 636,
          column: 35
        },
        end: {
          line: 636,
          column: 76
        }
      },
      "225": {
        start: {
          line: 637,
          column: 27
        },
        end: {
          line: 637,
          column: 28
        }
      },
      "226": {
        start: {
          line: 638,
          column: 12
        },
        end: {
          line: 646,
          column: 13
        }
      },
      "227": {
        start: {
          line: 639,
          column: 34
        },
        end: {
          line: 639,
          column: 73
        }
      },
      "228": {
        start: {
          line: 640,
          column: 32
        },
        end: {
          line: 640,
          column: 69
        }
      },
      "229": {
        start: {
          line: 641,
          column: 44
        },
        end: {
          line: 641,
          column: 89
        }
      },
      "230": {
        start: {
          line: 642,
          column: 38
        },
        end: {
          line: 642,
          column: 61
        }
      },
      "231": {
        start: {
          line: 643,
          column: 35
        },
        end: {
          line: 643,
          column: 72
        }
      },
      "232": {
        start: {
          line: 645,
          column: 16
        },
        end: {
          line: 645,
          column: 97
        }
      },
      "233": {
        start: {
          line: 648,
          column: 33
        },
        end: {
          line: 666,
          column: 13
        }
      },
      "234": {
        start: {
          line: 668,
          column: 12
        },
        end: {
          line: 673,
          column: 13
        }
      },
      "235": {
        start: {
          line: 669,
          column: 16
        },
        end: {
          line: 671,
          column: 19
        }
      },
      "236": {
        start: {
          line: 670,
          column: 20
        },
        end: {
          line: 670,
          column: 76
        }
      },
      "237": {
        start: {
          line: 672,
          column: 16
        },
        end: {
          line: 672,
          column: 44
        }
      },
      "238": {
        start: {
          line: 675,
          column: 12
        },
        end: {
          line: 675,
          column: 60
        }
      },
      "239": {
        start: {
          line: 676,
          column: 12
        },
        end: {
          line: 676,
          column: 60
        }
      },
      "240": {
        start: {
          line: 678,
          column: 12
        },
        end: {
          line: 682,
          column: 13
        }
      },
      "241": {
        start: {
          line: 679,
          column: 16
        },
        end: {
          line: 681,
          column: 19
        }
      },
      "242": {
        start: {
          line: 680,
          column: 20
        },
        end: {
          line: 680,
          column: 80
        }
      },
      "243": {
        start: {
          line: 683,
          column: 30
        },
        end: {
          line: 683,
          column: 67
        }
      },
      "244": {
        start: {
          line: 684,
          column: 12
        },
        end: {
          line: 684,
          column: 73
        }
      },
      "245": {
        start: {
          line: 686,
          column: 32
        },
        end: {
          line: 686,
          column: 90
        }
      },
      "246": {
        start: {
          line: 687,
          column: 12
        },
        end: {
          line: 687,
          column: 100
        }
      },
      "247": {
        start: {
          line: 688,
          column: 12
        },
        end: {
          line: 688,
          column: 31
        }
      },
      "248": {
        start: {
          line: 691,
          column: 12
        },
        end: {
          line: 691,
          column: 77
        }
      },
      "249": {
        start: {
          line: 692,
          column: 12
        },
        end: {
          line: 692,
          column: 24
        }
      },
      "250": {
        start: {
          line: 699,
          column: 57
        },
        end: {
          line: 699,
          column: 63
        }
      },
      "251": {
        start: {
          line: 701,
          column: 25
        },
        end: {
          line: 726,
          column: 5
        }
      },
      "252": {
        start: {
          line: 727,
          column: 8
        },
        end: {
          line: 729,
          column: 9
        }
      },
      "253": {
        start: {
          line: 728,
          column: 12
        },
        end: {
          line: 728,
          column: 39
        }
      },
      "254": {
        start: {
          line: 730,
          column: 8
        },
        end: {
          line: 732,
          column: 9
        }
      },
      "255": {
        start: {
          line: 731,
          column: 12
        },
        end: {
          line: 731,
          column: 47
        }
      },
      "256": {
        start: {
          line: 733,
          column: 8
        },
        end: {
          line: 733,
          column: 52
        }
      },
      "257": {
        start: {
          line: 735,
          column: 34
        },
        end: {
          line: 754,
          column: 5
        }
      },
      "258": {
        start: {
          line: 755,
          column: 8
        },
        end: {
          line: 757,
          column: 9
        }
      },
      "259": {
        start: {
          line: 756,
          column: 12
        },
        end: {
          line: 756,
          column: 48
        }
      },
      "260": {
        start: {
          line: 758,
          column: 8
        },
        end: {
          line: 760,
          column: 9
        }
      },
      "261": {
        start: {
          line: 759,
          column: 12
        },
        end: {
          line: 759,
          column: 58
        }
      },
      "262": {
        start: {
          line: 761,
          column: 8
        },
        end: {
          line: 761,
          column: 63
        }
      },
      "263": {
        start: {
          line: 763,
          column: 28
        },
        end: {
          line: 782,
          column: 5
        }
      },
      "264": {
        start: {
          line: 783,
          column: 8
        },
        end: {
          line: 785,
          column: 9
        }
      },
      "265": {
        start: {
          line: 784,
          column: 12
        },
        end: {
          line: 784,
          column: 42
        }
      },
      "266": {
        start: {
          line: 786,
          column: 8
        },
        end: {
          line: 788,
          column: 9
        }
      },
      "267": {
        start: {
          line: 787,
          column: 12
        },
        end: {
          line: 787,
          column: 51
        }
      },
      "268": {
        start: {
          line: 789,
          column: 8
        },
        end: {
          line: 789,
          column: 56
        }
      },
      "269": {
        start: {
          line: 791,
          column: 29
        },
        end: {
          line: 791,
          column: 41
        }
      },
      "270": {
        start: {
          line: 792,
          column: 8
        },
        end: {
          line: 794,
          column: 9
        }
      },
      "271": {
        start: {
          line: 793,
          column: 12
        },
        end: {
          line: 793,
          column: 38
        }
      },
      "272": {
        start: {
          line: 795,
          column: 68
        },
        end: {
          line: 799,
          column: 10
        }
      },
      "273": {
        start: {
          line: 801,
          column: 28
        },
        end: {
          line: 805,
          column: 95
        }
      },
      "274": {
        start: {
          line: 805,
          column: 25
        },
        end: {
          line: 805,
          column: 94
        }
      },
      "275": {
        start: {
          line: 807,
          column: 27
        },
        end: {
          line: 807,
          column: 33
        }
      },
      "276": {
        start: {
          line: 808,
          column: 25
        },
        end: {
          line: 808,
          column: 39
        }
      },
      "277": {
        start: {
          line: 809,
          column: 23
        },
        end: {
          line: 809,
          column: 62
        }
      },
      "278": {
        start: {
          line: 811,
          column: 8
        },
        end: {
          line: 811,
          column: 65
        }
      },
      "279": {
        start: {
          line: 812,
          column: 8
        },
        end: {
          line: 812,
          column: 64
        }
      },
      "280": {
        start: {
          line: 812,
          column: 57
        },
        end: {
          line: 812,
          column: 61
        }
      },
      "281": {
        start: {
          line: 813,
          column: 8
        },
        end: {
          line: 813,
          column: 58
        }
      },
      "282": {
        start: {
          line: 814,
          column: 8
        },
        end: {
          line: 814,
          column: 60
        }
      },
      "283": {
        start: {
          line: 814,
          column: 53
        },
        end: {
          line: 814,
          column: 57
        }
      },
      "284": {
        start: {
          line: 815,
          column: 8
        },
        end: {
          line: 815,
          column: 22
        }
      },
      "285": {
        start: {
          line: 821,
          column: 22
        },
        end: {
          line: 835,
          column: 5
        }
      },
      "286": {
        start: {
          line: 836,
          column: 23
        },
        end: {
          line: 836,
          column: 81
        }
      },
      "287": {
        start: {
          line: 837,
          column: 20
        },
        end: {
          line: 837,
          column: 34
        }
      },
      "288": {
        start: {
          line: 838,
          column: 8
        },
        end: {
          line: 843,
          column: 10
        }
      },
      "289": {
        start: {
          line: 849,
          column: 54
        },
        end: {
          line: 849,
          column: 60
        }
      },
      "290": {
        start: {
          line: 850,
          column: 23
        },
        end: {
          line: 850,
          column: 41
        }
      },
      "291": {
        start: {
          line: 851,
          column: 26
        },
        end: {
          line: 851,
          column: 53
        }
      },
      "292": {
        start: {
          line: 852,
          column: 28
        },
        end: {
          line: 852,
          column: 40
        }
      },
      "293": {
        start: {
          line: 853,
          column: 25
        },
        end: {
          line: 853,
          column: 26
        }
      },
      "294": {
        start: {
          line: 854,
          column: 8
        },
        end: {
          line: 857,
          column: 9
        }
      },
      "295": {
        start: {
          line: 855,
          column: 12
        },
        end: {
          line: 855,
          column: 86
        }
      },
      "296": {
        start: {
          line: 856,
          column: 12
        },
        end: {
          line: 856,
          column: 35
        }
      },
      "297": {
        start: {
          line: 858,
          column: 8
        },
        end: {
          line: 861,
          column: 9
        }
      },
      "298": {
        start: {
          line: 859,
          column: 12
        },
        end: {
          line: 859,
          column: 87
        }
      },
      "299": {
        start: {
          line: 860,
          column: 12
        },
        end: {
          line: 860,
          column: 36
        }
      },
      "300": {
        start: {
          line: 862,
          column: 22
        },
        end: {
          line: 895,
          column: 5
        }
      },
      "301": {
        start: {
          line: 896,
          column: 8
        },
        end: {
          line: 896,
          column: 40
        }
      },
      "302": {
        start: {
          line: 897,
          column: 23
        },
        end: {
          line: 897,
          column: 80
        }
      },
      "303": {
        start: {
          line: 899,
          column: 25
        },
        end: {
          line: 899,
          column: 27
        }
      },
      "304": {
        start: {
          line: 900,
          column: 8
        },
        end: {
          line: 953,
          column: 9
        }
      },
      "305": {
        start: {
          line: 901,
          column: 36
        },
        end: {
          line: 908,
          column: 7
        }
      },
      "306": {
        start: {
          line: 909,
          column: 37
        },
        end: {
          line: 909,
          column: 101
        }
      },
      "307": {
        start: {
          line: 911,
          column: 34
        },
        end: {
          line: 923,
          column: 7
        }
      },
      "308": {
        start: {
          line: 924,
          column: 35
        },
        end: {
          line: 924,
          column: 124
        }
      },
      "309": {
        start: {
          line: 925,
          column: 12
        },
        end: {
          line: 952,
          column: 15
        }
      },
      "310": {
        start: {
          line: 943,
          column: 60
        },
        end: {
          line: 946,
          column: 17
        }
      },
      "311": {
        start: {
          line: 947,
          column: 56
        },
        end: {
          line: 950,
          column: 17
        }
      },
      "312": {
        start: {
          line: 954,
          column: 8
        },
        end: {
          line: 954,
          column: 24
        }
      },
      "313": {
        start: {
          line: 961,
          column: 22
        },
        end: {
          line: 992,
          column: 5
        }
      },
      "314": {
        start: {
          line: 993,
          column: 23
        },
        end: {
          line: 993,
          column: 81
        }
      },
      "315": {
        start: {
          line: 994,
          column: 8
        },
        end: {
          line: 1035,
          column: 9
        }
      },
      "316": {
        start: {
          line: 996,
          column: 34
        },
        end: {
          line: 1007,
          column: 7
        }
      },
      "317": {
        start: {
          line: 1008,
          column: 35
        },
        end: {
          line: 1008,
          column: 101
        }
      },
      "318": {
        start: {
          line: 1009,
          column: 12
        },
        end: {
          line: 1011,
          column: 13
        }
      },
      "319": {
        start: {
          line: 1010,
          column: 16
        },
        end: {
          line: 1010,
          column: 28
        }
      },
      "320": {
        start: {
          line: 1012,
          column: 29
        },
        end: {
          line: 1012,
          column: 51
        }
      },
      "321": {
        start: {
          line: 1013,
          column: 12
        },
        end: {
          line: 1034,
          column: 14
        }
      },
      "322": {
        start: {
          line: 1036,
          column: 20
        },
        end: {
          line: 1036,
          column: 34
        }
      },
      "323": {
        start: {
          line: 1038,
          column: 32
        },
        end: {
          line: 1045,
          column: 5
        }
      },
      "324": {
        start: {
          line: 1046,
          column: 33
        },
        end: {
          line: 1046,
          column: 97
        }
      },
      "325": {
        start: {
          line: 1048,
          column: 30
        },
        end: {
          line: 1060,
          column: 5
        }
      },
      "326": {
        start: {
          line: 1061,
          column: 31
        },
        end: {
          line: 1061,
          column: 120
        }
      },
      "327": {
        start: {
          line: 1062,
          column: 8
        },
        end: {
          line: 1089,
          column: 10
        }
      },
      "328": {
        start: {
          line: 1080,
          column: 56
        },
        end: {
          line: 1083,
          column: 13
        }
      },
      "329": {
        start: {
          line: 1084,
          column: 52
        },
        end: {
          line: 1087,
          column: 13
        }
      },
      "330": {
        start: {
          line: 1092,
          column: 0
        },
        end: {
          line: 1092,
          column: 42
        }
      },
      "331": {
        start: {
          line: 1093,
          column: 0
        },
        end: {
          line: 1093,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 45
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 40
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 29
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 35
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 43
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 38
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 79
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 47
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 110
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 153,
            column: 36
          },
          end: {
            line: 153,
            column: 37
          }
        },
        loc: {
          start: {
            line: 153,
            column: 47
          },
          end: {
            line: 174,
            column: 9
          }
        },
        line: 153
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 191,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        loc: {
          start: {
            line: 191,
            column: 48
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 191
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 38
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 216
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 233,
            column: 32
          },
          end: {
            line: 233,
            column: 33
          }
        },
        loc: {
          start: {
            line: 233,
            column: 39
          },
          end: {
            line: 248,
            column: 13
          }
        },
        line: 233
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        },
        loc: {
          start: {
            line: 264,
            column: 40
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 264
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 280,
            column: 53
          },
          end: {
            line: 280,
            column: 54
          }
        },
        loc: {
          start: {
            line: 280,
            column: 61
          },
          end: {
            line: 288,
            column: 9
          }
        },
        line: 280
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 294,
            column: 4
          },
          end: {
            line: 294,
            column: 5
          }
        },
        loc: {
          start: {
            line: 294,
            column: 46
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 294
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 307,
            column: 5
          }
        },
        loc: {
          start: {
            line: 307,
            column: 41
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 307
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 321,
            column: 5
          }
        },
        loc: {
          start: {
            line: 321,
            column: 41
          },
          end: {
            line: 362,
            column: 5
          }
        },
        line: 321
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 366,
            column: 4
          },
          end: {
            line: 366,
            column: 5
          }
        },
        loc: {
          start: {
            line: 366,
            column: 50
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 366
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 420,
            column: 4
          },
          end: {
            line: 420,
            column: 5
          }
        },
        loc: {
          start: {
            line: 420,
            column: 50
          },
          end: {
            line: 441,
            column: 5
          }
        },
        line: 420
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 445,
            column: 4
          },
          end: {
            line: 445,
            column: 5
          }
        },
        loc: {
          start: {
            line: 445,
            column: 50
          },
          end: {
            line: 473,
            column: 5
          }
        },
        line: 445
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 477,
            column: 4
          },
          end: {
            line: 477,
            column: 5
          }
        },
        loc: {
          start: {
            line: 477,
            column: 52
          },
          end: {
            line: 615,
            column: 5
          }
        },
        line: 477
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 482,
            column: 105
          },
          end: {
            line: 482,
            column: 106
          }
        },
        loc: {
          start: {
            line: 482,
            column: 110
          },
          end: {
            line: 482,
            column: 114
          }
        },
        line: 482
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 483,
            column: 47
          },
          end: {
            line: 483,
            column: 48
          }
        },
        loc: {
          start: {
            line: 483,
            column: 52
          },
          end: {
            line: 483,
            column: 70
          }
        },
        line: 483
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 485,
            column: 111
          },
          end: {
            line: 485,
            column: 112
          }
        },
        loc: {
          start: {
            line: 485,
            column: 116
          },
          end: {
            line: 485,
            column: 120
          }
        },
        line: 485
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 494,
            column: 31
          },
          end: {
            line: 494,
            column: 32
          }
        },
        loc: {
          start: {
            line: 494,
            column: 52
          },
          end: {
            line: 609,
            column: 13
          }
        },
        line: 494
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 495,
            column: 30
          },
          end: {
            line: 495,
            column: 31
          }
        },
        loc: {
          start: {
            line: 495,
            column: 36
          },
          end: {
            line: 499,
            column: 17
          }
        },
        line: 495
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 500,
            column: 32
          },
          end: {
            line: 500,
            column: 33
          }
        },
        loc: {
          start: {
            line: 500,
            column: 43
          },
          end: {
            line: 503,
            column: 17
          }
        },
        line: 500
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 555,
            column: 55
          },
          end: {
            line: 555,
            column: 56
          }
        },
        loc: {
          start: {
            line: 555,
            column: 68
          },
          end: {
            line: 560,
            column: 25
          }
        },
        line: 555
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 583,
            column: 57
          },
          end: {
            line: 583,
            column: 58
          }
        },
        loc: {
          start: {
            line: 583,
            column: 72
          },
          end: {
            line: 588,
            column: 25
          }
        },
        line: 583
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 619,
            column: 4
          },
          end: {
            line: 619,
            column: 5
          }
        },
        loc: {
          start: {
            line: 619,
            column: 54
          },
          end: {
            line: 694,
            column: 5
          }
        },
        line: 619
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 624,
            column: 105
          },
          end: {
            line: 624,
            column: 106
          }
        },
        loc: {
          start: {
            line: 624,
            column: 110
          },
          end: {
            line: 624,
            column: 114
          }
        },
        line: 624
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 625,
            column: 47
          },
          end: {
            line: 625,
            column: 48
          }
        },
        loc: {
          start: {
            line: 625,
            column: 52
          },
          end: {
            line: 625,
            column: 70
          }
        },
        line: 625
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 627,
            column: 111
          },
          end: {
            line: 627,
            column: 112
          }
        },
        loc: {
          start: {
            line: 627,
            column: 116
          },
          end: {
            line: 627,
            column: 120
          }
        },
        line: 627
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 669,
            column: 47
          },
          end: {
            line: 669,
            column: 48
          }
        },
        loc: {
          start: {
            line: 669,
            column: 60
          },
          end: {
            line: 671,
            column: 17
          }
        },
        line: 669
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 679,
            column: 49
          },
          end: {
            line: 679,
            column: 50
          }
        },
        loc: {
          start: {
            line: 679,
            column: 64
          },
          end: {
            line: 681,
            column: 17
          }
        },
        line: 679
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 698,
            column: 4
          },
          end: {
            line: 698,
            column: 5
          }
        },
        loc: {
          start: {
            line: 698,
            column: 55
          },
          end: {
            line: 816,
            column: 5
          }
        },
        line: 698
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 805,
            column: 15
          },
          end: {
            line: 805,
            column: 16
          }
        },
        loc: {
          start: {
            line: 805,
            column: 25
          },
          end: {
            line: 805,
            column: 94
          }
        },
        line: 805
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 812,
            column: 52
          },
          end: {
            line: 812,
            column: 53
          }
        },
        loc: {
          start: {
            line: 812,
            column: 57
          },
          end: {
            line: 812,
            column: 61
          }
        },
        line: 812
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 814,
            column: 48
          },
          end: {
            line: 814,
            column: 49
          }
        },
        loc: {
          start: {
            line: 814,
            column: 53
          },
          end: {
            line: 814,
            column: 57
          }
        },
        line: 814
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 820,
            column: 4
          },
          end: {
            line: 820,
            column: 5
          }
        },
        loc: {
          start: {
            line: 820,
            column: 38
          },
          end: {
            line: 844,
            column: 5
          }
        },
        line: 820
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 848,
            column: 4
          },
          end: {
            line: 848,
            column: 5
          }
        },
        loc: {
          start: {
            line: 848,
            column: 55
          },
          end: {
            line: 955,
            column: 5
          }
        },
        line: 848
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 943,
            column: 54
          },
          end: {
            line: 943,
            column: 55
          }
        },
        loc: {
          start: {
            line: 943,
            column: 60
          },
          end: {
            line: 946,
            column: 17
          }
        },
        line: 943
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 947,
            column: 50
          },
          end: {
            line: 947,
            column: 51
          }
        },
        loc: {
          start: {
            line: 947,
            column: 56
          },
          end: {
            line: 950,
            column: 17
          }
        },
        line: 947
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 959,
            column: 4
          },
          end: {
            line: 959,
            column: 5
          }
        },
        loc: {
          start: {
            line: 959,
            column: 39
          },
          end: {
            line: 1090,
            column: 5
          }
        },
        line: 959
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 1080,
            column: 50
          },
          end: {
            line: 1080,
            column: 51
          }
        },
        loc: {
          start: {
            line: 1080,
            column: 56
          },
          end: {
            line: 1083,
            column: 13
          }
        },
        line: 1080
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 1084,
            column: 46
          },
          end: {
            line: 1084,
            column: 47
          }
        },
        loc: {
          start: {
            line: 1084,
            column: 52
          },
          end: {
            line: 1087,
            column: 13
          }
        },
        line: 1084
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 21,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 21,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "4": {
        loc: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 19,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 19,
            column: 30
          }
        }, {
          start: {
            line: 19,
            column: 34
          },
          end: {
            line: 19,
            column: 48
          }
        }],
        line: 19
      },
      "5": {
        loc: {
          start: {
            line: 38,
            column: 15
          },
          end: {
            line: 38,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 40
          },
          end: {
            line: 38,
            column: 57
          }
        }, {
          start: {
            line: 38,
            column: 60
          },
          end: {
            line: 38,
            column: 64
          }
        }],
        line: 38
      },
      "6": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "7": {
        loc: {
          start: {
            line: 102,
            column: 24
          },
          end: {
            line: 102,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 24
          },
          end: {
            line: 102,
            column: 38
          }
        }, {
          start: {
            line: 102,
            column: 42
          },
          end: {
            line: 102,
            column: 54
          }
        }],
        line: 102
      },
      "8": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "9": {
        loc: {
          start: {
            line: 154,
            column: 26
          },
          end: {
            line: 154,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 26
          },
          end: {
            line: 154,
            column: 61
          }
        }, {
          start: {
            line: 154,
            column: 65
          },
          end: {
            line: 154,
            column: 66
          }
        }],
        line: 154
      },
      "10": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: 158,
            column: 17
          },
          end: {
            line: 166,
            column: 13
          }
        }],
        line: 155
      },
      "11": {
        loc: {
          start: {
            line: 158,
            column: 17
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 17
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: 161,
            column: 17
          },
          end: {
            line: 166,
            column: 13
          }
        }],
        line: 158
      },
      "12": {
        loc: {
          start: {
            line: 161,
            column: 17
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 17
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: 164,
            column: 17
          },
          end: {
            line: 166,
            column: 13
          }
        }],
        line: 161
      },
      "13": {
        loc: {
          start: {
            line: 164,
            column: 17
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 17
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "14": {
        loc: {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "15": {
        loc: {
          start: {
            line: 168,
            column: 16
          },
          end: {
            line: 168,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 16
          },
          end: {
            line: 168,
            column: 31
          }
        }, {
          start: {
            line: 168,
            column: 36
          },
          end: {
            line: 168,
            column: 49
          }
        }, {
          start: {
            line: 168,
            column: 53
          },
          end: {
            line: 168,
            column: 103
          }
        }],
        line: 168
      },
      "16": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "17": {
        loc: {
          start: {
            line: 171,
            column: 16
          },
          end: {
            line: 171,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 16
          },
          end: {
            line: 171,
            column: 32
          }
        }, {
          start: {
            line: 171,
            column: 37
          },
          end: {
            line: 171,
            column: 50
          }
        }, {
          start: {
            line: 171,
            column: 54
          },
          end: {
            line: 171,
            column: 105
          }
        }],
        line: 171
      },
      "18": {
        loc: {
          start: {
            line: 176,
            column: 25
          },
          end: {
            line: 176,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 25
          },
          end: {
            line: 176,
            column: 45
          }
        }, {
          start: {
            line: 176,
            column: 49
          },
          end: {
            line: 176,
            column: 57
          }
        }],
        line: 176
      },
      "19": {
        loc: {
          start: {
            line: 208,
            column: 28
          },
          end: {
            line: 208,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 28
          },
          end: {
            line: 208,
            column: 49
          }
        }, {
          start: {
            line: 208,
            column: 53
          },
          end: {
            line: 208,
            column: 54
          }
        }],
        line: 208
      },
      "20": {
        loc: {
          start: {
            line: 209,
            column: 27
          },
          end: {
            line: 209,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 27
          },
          end: {
            line: 209,
            column: 47
          }
        }, {
          start: {
            line: 209,
            column: 51
          },
          end: {
            line: 209,
            column: 52
          }
        }],
        line: 209
      },
      "21": {
        loc: {
          start: {
            line: 210,
            column: 25
          },
          end: {
            line: 210,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 25
          },
          end: {
            line: 210,
            column: 43
          }
        }, {
          start: {
            line: 210,
            column: 47
          },
          end: {
            line: 210,
            column: 48
          }
        }],
        line: 210
      },
      "22": {
        loc: {
          start: {
            line: 234,
            column: 16
          },
          end: {
            line: 247,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 235,
            column: 20
          },
          end: {
            line: 237,
            column: 30
          }
        }, {
          start: {
            line: 238,
            column: 20
          },
          end: {
            line: 240,
            column: 30
          }
        }, {
          start: {
            line: 241,
            column: 20
          },
          end: {
            line: 243,
            column: 30
          }
        }, {
          start: {
            line: 244,
            column: 20
          },
          end: {
            line: 246,
            column: 30
          }
        }],
        line: 234
      },
      "23": {
        loc: {
          start: {
            line: 282,
            column: 18
          },
          end: {
            line: 282,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 282,
            column: 51
          },
          end: {
            line: 282,
            column: 61
          }
        }, {
          start: {
            line: 282,
            column: 64
          },
          end: {
            line: 282,
            column: 75
          }
        }],
        line: 282
      },
      "24": {
        loc: {
          start: {
            line: 283,
            column: 25
          },
          end: {
            line: 285,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 284,
            column: 18
          },
          end: {
            line: 284,
            column: 79
          }
        }, {
          start: {
            line: 285,
            column: 18
          },
          end: {
            line: 285,
            column: 81
          }
        }],
        line: 283
      },
      "25": {
        loc: {
          start: {
            line: 302,
            column: 15
          },
          end: {
            line: 302,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 302,
            column: 15
          },
          end: {
            line: 302,
            column: 45
          }
        }, {
          start: {
            line: 302,
            column: 49
          },
          end: {
            line: 302,
            column: 50
          }
        }],
        line: 302
      },
      "26": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "27": {
        loc: {
          start: {
            line: 355,
            column: 24
          },
          end: {
            line: 355,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 355,
            column: 24
          },
          end: {
            line: 355,
            column: 38
          }
        }, {
          start: {
            line: 355,
            column: 42
          },
          end: {
            line: 355,
            column: 54
          }
        }],
        line: 355
      },
      "28": {
        loc: {
          start: {
            line: 374,
            column: 12
          },
          end: {
            line: 377,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 12
          },
          end: {
            line: 377,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "29": {
        loc: {
          start: {
            line: 378,
            column: 12
          },
          end: {
            line: 381,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 378,
            column: 12
          },
          end: {
            line: 381,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 378
      },
      "30": {
        loc: {
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 385,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 385,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "31": {
        loc: {
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 389,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 389,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 386
      },
      "32": {
        loc: {
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "33": {
        loc: {
          start: {
            line: 394,
            column: 12
          },
          end: {
            line: 404,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 12
          },
          end: {
            line: 404,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "34": {
        loc: {
          start: {
            line: 434,
            column: 8
          },
          end: {
            line: 434,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 434,
            column: 16
          },
          end: {
            line: 434,
            column: 91
          }
        }, {
          start: {
            line: 434,
            column: 94
          },
          end: {
            line: 434,
            column: 96
          }
        }],
        line: 434
      },
      "35": {
        loc: {
          start: {
            line: 438,
            column: 23
          },
          end: {
            line: 438,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 438,
            column: 31
          },
          end: {
            line: 438,
            column: 58
          }
        }, {
          start: {
            line: 438,
            column: 61
          },
          end: {
            line: 438,
            column: 73
          }
        }],
        line: 438
      },
      "36": {
        loc: {
          start: {
            line: 458,
            column: 8
          },
          end: {
            line: 458,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 458,
            column: 16
          },
          end: {
            line: 458,
            column: 91
          }
        }, {
          start: {
            line: 458,
            column: 94
          },
          end: {
            line: 458,
            column: 96
          }
        }],
        line: 458
      },
      "37": {
        loc: {
          start: {
            line: 461,
            column: 23
          },
          end: {
            line: 461,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 461,
            column: 31
          },
          end: {
            line: 461,
            column: 58
          }
        }, {
          start: {
            line: 461,
            column: 61
          },
          end: {
            line: 461,
            column: 73
          }
        }],
        line: 461
      },
      "38": {
        loc: {
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 487,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 487,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "39": {
        loc: {
          start: {
            line: 521,
            column: 48
          },
          end: {
            line: 521,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 521,
            column: 48
          },
          end: {
            line: 521,
            column: 80
          }
        }, {
          start: {
            line: 521,
            column: 84
          },
          end: {
            line: 521,
            column: 85
          }
        }],
        line: 521
      },
      "40": {
        loc: {
          start: {
            line: 527,
            column: 35
          },
          end: {
            line: 527,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 527,
            column: 35
          },
          end: {
            line: 527,
            column: 67
          }
        }, {
          start: {
            line: 527,
            column: 71
          },
          end: {
            line: 527,
            column: 72
          }
        }],
        line: 527
      },
      "41": {
        loc: {
          start: {
            line: 529,
            column: 43
          },
          end: {
            line: 529,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 529,
            column: 43
          },
          end: {
            line: 529,
            column: 79
          }
        }, {
          start: {
            line: 529,
            column: 83
          },
          end: {
            line: 529,
            column: 84
          }
        }],
        line: 529
      },
      "42": {
        loc: {
          start: {
            line: 531,
            column: 20
          },
          end: {
            line: 543,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 531,
            column: 20
          },
          end: {
            line: 543,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 531
      },
      "43": {
        loc: {
          start: {
            line: 536,
            column: 43
          },
          end: {
            line: 536,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 536,
            column: 43
          },
          end: {
            line: 536,
            column: 75
          }
        }, {
          start: {
            line: 536,
            column: 79
          },
          end: {
            line: 536,
            column: 80
          }
        }],
        line: 536
      },
      "44": {
        loc: {
          start: {
            line: 538,
            column: 35
          },
          end: {
            line: 538,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 538,
            column: 55
          },
          end: {
            line: 538,
            column: 100
          }
        }, {
          start: {
            line: 538,
            column: 103
          },
          end: {
            line: 538,
            column: 104
          }
        }],
        line: 538
      },
      "45": {
        loc: {
          start: {
            line: 539,
            column: 24
          },
          end: {
            line: 542,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 539,
            column: 24
          },
          end: {
            line: 542,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 539
      },
      "46": {
        loc: {
          start: {
            line: 545,
            column: 35
          },
          end: {
            line: 545,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 545,
            column: 35
          },
          end: {
            line: 545,
            column: 65
          }
        }, {
          start: {
            line: 545,
            column: 69
          },
          end: {
            line: 545,
            column: 70
          }
        }],
        line: 545
      },
      "47": {
        loc: {
          start: {
            line: 547,
            column: 35
          },
          end: {
            line: 547,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 547,
            column: 35
          },
          end: {
            line: 547,
            column: 63
          }
        }, {
          start: {
            line: 547,
            column: 67
          },
          end: {
            line: 547,
            column: 68
          }
        }],
        line: 547
      },
      "48": {
        loc: {
          start: {
            line: 553,
            column: 20
          },
          end: {
            line: 575,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 553,
            column: 20
          },
          end: {
            line: 575,
            column: 21
          }
        }, {
          start: {
            line: 566,
            column: 25
          },
          end: {
            line: 575,
            column: 21
          }
        }],
        line: 553
      },
      "49": {
        loc: {
          start: {
            line: 553,
            column: 24
          },
          end: {
            line: 553,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 553,
            column: 24
          },
          end: {
            line: 553,
            column: 46
          }
        }, {
          start: {
            line: 553,
            column: 50
          },
          end: {
            line: 553,
            column: 83
          }
        }],
        line: 553
      },
      "50": {
        loc: {
          start: {
            line: 566,
            column: 25
          },
          end: {
            line: 575,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 566,
            column: 25
          },
          end: {
            line: 575,
            column: 21
          }
        }, {
          start: {
            line: 571,
            column: 25
          },
          end: {
            line: 575,
            column: 21
          }
        }],
        line: 566
      },
      "51": {
        loc: {
          start: {
            line: 566,
            column: 29
          },
          end: {
            line: 566,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 566,
            column: 29
          },
          end: {
            line: 566,
            column: 56
          }
        }, {
          start: {
            line: 566,
            column: 60
          },
          end: {
            line: 566,
            column: 99
          }
        }],
        line: 566
      },
      "52": {
        loc: {
          start: {
            line: 581,
            column: 20
          },
          end: {
            line: 598,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 581,
            column: 20
          },
          end: {
            line: 598,
            column: 21
          }
        }, {
          start: {
            line: 594,
            column: 25
          },
          end: {
            line: 598,
            column: 21
          }
        }],
        line: 581
      },
      "53": {
        loc: {
          start: {
            line: 581,
            column: 24
          },
          end: {
            line: 581,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 581,
            column: 24
          },
          end: {
            line: 581,
            column: 48
          }
        }, {
          start: {
            line: 581,
            column: 52
          },
          end: {
            line: 581,
            column: 87
          }
        }],
        line: 581
      },
      "54": {
        loc: {
          start: {
            line: 592,
            column: 39
          },
          end: {
            line: 592,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 592,
            column: 39
          },
          end: {
            line: 592,
            column: 76
          }
        }, {
          start: {
            line: 592,
            column: 80
          },
          end: {
            line: 592,
            column: 81
          }
        }],
        line: 592
      },
      "55": {
        loc: {
          start: {
            line: 606,
            column: 82
          },
          end: {
            line: 606,
            column: 138
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 606,
            column: 107
          },
          end: {
            line: 606,
            column: 120
          }
        }, {
          start: {
            line: 606,
            column: 123
          },
          end: {
            line: 606,
            column: 138
          }
        }],
        line: 606
      },
      "56": {
        loc: {
          start: {
            line: 606,
            column: 147
          },
          end: {
            line: 606,
            column: 195
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 606,
            column: 172
          },
          end: {
            line: 606,
            column: 183
          }
        }, {
          start: {
            line: 606,
            column: 186
          },
          end: {
            line: 606,
            column: 195
          }
        }],
        line: 606
      },
      "57": {
        loc: {
          start: {
            line: 626,
            column: 12
          },
          end: {
            line: 629,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 626,
            column: 12
          },
          end: {
            line: 629,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 626
      },
      "58": {
        loc: {
          start: {
            line: 636,
            column: 35
          },
          end: {
            line: 636,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 636,
            column: 35
          },
          end: {
            line: 636,
            column: 71
          }
        }, {
          start: {
            line: 636,
            column: 75
          },
          end: {
            line: 636,
            column: 76
          }
        }],
        line: 636
      },
      "59": {
        loc: {
          start: {
            line: 638,
            column: 12
          },
          end: {
            line: 646,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 638,
            column: 12
          },
          end: {
            line: 646,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 638
      },
      "60": {
        loc: {
          start: {
            line: 643,
            column: 35
          },
          end: {
            line: 643,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 643,
            column: 35
          },
          end: {
            line: 643,
            column: 67
          }
        }, {
          start: {
            line: 643,
            column: 71
          },
          end: {
            line: 643,
            column: 72
          }
        }],
        line: 643
      },
      "61": {
        loc: {
          start: {
            line: 645,
            column: 27
          },
          end: {
            line: 645,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 645,
            column: 47
          },
          end: {
            line: 645,
            column: 92
          }
        }, {
          start: {
            line: 645,
            column: 95
          },
          end: {
            line: 645,
            column: 96
          }
        }],
        line: 645
      },
      "62": {
        loc: {
          start: {
            line: 668,
            column: 12
          },
          end: {
            line: 673,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 668,
            column: 12
          },
          end: {
            line: 673,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 668
      },
      "63": {
        loc: {
          start: {
            line: 668,
            column: 16
          },
          end: {
            line: 668,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 668,
            column: 16
          },
          end: {
            line: 668,
            column: 38
          }
        }, {
          start: {
            line: 668,
            column: 42
          },
          end: {
            line: 668,
            column: 75
          }
        }],
        line: 668
      },
      "64": {
        loc: {
          start: {
            line: 678,
            column: 12
          },
          end: {
            line: 682,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 678,
            column: 12
          },
          end: {
            line: 682,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 678
      },
      "65": {
        loc: {
          start: {
            line: 678,
            column: 16
          },
          end: {
            line: 678,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 678,
            column: 16
          },
          end: {
            line: 678,
            column: 40
          }
        }, {
          start: {
            line: 678,
            column: 44
          },
          end: {
            line: 678,
            column: 79
          }
        }],
        line: 678
      },
      "66": {
        loc: {
          start: {
            line: 698,
            column: 42
          },
          end: {
            line: 698,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 698,
            column: 51
          },
          end: {
            line: 698,
            column: 53
          }
        }],
        line: 698
      },
      "67": {
        loc: {
          start: {
            line: 699,
            column: 30
          },
          end: {
            line: 699,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 699,
            column: 38
          },
          end: {
            line: 699,
            column: 40
          }
        }],
        line: 699
      },
      "68": {
        loc: {
          start: {
            line: 699,
            column: 42
          },
          end: {
            line: 699,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 699,
            column: 51
          },
          end: {
            line: 699,
            column: 52
          }
        }],
        line: 699
      },
      "69": {
        loc: {
          start: {
            line: 727,
            column: 8
          },
          end: {
            line: 729,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 727,
            column: 8
          },
          end: {
            line: 729,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 727
      },
      "70": {
        loc: {
          start: {
            line: 727,
            column: 12
          },
          end: {
            line: 727,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 727,
            column: 12
          },
          end: {
            line: 727,
            column: 16
          }
        }, {
          start: {
            line: 727,
            column: 20
          },
          end: {
            line: 727,
            column: 36
          }
        }],
        line: 727
      },
      "71": {
        loc: {
          start: {
            line: 730,
            column: 8
          },
          end: {
            line: 732,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 730,
            column: 8
          },
          end: {
            line: 732,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 730
      },
      "72": {
        loc: {
          start: {
            line: 755,
            column: 8
          },
          end: {
            line: 757,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 755,
            column: 8
          },
          end: {
            line: 757,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 755
      },
      "73": {
        loc: {
          start: {
            line: 755,
            column: 12
          },
          end: {
            line: 755,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 755,
            column: 12
          },
          end: {
            line: 755,
            column: 16
          }
        }, {
          start: {
            line: 755,
            column: 20
          },
          end: {
            line: 755,
            column: 46
          }
        }],
        line: 755
      },
      "74": {
        loc: {
          start: {
            line: 758,
            column: 8
          },
          end: {
            line: 760,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 758,
            column: 8
          },
          end: {
            line: 760,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 758
      },
      "75": {
        loc: {
          start: {
            line: 783,
            column: 8
          },
          end: {
            line: 785,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 783,
            column: 8
          },
          end: {
            line: 785,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 783
      },
      "76": {
        loc: {
          start: {
            line: 783,
            column: 12
          },
          end: {
            line: 783,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 783,
            column: 12
          },
          end: {
            line: 783,
            column: 16
          }
        }, {
          start: {
            line: 783,
            column: 20
          },
          end: {
            line: 783,
            column: 39
          }
        }],
        line: 783
      },
      "77": {
        loc: {
          start: {
            line: 786,
            column: 8
          },
          end: {
            line: 788,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 786,
            column: 8
          },
          end: {
            line: 788,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 786
      },
      "78": {
        loc: {
          start: {
            line: 792,
            column: 8
          },
          end: {
            line: 794,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 792,
            column: 8
          },
          end: {
            line: 794,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 792
      },
      "79": {
        loc: {
          start: {
            line: 848,
            column: 42
          },
          end: {
            line: 848,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 848,
            column: 51
          },
          end: {
            line: 848,
            column: 53
          }
        }],
        line: 848
      },
      "80": {
        loc: {
          start: {
            line: 849,
            column: 29
          },
          end: {
            line: 849,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 849,
            column: 36
          },
          end: {
            line: 849,
            column: 37
          }
        }],
        line: 849
      },
      "81": {
        loc: {
          start: {
            line: 849,
            column: 39
          },
          end: {
            line: 849,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 849,
            column: 47
          },
          end: {
            line: 849,
            column: 49
          }
        }],
        line: 849
      },
      "82": {
        loc: {
          start: {
            line: 854,
            column: 8
          },
          end: {
            line: 857,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 854,
            column: 8
          },
          end: {
            line: 857,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 854
      },
      "83": {
        loc: {
          start: {
            line: 858,
            column: 8
          },
          end: {
            line: 861,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 858,
            column: 8
          },
          end: {
            line: 861,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 858
      },
      "84": {
        loc: {
          start: {
            line: 933,
            column: 28
          },
          end: {
            line: 933,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 933,
            column: 28
          },
          end: {
            line: 933,
            column: 47
          }
        }, {
          start: {
            line: 933,
            column: 51
          },
          end: {
            line: 933,
            column: 63
          }
        }],
        line: 933
      },
      "85": {
        loc: {
          start: {
            line: 937,
            column: 32
          },
          end: {
            line: 937,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 937,
            column: 32
          },
          end: {
            line: 937,
            column: 64
          }
        }, {
          start: {
            line: 937,
            column: 68
          },
          end: {
            line: 937,
            column: 69
          }
        }],
        line: 937
      },
      "86": {
        loc: {
          start: {
            line: 994,
            column: 8
          },
          end: {
            line: 1035,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 994,
            column: 8
          },
          end: {
            line: 1035,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 994
      },
      "87": {
        loc: {
          start: {
            line: 1009,
            column: 12
          },
          end: {
            line: 1011,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1009,
            column: 12
          },
          end: {
            line: 1011,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1009
      },
      "88": {
        loc: {
          start: {
            line: 1021,
            column: 28
          },
          end: {
            line: 1021,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1021,
            column: 28
          },
          end: {
            line: 1021,
            column: 47
          }
        }, {
          start: {
            line: 1021,
            column: 51
          },
          end: {
            line: 1021,
            column: 63
          }
        }],
        line: 1021
      },
      "89": {
        loc: {
          start: {
            line: 1070,
            column: 24
          },
          end: {
            line: 1070,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1070,
            column: 24
          },
          end: {
            line: 1070,
            column: 43
          }
        }, {
          start: {
            line: 1070,
            column: 47
          },
          end: {
            line: 1070,
            column: 59
          }
        }],
        line: 1070
      },
      "90": {
        loc: {
          start: {
            line: 1074,
            column: 28
          },
          end: {
            line: 1074,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1074,
            column: 28
          },
          end: {
            line: 1074,
            column: 60
          }
        }, {
          start: {
            line: 1074,
            column: 64
          },
          end: {
            line: 1074,
            column: 65
          }
        }],
        line: 1074
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0],
      "67": [0],
      "68": [0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0],
      "80": [0],
      "81": [0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/employee/employeeService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/services/employee/employeeService.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface EmployeeDashboard {\n  employee: {\n    id: string;\n    name: string;\n    employeeId: string;\n    department: string;\n    position: string;\n    hireDate: string;\n    profilePicture?: string;\n  };\n  attendance: {\n    todayStatus: 'present' | 'absent' | 'late' | 'half_day';\n    clockInTime?: string;\n    clockOutTime?: string;\n    totalHours?: number;\n    morningClockIn?: string;\n    morningClockOut?: string;\n    afternoonClockIn?: string;\n    afternoonClockOut?: string;\n    breakStart?: string;\n    breakEnd?: string;\n    monthlyPresent: number;\n    monthlyAbsent: number;\n    monthlyLate: number;\n  };\n  leaveBalance: {\n    vacation: number;\n    sick: number;\n    maternity: number;\n    other: number;\n  };\n  recentActivity: Array<{\n    id: string;\n    type: 'clock_in' | 'clock_out' | 'request_submitted' | 'request_approved' | 'request_rejected';\n    description: string;\n    timestamp: string;\n    status?: 'success' | 'warning' | 'error';\n  }>;\n  pendingRequests: number;\n  upcomingEvents: Array<{\n    id: string;\n    title: string;\n    date: string;\n    type: 'holiday' | 'meeting' | 'deadline';\n  }>;\n}\n\nexport interface EmployeeProfile {\n  id: string;\n  employeeId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  address?: string;\n  department: string;\n  position: string;\n  employmentType: string;\n  hireDate: string;\n  baseSalary: number;\n  status: string;\n  profilePicture?: string;\n}\n\nexport interface AttendanceRecord {\n  id: string;\n  date: string;\n  clockIn: string | null;\n  clockOut: string | null;\n  totalHours: number | null;\n  status: 'present' | 'absent' | 'late' | 'half_day' | 'holiday';\n  overtimeHours?: number;\n  notes?: string;\n}\n\nexport interface AttendanceSummary {\n  totalDays: number;\n  presentDays: number;\n  absentDays: number;\n  lateDays: number;\n  totalHours: number;\n  averageHours: number;\n  overtimeHours: number;\n}\n\nexport interface EmployeeRequest {\n  id: string;\n  type: 'time_correction' | 'overtime' | 'leave';\n  status: 'pending' | 'approved' | 'rejected';\n  submittedAt: string;\n  approverName?: string;\n  approvedAt?: string;\n  rejectionReason?: string;\n  details: any;\n}\n\nexport interface RequestStats {\n  total: number;\n  pending: number;\n  approved: number;\n  rejected: number;\n}\n\nexport interface PaystubData {\n  id: string;\n  periodName: string;\n  periodStartDate: string;\n  periodEndDate: string;\n  employeeId: string;\n  employeeName: string;\n  position: string;\n  department: string;\n  baseSalary: number;\n  totalRegularHours: number;\n  totalOvertimeHours: number;\n  paidLeaveHours: number;\n  grossPay: number;\n  totalDeductions: number;\n  totalBenefits: number;\n  netPay: number;\n  lateDeductions: number;\n  deductions: Array<{\n    name: string;\n    amount: number;\n  }>;\n  benefits: Array<{\n    name: string;\n    amount: number;\n  }>;\n  createdAt: string;\n}\n\nexport class EmployeeService {\n  /**\n   * Calculate working days between two dates (excluding weekends)\n   */\n  private calculateWorkingDays(startDate: Date, endDate: Date): number {\n    let workingDays = 0;\n    const currentDate = new Date(startDate);\n\n    while (currentDate <= endDate) {\n      const dayOfWeek = currentDate.getDay();\n      // Count Monday (1) through Friday (5) as working days\n      if (dayOfWeek >= 1 && dayOfWeek <= 5) {\n        workingDays++;\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n\n    return workingDays;\n  }\n\n\n  /**\n   * Get employee ID by user ID\n   */\n  async getEmployeeIdByUserId(userId: string): Promise<string | null> {\n    logger.info('getEmployeeIdByUserId called with userId:', { userId });\n    const query = `\n      SELECT id\n      FROM employees\n      WHERE user_id = $1\n    `;\n    \n    const result = await getPool().query(query, [userId]);\n    logger.info('getEmployeeIdByUserId query result:', { result: result.rows });\n    return result.rows.length > 0 ? result.rows[0].id : null;\n  }\n\n  /**\n   * Get employee dashboard data\n   */\n  async getDashboard(employeeId: string): Promise<EmployeeDashboard> {\n    try {\n      // Get employee basic info\n      const employeeInfo = await this.getEmployeeInfo(employeeId);\n      \n      // Get today's attendance status\n      const todayStatus = await this.getTodayAttendanceStatus(employeeId);\n      \n      // Get monthly attendance stats\n      const monthlyStats = await this.getMonthlyAttendanceStats(employeeId);\n      \n      // Get leave balance\n      const leaveBalance = await this.getLeaveBalance(employeeId);\n      \n      // Get recent activity\n      const recentActivity = await this.getRecentActivity(employeeId);\n      \n      // Get pending requests count\n      const pendingRequests = await this.getPendingRequestsCount(employeeId);\n      \n      // Get upcoming events (placeholder for now)\n      const upcomingEvents = await this.getUpcomingEvents(employeeId);\n\n      return {\n        employee: employeeInfo,\n        attendance: {\n          ...todayStatus,\n          ...monthlyStats\n        },\n        leaveBalance,\n        recentActivity,\n        pendingRequests,\n        upcomingEvents\n      };\n    } catch (error) {\n      logger.error('Error getting employee dashboard:', { error, employeeId });\n      throw error;\n    }\n  }\n\n  /**\n   * Get employee basic information\n   */\n  private async getEmployeeInfo(employeeId: string): Promise<EmployeeDashboard['employee']> {\n    const query = `\n      SELECT \n        e.id,\n        e.employee_id as \"employeeId\",\n        CONCAT(u.first_name, ' ', u.last_name) as name,\n        d.name as department,\n        e.position,\n        e.hire_date as \"hireDate\"\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.id = $1\n    `;\n\n    const result = await getPool().query(query, [employeeId]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('Employee not found');\n    }\n\n    const row = result.rows[0];\n    return {\n      id: row.id,\n      name: row.name,\n      employeeId: row.employeeId,\n      department: row.department || 'Unassigned',\n      position: row.position,\n      hireDate: row.hireDate\n    };\n  }\n\n  /**\n   * Get today's attendance status with session details\n   */\n  private async getTodayAttendanceStatus(employeeId: string): Promise<{\n    todayStatus: 'present' | 'absent' | 'late' | 'half_day';\n    clockInTime?: string;\n    clockOutTime?: string;\n    totalHours?: number;\n    morningClockIn?: string;\n    morningClockOut?: string;\n    afternoonClockIn?: string;\n    afternoonClockOut?: string;\n    breakStart?: string;\n    breakEnd?: string;\n  }> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    // Get overall attendance record\n    const recordQuery = `\n      SELECT \n        ar.overall_status as \"overallStatus\",\n        ar.date\n      FROM attendance_records ar\n      WHERE ar.employee_id = $1 AND ar.date = $2\n    `;\n\n    const recordResult = await getPool().query(recordQuery, [employeeId, today]);\n    \n    if (recordResult.rows.length === 0) {\n      return {\n        todayStatus: 'absent',\n        clockInTime: undefined,\n        clockOutTime: undefined,\n        totalHours: 0,\n        morningClockIn: undefined,\n        morningClockOut: undefined,\n        afternoonClockIn: undefined,\n        afternoonClockOut: undefined,\n        breakStart: undefined,\n        breakEnd: undefined\n      };\n    }\n\n    const record = recordResult.rows[0];\n\n    // Get all sessions for today\n    const sessionsQuery = `\n      SELECT \n        s.session_type as \"sessionType\",\n        s.clock_in as \"clockIn\",\n        s.clock_out as \"clockOut\",\n        s.calculated_hours as \"calculatedHours\",\n        s.created_at as \"createdAt\"\n      FROM attendance_sessions s\n      JOIN attendance_records ar ON s.attendance_record_id = ar.id\n      WHERE ar.employee_id = $1 AND ar.date = $2\n      ORDER BY s.created_at ASC\n    `;\n\n    const sessionsResult = await getPool().query(sessionsQuery, [employeeId, today]);\n    \n    let morningClockIn: string | undefined, morningClockOut: string | undefined, afternoonClockIn: string | undefined, afternoonClockOut: string | undefined, breakStart: string | undefined, breakEnd: string | undefined;\n    let totalHours = 0;\n    let firstClockIn: string | undefined, lastClockOut: string | undefined;\n\n    sessionsResult.rows.forEach(session => {\n      totalHours += parseFloat(session.calculatedHours) || 0;\n      \n      if (session.sessionType === 'morning_in') {\n        morningClockIn = session.clockIn;\n      } else if (session.sessionType === 'morning_out') {\n        morningClockOut = session.clockOut;\n      } else if (session.sessionType === 'afternoon_in') {\n        afternoonClockIn = session.clockIn;\n      } else if (session.sessionType === 'afternoon_out') {\n        afternoonClockOut = session.clockOut;\n      }\n\n      // Track first clock in and last clock out for overall times\n      if (session.clockIn && (!firstClockIn || new Date(session.clockIn) < new Date(firstClockIn))) {\n        firstClockIn = session.clockIn;\n      }\n      if (session.clockOut && (!lastClockOut || new Date(session.clockOut) > new Date(lastClockOut))) {\n        lastClockOut = session.clockOut;\n      }\n    });\n\n    return {\n      todayStatus: record.overallStatus || 'absent',\n      clockInTime: firstClockIn,\n      clockOutTime: lastClockOut,\n      totalHours: totalHours,\n      morningClockIn,\n      morningClockOut,\n      afternoonClockIn,\n      afternoonClockOut,\n      breakStart,\n      breakEnd\n    };\n  }\n\n  /**\n   * Get monthly attendance statistics\n   */\n  private async getMonthlyAttendanceStats(employeeId: string): Promise<{\n    monthlyPresent: number;\n    monthlyAbsent: number;\n    monthlyLate: number;\n  }> {\n    const now = new Date();\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n\n    const query = `\n      SELECT \n        COUNT(*) FILTER (WHERE overall_status = 'present') as present,\n        COUNT(*) FILTER (WHERE overall_status = 'absent') as absent,\n        COUNT(*) FILTER (WHERE overall_status = 'late') as late\n      FROM attendance_records\n      WHERE employee_id = $1 \n        AND date >= $2 \n        AND date <= $3\n    `;\n\n    const result = await getPool().query(query, [employeeId, startOfMonth, endOfMonth]);\n    const row = result.rows[0];\n\n    return {\n      monthlyPresent: parseInt(row.present) || 0,\n      monthlyAbsent: parseInt(row.absent) || 0,\n      monthlyLate: parseInt(row.late) || 0\n    };\n  }\n\n  /**\n   * Get leave balance\n   */\n  private async getLeaveBalance(employeeId: string): Promise<{\n    vacation: number;\n    sick: number;\n    maternity: number;\n    other: number;\n  }> {\n    try {\n      // Get leave balances from the actual database schema\n      const query = `\n        SELECT \n          leave_type,\n          balance\n        FROM leave_balances\n        WHERE employee_id = $1\n      `;\n      \n      const result = await getPool().query(query, [employeeId]);\n      \n      const balance = {\n        vacation: 0,\n        sick: 0,\n        maternity: 0,\n        other: 0\n      };\n      \n      result.rows.forEach(row => {\n        switch (row.leave_type) {\n          case 'vacation':\n            balance.vacation = parseFloat(row.balance);\n            break;\n          case 'sick':\n            balance.sick = parseFloat(row.balance);\n            break;\n          case 'other':\n            balance.other = parseFloat(row.balance);\n            break;\n          case 'maternity':\n            balance.maternity = parseFloat(row.balance);\n            break;\n        }\n      });\n      \n      return balance;\n    } catch (error) {\n      logger.warn('Error getting leave balance, returning defaults:', { error, employeeId });\n      return {\n        vacation: 0,\n        sick: 0,\n        maternity: 0,\n        other: 0\n      };\n    }\n  }\n\n  /**\n   * Get recent activity\n   */\n  private async getRecentActivity(employeeId: string): Promise<Array<{\n    id: string;\n    type: 'clock_in' | 'clock_out' | 'request_submitted' | 'request_approved' | 'request_rejected';\n    description: string;\n    timestamp: string;\n    status?: 'success' | 'warning' | 'error';\n  }>> {\n    // Get recent attendance sessions\n    const attendanceQuery = `\n      SELECT \n        s.id,\n        s.session_type as \"sessionType\",\n        s.clock_in as \"clockIn\",\n        s.clock_out as \"clockOut\",\n        s.created_at as \"createdAt\"\n      FROM attendance_sessions s\n      JOIN attendance_records ar ON s.attendance_record_id = ar.id\n      WHERE ar.employee_id = $1\n      ORDER BY s.created_at DESC\n      LIMIT 5\n    `;\n\n    const attendanceResult = await getPool().query(attendanceQuery, [employeeId]);\n    \n    const activities = attendanceResult.rows.map(row => ({\n      id: row.id,\n      type: row.sessionType === 'clock_in' ? 'clock_in' : 'clock_out' as 'clock_in' | 'clock_out',\n      description: row.sessionType === 'clock_in' \n        ? `Clocked in at ${new Date(row.clockIn).toLocaleTimeString()}`\n        : `Clocked out at ${new Date(row.clockOut).toLocaleTimeString()}`,\n      timestamp: row.createdAt,\n      status: 'success' as const\n    }));\n\n    return activities;\n  }\n\n  /**\n   * Get pending requests count\n   */\n  private async getPendingRequestsCount(employeeId: string): Promise<number> {\n    const query = `\n      SELECT \n        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1 AND status = 'pending') +\n        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1 AND status = 'pending') +\n        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1 AND status = 'pending') as total\n    `;\n\n    const result = await getPool().query(query, [employeeId]);\n    return parseInt(result.rows[0].total) || 0;\n  }\n\n  /**\n   * Get upcoming events (placeholder)\n   */\n  private async getUpcomingEvents(_employeeId: string): Promise<Array<{\n    id: string;\n    title: string;\n    date: string;\n    type: 'holiday' | 'meeting' | 'deadline';\n  }>> {\n    // Placeholder implementation - can be extended with actual events\n    return [\n      {\n        id: '1',\n        title: 'Team Meeting',\n        date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Tomorrow\n        type: 'meeting'\n      }\n    ];\n  }\n\n  /**\n   * Get employee profile\n   */\n  async getEmployeeProfile(employeeId: string): Promise<EmployeeProfile> {\n    const query = `\n      SELECT \n        e.id,\n        e.employee_id as \"employeeId\",\n        u.first_name as \"firstName\",\n        u.last_name as \"lastName\",\n        u.email,\n        u.phone,\n        u.address,\n        d.name as department,\n        e.position,\n        e.employment_type as \"employmentType\",\n        e.hire_date as \"hireDate\",\n        e.base_salary as \"baseSalary\",\n        e.status\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.id = $1\n    `;\n\n    const result = await getPool().query(query, [employeeId]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('Employee not found');\n    }\n\n    const row = result.rows[0];\n    return {\n      id: row.id,\n      employeeId: row.employeeId,\n      firstName: row.firstName,\n      lastName: row.lastName,\n      email: row.email,\n      phone: row.phone,\n      address: row.address,\n      department: row.department || 'Unassigned',\n      position: row.position,\n      employmentType: row.employmentType,\n      hireDate: row.hireDate,\n      baseSalary: parseFloat(row.baseSalary),\n      status: row.status\n    };\n  }\n\n  /**\n   * Update employee profile\n   */\n  async updateEmployeeProfile(employeeId: string, data: {\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n    phone?: string;\n    address?: string;\n  }): Promise<EmployeeProfile> {\n    const client = await getPool().connect();\n    \n    try {\n      await client.query('BEGIN');\n\n      // Update user table\n      const userUpdateFields = [];\n      const userUpdateValues = [];\n      let paramIndex = 1;\n\n      if (data.firstName) {\n        userUpdateFields.push(`first_name = $${paramIndex++}`);\n        userUpdateValues.push(data.firstName);\n      }\n      if (data.lastName) {\n        userUpdateFields.push(`last_name = $${paramIndex++}`);\n        userUpdateValues.push(data.lastName);\n      }\n      if (data.email) {\n        userUpdateFields.push(`email = $${paramIndex++}`);\n        userUpdateValues.push(data.email);\n      }\n      if (data.phone) {\n        userUpdateFields.push(`phone = $${paramIndex++}`);\n        userUpdateValues.push(data.phone);\n      }\n      if (data.address) {\n        userUpdateFields.push(`address = $${paramIndex++}`);\n        userUpdateValues.push(data.address);\n      }\n\n      if (userUpdateFields.length > 0) {\n        userUpdateFields.push(`updated_at = CURRENT_TIMESTAMP`);\n        userUpdateValues.push(employeeId);\n\n        const userUpdateQuery = `\n          UPDATE users \n          SET ${userUpdateFields.join(', ')}\n          FROM employees e\n          WHERE e.user_id = users.id AND e.id = $${paramIndex}\n        `;\n\n        await client.query(userUpdateQuery, userUpdateValues);\n      }\n\n      await client.query('COMMIT');\n\n      // Return updated profile\n      return await this.getEmployeeProfile(employeeId);\n    } catch (error) {\n      await client.query('ROLLBACK');\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get attendance history for an employee\n   */\n  async getAttendanceHistory(employeeId: string, month?: string): Promise<AttendanceRecord[]> {\n    const query = `\n      SELECT \n        ar.id,\n        ar.date,\n        s.clock_in as \"clockIn\",\n        s.clock_out as \"clockOut\",\n        s.calculated_hours as \"totalHours\",\n        ar.overall_status as status,\n        0 as \"overtimeHours\",\n        '' as notes\n      FROM attendance_records ar\n      LEFT JOIN attendance_sessions s ON ar.id = s.attendance_record_id\n      WHERE ar.employee_id = $1\n      ${month ? 'AND DATE_TRUNC(\\'month\\', ar.date) = DATE_TRUNC(\\'month\\', $2::timestamp)' : ''}\n      ORDER BY ar.date DESC\n    `;\n    \n    // Convert month string (e.g., \"2025-09\") to a proper date (e.g., \"2025-09-01\")\n    const params = month ? [employeeId, `${month}-01`] : [employeeId];\n    const result = await getPool().query(query, params);\n    return result.rows;\n  }\n\n  /**\n   * Get attendance summary for an employee\n   */\n  async getAttendanceSummary(employeeId: string, month?: string): Promise<AttendanceSummary> {\n    const query = `\n      SELECT \n        COUNT(*) as total_days,\n        COUNT(CASE WHEN ar.overall_status = 'present' THEN 1 END) as present_days,\n        COUNT(CASE WHEN ar.overall_status = 'absent' THEN 1 END) as absent_days,\n        COUNT(CASE WHEN ar.overall_status = 'late' THEN 1 END) as late_days,\n        COALESCE(SUM(s.calculated_hours), 0) as total_hours,\n        COALESCE(AVG(s.calculated_hours), 0) as average_hours,\n        0 as overtime_hours\n      FROM attendance_records ar\n      LEFT JOIN attendance_sessions s ON ar.id = s.attendance_record_id\n      WHERE ar.employee_id = $1\n      ${month ? 'AND DATE_TRUNC(\\'month\\', ar.date) = DATE_TRUNC(\\'month\\', $2::timestamp)' : ''}\n    `;\n    \n    // Convert month string (e.g., \"2025-09\") to a proper date (e.g., \"2025-09-01\")\n    const params = month ? [employeeId, `${month}-01`] : [employeeId];\n    const result = await getPool().query(query, params);\n    const row = result.rows[0];\n    \n    return {\n      totalDays: parseInt(row.total_days),\n      presentDays: parseInt(row.present_days),\n      absentDays: parseInt(row.absent_days),\n      lateDays: parseInt(row.late_days),\n      totalHours: parseFloat(row.total_hours),\n      averageHours: parseFloat(row.average_hours),\n      overtimeHours: parseFloat(row.overtime_hours),\n    };\n  }\n\n  /**\n   * Download paystub as PDF\n   */\n  async downloadPaystubPDF(employeeId: string, paystubId: string): Promise<Buffer> {\n    try {\n      logger.info('Downloading paystub PDF', { employeeId, paystubId });\n      \n      // Get the specific paystub data\n      const paystub = await this.getEmployeePaystubs(employeeId, { limit: 1000 });\n      logger.info('Retrieved paystubs', { count: paystub.length, paystubIds: paystub.map(p => p.id) });\n      \n      const targetPaystub = paystub.find(p => p.id === paystubId);\n      \n      if (!targetPaystub) {\n        logger.error('Paystub not found', { employeeId, paystubId, availableIds: paystub.map(p => p.id) });\n        throw new Error('Paystub not found');\n      }\n\n      // Generate PDF using the existing payroll service method\n      logger.info('Starting PDF generation', { paystubId: targetPaystub.id });\n      \n      const PDFDocument = require('pdfkit');\n      const doc = new PDFDocument();\n      const buffers: Buffer[] = [];\n      \n      doc.on('data', buffers.push.bind(buffers));\n      \n      return new Promise((resolve, reject) => {\n        doc.on('end', () => {\n          const pdfBuffer = Buffer.concat(buffers);\n          logger.info('PDF generation completed', { bufferSize: pdfBuffer.length });\n          resolve(pdfBuffer);\n        });\n        \n        doc.on('error', (error: any) => {\n          logger.error('PDF generation error', { error: error.message, stack: error.stack });\n          reject(error);\n        });\n        \n        try {\n          // H1 - Company header\n          doc.fontSize(20).font('Helvetica-Bold')\n             .text('TITO HR MANAGEMENT SYSTEM', 50, 50);\n\n          // H2 - Payslip title\n          doc.fontSize(16).font('Helvetica-Bold')\n             .text('PAYSLIP', 50, 85);\n\n          // H3 - Pay period\n          doc.fontSize(12).font('Helvetica-Bold')\n             .text(`Pay period: ${targetPaystub.periodName}`, 50, 115);\n\n          // H3 - Employee Information\n          doc.fontSize(12).font('Helvetica-Bold')\n             .text('Employee Information', 50, 145);\n          \n          doc.fontSize(10).font('Helvetica')\n             .text(`Employee ID: ${targetPaystub.employeeId}`, 50, 170)\n             .text(`Name: ${targetPaystub.employeeName}`, 50, 185)\n             .text(`Department: ${targetPaystub.department}`, 50, 200)\n             .text(`Base salary: \u20B1${(Number(targetPaystub.baseSalary) || 0).toFixed(2)}`, 50, 215);\n\n          // Earnings section\n          doc.fontSize(12).font('Helvetica-Bold')\n             .text('Earnings:', 50, 245);\n          \n          doc.fontSize(10).font('Helvetica')\n             .text('Base salary:', 50, 270)\n             .text(`\u20B1${(Number(targetPaystub.baseSalary) || 0).toFixed(2)}`, 400, 270, { align: 'right' });\n          \n          // Add Leave Pay if applicable - using same calculation as payroll system\n          const paidLeaveHours = Number(targetPaystub.paidLeaveHours) || 0;\n          let leavePay = 0;\n          if (paidLeaveHours > 0) {\n            const startDate = new Date(targetPaystub.periodStartDate);\n            const endDate = new Date(targetPaystub.periodEndDate);\n            const expectedWorkingDays = this.calculateWorkingDays(startDate, endDate);\n            const expectedHours = expectedWorkingDays * 8; // 8 hours per working day\n            const baseSalary = Number(targetPaystub.baseSalary) || 0;\n            \n            // Use same proportional calculation as payroll system\n            leavePay = expectedHours > 0 ? (paidLeaveHours / expectedHours) * baseSalary : 0;\n            \n            if (leavePay > 0) {\n              doc.text('Leave pay:', 50, 290)\n                 .text(`\u20B1${leavePay.toFixed(2)}`, 400, 290, { align: 'right' });\n            }\n          }\n          \n          doc.text('Gross pay:', 50, 310)\n             .text(`\u20B1${(Number(targetPaystub.grossPay) || 0).toFixed(2)}`, 400, 310, { align: 'right' })\n             .text('Net pay:', 50, 330)\n             .text(`\u20B1${(Number(targetPaystub.netPay) || 0).toFixed(2)}`, 400, 330, { align: 'right' });\n          \n          // Benefits section\n          let currentY = 360;\n          doc.fontSize(12).font('Helvetica-Bold')\n             .text('Benefits:', 50, currentY);\n          \n          currentY += 25;\n          \n          if (targetPaystub.benefits && targetPaystub.benefits.length > 0) {\n            // Individual benefits\n            targetPaystub.benefits.forEach((benefit: any) => {\n              doc.fontSize(10).font('Helvetica')\n                 .text(`${benefit.name}:`, 50, currentY)\n                 .text(`\u20B1${Number(benefit.amount).toFixed(2)}`, 400, currentY, { align: 'right' });\n              currentY += 15;\n            });\n            \n            // Total Benefits\n            doc.fontSize(10).font('Helvetica')\n               .text('Total benefits:', 50, currentY)\n               .text(`\u20B1${Number(targetPaystub.totalBenefits).toFixed(2)}`, 400, currentY, { align: 'right' });\n          } else if (targetPaystub.totalBenefits && Number(targetPaystub.totalBenefits) > 0) {\n            doc.fontSize(10).font('Helvetica')\n               .text('Total benefits:', 50, currentY)\n               .text(`\u20B1${Number(targetPaystub.totalBenefits).toFixed(2)}`, 400, currentY, { align: 'right' });\n          } else {\n            doc.fontSize(10).font('Helvetica')\n               .text('Total benefits:', 50, currentY)\n               .text(`\u20B10.00`, 400, currentY, { align: 'right' });\n          }\n          \n          // Deductions section\n          currentY += 30;\n          doc.fontSize(12).font('Helvetica-Bold')\n             .text('Deductions:', 50, currentY);\n          \n          currentY += 25;\n          \n          if (targetPaystub.deductions && targetPaystub.deductions.length > 0) {\n            // Individual deductions\n            targetPaystub.deductions.forEach((deduction: any) => {\n              doc.fontSize(10).font('Helvetica')\n                 .text(`${deduction.name}:`, 50, currentY)\n                 .text(`\u20B1${Number(deduction.amount).toFixed(2)}`, 400, currentY, { align: 'right' });\n              currentY += 15;\n            });\n            \n            // Total Deductions\n            doc.fontSize(10).font('Helvetica')\n               .text('Total deductions:', 50, currentY)\n               .text(`\u20B1${(Number(targetPaystub.totalDeductions) || 0).toFixed(2)}`, 400, currentY, { align: 'right' });\n          } else {\n            doc.fontSize(10).font('Helvetica')\n               .text('Total deductions:', 50, currentY)\n               .text(`\u20B10.00`, 400, currentY, { align: 'right' });\n          }\n\n          // Footer\n          currentY += 40;\n          doc.fontSize(10).font('Helvetica')\n             .text(`Approved by hr & generated on: ${new Date().toLocaleDateString()}`, 50, currentY);\n          \n          doc.end();\n        } catch (error) {\n          logger.error('Error creating PDF content', { error: error instanceof Error ? error.message : 'Unknown error', stack: error instanceof Error ? error.stack : undefined });\n          reject(error);\n        }\n      });\n    } catch (error) {\n      logger.error('Error generating paystub PDF:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Download paystub as Excel\n   */\n  async downloadPaystubExcel(employeeId: string, paystubId: string): Promise<Buffer> {\n    try {\n      logger.info('Downloading paystub Excel', { employeeId, paystubId });\n      \n      // Get the specific paystub data\n      const paystub = await this.getEmployeePaystubs(employeeId, { limit: 1000 });\n      logger.info('Retrieved paystubs', { count: paystub.length, paystubIds: paystub.map(p => p.id) });\n      \n      const targetPaystub = paystub.find(p => p.id === paystubId);\n      \n      if (!targetPaystub) {\n        logger.error('Paystub not found', { employeeId, paystubId, availableIds: paystub.map(p => p.id) });\n        throw new Error('Paystub not found');\n      }\n\n      // Create Excel file using xlsx library\n      logger.info('Starting Excel generation', { paystubId: targetPaystub.id });\n      \n      const XLSX = require('xlsx');\n      \n      // Create workbook and worksheet\n      const workbook = XLSX.utils.book_new();\n      \n      // Calculate Leave Pay using same logic as payroll system\n      const paidLeaveHours = Number(targetPaystub.paidLeaveHours) || 0;\n      let leavePay = 0;\n      if (paidLeaveHours > 0) {\n        const startDate = new Date(targetPaystub.periodStartDate);\n        const endDate = new Date(targetPaystub.periodEndDate);\n        const expectedWorkingDays = this.calculateWorkingDays(startDate, endDate);\n        const expectedHours = expectedWorkingDays * 8; // 8 hours per working day\n        const baseSalary = Number(targetPaystub.baseSalary) || 0;\n        \n        // Use same proportional calculation as payroll system\n        leavePay = expectedHours > 0 ? (paidLeaveHours / expectedHours) * baseSalary : 0;\n      }\n\n      // Employee Information\n      const employeeData = [\n        ['Employee Information', ''],\n        ['Name', targetPaystub.employeeName],\n        ['Employee ID', targetPaystub.employeeId],\n        ['Position', targetPaystub.position],\n        ['Department', targetPaystub.department],\n        ['Period', targetPaystub.periodName],\n        ['', ''],\n        ['Payroll Details', ''],\n        ['Base Salary', targetPaystub.baseSalary],\n        ['Paid Leave Hours', targetPaystub.paidLeaveHours],\n        ['Leave Pay', leavePay],\n        ['Total Benefits', targetPaystub.totalBenefits],\n        ['Total Deductions', targetPaystub.totalDeductions],\n        ['Net Pay', targetPaystub.netPay],\n        ['', ''],\n        ['Benefits Breakdown', ''],\n        ['Benefit Name', 'Amount']\n      ];\n      \n      // Add benefits\n      if (targetPaystub.benefits && targetPaystub.benefits.length > 0) {\n        targetPaystub.benefits.forEach((benefit: any) => {\n          employeeData.push([benefit.name, `+${benefit.amount}`]);\n        });\n        employeeData.push(['', '']); // Add empty row\n      }\n      \n      // Add deductions section\n      employeeData.push(['Deductions Breakdown', '']);\n      employeeData.push(['Deduction Name', 'Amount']);\n      \n      // Add deductions\n      if (targetPaystub.deductions && targetPaystub.deductions.length > 0) {\n        targetPaystub.deductions.forEach((deduction: any) => {\n          employeeData.push([deduction.name, `-${deduction.amount}`]);\n        });\n      }\n      \n      const worksheet = XLSX.utils.aoa_to_sheet(employeeData);\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Paystub');\n      \n      // Generate Excel buffer\n      const excelBuffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n      logger.info('Excel generation completed', { bufferSize: excelBuffer.length });\n      return excelBuffer;\n    } catch (error) {\n      logger.error('Error generating paystub Excel:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get employee requests (all types)\n   */\n  async getEmployeeRequests(employeeId: string, params: {\n    type?: string;\n    status?: string;\n    limit?: number;\n    offset?: number;\n  } = {}): Promise<EmployeeRequest[]> {\n    const { type, status, limit = 50, offset = 0 } = params;\n    \n    // Get leave requests\n    let leaveQuery = `\n      SELECT \n        l.id,\n        'leave' as type,\n        l.status,\n        l.created_at as \"submittedAt\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"approverName\",\n        l.updated_at as \"approvedAt\",\n        '' as \"rejectionReason\",\n        json_build_object(\n          'leaveType', l.leave_type,\n          'startDate', l.start_date,\n          'endDate', l.end_date,\n          'reason', 'Leave request',\n          'days', CASE\n            WHEN l.start_date IS NOT NULL AND l.end_date IS NOT NULL\n            THEN EXTRACT(DAY FROM (l.end_date - l.start_date)) + 1 -\n                 CASE WHEN EXTRACT(DOW FROM l.start_date) = 0 THEN 1 ELSE 0 END -\n                 CASE WHEN EXTRACT(DOW FROM l.end_date) = 6 THEN 1 ELSE 0 END\n            ELSE 0\n          END\n        ) as details\n      FROM leaves l\n      LEFT JOIN users u ON l.approver_id = u.id\n      WHERE l.employee_id = $1\n    `;\n    \n    if (type && type !== 'leave') {\n      leaveQuery += ' AND FALSE';\n    }\n    \n    if (status) {\n      leaveQuery += ' AND l.status = $2';\n    }\n    \n    leaveQuery += ` ORDER BY l.created_at DESC`;\n\n    // Get time correction requests\n    let timeCorrectionQuery = `\n      SELECT \n        tcr.id,\n        'time_correction' as type,\n        tcr.status,\n        tcr.created_at as \"submittedAt\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"approverName\",\n        tcr.approved_at as \"approvedAt\",\n        tcr.comments as \"rejectionReason\",\n        json_build_object(\n          'correctionDate', tcr.correction_date,\n          'sessionType', tcr.session_type,\n          'requestedClockIn', tcr.requested_clock_in,\n          'requestedClockOut', tcr.requested_clock_out,\n          'reason', tcr.reason\n        ) as details\n      FROM time_correction_requests tcr\n      LEFT JOIN users u ON tcr.approver_id = u.id\n      WHERE tcr.employee_id = $1\n    `;\n    \n    if (type && type !== 'time_correction') {\n      timeCorrectionQuery += ' AND FALSE';\n    }\n    \n    if (status) {\n      timeCorrectionQuery += ' AND tcr.status = $2';\n    }\n    \n    timeCorrectionQuery += ` ORDER BY tcr.created_at DESC`;\n\n    // Get overtime requests\n    let overtimeQuery = `\n      SELECT \n        ot.id,\n        'overtime' as type,\n        ot.status,\n        ot.created_at as \"submittedAt\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"approverName\",\n        ot.approved_at as \"approvedAt\",\n        ot.comments as \"rejectionReason\",\n        json_build_object(\n          'overtimeDate', ot.overtime_date,\n          'startTime', ot.start_time,\n          'endTime', ot.end_time,\n          'requestedHours', ot.requested_hours,\n          'reason', ot.reason\n        ) as details\n      FROM overtime_requests ot\n      LEFT JOIN users u ON ot.approver_id = u.id\n      WHERE ot.employee_id = $1\n    `;\n    \n    if (type && type !== 'overtime') {\n      overtimeQuery += ' AND FALSE';\n    }\n    \n    if (status) {\n      overtimeQuery += ' AND ot.status = $2';\n    }\n    \n    overtimeQuery += ` ORDER BY ot.created_at DESC`;\n\n    // Build parameter array based on what filters are applied\n    const params_array = [employeeId];\n    if (status) {\n      params_array.push(status);\n    }\n    \n    const [leaveResult, timeCorrectionResult, overtimeResult] = await Promise.all([\n      getPool().query(leaveQuery, params_array),\n      getPool().query(timeCorrectionQuery, params_array),\n      getPool().query(overtimeQuery, params_array)\n    ]);\n\n    // Combine and sort all requests\n    const allRequests = [\n      ...leaveResult.rows,\n      ...timeCorrectionResult.rows,\n      ...overtimeResult.rows\n    ].sort((a, b) => new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime());\n\n    // Apply pagination to the combined results\n    const startIndex = offset;\n    const endIndex = offset + limit;\n    const result = allRequests.slice(startIndex, endIndex);\n    \n    // Debug: Log the results\n    console.log('Total requests found:', allRequests.length);\n    console.log('Request IDs:', allRequests.map(r => r.id));\n    console.log('Returning requests:', result.length);\n    console.log('Returned IDs:', result.map(r => r.id));\n    \n    return result;\n  }\n\n  /**\n   * Get request statistics for an employee\n   */\n  async getRequestStats(employeeId: string): Promise<RequestStats> {\n    const query = `\n      SELECT \n        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1) +\n        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1) +\n        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1) as total,\n        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1 AND status = 'pending') +\n        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1 AND status = 'pending') +\n        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1 AND status = 'pending') as pending,\n        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1 AND status = 'approved') +\n        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1 AND status = 'approved') +\n        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1 AND status = 'approved') as approved,\n        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1 AND status = 'rejected') +\n        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1 AND status = 'rejected') +\n        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1 AND status = 'rejected') as rejected\n    `;\n\n    const result = await getPool().query(query, [employeeId]);\n    const row = result.rows[0];\n    \n    return {\n      total: parseInt(row.total),\n      pending: parseInt(row.pending),\n      approved: parseInt(row.approved),\n      rejected: parseInt(row.rejected),\n    };\n  }\n\n  /**\n   * Get employee paystubs\n   */\n  async getEmployeePaystubs(employeeId: string, params: {\n    year?: number;\n    month?: number;\n    page?: number;\n    limit?: number;\n  } = {}): Promise<PaystubData[]> {\n    const { year, month, page = 1, limit = 10 } = params;\n    const offset = (page - 1) * limit;\n\n    let whereClause = 'WHERE pr.employee_id = $1';\n    const queryParams: any[] = [employeeId];\n    let paramIndex = 2;\n\n    if (year) {\n      whereClause += ` AND EXTRACT(YEAR FROM pp.start_date) = $${paramIndex++}`;\n      queryParams.push(year);\n    }\n\n    if (month) {\n      whereClause += ` AND EXTRACT(MONTH FROM pp.start_date) = $${paramIndex++}`;\n      queryParams.push(month);\n    }\n\n    const query = `\n      SELECT \n        pr.id,\n        pr.payroll_period_id,\n        pp.period_name,\n        pp.start_date as period_start_date,\n        pp.end_date as period_end_date,\n        e.employee_id,\n        CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n        e.position,\n        e.department_id,\n        d.name as department_name,\n        e.base_salary,\n        pr.total_regular_hours,\n        pr.total_overtime_hours,\n        pr.total_late_hours,\n        pr.paid_leave_hours,\n        pr.gross_pay,\n        pr.total_deductions,\n        pr.total_benefits,\n        pr.net_pay,\n        pr.late_deductions,\n        pr.status,\n        pr.created_at,\n        pr.updated_at\n      FROM payroll_records pr\n      JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n      JOIN employees e ON pr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n      ORDER BY pp.start_date DESC\n      LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n    `;\n\n    queryParams.push(limit, offset);\n    const result = await getPool().query(query, queryParams);\n\n    // Get deductions for each paystub\n    const paystubs: PaystubData[] = [];\n    for (const row of result.rows) {\n      const deductionsQuery = `\n        SELECT \n          pd.name,\n          pd.amount\n        FROM payroll_deductions pd\n        WHERE pd.payroll_record_id = $1\n        ORDER BY pd.name\n      `;\n\n      const deductionsResult = await getPool().query(deductionsQuery, [row.id]);\n      \n      // Get benefits for this paystub\n      const benefitsQuery = `\n        SELECT \n          bt.name,\n          eb.amount\n        FROM employee_benefits eb\n        JOIN benefit_types bt ON eb.benefit_type_id = bt.id\n        JOIN payroll_periods pp ON pp.id = $2\n        WHERE eb.employee_id = $1 \n          AND eb.is_active = true\n          AND (eb.end_date IS NULL OR eb.end_date >= pp.start_date)\n          AND eb.start_date <= pp.end_date\n        ORDER BY bt.name\n      `;\n      \n      const benefitsResult = await getPool().query(benefitsQuery, [employeeId, row.payroll_period_id]);\n      \n      paystubs.push({\n        id: row.id,\n        periodName: row.period_name,\n        periodStartDate: row.period_start_date,\n        periodEndDate: row.period_end_date,\n        employeeId: row.employee_id,\n        employeeName: row.employee_name,\n        position: row.position,\n        department: row.department_name || 'Unassigned',\n        baseSalary: parseFloat(row.base_salary),\n        totalRegularHours: parseFloat(row.total_regular_hours),\n        totalOvertimeHours: parseFloat(row.total_overtime_hours),\n        paidLeaveHours: parseFloat(row.paid_leave_hours) || 0,\n        grossPay: parseFloat(row.gross_pay),\n        totalDeductions: parseFloat(row.total_deductions),\n        totalBenefits: parseFloat(row.total_benefits),\n        netPay: parseFloat(row.net_pay),\n        lateDeductions: parseFloat(row.late_deductions),\n        deductions: deductionsResult.rows.map(d => ({\n          name: d.name,\n          amount: parseFloat(d.amount)\n        })),\n        benefits: benefitsResult.rows.map(b => ({\n          name: b.name,\n          amount: parseFloat(b.amount)\n        })),\n        createdAt: row.created_at\n      });\n    }\n\n    return paystubs;\n  }\n\n  /**\n   * Get latest employee paystub\n   */\n  async getLatestPaystub(employeeId: string): Promise<PaystubData | null> {\n    // First try to get the latest payroll record\n    const query = `\n      SELECT \n        pr.id,\n        pr.payroll_period_id,\n        pp.period_name,\n        e.employee_id,\n        CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n        e.position,\n        e.department_id,\n        d.name as department_name,\n        e.base_salary,\n        pr.total_regular_hours,\n        pr.total_overtime_hours,\n        pr.total_late_hours,\n        pr.paid_leave_hours,\n        pr.gross_pay,\n        pr.total_deductions,\n        pr.total_benefits,\n        pr.net_pay,\n        pr.late_deductions,\n        pr.status,\n        pr.created_at,\n        pr.updated_at\n      FROM payroll_records pr\n      JOIN payroll_periods pp ON pr.payroll_period_id = pp.id\n      JOIN employees e ON pr.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE pr.employee_id = $1\n      ORDER BY pp.start_date DESC\n      LIMIT 1\n    `;\n\n    const result = await getPool().query(query, [employeeId]);\n    \n    if (result.rows.length === 0) {\n      // If no payroll records exist, return employee info with zero values\n      const employeeQuery = `\n        SELECT \n          e.employee_id as \"employeeId\",\n          CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n          e.position,\n          d.name as department,\n          e.base_salary as \"baseSalary\"\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        WHERE e.id = $1\n      `;\n\n      const employeeResult = await getPool().query(employeeQuery, [employeeId]);\n      \n      if (employeeResult.rows.length === 0) {\n        return null;\n      }\n\n      const employee = employeeResult.rows[0];\n      \n      return {\n        id: 'no-payroll',\n        periodName: 'No Payroll Period',\n        periodStartDate: new Date().toISOString(),\n        periodEndDate: new Date().toISOString(),\n        employeeId: employee.employeeId,\n        employeeName: employee.employeeName,\n        position: employee.position,\n        department: employee.department || 'Unassigned',\n        baseSalary: parseFloat(employee.baseSalary),\n        totalRegularHours: 0,\n        totalOvertimeHours: 0,\n        paidLeaveHours: 0,\n        grossPay: 0,\n        totalDeductions: 0,\n        totalBenefits: 0,\n        netPay: 0,\n        lateDeductions: 0,\n        deductions: [],\n        benefits: [],\n        createdAt: new Date().toISOString()\n      };\n    }\n\n    const row = result.rows[0];\n\n    // Get deductions for the paystub\n    const deductionsQuery = `\n      SELECT \n        pd.name,\n        pd.amount\n      FROM payroll_deductions pd\n      WHERE pd.payroll_record_id = $1\n      ORDER BY pd.name\n    `;\n\n    const deductionsResult = await getPool().query(deductionsQuery, [row.id]);\n\n    // Get benefits for this paystub\n    const benefitsQuery = `\n      SELECT \n        bt.name,\n        eb.amount\n      FROM employee_benefits eb\n      JOIN benefit_types bt ON eb.benefit_type_id = bt.id\n      JOIN payroll_periods pp ON pp.id = $2\n      WHERE eb.employee_id = $1 \n        AND eb.is_active = true\n        AND (eb.end_date IS NULL OR eb.end_date >= pp.start_date)\n        AND eb.start_date <= pp.end_date\n      ORDER BY bt.name\n    `;\n    \n    const benefitsResult = await getPool().query(benefitsQuery, [employeeId, row.payroll_period_id]);\n\n    return {\n      id: row.id,\n      periodName: row.period_name,\n      periodStartDate: row.periodStartDate,\n      periodEndDate: row.periodEndDate,\n      employeeId: row.employee_id,\n      employeeName: row.employee_name,\n      position: row.position,\n      department: row.department_name || 'Unassigned',\n      baseSalary: parseFloat(row.base_salary),\n      totalRegularHours: parseFloat(row.total_regular_hours),\n      totalOvertimeHours: parseFloat(row.total_overtime_hours),\n      paidLeaveHours: parseFloat(row.paid_leave_hours) || 0,\n      grossPay: parseFloat(row.gross_pay),\n      totalDeductions: parseFloat(row.total_deductions),\n      totalBenefits: parseFloat(row.total_benefits),\n      netPay: parseFloat(row.net_pay),\n      lateDeductions: parseFloat(row.late_deductions),\n      deductions: deductionsResult.rows.map(d => ({\n        name: d.name,\n        amount: parseFloat(d.amount)\n      })),\n      benefits: benefitsResult.rows.map(b => ({\n        name: b.name,\n        amount: parseFloat(b.amount)\n      })),\n      createdAt: row.created_at\n    };\n  }\n}\n\nexport const employeeService = new EmployeeService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cac9651e168558c2ad3d561ce88ad509486a81ac"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7esvhu1wu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7esvhu1wu();
var __importDefault =
/* istanbul ignore next */
(cov_7esvhu1wu().s[0]++,
/* istanbul ignore next */
(cov_7esvhu1wu().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_7esvhu1wu().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_7esvhu1wu().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_7esvhu1wu().f[0]++;
  cov_7esvhu1wu().s[1]++;
  return /* istanbul ignore next */(cov_7esvhu1wu().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_7esvhu1wu().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_7esvhu1wu().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_7esvhu1wu().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_7esvhu1wu().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_7esvhu1wu().s[3]++;
exports.employeeService = exports.EmployeeService = void 0;
const database_1 =
/* istanbul ignore next */
(cov_7esvhu1wu().s[4]++, require("../../config/database"));
const logger_1 =
/* istanbul ignore next */
(cov_7esvhu1wu().s[5]++, __importDefault(require("../../utils/logger")));
class EmployeeService {
  /**
   * Calculate working days between two dates (excluding weekends)
   */
  calculateWorkingDays(startDate, endDate) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[1]++;
    let workingDays =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[6]++, 0);
    const currentDate =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[7]++, new Date(startDate));
    /* istanbul ignore next */
    cov_7esvhu1wu().s[8]++;
    while (currentDate <= endDate) {
      const dayOfWeek =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[9]++, currentDate.getDay());
      // Count Monday (1) through Friday (5) as working days
      /* istanbul ignore next */
      cov_7esvhu1wu().s[10]++;
      if (
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[4][0]++, dayOfWeek >= 1) &&
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[4][1]++, dayOfWeek <= 5)) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[3][0]++;
        cov_7esvhu1wu().s[11]++;
        workingDays++;
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[3][1]++;
      }
      cov_7esvhu1wu().s[12]++;
      currentDate.setDate(currentDate.getDate() + 1);
    }
    /* istanbul ignore next */
    cov_7esvhu1wu().s[13]++;
    return workingDays;
  }
  /**
   * Get employee ID by user ID
   */
  async getEmployeeIdByUserId(userId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[2]++;
    cov_7esvhu1wu().s[14]++;
    logger_1.default.info('getEmployeeIdByUserId called with userId:', {
      userId
    });
    const query =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[15]++, `
      SELECT id
      FROM employees
      WHERE user_id = $1
    `);
    const result =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[16]++, await (0, database_1.getPool)().query(query, [userId]));
    /* istanbul ignore next */
    cov_7esvhu1wu().s[17]++;
    logger_1.default.info('getEmployeeIdByUserId query result:', {
      result: result.rows
    });
    /* istanbul ignore next */
    cov_7esvhu1wu().s[18]++;
    return result.rows.length > 0 ?
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[5][0]++, result.rows[0].id) :
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[5][1]++, null);
  }
  /**
   * Get employee dashboard data
   */
  async getDashboard(employeeId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[3]++;
    cov_7esvhu1wu().s[19]++;
    try {
      // Get employee basic info
      const employeeInfo =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[20]++, await this.getEmployeeInfo(employeeId));
      // Get today's attendance status
      const todayStatus =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[21]++, await this.getTodayAttendanceStatus(employeeId));
      // Get monthly attendance stats
      const monthlyStats =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[22]++, await this.getMonthlyAttendanceStats(employeeId));
      // Get leave balance
      const leaveBalance =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[23]++, await this.getLeaveBalance(employeeId));
      // Get recent activity
      const recentActivity =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[24]++, await this.getRecentActivity(employeeId));
      // Get pending requests count
      const pendingRequests =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[25]++, await this.getPendingRequestsCount(employeeId));
      // Get upcoming events (placeholder for now)
      const upcomingEvents =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[26]++, await this.getUpcomingEvents(employeeId));
      /* istanbul ignore next */
      cov_7esvhu1wu().s[27]++;
      return {
        employee: employeeInfo,
        attendance: {
          ...todayStatus,
          ...monthlyStats
        },
        leaveBalance,
        recentActivity,
        pendingRequests,
        upcomingEvents
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_7esvhu1wu().s[28]++;
      logger_1.default.error('Error getting employee dashboard:', {
        error,
        employeeId
      });
      /* istanbul ignore next */
      cov_7esvhu1wu().s[29]++;
      throw error;
    }
  }
  /**
   * Get employee basic information
   */
  async getEmployeeInfo(employeeId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[4]++;
    const query =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[30]++, `
      SELECT 
        e.id,
        e.employee_id as "employeeId",
        CONCAT(u.first_name, ' ', u.last_name) as name,
        d.name as department,
        e.position,
        e.hire_date as "hireDate"
      FROM employees e
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      WHERE e.id = $1
    `);
    const result =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[31]++, await (0, database_1.getPool)().query(query, [employeeId]));
    /* istanbul ignore next */
    cov_7esvhu1wu().s[32]++;
    if (result.rows.length === 0) {
      /* istanbul ignore next */
      cov_7esvhu1wu().b[6][0]++;
      cov_7esvhu1wu().s[33]++;
      throw new Error('Employee not found');
    } else
    /* istanbul ignore next */
    {
      cov_7esvhu1wu().b[6][1]++;
    }
    const row =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[34]++, result.rows[0]);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[35]++;
    return {
      id: row.id,
      name: row.name,
      employeeId: row.employeeId,
      department:
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[7][0]++, row.department) ||
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[7][1]++, 'Unassigned'),
      position: row.position,
      hireDate: row.hireDate
    };
  }
  /**
   * Get today's attendance status with session details
   */
  async getTodayAttendanceStatus(employeeId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[5]++;
    const today =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[36]++, new Date().toISOString().split('T')[0]);
    // Get overall attendance record
    const recordQuery =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[37]++, `
      SELECT 
        ar.overall_status as "overallStatus",
        ar.date
      FROM attendance_records ar
      WHERE ar.employee_id = $1 AND ar.date = $2
    `);
    const recordResult =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[38]++, await (0, database_1.getPool)().query(recordQuery, [employeeId, today]));
    /* istanbul ignore next */
    cov_7esvhu1wu().s[39]++;
    if (recordResult.rows.length === 0) {
      /* istanbul ignore next */
      cov_7esvhu1wu().b[8][0]++;
      cov_7esvhu1wu().s[40]++;
      return {
        todayStatus: 'absent',
        clockInTime: undefined,
        clockOutTime: undefined,
        totalHours: 0,
        morningClockIn: undefined,
        morningClockOut: undefined,
        afternoonClockIn: undefined,
        afternoonClockOut: undefined,
        breakStart: undefined,
        breakEnd: undefined
      };
    } else
    /* istanbul ignore next */
    {
      cov_7esvhu1wu().b[8][1]++;
    }
    const record =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[41]++, recordResult.rows[0]);
    // Get all sessions for today
    const sessionsQuery =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[42]++, `
      SELECT 
        s.session_type as "sessionType",
        s.clock_in as "clockIn",
        s.clock_out as "clockOut",
        s.calculated_hours as "calculatedHours",
        s.created_at as "createdAt"
      FROM attendance_sessions s
      JOIN attendance_records ar ON s.attendance_record_id = ar.id
      WHERE ar.employee_id = $1 AND ar.date = $2
      ORDER BY s.created_at ASC
    `);
    const sessionsResult =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[43]++, await (0, database_1.getPool)().query(sessionsQuery, [employeeId, today]));
    let morningClockIn, morningClockOut, afternoonClockIn, afternoonClockOut, breakStart, breakEnd;
    let totalHours =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[44]++, 0);
    let firstClockIn, lastClockOut;
    /* istanbul ignore next */
    cov_7esvhu1wu().s[45]++;
    sessionsResult.rows.forEach(session => {
      /* istanbul ignore next */
      cov_7esvhu1wu().f[6]++;
      cov_7esvhu1wu().s[46]++;
      totalHours +=
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[9][0]++, parseFloat(session.calculatedHours)) ||
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[9][1]++, 0);
      /* istanbul ignore next */
      cov_7esvhu1wu().s[47]++;
      if (session.sessionType === 'morning_in') {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[10][0]++;
        cov_7esvhu1wu().s[48]++;
        morningClockIn = session.clockIn;
      } else {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[10][1]++;
        cov_7esvhu1wu().s[49]++;
        if (session.sessionType === 'morning_out') {
          /* istanbul ignore next */
          cov_7esvhu1wu().b[11][0]++;
          cov_7esvhu1wu().s[50]++;
          morningClockOut = session.clockOut;
        } else {
          /* istanbul ignore next */
          cov_7esvhu1wu().b[11][1]++;
          cov_7esvhu1wu().s[51]++;
          if (session.sessionType === 'afternoon_in') {
            /* istanbul ignore next */
            cov_7esvhu1wu().b[12][0]++;
            cov_7esvhu1wu().s[52]++;
            afternoonClockIn = session.clockIn;
          } else {
            /* istanbul ignore next */
            cov_7esvhu1wu().b[12][1]++;
            cov_7esvhu1wu().s[53]++;
            if (session.sessionType === 'afternoon_out') {
              /* istanbul ignore next */
              cov_7esvhu1wu().b[13][0]++;
              cov_7esvhu1wu().s[54]++;
              afternoonClockOut = session.clockOut;
            } else
            /* istanbul ignore next */
            {
              cov_7esvhu1wu().b[13][1]++;
            }
          }
        }
      }
      // Track first clock in and last clock out for overall times
      /* istanbul ignore next */
      cov_7esvhu1wu().s[55]++;
      if (
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[15][0]++, session.clockIn) && (
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[15][1]++, !firstClockIn) ||
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[15][2]++, new Date(session.clockIn) < new Date(firstClockIn)))) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[14][0]++;
        cov_7esvhu1wu().s[56]++;
        firstClockIn = session.clockIn;
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[14][1]++;
      }
      cov_7esvhu1wu().s[57]++;
      if (
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[17][0]++, session.clockOut) && (
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[17][1]++, !lastClockOut) ||
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[17][2]++, new Date(session.clockOut) > new Date(lastClockOut)))) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[16][0]++;
        cov_7esvhu1wu().s[58]++;
        lastClockOut = session.clockOut;
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[16][1]++;
      }
    });
    /* istanbul ignore next */
    cov_7esvhu1wu().s[59]++;
    return {
      todayStatus:
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[18][0]++, record.overallStatus) ||
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[18][1]++, 'absent'),
      clockInTime: firstClockIn,
      clockOutTime: lastClockOut,
      totalHours: totalHours,
      morningClockIn,
      morningClockOut,
      afternoonClockIn,
      afternoonClockOut,
      breakStart,
      breakEnd
    };
  }
  /**
   * Get monthly attendance statistics
   */
  async getMonthlyAttendanceStats(employeeId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[7]++;
    const now =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[60]++, new Date());
    const startOfMonth =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[61]++, new Date(now.getFullYear(), now.getMonth(), 1));
    const endOfMonth =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[62]++, new Date(now.getFullYear(), now.getMonth() + 1, 0));
    const query =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[63]++, `
      SELECT 
        COUNT(*) FILTER (WHERE overall_status = 'present') as present,
        COUNT(*) FILTER (WHERE overall_status = 'absent') as absent,
        COUNT(*) FILTER (WHERE overall_status = 'late') as late
      FROM attendance_records
      WHERE employee_id = $1 
        AND date >= $2 
        AND date <= $3
    `);
    const result =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[64]++, await (0, database_1.getPool)().query(query, [employeeId, startOfMonth, endOfMonth]));
    const row =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[65]++, result.rows[0]);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[66]++;
    return {
      monthlyPresent:
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[19][0]++, parseInt(row.present)) ||
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[19][1]++, 0),
      monthlyAbsent:
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[20][0]++, parseInt(row.absent)) ||
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[20][1]++, 0),
      monthlyLate:
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[21][0]++, parseInt(row.late)) ||
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[21][1]++, 0)
    };
  }
  /**
   * Get leave balance
   */
  async getLeaveBalance(employeeId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[8]++;
    cov_7esvhu1wu().s[67]++;
    try {
      // Get leave balances from the actual database schema
      const query =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[68]++, `
        SELECT 
          leave_type,
          balance
        FROM leave_balances
        WHERE employee_id = $1
      `);
      const result =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[69]++, await (0, database_1.getPool)().query(query, [employeeId]));
      const balance =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[70]++, {
        vacation: 0,
        sick: 0,
        maternity: 0,
        other: 0
      });
      /* istanbul ignore next */
      cov_7esvhu1wu().s[71]++;
      result.rows.forEach(row => {
        /* istanbul ignore next */
        cov_7esvhu1wu().f[9]++;
        cov_7esvhu1wu().s[72]++;
        switch (row.leave_type) {
          case 'vacation':
            /* istanbul ignore next */
            cov_7esvhu1wu().b[22][0]++;
            cov_7esvhu1wu().s[73]++;
            balance.vacation = parseFloat(row.balance);
            /* istanbul ignore next */
            cov_7esvhu1wu().s[74]++;
            break;
          case 'sick':
            /* istanbul ignore next */
            cov_7esvhu1wu().b[22][1]++;
            cov_7esvhu1wu().s[75]++;
            balance.sick = parseFloat(row.balance);
            /* istanbul ignore next */
            cov_7esvhu1wu().s[76]++;
            break;
          case 'other':
            /* istanbul ignore next */
            cov_7esvhu1wu().b[22][2]++;
            cov_7esvhu1wu().s[77]++;
            balance.other = parseFloat(row.balance);
            /* istanbul ignore next */
            cov_7esvhu1wu().s[78]++;
            break;
          case 'maternity':
            /* istanbul ignore next */
            cov_7esvhu1wu().b[22][3]++;
            cov_7esvhu1wu().s[79]++;
            balance.maternity = parseFloat(row.balance);
            /* istanbul ignore next */
            cov_7esvhu1wu().s[80]++;
            break;
        }
      });
      /* istanbul ignore next */
      cov_7esvhu1wu().s[81]++;
      return balance;
    } catch (error) {
      /* istanbul ignore next */
      cov_7esvhu1wu().s[82]++;
      logger_1.default.warn('Error getting leave balance, returning defaults:', {
        error,
        employeeId
      });
      /* istanbul ignore next */
      cov_7esvhu1wu().s[83]++;
      return {
        vacation: 0,
        sick: 0,
        maternity: 0,
        other: 0
      };
    }
  }
  /**
   * Get recent activity
   */
  async getRecentActivity(employeeId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[10]++;
    // Get recent attendance sessions
    const attendanceQuery =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[84]++, `
      SELECT 
        s.id,
        s.session_type as "sessionType",
        s.clock_in as "clockIn",
        s.clock_out as "clockOut",
        s.created_at as "createdAt"
      FROM attendance_sessions s
      JOIN attendance_records ar ON s.attendance_record_id = ar.id
      WHERE ar.employee_id = $1
      ORDER BY s.created_at DESC
      LIMIT 5
    `);
    const attendanceResult =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[85]++, await (0, database_1.getPool)().query(attendanceQuery, [employeeId]));
    const activities =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[86]++, attendanceResult.rows.map(row => {
      /* istanbul ignore next */
      cov_7esvhu1wu().f[11]++;
      cov_7esvhu1wu().s[87]++;
      return {
        id: row.id,
        type: row.sessionType === 'clock_in' ?
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[23][0]++, 'clock_in') :
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[23][1]++, 'clock_out'),
        description: row.sessionType === 'clock_in' ?
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[24][0]++, `Clocked in at ${new Date(row.clockIn).toLocaleTimeString()}`) :
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[24][1]++, `Clocked out at ${new Date(row.clockOut).toLocaleTimeString()}`),
        timestamp: row.createdAt,
        status: 'success'
      };
    }));
    /* istanbul ignore next */
    cov_7esvhu1wu().s[88]++;
    return activities;
  }
  /**
   * Get pending requests count
   */
  async getPendingRequestsCount(employeeId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[12]++;
    const query =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[89]++, `
      SELECT 
        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1 AND status = 'pending') +
        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1 AND status = 'pending') +
        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1 AND status = 'pending') as total
    `);
    const result =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[90]++, await (0, database_1.getPool)().query(query, [employeeId]));
    /* istanbul ignore next */
    cov_7esvhu1wu().s[91]++;
    return /* istanbul ignore next */(cov_7esvhu1wu().b[25][0]++, parseInt(result.rows[0].total)) ||
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[25][1]++, 0);
  }
  /**
   * Get upcoming events (placeholder)
   */
  async getUpcomingEvents(_employeeId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[13]++;
    cov_7esvhu1wu().s[92]++;
    // Placeholder implementation - can be extended with actual events
    return [{
      id: '1',
      title: 'Team Meeting',
      date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
      // Tomorrow
      type: 'meeting'
    }];
  }
  /**
   * Get employee profile
   */
  async getEmployeeProfile(employeeId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[14]++;
    const query =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[93]++, `
      SELECT 
        e.id,
        e.employee_id as "employeeId",
        u.first_name as "firstName",
        u.last_name as "lastName",
        u.email,
        u.phone,
        u.address,
        d.name as department,
        e.position,
        e.employment_type as "employmentType",
        e.hire_date as "hireDate",
        e.base_salary as "baseSalary",
        e.status
      FROM employees e
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      WHERE e.id = $1
    `);
    const result =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[94]++, await (0, database_1.getPool)().query(query, [employeeId]));
    /* istanbul ignore next */
    cov_7esvhu1wu().s[95]++;
    if (result.rows.length === 0) {
      /* istanbul ignore next */
      cov_7esvhu1wu().b[26][0]++;
      cov_7esvhu1wu().s[96]++;
      throw new Error('Employee not found');
    } else
    /* istanbul ignore next */
    {
      cov_7esvhu1wu().b[26][1]++;
    }
    const row =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[97]++, result.rows[0]);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[98]++;
    return {
      id: row.id,
      employeeId: row.employeeId,
      firstName: row.firstName,
      lastName: row.lastName,
      email: row.email,
      phone: row.phone,
      address: row.address,
      department:
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[27][0]++, row.department) ||
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[27][1]++, 'Unassigned'),
      position: row.position,
      employmentType: row.employmentType,
      hireDate: row.hireDate,
      baseSalary: parseFloat(row.baseSalary),
      status: row.status
    };
  }
  /**
   * Update employee profile
   */
  async updateEmployeeProfile(employeeId, data) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[15]++;
    const client =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[99]++, await (0, database_1.getPool)().connect());
    /* istanbul ignore next */
    cov_7esvhu1wu().s[100]++;
    try {
      /* istanbul ignore next */
      cov_7esvhu1wu().s[101]++;
      await client.query('BEGIN');
      // Update user table
      const userUpdateFields =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[102]++, []);
      const userUpdateValues =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[103]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[104]++, 1);
      /* istanbul ignore next */
      cov_7esvhu1wu().s[105]++;
      if (data.firstName) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[28][0]++;
        cov_7esvhu1wu().s[106]++;
        userUpdateFields.push(`first_name = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_7esvhu1wu().s[107]++;
        userUpdateValues.push(data.firstName);
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[28][1]++;
      }
      cov_7esvhu1wu().s[108]++;
      if (data.lastName) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[29][0]++;
        cov_7esvhu1wu().s[109]++;
        userUpdateFields.push(`last_name = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_7esvhu1wu().s[110]++;
        userUpdateValues.push(data.lastName);
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[29][1]++;
      }
      cov_7esvhu1wu().s[111]++;
      if (data.email) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[30][0]++;
        cov_7esvhu1wu().s[112]++;
        userUpdateFields.push(`email = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_7esvhu1wu().s[113]++;
        userUpdateValues.push(data.email);
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[30][1]++;
      }
      cov_7esvhu1wu().s[114]++;
      if (data.phone) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[31][0]++;
        cov_7esvhu1wu().s[115]++;
        userUpdateFields.push(`phone = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_7esvhu1wu().s[116]++;
        userUpdateValues.push(data.phone);
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[31][1]++;
      }
      cov_7esvhu1wu().s[117]++;
      if (data.address) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[32][0]++;
        cov_7esvhu1wu().s[118]++;
        userUpdateFields.push(`address = $${paramIndex++}`);
        /* istanbul ignore next */
        cov_7esvhu1wu().s[119]++;
        userUpdateValues.push(data.address);
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[32][1]++;
      }
      cov_7esvhu1wu().s[120]++;
      if (userUpdateFields.length > 0) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[33][0]++;
        cov_7esvhu1wu().s[121]++;
        userUpdateFields.push(`updated_at = CURRENT_TIMESTAMP`);
        /* istanbul ignore next */
        cov_7esvhu1wu().s[122]++;
        userUpdateValues.push(employeeId);
        const userUpdateQuery =
        /* istanbul ignore next */
        (cov_7esvhu1wu().s[123]++, `
          UPDATE users 
          SET ${userUpdateFields.join(', ')}
          FROM employees e
          WHERE e.user_id = users.id AND e.id = $${paramIndex}
        `);
        /* istanbul ignore next */
        cov_7esvhu1wu().s[124]++;
        await client.query(userUpdateQuery, userUpdateValues);
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[33][1]++;
      }
      cov_7esvhu1wu().s[125]++;
      await client.query('COMMIT');
      // Return updated profile
      /* istanbul ignore next */
      cov_7esvhu1wu().s[126]++;
      return await this.getEmployeeProfile(employeeId);
    } catch (error) {
      /* istanbul ignore next */
      cov_7esvhu1wu().s[127]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_7esvhu1wu().s[128]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_7esvhu1wu().s[129]++;
      client.release();
    }
  }
  /**
   * Get attendance history for an employee
   */
  async getAttendanceHistory(employeeId, month) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[16]++;
    const query =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[130]++, `
      SELECT 
        ar.id,
        ar.date,
        s.clock_in as "clockIn",
        s.clock_out as "clockOut",
        s.calculated_hours as "totalHours",
        ar.overall_status as status,
        0 as "overtimeHours",
        '' as notes
      FROM attendance_records ar
      LEFT JOIN attendance_sessions s ON ar.id = s.attendance_record_id
      WHERE ar.employee_id = $1
      ${month ?
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[34][0]++, 'AND DATE_TRUNC(\'month\', ar.date) = DATE_TRUNC(\'month\', $2::timestamp)') :
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[34][1]++, '')}
      ORDER BY ar.date DESC
    `);
    // Convert month string (e.g., "2025-09") to a proper date (e.g., "2025-09-01")
    const params =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[131]++, month ?
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[35][0]++, [employeeId, `${month}-01`]) :
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[35][1]++, [employeeId]));
    const result =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[132]++, await (0, database_1.getPool)().query(query, params));
    /* istanbul ignore next */
    cov_7esvhu1wu().s[133]++;
    return result.rows;
  }
  /**
   * Get attendance summary for an employee
   */
  async getAttendanceSummary(employeeId, month) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[17]++;
    const query =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[134]++, `
      SELECT 
        COUNT(*) as total_days,
        COUNT(CASE WHEN ar.overall_status = 'present' THEN 1 END) as present_days,
        COUNT(CASE WHEN ar.overall_status = 'absent' THEN 1 END) as absent_days,
        COUNT(CASE WHEN ar.overall_status = 'late' THEN 1 END) as late_days,
        COALESCE(SUM(s.calculated_hours), 0) as total_hours,
        COALESCE(AVG(s.calculated_hours), 0) as average_hours,
        0 as overtime_hours
      FROM attendance_records ar
      LEFT JOIN attendance_sessions s ON ar.id = s.attendance_record_id
      WHERE ar.employee_id = $1
      ${month ?
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[36][0]++, 'AND DATE_TRUNC(\'month\', ar.date) = DATE_TRUNC(\'month\', $2::timestamp)') :
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[36][1]++, '')}
    `);
    // Convert month string (e.g., "2025-09") to a proper date (e.g., "2025-09-01")
    const params =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[135]++, month ?
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[37][0]++, [employeeId, `${month}-01`]) :
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[37][1]++, [employeeId]));
    const result =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[136]++, await (0, database_1.getPool)().query(query, params));
    const row =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[137]++, result.rows[0]);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[138]++;
    return {
      totalDays: parseInt(row.total_days),
      presentDays: parseInt(row.present_days),
      absentDays: parseInt(row.absent_days),
      lateDays: parseInt(row.late_days),
      totalHours: parseFloat(row.total_hours),
      averageHours: parseFloat(row.average_hours),
      overtimeHours: parseFloat(row.overtime_hours)
    };
  }
  /**
   * Download paystub as PDF
   */
  async downloadPaystubPDF(employeeId, paystubId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[18]++;
    cov_7esvhu1wu().s[139]++;
    try {
      /* istanbul ignore next */
      cov_7esvhu1wu().s[140]++;
      logger_1.default.info('Downloading paystub PDF', {
        employeeId,
        paystubId
      });
      // Get the specific paystub data
      const paystub =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[141]++, await this.getEmployeePaystubs(employeeId, {
        limit: 1000
      }));
      /* istanbul ignore next */
      cov_7esvhu1wu().s[142]++;
      logger_1.default.info('Retrieved paystubs', {
        count: paystub.length,
        paystubIds: paystub.map(p => {
          /* istanbul ignore next */
          cov_7esvhu1wu().f[19]++;
          cov_7esvhu1wu().s[143]++;
          return p.id;
        })
      });
      const targetPaystub =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[144]++, paystub.find(p => {
        /* istanbul ignore next */
        cov_7esvhu1wu().f[20]++;
        cov_7esvhu1wu().s[145]++;
        return p.id === paystubId;
      }));
      /* istanbul ignore next */
      cov_7esvhu1wu().s[146]++;
      if (!targetPaystub) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[38][0]++;
        cov_7esvhu1wu().s[147]++;
        logger_1.default.error('Paystub not found', {
          employeeId,
          paystubId,
          availableIds: paystub.map(p => {
            /* istanbul ignore next */
            cov_7esvhu1wu().f[21]++;
            cov_7esvhu1wu().s[148]++;
            return p.id;
          })
        });
        /* istanbul ignore next */
        cov_7esvhu1wu().s[149]++;
        throw new Error('Paystub not found');
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[38][1]++;
      }
      // Generate PDF using the existing payroll service method
      cov_7esvhu1wu().s[150]++;
      logger_1.default.info('Starting PDF generation', {
        paystubId: targetPaystub.id
      });
      const PDFDocument =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[151]++, require('pdfkit'));
      const doc =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[152]++, new PDFDocument());
      const buffers =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[153]++, []);
      /* istanbul ignore next */
      cov_7esvhu1wu().s[154]++;
      doc.on('data', buffers.push.bind(buffers));
      /* istanbul ignore next */
      cov_7esvhu1wu().s[155]++;
      return new Promise((resolve, reject) => {
        /* istanbul ignore next */
        cov_7esvhu1wu().f[22]++;
        cov_7esvhu1wu().s[156]++;
        doc.on('end', () => {
          /* istanbul ignore next */
          cov_7esvhu1wu().f[23]++;
          const pdfBuffer =
          /* istanbul ignore next */
          (cov_7esvhu1wu().s[157]++, Buffer.concat(buffers));
          /* istanbul ignore next */
          cov_7esvhu1wu().s[158]++;
          logger_1.default.info('PDF generation completed', {
            bufferSize: pdfBuffer.length
          });
          /* istanbul ignore next */
          cov_7esvhu1wu().s[159]++;
          resolve(pdfBuffer);
        });
        /* istanbul ignore next */
        cov_7esvhu1wu().s[160]++;
        doc.on('error', error => {
          /* istanbul ignore next */
          cov_7esvhu1wu().f[24]++;
          cov_7esvhu1wu().s[161]++;
          logger_1.default.error('PDF generation error', {
            error: error.message,
            stack: error.stack
          });
          /* istanbul ignore next */
          cov_7esvhu1wu().s[162]++;
          reject(error);
        });
        /* istanbul ignore next */
        cov_7esvhu1wu().s[163]++;
        try {
          /* istanbul ignore next */
          cov_7esvhu1wu().s[164]++;
          // H1 - Company header
          doc.fontSize(20).font('Helvetica-Bold').text('TITO HR MANAGEMENT SYSTEM', 50, 50);
          // H2 - Payslip title
          /* istanbul ignore next */
          cov_7esvhu1wu().s[165]++;
          doc.fontSize(16).font('Helvetica-Bold').text('PAYSLIP', 50, 85);
          // H3 - Pay period
          /* istanbul ignore next */
          cov_7esvhu1wu().s[166]++;
          doc.fontSize(12).font('Helvetica-Bold').text(`Pay period: ${targetPaystub.periodName}`, 50, 115);
          // H3 - Employee Information
          /* istanbul ignore next */
          cov_7esvhu1wu().s[167]++;
          doc.fontSize(12).font('Helvetica-Bold').text('Employee Information', 50, 145);
          /* istanbul ignore next */
          cov_7esvhu1wu().s[168]++;
          doc.fontSize(10).font('Helvetica').text(`Employee ID: ${targetPaystub.employeeId}`, 50, 170).text(`Name: ${targetPaystub.employeeName}`, 50, 185).text(`Department: ${targetPaystub.department}`, 50, 200).text(`Base salary: ₱${(
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[39][0]++, Number(targetPaystub.baseSalary)) ||
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[39][1]++, 0)).toFixed(2)}`, 50, 215);
          // Earnings section
          /* istanbul ignore next */
          cov_7esvhu1wu().s[169]++;
          doc.fontSize(12).font('Helvetica-Bold').text('Earnings:', 50, 245);
          /* istanbul ignore next */
          cov_7esvhu1wu().s[170]++;
          doc.fontSize(10).font('Helvetica').text('Base salary:', 50, 270).text(`₱${(
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[40][0]++, Number(targetPaystub.baseSalary)) ||
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[40][1]++, 0)).toFixed(2)}`, 400, 270, {
            align: 'right'
          });
          // Add Leave Pay if applicable - using same calculation as payroll system
          const paidLeaveHours =
          /* istanbul ignore next */
          (cov_7esvhu1wu().s[171]++,
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[41][0]++, Number(targetPaystub.paidLeaveHours)) ||
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[41][1]++, 0));
          let leavePay =
          /* istanbul ignore next */
          (cov_7esvhu1wu().s[172]++, 0);
          /* istanbul ignore next */
          cov_7esvhu1wu().s[173]++;
          if (paidLeaveHours > 0) {
            /* istanbul ignore next */
            cov_7esvhu1wu().b[42][0]++;
            const startDate =
            /* istanbul ignore next */
            (cov_7esvhu1wu().s[174]++, new Date(targetPaystub.periodStartDate));
            const endDate =
            /* istanbul ignore next */
            (cov_7esvhu1wu().s[175]++, new Date(targetPaystub.periodEndDate));
            const expectedWorkingDays =
            /* istanbul ignore next */
            (cov_7esvhu1wu().s[176]++, this.calculateWorkingDays(startDate, endDate));
            const expectedHours =
            /* istanbul ignore next */
            (cov_7esvhu1wu().s[177]++, expectedWorkingDays * 8); // 8 hours per working day
            const baseSalary =
            /* istanbul ignore next */
            (cov_7esvhu1wu().s[178]++,
            /* istanbul ignore next */
            (cov_7esvhu1wu().b[43][0]++, Number(targetPaystub.baseSalary)) ||
            /* istanbul ignore next */
            (cov_7esvhu1wu().b[43][1]++, 0));
            // Use same proportional calculation as payroll system
            /* istanbul ignore next */
            cov_7esvhu1wu().s[179]++;
            leavePay = expectedHours > 0 ?
            /* istanbul ignore next */
            (cov_7esvhu1wu().b[44][0]++, paidLeaveHours / expectedHours * baseSalary) :
            /* istanbul ignore next */
            (cov_7esvhu1wu().b[44][1]++, 0);
            /* istanbul ignore next */
            cov_7esvhu1wu().s[180]++;
            if (leavePay > 0) {
              /* istanbul ignore next */
              cov_7esvhu1wu().b[45][0]++;
              cov_7esvhu1wu().s[181]++;
              doc.text('Leave pay:', 50, 290).text(`₱${leavePay.toFixed(2)}`, 400, 290, {
                align: 'right'
              });
            } else
            /* istanbul ignore next */
            {
              cov_7esvhu1wu().b[45][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_7esvhu1wu().b[42][1]++;
          }
          cov_7esvhu1wu().s[182]++;
          doc.text('Gross pay:', 50, 310).text(`₱${(
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[46][0]++, Number(targetPaystub.grossPay)) ||
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[46][1]++, 0)).toFixed(2)}`, 400, 310, {
            align: 'right'
          }).text('Net pay:', 50, 330).text(`₱${(
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[47][0]++, Number(targetPaystub.netPay)) ||
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[47][1]++, 0)).toFixed(2)}`, 400, 330, {
            align: 'right'
          });
          // Benefits section
          let currentY =
          /* istanbul ignore next */
          (cov_7esvhu1wu().s[183]++, 360);
          /* istanbul ignore next */
          cov_7esvhu1wu().s[184]++;
          doc.fontSize(12).font('Helvetica-Bold').text('Benefits:', 50, currentY);
          /* istanbul ignore next */
          cov_7esvhu1wu().s[185]++;
          currentY += 25;
          /* istanbul ignore next */
          cov_7esvhu1wu().s[186]++;
          if (
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[49][0]++, targetPaystub.benefits) &&
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[49][1]++, targetPaystub.benefits.length > 0)) {
            /* istanbul ignore next */
            cov_7esvhu1wu().b[48][0]++;
            cov_7esvhu1wu().s[187]++;
            // Individual benefits
            targetPaystub.benefits.forEach(benefit => {
              /* istanbul ignore next */
              cov_7esvhu1wu().f[25]++;
              cov_7esvhu1wu().s[188]++;
              doc.fontSize(10).font('Helvetica').text(`${benefit.name}:`, 50, currentY).text(`₱${Number(benefit.amount).toFixed(2)}`, 400, currentY, {
                align: 'right'
              });
              /* istanbul ignore next */
              cov_7esvhu1wu().s[189]++;
              currentY += 15;
            });
            // Total Benefits
            /* istanbul ignore next */
            cov_7esvhu1wu().s[190]++;
            doc.fontSize(10).font('Helvetica').text('Total benefits:', 50, currentY).text(`₱${Number(targetPaystub.totalBenefits).toFixed(2)}`, 400, currentY, {
              align: 'right'
            });
          } else {
            /* istanbul ignore next */
            cov_7esvhu1wu().b[48][1]++;
            cov_7esvhu1wu().s[191]++;
            if (
            /* istanbul ignore next */
            (cov_7esvhu1wu().b[51][0]++, targetPaystub.totalBenefits) &&
            /* istanbul ignore next */
            (cov_7esvhu1wu().b[51][1]++, Number(targetPaystub.totalBenefits) > 0)) {
              /* istanbul ignore next */
              cov_7esvhu1wu().b[50][0]++;
              cov_7esvhu1wu().s[192]++;
              doc.fontSize(10).font('Helvetica').text('Total benefits:', 50, currentY).text(`₱${Number(targetPaystub.totalBenefits).toFixed(2)}`, 400, currentY, {
                align: 'right'
              });
            } else {
              /* istanbul ignore next */
              cov_7esvhu1wu().b[50][1]++;
              cov_7esvhu1wu().s[193]++;
              doc.fontSize(10).font('Helvetica').text('Total benefits:', 50, currentY).text(`₱0.00`, 400, currentY, {
                align: 'right'
              });
            }
          }
          // Deductions section
          /* istanbul ignore next */
          cov_7esvhu1wu().s[194]++;
          currentY += 30;
          /* istanbul ignore next */
          cov_7esvhu1wu().s[195]++;
          doc.fontSize(12).font('Helvetica-Bold').text('Deductions:', 50, currentY);
          /* istanbul ignore next */
          cov_7esvhu1wu().s[196]++;
          currentY += 25;
          /* istanbul ignore next */
          cov_7esvhu1wu().s[197]++;
          if (
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[53][0]++, targetPaystub.deductions) &&
          /* istanbul ignore next */
          (cov_7esvhu1wu().b[53][1]++, targetPaystub.deductions.length > 0)) {
            /* istanbul ignore next */
            cov_7esvhu1wu().b[52][0]++;
            cov_7esvhu1wu().s[198]++;
            // Individual deductions
            targetPaystub.deductions.forEach(deduction => {
              /* istanbul ignore next */
              cov_7esvhu1wu().f[26]++;
              cov_7esvhu1wu().s[199]++;
              doc.fontSize(10).font('Helvetica').text(`${deduction.name}:`, 50, currentY).text(`₱${Number(deduction.amount).toFixed(2)}`, 400, currentY, {
                align: 'right'
              });
              /* istanbul ignore next */
              cov_7esvhu1wu().s[200]++;
              currentY += 15;
            });
            // Total Deductions
            /* istanbul ignore next */
            cov_7esvhu1wu().s[201]++;
            doc.fontSize(10).font('Helvetica').text('Total deductions:', 50, currentY).text(`₱${(
            /* istanbul ignore next */
            (cov_7esvhu1wu().b[54][0]++, Number(targetPaystub.totalDeductions)) ||
            /* istanbul ignore next */
            (cov_7esvhu1wu().b[54][1]++, 0)).toFixed(2)}`, 400, currentY, {
              align: 'right'
            });
          } else {
            /* istanbul ignore next */
            cov_7esvhu1wu().b[52][1]++;
            cov_7esvhu1wu().s[202]++;
            doc.fontSize(10).font('Helvetica').text('Total deductions:', 50, currentY).text(`₱0.00`, 400, currentY, {
              align: 'right'
            });
          }
          // Footer
          /* istanbul ignore next */
          cov_7esvhu1wu().s[203]++;
          currentY += 40;
          /* istanbul ignore next */
          cov_7esvhu1wu().s[204]++;
          doc.fontSize(10).font('Helvetica').text(`Approved by hr & generated on: ${new Date().toLocaleDateString()}`, 50, currentY);
          /* istanbul ignore next */
          cov_7esvhu1wu().s[205]++;
          doc.end();
        } catch (error) {
          /* istanbul ignore next */
          cov_7esvhu1wu().s[206]++;
          logger_1.default.error('Error creating PDF content', {
            error: error instanceof Error ?
            /* istanbul ignore next */
            (cov_7esvhu1wu().b[55][0]++, error.message) :
            /* istanbul ignore next */
            (cov_7esvhu1wu().b[55][1]++, 'Unknown error'),
            stack: error instanceof Error ?
            /* istanbul ignore next */
            (cov_7esvhu1wu().b[56][0]++, error.stack) :
            /* istanbul ignore next */
            (cov_7esvhu1wu().b[56][1]++, undefined)
          });
          /* istanbul ignore next */
          cov_7esvhu1wu().s[207]++;
          reject(error);
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_7esvhu1wu().s[208]++;
      logger_1.default.error('Error generating paystub PDF:', error);
      /* istanbul ignore next */
      cov_7esvhu1wu().s[209]++;
      throw error;
    }
  }
  /**
   * Download paystub as Excel
   */
  async downloadPaystubExcel(employeeId, paystubId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[27]++;
    cov_7esvhu1wu().s[210]++;
    try {
      /* istanbul ignore next */
      cov_7esvhu1wu().s[211]++;
      logger_1.default.info('Downloading paystub Excel', {
        employeeId,
        paystubId
      });
      // Get the specific paystub data
      const paystub =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[212]++, await this.getEmployeePaystubs(employeeId, {
        limit: 1000
      }));
      /* istanbul ignore next */
      cov_7esvhu1wu().s[213]++;
      logger_1.default.info('Retrieved paystubs', {
        count: paystub.length,
        paystubIds: paystub.map(p => {
          /* istanbul ignore next */
          cov_7esvhu1wu().f[28]++;
          cov_7esvhu1wu().s[214]++;
          return p.id;
        })
      });
      const targetPaystub =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[215]++, paystub.find(p => {
        /* istanbul ignore next */
        cov_7esvhu1wu().f[29]++;
        cov_7esvhu1wu().s[216]++;
        return p.id === paystubId;
      }));
      /* istanbul ignore next */
      cov_7esvhu1wu().s[217]++;
      if (!targetPaystub) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[57][0]++;
        cov_7esvhu1wu().s[218]++;
        logger_1.default.error('Paystub not found', {
          employeeId,
          paystubId,
          availableIds: paystub.map(p => {
            /* istanbul ignore next */
            cov_7esvhu1wu().f[30]++;
            cov_7esvhu1wu().s[219]++;
            return p.id;
          })
        });
        /* istanbul ignore next */
        cov_7esvhu1wu().s[220]++;
        throw new Error('Paystub not found');
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[57][1]++;
      }
      // Create Excel file using xlsx library
      cov_7esvhu1wu().s[221]++;
      logger_1.default.info('Starting Excel generation', {
        paystubId: targetPaystub.id
      });
      const XLSX =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[222]++, require('xlsx'));
      // Create workbook and worksheet
      const workbook =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[223]++, XLSX.utils.book_new());
      // Calculate Leave Pay using same logic as payroll system
      const paidLeaveHours =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[224]++,
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[58][0]++, Number(targetPaystub.paidLeaveHours)) ||
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[58][1]++, 0));
      let leavePay =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[225]++, 0);
      /* istanbul ignore next */
      cov_7esvhu1wu().s[226]++;
      if (paidLeaveHours > 0) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[59][0]++;
        const startDate =
        /* istanbul ignore next */
        (cov_7esvhu1wu().s[227]++, new Date(targetPaystub.periodStartDate));
        const endDate =
        /* istanbul ignore next */
        (cov_7esvhu1wu().s[228]++, new Date(targetPaystub.periodEndDate));
        const expectedWorkingDays =
        /* istanbul ignore next */
        (cov_7esvhu1wu().s[229]++, this.calculateWorkingDays(startDate, endDate));
        const expectedHours =
        /* istanbul ignore next */
        (cov_7esvhu1wu().s[230]++, expectedWorkingDays * 8); // 8 hours per working day
        const baseSalary =
        /* istanbul ignore next */
        (cov_7esvhu1wu().s[231]++,
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[60][0]++, Number(targetPaystub.baseSalary)) ||
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[60][1]++, 0));
        // Use same proportional calculation as payroll system
        /* istanbul ignore next */
        cov_7esvhu1wu().s[232]++;
        leavePay = expectedHours > 0 ?
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[61][0]++, paidLeaveHours / expectedHours * baseSalary) :
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[61][1]++, 0);
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[59][1]++;
      }
      // Employee Information
      const employeeData =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[233]++, [['Employee Information', ''], ['Name', targetPaystub.employeeName], ['Employee ID', targetPaystub.employeeId], ['Position', targetPaystub.position], ['Department', targetPaystub.department], ['Period', targetPaystub.periodName], ['', ''], ['Payroll Details', ''], ['Base Salary', targetPaystub.baseSalary], ['Paid Leave Hours', targetPaystub.paidLeaveHours], ['Leave Pay', leavePay], ['Total Benefits', targetPaystub.totalBenefits], ['Total Deductions', targetPaystub.totalDeductions], ['Net Pay', targetPaystub.netPay], ['', ''], ['Benefits Breakdown', ''], ['Benefit Name', 'Amount']]);
      // Add benefits
      /* istanbul ignore next */
      cov_7esvhu1wu().s[234]++;
      if (
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[63][0]++, targetPaystub.benefits) &&
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[63][1]++, targetPaystub.benefits.length > 0)) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[62][0]++;
        cov_7esvhu1wu().s[235]++;
        targetPaystub.benefits.forEach(benefit => {
          /* istanbul ignore next */
          cov_7esvhu1wu().f[31]++;
          cov_7esvhu1wu().s[236]++;
          employeeData.push([benefit.name, `+${benefit.amount}`]);
        });
        /* istanbul ignore next */
        cov_7esvhu1wu().s[237]++;
        employeeData.push(['', '']); // Add empty row
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[62][1]++;
      }
      // Add deductions section
      cov_7esvhu1wu().s[238]++;
      employeeData.push(['Deductions Breakdown', '']);
      /* istanbul ignore next */
      cov_7esvhu1wu().s[239]++;
      employeeData.push(['Deduction Name', 'Amount']);
      // Add deductions
      /* istanbul ignore next */
      cov_7esvhu1wu().s[240]++;
      if (
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[65][0]++, targetPaystub.deductions) &&
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[65][1]++, targetPaystub.deductions.length > 0)) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[64][0]++;
        cov_7esvhu1wu().s[241]++;
        targetPaystub.deductions.forEach(deduction => {
          /* istanbul ignore next */
          cov_7esvhu1wu().f[32]++;
          cov_7esvhu1wu().s[242]++;
          employeeData.push([deduction.name, `-${deduction.amount}`]);
        });
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[64][1]++;
      }
      const worksheet =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[243]++, XLSX.utils.aoa_to_sheet(employeeData));
      /* istanbul ignore next */
      cov_7esvhu1wu().s[244]++;
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Paystub');
      // Generate Excel buffer
      const excelBuffer =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[245]++, XLSX.write(workbook, {
        type: 'buffer',
        bookType: 'xlsx'
      }));
      /* istanbul ignore next */
      cov_7esvhu1wu().s[246]++;
      logger_1.default.info('Excel generation completed', {
        bufferSize: excelBuffer.length
      });
      /* istanbul ignore next */
      cov_7esvhu1wu().s[247]++;
      return excelBuffer;
    } catch (error) {
      /* istanbul ignore next */
      cov_7esvhu1wu().s[248]++;
      logger_1.default.error('Error generating paystub Excel:', error);
      /* istanbul ignore next */
      cov_7esvhu1wu().s[249]++;
      throw error;
    }
  }
  /**
   * Get employee requests (all types)
   */
  async getEmployeeRequests(employeeId, params =
  /* istanbul ignore next */
  (cov_7esvhu1wu().b[66][0]++, {})) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[33]++;
    const {
      type,
      status,
      limit =
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[67][0]++, 50),
      offset =
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[68][0]++, 0)
    } =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[250]++, params);
    // Get leave requests
    let leaveQuery =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[251]++, `
      SELECT 
        l.id,
        'leave' as type,
        l.status,
        l.created_at as "submittedAt",
        CONCAT(u.first_name, ' ', u.last_name) as "approverName",
        l.updated_at as "approvedAt",
        '' as "rejectionReason",
        json_build_object(
          'leaveType', l.leave_type,
          'startDate', l.start_date,
          'endDate', l.end_date,
          'reason', 'Leave request',
          'days', CASE
            WHEN l.start_date IS NOT NULL AND l.end_date IS NOT NULL
            THEN EXTRACT(DAY FROM (l.end_date - l.start_date)) + 1 -
                 CASE WHEN EXTRACT(DOW FROM l.start_date) = 0 THEN 1 ELSE 0 END -
                 CASE WHEN EXTRACT(DOW FROM l.end_date) = 6 THEN 1 ELSE 0 END
            ELSE 0
          END
        ) as details
      FROM leaves l
      LEFT JOIN users u ON l.approver_id = u.id
      WHERE l.employee_id = $1
    `);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[252]++;
    if (
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[70][0]++, type) &&
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[70][1]++, type !== 'leave')) {
      /* istanbul ignore next */
      cov_7esvhu1wu().b[69][0]++;
      cov_7esvhu1wu().s[253]++;
      leaveQuery += ' AND FALSE';
    } else
    /* istanbul ignore next */
    {
      cov_7esvhu1wu().b[69][1]++;
    }
    cov_7esvhu1wu().s[254]++;
    if (status) {
      /* istanbul ignore next */
      cov_7esvhu1wu().b[71][0]++;
      cov_7esvhu1wu().s[255]++;
      leaveQuery += ' AND l.status = $2';
    } else
    /* istanbul ignore next */
    {
      cov_7esvhu1wu().b[71][1]++;
    }
    cov_7esvhu1wu().s[256]++;
    leaveQuery += ` ORDER BY l.created_at DESC`;
    // Get time correction requests
    let timeCorrectionQuery =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[257]++, `
      SELECT 
        tcr.id,
        'time_correction' as type,
        tcr.status,
        tcr.created_at as "submittedAt",
        CONCAT(u.first_name, ' ', u.last_name) as "approverName",
        tcr.approved_at as "approvedAt",
        tcr.comments as "rejectionReason",
        json_build_object(
          'correctionDate', tcr.correction_date,
          'sessionType', tcr.session_type,
          'requestedClockIn', tcr.requested_clock_in,
          'requestedClockOut', tcr.requested_clock_out,
          'reason', tcr.reason
        ) as details
      FROM time_correction_requests tcr
      LEFT JOIN users u ON tcr.approver_id = u.id
      WHERE tcr.employee_id = $1
    `);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[258]++;
    if (
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[73][0]++, type) &&
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[73][1]++, type !== 'time_correction')) {
      /* istanbul ignore next */
      cov_7esvhu1wu().b[72][0]++;
      cov_7esvhu1wu().s[259]++;
      timeCorrectionQuery += ' AND FALSE';
    } else
    /* istanbul ignore next */
    {
      cov_7esvhu1wu().b[72][1]++;
    }
    cov_7esvhu1wu().s[260]++;
    if (status) {
      /* istanbul ignore next */
      cov_7esvhu1wu().b[74][0]++;
      cov_7esvhu1wu().s[261]++;
      timeCorrectionQuery += ' AND tcr.status = $2';
    } else
    /* istanbul ignore next */
    {
      cov_7esvhu1wu().b[74][1]++;
    }
    cov_7esvhu1wu().s[262]++;
    timeCorrectionQuery += ` ORDER BY tcr.created_at DESC`;
    // Get overtime requests
    let overtimeQuery =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[263]++, `
      SELECT 
        ot.id,
        'overtime' as type,
        ot.status,
        ot.created_at as "submittedAt",
        CONCAT(u.first_name, ' ', u.last_name) as "approverName",
        ot.approved_at as "approvedAt",
        ot.comments as "rejectionReason",
        json_build_object(
          'overtimeDate', ot.overtime_date,
          'startTime', ot.start_time,
          'endTime', ot.end_time,
          'requestedHours', ot.requested_hours,
          'reason', ot.reason
        ) as details
      FROM overtime_requests ot
      LEFT JOIN users u ON ot.approver_id = u.id
      WHERE ot.employee_id = $1
    `);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[264]++;
    if (
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[76][0]++, type) &&
    /* istanbul ignore next */
    (cov_7esvhu1wu().b[76][1]++, type !== 'overtime')) {
      /* istanbul ignore next */
      cov_7esvhu1wu().b[75][0]++;
      cov_7esvhu1wu().s[265]++;
      overtimeQuery += ' AND FALSE';
    } else
    /* istanbul ignore next */
    {
      cov_7esvhu1wu().b[75][1]++;
    }
    cov_7esvhu1wu().s[266]++;
    if (status) {
      /* istanbul ignore next */
      cov_7esvhu1wu().b[77][0]++;
      cov_7esvhu1wu().s[267]++;
      overtimeQuery += ' AND ot.status = $2';
    } else
    /* istanbul ignore next */
    {
      cov_7esvhu1wu().b[77][1]++;
    }
    cov_7esvhu1wu().s[268]++;
    overtimeQuery += ` ORDER BY ot.created_at DESC`;
    // Build parameter array based on what filters are applied
    const params_array =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[269]++, [employeeId]);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[270]++;
    if (status) {
      /* istanbul ignore next */
      cov_7esvhu1wu().b[78][0]++;
      cov_7esvhu1wu().s[271]++;
      params_array.push(status);
    } else
    /* istanbul ignore next */
    {
      cov_7esvhu1wu().b[78][1]++;
    }
    const [leaveResult, timeCorrectionResult, overtimeResult] =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[272]++, await Promise.all([(0, database_1.getPool)().query(leaveQuery, params_array), (0, database_1.getPool)().query(timeCorrectionQuery, params_array), (0, database_1.getPool)().query(overtimeQuery, params_array)]));
    // Combine and sort all requests
    const allRequests =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[273]++, [...leaveResult.rows, ...timeCorrectionResult.rows, ...overtimeResult.rows].sort((a, b) => {
      /* istanbul ignore next */
      cov_7esvhu1wu().f[34]++;
      cov_7esvhu1wu().s[274]++;
      return new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime();
    }));
    // Apply pagination to the combined results
    const startIndex =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[275]++, offset);
    const endIndex =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[276]++, offset + limit);
    const result =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[277]++, allRequests.slice(startIndex, endIndex));
    // Debug: Log the results
    /* istanbul ignore next */
    cov_7esvhu1wu().s[278]++;
    console.log('Total requests found:', allRequests.length);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[279]++;
    console.log('Request IDs:', allRequests.map(r => {
      /* istanbul ignore next */
      cov_7esvhu1wu().f[35]++;
      cov_7esvhu1wu().s[280]++;
      return r.id;
    }));
    /* istanbul ignore next */
    cov_7esvhu1wu().s[281]++;
    console.log('Returning requests:', result.length);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[282]++;
    console.log('Returned IDs:', result.map(r => {
      /* istanbul ignore next */
      cov_7esvhu1wu().f[36]++;
      cov_7esvhu1wu().s[283]++;
      return r.id;
    }));
    /* istanbul ignore next */
    cov_7esvhu1wu().s[284]++;
    return result;
  }
  /**
   * Get request statistics for an employee
   */
  async getRequestStats(employeeId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[37]++;
    const query =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[285]++, `
      SELECT 
        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1) +
        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1) +
        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1) as total,
        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1 AND status = 'pending') +
        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1 AND status = 'pending') +
        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1 AND status = 'pending') as pending,
        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1 AND status = 'approved') +
        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1 AND status = 'approved') +
        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1 AND status = 'approved') as approved,
        (SELECT COUNT(*) FROM leaves WHERE employee_id = $1 AND status = 'rejected') +
        (SELECT COUNT(*) FROM time_correction_requests WHERE employee_id = $1 AND status = 'rejected') +
        (SELECT COUNT(*) FROM overtime_requests WHERE employee_id = $1 AND status = 'rejected') as rejected
    `);
    const result =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[286]++, await (0, database_1.getPool)().query(query, [employeeId]));
    const row =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[287]++, result.rows[0]);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[288]++;
    return {
      total: parseInt(row.total),
      pending: parseInt(row.pending),
      approved: parseInt(row.approved),
      rejected: parseInt(row.rejected)
    };
  }
  /**
   * Get employee paystubs
   */
  async getEmployeePaystubs(employeeId, params =
  /* istanbul ignore next */
  (cov_7esvhu1wu().b[79][0]++, {})) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[38]++;
    const {
      year,
      month,
      page =
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[80][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[81][0]++, 10)
    } =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[289]++, params);
    const offset =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[290]++, (page - 1) * limit);
    let whereClause =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[291]++, 'WHERE pr.employee_id = $1');
    const queryParams =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[292]++, [employeeId]);
    let paramIndex =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[293]++, 2);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[294]++;
    if (year) {
      /* istanbul ignore next */
      cov_7esvhu1wu().b[82][0]++;
      cov_7esvhu1wu().s[295]++;
      whereClause += ` AND EXTRACT(YEAR FROM pp.start_date) = $${paramIndex++}`;
      /* istanbul ignore next */
      cov_7esvhu1wu().s[296]++;
      queryParams.push(year);
    } else
    /* istanbul ignore next */
    {
      cov_7esvhu1wu().b[82][1]++;
    }
    cov_7esvhu1wu().s[297]++;
    if (month) {
      /* istanbul ignore next */
      cov_7esvhu1wu().b[83][0]++;
      cov_7esvhu1wu().s[298]++;
      whereClause += ` AND EXTRACT(MONTH FROM pp.start_date) = $${paramIndex++}`;
      /* istanbul ignore next */
      cov_7esvhu1wu().s[299]++;
      queryParams.push(month);
    } else
    /* istanbul ignore next */
    {
      cov_7esvhu1wu().b[83][1]++;
    }
    const query =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[300]++, `
      SELECT 
        pr.id,
        pr.payroll_period_id,
        pp.period_name,
        pp.start_date as period_start_date,
        pp.end_date as period_end_date,
        e.employee_id,
        CONCAT(u.first_name, ' ', u.last_name) as employee_name,
        e.position,
        e.department_id,
        d.name as department_name,
        e.base_salary,
        pr.total_regular_hours,
        pr.total_overtime_hours,
        pr.total_late_hours,
        pr.paid_leave_hours,
        pr.gross_pay,
        pr.total_deductions,
        pr.total_benefits,
        pr.net_pay,
        pr.late_deductions,
        pr.status,
        pr.created_at,
        pr.updated_at
      FROM payroll_records pr
      JOIN payroll_periods pp ON pr.payroll_period_id = pp.id
      JOIN employees e ON pr.employee_id = e.id
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      ${whereClause}
      ORDER BY pp.start_date DESC
      LIMIT $${paramIndex++} OFFSET $${paramIndex++}
    `);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[301]++;
    queryParams.push(limit, offset);
    const result =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[302]++, await (0, database_1.getPool)().query(query, queryParams));
    // Get deductions for each paystub
    const paystubs =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[303]++, []);
    /* istanbul ignore next */
    cov_7esvhu1wu().s[304]++;
    for (const row of result.rows) {
      const deductionsQuery =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[305]++, `
        SELECT 
          pd.name,
          pd.amount
        FROM payroll_deductions pd
        WHERE pd.payroll_record_id = $1
        ORDER BY pd.name
      `);
      const deductionsResult =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[306]++, await (0, database_1.getPool)().query(deductionsQuery, [row.id]));
      // Get benefits for this paystub
      const benefitsQuery =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[307]++, `
        SELECT 
          bt.name,
          eb.amount
        FROM employee_benefits eb
        JOIN benefit_types bt ON eb.benefit_type_id = bt.id
        JOIN payroll_periods pp ON pp.id = $2
        WHERE eb.employee_id = $1 
          AND eb.is_active = true
          AND (eb.end_date IS NULL OR eb.end_date >= pp.start_date)
          AND eb.start_date <= pp.end_date
        ORDER BY bt.name
      `);
      const benefitsResult =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[308]++, await (0, database_1.getPool)().query(benefitsQuery, [employeeId, row.payroll_period_id]));
      /* istanbul ignore next */
      cov_7esvhu1wu().s[309]++;
      paystubs.push({
        id: row.id,
        periodName: row.period_name,
        periodStartDate: row.period_start_date,
        periodEndDate: row.period_end_date,
        employeeId: row.employee_id,
        employeeName: row.employee_name,
        position: row.position,
        department:
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[84][0]++, row.department_name) ||
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[84][1]++, 'Unassigned'),
        baseSalary: parseFloat(row.base_salary),
        totalRegularHours: parseFloat(row.total_regular_hours),
        totalOvertimeHours: parseFloat(row.total_overtime_hours),
        paidLeaveHours:
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[85][0]++, parseFloat(row.paid_leave_hours)) ||
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[85][1]++, 0),
        grossPay: parseFloat(row.gross_pay),
        totalDeductions: parseFloat(row.total_deductions),
        totalBenefits: parseFloat(row.total_benefits),
        netPay: parseFloat(row.net_pay),
        lateDeductions: parseFloat(row.late_deductions),
        deductions: deductionsResult.rows.map(d => {
          /* istanbul ignore next */
          cov_7esvhu1wu().f[39]++;
          cov_7esvhu1wu().s[310]++;
          return {
            name: d.name,
            amount: parseFloat(d.amount)
          };
        }),
        benefits: benefitsResult.rows.map(b => {
          /* istanbul ignore next */
          cov_7esvhu1wu().f[40]++;
          cov_7esvhu1wu().s[311]++;
          return {
            name: b.name,
            amount: parseFloat(b.amount)
          };
        }),
        createdAt: row.created_at
      });
    }
    /* istanbul ignore next */
    cov_7esvhu1wu().s[312]++;
    return paystubs;
  }
  /**
   * Get latest employee paystub
   */
  async getLatestPaystub(employeeId) {
    /* istanbul ignore next */
    cov_7esvhu1wu().f[41]++;
    // First try to get the latest payroll record
    const query =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[313]++, `
      SELECT 
        pr.id,
        pr.payroll_period_id,
        pp.period_name,
        e.employee_id,
        CONCAT(u.first_name, ' ', u.last_name) as employee_name,
        e.position,
        e.department_id,
        d.name as department_name,
        e.base_salary,
        pr.total_regular_hours,
        pr.total_overtime_hours,
        pr.total_late_hours,
        pr.paid_leave_hours,
        pr.gross_pay,
        pr.total_deductions,
        pr.total_benefits,
        pr.net_pay,
        pr.late_deductions,
        pr.status,
        pr.created_at,
        pr.updated_at
      FROM payroll_records pr
      JOIN payroll_periods pp ON pr.payroll_period_id = pp.id
      JOIN employees e ON pr.employee_id = e.id
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      WHERE pr.employee_id = $1
      ORDER BY pp.start_date DESC
      LIMIT 1
    `);
    const result =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[314]++, await (0, database_1.getPool)().query(query, [employeeId]));
    /* istanbul ignore next */
    cov_7esvhu1wu().s[315]++;
    if (result.rows.length === 0) {
      /* istanbul ignore next */
      cov_7esvhu1wu().b[86][0]++;
      // If no payroll records exist, return employee info with zero values
      const employeeQuery =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[316]++, `
        SELECT 
          e.employee_id as "employeeId",
          CONCAT(u.first_name, ' ', u.last_name) as "employeeName",
          e.position,
          d.name as department,
          e.base_salary as "baseSalary"
        FROM employees e
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        WHERE e.id = $1
      `);
      const employeeResult =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[317]++, await (0, database_1.getPool)().query(employeeQuery, [employeeId]));
      /* istanbul ignore next */
      cov_7esvhu1wu().s[318]++;
      if (employeeResult.rows.length === 0) {
        /* istanbul ignore next */
        cov_7esvhu1wu().b[87][0]++;
        cov_7esvhu1wu().s[319]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_7esvhu1wu().b[87][1]++;
      }
      const employee =
      /* istanbul ignore next */
      (cov_7esvhu1wu().s[320]++, employeeResult.rows[0]);
      /* istanbul ignore next */
      cov_7esvhu1wu().s[321]++;
      return {
        id: 'no-payroll',
        periodName: 'No Payroll Period',
        periodStartDate: new Date().toISOString(),
        periodEndDate: new Date().toISOString(),
        employeeId: employee.employeeId,
        employeeName: employee.employeeName,
        position: employee.position,
        department:
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[88][0]++, employee.department) ||
        /* istanbul ignore next */
        (cov_7esvhu1wu().b[88][1]++, 'Unassigned'),
        baseSalary: parseFloat(employee.baseSalary),
        totalRegularHours: 0,
        totalOvertimeHours: 0,
        paidLeaveHours: 0,
        grossPay: 0,
        totalDeductions: 0,
        totalBenefits: 0,
        netPay: 0,
        lateDeductions: 0,
        deductions: [],
        benefits: [],
        createdAt: new Date().toISOString()
      };
    } else
    /* istanbul ignore next */
    {
      cov_7esvhu1wu().b[86][1]++;
    }
    const row =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[322]++, result.rows[0]);
    // Get deductions for the paystub
    const deductionsQuery =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[323]++, `
      SELECT 
        pd.name,
        pd.amount
      FROM payroll_deductions pd
      WHERE pd.payroll_record_id = $1
      ORDER BY pd.name
    `);
    const deductionsResult =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[324]++, await (0, database_1.getPool)().query(deductionsQuery, [row.id]));
    // Get benefits for this paystub
    const benefitsQuery =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[325]++, `
      SELECT 
        bt.name,
        eb.amount
      FROM employee_benefits eb
      JOIN benefit_types bt ON eb.benefit_type_id = bt.id
      JOIN payroll_periods pp ON pp.id = $2
      WHERE eb.employee_id = $1 
        AND eb.is_active = true
        AND (eb.end_date IS NULL OR eb.end_date >= pp.start_date)
        AND eb.start_date <= pp.end_date
      ORDER BY bt.name
    `);
    const benefitsResult =
    /* istanbul ignore next */
    (cov_7esvhu1wu().s[326]++, await (0, database_1.getPool)().query(benefitsQuery, [employeeId, row.payroll_period_id]));
    /* istanbul ignore next */
    cov_7esvhu1wu().s[327]++;
    return {
      id: row.id,
      periodName: row.period_name,
      periodStartDate: row.periodStartDate,
      periodEndDate: row.periodEndDate,
      employeeId: row.employee_id,
      employeeName: row.employee_name,
      position: row.position,
      department:
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[89][0]++, row.department_name) ||
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[89][1]++, 'Unassigned'),
      baseSalary: parseFloat(row.base_salary),
      totalRegularHours: parseFloat(row.total_regular_hours),
      totalOvertimeHours: parseFloat(row.total_overtime_hours),
      paidLeaveHours:
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[90][0]++, parseFloat(row.paid_leave_hours)) ||
      /* istanbul ignore next */
      (cov_7esvhu1wu().b[90][1]++, 0),
      grossPay: parseFloat(row.gross_pay),
      totalDeductions: parseFloat(row.total_deductions),
      totalBenefits: parseFloat(row.total_benefits),
      netPay: parseFloat(row.net_pay),
      lateDeductions: parseFloat(row.late_deductions),
      deductions: deductionsResult.rows.map(d => {
        /* istanbul ignore next */
        cov_7esvhu1wu().f[42]++;
        cov_7esvhu1wu().s[328]++;
        return {
          name: d.name,
          amount: parseFloat(d.amount)
        };
      }),
      benefits: benefitsResult.rows.map(b => {
        /* istanbul ignore next */
        cov_7esvhu1wu().f[43]++;
        cov_7esvhu1wu().s[329]++;
        return {
          name: b.name,
          amount: parseFloat(b.amount)
        };
      }),
      createdAt: row.created_at
    };
  }
}
/* istanbul ignore next */
cov_7esvhu1wu().s[330]++;
exports.EmployeeService = EmployeeService;
/* istanbul ignore next */
cov_7esvhu1wu().s[331]++;
exports.employeeService = new EmployeeService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,