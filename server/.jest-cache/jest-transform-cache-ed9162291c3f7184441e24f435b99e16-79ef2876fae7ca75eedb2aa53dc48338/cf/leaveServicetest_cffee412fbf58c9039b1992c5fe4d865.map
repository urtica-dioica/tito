{"file":"/home/kim/tito/server/tests/unit/services/leaveService.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/unit/services/leaveService.test.ts"],"sourcesContent":["import { LeaveService, CreateLeaveRequestData, ApproveLeaveData } from '../../../src/services/leave/leaveService';\nimport { leaveModel, Leave, LeaveWithDetails } from '../../../src/models/leave/Leave';\nimport { leaveBalanceModel, LeaveBalanceWithDetails } from '../../../src/models/leave/LeaveBalance';\nimport { employeeModel } from '../../../src/models/hr/Employee';\n\n// Mock the models\njest.mock('../../../src/models/leave/Leave');\njest.mock('../../../src/models/leave/LeaveBalance');\njest.mock('../../../src/models/hr/Employee');\n\nconst mockLeaveModel = leaveModel as jest.Mocked<typeof leaveModel>;\nconst mockLeaveBalanceModel = leaveBalanceModel as jest.Mocked<typeof leaveBalanceModel>;\nconst mockEmployeeModel = employeeModel as jest.Mocked<typeof employeeModel>;\n\ndescribe('LeaveService', () => {\n  let leaveService: LeaveService;\n\n  // Shared mock data\n  const validLeaveData: CreateLeaveRequestData = {\n    employeeId: 'emp-123',\n    leaveType: 'vacation',\n    startDate: new Date('2025-12-15'),\n    endDate: new Date('2025-12-17'),\n    reason: 'Family vacation'\n  };\n\n  const mockEmployee = {\n    id: 'emp-123',\n    user_id: 'user-123',\n    employee_id: 'EMP001',\n    position: 'Software Developer',\n    department_id: 'dept-123',\n    employment_type: 'regular' as const,\n    hire_date: new Date('2023-01-01'),\n    base_salary: 50000,\n    status: 'active' as const,\n    created_at: new Date(),\n    updated_at: new Date()\n  };\n\n  const mockLeave: Leave = {\n    id: 'leave-123',\n    employeeId: 'emp-123',\n    leaveType: 'vacation',\n    startDate: new Date('2025-12-15'),\n    endDate: new Date('2025-12-17'),\n    totalDays: 3,\n    reason: 'Family vacation',\n    status: 'pending',\n    approvedBy: null,\n    createdAt: new Date(),\n    updatedAt: new Date()\n  };\n\n  beforeEach(() => {\n    leaveService = new LeaveService();\n    jest.clearAllMocks();\n  });\n\n  describe('createLeaveRequest', () => {\n\n    it('should create a leave request successfully', async () => {\n      // Arrange\n      mockEmployeeModel.findById.mockResolvedValue(mockEmployee);\n      mockLeaveModel.createLeave.mockResolvedValue(mockLeave);\n      \n      // Mock the specific method called by createLeaveRequest\n      mockLeaveBalanceModel.findByEmployeeLeaveTypeAndYear.mockResolvedValue({\n        id: 'lb-1',\n        employeeId: 'emp-123',\n        leaveType: 'vacation',\n        balance: 15,\n        year: 2025,\n        updatedAt: new Date()\n      });\n      \n      // Mock checkOverlappingLeaves to return no overlaps\n      mockLeaveModel.checkOverlappingLeaves.mockResolvedValue([]);\n      \n      mockLeaveModel.listLeaves.mockResolvedValue({ leaves: [], total: 0, page: 1, limit: 10, totalPages: 1 });\n\n      // Act\n      const result = await leaveService.createLeaveRequest(validLeaveData);\n\n      // Assert\n      expect(mockEmployeeModel.findById).toHaveBeenCalledWith('emp-123');\n      expect(mockLeaveModel.createLeave).toHaveBeenCalledWith({\n        employeeId: 'emp-123',\n        leaveType: 'vacation',\n        startDate: new Date('2025-12-15'),\n        endDate: new Date('2025-12-17'),\n        reason: 'Family vacation',\n        totalDays: 3\n      });\n      expect(result).toEqual(mockLeave);\n    });\n\n    it('should throw error if employee not found', async () => {\n      // Arrange\n      mockEmployeeModel.findById.mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(leaveService.createLeaveRequest(validLeaveData))\n        .rejects.toThrow('Employee not found');\n    });\n\n    it('should throw error if employee is not active', async () => {\n      // Arrange\n      const inactiveEmployee = { ...mockEmployee, status: 'inactive' as const };\n      mockEmployeeModel.findById.mockResolvedValue(inactiveEmployee);\n\n      // Act & Assert\n      await expect(leaveService.createLeaveRequest(validLeaveData))\n        .rejects.toThrow('Employee is not active');\n    });\n\n    it('should throw error if end date is before start date', async () => {\n      // Arrange\n      const invalidData = {\n        ...validLeaveData,\n        startDate: new Date('2025-12-17'),\n        endDate: new Date('2025-12-15')\n      };\n      mockEmployeeModel.findById.mockResolvedValue(mockEmployee);\n\n      // Act & Assert\n      await expect(leaveService.createLeaveRequest(invalidData))\n        .rejects.toThrow('Start date must be before end date');\n    });\n\n    it('should throw error if leave request is for past dates', async () => {\n      // Arrange\n      const pastDate = new Date();\n      pastDate.setDate(pastDate.getDate() - 1);\n      const pastEndDate = new Date();\n      pastEndDate.setDate(pastEndDate.getDate() - 1);\n      pastEndDate.setDate(pastEndDate.getDate() + 2); // Make end date after start date\n      const invalidData = {\n        ...validLeaveData,\n        startDate: pastDate,\n        endDate: pastEndDate\n      };\n      mockEmployeeModel.findById.mockResolvedValue(mockEmployee);\n\n      // Act & Assert\n      await expect(leaveService.createLeaveRequest(invalidData))\n        .rejects.toThrow('Cannot request leave for past dates');\n    });\n  });\n\n  describe('getLeaveRequest', () => {\n    const mockLeaveWithDetails: LeaveWithDetails = {\n      id: 'leave-123',\n      employeeId: 'emp-123',\n      leaveType: 'vacation',\n      startDate: new Date('2025-12-15'),\n      endDate: new Date('2025-12-17'),\n      totalDays: 3,\n      reason: 'Family vacation',\n      status: 'pending',\n      approvedBy: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      employeeCode: 'EMP001',\n      employeeName: 'John Doe',\n      departmentName: 'Engineering',\n      approverName: null\n    };\n\n    it('should return leave request with details', async () => {\n      // Arrange\n      mockLeaveModel.findByIdWithDetails.mockResolvedValue(mockLeaveWithDetails);\n\n      // Act\n      const result = await leaveService.getLeaveRequest('leave-123');\n\n      // Assert\n      expect(mockLeaveModel.findByIdWithDetails).toHaveBeenCalledWith('leave-123');\n      expect(result).toEqual(mockLeaveWithDetails);\n    });\n\n    it('should return null if leave request not found', async () => {\n      // Arrange\n      mockLeaveModel.findByIdWithDetails.mockResolvedValue(null);\n\n      // Act\n      const result = await leaveService.getLeaveRequest('nonexistent');\n\n      // Assert\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('approveLeaveRequest', () => {\n    const mockLeave: Leave = {\n      id: 'leave-123',\n      employeeId: 'emp-123',\n      leaveType: 'vacation',\n      startDate: new Date('2025-12-15'),\n      endDate: new Date('2025-12-17'),\n      totalDays: 3,\n      reason: 'Family vacation',\n      status: 'pending',\n      approvedBy: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    const approveData: ApproveLeaveData = {\n      leaveId: 'leave-123',\n      approverId: 'approver-123',\n      approved: true,\n      comments: 'Approved for family vacation'\n    };\n\n    it('should approve leave request successfully', async () => {\n      // Arrange\n      mockLeaveModel.findById.mockResolvedValue(mockLeave);\n      mockLeaveModel.updateLeave.mockResolvedValue({\n        ...mockLeave,\n        status: 'approved' as const,\n        approvedBy: 'approver-123',\n      });\n      \n      // Mock the specific method called by approveLeaveRequest\n      mockLeaveBalanceModel.useLeaveDays.mockResolvedValue({\n        id: 'lb-1',\n        employeeId: 'emp-123',\n        leaveType: 'vacation',\n        balance: 12, // 15 - 3 days\n        year: 2025,\n        updatedAt: new Date()\n      });\n\n      // Act\n      const result = await leaveService.approveLeaveRequest(approveData);\n\n      // Assert\n      expect(mockLeaveModel.findById).toHaveBeenCalledWith('leave-123');\n      expect(mockLeaveModel.updateLeave).toHaveBeenCalledWith('leave-123', {\n        status: 'approved' as const,\n        approvedBy: 'approver-123',\n      });\n      expect(result.status).toBe('approved');\n    });\n\n    it('should reject leave request successfully', async () => {\n      // Arrange\n      const rejectData = { ...approveData, approved: false };\n      mockLeaveModel.findById.mockResolvedValue(mockLeave);\n      mockLeaveModel.updateLeave.mockResolvedValue({\n        ...mockLeave,\n        status: 'rejected' as const,\n        approvedBy: 'approver-123',\n      });\n\n      // Act\n      const result = await leaveService.approveLeaveRequest(rejectData);\n\n      // Assert\n      expect(result.status).toBe('rejected');\n    });\n\n    it('should throw error if leave request not found', async () => {\n      // Arrange\n      mockLeaveModel.findById.mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(leaveService.approveLeaveRequest(approveData))\n        .rejects.toThrow('Leave request not found');\n    });\n\n    it('should throw error if leave request is already processed', async () => {\n      // Arrange\n      const processedLeave = { ...mockLeave, status: 'approved' as const };\n      mockLeaveModel.findById.mockResolvedValue(processedLeave);\n\n      // Act & Assert\n      await expect(leaveService.approveLeaveRequest(approveData))\n        .rejects.toThrow('Request has already been processed');\n    });\n  });\n\n  describe('getEmployeeLeaveBalance', () => {\n    const mockLeaveBalances: LeaveBalanceWithDetails[] = [\n      {\n        id: 'lb-1',\n        employeeId: 'emp-123',\n        leaveType: 'vacation',\n        balance: 15,\n        year: 2025,\n        updatedAt: new Date(),\n        employeeCode: 'EMP001',\n        employeeName: 'John Doe',\n        departmentName: 'Engineering'\n      },\n      {\n        id: 'lb-2',\n        employeeId: 'emp-123',\n        leaveType: 'sick',\n        balance: 10,\n        year: 2025,\n        updatedAt: new Date(),\n        employeeCode: 'EMP001',\n        employeeName: 'John Doe',\n        departmentName: 'Engineering'\n      }\n    ];\n\n    it('should return leave balance summary for employee', async () => {\n      // Arrange\n      mockLeaveBalanceModel.getEmployeeLeaveBalances.mockResolvedValue(mockLeaveBalances);\n\n      // Act\n      const result = await leaveService.getEmployeeLeaveBalance('emp-123', 2025);\n\n      // Assert\n      expect(mockLeaveBalanceModel.getEmployeeLeaveBalances).toHaveBeenCalledWith('emp-123', 2025);\n      expect(result).toEqual({\n        vacation: { total: 15, used: 0, available: 15 },\n        sick: { total: 10, used: 0, available: 10 },\n        maternity: { total: 0, used: 0, available: 0 },\n        other: { total: 0, used: 0, available: 0 }\n      });\n    });\n\n    it('should use current year if year not provided', async () => {\n      // Arrange\n      const currentYear = new Date().getFullYear();\n      mockLeaveBalanceModel.getEmployeeLeaveBalances.mockResolvedValue([]);\n\n      // Act\n      await leaveService.getEmployeeLeaveBalance('emp-123');\n\n      // Assert\n      expect(mockLeaveBalanceModel.getEmployeeLeaveBalances).toHaveBeenCalledWith('emp-123', currentYear);\n    });\n\n    it('should return zero balances if no leave balances found', async () => {\n      // Arrange\n      mockLeaveBalanceModel.getEmployeeLeaveBalances.mockResolvedValue([]);\n\n      // Act\n      const result = await leaveService.getEmployeeLeaveBalance('emp-123', 2024);\n\n      // Assert\n      expect(result).toEqual({\n        vacation: { total: 0, used: 0, available: 0 },\n        sick: { total: 0, used: 0, available: 0 },\n        maternity: { total: 0, used: 0, available: 0 },\n        other: { total: 0, used: 0, available: 0 }\n      });\n    });\n  });\n\n  describe('validateLeaveRequest', () => {\n    const validLeaveData: CreateLeaveRequestData = {\n      employeeId: 'emp-123',\n      leaveType: 'vacation',\n      startDate: new Date('2025-12-15'),\n      endDate: new Date('2025-12-17'),\n      reason: 'Family vacation'\n    };\n\n    it('should validate leave request successfully', async () => {\n      // Arrange\n      // Mock the specific method called by validateLeaveRequest\n      mockLeaveBalanceModel.findByEmployeeLeaveTypeAndYear.mockResolvedValue({\n        id: 'lb-1',\n        employeeId: 'emp-123',\n        leaveType: 'vacation',\n        balance: 15,\n        year: 2025,\n        updatedAt: new Date()\n      });\n      \n      mockLeaveModel.checkOverlappingLeaves.mockResolvedValue([]);\n\n      // Act\n      const result = await leaveService.validateLeaveRequest(validLeaveData);\n\n      // Assert\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should return validation errors for insufficient leave balance', async () => {\n      // Arrange\n      const insufficientBalanceData = {\n        ...validLeaveData,\n        startDate: new Date('2025-12-15'),\n        endDate: new Date('2025-12-22') // 6 working days (Mon-Fri + Mon)\n      };\n      \n      // Mock employee lookup\n      mockEmployeeModel.findById.mockResolvedValue(mockEmployee);\n      \n      // Mock the specific method called by validateLeaveRequest\n      mockLeaveBalanceModel.findByEmployeeLeaveTypeAndYear.mockResolvedValue({\n        id: 'lb-1',\n        employeeId: 'emp-123',\n        leaveType: 'vacation',\n        balance: 5, // Less than the 6 days requested\n        year: 2025,\n        updatedAt: new Date()\n      });\n      \n      // Mock checkOverlappingLeaves to return no overlaps\n      mockLeaveModel.checkOverlappingLeaves.mockResolvedValue([]);\n\n      // Act\n      const result = await leaveService.validateLeaveRequest(insufficientBalanceData);\n\n      // Assert\n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Insufficient leave balance. Available: 5 days, Requested: 6 days');\n    });\n\n    it('should return validation errors for overlapping requests', async () => {\n      // Arrange\n      const mockOverlappingRequests: Leave[] = [\n        {\n          id: 'leave-456',\n          employeeId: 'emp-123',\n          leaveType: 'sick',\n          startDate: new Date('2024-01-16'),\n          endDate: new Date('2024-01-18'),\n          totalDays: 3,\n          reason: null,\n          status: 'pending' as const,\n          approvedBy: null,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      ];\n      mockLeaveBalanceModel.getEmployeeLeaveBalances.mockResolvedValue([]);\n      mockLeaveModel.checkOverlappingLeaves.mockResolvedValue(mockOverlappingRequests);\n\n      // Act\n      const result = await leaveService.validateLeaveRequest(validLeaveData);\n\n      // Assert\n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Leave request overlaps with existing approved leave');\n    });\n  });\n\n  describe('getEmployeeLeaveRequests', () => {\n    const mockLeaveRequests: LeaveWithDetails[] = [\n      {\n        id: 'leave-123',\n        employeeId: 'emp-123',\n        leaveType: 'vacation',\n        startDate: new Date('2025-12-15'),\n        endDate: new Date('2025-12-17'),\n        totalDays: 3,\n        reason: 'Family vacation',\n        status: 'approved' as const,\n        approvedBy: 'approver-123',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        employeeCode: 'EMP001',\n        employeeName: 'John Doe',\n        departmentName: 'Engineering',\n        approverName: 'Jane Smith'\n      }\n    ];\n\n    it('should return employee leave requests', async () => {\n      // Arrange\n      mockLeaveModel.listLeaves.mockResolvedValue({ leaves: mockLeaveRequests, total: 1, page: 1, limit: 10, totalPages: 1 });\n\n      // Act\n      const result = await leaveService.getEmployeeLeaveRequests('emp-123');\n\n      // Assert\n      expect(mockLeaveModel.listLeaves).toHaveBeenCalledWith({\n        employeeId: 'emp-123',\n        startDate: undefined,\n        endDate: undefined,\n        page: 1,\n        limit: 20,\n        sortBy: 'created_at',\n        sortOrder: 'desc'\n      });\n      expect(result).toEqual({\n        leaves: mockLeaveRequests,\n        total: 1,\n        page: 1,\n        limit: 10,\n        totalPages: 1\n      });\n    });\n\n    it('should use current year if year not provided', async () => {\n      // Arrange\n      mockLeaveModel.listLeaves.mockResolvedValue({ leaves: [], total: 0, page: 1, limit: 10, totalPages: 1 });\n\n      // Act\n      await leaveService.getEmployeeLeaveRequests('emp-123');\n\n      // Assert\n      expect(mockLeaveModel.listLeaves).toHaveBeenCalledWith({\n        employeeId: 'emp-123',\n        startDate: undefined,\n        endDate: undefined,\n        page: 1,\n        limit: 20,\n        sortBy: 'created_at',\n        sortOrder: 'desc'\n      });\n    });\n  });\n\n  describe('deleteLeaveRequest', () => {\n    it('should delete leave request successfully', async () => {\n      // Arrange\n      mockLeaveModel.findById.mockResolvedValue(mockLeave);\n      mockLeaveModel.deleteLeave.mockResolvedValue(true);\n\n      // Act\n      const result = await leaveService.deleteLeaveRequest('leave-123');\n\n      // Assert\n      expect(mockLeaveModel.findById).toHaveBeenCalledWith('leave-123');\n      expect(mockLeaveModel.deleteLeave).toHaveBeenCalledWith('leave-123');\n      expect(result).toBe(true);\n    });\n\n    it('should throw error if leave request not found', async () => {\n      // Arrange\n      mockLeaveModel.findById.mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(leaveService.deleteLeaveRequest('nonexistent'))\n        .rejects.toThrow('Leave request not found');\n      expect(mockLeaveModel.findById).toHaveBeenCalledWith('nonexistent');\n    });\n  });\n});\n"],"version":3}