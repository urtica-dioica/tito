23f8ce701819810b8826864519395d0b
"use strict";

/* istanbul ignore next */
function cov_1cc36487rl() {
  var path = "/home/kim/tito/server/src/controllers/hr/employeeController.ts";
  var hash = "45f747302bebdfac5d66a60f422a6426aa90216a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/hr/employeeController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 22
        },
        end: {
          line: 37,
          column: 1
        }
      },
      "36": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 62
        }
      },
      "37": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 38,
          column: 62
        }
      },
      "38": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 36
        }
      },
      "39": {
        start: {
          line: 40,
          column: 26
        },
        end: {
          line: 40,
          column: 70
        }
      },
      "40": {
        start: {
          line: 41,
          column: 17
        },
        end: {
          line: 41,
          column: 63
        }
      },
      "41": {
        start: {
          line: 42,
          column: 18
        },
        end: {
          line: 42,
          column: 54
        }
      },
      "42": {
        start: {
          line: 43,
          column: 13
        },
        end: {
          line: 43,
          column: 47
        }
      },
      "43": {
        start: {
          line: 44,
          column: 13
        },
        end: {
          line: 44,
          column: 43
        }
      },
      "44": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 81,
          column: 10
        }
      },
      "45": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "46": {
        start: {
          line: 52,
          column: 34
        },
        end: {
          line: 52,
          column: 66
        }
      },
      "47": {
        start: {
          line: 53,
          column: 29
        },
        end: {
          line: 53,
          column: 37
        }
      },
      "48": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 63,
          column: 17
        }
      },
      "49": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 61,
          column: 23
        }
      },
      "50": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 62,
          column: 27
        }
      },
      "51": {
        start: {
          line: 64,
          column: 33
        },
        end: {
          line: 64,
          column: 80
        }
      },
      "52": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 70,
          column: 19
        }
      },
      "53": {
        start: {
          line: 73,
          column: 34
        },
        end: {
          line: 73,
          column: 66
        }
      },
      "54": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 105
        }
      },
      "55": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 79,
          column: 19
        }
      },
      "56": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 115,
          column: 10
        }
      },
      "57": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "58": {
        start: {
          line: 87,
          column: 34
        },
        end: {
          line: 87,
          column: 66
        }
      },
      "59": {
        start: {
          line: 88,
          column: 31
        },
        end: {
          line: 88,
          column: 41
        }
      },
      "60": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 96,
          column: 17
        }
      },
      "61": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 94,
          column: 23
        }
      },
      "62": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 95,
          column: 27
        }
      },
      "63": {
        start: {
          line: 97,
          column: 33
        },
        end: {
          line: 97,
          column: 83
        }
      },
      "64": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 103,
          column: 19
        }
      },
      "65": {
        start: {
          line: 106,
          column: 34
        },
        end: {
          line: 106,
          column: 66
        }
      },
      "66": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 102
        }
      },
      "67": {
        start: {
          line: 108,
          column: 35
        },
        end: {
          line: 108,
          column: 85
        }
      },
      "68": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 113,
          column: 19
        }
      },
      "69": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 155,
          column: 10
        }
      },
      "70": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "71": {
        start: {
          line: 121,
          column: 34
        },
        end: {
          line: 121,
          column: 66
        }
      },
      "72": {
        start: {
          line: 122,
          column: 31
        },
        end: {
          line: 131,
          column: 17
        }
      },
      "73": {
        start: {
          line: 132,
          column: 31
        },
        end: {
          line: 132,
          column: 79
        }
      },
      "74": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 144,
          column: 19
        }
      },
      "75": {
        start: {
          line: 147,
          column: 34
        },
        end: {
          line: 147,
          column: 66
        }
      },
      "76": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 104
        }
      },
      "77": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 153,
          column: 19
        }
      },
      "78": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 190,
          column: 10
        }
      },
      "79": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "80": {
        start: {
          line: 161,
          column: 34
        },
        end: {
          line: 161,
          column: 66
        }
      },
      "81": {
        start: {
          line: 162,
          column: 31
        },
        end: {
          line: 162,
          column: 41
        }
      },
      "82": {
        start: {
          line: 163,
          column: 29
        },
        end: {
          line: 163,
          column: 37
        }
      },
      "83": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 171,
          column: 17
        }
      },
      "84": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 169,
          column: 23
        }
      },
      "85": {
        start: {
          line: 170,
          column: 20
        },
        end: {
          line: 170,
          column: 27
        }
      },
      "86": {
        start: {
          line: 172,
          column: 33
        },
        end: {
          line: 172,
          column: 84
        }
      },
      "87": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 178,
          column: 19
        }
      },
      "88": {
        start: {
          line: 181,
          column: 34
        },
        end: {
          line: 181,
          column: 66
        }
      },
      "89": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 105
        }
      },
      "90": {
        start: {
          line: 183,
          column: 35
        },
        end: {
          line: 183,
          column: 85
        }
      },
      "91": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 188,
          column: 19
        }
      },
      "92": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 223,
          column: 10
        }
      },
      "93": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "94": {
        start: {
          line: 196,
          column: 34
        },
        end: {
          line: 196,
          column: 66
        }
      },
      "95": {
        start: {
          line: 197,
          column: 31
        },
        end: {
          line: 197,
          column: 41
        }
      },
      "96": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 205,
          column: 17
        }
      },
      "97": {
        start: {
          line: 199,
          column: 20
        },
        end: {
          line: 203,
          column: 23
        }
      },
      "98": {
        start: {
          line: 204,
          column: 20
        },
        end: {
          line: 204,
          column: 27
        }
      },
      "99": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 62
        }
      },
      "100": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 211,
          column: 19
        }
      },
      "101": {
        start: {
          line: 214,
          column: 34
        },
        end: {
          line: 214,
          column: 66
        }
      },
      "102": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 105
        }
      },
      "103": {
        start: {
          line: 216,
          column: 35
        },
        end: {
          line: 216,
          column: 85
        }
      },
      "104": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 221,
          column: 19
        }
      },
      "105": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 256,
          column: 10
        }
      },
      "106": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 255,
          column: 13
        }
      },
      "107": {
        start: {
          line: 229,
          column: 34
        },
        end: {
          line: 229,
          column: 66
        }
      },
      "108": {
        start: {
          line: 230,
          column: 31
        },
        end: {
          line: 230,
          column: 41
        }
      },
      "109": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 238,
          column: 17
        }
      },
      "110": {
        start: {
          line: 232,
          column: 20
        },
        end: {
          line: 236,
          column: 23
        }
      },
      "111": {
        start: {
          line: 237,
          column: 20
        },
        end: {
          line: 237,
          column: 27
        }
      },
      "112": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 66
        }
      },
      "113": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 244,
          column: 19
        }
      },
      "114": {
        start: {
          line: 247,
          column: 34
        },
        end: {
          line: 247,
          column: 66
        }
      },
      "115": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 110
        }
      },
      "116": {
        start: {
          line: 249,
          column: 35
        },
        end: {
          line: 249,
          column: 85
        }
      },
      "117": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 254,
          column: 19
        }
      },
      "118": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 280,
          column: 10
        }
      },
      "119": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 279,
          column: 13
        }
      },
      "120": {
        start: {
          line: 262,
          column: 34
        },
        end: {
          line: 262,
          column: 66
        }
      },
      "121": {
        start: {
          line: 263,
          column: 30
        },
        end: {
          line: 263,
          column: 75
        }
      },
      "122": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 269,
          column: 19
        }
      },
      "123": {
        start: {
          line: 272,
          column: 34
        },
        end: {
          line: 272,
          column: 66
        }
      },
      "124": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 113
        }
      },
      "125": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 278,
          column: 19
        }
      },
      "126": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 386,
          column: 10
        }
      },
      "127": {
        start: {
          line: 285,
          column: 30
        },
        end: {
          line: 285,
          column: 62
        }
      },
      "128": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 385,
          column: 13
        }
      },
      "129": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 295,
          column: 17
        }
      },
      "130": {
        start: {
          line: 289,
          column: 20
        },
        end: {
          line: 293,
          column: 23
        }
      },
      "131": {
        start: {
          line: 294,
          column: 20
        },
        end: {
          line: 294,
          column: 27
        }
      },
      "132": {
        start: {
          line: 296,
          column: 36
        },
        end: {
          line: 296,
          column: 49
        }
      },
      "133": {
        start: {
          line: 298,
          column: 35
        },
        end: {
          line: 298,
          column: 82
        }
      },
      "134": {
        start: {
          line: 300,
          column: 36
        },
        end: {
          line: 305,
          column: 18
        }
      },
      "135": {
        start: {
          line: 303,
          column: 49
        },
        end: {
          line: 303,
          column: 96
        }
      },
      "136": {
        start: {
          line: 304,
          column: 42
        },
        end: {
          line: 304,
          column: 54
        }
      },
      "137": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 316,
          column: 17
        }
      },
      "138": {
        start: {
          line: 308,
          column: 20
        },
        end: {
          line: 308,
          column: 57
        }
      },
      "139": {
        start: {
          line: 309,
          column: 20
        },
        end: {
          line: 314,
          column: 23
        }
      },
      "140": {
        start: {
          line: 315,
          column: 20
        },
        end: {
          line: 315,
          column: 27
        }
      },
      "141": {
        start: {
          line: 318,
          column: 40
        },
        end: {
          line: 318,
          column: 146
        }
      },
      "142": {
        start: {
          line: 319,
          column: 35
        },
        end: {
          line: 319,
          column: 73
        }
      },
      "143": {
        start: {
          line: 320,
          column: 39
        },
        end: {
          line: 320,
          column: 101
        }
      },
      "144": {
        start: {
          line: 320,
          column: 72
        },
        end: {
          line: 320,
          column: 100
        }
      },
      "145": {
        start: {
          line: 321,
          column: 16
        },
        end: {
          line: 332,
          column: 17
        }
      },
      "146": {
        start: {
          line: 323,
          column: 20
        },
        end: {
          line: 323,
          column: 57
        }
      },
      "147": {
        start: {
          line: 324,
          column: 20
        },
        end: {
          line: 330,
          column: 23
        }
      },
      "148": {
        start: {
          line: 331,
          column: 20
        },
        end: {
          line: 331,
          column: 27
        }
      },
      "149": {
        start: {
          line: 334,
          column: 38
        },
        end: {
          line: 343,
          column: 19
        }
      },
      "150": {
        start: {
          line: 334,
          column: 69
        },
        end: {
          line: 343,
          column: 17
        }
      },
      "151": {
        start: {
          line: 345,
          column: 16
        },
        end: {
          line: 354,
          column: 17
        }
      },
      "152": {
        start: {
          line: 347,
          column: 20
        },
        end: {
          line: 347,
          column: 57
        }
      },
      "153": {
        start: {
          line: 348,
          column: 20
        },
        end: {
          line: 352,
          column: 23
        }
      },
      "154": {
        start: {
          line: 353,
          column: 20
        },
        end: {
          line: 353,
          column: 27
        }
      },
      "155": {
        start: {
          line: 356,
          column: 32
        },
        end: {
          line: 356,
          column: 93
        }
      },
      "156": {
        start: {
          line: 358,
          column: 16
        },
        end: {
          line: 358,
          column: 53
        }
      },
      "157": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 371,
          column: 19
        }
      },
      "158": {
        start: {
          line: 374,
          column: 34
        },
        end: {
          line: 374,
          column: 66
        }
      },
      "159": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 111
        }
      },
      "160": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 379,
          column: 17
        }
      },
      "161": {
        start: {
          line: 378,
          column: 20
        },
        end: {
          line: 378,
          column: 59
        }
      },
      "162": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 384,
          column: 19
        }
      },
      "163": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 387,
          column: 71
        }
      },
      "164": {
        start: {
          line: 390,
          column: 0
        },
        end: {
          line: 390,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 35,
            column: 56
          },
          end: {
            line: 35,
            column: 57
          }
        },
        loc: {
          start: {
            line: 35,
            column: 71
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 35
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 18
          },
          end: {
            line: 388,
            column: 5
          }
        },
        line: 46
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 50,
            column: 30
          },
          end: {
            line: 50,
            column: 31
          }
        },
        loc: {
          start: {
            line: 50,
            column: 50
          },
          end: {
            line: 81,
            column: 9
          }
        },
        line: 50
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 85,
            column: 27
          },
          end: {
            line: 85,
            column: 28
          }
        },
        loc: {
          start: {
            line: 85,
            column: 47
          },
          end: {
            line: 115,
            column: 9
          }
        },
        line: 85
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 119,
            column: 29
          },
          end: {
            line: 119,
            column: 30
          }
        },
        loc: {
          start: {
            line: 119,
            column: 49
          },
          end: {
            line: 155,
            column: 9
          }
        },
        line: 119
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 159,
            column: 30
          },
          end: {
            line: 159,
            column: 31
          }
        },
        loc: {
          start: {
            line: 159,
            column: 50
          },
          end: {
            line: 190,
            column: 9
          }
        },
        line: 159
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 194,
            column: 30
          },
          end: {
            line: 194,
            column: 31
          }
        },
        loc: {
          start: {
            line: 194,
            column: 50
          },
          end: {
            line: 223,
            column: 9
          }
        },
        line: 194
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 227,
            column: 34
          },
          end: {
            line: 227,
            column: 35
          }
        },
        loc: {
          start: {
            line: 227,
            column: 54
          },
          end: {
            line: 256,
            column: 9
          }
        },
        line: 227
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 260,
            column: 32
          },
          end: {
            line: 260,
            column: 33
          }
        },
        loc: {
          start: {
            line: 260,
            column: 52
          },
          end: {
            line: 280,
            column: 9
          }
        },
        line: 260
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 284,
            column: 35
          },
          end: {
            line: 284,
            column: 36
          }
        },
        loc: {
          start: {
            line: 284,
            column: 55
          },
          end: {
            line: 386,
            column: 9
          }
        },
        line: 284
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 303,
            column: 37
          },
          end: {
            line: 303,
            column: 38
          }
        },
        loc: {
          start: {
            line: 303,
            column: 49
          },
          end: {
            line: 303,
            column: 96
          }
        },
        line: 303
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 304,
            column: 31
          },
          end: {
            line: 304,
            column: 32
          }
        },
        loc: {
          start: {
            line: 304,
            column: 42
          },
          end: {
            line: 304,
            column: 54
          }
        },
        line: 304
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 320,
            column: 62
          },
          end: {
            line: 320,
            column: 63
          }
        },
        loc: {
          start: {
            line: 320,
            column: 72
          },
          end: {
            line: 320,
            column: 100
          }
        },
        line: 320
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 334,
            column: 59
          },
          end: {
            line: 334,
            column: 60
          }
        },
        loc: {
          start: {
            line: 334,
            column: 69
          },
          end: {
            line: 343,
            column: 17
          }
        },
        line: 334
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 35,
            column: 22
          },
          end: {
            line: 37,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 23
          },
          end: {
            line: 35,
            column: 27
          }
        }, {
          start: {
            line: 35,
            column: 31
          },
          end: {
            line: 35,
            column: 51
          }
        }, {
          start: {
            line: 35,
            column: 56
          },
          end: {
            line: 37,
            column: 1
          }
        }],
        line: 35
      },
      "18": {
        loc: {
          start: {
            line: 36,
            column: 11
          },
          end: {
            line: 36,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 37
          },
          end: {
            line: 36,
            column: 40
          }
        }, {
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 36,
            column: 61
          }
        }],
        line: 36
      },
      "19": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 15
          }
        }, {
          start: {
            line: 36,
            column: 19
          },
          end: {
            line: 36,
            column: 33
          }
        }],
        line: 36
      },
      "20": {
        loc: {
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 63,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 63,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "21": {
        loc: {
          start: {
            line: 55,
            column: 20
          },
          end: {
            line: 56,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 20
          },
          end: {
            line: 55,
            column: 31
          }
        }, {
          start: {
            line: 55,
            column: 35
          },
          end: {
            line: 55,
            column: 50
          }
        }, {
          start: {
            line: 55,
            column: 54
          },
          end: {
            line: 55,
            column: 68
          }
        }, {
          start: {
            line: 55,
            column: 72
          },
          end: {
            line: 55,
            column: 90
          }
        }, {
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 56,
            column: 34
          }
        }, {
          start: {
            line: 56,
            column: 38
          },
          end: {
            line: 56,
            column: 58
          }
        }, {
          start: {
            line: 56,
            column: 62
          },
          end: {
            line: 56,
            column: 76
          }
        }, {
          start: {
            line: 56,
            column: 80
          },
          end: {
            line: 56,
            column: 96
          }
        }],
        line: 55
      },
      "22": {
        loc: {
          start: {
            line: 77,
            column: 29
          },
          end: {
            line: 77,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 29
          },
          end: {
            line: 77,
            column: 42
          }
        }, {
          start: {
            line: 77,
            column: 46
          },
          end: {
            line: 77,
            column: 73
          }
        }],
        line: 77
      },
      "23": {
        loc: {
          start: {
            line: 89,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "24": {
        loc: {
          start: {
            line: 108,
            column: 35
          },
          end: {
            line: 108,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 108,
            column: 76
          },
          end: {
            line: 108,
            column: 79
          }
        }, {
          start: {
            line: 108,
            column: 82
          },
          end: {
            line: 108,
            column: 85
          }
        }],
        line: 108
      },
      "25": {
        loc: {
          start: {
            line: 111,
            column: 29
          },
          end: {
            line: 111,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 29
          },
          end: {
            line: 111,
            column: 42
          }
        }, {
          start: {
            line: 111,
            column: 46
          },
          end: {
            line: 111,
            column: 70
          }
        }],
        line: 111
      },
      "26": {
        loc: {
          start: {
            line: 123,
            column: 26
          },
          end: {
            line: 123,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 46
          },
          end: {
            line: 123,
            column: 73
          }
        }, {
          start: {
            line: 123,
            column: 76
          },
          end: {
            line: 123,
            column: 85
          }
        }],
        line: 123
      },
      "27": {
        loc: {
          start: {
            line: 124,
            column: 27
          },
          end: {
            line: 124,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 124,
            column: 48
          },
          end: {
            line: 124,
            column: 76
          }
        }, {
          start: {
            line: 124,
            column: 79
          },
          end: {
            line: 124,
            column: 88
          }
        }],
        line: 124
      },
      "28": {
        loc: {
          start: {
            line: 151,
            column: 29
          },
          end: {
            line: 151,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 29
          },
          end: {
            line: 151,
            column: 42
          }
        }, {
          start: {
            line: 151,
            column: 46
          },
          end: {
            line: 151,
            column: 72
          }
        }],
        line: 151
      },
      "29": {
        loc: {
          start: {
            line: 164,
            column: 16
          },
          end: {
            line: 171,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 16
          },
          end: {
            line: 171,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "30": {
        loc: {
          start: {
            line: 183,
            column: 35
          },
          end: {
            line: 183,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 183,
            column: 76
          },
          end: {
            line: 183,
            column: 79
          }
        }, {
          start: {
            line: 183,
            column: 82
          },
          end: {
            line: 183,
            column: 85
          }
        }],
        line: 183
      },
      "31": {
        loc: {
          start: {
            line: 186,
            column: 29
          },
          end: {
            line: 186,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 29
          },
          end: {
            line: 186,
            column: 42
          }
        }, {
          start: {
            line: 186,
            column: 46
          },
          end: {
            line: 186,
            column: 73
          }
        }],
        line: 186
      },
      "32": {
        loc: {
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 205,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 205,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "33": {
        loc: {
          start: {
            line: 216,
            column: 35
          },
          end: {
            line: 216,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 216,
            column: 76
          },
          end: {
            line: 216,
            column: 79
          }
        }, {
          start: {
            line: 216,
            column: 82
          },
          end: {
            line: 216,
            column: 85
          }
        }],
        line: 216
      },
      "34": {
        loc: {
          start: {
            line: 219,
            column: 29
          },
          end: {
            line: 219,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 29
          },
          end: {
            line: 219,
            column: 42
          }
        }, {
          start: {
            line: 219,
            column: 46
          },
          end: {
            line: 219,
            column: 73
          }
        }],
        line: 219
      },
      "35": {
        loc: {
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 238,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 238,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "36": {
        loc: {
          start: {
            line: 249,
            column: 35
          },
          end: {
            line: 249,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 249,
            column: 76
          },
          end: {
            line: 249,
            column: 79
          }
        }, {
          start: {
            line: 249,
            column: 82
          },
          end: {
            line: 249,
            column: 85
          }
        }],
        line: 249
      },
      "37": {
        loc: {
          start: {
            line: 252,
            column: 29
          },
          end: {
            line: 252,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 29
          },
          end: {
            line: 252,
            column: 42
          }
        }, {
          start: {
            line: 252,
            column: 46
          },
          end: {
            line: 252,
            column: 85
          }
        }],
        line: 252
      },
      "38": {
        loc: {
          start: {
            line: 276,
            column: 29
          },
          end: {
            line: 276,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 29
          },
          end: {
            line: 276,
            column: 42
          }
        }, {
          start: {
            line: 276,
            column: 46
          },
          end: {
            line: 276,
            column: 81
          }
        }],
        line: 276
      },
      "39": {
        loc: {
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 295,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 295,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "40": {
        loc: {
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 316,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 316,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "41": {
        loc: {
          start: {
            line: 319,
            column: 47
          },
          end: {
            line: 319,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 319,
            column: 47
          },
          end: {
            line: 319,
            column: 66
          }
        }, {
          start: {
            line: 319,
            column: 70
          },
          end: {
            line: 319,
            column: 72
          }
        }],
        line: 319
      },
      "42": {
        loc: {
          start: {
            line: 321,
            column: 16
          },
          end: {
            line: 332,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 16
          },
          end: {
            line: 332,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "43": {
        loc: {
          start: {
            line: 345,
            column: 16
          },
          end: {
            line: 354,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 16
          },
          end: {
            line: 354,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "44": {
        loc: {
          start: {
            line: 377,
            column: 16
          },
          end: {
            line: 379,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 16
          },
          end: {
            line: 379,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "45": {
        loc: {
          start: {
            line: 377,
            column: 20
          },
          end: {
            line: 377,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 377,
            column: 20
          },
          end: {
            line: 377,
            column: 28
          }
        }, {
          start: {
            line: 377,
            column: 32
          },
          end: {
            line: 377,
            column: 70
          }
        }],
        line: 377
      },
      "46": {
        loc: {
          start: {
            line: 382,
            column: 29
          },
          end: {
            line: 382,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 382,
            column: 29
          },
          end: {
            line: 382,
            column: 42
          }
        }, {
          start: {
            line: 382,
            column: 46
          },
          end: {
            line: 382,
            column: 88
          }
        }],
        line: 382
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0, 0, 0, 0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/hr/employeeController.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/hr/employeeController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { EmployeeService, CreateEmployeeData, UpdateEmployeeData, EmployeeListParams } from '../../services/hr/employeeService';\nimport logger from '../../utils/logger';\nimport { getRequestId } from '../../utils/types/express';\nimport * as Papa from 'papaparse';\nimport fs from 'fs';\n\nexport class EmployeeController {\n  private employeeService: EmployeeService;\n\n  constructor() {\n    this.employeeService = new EmployeeService();\n  }\n\n  /**\n   * Create a new employee\n   */\n  createEmployee = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const data: CreateEmployeeData = req.body;\n\n      // Validate required fields\n      if (!data.email || !data.firstName || !data.lastName || !data.departmentId || \n          !data.position || !data.employmentType || !data.hireDate || !data.baseSalary) {\n        res.status(400).json({\n          success: false,\n          message: 'Missing required fields',\n          requestId\n        });\n        return;\n      }\n\n      const employee = await this.employeeService.createEmployee(data);\n\n      res.status(201).json({\n        success: true,\n        message: 'Employee created successfully',\n        data: employee,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to create employee', { error: (error as Error).message, requestId });\n      \n      res.status(400).json({\n        success: false,\n        message: (error as Error).message || 'Failed to create employee',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Get employee by ID\n   */\n  getEmployee = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const { id } = req.params;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Employee ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const employee = await this.employeeService.getEmployeeWithUser(id);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee retrieved successfully',\n        data: employee,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to get employee', { error: (error as Error).message, requestId });\n      \n      const statusCode = (error as Error).message === 'Employee not found' ? 404 : 400;\n      res.status(statusCode).json({\n        success: false,\n        message: (error as Error).message || 'Failed to get employee',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * List employees with filtering and pagination\n   */\n  listEmployees = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const params: EmployeeListParams = {\n        page: req.query['page'] ? parseInt(req.query['page'] as string) : undefined,\n        limit: req.query['limit'] ? parseInt(req.query['limit'] as string) : undefined,\n        search: req.query['search'] as string,\n        departmentId: req.query['departmentId'] as string,\n        status: req.query['status'] as string,\n        employmentType: req.query['employmentType'] as string,\n        sortBy: req.query['sortBy'] as string,\n        sortOrder: req.query['sortOrder'] as 'asc' | 'desc'\n      };\n\n      const result = await this.employeeService.listEmployees(params);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employees retrieved successfully',\n        data: result.employees,\n        pagination: {\n          total: result.total,\n          page: result.page,\n          limit: result.limit,\n          totalPages: result.totalPages\n        },\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to list employees', { error: (error as Error).message, requestId });\n      \n      res.status(400).json({\n        success: false,\n        message: (error as Error).message || 'Failed to list employees',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Update employee\n   */\n  updateEmployee = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const { id } = req.params;\n      const data: UpdateEmployeeData = req.body;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Employee ID is required',\n          requestId\n        });\n        return;\n      }\n\n      const employee = await this.employeeService.updateEmployee(id, data);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee updated successfully',\n        data: employee,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to update employee', { error: (error as Error).message, requestId });\n      \n      const statusCode = (error as Error).message === 'Employee not found' ? 404 : 400;\n      res.status(statusCode).json({\n        success: false,\n        message: (error as Error).message || 'Failed to update employee',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Delete employee (soft delete)\n   */\n  deleteEmployee = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const { id } = req.params;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Employee ID is required',\n          requestId\n        });\n        return;\n      }\n\n      await this.employeeService.deleteEmployee(id);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee deleted successfully',\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to delete employee', { error: (error as Error).message, requestId });\n      \n      const statusCode = (error as Error).message === 'Employee not found' ? 404 : 400;\n      res.status(statusCode).json({\n        success: false,\n        message: (error as Error).message || 'Failed to delete employee',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Hard delete employee (permanently remove from database)\n   */\n  hardDeleteEmployee = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n      const { id } = req.params;\n\n      if (!id) {\n        res.status(400).json({\n          success: false,\n          message: 'Employee ID is required',\n          requestId\n        });\n        return;\n      }\n\n      await this.employeeService.hardDeleteEmployee(id);\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee permanently deleted successfully',\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to hard delete employee', { error: (error as Error).message, requestId });\n      \n      const statusCode = (error as Error).message === 'Employee not found' ? 404 : 400;\n      res.status(statusCode).json({\n        success: false,\n        message: (error as Error).message || 'Failed to permanently delete employee',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Get employee statistics\n   */\n  getEmployeeStats = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const requestId = getRequestId(req);\n\n      const stats = await this.employeeService.getEmployeeStats();\n\n      res.status(200).json({\n        success: true,\n        message: 'Employee statistics retrieved successfully',\n        data: stats,\n        requestId\n      });\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to get employee statistics', { error: (error as Error).message, requestId });\n      \n      res.status(400).json({\n        success: false,\n        message: (error as Error).message || 'Failed to get employee statistics',\n        requestId\n      });\n    }\n  };\n\n  /**\n   * Create multiple employees from CSV file\n   */\n  createBulkEmployees = async (req: Request, res: Response): Promise<void> => {\n    const requestId = getRequestId(req);\n    \n    try {\n      // Check if file was uploaded\n      if (!req.file) {\n        res.status(400).json({\n          success: false,\n          message: 'No CSV file uploaded',\n          requestId\n        });\n        return;\n      }\n\n      const csvFilePath = req.file.path;\n      \n      // Read and parse CSV file\n      const csvContent = fs.readFileSync(csvFilePath, 'utf-8');\n      \n      // Parse CSV with Papa Parse\n      const parseResult = Papa.parse(csvContent, {\n        header: true,\n        skipEmptyLines: true,\n        transformHeader: (header) => header.trim().toLowerCase().replace(/\\s+/g, ''),\n        transform: (value) => value.trim()\n      });\n\n      if (parseResult.errors.length > 0) {\n        // Clean up uploaded file\n        fs.unlinkSync(csvFilePath);\n        \n        res.status(400).json({\n          success: false,\n          message: 'CSV parsing errors',\n          errors: parseResult.errors,\n          requestId\n        });\n        return;\n      }\n\n      // Validate CSV headers\n      const requiredHeaders = ['email', 'firstname', 'lastname', 'departmentid', 'position', 'employmenttype', 'hiredate', 'basesalary'];\n      const csvHeaders = Object.keys(parseResult.data[0] || {});\n      const missingHeaders = requiredHeaders.filter(header => !csvHeaders.includes(header));\n      \n      if (missingHeaders.length > 0) {\n        // Clean up uploaded file\n        fs.unlinkSync(csvFilePath);\n        \n        res.status(400).json({\n          success: false,\n          message: `Missing required CSV headers: ${missingHeaders.join(', ')}`,\n          requiredHeaders,\n          foundHeaders: csvHeaders,\n          requestId\n        });\n        return;\n      }\n\n      // Transform CSV data to CreateEmployeeData format\n      const employeesData: CreateEmployeeData[] = parseResult.data.map((row: any) => ({\n        email: row.email,\n        firstName: row.firstname,\n        lastName: row.lastname,\n        departmentId: row.departmentid,\n        position: row.position,\n        employmentType: row.employmenttype.toLowerCase(),\n        hireDate: new Date(row.hiredate),\n        baseSalary: parseFloat(row.basesalary)\n      }));\n\n      // Validate that we have data to process\n      if (employeesData.length === 0) {\n        // Clean up uploaded file\n        fs.unlinkSync(csvFilePath);\n        \n        res.status(400).json({\n          success: false,\n          message: 'No valid employee data found in CSV file',\n          requestId\n        });\n        return;\n      }\n\n      // Process bulk employee creation\n      const results = await this.employeeService.createBulkEmployees(employeesData);\n\n      // Clean up uploaded file\n      fs.unlinkSync(csvFilePath);\n\n      // Return results\n      res.status(200).json({\n        success: true,\n        message: `Bulk employee creation completed: ${results.successCount} successful, ${results.errorCount} failed`,\n        data: {\n          totalProcessed: results.totalProcessed,\n          successCount: results.successCount,\n          errorCount: results.errorCount,\n          successfulEmployees: results.success,\n          errors: results.errors\n        },\n        requestId\n      });\n\n    } catch (error) {\n      const requestId = getRequestId(req);\n      logger.error('Failed to create bulk employees', { error: (error as Error).message, requestId });\n      \n      // Clean up uploaded file if it exists\n      if (req.file && fs.existsSync(req.file.path)) {\n        fs.unlinkSync(req.file.path);\n      }\n      \n      res.status(500).json({\n        success: false,\n        message: (error as Error).message || 'Failed to process bulk employee creation',\n        requestId\n      });\n    }\n  };\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "45f747302bebdfac5d66a60f422a6426aa90216a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1cc36487rl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1cc36487rl();
var __createBinding =
/* istanbul ignore next */
(cov_1cc36487rl().s[0]++,
/* istanbul ignore next */
(cov_1cc36487rl().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1cc36487rl().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_1cc36487rl().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_1cc36487rl().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1cc36487rl().f[0]++;
  cov_1cc36487rl().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1cc36487rl().b[2][0]++;
    cov_1cc36487rl().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1cc36487rl().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_1cc36487rl().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_1cc36487rl().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_1cc36487rl().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_1cc36487rl().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_1cc36487rl().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_1cc36487rl().b[5][1]++,
  /* istanbul ignore next */
  (cov_1cc36487rl().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_1cc36487rl().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_1cc36487rl().b[3][0]++;
    cov_1cc36487rl().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_1cc36487rl().f[1]++;
        cov_1cc36487rl().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_1cc36487rl().b[3][1]++;
  }
  cov_1cc36487rl().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_1cc36487rl().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1cc36487rl().f[2]++;
  cov_1cc36487rl().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1cc36487rl().b[7][0]++;
    cov_1cc36487rl().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1cc36487rl().b[7][1]++;
  }
  cov_1cc36487rl().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_1cc36487rl().s[11]++,
/* istanbul ignore next */
(cov_1cc36487rl().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_1cc36487rl().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_1cc36487rl().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_1cc36487rl().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_1cc36487rl().f[3]++;
  cov_1cc36487rl().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_1cc36487rl().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_1cc36487rl().f[4]++;
  cov_1cc36487rl().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_1cc36487rl().s[14]++,
/* istanbul ignore next */
(cov_1cc36487rl().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1cc36487rl().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_1cc36487rl().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_1cc36487rl().f[5]++;
  cov_1cc36487rl().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_1cc36487rl().f[6]++;
    cov_1cc36487rl().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_1cc36487rl().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_1cc36487rl().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_1cc36487rl().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_1cc36487rl().s[17]++, []);
      /* istanbul ignore next */
      cov_1cc36487rl().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_1cc36487rl().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_1cc36487rl().b[12][0]++;
          cov_1cc36487rl().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_1cc36487rl().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1cc36487rl().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_1cc36487rl().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_1cc36487rl().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_1cc36487rl().f[8]++;
    cov_1cc36487rl().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1cc36487rl().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1cc36487rl().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_1cc36487rl().b[13][0]++;
      cov_1cc36487rl().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_1cc36487rl().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_1cc36487rl().s[26]++, {});
    /* istanbul ignore next */
    cov_1cc36487rl().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_1cc36487rl().b[15][0]++;
      cov_1cc36487rl().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_1cc36487rl().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_1cc36487rl().b[16][0]++;
          cov_1cc36487rl().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_1cc36487rl().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1cc36487rl().b[15][1]++;
    }
    cov_1cc36487rl().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_1cc36487rl().s[34]++;
    return result;
  };
}()));
var __importDefault =
/* istanbul ignore next */
(cov_1cc36487rl().s[35]++,
/* istanbul ignore next */
(cov_1cc36487rl().b[17][0]++, this) &&
/* istanbul ignore next */
(cov_1cc36487rl().b[17][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1cc36487rl().b[17][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1cc36487rl().f[9]++;
  cov_1cc36487rl().s[36]++;
  return /* istanbul ignore next */(cov_1cc36487rl().b[19][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1cc36487rl().b[19][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1cc36487rl().b[18][0]++, mod) :
  /* istanbul ignore next */
  (cov_1cc36487rl().b[18][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1cc36487rl().s[37]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1cc36487rl().s[38]++;
exports.EmployeeController = void 0;
const employeeService_1 =
/* istanbul ignore next */
(cov_1cc36487rl().s[39]++, require("../../services/hr/employeeService"));
const logger_1 =
/* istanbul ignore next */
(cov_1cc36487rl().s[40]++, __importDefault(require("../../utils/logger")));
const express_1 =
/* istanbul ignore next */
(cov_1cc36487rl().s[41]++, require("../../utils/types/express"));
const Papa =
/* istanbul ignore next */
(cov_1cc36487rl().s[42]++, __importStar(require("papaparse")));
const fs_1 =
/* istanbul ignore next */
(cov_1cc36487rl().s[43]++, __importDefault(require("fs")));
class EmployeeController {
  constructor() {
    /* istanbul ignore next */
    cov_1cc36487rl().f[10]++;
    cov_1cc36487rl().s[44]++;
    /**
     * Create a new employee
     */
    this.createEmployee = async (req, res) => {
      /* istanbul ignore next */
      cov_1cc36487rl().f[11]++;
      cov_1cc36487rl().s[45]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[46]++, (0, express_1.getRequestId)(req));
        const data =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[47]++, req.body);
        // Validate required fields
        /* istanbul ignore next */
        cov_1cc36487rl().s[48]++;
        if (
        /* istanbul ignore next */
        (cov_1cc36487rl().b[21][0]++, !data.email) ||
        /* istanbul ignore next */
        (cov_1cc36487rl().b[21][1]++, !data.firstName) ||
        /* istanbul ignore next */
        (cov_1cc36487rl().b[21][2]++, !data.lastName) ||
        /* istanbul ignore next */
        (cov_1cc36487rl().b[21][3]++, !data.departmentId) ||
        /* istanbul ignore next */
        (cov_1cc36487rl().b[21][4]++, !data.position) ||
        /* istanbul ignore next */
        (cov_1cc36487rl().b[21][5]++, !data.employmentType) ||
        /* istanbul ignore next */
        (cov_1cc36487rl().b[21][6]++, !data.hireDate) ||
        /* istanbul ignore next */
        (cov_1cc36487rl().b[21][7]++, !data.baseSalary)) {
          /* istanbul ignore next */
          cov_1cc36487rl().b[20][0]++;
          cov_1cc36487rl().s[49]++;
          res.status(400).json({
            success: false,
            message: 'Missing required fields',
            requestId
          });
          /* istanbul ignore next */
          cov_1cc36487rl().s[50]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1cc36487rl().b[20][1]++;
        }
        const employee =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[51]++, await this.employeeService.createEmployee(data));
        /* istanbul ignore next */
        cov_1cc36487rl().s[52]++;
        res.status(201).json({
          success: true,
          message: 'Employee created successfully',
          data: employee,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[53]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1cc36487rl().s[54]++;
        logger_1.default.error('Failed to create employee', {
          error: error.message,
          requestId
        });
        /* istanbul ignore next */
        cov_1cc36487rl().s[55]++;
        res.status(400).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1cc36487rl().b[22][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1cc36487rl().b[22][1]++, 'Failed to create employee'),
          requestId
        });
      }
    };
    /**
     * Get employee by ID
     */
    /* istanbul ignore next */
    cov_1cc36487rl().s[56]++;
    this.getEmployee = async (req, res) => {
      /* istanbul ignore next */
      cov_1cc36487rl().f[12]++;
      cov_1cc36487rl().s[57]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[58]++, (0, express_1.getRequestId)(req));
        const {
          id
        } =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[59]++, req.params);
        /* istanbul ignore next */
        cov_1cc36487rl().s[60]++;
        if (!id) {
          /* istanbul ignore next */
          cov_1cc36487rl().b[23][0]++;
          cov_1cc36487rl().s[61]++;
          res.status(400).json({
            success: false,
            message: 'Employee ID is required',
            requestId
          });
          /* istanbul ignore next */
          cov_1cc36487rl().s[62]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1cc36487rl().b[23][1]++;
        }
        const employee =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[63]++, await this.employeeService.getEmployeeWithUser(id));
        /* istanbul ignore next */
        cov_1cc36487rl().s[64]++;
        res.status(200).json({
          success: true,
          message: 'Employee retrieved successfully',
          data: employee,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[65]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1cc36487rl().s[66]++;
        logger_1.default.error('Failed to get employee', {
          error: error.message,
          requestId
        });
        const statusCode =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[67]++, error.message === 'Employee not found' ?
        /* istanbul ignore next */
        (cov_1cc36487rl().b[24][0]++, 404) :
        /* istanbul ignore next */
        (cov_1cc36487rl().b[24][1]++, 400));
        /* istanbul ignore next */
        cov_1cc36487rl().s[68]++;
        res.status(statusCode).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1cc36487rl().b[25][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1cc36487rl().b[25][1]++, 'Failed to get employee'),
          requestId
        });
      }
    };
    /**
     * List employees with filtering and pagination
     */
    /* istanbul ignore next */
    cov_1cc36487rl().s[69]++;
    this.listEmployees = async (req, res) => {
      /* istanbul ignore next */
      cov_1cc36487rl().f[13]++;
      cov_1cc36487rl().s[70]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[71]++, (0, express_1.getRequestId)(req));
        const params =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[72]++, {
          page: req.query['page'] ?
          /* istanbul ignore next */
          (cov_1cc36487rl().b[26][0]++, parseInt(req.query['page'])) :
          /* istanbul ignore next */
          (cov_1cc36487rl().b[26][1]++, undefined),
          limit: req.query['limit'] ?
          /* istanbul ignore next */
          (cov_1cc36487rl().b[27][0]++, parseInt(req.query['limit'])) :
          /* istanbul ignore next */
          (cov_1cc36487rl().b[27][1]++, undefined),
          search: req.query['search'],
          departmentId: req.query['departmentId'],
          status: req.query['status'],
          employmentType: req.query['employmentType'],
          sortBy: req.query['sortBy'],
          sortOrder: req.query['sortOrder']
        });
        const result =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[73]++, await this.employeeService.listEmployees(params));
        /* istanbul ignore next */
        cov_1cc36487rl().s[74]++;
        res.status(200).json({
          success: true,
          message: 'Employees retrieved successfully',
          data: result.employees,
          pagination: {
            total: result.total,
            page: result.page,
            limit: result.limit,
            totalPages: result.totalPages
          },
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[75]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1cc36487rl().s[76]++;
        logger_1.default.error('Failed to list employees', {
          error: error.message,
          requestId
        });
        /* istanbul ignore next */
        cov_1cc36487rl().s[77]++;
        res.status(400).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1cc36487rl().b[28][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1cc36487rl().b[28][1]++, 'Failed to list employees'),
          requestId
        });
      }
    };
    /**
     * Update employee
     */
    /* istanbul ignore next */
    cov_1cc36487rl().s[78]++;
    this.updateEmployee = async (req, res) => {
      /* istanbul ignore next */
      cov_1cc36487rl().f[14]++;
      cov_1cc36487rl().s[79]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[80]++, (0, express_1.getRequestId)(req));
        const {
          id
        } =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[81]++, req.params);
        const data =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[82]++, req.body);
        /* istanbul ignore next */
        cov_1cc36487rl().s[83]++;
        if (!id) {
          /* istanbul ignore next */
          cov_1cc36487rl().b[29][0]++;
          cov_1cc36487rl().s[84]++;
          res.status(400).json({
            success: false,
            message: 'Employee ID is required',
            requestId
          });
          /* istanbul ignore next */
          cov_1cc36487rl().s[85]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1cc36487rl().b[29][1]++;
        }
        const employee =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[86]++, await this.employeeService.updateEmployee(id, data));
        /* istanbul ignore next */
        cov_1cc36487rl().s[87]++;
        res.status(200).json({
          success: true,
          message: 'Employee updated successfully',
          data: employee,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[88]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1cc36487rl().s[89]++;
        logger_1.default.error('Failed to update employee', {
          error: error.message,
          requestId
        });
        const statusCode =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[90]++, error.message === 'Employee not found' ?
        /* istanbul ignore next */
        (cov_1cc36487rl().b[30][0]++, 404) :
        /* istanbul ignore next */
        (cov_1cc36487rl().b[30][1]++, 400));
        /* istanbul ignore next */
        cov_1cc36487rl().s[91]++;
        res.status(statusCode).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1cc36487rl().b[31][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1cc36487rl().b[31][1]++, 'Failed to update employee'),
          requestId
        });
      }
    };
    /**
     * Delete employee (soft delete)
     */
    /* istanbul ignore next */
    cov_1cc36487rl().s[92]++;
    this.deleteEmployee = async (req, res) => {
      /* istanbul ignore next */
      cov_1cc36487rl().f[15]++;
      cov_1cc36487rl().s[93]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[94]++, (0, express_1.getRequestId)(req));
        const {
          id
        } =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[95]++, req.params);
        /* istanbul ignore next */
        cov_1cc36487rl().s[96]++;
        if (!id) {
          /* istanbul ignore next */
          cov_1cc36487rl().b[32][0]++;
          cov_1cc36487rl().s[97]++;
          res.status(400).json({
            success: false,
            message: 'Employee ID is required',
            requestId
          });
          /* istanbul ignore next */
          cov_1cc36487rl().s[98]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1cc36487rl().b[32][1]++;
        }
        cov_1cc36487rl().s[99]++;
        await this.employeeService.deleteEmployee(id);
        /* istanbul ignore next */
        cov_1cc36487rl().s[100]++;
        res.status(200).json({
          success: true,
          message: 'Employee deleted successfully',
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[101]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1cc36487rl().s[102]++;
        logger_1.default.error('Failed to delete employee', {
          error: error.message,
          requestId
        });
        const statusCode =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[103]++, error.message === 'Employee not found' ?
        /* istanbul ignore next */
        (cov_1cc36487rl().b[33][0]++, 404) :
        /* istanbul ignore next */
        (cov_1cc36487rl().b[33][1]++, 400));
        /* istanbul ignore next */
        cov_1cc36487rl().s[104]++;
        res.status(statusCode).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1cc36487rl().b[34][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1cc36487rl().b[34][1]++, 'Failed to delete employee'),
          requestId
        });
      }
    };
    /**
     * Hard delete employee (permanently remove from database)
     */
    /* istanbul ignore next */
    cov_1cc36487rl().s[105]++;
    this.hardDeleteEmployee = async (req, res) => {
      /* istanbul ignore next */
      cov_1cc36487rl().f[16]++;
      cov_1cc36487rl().s[106]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[107]++, (0, express_1.getRequestId)(req));
        const {
          id
        } =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[108]++, req.params);
        /* istanbul ignore next */
        cov_1cc36487rl().s[109]++;
        if (!id) {
          /* istanbul ignore next */
          cov_1cc36487rl().b[35][0]++;
          cov_1cc36487rl().s[110]++;
          res.status(400).json({
            success: false,
            message: 'Employee ID is required',
            requestId
          });
          /* istanbul ignore next */
          cov_1cc36487rl().s[111]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1cc36487rl().b[35][1]++;
        }
        cov_1cc36487rl().s[112]++;
        await this.employeeService.hardDeleteEmployee(id);
        /* istanbul ignore next */
        cov_1cc36487rl().s[113]++;
        res.status(200).json({
          success: true,
          message: 'Employee permanently deleted successfully',
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[114]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1cc36487rl().s[115]++;
        logger_1.default.error('Failed to hard delete employee', {
          error: error.message,
          requestId
        });
        const statusCode =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[116]++, error.message === 'Employee not found' ?
        /* istanbul ignore next */
        (cov_1cc36487rl().b[36][0]++, 404) :
        /* istanbul ignore next */
        (cov_1cc36487rl().b[36][1]++, 400));
        /* istanbul ignore next */
        cov_1cc36487rl().s[117]++;
        res.status(statusCode).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1cc36487rl().b[37][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1cc36487rl().b[37][1]++, 'Failed to permanently delete employee'),
          requestId
        });
      }
    };
    /**
     * Get employee statistics
     */
    /* istanbul ignore next */
    cov_1cc36487rl().s[118]++;
    this.getEmployeeStats = async (req, res) => {
      /* istanbul ignore next */
      cov_1cc36487rl().f[17]++;
      cov_1cc36487rl().s[119]++;
      try {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[120]++, (0, express_1.getRequestId)(req));
        const stats =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[121]++, await this.employeeService.getEmployeeStats());
        /* istanbul ignore next */
        cov_1cc36487rl().s[122]++;
        res.status(200).json({
          success: true,
          message: 'Employee statistics retrieved successfully',
          data: stats,
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[123]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1cc36487rl().s[124]++;
        logger_1.default.error('Failed to get employee statistics', {
          error: error.message,
          requestId
        });
        /* istanbul ignore next */
        cov_1cc36487rl().s[125]++;
        res.status(400).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1cc36487rl().b[38][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1cc36487rl().b[38][1]++, 'Failed to get employee statistics'),
          requestId
        });
      }
    };
    /**
     * Create multiple employees from CSV file
     */
    /* istanbul ignore next */
    cov_1cc36487rl().s[126]++;
    this.createBulkEmployees = async (req, res) => {
      /* istanbul ignore next */
      cov_1cc36487rl().f[18]++;
      const requestId =
      /* istanbul ignore next */
      (cov_1cc36487rl().s[127]++, (0, express_1.getRequestId)(req));
      /* istanbul ignore next */
      cov_1cc36487rl().s[128]++;
      try {
        /* istanbul ignore next */
        cov_1cc36487rl().s[129]++;
        // Check if file was uploaded
        if (!req.file) {
          /* istanbul ignore next */
          cov_1cc36487rl().b[39][0]++;
          cov_1cc36487rl().s[130]++;
          res.status(400).json({
            success: false,
            message: 'No CSV file uploaded',
            requestId
          });
          /* istanbul ignore next */
          cov_1cc36487rl().s[131]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1cc36487rl().b[39][1]++;
        }
        const csvFilePath =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[132]++, req.file.path);
        // Read and parse CSV file
        const csvContent =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[133]++, fs_1.default.readFileSync(csvFilePath, 'utf-8'));
        // Parse CSV with Papa Parse
        const parseResult =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[134]++, Papa.parse(csvContent, {
          header: true,
          skipEmptyLines: true,
          transformHeader: header => {
            /* istanbul ignore next */
            cov_1cc36487rl().f[19]++;
            cov_1cc36487rl().s[135]++;
            return header.trim().toLowerCase().replace(/\s+/g, '');
          },
          transform: value => {
            /* istanbul ignore next */
            cov_1cc36487rl().f[20]++;
            cov_1cc36487rl().s[136]++;
            return value.trim();
          }
        }));
        /* istanbul ignore next */
        cov_1cc36487rl().s[137]++;
        if (parseResult.errors.length > 0) {
          /* istanbul ignore next */
          cov_1cc36487rl().b[40][0]++;
          cov_1cc36487rl().s[138]++;
          // Clean up uploaded file
          fs_1.default.unlinkSync(csvFilePath);
          /* istanbul ignore next */
          cov_1cc36487rl().s[139]++;
          res.status(400).json({
            success: false,
            message: 'CSV parsing errors',
            errors: parseResult.errors,
            requestId
          });
          /* istanbul ignore next */
          cov_1cc36487rl().s[140]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1cc36487rl().b[40][1]++;
        }
        // Validate CSV headers
        const requiredHeaders =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[141]++, ['email', 'firstname', 'lastname', 'departmentid', 'position', 'employmenttype', 'hiredate', 'basesalary']);
        const csvHeaders =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[142]++, Object.keys(
        /* istanbul ignore next */
        (cov_1cc36487rl().b[41][0]++, parseResult.data[0]) ||
        /* istanbul ignore next */
        (cov_1cc36487rl().b[41][1]++, {})));
        const missingHeaders =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[143]++, requiredHeaders.filter(header => {
          /* istanbul ignore next */
          cov_1cc36487rl().f[21]++;
          cov_1cc36487rl().s[144]++;
          return !csvHeaders.includes(header);
        }));
        /* istanbul ignore next */
        cov_1cc36487rl().s[145]++;
        if (missingHeaders.length > 0) {
          /* istanbul ignore next */
          cov_1cc36487rl().b[42][0]++;
          cov_1cc36487rl().s[146]++;
          // Clean up uploaded file
          fs_1.default.unlinkSync(csvFilePath);
          /* istanbul ignore next */
          cov_1cc36487rl().s[147]++;
          res.status(400).json({
            success: false,
            message: `Missing required CSV headers: ${missingHeaders.join(', ')}`,
            requiredHeaders,
            foundHeaders: csvHeaders,
            requestId
          });
          /* istanbul ignore next */
          cov_1cc36487rl().s[148]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1cc36487rl().b[42][1]++;
        }
        // Transform CSV data to CreateEmployeeData format
        const employeesData =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[149]++, parseResult.data.map(row => {
          /* istanbul ignore next */
          cov_1cc36487rl().f[22]++;
          cov_1cc36487rl().s[150]++;
          return {
            email: row.email,
            firstName: row.firstname,
            lastName: row.lastname,
            departmentId: row.departmentid,
            position: row.position,
            employmentType: row.employmenttype.toLowerCase(),
            hireDate: new Date(row.hiredate),
            baseSalary: parseFloat(row.basesalary)
          };
        }));
        // Validate that we have data to process
        /* istanbul ignore next */
        cov_1cc36487rl().s[151]++;
        if (employeesData.length === 0) {
          /* istanbul ignore next */
          cov_1cc36487rl().b[43][0]++;
          cov_1cc36487rl().s[152]++;
          // Clean up uploaded file
          fs_1.default.unlinkSync(csvFilePath);
          /* istanbul ignore next */
          cov_1cc36487rl().s[153]++;
          res.status(400).json({
            success: false,
            message: 'No valid employee data found in CSV file',
            requestId
          });
          /* istanbul ignore next */
          cov_1cc36487rl().s[154]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1cc36487rl().b[43][1]++;
        }
        // Process bulk employee creation
        const results =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[155]++, await this.employeeService.createBulkEmployees(employeesData));
        // Clean up uploaded file
        /* istanbul ignore next */
        cov_1cc36487rl().s[156]++;
        fs_1.default.unlinkSync(csvFilePath);
        // Return results
        /* istanbul ignore next */
        cov_1cc36487rl().s[157]++;
        res.status(200).json({
          success: true,
          message: `Bulk employee creation completed: ${results.successCount} successful, ${results.errorCount} failed`,
          data: {
            totalProcessed: results.totalProcessed,
            successCount: results.successCount,
            errorCount: results.errorCount,
            successfulEmployees: results.success,
            errors: results.errors
          },
          requestId
        });
      } catch (error) {
        const requestId =
        /* istanbul ignore next */
        (cov_1cc36487rl().s[158]++, (0, express_1.getRequestId)(req));
        /* istanbul ignore next */
        cov_1cc36487rl().s[159]++;
        logger_1.default.error('Failed to create bulk employees', {
          error: error.message,
          requestId
        });
        // Clean up uploaded file if it exists
        /* istanbul ignore next */
        cov_1cc36487rl().s[160]++;
        if (
        /* istanbul ignore next */
        (cov_1cc36487rl().b[45][0]++, req.file) &&
        /* istanbul ignore next */
        (cov_1cc36487rl().b[45][1]++, fs_1.default.existsSync(req.file.path))) {
          /* istanbul ignore next */
          cov_1cc36487rl().b[44][0]++;
          cov_1cc36487rl().s[161]++;
          fs_1.default.unlinkSync(req.file.path);
        } else
        /* istanbul ignore next */
        {
          cov_1cc36487rl().b[44][1]++;
        }
        cov_1cc36487rl().s[162]++;
        res.status(500).json({
          success: false,
          message:
          /* istanbul ignore next */
          (cov_1cc36487rl().b[46][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1cc36487rl().b[46][1]++, 'Failed to process bulk employee creation'),
          requestId
        });
      }
    };
    /* istanbul ignore next */
    cov_1cc36487rl().s[163]++;
    this.employeeService = new employeeService_1.EmployeeService();
  }
}
/* istanbul ignore next */
cov_1cc36487rl().s[164]++;
exports.EmployeeController = EmployeeController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlbXBsb3llZVNlcnZpY2VfMSIsImNvdl8xY2MzNjQ4N3JsIiwicyIsInJlcXVpcmUiLCJsb2dnZXJfMSIsIl9faW1wb3J0RGVmYXVsdCIsImV4cHJlc3NfMSIsIlBhcGEiLCJfX2ltcG9ydFN0YXIiLCJmc18xIiwiRW1wbG95ZWVDb250cm9sbGVyIiwiY29uc3RydWN0b3IiLCJmIiwiY3JlYXRlRW1wbG95ZWUiLCJyZXEiLCJyZXMiLCJyZXF1ZXN0SWQiLCJnZXRSZXF1ZXN0SWQiLCJkYXRhIiwiYm9keSIsImIiLCJlbWFpbCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiZGVwYXJ0bWVudElkIiwicG9zaXRpb24iLCJlbXBsb3ltZW50VHlwZSIsImhpcmVEYXRlIiwiYmFzZVNhbGFyeSIsInN0YXR1cyIsImpzb24iLCJzdWNjZXNzIiwibWVzc2FnZSIsImVtcGxveWVlIiwiZW1wbG95ZWVTZXJ2aWNlIiwiZXJyb3IiLCJkZWZhdWx0IiwiZ2V0RW1wbG95ZWUiLCJpZCIsInBhcmFtcyIsImdldEVtcGxveWVlV2l0aFVzZXIiLCJzdGF0dXNDb2RlIiwibGlzdEVtcGxveWVlcyIsInBhZ2UiLCJxdWVyeSIsInBhcnNlSW50IiwidW5kZWZpbmVkIiwibGltaXQiLCJzZWFyY2giLCJzb3J0QnkiLCJzb3J0T3JkZXIiLCJyZXN1bHQiLCJlbXBsb3llZXMiLCJwYWdpbmF0aW9uIiwidG90YWwiLCJ0b3RhbFBhZ2VzIiwidXBkYXRlRW1wbG95ZWUiLCJkZWxldGVFbXBsb3llZSIsImhhcmREZWxldGVFbXBsb3llZSIsImdldEVtcGxveWVlU3RhdHMiLCJzdGF0cyIsImNyZWF0ZUJ1bGtFbXBsb3llZXMiLCJmaWxlIiwiY3N2RmlsZVBhdGgiLCJwYXRoIiwiY3N2Q29udGVudCIsInJlYWRGaWxlU3luYyIsInBhcnNlUmVzdWx0IiwicGFyc2UiLCJoZWFkZXIiLCJza2lwRW1wdHlMaW5lcyIsInRyYW5zZm9ybUhlYWRlciIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJ0cmFuc2Zvcm0iLCJ2YWx1ZSIsImVycm9ycyIsImxlbmd0aCIsInVubGlua1N5bmMiLCJyZXF1aXJlZEhlYWRlcnMiLCJjc3ZIZWFkZXJzIiwiT2JqZWN0Iiwia2V5cyIsIm1pc3NpbmdIZWFkZXJzIiwiZmlsdGVyIiwiaW5jbHVkZXMiLCJqb2luIiwiZm91bmRIZWFkZXJzIiwiZW1wbG95ZWVzRGF0YSIsIm1hcCIsInJvdyIsImZpcnN0bmFtZSIsImxhc3RuYW1lIiwiZGVwYXJ0bWVudGlkIiwiZW1wbG95bWVudHR5cGUiLCJEYXRlIiwiaGlyZWRhdGUiLCJwYXJzZUZsb2F0IiwiYmFzZXNhbGFyeSIsInJlc3VsdHMiLCJzdWNjZXNzQ291bnQiLCJlcnJvckNvdW50IiwidG90YWxQcm9jZXNzZWQiLCJzdWNjZXNzZnVsRW1wbG95ZWVzIiwiZXhpc3RzU3luYyIsIkVtcGxveWVlU2VydmljZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIvaG9tZS9raW0vdGl0by9zZXJ2ZXIvc3JjL2NvbnRyb2xsZXJzL2hyL2VtcGxveWVlQ29udHJvbGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgRW1wbG95ZWVTZXJ2aWNlLCBDcmVhdGVFbXBsb3llZURhdGEsIFVwZGF0ZUVtcGxveWVlRGF0YSwgRW1wbG95ZWVMaXN0UGFyYW1zIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvaHIvZW1wbG95ZWVTZXJ2aWNlJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vLi4vdXRpbHMvbG9nZ2VyJztcbmltcG9ydCB7IGdldFJlcXVlc3RJZCB9IGZyb20gJy4uLy4uL3V0aWxzL3R5cGVzL2V4cHJlc3MnO1xuaW1wb3J0ICogYXMgUGFwYSBmcm9tICdwYXBhcGFyc2UnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuZXhwb3J0IGNsYXNzIEVtcGxveWVlQ29udHJvbGxlciB7XG4gIHByaXZhdGUgZW1wbG95ZWVTZXJ2aWNlOiBFbXBsb3llZVNlcnZpY2U7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5lbXBsb3llZVNlcnZpY2UgPSBuZXcgRW1wbG95ZWVTZXJ2aWNlKCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGVtcGxveWVlXG4gICAqL1xuICBjcmVhdGVFbXBsb3llZSA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVxdWVzdElkID0gZ2V0UmVxdWVzdElkKHJlcSk7XG4gICAgICBjb25zdCBkYXRhOiBDcmVhdGVFbXBsb3llZURhdGEgPSByZXEuYm9keTtcblxuICAgICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXG4gICAgICBpZiAoIWRhdGEuZW1haWwgfHwgIWRhdGEuZmlyc3ROYW1lIHx8ICFkYXRhLmxhc3ROYW1lIHx8ICFkYXRhLmRlcGFydG1lbnRJZCB8fCBcbiAgICAgICAgICAhZGF0YS5wb3NpdGlvbiB8fCAhZGF0YS5lbXBsb3ltZW50VHlwZSB8fCAhZGF0YS5oaXJlRGF0ZSB8fCAhZGF0YS5iYXNlU2FsYXJ5KSB7XG4gICAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBtZXNzYWdlOiAnTWlzc2luZyByZXF1aXJlZCBmaWVsZHMnLFxuICAgICAgICAgIHJlcXVlc3RJZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBlbXBsb3llZSA9IGF3YWl0IHRoaXMuZW1wbG95ZWVTZXJ2aWNlLmNyZWF0ZUVtcGxveWVlKGRhdGEpO1xuXG4gICAgICByZXMuc3RhdHVzKDIwMSkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6ICdFbXBsb3llZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgIGRhdGE6IGVtcGxveWVlLFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCByZXF1ZXN0SWQgPSBnZXRSZXF1ZXN0SWQocmVxKTtcbiAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBlbXBsb3llZScsIHsgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSwgcmVxdWVzdElkIH0pO1xuICAgICAgXG4gICAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBjcmVhdGUgZW1wbG95ZWUnLFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogR2V0IGVtcGxveWVlIGJ5IElEXG4gICAqL1xuICBnZXRFbXBsb3llZSA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVxdWVzdElkID0gZ2V0UmVxdWVzdElkKHJlcSk7XG4gICAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuXG4gICAgICBpZiAoIWlkKSB7XG4gICAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBtZXNzYWdlOiAnRW1wbG95ZWUgSUQgaXMgcmVxdWlyZWQnLFxuICAgICAgICAgIHJlcXVlc3RJZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBlbXBsb3llZSA9IGF3YWl0IHRoaXMuZW1wbG95ZWVTZXJ2aWNlLmdldEVtcGxveWVlV2l0aFVzZXIoaWQpO1xuXG4gICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6ICdFbXBsb3llZSByZXRyaWV2ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgICAgZGF0YTogZW1wbG95ZWUsXG4gICAgICAgIHJlcXVlc3RJZFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IHJlcXVlc3RJZCA9IGdldFJlcXVlc3RJZChyZXEpO1xuICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gZ2V0IGVtcGxveWVlJywgeyBlcnJvcjogKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlLCByZXF1ZXN0SWQgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHN0YXR1c0NvZGUgPSAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgPT09ICdFbXBsb3llZSBub3QgZm91bmQnID8gNDA0IDogNDAwO1xuICAgICAgcmVzLnN0YXR1cyhzdGF0dXNDb2RlKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSB8fCAnRmFpbGVkIHRvIGdldCBlbXBsb3llZScsXG4gICAgICAgIHJlcXVlc3RJZFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBMaXN0IGVtcGxveWVlcyB3aXRoIGZpbHRlcmluZyBhbmQgcGFnaW5hdGlvblxuICAgKi9cbiAgbGlzdEVtcGxveWVlcyA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVxdWVzdElkID0gZ2V0UmVxdWVzdElkKHJlcSk7XG4gICAgICBjb25zdCBwYXJhbXM6IEVtcGxveWVlTGlzdFBhcmFtcyA9IHtcbiAgICAgICAgcGFnZTogcmVxLnF1ZXJ5WydwYWdlJ10gPyBwYXJzZUludChyZXEucXVlcnlbJ3BhZ2UnXSBhcyBzdHJpbmcpIDogdW5kZWZpbmVkLFxuICAgICAgICBsaW1pdDogcmVxLnF1ZXJ5WydsaW1pdCddID8gcGFyc2VJbnQocmVxLnF1ZXJ5WydsaW1pdCddIGFzIHN0cmluZykgOiB1bmRlZmluZWQsXG4gICAgICAgIHNlYXJjaDogcmVxLnF1ZXJ5WydzZWFyY2gnXSBhcyBzdHJpbmcsXG4gICAgICAgIGRlcGFydG1lbnRJZDogcmVxLnF1ZXJ5WydkZXBhcnRtZW50SWQnXSBhcyBzdHJpbmcsXG4gICAgICAgIHN0YXR1czogcmVxLnF1ZXJ5WydzdGF0dXMnXSBhcyBzdHJpbmcsXG4gICAgICAgIGVtcGxveW1lbnRUeXBlOiByZXEucXVlcnlbJ2VtcGxveW1lbnRUeXBlJ10gYXMgc3RyaW5nLFxuICAgICAgICBzb3J0Qnk6IHJlcS5xdWVyeVsnc29ydEJ5J10gYXMgc3RyaW5nLFxuICAgICAgICBzb3J0T3JkZXI6IHJlcS5xdWVyeVsnc29ydE9yZGVyJ10gYXMgJ2FzYycgfCAnZGVzYydcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZW1wbG95ZWVTZXJ2aWNlLmxpc3RFbXBsb3llZXMocGFyYW1zKTtcblxuICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBtZXNzYWdlOiAnRW1wbG95ZWVzIHJldHJpZXZlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICBkYXRhOiByZXN1bHQuZW1wbG95ZWVzLFxuICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgdG90YWw6IHJlc3VsdC50b3RhbCxcbiAgICAgICAgICBwYWdlOiByZXN1bHQucGFnZSxcbiAgICAgICAgICBsaW1pdDogcmVzdWx0LmxpbWl0LFxuICAgICAgICAgIHRvdGFsUGFnZXM6IHJlc3VsdC50b3RhbFBhZ2VzXG4gICAgICAgIH0sXG4gICAgICAgIHJlcXVlc3RJZFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IHJlcXVlc3RJZCA9IGdldFJlcXVlc3RJZChyZXEpO1xuICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gbGlzdCBlbXBsb3llZXMnLCB7IGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UsIHJlcXVlc3RJZCB9KTtcbiAgICAgIFxuICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgbWVzc2FnZTogKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gbGlzdCBlbXBsb3llZXMnLFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogVXBkYXRlIGVtcGxveWVlXG4gICAqL1xuICB1cGRhdGVFbXBsb3llZSA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVxdWVzdElkID0gZ2V0UmVxdWVzdElkKHJlcSk7XG4gICAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICAgICAgY29uc3QgZGF0YTogVXBkYXRlRW1wbG95ZWVEYXRhID0gcmVxLmJvZHk7XG5cbiAgICAgIGlmICghaWQpIHtcbiAgICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIG1lc3NhZ2U6ICdFbXBsb3llZSBJRCBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgcmVxdWVzdElkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVtcGxveWVlID0gYXdhaXQgdGhpcy5lbXBsb3llZVNlcnZpY2UudXBkYXRlRW1wbG95ZWUoaWQsIGRhdGEpO1xuXG4gICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6ICdFbXBsb3llZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgIGRhdGE6IGVtcGxveWVlLFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCByZXF1ZXN0SWQgPSBnZXRSZXF1ZXN0SWQocmVxKTtcbiAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHVwZGF0ZSBlbXBsb3llZScsIHsgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSwgcmVxdWVzdElkIH0pO1xuICAgICAgXG4gICAgICBjb25zdCBzdGF0dXNDb2RlID0gKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlID09PSAnRW1wbG95ZWUgbm90IGZvdW5kJyA/IDQwNCA6IDQwMDtcbiAgICAgIHJlcy5zdGF0dXMoc3RhdHVzQ29kZSkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byB1cGRhdGUgZW1wbG95ZWUnLFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGVsZXRlIGVtcGxveWVlIChzb2Z0IGRlbGV0ZSlcbiAgICovXG4gIGRlbGV0ZUVtcGxveWVlID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXF1ZXN0SWQgPSBnZXRSZXF1ZXN0SWQocmVxKTtcbiAgICAgIGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG5cbiAgICAgIGlmICghaWQpIHtcbiAgICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIG1lc3NhZ2U6ICdFbXBsb3llZSBJRCBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgcmVxdWVzdElkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IHRoaXMuZW1wbG95ZWVTZXJ2aWNlLmRlbGV0ZUVtcGxveWVlKGlkKTtcblxuICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBtZXNzYWdlOiAnRW1wbG95ZWUgZGVsZXRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCByZXF1ZXN0SWQgPSBnZXRSZXF1ZXN0SWQocmVxKTtcbiAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGRlbGV0ZSBlbXBsb3llZScsIHsgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSwgcmVxdWVzdElkIH0pO1xuICAgICAgXG4gICAgICBjb25zdCBzdGF0dXNDb2RlID0gKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlID09PSAnRW1wbG95ZWUgbm90IGZvdW5kJyA/IDQwNCA6IDQwMDtcbiAgICAgIHJlcy5zdGF0dXMoc3RhdHVzQ29kZSkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBkZWxldGUgZW1wbG95ZWUnLFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogSGFyZCBkZWxldGUgZW1wbG95ZWUgKHBlcm1hbmVudGx5IHJlbW92ZSBmcm9tIGRhdGFiYXNlKVxuICAgKi9cbiAgaGFyZERlbGV0ZUVtcGxveWVlID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXF1ZXN0SWQgPSBnZXRSZXF1ZXN0SWQocmVxKTtcbiAgICAgIGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG5cbiAgICAgIGlmICghaWQpIHtcbiAgICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIG1lc3NhZ2U6ICdFbXBsb3llZSBJRCBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgcmVxdWVzdElkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IHRoaXMuZW1wbG95ZWVTZXJ2aWNlLmhhcmREZWxldGVFbXBsb3llZShpZCk7XG5cbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogJ0VtcGxveWVlIHBlcm1hbmVudGx5IGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgICAgcmVxdWVzdElkXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgcmVxdWVzdElkID0gZ2V0UmVxdWVzdElkKHJlcSk7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBoYXJkIGRlbGV0ZSBlbXBsb3llZScsIHsgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSwgcmVxdWVzdElkIH0pO1xuICAgICAgXG4gICAgICBjb25zdCBzdGF0dXNDb2RlID0gKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlID09PSAnRW1wbG95ZWUgbm90IGZvdW5kJyA/IDQwNCA6IDQwMDtcbiAgICAgIHJlcy5zdGF0dXMoc3RhdHVzQ29kZSkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBwZXJtYW5lbnRseSBkZWxldGUgZW1wbG95ZWUnLFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogR2V0IGVtcGxveWVlIHN0YXRpc3RpY3NcbiAgICovXG4gIGdldEVtcGxveWVlU3RhdHMgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcXVlc3RJZCA9IGdldFJlcXVlc3RJZChyZXEpO1xuXG4gICAgICBjb25zdCBzdGF0cyA9IGF3YWl0IHRoaXMuZW1wbG95ZWVTZXJ2aWNlLmdldEVtcGxveWVlU3RhdHMoKTtcblxuICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBtZXNzYWdlOiAnRW1wbG95ZWUgc3RhdGlzdGljcyByZXRyaWV2ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgICAgZGF0YTogc3RhdHMsXG4gICAgICAgIHJlcXVlc3RJZFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IHJlcXVlc3RJZCA9IGdldFJlcXVlc3RJZChyZXEpO1xuICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gZ2V0IGVtcGxveWVlIHN0YXRpc3RpY3MnLCB7IGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UsIHJlcXVlc3RJZCB9KTtcbiAgICAgIFxuICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgbWVzc2FnZTogKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gZ2V0IGVtcGxveWVlIHN0YXRpc3RpY3MnLFxuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ3JlYXRlIG11bHRpcGxlIGVtcGxveWVlcyBmcm9tIENTViBmaWxlXG4gICAqL1xuICBjcmVhdGVCdWxrRW1wbG95ZWVzID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHJlcXVlc3RJZCA9IGdldFJlcXVlc3RJZChyZXEpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBDaGVjayBpZiBmaWxlIHdhcyB1cGxvYWRlZFxuICAgICAgaWYgKCFyZXEuZmlsZSkge1xuICAgICAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgbWVzc2FnZTogJ05vIENTViBmaWxlIHVwbG9hZGVkJyxcbiAgICAgICAgICByZXF1ZXN0SWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY3N2RmlsZVBhdGggPSByZXEuZmlsZS5wYXRoO1xuICAgICAgXG4gICAgICAvLyBSZWFkIGFuZCBwYXJzZSBDU1YgZmlsZVxuICAgICAgY29uc3QgY3N2Q29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhjc3ZGaWxlUGF0aCwgJ3V0Zi04Jyk7XG4gICAgICBcbiAgICAgIC8vIFBhcnNlIENTViB3aXRoIFBhcGEgUGFyc2VcbiAgICAgIGNvbnN0IHBhcnNlUmVzdWx0ID0gUGFwYS5wYXJzZShjc3ZDb250ZW50LCB7XG4gICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgc2tpcEVtcHR5TGluZXM6IHRydWUsXG4gICAgICAgIHRyYW5zZm9ybUhlYWRlcjogKGhlYWRlcikgPT4gaGVhZGVyLnRyaW0oKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccysvZywgJycpLFxuICAgICAgICB0cmFuc2Zvcm06ICh2YWx1ZSkgPT4gdmFsdWUudHJpbSgpXG4gICAgICB9KTtcblxuICAgICAgaWYgKHBhcnNlUmVzdWx0LmVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIENsZWFuIHVwIHVwbG9hZGVkIGZpbGVcbiAgICAgICAgZnMudW5saW5rU3luYyhjc3ZGaWxlUGF0aCk7XG4gICAgICAgIFxuICAgICAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgbWVzc2FnZTogJ0NTViBwYXJzaW5nIGVycm9ycycsXG4gICAgICAgICAgZXJyb3JzOiBwYXJzZVJlc3VsdC5lcnJvcnMsXG4gICAgICAgICAgcmVxdWVzdElkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYXRlIENTViBoZWFkZXJzXG4gICAgICBjb25zdCByZXF1aXJlZEhlYWRlcnMgPSBbJ2VtYWlsJywgJ2ZpcnN0bmFtZScsICdsYXN0bmFtZScsICdkZXBhcnRtZW50aWQnLCAncG9zaXRpb24nLCAnZW1wbG95bWVudHR5cGUnLCAnaGlyZWRhdGUnLCAnYmFzZXNhbGFyeSddO1xuICAgICAgY29uc3QgY3N2SGVhZGVycyA9IE9iamVjdC5rZXlzKHBhcnNlUmVzdWx0LmRhdGFbMF0gfHwge30pO1xuICAgICAgY29uc3QgbWlzc2luZ0hlYWRlcnMgPSByZXF1aXJlZEhlYWRlcnMuZmlsdGVyKGhlYWRlciA9PiAhY3N2SGVhZGVycy5pbmNsdWRlcyhoZWFkZXIpKTtcbiAgICAgIFxuICAgICAgaWYgKG1pc3NpbmdIZWFkZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gQ2xlYW4gdXAgdXBsb2FkZWQgZmlsZVxuICAgICAgICBmcy51bmxpbmtTeW5jKGNzdkZpbGVQYXRoKTtcbiAgICAgICAgXG4gICAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBtZXNzYWdlOiBgTWlzc2luZyByZXF1aXJlZCBDU1YgaGVhZGVyczogJHttaXNzaW5nSGVhZGVycy5qb2luKCcsICcpfWAsXG4gICAgICAgICAgcmVxdWlyZWRIZWFkZXJzLFxuICAgICAgICAgIGZvdW5kSGVhZGVyczogY3N2SGVhZGVycyxcbiAgICAgICAgICByZXF1ZXN0SWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVHJhbnNmb3JtIENTViBkYXRhIHRvIENyZWF0ZUVtcGxveWVlRGF0YSBmb3JtYXRcbiAgICAgIGNvbnN0IGVtcGxveWVlc0RhdGE6IENyZWF0ZUVtcGxveWVlRGF0YVtdID0gcGFyc2VSZXN1bHQuZGF0YS5tYXAoKHJvdzogYW55KSA9PiAoe1xuICAgICAgICBlbWFpbDogcm93LmVtYWlsLFxuICAgICAgICBmaXJzdE5hbWU6IHJvdy5maXJzdG5hbWUsXG4gICAgICAgIGxhc3ROYW1lOiByb3cubGFzdG5hbWUsXG4gICAgICAgIGRlcGFydG1lbnRJZDogcm93LmRlcGFydG1lbnRpZCxcbiAgICAgICAgcG9zaXRpb246IHJvdy5wb3NpdGlvbixcbiAgICAgICAgZW1wbG95bWVudFR5cGU6IHJvdy5lbXBsb3ltZW50dHlwZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICBoaXJlRGF0ZTogbmV3IERhdGUocm93LmhpcmVkYXRlKSxcbiAgICAgICAgYmFzZVNhbGFyeTogcGFyc2VGbG9hdChyb3cuYmFzZXNhbGFyeSlcbiAgICAgIH0pKTtcblxuICAgICAgLy8gVmFsaWRhdGUgdGhhdCB3ZSBoYXZlIGRhdGEgdG8gcHJvY2Vzc1xuICAgICAgaWYgKGVtcGxveWVlc0RhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIENsZWFuIHVwIHVwbG9hZGVkIGZpbGVcbiAgICAgICAgZnMudW5saW5rU3luYyhjc3ZGaWxlUGF0aCk7XG4gICAgICAgIFxuICAgICAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgbWVzc2FnZTogJ05vIHZhbGlkIGVtcGxveWVlIGRhdGEgZm91bmQgaW4gQ1NWIGZpbGUnLFxuICAgICAgICAgIHJlcXVlc3RJZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcm9jZXNzIGJ1bGsgZW1wbG95ZWUgY3JlYXRpb25cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLmVtcGxveWVlU2VydmljZS5jcmVhdGVCdWxrRW1wbG95ZWVzKGVtcGxveWVlc0RhdGEpO1xuXG4gICAgICAvLyBDbGVhbiB1cCB1cGxvYWRlZCBmaWxlXG4gICAgICBmcy51bmxpbmtTeW5jKGNzdkZpbGVQYXRoKTtcblxuICAgICAgLy8gUmV0dXJuIHJlc3VsdHNcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogYEJ1bGsgZW1wbG95ZWUgY3JlYXRpb24gY29tcGxldGVkOiAke3Jlc3VsdHMuc3VjY2Vzc0NvdW50fSBzdWNjZXNzZnVsLCAke3Jlc3VsdHMuZXJyb3JDb3VudH0gZmFpbGVkYCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHRvdGFsUHJvY2Vzc2VkOiByZXN1bHRzLnRvdGFsUHJvY2Vzc2VkLFxuICAgICAgICAgIHN1Y2Nlc3NDb3VudDogcmVzdWx0cy5zdWNjZXNzQ291bnQsXG4gICAgICAgICAgZXJyb3JDb3VudDogcmVzdWx0cy5lcnJvckNvdW50LFxuICAgICAgICAgIHN1Y2Nlc3NmdWxFbXBsb3llZXM6IHJlc3VsdHMuc3VjY2VzcyxcbiAgICAgICAgICBlcnJvcnM6IHJlc3VsdHMuZXJyb3JzXG4gICAgICAgIH0sXG4gICAgICAgIHJlcXVlc3RJZFxuICAgICAgfSk7XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgcmVxdWVzdElkID0gZ2V0UmVxdWVzdElkKHJlcSk7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgYnVsayBlbXBsb3llZXMnLCB7IGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UsIHJlcXVlc3RJZCB9KTtcbiAgICAgIFxuICAgICAgLy8gQ2xlYW4gdXAgdXBsb2FkZWQgZmlsZSBpZiBpdCBleGlzdHNcbiAgICAgIGlmIChyZXEuZmlsZSAmJiBmcy5leGlzdHNTeW5jKHJlcS5maWxlLnBhdGgpKSB7XG4gICAgICAgIGZzLnVubGlua1N5bmMocmVxLmZpbGUucGF0aCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHByb2Nlc3MgYnVsayBlbXBsb3llZSBjcmVhdGlvbicsXG4gICAgICAgIHJlcXVlc3RJZFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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