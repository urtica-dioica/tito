a3e0a8f2f29ebc6af5a53fee83b39074
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const loadTestUtils_1 = require("./loadTestUtils");
const axios = {
    create: () => ({
        get: jest.fn(),
        post: jest.fn(),
        put: jest.fn(),
        delete: jest.fn(),
        patch: jest.fn(),
        interceptors: {
            request: { use: jest.fn() },
            response: { use: jest.fn() }
        }
    })
};
describe('Payroll Load Tests', () => {
    let loadTestRunner;
    let baseURL;
    let authToken;
    beforeAll(async () => {
        baseURL = process.env.TEST_BASE_URL || 'http://localhost:3000';
        const config = {
            baseURL,
            concurrentUsers: 5,
            requestsPerUser: 3,
            rampUpTime: 1000, // 1 second
            testDuration: 20000, // 20 seconds
            timeout: 15000 // 15 seconds
        };
        loadTestRunner = new loadTestUtils_1.LoadTestRunner(config);
        // Get authentication token for HR user
        try {
            const response = await axios.create().post(`${baseURL}/api/v1/auth/login`, {
                email: 'hr@example.com',
                password: 'password123'
            });
            authToken = response.data.data.accessToken;
        }
        catch (error) {
            console.warn('Could not obtain HR auth token for payroll load test');
            authToken = 'test-hr-token';
        }
    });
    describe('Payroll Periods Load Test', () => {
        it('should handle concurrent requests to get payroll periods', async () => {
            const requestFunction = async (axios) => {
                return axios.create().get('/api/v1/payroll/periods', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    },
                    params: {
                        page: 1,
                        limit: 10
                    }
                });
            };
            const result = await loadTestRunner.runLoadTest(requestFunction, 'Get Payroll Periods Load Test');
            // Performance assertions
            expect(result.averageResponseTime).toBeLessThan(2000); // Less than 2 seconds
            expect(result.errorRate).toBeLessThan(0.1); // Less than 10% error rate
            expect(result.requestsPerSecond).toBeGreaterThan(2); // At least 2 RPS
            console.log(loadTestRunner.generateReport(result, 'Get Payroll Periods Load Test'));
        }, 60000);
    });
    describe('Payroll Records Load Test', () => {
        it('should handle concurrent requests to get payroll records', async () => {
            const requestFunction = async (axios) => {
                return axios.create().get('/api/v1/payroll/periods/test-period-id/records', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    },
                    params: {
                        page: 1,
                        limit: 20
                    }
                });
            };
            const result = await loadTestRunner.runLoadTest(requestFunction, 'Get Payroll Records Load Test');
            // Performance assertions
            expect(result.averageResponseTime).toBeLessThan(3000); // Less than 3 seconds
            expect(result.errorRate).toBeLessThan(0.15); // Less than 15% error rate
            expect(result.requestsPerSecond).toBeGreaterThan(1); // At least 1 RPS
            console.log(loadTestRunner.generateReport(result, 'Get Payroll Records Load Test'));
        }, 60000);
    });
    describe('Payroll Summary Load Test', () => {
        it('should handle concurrent requests to get payroll summary', async () => {
            const requestFunction = async (axios) => {
                return axios.create().get('/api/v1/payroll/periods/test-period-id/summary', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
            };
            const result = await loadTestRunner.runLoadTest(requestFunction, 'Get Payroll Summary Load Test');
            // Performance assertions
            expect(result.averageResponseTime).toBeLessThan(2500); // Less than 2.5 seconds
            expect(result.errorRate).toBeLessThan(0.1); // Less than 10% error rate
            expect(result.requestsPerSecond).toBeGreaterThan(2); // At least 2 RPS
            console.log(loadTestRunner.generateReport(result, 'Get Payroll Summary Load Test'));
        }, 60000);
    });
    describe('Payroll Generation Load Test', () => {
        it('should handle concurrent payroll generation requests', async () => {
            const requestFunction = async (axios) => {
                return axios.create().post('/api/v1/payroll/periods/test-period-id/generate', {}, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
            };
            const result = await loadTestRunner.runLoadTest(requestFunction, 'Payroll Generation Load Test');
            // Performance assertions (more lenient for generation)
            expect(result.averageResponseTime).toBeLessThan(10000); // Less than 10 seconds
            expect(result.errorRate).toBeLessThan(0.2); // Less than 20% error rate
            expect(result.requestsPerSecond).toBeGreaterThan(0.5); // At least 0.5 RPS
            console.log(loadTestRunner.generateReport(result, 'Payroll Generation Load Test'));
        }, 90000);
    });
    describe('Payroll Stats Load Test', () => {
        it('should handle concurrent requests to get payroll statistics', async () => {
            const requestFunction = async (axios) => {
                return axios.create().get('/api/v1/payroll/stats', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    },
                    params: {
                        period: '2024-01'
                    }
                });
            };
            const result = await loadTestRunner.runLoadTest(requestFunction, 'Get Payroll Stats Load Test');
            // Performance assertions
            expect(result.averageResponseTime).toBeLessThan(3000); // Less than 3 seconds
            expect(result.errorRate).toBeLessThan(0.1); // Less than 10% error rate
            expect(result.requestsPerSecond).toBeGreaterThan(1); // At least 1 RPS
            console.log(loadTestRunner.generateReport(result, 'Get Payroll Stats Load Test'));
        }, 60000);
    });
    describe('High Load Payroll Test', () => {
        it('should handle high concurrent load on payroll endpoints', async () => {
            const highLoadConfig = {
                baseURL,
                concurrentUsers: 20,
                requestsPerUser: 5,
                rampUpTime: 3000, // 3 seconds
                testDuration: 45000, // 45 seconds
                timeout: 20000 // 20 seconds
            };
            const highLoadRunner = new loadTestUtils_1.LoadTestRunner(highLoadConfig);
            const requestFunction = async (axios) => {
                return axios.create().get('/api/v1/payroll/periods', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    },
                    params: {
                        page: 1,
                        limit: 10
                    }
                });
            };
            const result = await highLoadRunner.runLoadTest(requestFunction, 'High Load Payroll Test');
            // High load performance assertions
            expect(result.averageResponseTime).toBeLessThan(4000); // Less than 4 seconds
            expect(result.errorRate).toBeLessThan(0.15); // Less than 15% error rate
            expect(result.requestsPerSecond).toBeGreaterThan(5); // At least 5 RPS
            expect(result.totalRequests).toBe(100); // 20 users * 5 requests each
            console.log(highLoadRunner.generateReport(result, 'High Load Payroll Test'));
        }, 90000);
    });
    describe('Payroll Endpoint Comparison', () => {
        it('should compare performance across different payroll endpoints', async () => {
            const endpoints = [
                {
                    name: 'Get Periods',
                    request: (axios) => axios.create().get('/api/v1/payroll/periods', {
                        headers: { 'Authorization': `Bearer ${authToken}` },
                        params: { page: 1, limit: 10 }
                    })
                },
                {
                    name: 'Get Records',
                    request: (axios) => axios.create().get('/api/v1/payroll/periods/test-period-id/records', {
                        headers: { 'Authorization': `Bearer ${authToken}` },
                        params: { page: 1, limit: 20 }
                    })
                },
                {
                    name: 'Get Summary',
                    request: (axios) => axios.create().get('/api/v1/payroll/periods/test-period-id/summary', {
                        headers: { 'Authorization': `Bearer ${authToken}` }
                    })
                },
                {
                    name: 'Get Stats',
                    request: (axios) => axios.create().get('/api/v1/payroll/stats', {
                        headers: { 'Authorization': `Bearer ${authToken}` },
                        params: { period: '2024-01' }
                    })
                }
            ];
            const results = {};
            for (const endpoint of endpoints) {
                const result = await loadTestRunner.runLoadTest(endpoint.request, `${endpoint.name} Performance`);
                results[endpoint.name] = result;
            }
            // Compare results
            console.log('\nðŸ“Š PAYROLL ENDPOINT COMPARISON');
            console.log('==============================');
            for (const [name, result] of Object.entries(results)) {
                console.log(`\n${name}:`);
                console.log(`  Average Response Time: ${result.averageResponseTime.toFixed(2)}ms`);
                console.log(`  Error Rate: ${(result.errorRate * 100).toFixed(2)}%`);
                console.log(`  Requests/Second: ${result.requestsPerSecond.toFixed(2)}`);
            }
            // Assertions for endpoint comparison
            expect(results['Get Periods'].averageResponseTime).toBeLessThan(2000);
            expect(results['Get Records'].averageResponseTime).toBeLessThan(3000);
            expect(results['Get Summary'].averageResponseTime).toBeLessThan(2500);
            expect(results['Get Stats'].averageResponseTime).toBeLessThan(3000);
        }, 120000);
    });
    describe('Payroll Stress Test', () => {
        it('should handle stress conditions on payroll endpoints', async () => {
            const stressConfig = {
                baseURL,
                concurrentUsers: 30,
                requestsPerUser: 10,
                rampUpTime: 5000, // 5 seconds
                testDuration: 90000, // 90 seconds
                timeout: 30000 // 30 seconds
            };
            const stressRunner = new loadTestUtils_1.LoadTestRunner(stressConfig);
            const requestFunction = async (axios) => {
                return axios.create().get('/api/v1/payroll/periods', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    },
                    params: {
                        page: 1,
                        limit: 10
                    }
                });
            };
            const result = await stressRunner.runLoadTest(requestFunction, 'Payroll Stress Test');
            // Stress test performance assertions (more lenient)
            expect(result.averageResponseTime).toBeLessThan(6000); // Less than 6 seconds
            expect(result.errorRate).toBeLessThan(0.25); // Less than 25% error rate
            expect(result.requestsPerSecond).toBeGreaterThan(3); // At least 3 RPS
            expect(result.totalRequests).toBe(300); // 30 users * 10 requests each
            console.log(stressRunner.generateReport(result, 'Payroll Stress Test'));
        }, 150000);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,