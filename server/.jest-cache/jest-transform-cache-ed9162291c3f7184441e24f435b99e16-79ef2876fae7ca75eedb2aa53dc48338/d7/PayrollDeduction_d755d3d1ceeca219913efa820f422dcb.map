{"version":3,"names":["cov_1hwluup16b","actualCoverage","database_1","s","require","logger_1","__importDefault","PayrollDeductionModel","constructor","f","pool","getPool","create","data","client","connect","query","values","payroll_record_id","deduction_type_id","name","amount","result","deduction","rows","default","info","deductionId","id","payrollRecordId","deductionType","deduction_type","error","message","release","findById","b","findAll","params","page","limit","offset","whereClause","conditions","paramIndex","push","length","join","countQuery","countResult","total","parseInt","count","deductions","findByPayrollRecord","update","fields","undefined","percentage","updates","delete","deleted","rowCount","deleteByPayrollRecord","deletedCount","getTotalDeductionsByRecord","parseFloat","total_deductions","exports","payrollDeductionModel"],"sources":["/home/kim/tito/server/src/models/payroll/PayrollDeduction.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface PayrollDeduction {\n  id: string;\n  payroll_record_id: string;\n  deduction_type_id: string;\n  name: string;\n  amount: number;\n  created_at: Date;\n}\n\nexport interface CreatePayrollDeductionData {\n  payroll_record_id: string;\n  deduction_type_id: string;\n  name: string;\n  amount: number;\n}\n\nexport interface UpdatePayrollDeductionData {\n  deduction_type?: string;\n  amount?: number;\n  percentage?: number | null;\n}\n\nexport interface PayrollDeductionListParams {\n  payroll_record_id?: string;\n  deduction_type?: string;\n  page?: number;\n  limit?: number;\n}\n\nclass PayrollDeductionModel {\n  private pool = getPool();\n\n  async create(data: CreatePayrollDeductionData): Promise<PayrollDeduction> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        INSERT INTO payroll_deductions (payroll_record_id, deduction_type_id, name, amount)\n        VALUES ($1, $2, $3, $4)\n        RETURNING *\n      `;\n      const values = [data.payroll_record_id, data.deduction_type_id, data.name, data.amount];\n      \n      const result = await client.query(query, values);\n      const deduction = result.rows[0];\n      \n      logger.info('Payroll deduction created', { \n        deductionId: deduction.id, \n        payrollRecordId: deduction.payroll_record_id,\n        deductionType: deduction.deduction_type,\n        amount: deduction.amount\n      });\n      return deduction;\n    } catch (error) {\n      logger.error('Error creating payroll deduction', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findById(id: string): Promise<PayrollDeduction | null> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'SELECT * FROM payroll_deductions WHERE id = $1';\n      const result = await client.query(query, [id]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Error finding payroll deduction by ID', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findAll(params: PayrollDeductionListParams = {}): Promise<{ deductions: PayrollDeduction[]; total: number }> {\n    const client = await this.pool.connect();\n    try {\n      const { page = 1, limit = 10, payroll_record_id, deduction_type } = params;\n      const offset = (page - 1) * limit;\n      \n      let whereClause = '';\n      const conditions: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (payroll_record_id) {\n        conditions.push(`payroll_record_id = $${paramIndex++}`);\n        values.push(payroll_record_id);\n      }\n\n      if (deduction_type) {\n        conditions.push(`deduction_type = $${paramIndex++}`);\n        values.push(deduction_type);\n      }\n\n      if (conditions.length > 0) {\n        whereClause = `WHERE ${conditions.join(' AND ')}`;\n      }\n\n      // Get total count\n      const countQuery = `SELECT COUNT(*) FROM payroll_deductions ${whereClause}`;\n      const countResult = await client.query(countQuery, values);\n      const total = parseInt(countResult.rows[0].count);\n\n      // Get deductions\n      const query = `\n        SELECT * FROM payroll_deductions \n        ${whereClause}\n        ORDER BY created_at DESC\n        LIMIT $${paramIndex++} OFFSET $${paramIndex++}\n      `;\n      values.push(limit, offset);\n      \n      const result = await client.query(query, values);\n      \n      return {\n        deductions: result.rows,\n        total\n      };\n    } catch (error) {\n      logger.error('Error finding payroll deductions', { error: (error as Error).message, params });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async findByPayrollRecord(payrollRecordId: string): Promise<PayrollDeduction[]> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT * FROM payroll_deductions \n        WHERE payroll_record_id = $1\n        ORDER BY created_at ASC\n      `;\n      const result = await client.query(query, [payrollRecordId]);\n      return result.rows;\n    } catch (error) {\n      logger.error('Error finding payroll deductions by record', { \n        error: (error as Error).message, \n        payrollRecordId \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async update(id: string, data: UpdatePayrollDeductionData): Promise<PayrollDeduction | null> {\n    const client = await this.pool.connect();\n    try {\n      const fields: string[] = [];\n      const values: any[] = [];\n      let paramIndex = 1;\n\n      if (data.deduction_type !== undefined) {\n        fields.push(`deduction_type = $${paramIndex++}`);\n        values.push(data.deduction_type);\n      }\n\n      if (data.amount !== undefined) {\n        fields.push(`amount = $${paramIndex++}`);\n        values.push(data.amount);\n      }\n\n      if (data.percentage !== undefined) {\n        fields.push(`percentage = $${paramIndex++}`);\n        values.push(data.percentage);\n      }\n\n      if (fields.length === 0) {\n        return await this.findById(id);\n      }\n\n      values.push(id);\n\n      const query = `\n        UPDATE payroll_deductions \n        SET ${fields.join(', ')}\n        WHERE id = $${paramIndex}\n        RETURNING *\n      `;\n\n      const result = await client.query(query, values);\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      logger.info('Payroll deduction updated', { deductionId: id, updates: data });\n      return result.rows[0];\n    } catch (error) {\n      logger.error('Error updating payroll deduction', { error: (error as Error).message, id, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async delete(id: string): Promise<boolean> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'DELETE FROM payroll_deductions WHERE id = $1';\n      const result = await client.query(query, [id]);\n      \n      const deleted = (result.rowCount || 0) > 0;\n      if (deleted) {\n        logger.info('Payroll deduction deleted', { deductionId: id });\n      }\n      \n      return deleted;\n    } catch (error) {\n      logger.error('Error deleting payroll deduction', { error: (error as Error).message, id });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async deleteByPayrollRecord(payrollRecordId: string): Promise<number> {\n    const client = await this.pool.connect();\n    try {\n      const query = 'DELETE FROM payroll_deductions WHERE payroll_record_id = $1';\n      const result = await client.query(query, [payrollRecordId]);\n      \n      const deletedCount = result.rowCount || 0;\n      if (deletedCount > 0) {\n        logger.info('Payroll deductions deleted by record', { \n          payrollRecordId, \n          deletedCount \n        });\n      }\n      \n      return deletedCount;\n    } catch (error) {\n      logger.error('Error deleting payroll deductions by record', { \n        error: (error as Error).message, \n        payrollRecordId \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getTotalDeductionsByRecord(payrollRecordId: string): Promise<number> {\n    const client = await this.pool.connect();\n    try {\n      const query = `\n        SELECT COALESCE(SUM(amount), 0) as total_deductions\n        FROM payroll_deductions \n        WHERE payroll_record_id = $1\n      `;\n      const result = await client.query(query, [payrollRecordId]);\n      return parseFloat(result.rows[0].total_deductions);\n    } catch (error) {\n      logger.error('Error getting total deductions by record', { \n        error: (error as Error).message, \n        payrollRecordId \n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n}\n\nexport const payrollDeductionModel = new PayrollDeductionModel();"],"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","ignoreList":[]}