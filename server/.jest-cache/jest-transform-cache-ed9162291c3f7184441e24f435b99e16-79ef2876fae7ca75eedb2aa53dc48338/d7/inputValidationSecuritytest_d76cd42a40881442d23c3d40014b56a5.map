{"file":"/home/kim/tito/server/tests/security/inputValidationSecurity.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/security/inputValidationSecurity.test.ts"],"sourcesContent":["/**\n * Input Validation Security Tests\n * \n * Comprehensive testing of input validation and sanitization, including:\n * - SQL injection prevention\n * - XSS prevention\n * - Input sanitization\n * - File upload security\n * - Data validation\n */\n\nimport { SecurityTestConfig } from './securityTestUtils';\n// Mock axios for testing\nconst axios = {\n  create: () => ({\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n    patch: jest.fn(),\n    interceptors: {\n      request: { use: jest.fn() },\n      response: { use: jest.fn() }\n    }\n  })\n};\n\ndescribe('Input Validation Security Tests', () => {\n  let config: SecurityTestConfig;\n  let authToken: string;\n\n  beforeAll(async () => {\n    config = {\n      baseURL: process.env.TEST_BASE_URL || 'http://localhost:3000',\n      timeout: 30000,\n      maxRetries: 3,\n      testUser: {\n        username: 'testuser',\n        password: 'TestPassword123!',\n        role: 'employee'\n      },\n      adminUser: {\n        username: 'admin',\n        password: 'AdminPassword123!',\n        role: 'hr'\n      }\n    };\n\n    // securitySuite = new SecurityTestSuite(config);\n\n    // Get authentication token\n    try {\n      const response = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {\n        username: 'testuser',\n        password: 'TestPassword123!'\n      }, {\n        timeout: 10000,\n        validateStatus: () => true\n      });\n      \n      if (response.status === 200) {\n        authToken = response.data.token;\n      }\n    } catch (error) {\n      console.warn('Could not obtain auth token, some tests may be skipped');\n    }\n  });\n\n  describe('SQL Injection Prevention', () => {\n    const sqlInjectionPayloads = [\n      \"' OR '1'='1\",\n      \"'; DROP TABLE users; --\",\n      \"' UNION SELECT * FROM users --\",\n      \"1' OR 1=1 --\",\n      \"admin'--\",\n      \"' OR 1=1 LIMIT 1 --\",\n      \"1'; INSERT INTO users VALUES ('hacker', 'password'); --\",\n      \"' OR 'x'='x\",\n      \"1' AND (SELECT COUNT(*) FROM users) > 0 --\",\n      \"' OR EXISTS(SELECT * FROM users) --\",\n      \"1'; UPDATE users SET password='hacked' WHERE id=1; --\",\n      \"' OR 1=1 ORDER BY 1 --\",\n      \"1'; DELETE FROM users WHERE id=1; --\",\n      \"' OR 1=1 GROUP BY 1 --\",\n      \"1'; CREATE TABLE hacked (id INT); --\"\n    ];\n\n    it('should prevent SQL injection in login endpoint', async () => {\n      for (const payload of sqlInjectionPayloads) {\n        const response = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {\n          username: payload,\n          password: payload\n        }, {\n          timeout: 10000,\n          validateStatus: () => true\n        });\n\n        // Should not return SQL error messages\n        const responseText = JSON.stringify(response.data).toLowerCase();\n        const sqlErrorIndicators = [\n          'sql syntax',\n          'mysql error',\n          'postgresql error',\n          'database error',\n          'syntax error',\n          'unexpected end',\n          'column does not exist',\n          'table does not exist',\n          'relation does not exist'\n        ];\n\n        const hasSQLError = sqlErrorIndicators.some(indicator => \n          responseText.includes(indicator)\n        );\n\n        expect(hasSQLError).toBe(false);\n        console.log(`✅ SQL injection prevented for payload: ${payload.substring(0, 20)}...`);\n      }\n    }, 60000);\n\n    it('should prevent SQL injection in search endpoints', async () => {\n      if (!authToken) {\n        console.log('⚠️ Skipping test - no auth token available');\n        return;\n      }\n\n      const searchEndpoints = [\n        '/api/v1/employees/search',\n        '/api/v1/departments/search',\n        '/api/v1/payroll/search'\n      ];\n\n      for (const endpoint of searchEndpoints) {\n        for (const payload of sqlInjectionPayloads.slice(0, 5)) { // Test first 5 payloads\n          const response = await axios.create().post(`${config.baseURL}${endpoint}`, {\n            query: payload,\n            search: payload,\n            filter: payload\n          }, {\n            headers: {\n              'Authorization': `Bearer ${authToken}`\n            },\n            timeout: 10000,\n            validateStatus: () => true\n          });\n\n          // Should not return SQL error messages\n          const responseText = JSON.stringify(response.data).toLowerCase();\n          const sqlErrorIndicators = [\n            'sql syntax',\n            'mysql error',\n            'postgresql error',\n            'database error',\n            'syntax error'\n          ];\n\n          const hasSQLError = sqlErrorIndicators.some(indicator => \n            responseText.includes(indicator)\n          );\n\n          expect(hasSQLError).toBe(false);\n          console.log(`✅ SQL injection prevented in ${endpoint} for payload: ${payload.substring(0, 20)}...`);\n        }\n      }\n    }, 60000);\n\n    it('should prevent SQL injection in filter parameters', async () => {\n      if (!authToken) {\n        console.log('⚠️ Skipping test - no auth token available');\n        return;\n      }\n\n      const filterEndpoints = [\n        '/api/v1/employees?department_id=1',\n        '/api/v1/payroll?employee_id=1',\n        '/api/v1/attendance?date=2024-01-01'\n      ];\n\n      for (const endpoint of filterEndpoints) {\n        for (const payload of sqlInjectionPayloads.slice(0, 3)) { // Test first 3 payloads\n          const maliciousEndpoint = endpoint.replace(/=(\\d+)/, `=${payload}`);\n          \n          const response = await axios.create().get(`${config.baseURL}${maliciousEndpoint}`, {\n            headers: {\n              'Authorization': `Bearer ${authToken}`\n            },\n            timeout: 10000,\n            validateStatus: () => true\n          });\n\n          // Should not return SQL error messages\n          const responseText = JSON.stringify(response.data).toLowerCase();\n          const sqlErrorIndicators = [\n            'sql syntax',\n            'mysql error',\n            'postgresql error',\n            'database error'\n          ];\n\n          const hasSQLError = sqlErrorIndicators.some(indicator => \n            responseText.includes(indicator)\n          );\n\n          expect(hasSQLError).toBe(false);\n          console.log(`✅ SQL injection prevented in filter parameter for ${endpoint}`);\n        }\n      }\n    }, 60000);\n  });\n\n  describe('XSS Prevention', () => {\n    const xssPayloads = [\n      '<script>alert(\"XSS\")</script>',\n      '<img src=x onerror=alert(\"XSS\")>',\n      'javascript:alert(\"XSS\")',\n      '<svg onload=alert(\"XSS\")>',\n      '<iframe src=\"javascript:alert(\\'XSS\\')\"></iframe>',\n      '<body onload=alert(\"XSS\")>',\n      '<input onfocus=alert(\"XSS\") autofocus>',\n      '<select onfocus=alert(\"XSS\") autofocus>',\n      '<textarea onfocus=alert(\"XSS\") autofocus>',\n      '<keygen onfocus=alert(\"XSS\") autofocus>',\n      '<video onloadstart=alert(\"XSS\")>',\n      '<audio onloadstart=alert(\"XSS\")>',\n      '<details open ontoggle=alert(\"XSS\")>',\n      '<marquee onstart=alert(\"XSS\")>',\n      '<object data=\"javascript:alert(\\'XSS\\')\">'\n    ];\n\n    it('should prevent XSS in employee data endpoints', async () => {\n      if (!authToken) {\n        console.log('⚠️ Skipping test - no auth token available');\n        return;\n      }\n\n      const employeeEndpoints = [\n        '/api/v1/employees',\n        '/api/v1/employee/profile'\n      ];\n\n      for (const endpoint of employeeEndpoints) {\n        for (const payload of xssPayloads.slice(0, 5)) { // Test first 5 payloads\n          const response = await axios.create().post(`${config.baseURL}${endpoint}`, {\n            name: payload,\n            description: payload,\n            notes: payload,\n            comment: payload\n          }, {\n            headers: {\n              'Authorization': `Bearer ${authToken}`\n            },\n            timeout: 10000,\n            validateStatus: () => true\n          });\n\n          // Check if payload is reflected in response without proper encoding\n          const responseText = JSON.stringify(response.data);\n          const hasUnencodedScript = responseText.includes('<script>') || \n                                   responseText.includes('javascript:') ||\n                                   responseText.includes('onerror=') ||\n                                   responseText.includes('onload=');\n\n          expect(hasUnencodedScript).toBe(false);\n          console.log(`✅ XSS prevented in ${endpoint} for payload: ${payload.substring(0, 20)}...`);\n        }\n      }\n    }, 60000);\n\n    it('should prevent XSS in search and filter inputs', async () => {\n      if (!authToken) {\n        console.log('⚠️ Skipping test - no auth token available');\n        return;\n      }\n\n      const searchEndpoints = [\n        '/api/v1/employees/search',\n        '/api/v1/departments/search',\n        '/api/v1/payroll/search'\n      ];\n\n      for (const endpoint of searchEndpoints) {\n        for (const payload of xssPayloads.slice(0, 3)) { // Test first 3 payloads\n          const response = await axios.create().post(`${config.baseURL}${endpoint}`, {\n            query: payload,\n            search: payload,\n            filter: payload\n          }, {\n            headers: {\n              'Authorization': `Bearer ${authToken}`\n            },\n            timeout: 10000,\n            validateStatus: () => true\n          });\n\n          // Check if payload is reflected in response without proper encoding\n          const responseText = JSON.stringify(response.data);\n          const hasUnencodedScript = responseText.includes('<script>') || \n                                   responseText.includes('javascript:') ||\n                                   responseText.includes('onerror=');\n\n          expect(hasUnencodedScript).toBe(false);\n          console.log(`✅ XSS prevented in search ${endpoint} for payload: ${payload.substring(0, 20)}...`);\n        }\n      }\n    }, 60000);\n\n    it('should prevent XSS in URL parameters', async () => {\n      if (!authToken) {\n        console.log('⚠️ Skipping test - no auth token available');\n        return;\n      }\n\n      for (const payload of xssPayloads.slice(0, 3)) { // Test first 3 payloads\n        const encodedPayload = encodeURIComponent(payload);\n        const response = await axios.create().get(`${config.baseURL}/api/v1/employees?search=${encodedPayload}`, {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          },\n          timeout: 10000,\n          validateStatus: () => true\n        });\n\n        // Check if payload is reflected in response without proper encoding\n        const responseText = JSON.stringify(response.data);\n        const hasUnencodedScript = responseText.includes('<script>') || \n                                 responseText.includes('javascript:') ||\n                                 responseText.includes('onerror=');\n\n        expect(hasUnencodedScript).toBe(false);\n        console.log(`✅ XSS prevented in URL parameter for payload: ${payload.substring(0, 20)}...`);\n      }\n    }, 30000);\n  });\n\n  describe('Input Sanitization', () => {\n    it('should sanitize HTML content in text fields', async () => {\n      if (!authToken) {\n        console.log('⚠️ Skipping test - no auth token available');\n        return;\n      }\n\n      const htmlContent = [\n        '<b>Bold text</b>',\n        '<i>Italic text</i>',\n        '<u>Underlined text</u>',\n        '<a href=\"http://example.com\">Link</a>',\n        '<img src=\"image.jpg\" alt=\"Image\">',\n        '<div>Div content</div>',\n        '<span>Span content</span>',\n        '<p>Paragraph content</p>'\n      ];\n\n      for (const html of htmlContent) {\n        const response = await axios.create().post(`${config.baseURL}/api/v1/employees`, {\n          name: html,\n          description: html,\n          notes: html\n        }, {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          },\n          timeout: 10000,\n          validateStatus: () => true\n        });\n\n        if (response.status === 200 || response.status === 201) {\n          // Check if HTML tags are properly sanitized\n          const responseText = JSON.stringify(response.data);\n          const hasUnsanitizedHTML = responseText.includes('<b>') || \n                                   responseText.includes('<i>') ||\n                                   responseText.includes('<u>') ||\n                                   responseText.includes('<a href=') ||\n                                   responseText.includes('<img src=');\n\n          // HTML should be either sanitized or rejected\n          expect(hasUnsanitizedHTML).toBe(false);\n          console.log(`✅ HTML content sanitized for: ${html.substring(0, 20)}...`);\n        }\n      }\n    }, 30000);\n\n    it('should validate and sanitize email addresses', async () => {\n      const invalidEmails = [\n        'invalid-email',\n        '@example.com',\n        'user@',\n        'user..name@example.com',\n        'user@.com',\n        'user@example..com',\n        'user name@example.com',\n        'user@example com',\n        'user@example.com.',\n        'user@example.com,'\n      ];\n\n      for (const email of invalidEmails) {\n        const response = await axios.create().post(`${config.baseURL}/api/v1/employees`, {\n          name: 'Test Employee',\n          email: email\n        }, {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          },\n          timeout: 10000,\n          validateStatus: () => true\n        });\n\n        // Should reject invalid email addresses\n        expect([400, 422]).toContain(response.status);\n        console.log(`✅ Invalid email rejected: ${email}`);\n      }\n    }, 30000);\n\n    it('should validate and sanitize phone numbers', async () => {\n      const invalidPhones = [\n        'invalid-phone',\n        '123',\n        '123-456-789-0123-4567',\n        'abc-def-ghij',\n        '+1-800-INVALID',\n        '123.456.789.0123',\n        '123/456/7890',\n        '123 456 789 0123'\n      ];\n\n      for (const phone of invalidPhones) {\n        const response = await axios.create().post(`${config.baseURL}/api/v1/employees`, {\n          name: 'Test Employee',\n          phone: phone\n        }, {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          },\n          timeout: 10000,\n          validateStatus: () => true\n        });\n\n        // Should reject invalid phone numbers\n        expect([400, 422]).toContain(response.status);\n        console.log(`✅ Invalid phone rejected: ${phone}`);\n      }\n    }, 30000);\n  });\n\n  describe('File Upload Security', () => {\n    it('should validate file types for uploads', async () => {\n      if (!authToken) {\n        console.log('⚠️ Skipping test - no auth token available');\n        return;\n      }\n\n      const maliciousFiles = [\n        { name: 'malicious.exe', type: 'application/x-executable' },\n        { name: 'script.js', type: 'application/javascript' },\n        { name: 'virus.bat', type: 'application/x-batch' },\n        { name: 'backdoor.php', type: 'application/x-php' },\n        { name: 'shell.sh', type: 'application/x-sh' }\n      ];\n\n      for (const file of maliciousFiles) {\n        const formData = new FormData();\n        formData.append('file', new Blob(['malicious content'], { type: file.type }), file.name);\n\n        const response = await axios.create().post(`${config.baseURL}/api/v1/upload`, formData, {\n          headers: {\n            'Authorization': `Bearer ${authToken}`,\n            'Content-Type': 'multipart/form-data'\n          },\n          timeout: 10000,\n          validateStatus: () => true\n        });\n\n        // Should reject malicious file types\n        expect([400, 415]).toContain(response.status);\n        console.log(`✅ Malicious file type rejected: ${file.name}`);\n      }\n    }, 30000);\n\n    it('should validate file sizes for uploads', async () => {\n      if (!authToken) {\n        console.log('⚠️ Skipping test - no auth token available');\n        return;\n      }\n\n      // Create a large file (simulate with large content)\n      const largeContent = 'x'.repeat(10 * 1024 * 1024); // 10MB\n      const formData = new FormData();\n      formData.append('file', new Blob([largeContent], { type: 'text/plain' }), 'large-file.txt');\n\n      const response = await axios.create().post(`${config.baseURL}/api/v1/upload`, formData, {\n        headers: {\n          'Authorization': `Bearer ${authToken}`,\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 30000,\n        validateStatus: () => true\n      });\n\n      // Should reject files that are too large\n      expect([400, 413]).toContain(response.status);\n      console.log('✅ Large file correctly rejected');\n    }, 60000);\n\n    it('should scan uploaded files for malicious content', async () => {\n      if (!authToken) {\n        console.log('⚠️ Skipping test - no auth token available');\n        return;\n      }\n\n      const maliciousContent = [\n        '<?php system($_GET[\"cmd\"]); ?>',\n        '<script>alert(\"XSS\")</script>',\n        '#!/bin/bash\\nrm -rf /',\n        'eval(\"malicious code\")',\n        'document.cookie=\"admin=true\"'\n      ];\n\n      for (const content of maliciousContent) {\n        const formData = new FormData();\n        formData.append('file', new Blob([content], { type: 'text/plain' }), 'malicious.txt');\n\n        const response = await axios.create().post(`${config.baseURL}/api/v1/upload`, formData, {\n          headers: {\n            'Authorization': `Bearer ${authToken}`,\n            'Content-Type': 'multipart/form-data'\n          },\n          timeout: 10000,\n          validateStatus: () => true\n        });\n\n        // Should reject files with malicious content\n        expect([400, 422]).toContain(response.status);\n        console.log(`✅ Malicious content rejected: ${content.substring(0, 20)}...`);\n      }\n    }, 30000);\n  });\n\n  describe('Data Validation', () => {\n    it('should validate required fields', async () => {\n      if (!authToken) {\n        console.log('⚠️ Skipping test - no auth token available');\n        return;\n      }\n\n      const requiredFields = [\n        { name: 'name', value: '' },\n        { name: 'email', value: '' },\n        { name: 'position', value: '' },\n        { name: 'department_id', value: null }\n      ];\n\n      for (const field of requiredFields) {\n        const data: any = {\n          name: 'Test Employee',\n          email: 'test@example.com',\n          position: 'Developer',\n          department_id: 1\n        };\n\n        // Remove the required field\n        delete data[field.name];\n\n        const response = await axios.create().post(`${config.baseURL}/api/v1/employees`, data, {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          },\n          timeout: 10000,\n          validateStatus: () => true\n        });\n\n        // Should reject requests with missing required fields\n        expect([400, 422]).toContain(response.status);\n        console.log(`✅ Missing required field rejected: ${field.name}`);\n      }\n    }, 30000);\n\n    it('should validate data types', async () => {\n      if (!authToken) {\n        console.log('⚠️ Skipping test - no auth token available');\n        return;\n      }\n\n      const invalidDataTypes = [\n        { name: 'department_id', value: 'not-a-number' },\n        { name: 'salary', value: 'not-a-number' },\n        { name: 'hire_date', value: 'not-a-date' },\n        { name: 'is_active', value: 'not-a-boolean' }\n      ];\n\n      for (const field of invalidDataTypes) {\n        const data: any = {\n          name: 'Test Employee',\n          email: 'test@example.com',\n          position: 'Developer',\n          department_id: 1\n        };\n\n        data[field.name] = field.value;\n\n        const response = await axios.create().post(`${config.baseURL}/api/v1/employees`, data, {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          },\n          timeout: 10000,\n          validateStatus: () => true\n        });\n\n        // Should reject requests with invalid data types\n        expect([400, 422]).toContain(response.status);\n        console.log(`✅ Invalid data type rejected: ${field.name} = ${field.value}`);\n      }\n    }, 30000);\n\n    it('should validate data ranges and constraints', async () => {\n      if (!authToken) {\n        console.log('⚠️ Skipping test - no auth token available');\n        return;\n      }\n\n      const invalidRanges = [\n        { name: 'salary', value: -1000 },\n        { name: 'salary', value: 999999999 },\n        { name: 'age', value: -5 },\n        { name: 'age', value: 200 },\n        { name: 'department_id', value: 0 },\n        { name: 'department_id', value: -1 }\n      ];\n\n      for (const field of invalidRanges) {\n        const data: any = {\n          name: 'Test Employee',\n          email: 'test@example.com',\n          position: 'Developer',\n          department_id: 1\n        };\n\n        data[field.name] = field.value;\n\n        const response = await axios.create().post(`${config.baseURL}/api/v1/employees`, data, {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          },\n          timeout: 10000,\n          validateStatus: () => true\n        });\n\n        // Should reject requests with invalid ranges\n        expect([400, 422]).toContain(response.status);\n        console.log(`✅ Invalid range rejected: ${field.name} = ${field.value}`);\n      }\n    }, 30000);\n  });\n});\n"],"version":3}