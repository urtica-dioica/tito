{"version":3,"names":["cov_1wzjqut11z","actualCoverage","s","roles_1","require","authorize","roles","f","req","res","next","method","b","user","status","json","success","message","error","includes","role","requiredRoles","userRole","exports","requireHR","USER_ROLES","HR","requireHROrDeptHead","DEPARTMENT_HEAD","requireAuthenticatedUser","EMPLOYEE","requireDepartmentHead","requireEmployee"],"sources":["/home/kim/tito/server/src/middleware/auth/authorize.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { USER_ROLES } from '../../utils/constants/roles';\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    userId: string;\n    email: string;\n    role: string;\n    tokenVersion: number;\n  };\n}\n\n/**\n * Middleware to authorize users based on their role\n * @param roles Array of roles that are allowed to access the endpoint\n */\nexport const authorize = (roles: string[]) => {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction): void => {\n    try {\n      // Handle CORS preflight requests\n      if (req.method === 'OPTIONS') {\n        next();\n        return;\n      }\n\n      // Check if user exists in request (set by authenticate middleware)\n      if (!req.user) {\n        res.status(401).json({\n          success: false,\n          message: 'Authentication required',\n          error: 'AUTHENTICATION_REQUIRED'\n        });\n        return;\n      }\n\n      // Note: User active status is checked at the database level\n      // This middleware only checks role-based permissions\n\n      // Check if user has one of the required roles\n      if (!roles.includes(req.user.role)) {\n        res.status(403).json({\n          success: false,\n          message: 'Insufficient permissions',\n          error: 'INSUFFICIENT_PERMISSIONS',\n          requiredRoles: roles,\n          userRole: req.user.role\n        });\n        return;\n      }\n\n      // User is authorized, continue to next middleware\n      next();\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Authorization check failed',\n        error: 'AUTHORIZATION_FAILED'\n      });\n    }\n  };\n};\n\n/**\n * Middleware to check if user is HR admin\n */\nexport const requireHR = authorize([USER_ROLES.HR]);\n\n/**\n * Middleware to check if user is HR admin or department head\n */\nexport const requireHROrDeptHead = authorize([USER_ROLES.HR, USER_ROLES.DEPARTMENT_HEAD]);\n\n/**\n * Middleware to check if user is HR admin, department head, or employee\n */\nexport const requireAuthenticatedUser = authorize([USER_ROLES.HR, USER_ROLES.DEPARTMENT_HEAD, USER_ROLES.EMPLOYEE]);\n\n/**\n * Middleware to check if user is department head\n */\nexport const requireDepartmentHead = authorize([USER_ROLES.DEPARTMENT_HEAD]);\n\n/**\n * Middleware to check if user is employee\n */\nexport const requireEmployee = authorize([USER_ROLES.EMPLOYEE]); "],"mappings":"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","ignoreList":[]}