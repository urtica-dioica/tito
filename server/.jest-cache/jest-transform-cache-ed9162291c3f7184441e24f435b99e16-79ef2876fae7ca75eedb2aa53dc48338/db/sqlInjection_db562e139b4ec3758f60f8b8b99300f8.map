{"version":3,"names":["cov_2a28m9qu1g","actualCoverage","s","SQL_INJECTION_PATTERNS","containsSqlInjection","input","f","some","pattern","test","checkObjectForSqlInjection","obj","b","hasInjection","field","Array","isArray","i","length","result","key","value","Object","entries","preventSqlInjection","req","res","next","body","bodyCheck","status","json","success","message","error","timestamp","Date","toISOString","requestId","path","details","type","query","queryCheck","params","paramsCheck","headers","headersCheck","console","exports","preventSqlInjectionWithLogging","startTime","now","warn","ip","userAgent","get","method","duration","info","createWhitelistSqlInjectionPrevention","allowedPatterns","checkInput"],"sources":["/home/kim/tito/server/src/middleware/security/sqlInjection.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { ErrorResponse } from '../../utils/types/express';\n\n/**\n * SQL Injection prevention patterns\n */\nconst SQL_INJECTION_PATTERNS = [\n  // Common SQL keywords\n  /\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|EXECUTE|UNION|SCRIPT|SCRIPT>)\\b/i,\n  \n  // SQL comments\n  /--/,\n  /\\/\\*/,\n  /\\*\\//,\n  \n  // SQL operators\n  /\\b(OR|AND)\\s+\\d+\\s*=\\s*\\d+/i,\n  /\\b(OR|AND)\\s+['\"]?\\w+['\"]?\\s*=\\s*['\"]?\\w+['\"]?/i,\n  \n  // SQL functions\n  /\\b(CHAR|CONCAT|SUBSTRING|LENGTH|COUNT|SUM|AVG|MAX|MIN)\\s*\\(/i,\n  \n  // SQL injection attempts\n  /(\\bOR\\b|\\bAND\\b)\\s+\\d+\\s*=\\s*\\d+/i,\n  /(\\bOR\\b|\\bAND\\b)\\s+['\"]?\\w+['\"]?\\s*=\\s*['\"]?\\w+['\"]?/i,\n  \n  // Hex encoded attacks\n  /0x[0-9a-fA-F]+/i,\n  \n  // URL encoded attacks\n  /%27|%22|%2D%2D|%2F%2A|%2A%2F/i,\n  \n  // Unicode attacks\n  /\\u0027|\\u0022|\\u002D\\u002D|\\u002F\\u002A|\\u002A\\u002F/i,\n  \n  // Null byte attacks\n  /\\x00/,\n  \n  // Stacked queries\n  /;\\s*(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER)/i,\n  \n  // Time-based attacks\n  /(SLEEP|BENCHMARK|WAIT)\\s*\\(/i,\n  \n  // Boolean-based attacks\n  /(\\bOR\\b|\\bAND\\b)\\s+\\d+\\s*=\\s*\\d+\\s*--/i,\n  \n  // Error-based attacks\n  /(UPDATEXML|EXTRACTVALUE|FLOOR|RAND)\\s*\\(/i\n];\n\n/**\n * Check if a string contains SQL injection patterns\n */\nfunction containsSqlInjection(input: string): boolean {\n  return SQL_INJECTION_PATTERNS.some(pattern => pattern.test(input));\n}\n\n/**\n * Recursively check object for SQL injection\n */\nfunction checkObjectForSqlInjection(obj: any): { hasInjection: boolean; field: string } {\n  if (typeof obj === 'string') {\n    if (containsSqlInjection(obj)) {\n      return { hasInjection: true, field: 'string_value' };\n    }\n  } else if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      const result = checkObjectForSqlInjection(obj[i]);\n      if (result.hasInjection) {\n        return { hasInjection: true, field: `array[${i}]` };\n      }\n    }\n  } else if (obj !== null && typeof obj === 'object') {\n    for (const [key, value] of Object.entries(obj)) {\n      const result = checkObjectForSqlInjection(value);\n      if (result.hasInjection) {\n        return { hasInjection: true, field: key };\n      }\n    }\n  }\n  \n  return { hasInjection: false, field: '' };\n}\n\n/**\n * SQL Injection prevention middleware\n */\nexport const preventSqlInjection = (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n  try {\n    // Check request body\n    if (req.body) {\n      const bodyCheck = checkObjectForSqlInjection(req.body);\n      if (bodyCheck.hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in request body',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: bodyCheck.field,\n            type: 'body'\n          }\n        });\n        return;\n      }\n    }\n\n    // Check query parameters\n    if (req.query) {\n      const queryCheck = checkObjectForSqlInjection(req.query);\n      if (queryCheck.hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in query parameters',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: queryCheck.field,\n            type: 'query'\n          }\n        });\n        return;\n      }\n    }\n\n    // Check path parameters\n    if (req.params) {\n      const paramsCheck = checkObjectForSqlInjection(req.params);\n      if (paramsCheck.hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in path parameters',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: paramsCheck.field,\n            type: 'query'\n          }\n        });\n        return;\n      }\n    }\n\n    // Check headers (for potential header injection)\n    if (req.headers) {\n      const headersCheck = checkObjectForSqlInjection(req.headers);\n      if (headersCheck.hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in headers',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: headersCheck.field,\n            type: 'headers'\n          }\n        });\n        return;\n      }\n    }\n\n    next();\n  } catch (error) {\n    console.error('SQL injection prevention error:', error);\n    \n    // If prevention fails, block the request for safety\n    res.status(500).json({\n      success: false,\n      message: 'Security check failed - request blocked',\n      error: 'SECURITY_CHECK_FAILED',\n      timestamp: new Date().toISOString(),\n      requestId: req.requestId || 'unknown',\n      path: req.path\n    });\n    return;\n  }\n};\n\n/**\n * Enhanced SQL injection prevention with logging\n */\nexport const preventSqlInjectionWithLogging = (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n  const startTime = Date.now();\n  \n  try {\n    // Check request body\n    if (req.body) {\n      const bodyCheck = checkObjectForSqlInjection(req.body);\n      if (bodyCheck.hasInjection) {\n        // Log the attempt\n        console.warn(`SQL Injection attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          body: req.body,\n          field: bodyCheck.field,\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in request body',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: bodyCheck.field,\n            type: 'body'\n          }\n        });\n        return;\n      }\n    }\n\n    // Check query parameters\n    if (req.query) {\n      const queryCheck = checkObjectForSqlInjection(req.query);\n      if (queryCheck.hasInjection) {\n        console.warn(`SQL Injection attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          query: req.query,\n          field: queryCheck.field,\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in query parameters',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: queryCheck.field,\n            type: 'query'\n          }\n        });\n        return;\n      }\n    }\n\n    // Check path parameters\n    if (req.params) {\n      const paramsCheck = checkObjectForSqlInjection(req.params);\n      if (paramsCheck.hasInjection) {\n        console.warn(`SQL Injection attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          params: req.params,\n          field: paramsCheck.field,\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in path parameters',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: paramsCheck.field,\n            type: 'params'\n          }\n        });\n        return;\n      }\n    }\n\n    // Check headers\n    if (req.headers) {\n      const headersCheck = checkObjectForSqlInjection(req.headers);\n      if (headersCheck.hasInjection) {\n        console.warn(`SQL Injection attempt detected:`, {\n          timestamp: new Date().toISOString(),\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path,\n          method: req.method,\n          headers: req.headers,\n          field: headersCheck.field,\n          requestId: req.requestId || 'unknown'\n        });\n\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected in headers',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path,\n          details: {\n            field: headersCheck.field,\n            type: 'headers'\n          }\n        });\n        return;\n      }\n    }\n\n    // Log successful security check\n    const duration = Date.now() - startTime;\n    if (duration > 100) { // Log slow security checks\n      console.info(`Security check completed in ${duration}ms:`, {\n        timestamp: new Date().toISOString(),\n        ip: req.ip,\n        path: req.path,\n        method: req.method,\n        duration,\n        requestId: req.requestId || 'unknown'\n      });\n    }\n\n    next();\n  } catch (error) {\n    console.error('SQL injection prevention error:', error);\n    \n    // Log the error\n    console.error(`Security check failed:`, {\n      timestamp: new Date().toISOString(),\n      ip: req.ip,\n      path: req.path,\n      method: req.method,\n      error: (error as Error).message,\n      requestId: req.requestId || 'unknown'\n    });\n\n    // Block the request for safety\n    res.status(500).json({\n      success: false,\n      message: 'Security check failed - request blocked',\n      error: 'SECURITY_CHECK_FAILED',\n      timestamp: new Date().toISOString(),\n      requestId: req.requestId || 'unknown',\n      path: req.path\n    });\n    return;\n  }\n};\n\n/**\n * Whitelist-based SQL injection prevention\n */\nexport const createWhitelistSqlInjectionPrevention = (allowedPatterns: RegExp[]) => {\n  return (req: Request, res: Response<ErrorResponse>, next: NextFunction): void => {\n    try {\n      const checkInput = (input: any): { hasInjection: boolean; field: string } => {\n        if (typeof input === 'string') {\n          // Check against blacklist patterns\n          if (SQL_INJECTION_PATTERNS.some(pattern => pattern.test(input))) {\n            // Check if it matches any whitelist patterns\n            if (!allowedPatterns.some(pattern => pattern.test(input))) {\n              return { hasInjection: true, field: 'string_value' };\n            }\n          }\n        } else if (Array.isArray(input)) {\n          for (let i = 0; i < input.length; i++) {\n            const result = checkInput(input[i]);\n            if (result.hasInjection) {\n              return { hasInjection: true, field: `array[${i}]` };\n            }\n          }\n        } else if (input !== null && typeof input === 'object') {\n          for (const [key, value] of Object.entries(input)) {\n            const result = checkInput(value);\n            if (result.hasInjection) {\n              return { hasInjection: true, field: key };\n            }\n          }\n        }\n        \n        return { hasInjection: false, field: '' };\n      };\n\n      // Check all request data\n      if (req.body && checkInput(req.body).hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n\n      if (req.query && checkInput(req.query).hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n\n      if (req.params && checkInput(req.params).hasInjection) {\n        res.status(400).json({\n          success: false,\n          message: 'Potential SQL injection detected',\n          error: 'SQL_INJECTION_DETECTED',\n          timestamp: new Date().toISOString(),\n          requestId: req.requestId || 'unknown',\n          path: req.path\n        });\n        return;\n      }\n\n      next();\n    } catch (error) {\n      console.error('Whitelist SQL injection prevention error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Security check failed - request blocked',\n        error: 'SECURITY_CHECK_FAILED',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId || 'unknown',\n        path: req.path\n      });\n      return;\n    }\n  };\n}; "],"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","ignoreList":[]}