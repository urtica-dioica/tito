{"version":3,"names":["cov_23wqzu8xeq","actualCoverage","s","redisService_1","require","memoryStore","Map","createRateLimiter","windowMs","b","max","message","keyGenerator","f","req","res","next","key","ip","now","Date","windowStart","redisKey","currentCount","redisService","getCache","count","parseInt","status","json","success","error","timestamp","toISOString","requestId","setCache","toString","Math","ceil","redisError","console","warn","memoryKey","current","get","resetTime","set","value","entries","delete","exports","apiRateLimiter","authRateLimiter","loginRateLimiter","passwordResetRateLimiter","uploadRateLimiter","adminRateLimiter","createCustomRateLimiter","userActionRateLimiter","action","departmentRateLimiter","employeeRateLimiter","attendanceRateLimiter","payrollRateLimiter"],"sources":["/home/kim/tito/server/src/middleware/security/rateLimit.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { redisService } from '../../services/redis/redisService';\n\n// Store for tracking requests when Redis is not available\nconst memoryStore = new Map<string, { count: number; resetTime: number }>();\n\n/**\n * Create a rate limiter with Redis fallback to memory\n */\nexport const createRateLimiter = (\n  windowMs: number = 15 * 60 * 1000, // 15 minutes\n  max: number = 100, // limit each IP to 100 requests per windowMs\n  message: string = 'Too many requests from this IP, please try again later.',\n  keyGenerator?: (req: Request) => string\n) => {\n  return async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const key = keyGenerator ? keyGenerator(req) : req.ip;\n      const now = Date.now();\n      const windowStart = now - (now % windowMs);\n\n      // Try Redis first\n      try {\n        const redisKey = `rate_limit:${key}:${windowStart}`;\n        const currentCount = await redisService.getCache(redisKey);\n        \n        if (currentCount !== null) {\n          const count = parseInt(currentCount as string);\n          \n          if (count >= max) {\n            res.status(429).json({\n              success: false,\n              message,\n              error: 'RATE_LIMIT_EXCEEDED',\n              timestamp: new Date().toISOString(),\n              requestId: req.requestId || 'unknown'\n            });\n            return;\n          }\n          \n          // Increment count\n          await redisService.setCache(redisKey, (count + 1).toString(), Math.ceil(windowMs / 1000));\n          next();\n          return;\n        } else {\n          // First request in this window\n          await redisService.setCache(redisKey, '1', Math.ceil(windowMs / 1000));\n          next();\n          return;\n        }\n      } catch (redisError) {\n        // Fallback to memory store\n        console.warn('Redis rate limiting failed, falling back to memory store:', redisError);\n        \n        const memoryKey = `${key}:${windowStart}`;\n        const current = memoryStore.get(memoryKey);\n        \n        if (current && current.resetTime > now) {\n          if (current.count >= max) {\n            res.status(429).json({\n              success: false,\n              message,\n              error: 'RATE_LIMIT_EXCEEDED',\n              timestamp: new Date().toISOString(),\n              requestId: req.requestId || 'unknown'\n            });\n            return;\n          }\n          \n          current.count++;\n        } else {\n          memoryStore.set(memoryKey, { count: 1, resetTime: now + windowMs });\n        }\n        \n        // Clean up old entries\n        for (const [key, value] of memoryStore.entries()) {\n          if (value.resetTime <= now) {\n            memoryStore.delete(key);\n          }\n        }\n        \n        next();\n      }\n    } catch (error) {\n      console.error('Rate limiting error:', error);\n      // If rate limiting fails, allow the request\n      next();\n    }\n  };\n};\n\n/**\n * General API rate limiter\n */\nexport const apiRateLimiter = createRateLimiter(\n  15 * 60 * 1000, // 15 minutes\n  100, // 100 requests per 15 minutes\n  'Too many API requests, please try again later.'\n);\n\n/**\n * Authentication endpoints rate limiter (stricter)\n */\nexport const authRateLimiter = createRateLimiter(\n  15 * 60 * 1000, // 15 minutes\n  5, // 5 requests per 15 minutes\n  'Too many authentication attempts, please try again later.',\n  (req: Request) => `auth:${req.ip}`\n);\n\n/**\n * Login endpoint rate limiter (very strict)\n */\nexport const loginRateLimiter = createRateLimiter(\n  15 * 60 * 1000, // 15 minutes\n  3, // 3 login attempts per 15 minutes\n  'Too many login attempts, please try again later.',\n  (req: Request) => `login:${req.ip}`\n);\n\n/**\n * Password reset rate limiter\n */\nexport const passwordResetRateLimiter = createRateLimiter(\n  60 * 60 * 1000, // 1 hour\n  3, // 3 password reset attempts per hour\n  'Too many password reset attempts, please try again later.',\n  (req: Request) => `password_reset:${req.ip}`\n);\n\n/**\n * File upload rate limiter\n */\nexport const uploadRateLimiter = createRateLimiter(\n  60 * 60 * 1000, // 1 hour\n  10, // 10 uploads per hour\n  'Too many file uploads, please try again later.',\n  (req: Request) => `upload:${req.ip}`\n);\n\n/**\n * Admin endpoints rate limiter\n */\nexport const adminRateLimiter = createRateLimiter(\n  15 * 60 * 1000, // 15 minutes\n  200, // 200 requests per 15 minutes (higher for admin operations)\n  'Too many admin requests, please try again later.',\n  (req: Request) => `admin:${req.ip}`\n);\n\n/**\n * Custom rate limiter for specific endpoints\n */\nexport const createCustomRateLimiter = (\n  windowMs: number,\n  max: number,\n  message: string,\n  keyGenerator?: (req: Request) => string\n) => {\n  return createRateLimiter(windowMs, max, message, keyGenerator);\n};\n\n/**\n * Rate limiter for specific user actions\n */\nexport const userActionRateLimiter = (action: string) => {\n  return createRateLimiter(\n    60 * 60 * 1000, // 1 hour\n    50, // 50 actions per hour\n    `Too many ${action} attempts, please try again later.`,\n    (req: Request) => `${action}:${req.ip}`\n  );\n};\n\n/**\n * Rate limiter for department-specific operations\n */\nexport const departmentRateLimiter = createRateLimiter(\n  15 * 60 * 1000, // 15 minutes\n  30, // 30 requests per 15 minutes\n  'Too many department operations, please try again later.',\n  (req: Request) => `dept:${req.ip}`\n);\n\n/**\n * Rate limiter for employee operations\n */\nexport const employeeRateLimiter = createRateLimiter(\n  15 * 60 * 1000, // 15 minutes\n  50, // 50 requests per 15 minutes\n  'Too many employee operations, please try again later.',\n  (req: Request) => `emp:${req.ip}`\n);\n\n/**\n * Rate limiter for attendance operations\n */\nexport const attendanceRateLimiter = createRateLimiter(\n  5 * 60 * 1000, // 5 minutes\n  20, // 20 requests per 5 minutes\n  'Too many attendance operations, please try again later.',\n  (req: Request) => `attendance:${req.ip}`\n);\n\n/**\n * Rate limiter for payroll operations\n */\nexport const payrollRateLimiter = createRateLimiter(\n  60 * 60 * 1000, // 1 hour\n  10, // 10 requests per hour\n  'Too many payroll operations, please try again later.',\n  (req: Request) => `payroll:${req.ip}`\n); "],"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","ignoreList":[]}