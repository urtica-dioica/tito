33bade1cdee479ad35217d2214b96fdc
"use strict";

/* istanbul ignore next */
function cov_s2z8deft6() {
  var path = "/home/kim/tito/server/src/services/hr/systemService.ts";
  var hash = "645f4a137ce9aebe79426c5824471dd87021361e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/hr/systemService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 31
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "6": {
        start: {
          line: 14,
          column: 22
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "7": {
        start: {
          line: 27,
          column: 23
        },
        end: {
          line: 27,
          column: 67
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 27
        }
      },
      "9": {
        start: {
          line: 34,
          column: 22
        },
        end: {
          line: 46,
          column: 5
        }
      },
      "10": {
        start: {
          line: 47,
          column: 23
        },
        end: {
          line: 47,
          column: 74
        }
      },
      "11": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 62
        }
      },
      "12": {
        start: {
          line: 54,
          column: 21
        },
        end: {
          line: 54,
          column: 46
        }
      },
      "13": {
        start: {
          line: 55,
          column: 23
        },
        end: {
          line: 55,
          column: 43
        }
      },
      "14": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "15": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 40
        }
      },
      "16": {
        start: {
          line: 59,
          column: 36
        },
        end: {
          line: 59,
          column: 80
        }
      },
      "17": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 62,
          column: 13
        }
      },
      "18": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 69
        }
      },
      "19": {
        start: {
          line: 63,
          column: 26
        },
        end: {
          line: 75,
          column: 7
        }
      },
      "20": {
        start: {
          line: 76,
          column: 27
        },
        end: {
          line: 81,
          column: 14
        }
      },
      "21": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 41
        }
      },
      "22": {
        start: {
          line: 83,
          column: 28
        },
        end: {
          line: 83,
          column: 42
        }
      },
      "23": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "24": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 27
        }
      },
      "25": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 43
        }
      },
      "26": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 102
        }
      },
      "27": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 24
        }
      },
      "28": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 29
        }
      },
      "29": {
        start: {
          line: 104,
          column: 21
        },
        end: {
          line: 104,
          column: 46
        }
      },
      "30": {
        start: {
          line: 105,
          column: 23
        },
        end: {
          line: 105,
          column: 43
        }
      },
      "31": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "32": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 40
        }
      },
      "33": {
        start: {
          line: 109,
          column: 35
        },
        end: {
          line: 109,
          column: 67
        }
      },
      "34": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "35": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 60
        }
      },
      "36": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "37": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 65
        }
      },
      "38": {
        start: {
          line: 117,
          column: 33
        },
        end: {
          line: 117,
          column: 35
        }
      },
      "39": {
        start: {
          line: 118,
          column: 33
        },
        end: {
          line: 118,
          column: 35
        }
      },
      "40": {
        start: {
          line: 119,
          column: 29
        },
        end: {
          line: 119,
          column: 30
        }
      },
      "41": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 124,
          column: 13
        }
      },
      "42": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 68
        }
      },
      "43": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 53
        }
      },
      "44": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 29
        }
      },
      "45": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "46": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 66
        }
      },
      "47": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 52
        }
      },
      "48": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 29
        }
      },
      "49": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 134,
          column: 13
        }
      },
      "50": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 64
        }
      },
      "51": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 49
        }
      },
      "52": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 29
        }
      },
      "53": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "54": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 55
        }
      },
      "55": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 64
        }
      },
      "56": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 35
        }
      },
      "57": {
        start: {
          line: 140,
          column: 26
        },
        end: {
          line: 153,
          column: 7
        }
      },
      "58": {
        start: {
          line: 154,
          column: 27
        },
        end: {
          line: 154,
          column: 66
        }
      },
      "59": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 41
        }
      },
      "60": {
        start: {
          line: 156,
          column: 28
        },
        end: {
          line: 156,
          column: 42
        }
      },
      "61": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 160,
          column: 15
        }
      },
      "62": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 27
        }
      },
      "63": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 43
        }
      },
      "64": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 107
        }
      },
      "65": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 24
        }
      },
      "66": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 29
        }
      },
      "67": {
        start: {
          line: 176,
          column: 21
        },
        end: {
          line: 176,
          column: 46
        }
      },
      "68": {
        start: {
          line: 177,
          column: 23
        },
        end: {
          line: 177,
          column: 43
        }
      },
      "69": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "70": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 40
        }
      },
      "71": {
        start: {
          line: 181,
          column: 35
        },
        end: {
          line: 181,
          column: 67
        }
      },
      "72": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 184,
          column: 13
        }
      },
      "73": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 60
        }
      },
      "74": {
        start: {
          line: 186,
          column: 26
        },
        end: {
          line: 189,
          column: 7
        }
      },
      "75": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 45
        }
      },
      "76": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 41
        }
      },
      "77": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 194,
          column: 15
        }
      },
      "78": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 43
        }
      },
      "79": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 101
        }
      },
      "80": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 24
        }
      },
      "81": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 29
        }
      },
      "82": {
        start: {
          line: 209,
          column: 24
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "83": {
        start: {
          line: 231,
          column: 24
        },
        end: {
          line: 237,
          column: 10
        }
      },
      "84": {
        start: {
          line: 238,
          column: 102
        },
        end: {
          line: 238,
          column: 160
        }
      },
      "85": {
        start: {
          line: 238,
          column: 124
        },
        end: {
          line: 238,
          column: 159
        }
      },
      "86": {
        start: {
          line: 240,
          column: 29
        },
        end: {
          line: 240,
          column: 57
        }
      },
      "87": {
        start: {
          line: 241,
          column: 27
        },
        end: {
          line: 241,
          column: 57
        }
      },
      "88": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 250,
          column: 10
        }
      },
      "89": {
        start: {
          line: 256,
          column: 23
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "90": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "91": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 62
        }
      },
      "92": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 45
        }
      },
      "93": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 40
        }
      },
      "94": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 22
        }
      },
      "95": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 23
        }
      },
      "96": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 20
        }
      },
      "97": {
        start: {
          line: 296,
          column: 0
        },
        end: {
          line: 296,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 30
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 32
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 33
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 36
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 53
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 41
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 103
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 35
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 175
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 27
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 208
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 238,
            column: 114
          },
          end: {
            line: 238,
            column: 115
          }
        },
        loc: {
          start: {
            line: 238,
            column: 124
          },
          end: {
            line: 238,
            column: 159
          }
        },
        line: 238
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 28
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 255
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 28
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 282
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 290,
            column: 5
          }
        },
        loc: {
          start: {
            line: 290,
            column: 30
          },
          end: {
            line: 294,
            column: 5
          }
        },
        line: 290
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 15
          },
          end: {
            line: 48,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 40
          },
          end: {
            line: 48,
            column: 54
          }
        }, {
          start: {
            line: 48,
            column: 57
          },
          end: {
            line: 48,
            column: 61
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "5": {
        loc: {
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 80,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 80,
            column: 32
          }
        }, {
          start: {
            line: 80,
            column: 36
          },
          end: {
            line: 80,
            column: 40
          }
        }],
        line: 80
      },
      "6": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "7": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "8": {
        loc: {
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 114,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 114,
            column: 33
          }
        }, {
          start: {
            line: 114,
            column: 37
          },
          end: {
            line: 114,
            column: 68
          }
        }],
        line: 114
      },
      "9": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "10": {
        loc: {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "11": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "14": {
        loc: {
          start: {
            line: 238,
            column: 124
          },
          end: {
            line: 238,
            column: 159
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 124
          },
          end: {
            line: 238,
            column: 154
          }
        }, {
          start: {
            line: 238,
            column: 158
          },
          end: {
            line: 238,
            column: 159
          }
        }],
        line: 238
      },
      "15": {
        loc: {
          start: {
            line: 243,
            column: 24
          },
          end: {
            line: 243,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 24
          },
          end: {
            line: 243,
            column: 34
          }
        }, {
          start: {
            line: 243,
            column: 38
          },
          end: {
            line: 243,
            column: 39
          }
        }],
        line: 243
      },
      "16": {
        loc: {
          start: {
            line: 244,
            column: 28
          },
          end: {
            line: 244,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 28
          },
          end: {
            line: 244,
            column: 42
          }
        }, {
          start: {
            line: 244,
            column: 46
          },
          end: {
            line: 244,
            column: 47
          }
        }],
        line: 244
      },
      "17": {
        loc: {
          start: {
            line: 245,
            column: 30
          },
          end: {
            line: 245,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 30
          },
          end: {
            line: 245,
            column: 46
          }
        }, {
          start: {
            line: 245,
            column: 50
          },
          end: {
            line: 245,
            column: 51
          }
        }],
        line: 245
      },
      "18": {
        loc: {
          start: {
            line: 246,
            column: 34
          },
          end: {
            line: 246,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 34
          },
          end: {
            line: 246,
            column: 54
          }
        }, {
          start: {
            line: 246,
            column: 58
          },
          end: {
            line: 246,
            column: 59
          }
        }],
        line: 246
      },
      "19": {
        loc: {
          start: {
            line: 247,
            column: 29
          },
          end: {
            line: 247,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 247,
            column: 29
          },
          end: {
            line: 247,
            column: 44
          }
        }, {
          start: {
            line: 247,
            column: 48
          },
          end: {
            line: 247,
            column: 49
          }
        }],
        line: 247
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/hr/systemService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/services/hr/systemService.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface SystemSetting {\n  id: string;\n  settingKey: string;\n  settingValue: string;\n  dataType: string;\n  description: string | null;\n  isEditable: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface CreateSystemSettingData {\n  settingKey: string;\n  settingValue: string;\n  dataType: string;\n  description?: string;\n}\n\nexport interface UpdateSystemSettingData {\n  settingValue?: string;\n  dataType?: string;\n  description?: string;\n}\n\nexport interface SystemStats {\n  totalUsers: number;\n  totalEmployees: number;\n  totalDepartments: number;\n  activePayrollPeriods: number;\n  pendingRequests: number;\n  systemUptime: string;\n  lastBackup: string | null;\n}\n\nexport class SystemService {\n  /**\n   * Get all system settings\n   */\n  async getSystemSettings(): Promise<SystemSetting[]> {\n    const query = `\n      SELECT \n        id,\n        setting_key as \"settingKey\",\n        setting_value as \"settingValue\",\n        data_type as \"dataType\",\n        description,\n        true as \"isEditable\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM system_settings\n      ORDER BY setting_key\n    `;\n\n    const result = await getPool().query(query);\n    return result.rows;\n  }\n\n  /**\n   * Get system setting by key\n   */\n  async getSystemSetting(key: string): Promise<SystemSetting | null> {\n    const query = `\n      SELECT \n        id,\n        setting_key as \"settingKey\",\n        setting_value as \"settingValue\",\n        data_type as \"dataType\",\n        description,\n        true as \"isEditable\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM system_settings\n      WHERE setting_key = $1\n    `;\n\n    const result = await getPool().query(query, [key]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Create new system setting\n   */\n  async createSystemSetting(data: CreateSystemSettingData): Promise<SystemSetting> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if setting key already exists\n      const existingSetting = await this.getSystemSetting(data.settingKey);\n      if (existingSetting) {\n        throw new Error('System setting key already exists');\n      }\n\n      const query = `\n        INSERT INTO system_settings (setting_key, setting_value, data_type, description)\n        VALUES ($1, $2, $3, $4)\n        RETURNING \n          id,\n          setting_key as \"settingKey\",\n          setting_value as \"settingValue\",\n          data_type as \"dataType\",\n          description,\n          true as \"isEditable\",\n          created_at as \"createdAt\",\n          updated_at as \"updatedAt\"\n      `;\n\n      const result = await client.query(query, [\n        data.settingKey,\n        data.settingValue,\n        data.dataType,\n        data.description || null\n      ]);\n\n      await client.query('COMMIT');\n\n      const setting = result.rows[0];\n\n      logger.info(`System setting created successfully: ${data.settingKey}`, {\n        settingId: setting.id,\n        settingKey: data.settingKey,\n        settingValue: data.settingValue\n      });\n\n      return setting;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to create system setting', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Update system setting\n   */\n  async updateSystemSetting(key: string, data: UpdateSystemSettingData): Promise<SystemSetting> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get current setting\n      const currentSetting = await this.getSystemSetting(key);\n      if (!currentSetting) {\n        throw new Error('System setting not found');\n      }\n\n      // Validate setting value if provided\n      if (data.settingValue && data.settingValue.trim() === '') {\n        throw new Error('Setting value cannot be empty');\n      }\n\n      const updateFields: string[] = [];\n      const updateValues: any[] = [];\n      let paramIndex = 1;\n\n      if (data.settingValue !== undefined) {\n        updateFields.push(`setting_value = $${paramIndex}`);\n        updateValues.push(data.settingValue);\n        paramIndex++;\n      }\n\n      if (data.description !== undefined) {\n        updateFields.push(`description = $${paramIndex}`);\n        updateValues.push(data.description);\n        paramIndex++;\n      }\n\n      if (data.dataType !== undefined) {\n        updateFields.push(`data_type = $${paramIndex}`);\n        updateValues.push(data.dataType);\n        paramIndex++;\n      }\n\n      if (updateFields.length === 0) {\n        throw new Error('No fields to update');\n      }\n\n      updateFields.push(`updated_at = CURRENT_TIMESTAMP`);\n      updateValues.push(key);\n\n      const query = `\n        UPDATE system_settings \n        SET ${updateFields.join(', ')}\n        WHERE setting_key = $${paramIndex}\n        RETURNING \n          id,\n          setting_key as \"settingKey\",\n          setting_value as \"settingValue\",\n          data_type as \"dataType\",\n          description,\n          true as \"isEditable\",\n          created_at as \"createdAt\",\n          updated_at as \"updatedAt\"\n      `;\n\n      const result = await client.query(query, updateValues);\n\n      await client.query('COMMIT');\n\n      const setting = result.rows[0];\n\n      logger.info(`System setting updated successfully: ${key}`, {\n        settingId: setting.id,\n        updates: { ...data }\n      });\n\n      return setting;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to update system setting', { error: (error as Error).message, key, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Delete system setting (hard delete)\n   */\n  async deleteSystemSetting(key: string): Promise<void> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if setting exists\n      const currentSetting = await this.getSystemSetting(key);\n      if (!currentSetting) {\n        throw new Error('System setting not found');\n      }\n\n      // Hard delete the setting\n      const query = `\n        DELETE FROM system_settings \n        WHERE setting_key = $1\n      `;\n\n      await client.query(query, [key]);\n\n      await client.query('COMMIT');\n\n      logger.info(`System setting deleted successfully: ${key}`, {\n        settingId: currentSetting.id\n      });\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to delete system setting', { error: (error as Error).message, key });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get system statistics\n   */\n  async getSystemStats(): Promise<SystemStats> {\n    const queries = {\n      totalUsers: 'SELECT COUNT(*) as count FROM users WHERE is_active = true',\n      totalEmployees: `\n        SELECT COUNT(*) as count \n        FROM employees e \n        JOIN users u ON e.user_id = u.id \n        WHERE u.is_active = true AND e.status = 'active'\n      `,\n      totalDepartments: 'SELECT COUNT(*) as count FROM departments WHERE is_active = true',\n      activePayrollPeriods: `\n        SELECT COUNT(*) as count \n        FROM payroll_periods \n        WHERE status IN ('draft', 'processing', 'sent_for_review')\n      `,\n      pendingRequests: `\n        SELECT (\n          (SELECT COUNT(*) FROM time_correction_requests WHERE status = 'pending') +\n          (SELECT COUNT(*) FROM overtime_requests WHERE status = 'pending') +\n          (SELECT COUNT(*) FROM leaves WHERE status = 'pending')\n        ) as count\n      `\n    };\n\n    const results = await Promise.all([\n      getPool().query(queries.totalUsers),\n      getPool().query(queries.totalEmployees),\n      getPool().query(queries.totalDepartments),\n      getPool().query(queries.activePayrollPeriods),\n      getPool().query(queries.pendingRequests)\n    ]);\n\n    const [\n      totalUsers,\n      totalEmployees,\n      totalDepartments,\n      activePayrollPeriods,\n      pendingRequests\n    ] = results.map(result => parseInt(result.rows[0].count) || 0);\n\n    // Calculate system uptime (simplified - in real implementation, you'd track this)\n    const systemUptime = this.calculateSystemUptime();\n    const lastBackup = await this.getLastBackupDate();\n\n    return {\n      totalUsers: totalUsers || 0,\n      totalEmployees: totalEmployees || 0,\n      totalDepartments: totalDepartments || 0,\n      activePayrollPeriods: activePayrollPeriods || 0,\n      pendingRequests: pendingRequests || 0,\n      systemUptime,\n      lastBackup\n    };\n  }\n\n  /**\n   * Get system health status\n   */\n  async getSystemHealth(): Promise<{\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    database: 'connected' | 'disconnected';\n    redis: 'connected' | 'disconnected';\n    diskSpace: 'ok' | 'warning' | 'critical';\n    memoryUsage: 'ok' | 'warning' | 'critical';\n    lastCheck: Date;\n  }> {\n    const health: {\n      status: 'healthy' | 'degraded' | 'unhealthy';\n      database: 'connected' | 'disconnected';\n      redis: 'connected' | 'disconnected';\n      diskSpace: 'ok' | 'warning' | 'critical';\n      memoryUsage: 'ok' | 'warning' | 'critical';\n      lastCheck: Date;\n    } = {\n      status: 'healthy',\n      database: 'connected',\n      redis: 'connected',\n      diskSpace: 'ok',\n      memoryUsage: 'ok',\n      lastCheck: new Date()\n    };\n\n    try {\n      // Test database connection\n      await getPool().query('SELECT 1');\n    } catch (error) {\n      health.database = 'disconnected';\n      health.status = 'unhealthy';\n    }\n\n    // In a real implementation, you would:\n    // - Test Redis connection\n    // - Check disk space\n    // - Check memory usage\n    // - Set appropriate status based on results\n\n    return health;\n  }\n\n\n  /**\n   * Calculate system uptime (simplified implementation)\n   */\n  private calculateSystemUptime(): string {\n    // In a real implementation, you would track when the system started\n    // For now, return a placeholder\n    return '99.9%';\n  }\n\n  /**\n   * Get last backup date (simplified implementation)\n   */\n  private async getLastBackupDate(): Promise<string | null> {\n    // In a real implementation, you would query backup logs\n    // For now, return null\n    return null;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "645f4a137ce9aebe79426c5824471dd87021361e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_s2z8deft6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_s2z8deft6();
var __importDefault =
/* istanbul ignore next */
(cov_s2z8deft6().s[0]++,
/* istanbul ignore next */
(cov_s2z8deft6().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_s2z8deft6().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_s2z8deft6().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_s2z8deft6().f[0]++;
  cov_s2z8deft6().s[1]++;
  return /* istanbul ignore next */(cov_s2z8deft6().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_s2z8deft6().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_s2z8deft6().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_s2z8deft6().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_s2z8deft6().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_s2z8deft6().s[3]++;
exports.SystemService = void 0;
const database_1 =
/* istanbul ignore next */
(cov_s2z8deft6().s[4]++, require("../../config/database"));
const logger_1 =
/* istanbul ignore next */
(cov_s2z8deft6().s[5]++, __importDefault(require("../../utils/logger")));
class SystemService {
  /**
   * Get all system settings
   */
  async getSystemSettings() {
    /* istanbul ignore next */
    cov_s2z8deft6().f[1]++;
    const query =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[6]++, `
      SELECT 
        id,
        setting_key as "settingKey",
        setting_value as "settingValue",
        data_type as "dataType",
        description,
        true as "isEditable",
        created_at as "createdAt",
        updated_at as "updatedAt"
      FROM system_settings
      ORDER BY setting_key
    `);
    const result =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[7]++, await (0, database_1.getPool)().query(query));
    /* istanbul ignore next */
    cov_s2z8deft6().s[8]++;
    return result.rows;
  }
  /**
   * Get system setting by key
   */
  async getSystemSetting(key) {
    /* istanbul ignore next */
    cov_s2z8deft6().f[2]++;
    const query =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[9]++, `
      SELECT 
        id,
        setting_key as "settingKey",
        setting_value as "settingValue",
        data_type as "dataType",
        description,
        true as "isEditable",
        created_at as "createdAt",
        updated_at as "updatedAt"
      FROM system_settings
      WHERE setting_key = $1
    `);
    const result =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[10]++, await (0, database_1.getPool)().query(query, [key]));
    /* istanbul ignore next */
    cov_s2z8deft6().s[11]++;
    return result.rows.length > 0 ?
    /* istanbul ignore next */
    (cov_s2z8deft6().b[3][0]++, result.rows[0]) :
    /* istanbul ignore next */
    (cov_s2z8deft6().b[3][1]++, null);
  }
  /**
   * Create new system setting
   */
  async createSystemSetting(data) {
    /* istanbul ignore next */
    cov_s2z8deft6().f[3]++;
    const pool =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[12]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[13]++, await pool.connect());
    /* istanbul ignore next */
    cov_s2z8deft6().s[14]++;
    try {
      /* istanbul ignore next */
      cov_s2z8deft6().s[15]++;
      await client.query('BEGIN');
      // Check if setting key already exists
      const existingSetting =
      /* istanbul ignore next */
      (cov_s2z8deft6().s[16]++, await this.getSystemSetting(data.settingKey));
      /* istanbul ignore next */
      cov_s2z8deft6().s[17]++;
      if (existingSetting) {
        /* istanbul ignore next */
        cov_s2z8deft6().b[4][0]++;
        cov_s2z8deft6().s[18]++;
        throw new Error('System setting key already exists');
      } else
      /* istanbul ignore next */
      {
        cov_s2z8deft6().b[4][1]++;
      }
      const query =
      /* istanbul ignore next */
      (cov_s2z8deft6().s[19]++, `
        INSERT INTO system_settings (setting_key, setting_value, data_type, description)
        VALUES ($1, $2, $3, $4)
        RETURNING 
          id,
          setting_key as "settingKey",
          setting_value as "settingValue",
          data_type as "dataType",
          description,
          true as "isEditable",
          created_at as "createdAt",
          updated_at as "updatedAt"
      `);
      const result =
      /* istanbul ignore next */
      (cov_s2z8deft6().s[20]++, await client.query(query, [data.settingKey, data.settingValue, data.dataType,
      /* istanbul ignore next */
      (cov_s2z8deft6().b[5][0]++, data.description) ||
      /* istanbul ignore next */
      (cov_s2z8deft6().b[5][1]++, null)]));
      /* istanbul ignore next */
      cov_s2z8deft6().s[21]++;
      await client.query('COMMIT');
      const setting =
      /* istanbul ignore next */
      (cov_s2z8deft6().s[22]++, result.rows[0]);
      /* istanbul ignore next */
      cov_s2z8deft6().s[23]++;
      logger_1.default.info(`System setting created successfully: ${data.settingKey}`, {
        settingId: setting.id,
        settingKey: data.settingKey,
        settingValue: data.settingValue
      });
      /* istanbul ignore next */
      cov_s2z8deft6().s[24]++;
      return setting;
    } catch (error) {
      /* istanbul ignore next */
      cov_s2z8deft6().s[25]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_s2z8deft6().s[26]++;
      logger_1.default.error('Failed to create system setting', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_s2z8deft6().s[27]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_s2z8deft6().s[28]++;
      client.release();
    }
  }
  /**
   * Update system setting
   */
  async updateSystemSetting(key, data) {
    /* istanbul ignore next */
    cov_s2z8deft6().f[4]++;
    const pool =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[29]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[30]++, await pool.connect());
    /* istanbul ignore next */
    cov_s2z8deft6().s[31]++;
    try {
      /* istanbul ignore next */
      cov_s2z8deft6().s[32]++;
      await client.query('BEGIN');
      // Get current setting
      const currentSetting =
      /* istanbul ignore next */
      (cov_s2z8deft6().s[33]++, await this.getSystemSetting(key));
      /* istanbul ignore next */
      cov_s2z8deft6().s[34]++;
      if (!currentSetting) {
        /* istanbul ignore next */
        cov_s2z8deft6().b[6][0]++;
        cov_s2z8deft6().s[35]++;
        throw new Error('System setting not found');
      } else
      /* istanbul ignore next */
      {
        cov_s2z8deft6().b[6][1]++;
      }
      // Validate setting value if provided
      cov_s2z8deft6().s[36]++;
      if (
      /* istanbul ignore next */
      (cov_s2z8deft6().b[8][0]++, data.settingValue) &&
      /* istanbul ignore next */
      (cov_s2z8deft6().b[8][1]++, data.settingValue.trim() === '')) {
        /* istanbul ignore next */
        cov_s2z8deft6().b[7][0]++;
        cov_s2z8deft6().s[37]++;
        throw new Error('Setting value cannot be empty');
      } else
      /* istanbul ignore next */
      {
        cov_s2z8deft6().b[7][1]++;
      }
      const updateFields =
      /* istanbul ignore next */
      (cov_s2z8deft6().s[38]++, []);
      const updateValues =
      /* istanbul ignore next */
      (cov_s2z8deft6().s[39]++, []);
      let paramIndex =
      /* istanbul ignore next */
      (cov_s2z8deft6().s[40]++, 1);
      /* istanbul ignore next */
      cov_s2z8deft6().s[41]++;
      if (data.settingValue !== undefined) {
        /* istanbul ignore next */
        cov_s2z8deft6().b[9][0]++;
        cov_s2z8deft6().s[42]++;
        updateFields.push(`setting_value = $${paramIndex}`);
        /* istanbul ignore next */
        cov_s2z8deft6().s[43]++;
        updateValues.push(data.settingValue);
        /* istanbul ignore next */
        cov_s2z8deft6().s[44]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_s2z8deft6().b[9][1]++;
      }
      cov_s2z8deft6().s[45]++;
      if (data.description !== undefined) {
        /* istanbul ignore next */
        cov_s2z8deft6().b[10][0]++;
        cov_s2z8deft6().s[46]++;
        updateFields.push(`description = $${paramIndex}`);
        /* istanbul ignore next */
        cov_s2z8deft6().s[47]++;
        updateValues.push(data.description);
        /* istanbul ignore next */
        cov_s2z8deft6().s[48]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_s2z8deft6().b[10][1]++;
      }
      cov_s2z8deft6().s[49]++;
      if (data.dataType !== undefined) {
        /* istanbul ignore next */
        cov_s2z8deft6().b[11][0]++;
        cov_s2z8deft6().s[50]++;
        updateFields.push(`data_type = $${paramIndex}`);
        /* istanbul ignore next */
        cov_s2z8deft6().s[51]++;
        updateValues.push(data.dataType);
        /* istanbul ignore next */
        cov_s2z8deft6().s[52]++;
        paramIndex++;
      } else
      /* istanbul ignore next */
      {
        cov_s2z8deft6().b[11][1]++;
      }
      cov_s2z8deft6().s[53]++;
      if (updateFields.length === 0) {
        /* istanbul ignore next */
        cov_s2z8deft6().b[12][0]++;
        cov_s2z8deft6().s[54]++;
        throw new Error('No fields to update');
      } else
      /* istanbul ignore next */
      {
        cov_s2z8deft6().b[12][1]++;
      }
      cov_s2z8deft6().s[55]++;
      updateFields.push(`updated_at = CURRENT_TIMESTAMP`);
      /* istanbul ignore next */
      cov_s2z8deft6().s[56]++;
      updateValues.push(key);
      const query =
      /* istanbul ignore next */
      (cov_s2z8deft6().s[57]++, `
        UPDATE system_settings 
        SET ${updateFields.join(', ')}
        WHERE setting_key = $${paramIndex}
        RETURNING 
          id,
          setting_key as "settingKey",
          setting_value as "settingValue",
          data_type as "dataType",
          description,
          true as "isEditable",
          created_at as "createdAt",
          updated_at as "updatedAt"
      `);
      const result =
      /* istanbul ignore next */
      (cov_s2z8deft6().s[58]++, await client.query(query, updateValues));
      /* istanbul ignore next */
      cov_s2z8deft6().s[59]++;
      await client.query('COMMIT');
      const setting =
      /* istanbul ignore next */
      (cov_s2z8deft6().s[60]++, result.rows[0]);
      /* istanbul ignore next */
      cov_s2z8deft6().s[61]++;
      logger_1.default.info(`System setting updated successfully: ${key}`, {
        settingId: setting.id,
        updates: {
          ...data
        }
      });
      /* istanbul ignore next */
      cov_s2z8deft6().s[62]++;
      return setting;
    } catch (error) {
      /* istanbul ignore next */
      cov_s2z8deft6().s[63]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_s2z8deft6().s[64]++;
      logger_1.default.error('Failed to update system setting', {
        error: error.message,
        key,
        data
      });
      /* istanbul ignore next */
      cov_s2z8deft6().s[65]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_s2z8deft6().s[66]++;
      client.release();
    }
  }
  /**
   * Delete system setting (hard delete)
   */
  async deleteSystemSetting(key) {
    /* istanbul ignore next */
    cov_s2z8deft6().f[5]++;
    const pool =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[67]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[68]++, await pool.connect());
    /* istanbul ignore next */
    cov_s2z8deft6().s[69]++;
    try {
      /* istanbul ignore next */
      cov_s2z8deft6().s[70]++;
      await client.query('BEGIN');
      // Check if setting exists
      const currentSetting =
      /* istanbul ignore next */
      (cov_s2z8deft6().s[71]++, await this.getSystemSetting(key));
      /* istanbul ignore next */
      cov_s2z8deft6().s[72]++;
      if (!currentSetting) {
        /* istanbul ignore next */
        cov_s2z8deft6().b[13][0]++;
        cov_s2z8deft6().s[73]++;
        throw new Error('System setting not found');
      } else
      /* istanbul ignore next */
      {
        cov_s2z8deft6().b[13][1]++;
      }
      // Hard delete the setting
      const query =
      /* istanbul ignore next */
      (cov_s2z8deft6().s[74]++, `
        DELETE FROM system_settings 
        WHERE setting_key = $1
      `);
      /* istanbul ignore next */
      cov_s2z8deft6().s[75]++;
      await client.query(query, [key]);
      /* istanbul ignore next */
      cov_s2z8deft6().s[76]++;
      await client.query('COMMIT');
      /* istanbul ignore next */
      cov_s2z8deft6().s[77]++;
      logger_1.default.info(`System setting deleted successfully: ${key}`, {
        settingId: currentSetting.id
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_s2z8deft6().s[78]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_s2z8deft6().s[79]++;
      logger_1.default.error('Failed to delete system setting', {
        error: error.message,
        key
      });
      /* istanbul ignore next */
      cov_s2z8deft6().s[80]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_s2z8deft6().s[81]++;
      client.release();
    }
  }
  /**
   * Get system statistics
   */
  async getSystemStats() {
    /* istanbul ignore next */
    cov_s2z8deft6().f[6]++;
    const queries =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[82]++, {
      totalUsers: 'SELECT COUNT(*) as count FROM users WHERE is_active = true',
      totalEmployees: `
        SELECT COUNT(*) as count 
        FROM employees e 
        JOIN users u ON e.user_id = u.id 
        WHERE u.is_active = true AND e.status = 'active'
      `,
      totalDepartments: 'SELECT COUNT(*) as count FROM departments WHERE is_active = true',
      activePayrollPeriods: `
        SELECT COUNT(*) as count 
        FROM payroll_periods 
        WHERE status IN ('draft', 'processing', 'sent_for_review')
      `,
      pendingRequests: `
        SELECT (
          (SELECT COUNT(*) FROM time_correction_requests WHERE status = 'pending') +
          (SELECT COUNT(*) FROM overtime_requests WHERE status = 'pending') +
          (SELECT COUNT(*) FROM leaves WHERE status = 'pending')
        ) as count
      `
    });
    const results =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[83]++, await Promise.all([(0, database_1.getPool)().query(queries.totalUsers), (0, database_1.getPool)().query(queries.totalEmployees), (0, database_1.getPool)().query(queries.totalDepartments), (0, database_1.getPool)().query(queries.activePayrollPeriods), (0, database_1.getPool)().query(queries.pendingRequests)]));
    const [totalUsers, totalEmployees, totalDepartments, activePayrollPeriods, pendingRequests] =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[84]++, results.map(result => {
      /* istanbul ignore next */
      cov_s2z8deft6().f[7]++;
      cov_s2z8deft6().s[85]++;
      return /* istanbul ignore next */(cov_s2z8deft6().b[14][0]++, parseInt(result.rows[0].count)) ||
      /* istanbul ignore next */
      (cov_s2z8deft6().b[14][1]++, 0);
    }));
    // Calculate system uptime (simplified - in real implementation, you'd track this)
    const systemUptime =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[86]++, this.calculateSystemUptime());
    const lastBackup =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[87]++, await this.getLastBackupDate());
    /* istanbul ignore next */
    cov_s2z8deft6().s[88]++;
    return {
      totalUsers:
      /* istanbul ignore next */
      (cov_s2z8deft6().b[15][0]++, totalUsers) ||
      /* istanbul ignore next */
      (cov_s2z8deft6().b[15][1]++, 0),
      totalEmployees:
      /* istanbul ignore next */
      (cov_s2z8deft6().b[16][0]++, totalEmployees) ||
      /* istanbul ignore next */
      (cov_s2z8deft6().b[16][1]++, 0),
      totalDepartments:
      /* istanbul ignore next */
      (cov_s2z8deft6().b[17][0]++, totalDepartments) ||
      /* istanbul ignore next */
      (cov_s2z8deft6().b[17][1]++, 0),
      activePayrollPeriods:
      /* istanbul ignore next */
      (cov_s2z8deft6().b[18][0]++, activePayrollPeriods) ||
      /* istanbul ignore next */
      (cov_s2z8deft6().b[18][1]++, 0),
      pendingRequests:
      /* istanbul ignore next */
      (cov_s2z8deft6().b[19][0]++, pendingRequests) ||
      /* istanbul ignore next */
      (cov_s2z8deft6().b[19][1]++, 0),
      systemUptime,
      lastBackup
    };
  }
  /**
   * Get system health status
   */
  async getSystemHealth() {
    /* istanbul ignore next */
    cov_s2z8deft6().f[8]++;
    const health =
    /* istanbul ignore next */
    (cov_s2z8deft6().s[89]++, {
      status: 'healthy',
      database: 'connected',
      redis: 'connected',
      diskSpace: 'ok',
      memoryUsage: 'ok',
      lastCheck: new Date()
    });
    /* istanbul ignore next */
    cov_s2z8deft6().s[90]++;
    try {
      /* istanbul ignore next */
      cov_s2z8deft6().s[91]++;
      // Test database connection
      await (0, database_1.getPool)().query('SELECT 1');
    } catch (error) {
      /* istanbul ignore next */
      cov_s2z8deft6().s[92]++;
      health.database = 'disconnected';
      /* istanbul ignore next */
      cov_s2z8deft6().s[93]++;
      health.status = 'unhealthy';
    }
    // In a real implementation, you would:
    // - Test Redis connection
    // - Check disk space
    // - Check memory usage
    // - Set appropriate status based on results
    /* istanbul ignore next */
    cov_s2z8deft6().s[94]++;
    return health;
  }
  /**
   * Calculate system uptime (simplified implementation)
   */
  calculateSystemUptime() {
    /* istanbul ignore next */
    cov_s2z8deft6().f[9]++;
    cov_s2z8deft6().s[95]++;
    // In a real implementation, you would track when the system started
    // For now, return a placeholder
    return '99.9%';
  }
  /**
   * Get last backup date (simplified implementation)
   */
  async getLastBackupDate() {
    /* istanbul ignore next */
    cov_s2z8deft6().f[10]++;
    cov_s2z8deft6().s[96]++;
    // In a real implementation, you would query backup logs
    // For now, return null
    return null;
  }
}
/* istanbul ignore next */
cov_s2z8deft6().s[97]++;
exports.SystemService = SystemService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,