{"version":3,"names":["database_1","cov_s2z8deft6","s","require","logger_1","__importDefault","SystemService","getSystemSettings","f","query","result","getPool","rows","getSystemSetting","key","length","b","createSystemSetting","data","pool","client","connect","existingSetting","settingKey","Error","settingValue","dataType","description","setting","default","info","settingId","id","error","message","release","updateSystemSetting","currentSetting","trim","updateFields","updateValues","paramIndex","undefined","push","join","updates","deleteSystemSetting","getSystemStats","queries","totalUsers","totalEmployees","totalDepartments","activePayrollPeriods","pendingRequests","results","Promise","all","map","parseInt","count","systemUptime","calculateSystemUptime","lastBackup","getLastBackupDate","getSystemHealth","health","status","database","redis","diskSpace","memoryUsage","lastCheck","Date","exports"],"sources":["/home/kim/tito/server/src/services/hr/systemService.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\n\nexport interface SystemSetting {\n  id: string;\n  settingKey: string;\n  settingValue: string;\n  dataType: string;\n  description: string | null;\n  isEditable: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface CreateSystemSettingData {\n  settingKey: string;\n  settingValue: string;\n  dataType: string;\n  description?: string;\n}\n\nexport interface UpdateSystemSettingData {\n  settingValue?: string;\n  dataType?: string;\n  description?: string;\n}\n\nexport interface SystemStats {\n  totalUsers: number;\n  totalEmployees: number;\n  totalDepartments: number;\n  activePayrollPeriods: number;\n  pendingRequests: number;\n  systemUptime: string;\n  lastBackup: string | null;\n}\n\nexport class SystemService {\n  /**\n   * Get all system settings\n   */\n  async getSystemSettings(): Promise<SystemSetting[]> {\n    const query = `\n      SELECT \n        id,\n        setting_key as \"settingKey\",\n        setting_value as \"settingValue\",\n        data_type as \"dataType\",\n        description,\n        true as \"isEditable\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM system_settings\n      ORDER BY setting_key\n    `;\n\n    const result = await getPool().query(query);\n    return result.rows;\n  }\n\n  /**\n   * Get system setting by key\n   */\n  async getSystemSetting(key: string): Promise<SystemSetting | null> {\n    const query = `\n      SELECT \n        id,\n        setting_key as \"settingKey\",\n        setting_value as \"settingValue\",\n        data_type as \"dataType\",\n        description,\n        true as \"isEditable\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM system_settings\n      WHERE setting_key = $1\n    `;\n\n    const result = await getPool().query(query, [key]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Create new system setting\n   */\n  async createSystemSetting(data: CreateSystemSettingData): Promise<SystemSetting> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if setting key already exists\n      const existingSetting = await this.getSystemSetting(data.settingKey);\n      if (existingSetting) {\n        throw new Error('System setting key already exists');\n      }\n\n      const query = `\n        INSERT INTO system_settings (setting_key, setting_value, data_type, description)\n        VALUES ($1, $2, $3, $4)\n        RETURNING \n          id,\n          setting_key as \"settingKey\",\n          setting_value as \"settingValue\",\n          data_type as \"dataType\",\n          description,\n          true as \"isEditable\",\n          created_at as \"createdAt\",\n          updated_at as \"updatedAt\"\n      `;\n\n      const result = await client.query(query, [\n        data.settingKey,\n        data.settingValue,\n        data.dataType,\n        data.description || null\n      ]);\n\n      await client.query('COMMIT');\n\n      const setting = result.rows[0];\n\n      logger.info(`System setting created successfully: ${data.settingKey}`, {\n        settingId: setting.id,\n        settingKey: data.settingKey,\n        settingValue: data.settingValue\n      });\n\n      return setting;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to create system setting', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Update system setting\n   */\n  async updateSystemSetting(key: string, data: UpdateSystemSettingData): Promise<SystemSetting> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get current setting\n      const currentSetting = await this.getSystemSetting(key);\n      if (!currentSetting) {\n        throw new Error('System setting not found');\n      }\n\n      // Validate setting value if provided\n      if (data.settingValue && data.settingValue.trim() === '') {\n        throw new Error('Setting value cannot be empty');\n      }\n\n      const updateFields: string[] = [];\n      const updateValues: any[] = [];\n      let paramIndex = 1;\n\n      if (data.settingValue !== undefined) {\n        updateFields.push(`setting_value = $${paramIndex}`);\n        updateValues.push(data.settingValue);\n        paramIndex++;\n      }\n\n      if (data.description !== undefined) {\n        updateFields.push(`description = $${paramIndex}`);\n        updateValues.push(data.description);\n        paramIndex++;\n      }\n\n      if (data.dataType !== undefined) {\n        updateFields.push(`data_type = $${paramIndex}`);\n        updateValues.push(data.dataType);\n        paramIndex++;\n      }\n\n      if (updateFields.length === 0) {\n        throw new Error('No fields to update');\n      }\n\n      updateFields.push(`updated_at = CURRENT_TIMESTAMP`);\n      updateValues.push(key);\n\n      const query = `\n        UPDATE system_settings \n        SET ${updateFields.join(', ')}\n        WHERE setting_key = $${paramIndex}\n        RETURNING \n          id,\n          setting_key as \"settingKey\",\n          setting_value as \"settingValue\",\n          data_type as \"dataType\",\n          description,\n          true as \"isEditable\",\n          created_at as \"createdAt\",\n          updated_at as \"updatedAt\"\n      `;\n\n      const result = await client.query(query, updateValues);\n\n      await client.query('COMMIT');\n\n      const setting = result.rows[0];\n\n      logger.info(`System setting updated successfully: ${key}`, {\n        settingId: setting.id,\n        updates: { ...data }\n      });\n\n      return setting;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to update system setting', { error: (error as Error).message, key, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Delete system setting (hard delete)\n   */\n  async deleteSystemSetting(key: string): Promise<void> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if setting exists\n      const currentSetting = await this.getSystemSetting(key);\n      if (!currentSetting) {\n        throw new Error('System setting not found');\n      }\n\n      // Hard delete the setting\n      const query = `\n        DELETE FROM system_settings \n        WHERE setting_key = $1\n      `;\n\n      await client.query(query, [key]);\n\n      await client.query('COMMIT');\n\n      logger.info(`System setting deleted successfully: ${key}`, {\n        settingId: currentSetting.id\n      });\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to delete system setting', { error: (error as Error).message, key });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get system statistics\n   */\n  async getSystemStats(): Promise<SystemStats> {\n    const queries = {\n      totalUsers: 'SELECT COUNT(*) as count FROM users WHERE is_active = true',\n      totalEmployees: `\n        SELECT COUNT(*) as count \n        FROM employees e \n        JOIN users u ON e.user_id = u.id \n        WHERE u.is_active = true AND e.status = 'active'\n      `,\n      totalDepartments: 'SELECT COUNT(*) as count FROM departments WHERE is_active = true',\n      activePayrollPeriods: `\n        SELECT COUNT(*) as count \n        FROM payroll_periods \n        WHERE status IN ('draft', 'processing', 'sent_for_review')\n      `,\n      pendingRequests: `\n        SELECT (\n          (SELECT COUNT(*) FROM time_correction_requests WHERE status = 'pending') +\n          (SELECT COUNT(*) FROM overtime_requests WHERE status = 'pending') +\n          (SELECT COUNT(*) FROM leaves WHERE status = 'pending')\n        ) as count\n      `\n    };\n\n    const results = await Promise.all([\n      getPool().query(queries.totalUsers),\n      getPool().query(queries.totalEmployees),\n      getPool().query(queries.totalDepartments),\n      getPool().query(queries.activePayrollPeriods),\n      getPool().query(queries.pendingRequests)\n    ]);\n\n    const [\n      totalUsers,\n      totalEmployees,\n      totalDepartments,\n      activePayrollPeriods,\n      pendingRequests\n    ] = results.map(result => parseInt(result.rows[0].count) || 0);\n\n    // Calculate system uptime (simplified - in real implementation, you'd track this)\n    const systemUptime = this.calculateSystemUptime();\n    const lastBackup = await this.getLastBackupDate();\n\n    return {\n      totalUsers: totalUsers || 0,\n      totalEmployees: totalEmployees || 0,\n      totalDepartments: totalDepartments || 0,\n      activePayrollPeriods: activePayrollPeriods || 0,\n      pendingRequests: pendingRequests || 0,\n      systemUptime,\n      lastBackup\n    };\n  }\n\n  /**\n   * Get system health status\n   */\n  async getSystemHealth(): Promise<{\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    database: 'connected' | 'disconnected';\n    redis: 'connected' | 'disconnected';\n    diskSpace: 'ok' | 'warning' | 'critical';\n    memoryUsage: 'ok' | 'warning' | 'critical';\n    lastCheck: Date;\n  }> {\n    const health: {\n      status: 'healthy' | 'degraded' | 'unhealthy';\n      database: 'connected' | 'disconnected';\n      redis: 'connected' | 'disconnected';\n      diskSpace: 'ok' | 'warning' | 'critical';\n      memoryUsage: 'ok' | 'warning' | 'critical';\n      lastCheck: Date;\n    } = {\n      status: 'healthy',\n      database: 'connected',\n      redis: 'connected',\n      diskSpace: 'ok',\n      memoryUsage: 'ok',\n      lastCheck: new Date()\n    };\n\n    try {\n      // Test database connection\n      await getPool().query('SELECT 1');\n    } catch (error) {\n      health.database = 'disconnected';\n      health.status = 'unhealthy';\n    }\n\n    // In a real implementation, you would:\n    // - Test Redis connection\n    // - Check disk space\n    // - Check memory usage\n    // - Set appropriate status based on results\n\n    return health;\n  }\n\n\n  /**\n   * Calculate system uptime (simplified implementation)\n   */\n  private calculateSystemUptime(): string {\n    // In a real implementation, you would track when the system started\n    // For now, return a placeholder\n    return '99.9%';\n  }\n\n  /**\n   * Get last backup date (simplified implementation)\n   */\n  private async getLastBackupDate(): Promise<string | null> {\n    // In a real implementation, you would query backup logs\n    // For now, return null\n    return null;\n  }\n}"],"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","ignoreList":[]}