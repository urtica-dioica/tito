2130b92e3d35b1fbb03529765be19724
"use strict";
/**
 * Jest Setup File
 *
 * This file runs before each test file and sets up mocks and global configurations.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the Redis service module
jest.mock('../src/services/redis/redisService', () => ({
    RedisService: jest.fn().mockImplementation(() => mockRedisService_1.mockRedisService),
    redisService: mockRedisService_1.mockRedisService
}));
// Mock other external services that might cause issues in tests
jest.mock('../src/services/email/emailService', () => ({
    EmailService: jest.fn().mockImplementation(() => ({
        sendEmail: jest.fn().mockResolvedValue(true),
        sendPasswordResetEmail: jest.fn().mockResolvedValue(true),
        sendWelcomeEmail: jest.fn().mockResolvedValue(true)
    }))
}));
// Mock file system operations
jest.mock('fs/promises', () => ({
    writeFile: jest.fn().mockResolvedValue(undefined),
    readFile: jest.fn().mockResolvedValue('mock file content'),
    unlink: jest.fn().mockResolvedValue(undefined),
    mkdir: jest.fn().mockResolvedValue(undefined),
    access: jest.fn().mockResolvedValue(undefined)
}));
// Mock multer for file uploads
jest.mock('multer', () => ({
    diskStorage: jest.fn(),
    memoryStorage: jest.fn(),
    __esModule: true,
    default: jest.fn(() => ({
        single: jest.fn(),
        array: jest.fn(),
        fields: jest.fn()
    }))
}));
const mockRedisService_1 = require("./utils/mockRedisService");
// Global test timeout
jest.setTimeout(30000);
// Global error handler for unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});
// Global error handler for uncaught exceptions
process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Im5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9raW0vdGl0by9zZXJ2ZXIvdGVzdHMvamVzdC5zZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEplc3QgU2V0dXAgRmlsZVxuICogXG4gKiBUaGlzIGZpbGUgcnVucyBiZWZvcmUgZWFjaCB0ZXN0IGZpbGUgYW5kIHNldHMgdXAgbW9ja3MgYW5kIGdsb2JhbCBjb25maWd1cmF0aW9ucy5cbiAqL1xuXG5pbXBvcnQgeyBtb2NrUmVkaXNTZXJ2aWNlIH0gZnJvbSAnLi91dGlscy9tb2NrUmVkaXNTZXJ2aWNlJztcblxuLy8gTW9jayB0aGUgUmVkaXMgc2VydmljZSBtb2R1bGVcbmplc3QubW9jaygnLi4vc3JjL3NlcnZpY2VzL3JlZGlzL3JlZGlzU2VydmljZScsICgpID0+ICh7XG4gIFJlZGlzU2VydmljZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBtb2NrUmVkaXNTZXJ2aWNlKSxcbiAgcmVkaXNTZXJ2aWNlOiBtb2NrUmVkaXNTZXJ2aWNlXG59KSk7XG5cbi8vIE1vY2sgb3RoZXIgZXh0ZXJuYWwgc2VydmljZXMgdGhhdCBtaWdodCBjYXVzZSBpc3N1ZXMgaW4gdGVzdHNcbmplc3QubW9jaygnLi4vc3JjL3NlcnZpY2VzL2VtYWlsL2VtYWlsU2VydmljZScsICgpID0+ICh7XG4gIEVtYWlsU2VydmljZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgIHNlbmRFbWFpbDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICAgIHNlbmRQYXNzd29yZFJlc2V0RW1haWw6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgICBzZW5kV2VsY29tZUVtYWlsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSlcbiAgfSkpXG59KSk7XG5cbi8vIE1vY2sgZmlsZSBzeXN0ZW0gb3BlcmF0aW9uc1xuamVzdC5tb2NrKCdmcy9wcm9taXNlcycsICgpID0+ICh7XG4gIHdyaXRlRmlsZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXG4gIHJlYWRGaWxlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ21vY2sgZmlsZSBjb250ZW50JyksXG4gIHVubGluazogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXG4gIG1rZGlyOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcbiAgYWNjZXNzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKVxufSkpO1xuXG4vLyBNb2NrIG11bHRlciBmb3IgZmlsZSB1cGxvYWRzXG5qZXN0Lm1vY2soJ211bHRlcicsICgpID0+ICh7XG4gIGRpc2tTdG9yYWdlOiBqZXN0LmZuKCksXG4gIG1lbW9yeVN0b3JhZ2U6IGplc3QuZm4oKSxcbiAgX19lc01vZHVsZTogdHJ1ZSxcbiAgZGVmYXVsdDogamVzdC5mbigoKSA9PiAoe1xuICAgIHNpbmdsZTogamVzdC5mbigpLFxuICAgIGFycmF5OiBqZXN0LmZuKCksXG4gICAgZmllbGRzOiBqZXN0LmZuKClcbiAgfSkpXG59KSk7XG5cbi8vIEdsb2JhbCB0ZXN0IHRpbWVvdXRcbmplc3Quc2V0VGltZW91dCgzMDAwMCk7XG5cbi8vIEdsb2JhbCBlcnJvciBoYW5kbGVyIGZvciB1bmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb25zXG5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCAocmVhc29uLCBwcm9taXNlKSA9PiB7XG4gIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBSZWplY3Rpb24gYXQ6JywgcHJvbWlzZSwgJ3JlYXNvbjonLCByZWFzb24pO1xufSk7XG5cbi8vIEdsb2JhbCBlcnJvciBoYW5kbGVyIGZvciB1bmNhdWdodCBleGNlcHRpb25zXG5wcm9jZXNzLm9uKCd1bmNhdWdodEV4Y2VwdGlvbicsIChlcnJvcikgPT4ge1xuICBjb25zb2xlLmVycm9yKCdVbmNhdWdodCBFeGNlcHRpb246JywgZXJyb3IpO1xufSk7XG4iXSwidmVyc2lvbiI6M30=