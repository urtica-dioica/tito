d75c829703b2f42f299fdae1ac94a5d8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const loadTestUtils_1 = require("./loadTestUtils");
const database_1 = require("../../src/config/database");
// Mock axios for testing
const axios = {
    create: () => ({
        get: jest.fn(),
        post: jest.fn(),
        put: jest.fn(),
        delete: jest.fn(),
        patch: jest.fn(),
        interceptors: {
            request: { use: jest.fn() },
            response: { use: jest.fn() }
        }
    })
};
describe('Performance Benchmark Tests', () => {
    let benchmark;
    let pool;
    let baseURL;
    let authToken;
    beforeAll(async () => {
        benchmark = new loadTestUtils_1.PerformanceBenchmark();
        pool = (0, database_1.getPool)();
        baseURL = process.env.TEST_BASE_URL || 'http://localhost:3000';
        // Get authentication token
        try {
            const response = await axios.create().post(`${baseURL}/api/v1/auth/login`, {
                email: 'hr@example.com',
                password: 'password123'
            });
            authToken = response.data.data.accessToken;
        }
        catch (error) {
            console.warn('Could not obtain auth token for benchmark test');
            authToken = 'test-token';
        }
    });
    afterAll(async () => {
        if (pool && typeof pool.end === 'function') {
            await pool.end();
        }
    });
    describe('API Endpoint Performance Benchmarks', () => {
        it('should benchmark authentication endpoints', async () => {
            const iterations = 10;
            // Benchmark login endpoint
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Login Endpoint', async () => {
                    await axios.create().post(`${baseURL}/api/v1/auth/login`, {
                        email: 'test@example.com',
                        password: 'password123'
                    });
                });
            }
            // Benchmark profile endpoint
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Profile Endpoint', async () => {
                    await axios.create().get(`${baseURL}/api/v1/auth/profile`, {
                        headers: { 'Authorization': `Bearer ${authToken}` }
                    });
                });
            }
            // Benchmark refresh endpoint
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Refresh Endpoint', async () => {
                    await axios.create().post(`${baseURL}/api/v1/auth/refresh`, {}, {
                        headers: { 'Cookie': 'refreshToken=test-refresh-token' }
                    });
                });
            }
            const results = benchmark.getResults();
            console.log('\n🔍 AUTHENTICATION ENDPOINT BENCHMARKS');
            console.log('=====================================');
            for (const [name, stats] of results.entries()) {
                console.log(`${name}:`);
                console.log(`  Average: ${stats.average.toFixed(2)}ms`);
                console.log(`  Min: ${stats.min.toFixed(2)}ms`);
                console.log(`  Max: ${stats.max.toFixed(2)}ms`);
                console.log(`  Samples: ${stats.count}`);
            }
            // Performance assertions
            expect(results.get('Login Endpoint')?.average).toBeLessThan(2000);
            expect(results.get('Profile Endpoint')?.average).toBeLessThan(1000);
            expect(results.get('Refresh Endpoint')?.average).toBeLessThan(1500);
        }, 60000);
        it('should benchmark payroll endpoints', async () => {
            const iterations = 8;
            // Benchmark payroll periods endpoint
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Payroll Periods', async () => {
                    await axios.create().get(`${baseURL}/api/v1/payroll/periods`, {
                        headers: { 'Authorization': `Bearer ${authToken}` },
                        params: { page: 1, limit: 10 }
                    });
                });
            }
            // Benchmark payroll records endpoint
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Payroll Records', async () => {
                    await axios.create().get(`${baseURL}/api/v1/payroll/periods/test-period-id/records`, {
                        headers: { 'Authorization': `Bearer ${authToken}` },
                        params: { page: 1, limit: 20 }
                    });
                });
            }
            // Benchmark payroll summary endpoint
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Payroll Summary', async () => {
                    await axios.create().get(`${baseURL}/api/v1/payroll/periods/test-period-id/summary`, {
                        headers: { 'Authorization': `Bearer ${authToken}` }
                    });
                });
            }
            // Benchmark payroll stats endpoint
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Payroll Stats', async () => {
                    await axios.create().get(`${baseURL}/api/v1/payroll/stats`, {
                        headers: { 'Authorization': `Bearer ${authToken}` },
                        params: { period: '2024-01' }
                    });
                });
            }
            const results = benchmark.getResults();
            console.log('\n🔍 PAYROLL ENDPOINT BENCHMARKS');
            console.log('==============================');
            for (const [name, stats] of results.entries()) {
                if (name.includes('Payroll')) {
                    console.log(`${name}:`);
                    console.log(`  Average: ${stats.average.toFixed(2)}ms`);
                    console.log(`  Min: ${stats.min.toFixed(2)}ms`);
                    console.log(`  Max: ${stats.max.toFixed(2)}ms`);
                    console.log(`  Samples: ${stats.count}`);
                }
            }
            // Performance assertions
            expect(results.get('Payroll Periods')?.average).toBeLessThan(2000);
            expect(results.get('Payroll Records')?.average).toBeLessThan(3000);
            expect(results.get('Payroll Summary')?.average).toBeLessThan(2500);
            expect(results.get('Payroll Stats')?.average).toBeLessThan(3000);
        }, 60000);
        it('should benchmark employee endpoints', async () => {
            const iterations = 8;
            // Benchmark employee listing endpoint
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Employee Listing', async () => {
                    await axios.create().get(`${baseURL}/api/v1/hr/employees`, {
                        headers: { 'Authorization': `Bearer ${authToken}` },
                        params: { page: 1, limit: 20 }
                    });
                });
            }
            // Benchmark employee search endpoint
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Employee Search', async () => {
                    await axios.create().get(`${baseURL}/api/v1/hr/employees`, {
                        headers: { 'Authorization': `Bearer ${authToken}` },
                        params: { search: 'test', page: 1, limit: 10 }
                    });
                });
            }
            // Benchmark department listing endpoint
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Department Listing', async () => {
                    await axios.create().get(`${baseURL}/api/v1/hr/departments`, {
                        headers: { 'Authorization': `Bearer ${authToken}` }
                    });
                });
            }
            const results = benchmark.getResults();
            console.log('\n🔍 EMPLOYEE ENDPOINT BENCHMARKS');
            console.log('===============================');
            for (const [name, stats] of results.entries()) {
                if (name.includes('Employee') || name.includes('Department')) {
                    console.log(`${name}:`);
                    console.log(`  Average: ${stats.average.toFixed(2)}ms`);
                    console.log(`  Min: ${stats.min.toFixed(2)}ms`);
                    console.log(`  Max: ${stats.max.toFixed(2)}ms`);
                    console.log(`  Samples: ${stats.count}`);
                }
            }
            // Performance assertions
            expect(results.get('Employee Listing')?.average).toBeLessThan(2000);
            expect(results.get('Employee Search')?.average).toBeLessThan(2500);
            expect(results.get('Department Listing')?.average).toBeLessThan(1500);
        }, 60000);
    });
    describe('Database Query Performance Benchmarks', () => {
        it('should benchmark database queries', async () => {
            const iterations = 20;
            // Benchmark user authentication query
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('User Auth Query', async () => {
                    await pool.query('SELECT id, email, first_name, last_name, role FROM users WHERE email = $1 AND is_active = true', ['test@example.com']);
                });
            }
            // Benchmark employee listing query
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Employee List Query', async () => {
                    await pool.query(`
            SELECT e.id, e.employee_id, e.position, u.first_name, u.last_name, u.email, d.name as department_name
            FROM employees e
            JOIN users u ON e.user_id = u.id
            LEFT JOIN departments d ON e.department_id = d.id
            WHERE e.status = 'active'
            ORDER BY u.last_name, u.first_name
            LIMIT $1
          `, [20]);
                });
            }
            // Benchmark attendance statistics query
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Attendance Stats Query', async () => {
                    await pool.query(`
            SELECT 
              COUNT(*) as total_employees,
              COUNT(CASE WHEN ar.status = 'present' THEN 1 END) as present_today,
              COUNT(CASE WHEN ar.status = 'absent' THEN 1 END) as absent_today,
              COALESCE(SUM(ar.total_hours), 0) as total_hours_today
            FROM employees e
            LEFT JOIN attendance_records ar ON e.id = ar.employee_id AND ar.date = CURRENT_DATE
            WHERE e.status = 'active'
          `);
                });
            }
            // Benchmark payroll summary query
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Payroll Summary Query', async () => {
                    await pool.query(`
            SELECT 
              COUNT(*) as total_employees,
              COALESCE(SUM(pr.gross_pay), 0) as total_gross_pay,
              COALESCE(SUM(pr.net_pay), 0) as total_net_pay,
              COALESCE(AVG(pr.gross_pay), 0) as average_salary
            FROM payroll_records pr
            JOIN payroll_periods pp ON pr.payroll_period_id = pp.id
            WHERE pp.id = $1
          `, ['test-period-id']);
                });
            }
            const results = benchmark.getResults();
            console.log('\n🔍 DATABASE QUERY BENCHMARKS');
            console.log('============================');
            for (const [name, stats] of results.entries()) {
                if (name.includes('Query')) {
                    console.log(`${name}:`);
                    console.log(`  Average: ${stats.average.toFixed(2)}ms`);
                    console.log(`  Min: ${stats.min.toFixed(2)}ms`);
                    console.log(`  Max: ${stats.max.toFixed(2)}ms`);
                    console.log(`  Samples: ${stats.count}`);
                }
            }
            // Performance assertions
            expect(results.get('User Auth Query')?.average).toBeLessThan(50);
            expect(results.get('Employee List Query')?.average).toBeLessThan(100);
            expect(results.get('Attendance Stats Query')?.average).toBeLessThan(150);
            expect(results.get('Payroll Summary Query')?.average).toBeLessThan(200);
        }, 60000);
    });
    describe('System Performance Benchmarks', () => {
        it('should benchmark system resource usage', async () => {
            const iterations = 5;
            // Benchmark memory usage during operations
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Memory Intensive Operation', async () => {
                    // Simulate memory-intensive operation
                    const largeArray = new Array(10000).fill(0).map((_, index) => ({
                        id: index,
                        name: `Item ${index}`,
                        data: `Data for item ${index}`.repeat(10)
                    }));
                    // Process the array
                    const processed = largeArray.map(item => ({
                        ...item,
                        processed: true,
                        timestamp: Date.now()
                    }));
                    return processed.length;
                });
            }
            // Benchmark CPU-intensive operations
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('CPU Intensive Operation', async () => {
                    // Simulate CPU-intensive calculation
                    let result = 0;
                    for (let j = 0; j < 100000; j++) {
                        result += Math.sqrt(j) * Math.sin(j) * Math.cos(j);
                    }
                    return result;
                });
            }
            // Benchmark I/O operations
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('I/O Operation', async () => {
                    // Simulate I/O operation with database
                    await pool.query('SELECT COUNT(*) FROM users');
                    await pool.query('SELECT COUNT(*) FROM employees');
                    await pool.query('SELECT COUNT(*) FROM departments');
                    return true;
                });
            }
            const results = benchmark.getResults();
            console.log('\n🔍 SYSTEM PERFORMANCE BENCHMARKS');
            console.log('=================================');
            for (const [name, stats] of results.entries()) {
                if (name.includes('Operation')) {
                    console.log(`${name}:`);
                    console.log(`  Average: ${stats.average.toFixed(2)}ms`);
                    console.log(`  Min: ${stats.min.toFixed(2)}ms`);
                    console.log(`  Max: ${stats.max.toFixed(2)}ms`);
                    console.log(`  Samples: ${stats.count}`);
                }
            }
            // Performance assertions
            expect(results.get('Memory Intensive Operation')?.average).toBeLessThan(1000);
            expect(results.get('CPU Intensive Operation')?.average).toBeLessThan(500);
            expect(results.get('I/O Operation')?.average).toBeLessThan(200);
        }, 60000);
    });
    describe('Performance Regression Tests', () => {
        it('should detect performance regressions', async () => {
            const iterations = 15;
            // Test critical path performance
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Critical Path - User Login', async () => {
                    // Simulate complete user login flow
                    await axios.create().post(`${baseURL}/api/v1/auth/login`, {
                        email: 'test@example.com',
                        password: 'password123'
                    });
                });
            }
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Critical Path - Dashboard Load', async () => {
                    // Simulate dashboard loading
                    await axios.create().get(`${baseURL}/api/v1/hr/employees`, {
                        headers: { 'Authorization': `Bearer ${authToken}` },
                        params: { page: 1, limit: 20 }
                    });
                });
            }
            for (let i = 0; i < iterations; i++) {
                await benchmark.measure('Critical Path - Payroll View', async () => {
                    // Simulate payroll view loading
                    await axios.create().get(`${baseURL}/api/v1/payroll/periods`, {
                        headers: { 'Authorization': `Bearer ${authToken}` },
                        params: { page: 1, limit: 10 }
                    });
                });
            }
            const results = benchmark.getResults();
            console.log('\n🔍 PERFORMANCE REGRESSION TESTS');
            console.log('===============================');
            for (const [name, stats] of results.entries()) {
                if (name.includes('Critical Path')) {
                    console.log(`${name}:`);
                    console.log(`  Average: ${stats.average.toFixed(2)}ms`);
                    console.log(`  Min: ${stats.min.toFixed(2)}ms`);
                    console.log(`  Max: ${stats.max.toFixed(2)}ms`);
                    console.log(`  Samples: ${stats.count}`);
                }
            }
            // Performance regression assertions (strict thresholds)
            expect(results.get('Critical Path - User Login')?.average).toBeLessThan(1500);
            expect(results.get('Critical Path - Dashboard Load')?.average).toBeLessThan(2000);
            expect(results.get('Critical Path - Payroll View')?.average).toBeLessThan(2000);
            // Check for performance consistency (max should not be too far from average)
            const loginStats = results.get('Critical Path - User Login');
            const dashboardStats = results.get('Critical Path - Dashboard Load');
            const payrollStats = results.get('Critical Path - Payroll View');
            if (loginStats) {
                expect(loginStats.max / loginStats.average).toBeLessThan(3); // Max should not be 3x average
            }
            if (dashboardStats) {
                expect(dashboardStats.max / dashboardStats.average).toBeLessThan(3);
            }
            if (payrollStats) {
                expect(payrollStats.max / payrollStats.average).toBeLessThan(3);
            }
        }, 90000);
    });
    afterAll(() => {
        // Generate final benchmark report
        console.log(benchmark.generateReport());
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,