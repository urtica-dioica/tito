{"version":3,"names":["LeaveAccrual_1","cov_10e7d28srb","s","require","LeaveAccrualService","constructor","f","leaveAccrualModel","LeaveAccrualModel","createLeaveAccrual","data","getLeaveAccrual","id","findByIdWithDetails","listLeaveAccruals","params","b","getEmployeeLeaveAccruals","employeeId","startDate","endDate","getLeaveAccrualStats","departmentId","deleteLeaveAccrual","processOvertimeToLeaveAccrual","overtimeHours","attendanceRecordId","accrualDate","getPool","Promise","resolve","then","__importStar","pool","ratioQuery","ratioResult","query","overtimeToLeaveRatio","rows","length","parseFloat","setting_value","leaveDaysAccrued","accrualData","Date","accrual","updateEmployeeLeaveBalance","processBulkOvertimeAccruals","overtimeQuery","overtimeResult","processed","errors","row","existingQuery","existingResult","attendance_record_id","employee_id","total_overtime_hours","date","error","push","Error","message","getEmployeeAccrualSummary","year","accruals","totalOvertimeHours","reduce","sum","totalLeaveDaysAccrued","accrualsByMonth","acc","month","toISOString","substring","existing","find","item","sort","a","localeCompare","recentAccruals","getTime","slice","validateAccrualData","employeeQuery","employeeResult","attendanceQuery","attendanceResult","isValid","leaveType","daysToAdd","upsertQuery","recalculateEmployeeAccruals","deleteQuery","recalculated","exports"],"sources":["/home/kim/tito/server/src/services/leave/leaveAccrualService.ts"],"sourcesContent":["import { LeaveAccrualModel, CreateLeaveAccrualData, LeaveAccrual, LeaveAccrualWithDetails, LeaveAccrualListParams } from '../../models/leave/LeaveAccrual';\n\nexport interface LeaveAccrualStats {\n  totalAccruals: number;\n  totalOvertimeHours: number;\n  totalLeaveDaysAccrued: number;\n  averageOvertimeToLeaveRatio: number;\n  accrualsByEmployee: Array<{ employeeName: string; overtimeHours: number; leaveDaysAccrued: number }>;\n  accrualsByDepartment: Array<{ departmentName: string; overtimeHours: number; leaveDaysAccrued: number }>;\n  accrualsByMonth: Array<{ month: string; overtimeHours: number; leaveDaysAccrued: number }>;\n}\n\nexport class LeaveAccrualService {\n  private leaveAccrualModel: LeaveAccrualModel;\n\n  constructor() {\n    this.leaveAccrualModel = new LeaveAccrualModel();\n  }\n\n  async createLeaveAccrual(data: CreateLeaveAccrualData): Promise<LeaveAccrual> {\n    return await this.leaveAccrualModel.createLeaveAccrual(data);\n  }\n\n  async getLeaveAccrual(id: string): Promise<LeaveAccrualWithDetails | null> {\n    return await this.leaveAccrualModel.findByIdWithDetails(id);\n  }\n\n  async listLeaveAccruals(params: LeaveAccrualListParams = {}): Promise<{\n    accruals: LeaveAccrualWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return await this.leaveAccrualModel.listLeaveAccruals(params);\n  }\n\n  async getEmployeeLeaveAccruals(employeeId: string, startDate?: Date, endDate?: Date): Promise<LeaveAccrualWithDetails[]> {\n    return await this.leaveAccrualModel.getEmployeeLeaveAccruals(employeeId, startDate, endDate);\n  }\n\n  async getLeaveAccrualStats(employeeId?: string, departmentId?: string, startDate?: Date, endDate?: Date): Promise<LeaveAccrualStats> {\n    return await this.leaveAccrualModel.getLeaveAccrualStats(employeeId, departmentId, startDate, endDate);\n  }\n\n  async deleteLeaveAccrual(id: string): Promise<boolean> {\n    return await this.leaveAccrualModel.deleteLeaveAccrual(id);\n  }\n\n  // Business logic methods\n\n  async processOvertimeToLeaveAccrual(\n    employeeId: string,\n    overtimeHours: number,\n    attendanceRecordId?: string,\n    accrualDate?: Date\n  ): Promise<LeaveAccrual> {\n    // Get the overtime to leave ratio from system settings\n    const { getPool } = await import('../../config/database');\n    const pool = getPool();\n    \n    const ratioQuery = `\n      SELECT setting_value \n      FROM system_settings \n      WHERE setting_key = 'overtime_to_leave_ratio'\n    `;\n    \n    const ratioResult = await pool.query(ratioQuery);\n    const overtimeToLeaveRatio = ratioResult.rows.length > 0 \n      ? parseFloat(ratioResult.rows[0].setting_value) \n      : 0.125; // Default: 1 day per 8 hours (0.125)\n\n    const leaveDaysAccrued = overtimeHours * overtimeToLeaveRatio;\n\n    // Create the leave accrual record\n    const accrualData: CreateLeaveAccrualData = {\n      employeeId,\n      attendanceRecordId,\n      overtimeHours,\n      leaveDaysAccrued,\n      accrualDate: accrualDate || new Date()\n    };\n\n    const accrual = await this.createLeaveAccrual(accrualData);\n\n    // Update the employee's leave balance\n    await this.updateEmployeeLeaveBalance(employeeId, 'vacation', leaveDaysAccrued);\n\n    return accrual;\n  }\n\n  async processBulkOvertimeAccruals(\n    startDate: Date,\n    endDate: Date\n  ): Promise<{\n    processed: number;\n    errors: Array<{ employeeId: string; error: string }>;\n  }> {\n    const { getPool } = await import('../../config/database');\n    const pool = getPool();\n    \n    // Get all overtime sessions in the date range\n    const overtimeQuery = `\n      SELECT \n        ar.employee_id,\n        ar.id as attendance_record_id,\n        ar.date,\n        SUM(as.calculated_hours) as total_overtime_hours\n      FROM attendance_records ar\n      JOIN attendance_sessions as ON ar.id = as.attendance_record_id\n      WHERE as.session_type = 'overtime' \n        AND ar.date >= $1 \n        AND ar.date <= $2\n        AND as.calculated_hours > 0\n      GROUP BY ar.employee_id, ar.id, ar.date\n    `;\n    \n    const overtimeResult = await pool.query(overtimeQuery, [startDate, endDate]);\n    \n    let processed = 0;\n    const errors: Array<{ employeeId: string; error: string }> = [];\n\n    for (const row of overtimeResult.rows) {\n      try {\n        // Check if accrual already exists for this attendance record\n        const existingQuery = `\n          SELECT id FROM leave_accruals \n          WHERE attendance_record_id = $1\n        `;\n        const existingResult = await pool.query(existingQuery, [row.attendance_record_id]);\n        \n        if (existingResult.rows.length > 0) {\n          continue; // Skip if already processed\n        }\n\n        await this.processOvertimeToLeaveAccrual(\n          row.employee_id,\n          parseFloat(row.total_overtime_hours),\n          row.attendance_record_id,\n          row.date\n        );\n        \n        processed++;\n      } catch (error) {\n        errors.push({\n          employeeId: row.employee_id,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n\n    return { processed, errors };\n  }\n\n  async getEmployeeAccrualSummary(\n    employeeId: string,\n    year: number\n  ): Promise<{\n    totalOvertimeHours: number;\n    totalLeaveDaysAccrued: number;\n    accrualsByMonth: Array<{ month: string; overtimeHours: number; leaveDaysAccrued: number }>;\n    recentAccruals: LeaveAccrualWithDetails[];\n  }> {\n    const startDate = new Date(year, 0, 1);\n    const endDate = new Date(year, 11, 31);\n\n    const accruals = await this.getEmployeeLeaveAccruals(employeeId, startDate, endDate);\n    \n    const totalOvertimeHours = accruals.reduce((sum, accrual) => sum + accrual.overtimeHours, 0);\n    const totalLeaveDaysAccrued = accruals.reduce((sum, accrual) => sum + accrual.leaveDaysAccrued, 0);\n\n    // Group by month\n    const accrualsByMonth = accruals.reduce((acc, accrual) => {\n      const month = accrual.accrualDate.toISOString().substring(0, 7); // YYYY-MM\n      const existing = acc.find(item => item.month === month);\n      \n      if (existing) {\n        existing.overtimeHours += accrual.overtimeHours;\n        existing.leaveDaysAccrued += accrual.leaveDaysAccrued;\n      } else {\n        acc.push({\n          month,\n          overtimeHours: accrual.overtimeHours,\n          leaveDaysAccrued: accrual.leaveDaysAccrued\n        });\n      }\n      \n      return acc;\n    }, [] as Array<{ month: string; overtimeHours: number; leaveDaysAccrued: number }>);\n\n    // Sort by month\n    accrualsByMonth.sort((a, b) => a.month.localeCompare(b.month));\n\n    // Get recent accruals (last 10)\n    const recentAccruals = accruals\n      .sort((a, b) => b.accrualDate.getTime() - a.accrualDate.getTime())\n      .slice(0, 10);\n\n    return {\n      totalOvertimeHours,\n      totalLeaveDaysAccrued,\n      accrualsByMonth,\n      recentAccruals\n    };\n  }\n\n  async validateAccrualData(data: CreateLeaveAccrualData): Promise<{\n    isValid: boolean;\n    errors: string[];\n  }> {\n    const errors: string[] = [];\n\n    // Validate employee exists\n    const { getPool } = await import('../../config/database');\n    const pool = getPool();\n    \n    const employeeQuery = 'SELECT id FROM employees WHERE id = $1';\n    const employeeResult = await pool.query(employeeQuery, [data.employeeId]);\n    \n    if (employeeResult.rows.length === 0) {\n      errors.push('Employee not found');\n    }\n\n    // Validate overtime hours\n    if (data.overtimeHours <= 0) {\n      errors.push('Overtime hours must be greater than 0');\n    }\n\n    // Validate leave days accrued\n    if (data.leaveDaysAccrued <= 0) {\n      errors.push('Leave days accrued must be greater than 0');\n    }\n\n    // Validate accrual date\n    if (data.accrualDate > new Date()) {\n      errors.push('Accrual date cannot be in the future');\n    }\n\n    // Validate attendance record if provided\n    if (data.attendanceRecordId) {\n      const attendanceQuery = 'SELECT id FROM attendance_records WHERE id = $1';\n      const attendanceResult = await pool.query(attendanceQuery, [data.attendanceRecordId]);\n      \n      if (attendanceResult.rows.length === 0) {\n        errors.push('Attendance record not found');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  private async updateEmployeeLeaveBalance(\n    employeeId: string,\n    leaveType: 'vacation' | 'sick' | 'maternity' | 'other',\n    daysToAdd: number\n  ): Promise<void> {\n    const { getPool } = await import('../../config/database');\n    const pool = getPool();\n    \n    // Upsert leave balance\n    const upsertQuery = `\n      INSERT INTO leave_balances (employee_id, leave_type, balance, updated_at)\n      VALUES ($1, $2, $3, CURRENT_TIMESTAMP)\n      ON CONFLICT (employee_id, leave_type)\n      DO UPDATE SET \n        balance = leave_balances.balance + $3,\n        updated_at = CURRENT_TIMESTAMP\n    `;\n    \n    await pool.query(upsertQuery, [employeeId, leaveType, daysToAdd]);\n  }\n\n  async recalculateEmployeeAccruals(employeeId: string, year: number): Promise<{\n    recalculated: number;\n    totalOvertimeHours: number;\n    totalLeaveDaysAccrued: number;\n  }> {\n    const startDate = new Date(year, 0, 1);\n    const endDate = new Date(year, 11, 31);\n\n    // Delete existing accruals for the year\n    const deleteQuery = `\n      DELETE FROM leave_accruals \n      WHERE employee_id = $1 \n        AND accrual_date >= $2 \n        AND accrual_date <= $3\n    `;\n    \n    const { getPool } = await import('../../config/database');\n    const pool = getPool();\n    await pool.query(deleteQuery, [employeeId, startDate, endDate]);\n\n    // Recalculate from overtime sessions\n    const overtimeQuery = `\n      SELECT \n        ar.id as attendance_record_id,\n        ar.date,\n        SUM(as.calculated_hours) as total_overtime_hours\n      FROM attendance_records ar\n      JOIN attendance_sessions as ON ar.id = as.attendance_record_id\n      WHERE ar.employee_id = $1 \n        AND as.session_type = 'overtime' \n        AND ar.date >= $2 \n        AND ar.date <= $3\n        AND as.calculated_hours > 0\n      GROUP BY ar.id, ar.date\n    `;\n    \n    const overtimeResult = await pool.query(overtimeQuery, [employeeId, startDate, endDate]);\n    \n    let recalculated = 0;\n    let totalOvertimeHours = 0;\n    let totalLeaveDaysAccrued = 0;\n\n    for (const row of overtimeResult.rows) {\n      const accrual = await this.processOvertimeToLeaveAccrual(\n        employeeId,\n        parseFloat(row.total_overtime_hours),\n        row.attendance_record_id,\n        row.date\n      );\n      \n      recalculated++;\n      totalOvertimeHours += accrual.overtimeHours;\n      totalLeaveDaysAccrued += accrual.leaveDaysAccrued;\n    }\n\n    return {\n      recalculated,\n      totalOvertimeHours,\n      totalLeaveDaysAccrued\n    };\n  }\n}"],"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","ignoreList":[]}