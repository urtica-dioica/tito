42bc6120fb4ca6f9de833030f7a9cfea
"use strict";

/* istanbul ignore next */
function cov_1xzxq8w4hn() {
  var path = "/home/kim/tito/server/src/services/auth/authService.ts";
  var hash = "c33c73d44d17a8e67553f1c22d309b535b5c1e54";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/auth/authService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 51
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 48
        }
      },
      "5": {
        start: {
          line: 8,
          column: 14
        },
        end: {
          line: 8,
          column: 41
        }
      },
      "6": {
        start: {
          line: 9,
          column: 23
        },
        end: {
          line: 9,
          column: 55
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 63
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "9": {
        start: {
          line: 17,
          column: 40
        },
        end: {
          line: 17,
          column: 51
        }
      },
      "10": {
        start: {
          line: 19,
          column: 25
        },
        end: {
          line: 19,
          column: 66
        }
      },
      "11": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 26,
          column: 13
        }
      },
      "12": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 25,
          column: 18
        }
      },
      "13": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 34,
          column: 13
        }
      },
      "14": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 33,
          column: 18
        }
      },
      "15": {
        start: {
          line: 36,
          column: 36
        },
        end: {
          line: 36,
          column: 90
        }
      },
      "16": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 43,
          column: 13
        }
      },
      "17": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 42,
          column: 18
        }
      },
      "18": {
        start: {
          line: 45,
          column: 50
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "19": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "20": {
        start: {
          line: 49,
          column: 40
        },
        end: {
          line: 49,
          column: 66
        }
      },
      "21": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 108
        }
      },
      "22": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 111
        }
      },
      "23": {
        start: {
          line: 57,
          column: 65
        },
        end: {
          line: 57,
          column: 69
        }
      },
      "24": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 63,
          column: 13
        }
      },
      "25": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 68,
          column: 14
        }
      },
      "26": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 75,
          column: 14
        }
      },
      "27": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "28": {
        start: {
          line: 84,
          column: 28
        },
        end: {
          line: 84,
          column: 71
        }
      },
      "29": {
        start: {
          line: 86,
          column: 36
        },
        end: {
          line: 86,
          column: 69
        }
      },
      "30": {
        start: {
          line: 87,
          column: 30
        },
        end: {
          line: 87,
          column: 34
        }
      },
      "31": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "32": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 90
        }
      },
      "33": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 113
        }
      },
      "34": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "35": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 128
        }
      },
      "36": {
        start: {
          line: 100,
          column: 25
        },
        end: {
          line: 100,
          column: 72
        }
      },
      "37": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "38": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 106,
          column: 18
        }
      },
      "39": {
        start: {
          line: 109,
          column: 30
        },
        end: {
          line: 109,
          column: 116
        }
      },
      "40": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 117,
          column: 13
        }
      },
      "41": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 118
        }
      },
      "42": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 114
        }
      },
      "43": {
        start: {
          line: 118,
          column: 29
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "44": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 127,
          column: 14
        }
      },
      "45": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 134,
          column: 14
        }
      },
      "46": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "47": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "48": {
        start: {
          line: 144,
          column: 40
        },
        end: {
          line: 144,
          column: 65
        }
      },
      "49": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 79
        }
      },
      "50": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 115
        }
      },
      "51": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 154,
          column: 14
        }
      },
      "52": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 161,
          column: 14
        }
      },
      "53": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "54": {
        start: {
          line: 169,
          column: 28
        },
        end: {
          line: 169,
          column: 63
        }
      },
      "55": {
        start: {
          line: 171,
          column: 25
        },
        end: {
          line: 171,
          column: 72
        }
      },
      "56": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 178,
          column: 13
        }
      },
      "57": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 177,
          column: 18
        }
      },
      "58": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 183,
          column: 14
        }
      },
      "59": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 190,
          column: 14
        }
      },
      "60": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "61": {
        start: {
          line: 199,
          column: 25
        },
        end: {
          line: 199,
          column: 64
        }
      },
      "62": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 206,
          column: 13
        }
      },
      "63": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 205,
          column: 18
        }
      },
      "64": {
        start: {
          line: 208,
          column: 43
        },
        end: {
          line: 208,
          column: 109
        }
      },
      "65": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 215,
          column: 13
        }
      },
      "66": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 214,
          column: 18
        }
      },
      "67": {
        start: {
          line: 217,
          column: 28
        },
        end: {
          line: 217,
          column: 86
        }
      },
      "68": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 224,
          column: 13
        }
      },
      "69": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 223,
          column: 18
        }
      },
      "70": {
        start: {
          line: 226,
          column: 36
        },
        end: {
          line: 226,
          column: 60
        }
      },
      "71": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 75
        }
      },
      "72": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 231,
          column: 14
        }
      },
      "73": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 238,
          column: 14
        }
      },
      "74": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "75": {
        start: {
          line: 247,
          column: 25
        },
        end: {
          line: 247,
          column: 81
        }
      },
      "76": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "77": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 253,
          column: 18
        }
      },
      "78": {
        start: {
          line: 256,
          column: 31
        },
        end: {
          line: 256,
          column: 74
        }
      },
      "79": {
        start: {
          line: 257,
          column: 34
        },
        end: {
          line: 257,
          column: 58
        }
      },
      "80": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 91
        }
      },
      "81": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 265,
          column: 14
        }
      },
      "82": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 272,
          column: 14
        }
      },
      "83": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "84": {
        start: {
          line: 281,
          column: 25
        },
        end: {
          line: 281,
          column: 81
        }
      },
      "85": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 288,
          column: 13
        }
      },
      "86": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 287,
          column: 18
        }
      },
      "87": {
        start: {
          line: 290,
          column: 34
        },
        end: {
          line: 290,
          column: 58
        }
      },
      "88": {
        start: {
          line: 291,
          column: 32
        },
        end: {
          line: 291,
          column: 89
        }
      },
      "89": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 298,
          column: 13
        }
      },
      "90": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 297,
          column: 18
        }
      },
      "91": {
        start: {
          line: 300,
          column: 28
        },
        end: {
          line: 300,
          column: 87
        }
      },
      "92": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 307,
          column: 13
        }
      },
      "93": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 306,
          column: 18
        }
      },
      "94": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 73
        }
      },
      "95": {
        start: {
          line: 311,
          column: 36
        },
        end: {
          line: 311,
          column: 62
        }
      },
      "96": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 75
        }
      },
      "97": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 316,
          column: 14
        }
      },
      "98": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 323,
          column: 14
        }
      },
      "99": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "100": {
        start: {
          line: 332,
          column: 34
        },
        end: {
          line: 332,
          column: 61
        }
      },
      "101": {
        start: {
          line: 333,
          column: 27
        },
        end: {
          line: 333,
          column: 84
        }
      },
      "102": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 340,
          column: 13
        }
      },
      "103": {
        start: {
          line: 335,
          column: 16
        },
        end: {
          line: 339,
          column: 18
        }
      },
      "104": {
        start: {
          line: 342,
          column: 25
        },
        end: {
          line: 342,
          column: 64
        }
      },
      "105": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 349,
          column: 13
        }
      },
      "106": {
        start: {
          line: 344,
          column: 16
        },
        end: {
          line: 348,
          column: 18
        }
      },
      "107": {
        start: {
          line: 351,
          column: 28
        },
        end: {
          line: 351,
          column: 87
        }
      },
      "108": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 358,
          column: 13
        }
      },
      "109": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 357,
          column: 18
        }
      },
      "110": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 73
        }
      },
      "111": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 364,
          column: 14
        }
      },
      "112": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 371,
          column: 14
        }
      },
      "113": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 399,
          column: 9
        }
      },
      "114": {
        start: {
          line: 379,
          column: 25
        },
        end: {
          line: 379,
          column: 64
        }
      },
      "115": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 386,
          column: 13
        }
      },
      "116": {
        start: {
          line: 381,
          column: 16
        },
        end: {
          line: 385,
          column: 18
        }
      },
      "117": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 391,
          column: 14
        }
      },
      "118": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 398,
          column: 14
        }
      },
      "119": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 450,
          column: 9
        }
      },
      "120": {
        start: {
          line: 406,
          column: 25
        },
        end: {
          line: 406,
          column: 64
        }
      },
      "121": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 413,
          column: 13
        }
      },
      "122": {
        start: {
          line: 408,
          column: 16
        },
        end: {
          line: 412,
          column: 18
        }
      },
      "123": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 424,
          column: 13
        }
      },
      "124": {
        start: {
          line: 416,
          column: 37
        },
        end: {
          line: 416,
          column: 90
        }
      },
      "125": {
        start: {
          line: 417,
          column: 16
        },
        end: {
          line: 423,
          column: 17
        }
      },
      "126": {
        start: {
          line: 418,
          column: 20
        },
        end: {
          line: 422,
          column: 22
        }
      },
      "127": {
        start: {
          line: 426,
          column: 32
        },
        end: {
          line: 430,
          column: 14
        }
      },
      "128": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 437,
          column: 13
        }
      },
      "129": {
        start: {
          line: 432,
          column: 16
        },
        end: {
          line: 436,
          column: 18
        }
      },
      "130": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 442,
          column: 14
        }
      },
      "131": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 449,
          column: 14
        }
      },
      "132": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 510,
          column: 9
        }
      },
      "133": {
        start: {
          line: 457,
          column: 25
        },
        end: {
          line: 457,
          column: 64
        }
      },
      "134": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 464,
          column: 13
        }
      },
      "135": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 463,
          column: 18
        }
      },
      "136": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 475,
          column: 13
        }
      },
      "137": {
        start: {
          line: 467,
          column: 37
        },
        end: {
          line: 467,
          column: 87
        }
      },
      "138": {
        start: {
          line: 468,
          column: 16
        },
        end: {
          line: 474,
          column: 17
        }
      },
      "139": {
        start: {
          line: 469,
          column: 20
        },
        end: {
          line: 473,
          column: 22
        }
      },
      "140": {
        start: {
          line: 477,
          column: 31
        },
        end: {
          line: 477,
          column: 33
        }
      },
      "141": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 479,
          column: 59
        }
      },
      "142": {
        start: {
          line: 479,
          column: 16
        },
        end: {
          line: 479,
          column: 59
        }
      },
      "143": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 481,
          column: 57
        }
      },
      "144": {
        start: {
          line: 481,
          column: 16
        },
        end: {
          line: 481,
          column: 57
        }
      },
      "145": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 483,
          column: 50
        }
      },
      "146": {
        start: {
          line: 483,
          column: 16
        },
        end: {
          line: 483,
          column: 50
        }
      },
      "147": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 485,
          column: 48
        }
      },
      "148": {
        start: {
          line: 485,
          column: 16
        },
        end: {
          line: 485,
          column: 48
        }
      },
      "149": {
        start: {
          line: 486,
          column: 12
        },
        end: {
          line: 487,
          column: 57
        }
      },
      "150": {
        start: {
          line: 487,
          column: 16
        },
        end: {
          line: 487,
          column: 57
        }
      },
      "151": {
        start: {
          line: 489,
          column: 32
        },
        end: {
          line: 489,
          column: 85
        }
      },
      "152": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 496,
          column: 13
        }
      },
      "153": {
        start: {
          line: 491,
          column: 16
        },
        end: {
          line: 495,
          column: 18
        }
      },
      "154": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 501,
          column: 14
        }
      },
      "155": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 504,
          column: 104
        }
      },
      "156": {
        start: {
          line: 505,
          column: 12
        },
        end: {
          line: 509,
          column: 14
        }
      },
      "157": {
        start: {
          line: 513,
          column: 0
        },
        end: {
          line: 513,
          column: 34
        }
      },
      "158": {
        start: {
          line: 515,
          column: 0
        },
        end: {
          line: 515,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 37
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 81
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 25
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 140
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 31
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 167
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 63
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 196
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 38
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 244
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 56
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 278
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        loc: {
          start: {
            line: 329,
            column: 49
          },
          end: {
            line: 373,
            column: 5
          }
        },
        line: 329
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 377,
            column: 5
          }
        },
        loc: {
          start: {
            line: 377,
            column: 33
          },
          end: {
            line: 400,
            column: 5
          }
        },
        line: 377
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 404,
            column: 4
          },
          end: {
            line: 404,
            column: 5
          }
        },
        loc: {
          start: {
            line: 404,
            column: 49
          },
          end: {
            line: 451,
            column: 5
          }
        },
        line: 404
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 455,
            column: 4
          },
          end: {
            line: 455,
            column: 5
          }
        },
        loc: {
          start: {
            line: 455,
            column: 39
          },
          end: {
            line: 511,
            column: 5
          }
        },
        line: 455
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "5": {
        loc: {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 43,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 43,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "6": {
        loc: {
          start: {
            line: 74,
            column: 23
          },
          end: {
            line: 74,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 74,
            column: 48
          },
          end: {
            line: 74,
            column: 61
          }
        }, {
          start: {
            line: 74,
            column: 64
          },
          end: {
            line: 74,
            column: 79
          }
        }],
        line: 74
      },
      "7": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "8": {
        loc: {
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "9": {
        loc: {
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 101,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 101,
            column: 21
          }
        }, {
          start: {
            line: 101,
            column: 25
          },
          end: {
            line: 101,
            column: 40
          }
        }],
        line: 101
      },
      "10": {
        loc: {
          start: {
            line: 133,
            column: 23
          },
          end: {
            line: 133,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 133,
            column: 48
          },
          end: {
            line: 133,
            column: 61
          }
        }, {
          start: {
            line: 133,
            column: 64
          },
          end: {
            line: 133,
            column: 79
          }
        }],
        line: 133
      },
      "11": {
        loc: {
          start: {
            line: 160,
            column: 23
          },
          end: {
            line: 160,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 160,
            column: 48
          },
          end: {
            line: 160,
            column: 61
          }
        }, {
          start: {
            line: 160,
            column: 64
          },
          end: {
            line: 160,
            column: 79
          }
        }],
        line: 160
      },
      "12": {
        loc: {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 178,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 178,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "13": {
        loc: {
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 172,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 172,
            column: 21
          }
        }, {
          start: {
            line: 172,
            column: 25
          },
          end: {
            line: 172,
            column: 40
          }
        }],
        line: 172
      },
      "14": {
        loc: {
          start: {
            line: 189,
            column: 23
          },
          end: {
            line: 189,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 189,
            column: 48
          },
          end: {
            line: 189,
            column: 61
          }
        }, {
          start: {
            line: 189,
            column: 64
          },
          end: {
            line: 189,
            column: 79
          }
        }],
        line: 189
      },
      "15": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "16": {
        loc: {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 215,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 215,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "17": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 224,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 224,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "18": {
        loc: {
          start: {
            line: 237,
            column: 23
          },
          end: {
            line: 237,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 237,
            column: 48
          },
          end: {
            line: 237,
            column: 61
          }
        }, {
          start: {
            line: 237,
            column: 64
          },
          end: {
            line: 237,
            column: 79
          }
        }],
        line: 237
      },
      "19": {
        loc: {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "20": {
        loc: {
          start: {
            line: 271,
            column: 23
          },
          end: {
            line: 271,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 271,
            column: 48
          },
          end: {
            line: 271,
            column: 61
          }
        }, {
          start: {
            line: 271,
            column: 64
          },
          end: {
            line: 271,
            column: 79
          }
        }],
        line: 271
      },
      "21": {
        loc: {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 288,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 288,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "22": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "23": {
        loc: {
          start: {
            line: 292,
            column: 16
          },
          end: {
            line: 292,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 16
          },
          end: {
            line: 292,
            column: 28
          }
        }, {
          start: {
            line: 292,
            column: 32
          },
          end: {
            line: 292,
            column: 58
          }
        }],
        line: 292
      },
      "24": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 307,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 307,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "25": {
        loc: {
          start: {
            line: 322,
            column: 23
          },
          end: {
            line: 322,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 322,
            column: 48
          },
          end: {
            line: 322,
            column: 61
          }
        }, {
          start: {
            line: 322,
            column: 64
          },
          end: {
            line: 322,
            column: 79
          }
        }],
        line: 322
      },
      "26": {
        loc: {
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 340,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 340,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "27": {
        loc: {
          start: {
            line: 334,
            column: 16
          },
          end: {
            line: 334,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 16
          },
          end: {
            line: 334,
            column: 23
          }
        }, {
          start: {
            line: 334,
            column: 27
          },
          end: {
            line: 334,
            column: 53
          }
        }],
        line: 334
      },
      "28": {
        loc: {
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 349,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 349,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "29": {
        loc: {
          start: {
            line: 352,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 352,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 352
      },
      "30": {
        loc: {
          start: {
            line: 370,
            column: 23
          },
          end: {
            line: 370,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 370,
            column: 48
          },
          end: {
            line: 370,
            column: 61
          }
        }, {
          start: {
            line: 370,
            column: 64
          },
          end: {
            line: 370,
            column: 79
          }
        }],
        line: 370
      },
      "31": {
        loc: {
          start: {
            line: 380,
            column: 12
          },
          end: {
            line: 386,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 12
          },
          end: {
            line: 386,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 380
      },
      "32": {
        loc: {
          start: {
            line: 397,
            column: 23
          },
          end: {
            line: 397,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 397,
            column: 48
          },
          end: {
            line: 397,
            column: 61
          }
        }, {
          start: {
            line: 397,
            column: 64
          },
          end: {
            line: 397,
            column: 79
          }
        }],
        line: 397
      },
      "33": {
        loc: {
          start: {
            line: 407,
            column: 12
          },
          end: {
            line: 413,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 12
          },
          end: {
            line: 413,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "34": {
        loc: {
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 424,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 424,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "35": {
        loc: {
          start: {
            line: 417,
            column: 16
          },
          end: {
            line: 423,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 16
          },
          end: {
            line: 423,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "36": {
        loc: {
          start: {
            line: 417,
            column: 20
          },
          end: {
            line: 417,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 417,
            column: 20
          },
          end: {
            line: 417,
            column: 32
          }
        }, {
          start: {
            line: 417,
            column: 36
          },
          end: {
            line: 417,
            column: 62
          }
        }],
        line: 417
      },
      "37": {
        loc: {
          start: {
            line: 431,
            column: 12
          },
          end: {
            line: 437,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 431,
            column: 12
          },
          end: {
            line: 437,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 431
      },
      "38": {
        loc: {
          start: {
            line: 448,
            column: 23
          },
          end: {
            line: 448,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 448,
            column: 48
          },
          end: {
            line: 448,
            column: 61
          }
        }, {
          start: {
            line: 448,
            column: 64
          },
          end: {
            line: 448,
            column: 79
          }
        }],
        line: 448
      },
      "39": {
        loc: {
          start: {
            line: 458,
            column: 12
          },
          end: {
            line: 464,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 458,
            column: 12
          },
          end: {
            line: 464,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 458
      },
      "40": {
        loc: {
          start: {
            line: 466,
            column: 12
          },
          end: {
            line: 475,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 466,
            column: 12
          },
          end: {
            line: 475,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 466
      },
      "41": {
        loc: {
          start: {
            line: 466,
            column: 16
          },
          end: {
            line: 466,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 466,
            column: 16
          },
          end: {
            line: 466,
            column: 30
          }
        }, {
          start: {
            line: 466,
            column: 34
          },
          end: {
            line: 466,
            column: 63
          }
        }],
        line: 466
      },
      "42": {
        loc: {
          start: {
            line: 468,
            column: 16
          },
          end: {
            line: 474,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 468,
            column: 16
          },
          end: {
            line: 474,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 468
      },
      "43": {
        loc: {
          start: {
            line: 468,
            column: 20
          },
          end: {
            line: 468,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 468,
            column: 20
          },
          end: {
            line: 468,
            column: 32
          }
        }, {
          start: {
            line: 468,
            column: 36
          },
          end: {
            line: 468,
            column: 62
          }
        }],
        line: 468
      },
      "44": {
        loc: {
          start: {
            line: 478,
            column: 12
          },
          end: {
            line: 479,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 12
          },
          end: {
            line: 479,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      },
      "45": {
        loc: {
          start: {
            line: 480,
            column: 12
          },
          end: {
            line: 481,
            column: 57
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 480,
            column: 12
          },
          end: {
            line: 481,
            column: 57
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 480
      },
      "46": {
        loc: {
          start: {
            line: 482,
            column: 12
          },
          end: {
            line: 483,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 482,
            column: 12
          },
          end: {
            line: 483,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 482
      },
      "47": {
        loc: {
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 485,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 12
          },
          end: {
            line: 485,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "48": {
        loc: {
          start: {
            line: 486,
            column: 12
          },
          end: {
            line: 487,
            column: 57
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 486,
            column: 12
          },
          end: {
            line: 487,
            column: 57
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 486
      },
      "49": {
        loc: {
          start: {
            line: 490,
            column: 12
          },
          end: {
            line: 496,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 490,
            column: 12
          },
          end: {
            line: 496,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 490
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/auth/authService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/services/auth/authService.ts"],
      sourcesContent: ["import { userModel, UserWithoutPassword } from '../../models/auth/User';\nimport { generateTokenPair, verifyAccessToken, verifyRefreshToken } from '../../config/jwt';\nimport { redisService } from '../redis/redisService';\nimport logger from '../../utils/logger';\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  user: UserWithoutPassword;\n  accessToken: string;\n  refreshToken: string;\n  expiresIn: number;\n}\n\nexport interface RefreshTokenResponse {\n  accessToken: string;\n  refreshToken: string;\n  expiresIn: number;\n}\n\nexport interface AuthResult {\n  success: boolean;\n  message: string;\n  data?: any;\n  error?: string;\n}\n\nexport class AuthService {\n  /**\n   * Authenticate user login\n   */\n  async login(credentials: LoginCredentials): Promise<AuthResult> {\n    try {\n      const { email, password } = credentials;\n\n      // Find user by email\n      const user = await userModel.findByEmail(email);\n      if (!user) {\n        return {\n          success: false,\n          message: 'Invalid credentials',\n          error: 'INVALID_CREDENTIALS'\n        };\n      }\n\n      // Check if user is active\n      if (!user.is_active) {\n        return {\n          success: false,\n          message: 'Account is deactivated',\n          error: 'ACCOUNT_DEACTIVATED'\n        };\n      }\n\n      // Verify password\n      const isPasswordValid = await userModel.verifyPassword(email, password);\n      if (!isPasswordValid) {\n        return {\n          success: false,\n          message: 'Invalid credentials',\n          error: 'INVALID_CREDENTIALS'\n        };\n      }\n\n      // Generate tokens\n      const { accessToken, refreshToken } = generateTokenPair(\n        user.id,\n        user.email,\n        user.role,\n        1 // tokenVersion - will be implemented with refresh token rotation\n      );\n\n      // Store refresh token in cache (Redis) - gracefully handle Redis failures\n      try {\n        const refreshTokenKey = `refresh_token:${user.id}`;\n        await redisService.setCache(refreshTokenKey, refreshToken, 7 * 24 * 60 * 60); // 7 days\n      } catch (error) {\n        logger.warn('Failed to store refresh token in Redis, continuing with login:', error);\n        // Continue with login even if Redis fails\n      }\n\n      // Remove password from user object\n      const { password_hash: _, ...userWithoutPassword } = user;\n\n      const response: LoginResponse = {\n        user: userWithoutPassword,\n        accessToken,\n        refreshToken,\n        expiresIn: 15 * 60 // 15 minutes in seconds\n      };\n\n      return {\n        success: true,\n        message: 'Login successful',\n        data: response\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Login failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshToken(refreshToken: string): Promise<AuthResult> {\n    try {\n      // Verify refresh token\n      const decoded = verifyRefreshToken(refreshToken);\n      \n      // Check if refresh token exists in cache - gracefully handle Redis failures\n      const refreshTokenKey = `refresh_token:${decoded.userId}`;\n      let cachedToken = null;\n      try {\n        cachedToken = await redisService.getCache(refreshTokenKey);\n      } catch (error) {\n        logger.warn('Failed to get refresh token from Redis, continuing with refresh:', error);\n        // Continue with refresh even if Redis fails\n      }\n      \n      // Only validate cached token if Redis is available and token exists\n      if (cachedToken === null) {\n        logger.warn('No cached refresh token found, but continuing with refresh due to Redis unavailability');\n      }\n\n      // Get user information\n      const user = await userModel.findById(decoded.userId);\n      if (!user || !user.is_active) {\n        return {\n          success: false,\n          message: 'User not found or inactive',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      // Generate new token pair\n      const newTokens = generateTokenPair(\n        user.id,\n        user.email,\n        user.role,\n        decoded.tokenVersion + 1\n      );\n\n      // Update refresh token in cache - gracefully handle Redis failures\n      try {\n        await redisService.setCache(refreshTokenKey, newTokens.refreshToken, 7 * 24 * 60 * 60);\n      } catch (error) {\n        logger.warn('Failed to update refresh token in Redis, continuing with refresh:', error);\n        // Continue with refresh even if Redis fails\n      }\n\n      const response: RefreshTokenResponse = {\n        accessToken: newTokens.accessToken,\n        refreshToken: newTokens.refreshToken,\n        expiresIn: 15 * 60 // 15 minutes in seconds\n      };\n\n      return {\n        success: true,\n        message: 'Token refreshed successfully',\n        data: response\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Token refresh failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Logout user\n   */\n  async logout(userId: string): Promise<AuthResult> {\n    try {\n      // Remove refresh token from cache - gracefully handle Redis failures\n      try {\n        const refreshTokenKey = `refresh_token:${userId}`;\n        await redisService.deleteCache(refreshTokenKey);\n      } catch (error) {\n        logger.warn('Failed to delete refresh token from Redis, continuing with logout:', error);\n        // Continue with logout even if Redis fails\n      }\n\n      return {\n        success: true,\n        message: 'Logout successful'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Logout failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Validate access token\n   */\n  async validateToken(token: string): Promise<AuthResult> {\n    try {\n      const decoded = verifyAccessToken(token);\n      \n      // Get user information\n      const user = await userModel.findById(decoded.userId);\n      if (!user || !user.is_active) {\n        return {\n          success: false,\n          message: 'User not found or inactive',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      return {\n        success: true,\n        message: 'Token valid',\n        data: { user: decoded }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Invalid token',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Change user password\n   */\n  async changePassword(userId: string, currentPassword: string, newPassword: string): Promise<AuthResult> {\n    try {\n      // Get user by ID\n      const user = await userModel.findById(userId);\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not found',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      // Verify current password using email\n      const isCurrentPasswordValid = await userModel.verifyPassword(user.email, currentPassword);\n      if (!isCurrentPasswordValid) {\n        return {\n          success: false,\n          message: 'Current password is incorrect',\n          error: 'INVALID_CURRENT_PASSWORD'\n        };\n      }\n\n      // Update password\n      const success = await userModel.updatePassword(userId, newPassword);\n      if (!success) {\n        return {\n          success: false,\n          message: 'Failed to update password',\n          error: 'PASSWORD_UPDATE_FAILED'\n        };\n      }\n\n      // Invalidate all refresh tokens for this user\n      const refreshTokenKey = `refreshToken:${userId}`;\n      await redisService.deleteCache(refreshTokenKey);\n\n      return {\n        success: true,\n        message: 'Password changed successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Password change failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Request password reset\n   */\n  async requestPasswordReset(email: string): Promise<AuthResult> {\n    try {\n      // Check if user exists\n      const user = await userModel.findByEmailWithoutPassword(email);\n      if (!user) {\n        // Don't reveal if user exists or not for security\n        return {\n          success: true,\n          message: 'If an account with this email exists, a password reset link has been sent'\n        };\n      }\n\n      // Generate reset token (simple implementation - in production, use email service)\n      const resetToken = Math.random().toString(36).substring(2, 15);\n      const resetTokenKey = `reset_token:${user.id}`;\n      \n      // Store reset token in cache (expires in 1 hour)\n      await redisService.setCache(resetTokenKey, resetToken, 60 * 60);\n\n      // TODO: Send email with reset link\n      // For now, just return success\n      return {\n        success: true,\n        message: 'Password reset link sent to your email'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Password reset request failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Reset password with token\n   */\n  async resetPassword(email: string, resetToken: string, newPassword: string): Promise<AuthResult> {\n    try {\n      // Find user\n      const user = await userModel.findByEmailWithoutPassword(email);\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not found',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      // Verify reset token\n      const resetTokenKey = `reset_token:${user.id}`;\n      const cachedToken = await redisService.getCache(resetTokenKey);\n      \n      if (!cachedToken || cachedToken !== resetToken) {\n        return {\n          success: false,\n          message: 'Invalid or expired reset token',\n          error: 'INVALID_RESET_TOKEN'\n        };\n      }\n\n      // Update password\n      const success = await userModel.updatePassword(user.id, newPassword);\n      if (!success) {\n        return {\n          success: false,\n          message: 'Failed to update password',\n          error: 'PASSWORD_UPDATE_FAILED'\n        };\n      }\n\n      // Remove reset token\n      await redisService.deleteCache(resetTokenKey);\n\n      // Invalidate all refresh tokens for this user\n      const refreshTokenKey = `refresh_token:${user.id}`;\n      await redisService.deleteCache(refreshTokenKey);\n\n      return {\n        success: true,\n        message: 'Password reset successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Password reset failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Setup password for department head with token\n   */\n  async setupPassword(setupToken: string, newPassword: string): Promise<AuthResult> {\n    try {\n      // Find user by setup token\n      const setupTokenKey = `setup_token:${setupToken}`;\n      const userId = await redisService.getCache(setupTokenKey);\n      \n      if (!userId || typeof userId !== 'string') {\n        return {\n          success: false,\n          message: 'Invalid or expired setup token',\n          error: 'INVALID_SETUP_TOKEN'\n        };\n      }\n\n      // Find user\n      const user = await userModel.findById(userId);\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not found',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      // Update password\n      const success = await userModel.updatePassword(user.id, newPassword);\n      if (!success) {\n        return {\n          success: false,\n          message: 'Failed to update password',\n          error: 'PASSWORD_UPDATE_FAILED'\n        };\n      }\n\n      // Remove setup token\n      await redisService.deleteCache(setupTokenKey);\n\n      return {\n        success: true,\n        message: 'Password setup successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Password setup failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Get user profile\n   */\n  async getUserProfile(userId: string): Promise<AuthResult> {\n    try {\n      const user = await userModel.findById(userId);\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not found',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      return {\n        success: true,\n        message: 'User profile retrieved successfully',\n        data: { user }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Failed to get user profile',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Update user profile\n   */\n  async updateUserProfile(userId: string, profileData: { firstName: string; lastName: string; email: string }): Promise<AuthResult> {\n    try {\n      const user = await userModel.findById(userId);\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not found',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      // Check if email is already taken by another user\n      if (profileData.email !== user.email) {\n        const existingUser = await userModel.findByEmail(profileData.email);\n        if (existingUser && existingUser.id !== userId) {\n          return {\n            success: false,\n            message: 'Email is already taken',\n            error: 'EMAIL_ALREADY_EXISTS'\n          };\n        }\n      }\n\n      // Update user profile\n      const updatedUser = await userModel.updateUser(userId, {\n        first_name: profileData.firstName,\n        last_name: profileData.lastName,\n        email: profileData.email\n      });\n\n      if (!updatedUser) {\n        return {\n          success: false,\n          message: 'Failed to update profile',\n          error: 'UPDATE_FAILED'\n        };\n      }\n\n      return {\n        success: true,\n        message: 'Profile updated successfully',\n        data: { user: updatedUser }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Failed to update profile',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Update user (HR only)\n   */\n  async updateUser(userId: string, userData: { firstName?: string; lastName?: string; email?: string; role?: string; isActive?: boolean }): Promise<AuthResult> {\n    try {\n      const user = await userModel.findById(userId);\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not found',\n          error: 'USER_NOT_FOUND'\n        };\n      }\n\n      // Check if email is already taken by another user\n      if (userData.email && userData.email !== user.email) {\n        const existingUser = await userModel.findByEmail(userData.email);\n        if (existingUser && existingUser.id !== userId) {\n          return {\n            success: false,\n            message: 'Email is already taken',\n            error: 'EMAIL_ALREADY_EXISTS'\n          };\n        }\n      }\n\n      // Prepare update data\n      const updateData: any = {};\n      if (userData.firstName !== undefined) updateData.first_name = userData.firstName;\n      if (userData.lastName !== undefined) updateData.last_name = userData.lastName;\n      if (userData.email !== undefined) updateData.email = userData.email;\n      if (userData.role !== undefined) updateData.role = userData.role;\n      if (userData.isActive !== undefined) updateData.is_active = userData.isActive;\n\n      // Update user\n      const updatedUser = await userModel.updateUser(userId, updateData);\n\n      if (!updatedUser) {\n        return {\n          success: false,\n          message: 'Failed to update user',\n          error: 'UPDATE_FAILED'\n        };\n      }\n\n      return {\n        success: true,\n        message: 'User updated successfully',\n        data: { user: updatedUser }\n      };\n    } catch (error) {\n      logger.error('Failed to update user', { error: (error as Error).message, userId, userData });\n      return {\n        success: false,\n        message: 'Failed to update user',\n        error: 'INTERNAL_SERVER_ERROR'\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const authService = new AuthService(); "],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c33c73d44d17a8e67553f1c22d309b535b5c1e54"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1xzxq8w4hn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1xzxq8w4hn();
var __importDefault =
/* istanbul ignore next */
(cov_1xzxq8w4hn().s[0]++,
/* istanbul ignore next */
(cov_1xzxq8w4hn().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1xzxq8w4hn().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1xzxq8w4hn().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1xzxq8w4hn().f[0]++;
  cov_1xzxq8w4hn().s[1]++;
  return /* istanbul ignore next */(cov_1xzxq8w4hn().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1xzxq8w4hn().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1xzxq8w4hn().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1xzxq8w4hn().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1xzxq8w4hn().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1xzxq8w4hn().s[3]++;
exports.authService = exports.AuthService = void 0;
const User_1 =
/* istanbul ignore next */
(cov_1xzxq8w4hn().s[4]++, require("../../models/auth/User"));
const jwt_1 =
/* istanbul ignore next */
(cov_1xzxq8w4hn().s[5]++, require("../../config/jwt"));
const redisService_1 =
/* istanbul ignore next */
(cov_1xzxq8w4hn().s[6]++, require("../redis/redisService"));
const logger_1 =
/* istanbul ignore next */
(cov_1xzxq8w4hn().s[7]++, __importDefault(require("../../utils/logger")));
class AuthService {
  /**
   * Authenticate user login
   */
  async login(credentials) {
    /* istanbul ignore next */
    cov_1xzxq8w4hn().f[1]++;
    cov_1xzxq8w4hn().s[8]++;
    try {
      const {
        email,
        password
      } =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[9]++, credentials);
      // Find user by email
      const user =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[10]++, await User_1.userModel.findByEmail(email));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[11]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[3][0]++;
        cov_1xzxq8w4hn().s[12]++;
        return {
          success: false,
          message: 'Invalid credentials',
          error: 'INVALID_CREDENTIALS'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[3][1]++;
      }
      // Check if user is active
      cov_1xzxq8w4hn().s[13]++;
      if (!user.is_active) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[4][0]++;
        cov_1xzxq8w4hn().s[14]++;
        return {
          success: false,
          message: 'Account is deactivated',
          error: 'ACCOUNT_DEACTIVATED'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[4][1]++;
      }
      // Verify password
      const isPasswordValid =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[15]++, await User_1.userModel.verifyPassword(email, password));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[16]++;
      if (!isPasswordValid) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[5][0]++;
        cov_1xzxq8w4hn().s[17]++;
        return {
          success: false,
          message: 'Invalid credentials',
          error: 'INVALID_CREDENTIALS'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[5][1]++;
      }
      // Generate tokens
      const {
        accessToken,
        refreshToken
      } =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[18]++, (0, jwt_1.generateTokenPair)(user.id, user.email, user.role, 1 // tokenVersion - will be implemented with refresh token rotation
      ));
      // Store refresh token in cache (Redis) - gracefully handle Redis failures
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[19]++;
      try {
        const refreshTokenKey =
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().s[20]++, `refresh_token:${user.id}`);
        /* istanbul ignore next */
        cov_1xzxq8w4hn().s[21]++;
        await redisService_1.redisService.setCache(refreshTokenKey, refreshToken, 7 * 24 * 60 * 60); // 7 days
      } catch (error) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().s[22]++;
        logger_1.default.warn('Failed to store refresh token in Redis, continuing with login:', error);
        // Continue with login even if Redis fails
      }
      // Remove password from user object
      const {
        password_hash: _,
        ...userWithoutPassword
      } =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[23]++, user);
      const response =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[24]++, {
        user: userWithoutPassword,
        accessToken,
        refreshToken,
        expiresIn: 15 * 60 // 15 minutes in seconds
      });
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[25]++;
      return {
        success: true,
        message: 'Login successful',
        data: response
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[26]++;
      return {
        success: false,
        message: 'Login failed',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[6][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[6][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Refresh access token
   */
  async refreshToken(refreshToken) {
    /* istanbul ignore next */
    cov_1xzxq8w4hn().f[2]++;
    cov_1xzxq8w4hn().s[27]++;
    try {
      // Verify refresh token
      const decoded =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[28]++, (0, jwt_1.verifyRefreshToken)(refreshToken));
      // Check if refresh token exists in cache - gracefully handle Redis failures
      const refreshTokenKey =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[29]++, `refresh_token:${decoded.userId}`);
      let cachedToken =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[30]++, null);
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[31]++;
      try {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().s[32]++;
        cachedToken = await redisService_1.redisService.getCache(refreshTokenKey);
      } catch (error) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().s[33]++;
        logger_1.default.warn('Failed to get refresh token from Redis, continuing with refresh:', error);
        // Continue with refresh even if Redis fails
      }
      // Only validate cached token if Redis is available and token exists
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[34]++;
      if (cachedToken === null) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[7][0]++;
        cov_1xzxq8w4hn().s[35]++;
        logger_1.default.warn('No cached refresh token found, but continuing with refresh due to Redis unavailability');
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[7][1]++;
      }
      // Get user information
      const user =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[36]++, await User_1.userModel.findById(decoded.userId));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[37]++;
      if (
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().b[9][0]++, !user) ||
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().b[9][1]++, !user.is_active)) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[8][0]++;
        cov_1xzxq8w4hn().s[38]++;
        return {
          success: false,
          message: 'User not found or inactive',
          error: 'USER_NOT_FOUND'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[8][1]++;
      }
      // Generate new token pair
      const newTokens =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[39]++, (0, jwt_1.generateTokenPair)(user.id, user.email, user.role, decoded.tokenVersion + 1));
      // Update refresh token in cache - gracefully handle Redis failures
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[40]++;
      try {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().s[41]++;
        await redisService_1.redisService.setCache(refreshTokenKey, newTokens.refreshToken, 7 * 24 * 60 * 60);
      } catch (error) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().s[42]++;
        logger_1.default.warn('Failed to update refresh token in Redis, continuing with refresh:', error);
        // Continue with refresh even if Redis fails
      }
      const response =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[43]++, {
        accessToken: newTokens.accessToken,
        refreshToken: newTokens.refreshToken,
        expiresIn: 15 * 60 // 15 minutes in seconds
      });
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[44]++;
      return {
        success: true,
        message: 'Token refreshed successfully',
        data: response
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[45]++;
      return {
        success: false,
        message: 'Token refresh failed',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[10][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[10][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Logout user
   */
  async logout(userId) {
    /* istanbul ignore next */
    cov_1xzxq8w4hn().f[3]++;
    cov_1xzxq8w4hn().s[46]++;
    try {
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[47]++;
      // Remove refresh token from cache - gracefully handle Redis failures
      try {
        const refreshTokenKey =
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().s[48]++, `refresh_token:${userId}`);
        /* istanbul ignore next */
        cov_1xzxq8w4hn().s[49]++;
        await redisService_1.redisService.deleteCache(refreshTokenKey);
      } catch (error) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().s[50]++;
        logger_1.default.warn('Failed to delete refresh token from Redis, continuing with logout:', error);
        // Continue with logout even if Redis fails
      }
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[51]++;
      return {
        success: true,
        message: 'Logout successful'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[52]++;
      return {
        success: false,
        message: 'Logout failed',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[11][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[11][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Validate access token
   */
  async validateToken(token) {
    /* istanbul ignore next */
    cov_1xzxq8w4hn().f[4]++;
    cov_1xzxq8w4hn().s[53]++;
    try {
      const decoded =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[54]++, (0, jwt_1.verifyAccessToken)(token));
      // Get user information
      const user =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[55]++, await User_1.userModel.findById(decoded.userId));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[56]++;
      if (
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().b[13][0]++, !user) ||
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().b[13][1]++, !user.is_active)) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[12][0]++;
        cov_1xzxq8w4hn().s[57]++;
        return {
          success: false,
          message: 'User not found or inactive',
          error: 'USER_NOT_FOUND'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[12][1]++;
      }
      cov_1xzxq8w4hn().s[58]++;
      return {
        success: true,
        message: 'Token valid',
        data: {
          user: decoded
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[59]++;
      return {
        success: false,
        message: 'Invalid token',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[14][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[14][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Change user password
   */
  async changePassword(userId, currentPassword, newPassword) {
    /* istanbul ignore next */
    cov_1xzxq8w4hn().f[5]++;
    cov_1xzxq8w4hn().s[60]++;
    try {
      // Get user by ID
      const user =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[61]++, await User_1.userModel.findById(userId));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[62]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[15][0]++;
        cov_1xzxq8w4hn().s[63]++;
        return {
          success: false,
          message: 'User not found',
          error: 'USER_NOT_FOUND'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[15][1]++;
      }
      // Verify current password using email
      const isCurrentPasswordValid =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[64]++, await User_1.userModel.verifyPassword(user.email, currentPassword));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[65]++;
      if (!isCurrentPasswordValid) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[16][0]++;
        cov_1xzxq8w4hn().s[66]++;
        return {
          success: false,
          message: 'Current password is incorrect',
          error: 'INVALID_CURRENT_PASSWORD'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[16][1]++;
      }
      // Update password
      const success =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[67]++, await User_1.userModel.updatePassword(userId, newPassword));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[68]++;
      if (!success) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[17][0]++;
        cov_1xzxq8w4hn().s[69]++;
        return {
          success: false,
          message: 'Failed to update password',
          error: 'PASSWORD_UPDATE_FAILED'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[17][1]++;
      }
      // Invalidate all refresh tokens for this user
      const refreshTokenKey =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[70]++, `refreshToken:${userId}`);
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[71]++;
      await redisService_1.redisService.deleteCache(refreshTokenKey);
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[72]++;
      return {
        success: true,
        message: 'Password changed successfully'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[73]++;
      return {
        success: false,
        message: 'Password change failed',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[18][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[18][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Request password reset
   */
  async requestPasswordReset(email) {
    /* istanbul ignore next */
    cov_1xzxq8w4hn().f[6]++;
    cov_1xzxq8w4hn().s[74]++;
    try {
      // Check if user exists
      const user =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[75]++, await User_1.userModel.findByEmailWithoutPassword(email));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[76]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[19][0]++;
        cov_1xzxq8w4hn().s[77]++;
        // Don't reveal if user exists or not for security
        return {
          success: true,
          message: 'If an account with this email exists, a password reset link has been sent'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[19][1]++;
      }
      // Generate reset token (simple implementation - in production, use email service)
      const resetToken =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[78]++, Math.random().toString(36).substring(2, 15));
      const resetTokenKey =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[79]++, `reset_token:${user.id}`);
      // Store reset token in cache (expires in 1 hour)
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[80]++;
      await redisService_1.redisService.setCache(resetTokenKey, resetToken, 60 * 60);
      // TODO: Send email with reset link
      // For now, just return success
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[81]++;
      return {
        success: true,
        message: 'Password reset link sent to your email'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[82]++;
      return {
        success: false,
        message: 'Password reset request failed',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[20][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[20][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Reset password with token
   */
  async resetPassword(email, resetToken, newPassword) {
    /* istanbul ignore next */
    cov_1xzxq8w4hn().f[7]++;
    cov_1xzxq8w4hn().s[83]++;
    try {
      // Find user
      const user =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[84]++, await User_1.userModel.findByEmailWithoutPassword(email));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[85]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[21][0]++;
        cov_1xzxq8w4hn().s[86]++;
        return {
          success: false,
          message: 'User not found',
          error: 'USER_NOT_FOUND'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[21][1]++;
      }
      // Verify reset token
      const resetTokenKey =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[87]++, `reset_token:${user.id}`);
      const cachedToken =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[88]++, await redisService_1.redisService.getCache(resetTokenKey));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[89]++;
      if (
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().b[23][0]++, !cachedToken) ||
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().b[23][1]++, cachedToken !== resetToken)) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[22][0]++;
        cov_1xzxq8w4hn().s[90]++;
        return {
          success: false,
          message: 'Invalid or expired reset token',
          error: 'INVALID_RESET_TOKEN'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[22][1]++;
      }
      // Update password
      const success =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[91]++, await User_1.userModel.updatePassword(user.id, newPassword));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[92]++;
      if (!success) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[24][0]++;
        cov_1xzxq8w4hn().s[93]++;
        return {
          success: false,
          message: 'Failed to update password',
          error: 'PASSWORD_UPDATE_FAILED'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[24][1]++;
      }
      // Remove reset token
      cov_1xzxq8w4hn().s[94]++;
      await redisService_1.redisService.deleteCache(resetTokenKey);
      // Invalidate all refresh tokens for this user
      const refreshTokenKey =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[95]++, `refresh_token:${user.id}`);
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[96]++;
      await redisService_1.redisService.deleteCache(refreshTokenKey);
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[97]++;
      return {
        success: true,
        message: 'Password reset successfully'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[98]++;
      return {
        success: false,
        message: 'Password reset failed',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[25][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[25][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Setup password for department head with token
   */
  async setupPassword(setupToken, newPassword) {
    /* istanbul ignore next */
    cov_1xzxq8w4hn().f[8]++;
    cov_1xzxq8w4hn().s[99]++;
    try {
      // Find user by setup token
      const setupTokenKey =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[100]++, `setup_token:${setupToken}`);
      const userId =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[101]++, await redisService_1.redisService.getCache(setupTokenKey));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[102]++;
      if (
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().b[27][0]++, !userId) ||
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().b[27][1]++, typeof userId !== 'string')) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[26][0]++;
        cov_1xzxq8w4hn().s[103]++;
        return {
          success: false,
          message: 'Invalid or expired setup token',
          error: 'INVALID_SETUP_TOKEN'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[26][1]++;
      }
      // Find user
      const user =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[104]++, await User_1.userModel.findById(userId));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[105]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[28][0]++;
        cov_1xzxq8w4hn().s[106]++;
        return {
          success: false,
          message: 'User not found',
          error: 'USER_NOT_FOUND'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[28][1]++;
      }
      // Update password
      const success =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[107]++, await User_1.userModel.updatePassword(user.id, newPassword));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[108]++;
      if (!success) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[29][0]++;
        cov_1xzxq8w4hn().s[109]++;
        return {
          success: false,
          message: 'Failed to update password',
          error: 'PASSWORD_UPDATE_FAILED'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[29][1]++;
      }
      // Remove setup token
      cov_1xzxq8w4hn().s[110]++;
      await redisService_1.redisService.deleteCache(setupTokenKey);
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[111]++;
      return {
        success: true,
        message: 'Password setup successfully'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[112]++;
      return {
        success: false,
        message: 'Password setup failed',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[30][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[30][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Get user profile
   */
  async getUserProfile(userId) {
    /* istanbul ignore next */
    cov_1xzxq8w4hn().f[9]++;
    cov_1xzxq8w4hn().s[113]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[114]++, await User_1.userModel.findById(userId));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[115]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[31][0]++;
        cov_1xzxq8w4hn().s[116]++;
        return {
          success: false,
          message: 'User not found',
          error: 'USER_NOT_FOUND'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[31][1]++;
      }
      cov_1xzxq8w4hn().s[117]++;
      return {
        success: true,
        message: 'User profile retrieved successfully',
        data: {
          user
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[118]++;
      return {
        success: false,
        message: 'Failed to get user profile',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[32][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[32][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Update user profile
   */
  async updateUserProfile(userId, profileData) {
    /* istanbul ignore next */
    cov_1xzxq8w4hn().f[10]++;
    cov_1xzxq8w4hn().s[119]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[120]++, await User_1.userModel.findById(userId));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[121]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[33][0]++;
        cov_1xzxq8w4hn().s[122]++;
        return {
          success: false,
          message: 'User not found',
          error: 'USER_NOT_FOUND'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[33][1]++;
      }
      // Check if email is already taken by another user
      cov_1xzxq8w4hn().s[123]++;
      if (profileData.email !== user.email) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[34][0]++;
        const existingUser =
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().s[124]++, await User_1.userModel.findByEmail(profileData.email));
        /* istanbul ignore next */
        cov_1xzxq8w4hn().s[125]++;
        if (
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[36][0]++, existingUser) &&
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[36][1]++, existingUser.id !== userId)) {
          /* istanbul ignore next */
          cov_1xzxq8w4hn().b[35][0]++;
          cov_1xzxq8w4hn().s[126]++;
          return {
            success: false,
            message: 'Email is already taken',
            error: 'EMAIL_ALREADY_EXISTS'
          };
        } else
        /* istanbul ignore next */
        {
          cov_1xzxq8w4hn().b[35][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[34][1]++;
      }
      // Update user profile
      const updatedUser =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[127]++, await User_1.userModel.updateUser(userId, {
        first_name: profileData.firstName,
        last_name: profileData.lastName,
        email: profileData.email
      }));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[128]++;
      if (!updatedUser) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[37][0]++;
        cov_1xzxq8w4hn().s[129]++;
        return {
          success: false,
          message: 'Failed to update profile',
          error: 'UPDATE_FAILED'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[37][1]++;
      }
      cov_1xzxq8w4hn().s[130]++;
      return {
        success: true,
        message: 'Profile updated successfully',
        data: {
          user: updatedUser
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[131]++;
      return {
        success: false,
        message: 'Failed to update profile',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[38][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[38][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Update user (HR only)
   */
  async updateUser(userId, userData) {
    /* istanbul ignore next */
    cov_1xzxq8w4hn().f[11]++;
    cov_1xzxq8w4hn().s[132]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[133]++, await User_1.userModel.findById(userId));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[134]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[39][0]++;
        cov_1xzxq8w4hn().s[135]++;
        return {
          success: false,
          message: 'User not found',
          error: 'USER_NOT_FOUND'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[39][1]++;
      }
      // Check if email is already taken by another user
      cov_1xzxq8w4hn().s[136]++;
      if (
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().b[41][0]++, userData.email) &&
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().b[41][1]++, userData.email !== user.email)) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[40][0]++;
        const existingUser =
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().s[137]++, await User_1.userModel.findByEmail(userData.email));
        /* istanbul ignore next */
        cov_1xzxq8w4hn().s[138]++;
        if (
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[43][0]++, existingUser) &&
        /* istanbul ignore next */
        (cov_1xzxq8w4hn().b[43][1]++, existingUser.id !== userId)) {
          /* istanbul ignore next */
          cov_1xzxq8w4hn().b[42][0]++;
          cov_1xzxq8w4hn().s[139]++;
          return {
            success: false,
            message: 'Email is already taken',
            error: 'EMAIL_ALREADY_EXISTS'
          };
        } else
        /* istanbul ignore next */
        {
          cov_1xzxq8w4hn().b[42][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[40][1]++;
      }
      // Prepare update data
      const updateData =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[140]++, {});
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[141]++;
      if (userData.firstName !== undefined) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[44][0]++;
        cov_1xzxq8w4hn().s[142]++;
        updateData.first_name = userData.firstName;
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[44][1]++;
      }
      cov_1xzxq8w4hn().s[143]++;
      if (userData.lastName !== undefined) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[45][0]++;
        cov_1xzxq8w4hn().s[144]++;
        updateData.last_name = userData.lastName;
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[45][1]++;
      }
      cov_1xzxq8w4hn().s[145]++;
      if (userData.email !== undefined) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[46][0]++;
        cov_1xzxq8w4hn().s[146]++;
        updateData.email = userData.email;
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[46][1]++;
      }
      cov_1xzxq8w4hn().s[147]++;
      if (userData.role !== undefined) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[47][0]++;
        cov_1xzxq8w4hn().s[148]++;
        updateData.role = userData.role;
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[47][1]++;
      }
      cov_1xzxq8w4hn().s[149]++;
      if (userData.isActive !== undefined) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[48][0]++;
        cov_1xzxq8w4hn().s[150]++;
        updateData.is_active = userData.isActive;
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[48][1]++;
      }
      // Update user
      const updatedUser =
      /* istanbul ignore next */
      (cov_1xzxq8w4hn().s[151]++, await User_1.userModel.updateUser(userId, updateData));
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[152]++;
      if (!updatedUser) {
        /* istanbul ignore next */
        cov_1xzxq8w4hn().b[49][0]++;
        cov_1xzxq8w4hn().s[153]++;
        return {
          success: false,
          message: 'Failed to update user',
          error: 'UPDATE_FAILED'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1xzxq8w4hn().b[49][1]++;
      }
      cov_1xzxq8w4hn().s[154]++;
      return {
        success: true,
        message: 'User updated successfully',
        data: {
          user: updatedUser
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[155]++;
      logger_1.default.error('Failed to update user', {
        error: error.message,
        userId,
        userData
      });
      /* istanbul ignore next */
      cov_1xzxq8w4hn().s[156]++;
      return {
        success: false,
        message: 'Failed to update user',
        error: 'INTERNAL_SERVER_ERROR'
      };
    }
  }
}
/* istanbul ignore next */
cov_1xzxq8w4hn().s[157]++;
exports.AuthService = AuthService;
// Export singleton instance
/* istanbul ignore next */
cov_1xzxq8w4hn().s[158]++;
exports.authService = new AuthService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,