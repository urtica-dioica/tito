{"version":3,"names":["cov_1wdv4q3my1","actualCoverage","dashboardService_1","s","require","requestId_1","logger_1","__importDefault","HRDashboardController","getDashboard","_req","res","f","requestId","generateRequestId","dashboardData","hrDashboardService","getDashboardData","json","success","message","data","error","default","status","Error","b","exports","hrDashboardController"],"sources":["/home/kim/tito/server/src/controllers/hr/dashboardController.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { hrDashboardService } from '../../services/hr/dashboardService';\nimport { generateRequestId } from '../../utils/requestId';\nimport logger from '../../utils/logger';\n\nexport class HRDashboardController {\n  /**\n   * Get HR dashboard data\n   */\n  async getDashboard(_req: Request, res: Response): Promise<void> {\n    const requestId = generateRequestId();\n    \n    try {\n      const dashboardData = await hrDashboardService.getDashboardData();\n      \n      res.json({\n        success: true,\n        message: 'HR dashboard data retrieved successfully',\n        data: dashboardData,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting HR dashboard:', { error, requestId });\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve HR dashboard data',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        requestId\n      });\n    }\n  }\n}\n\nexport const hrDashboardController = new HRDashboardController();\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAYQ;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAXR,MAAAE,kBAAA;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAAC,OAAA;AACA,MAAAC,WAAA;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAAC,OAAA;AACA,MAAAE,QAAA;AAAA;AAAA,CAAAN,cAAA,GAAAG,CAAA,OAAAI,eAAA,CAAAH,OAAA;AAEA,MAAaI,qBAAqB;EAChC;;;EAGA,MAAMC,YAAYA,CAACC,IAAa,EAAEC,GAAa;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAC7C,MAAMC,SAAS;IAAA;IAAA,CAAAb,cAAA,GAAAG,CAAA,OAAG,IAAAE,WAAA,CAAAS,iBAAiB,GAAE;IAAC;IAAAd,cAAA,GAAAG,CAAA;IAEtC,IAAI;MACF,MAAMY,aAAa;MAAA;MAAA,CAAAf,cAAA,GAAAG,CAAA,OAAG,MAAMD,kBAAA,CAAAc,kBAAkB,CAACC,gBAAgB,EAAE;MAAC;MAAAjB,cAAA,GAAAG,CAAA;MAElEQ,GAAG,CAACO,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,0CAA0C;QACnDC,IAAI,EAAEN,aAAa;QACnBF;OACD,CAAC;IACJ,CAAC,CAAC,OAAOS,KAAK,EAAE;MAAA;MAAAtB,cAAA,GAAAG,CAAA;MACdG,QAAA,CAAAiB,OAAM,CAACD,KAAK,CAAC,6BAA6B,EAAE;QAAEA,KAAK;QAAET;MAAS,CAAE,CAAC;MAAC;MAAAb,cAAA,GAAAG,CAAA;MAClEQ,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAACN,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,sCAAsC;QAC/CE,KAAK,EAAEA,KAAK,YAAYG,KAAK;QAAA;QAAA,CAAAzB,cAAA,GAAA0B,CAAA,UAAGJ,KAAK,CAACF,OAAO;QAAA;QAAA,CAAApB,cAAA,GAAA0B,CAAA,UAAG,eAAe;QAC/Db;OACD,CAAC;IACJ;EACF;;AACD;AAAAb,cAAA,GAAAG,CAAA;AA1BDwB,OAAA,CAAAnB,qBAAA,GAAAA,qBAAA;AA0BC;AAAAR,cAAA,GAAAG,CAAA;AAEYwB,OAAA,CAAAC,qBAAqB,GAAG,IAAIpB,qBAAqB,EAAE","ignoreList":[]}