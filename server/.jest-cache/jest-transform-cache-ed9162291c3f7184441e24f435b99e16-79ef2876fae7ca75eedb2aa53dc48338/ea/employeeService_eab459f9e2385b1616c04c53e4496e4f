6212f5bd42d76fdb8703bd075f809571
"use strict";

/* istanbul ignore next */
function cov_m996mb16v() {
  var path = "/home/kim/tito/server/src/services/hr/employeeService.ts";
  var hash = "b83ebace9cdaa37a5052aa86f04f7ef45febb7ae";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/hr/employeeService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 33
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 48
        }
      },
      "6": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 9,
          column: 54
        }
      },
      "7": {
        start: {
          line: 10,
          column: 21
        },
        end: {
          line: 10,
          column: 58
        }
      },
      "8": {
        start: {
          line: 11,
          column: 23
        },
        end: {
          line: 11,
          column: 55
        }
      },
      "9": {
        start: {
          line: 12,
          column: 23
        },
        end: {
          line: 12,
          column: 55
        }
      },
      "10": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 63
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 48
        }
      },
      "12": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 60
        }
      },
      "13": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 66
        }
      },
      "14": {
        start: {
          line: 24,
          column: 21
        },
        end: {
          line: 24,
          column: 46
        }
      },
      "15": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 25,
          column: 43
        }
      },
      "16": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "17": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 40
        }
      },
      "18": {
        start: {
          line: 29,
          column: 33
        },
        end: {
          line: 29,
          column: 77
        }
      },
      "19": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 32,
          column: 13
        }
      },
      "20": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 56
        }
      },
      "21": {
        start: {
          line: 34,
          column: 31
        },
        end: {
          line: 34,
          column: 85
        }
      },
      "22": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 37,
          column: 13
        }
      },
      "23": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 56
        }
      },
      "24": {
        start: {
          line: 39,
          column: 29
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "25": {
        start: {
          line: 46,
          column: 25
        },
        end: {
          line: 46,
          column: 66
        }
      },
      "26": {
        start: {
          line: 48,
          column: 33
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "27": {
        start: {
          line: 56,
          column: 29
        },
        end: {
          line: 56,
          column: 82
        }
      },
      "28": {
        start: {
          line: 58,
          column: 31
        },
        end: {
          line: 58,
          column: 120
        }
      },
      "29": {
        start: {
          line: 59,
          column: 34
        },
        end: {
          line: 59,
          column: 61
        }
      },
      "30": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 93
        }
      },
      "31": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 41
        }
      },
      "32": {
        start: {
          line: 64,
          column: 30
        },
        end: {
          line: 64,
          column: 171
        }
      },
      "33": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 70,
          column: 13
        }
      },
      "34": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 69,
          column: 19
        }
      },
      "35": {
        start: {
          line: 72,
          column: 37
        },
        end: {
          line: 72,
          column: 80
        }
      },
      "36": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "37": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 36
        }
      },
      "38": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 43
        }
      },
      "39": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 96
        }
      },
      "40": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 24
        }
      },
      "41": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 29
        }
      },
      "42": {
        start: {
          line: 94,
          column: 22
        },
        end: {
          line: 116,
          column: 5
        }
      },
      "43": {
        start: {
          line: 117,
          column: 23
        },
        end: {
          line: 117,
          column: 62
        }
      },
      "44": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "45": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 50
        }
      },
      "46": {
        start: {
          line: 121,
          column: 25
        },
        end: {
          line: 121,
          column: 39
        }
      },
      "47": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 62
        }
      },
      "48": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 24
        }
      },
      "49": {
        start: {
          line: 130,
          column: 22
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "50": {
        start: {
          line: 153,
          column: 23
        },
        end: {
          line: 153,
          column: 81
        }
      },
      "51": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "52": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 50
        }
      },
      "53": {
        start: {
          line: 157,
          column: 25
        },
        end: {
          line: 157,
          column: 39
        }
      },
      "54": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 62
        }
      },
      "55": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 24
        }
      },
      "56": {
        start: {
          line: 166,
          column: 130
        },
        end: {
          line: 166,
          column: 136
        }
      },
      "57": {
        start: {
          line: 167,
          column: 23
        },
        end: {
          line: 167,
          column: 41
        }
      },
      "58": {
        start: {
          line: 169,
          column: 32
        },
        end: {
          line: 169,
          column: 34
        }
      },
      "59": {
        start: {
          line: 170,
          column: 28
        },
        end: {
          line: 170,
          column: 30
        }
      },
      "60": {
        start: {
          line: 171,
          column: 25
        },
        end: {
          line: 171,
          column: 26
        }
      },
      "61": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "62": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 179,
          column: 10
        }
      },
      "63": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 44
        }
      },
      "64": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 25
        }
      },
      "65": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "66": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 69
        }
      },
      "67": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 43
        }
      },
      "68": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 25
        }
      },
      "69": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "70": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 62
        }
      },
      "71": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 37
        }
      },
      "72": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 25
        }
      },
      "73": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "74": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 71
        }
      },
      "75": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 45
        }
      },
      "76": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 25
        }
      },
      "77": {
        start: {
          line: 198,
          column: 28
        },
        end: {
          line: 198,
          column: 102
        }
      },
      "78": {
        start: {
          line: 200,
          column: 27
        },
        end: {
          line: 206,
          column: 5
        }
      },
      "79": {
        start: {
          line: 207,
          column: 28
        },
        end: {
          line: 207,
          column: 90
        }
      },
      "80": {
        start: {
          line: 208,
          column: 22
        },
        end: {
          line: 208,
          column: 57
        }
      },
      "81": {
        start: {
          line: 210,
          column: 26
        },
        end: {
          line: 234,
          column: 5
        }
      },
      "82": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 40
        }
      },
      "83": {
        start: {
          line: 236,
          column: 23
        },
        end: {
          line: 236,
          column: 84
        }
      },
      "84": {
        start: {
          line: 238,
          column: 26
        },
        end: {
          line: 241,
          column: 11
        }
      },
      "85": {
        start: {
          line: 238,
          column: 55
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "86": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 248,
          column: 10
        }
      },
      "87": {
        start: {
          line: 254,
          column: 21
        },
        end: {
          line: 254,
          column: 46
        }
      },
      "88": {
        start: {
          line: 255,
          column: 23
        },
        end: {
          line: 255,
          column: 43
        }
      },
      "89": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "90": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 40
        }
      },
      "91": {
        start: {
          line: 259,
          column: 36
        },
        end: {
          line: 259,
          column: 78
        }
      },
      "92": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "93": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 54
        }
      },
      "94": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 271,
          column: 13
        }
      },
      "95": {
        start: {
          line: 265,
          column: 39
        },
        end: {
          line: 265,
          column: 41
        }
      },
      "96": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 267,
          column: 63
        }
      },
      "97": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 267,
          column: 63
        }
      },
      "98": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 269,
          column: 61
        }
      },
      "99": {
        start: {
          line: 269,
          column: 20
        },
        end: {
          line: 269,
          column: 61
        }
      },
      "100": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 88
        }
      },
      "101": {
        start: {
          line: 273,
          column: 39
        },
        end: {
          line: 273,
          column: 41
        }
      },
      "102": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 281,
          column: 13
        }
      },
      "103": {
        start: {
          line: 276,
          column: 35
        },
        end: {
          line: 276,
          column: 89
        }
      },
      "104": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 279,
          column: 17
        }
      },
      "105": {
        start: {
          line: 278,
          column: 20
        },
        end: {
          line: 278,
          column: 60
        }
      },
      "106": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 69
        }
      },
      "107": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 283,
          column: 60
        }
      },
      "108": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 60
        }
      },
      "109": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 285,
          column: 73
        }
      },
      "110": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 285,
          column: 73
        }
      },
      "111": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 287,
          column: 61
        }
      },
      "112": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 287,
          column: 61
        }
      },
      "113": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 289,
          column: 65
        }
      },
      "114": {
        start: {
          line: 289,
          column: 16
        },
        end: {
          line: 289,
          column: 65
        }
      },
      "115": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 291,
          column: 56
        }
      },
      "116": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 56
        }
      },
      "117": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 294,
          column: 13
        }
      },
      "118": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 88
        }
      },
      "119": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 41
        }
      },
      "120": {
        start: {
          line: 297,
          column: 36
        },
        end: {
          line: 297,
          column: 96
        }
      },
      "121": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 301,
          column: 15
        }
      },
      "122": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 35
        }
      },
      "123": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 43
        }
      },
      "124": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 108
        }
      },
      "125": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 24
        }
      },
      "126": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 29
        }
      },
      "127": {
        start: {
          line: 317,
          column: 21
        },
        end: {
          line: 317,
          column: 46
        }
      },
      "128": {
        start: {
          line: 318,
          column: 23
        },
        end: {
          line: 318,
          column: 43
        }
      },
      "129": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 343,
          column: 9
        }
      },
      "130": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 40
        }
      },
      "131": {
        start: {
          line: 322,
          column: 29
        },
        end: {
          line: 322,
          column: 71
        }
      },
      "132": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 325,
          column: 13
        }
      },
      "133": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 324,
          column: 54
        }
      },
      "134": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 83
        }
      },
      "135": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 88
        }
      },
      "136": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 41
        }
      },
      "137": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 334,
          column: 15
        }
      },
      "138": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 43
        }
      },
      "139": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 102
        }
      },
      "140": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 24
        }
      },
      "141": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 29
        }
      },
      "142": {
        start: {
          line: 349,
          column: 21
        },
        end: {
          line: 349,
          column: 46
        }
      },
      "143": {
        start: {
          line: 350,
          column: 23
        },
        end: {
          line: 350,
          column: 43
        }
      },
      "144": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "145": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 352,
          column: 40
        }
      },
      "146": {
        start: {
          line: 354,
          column: 29
        },
        end: {
          line: 354,
          column: 71
        }
      },
      "147": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 357,
          column: 13
        }
      },
      "148": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 356,
          column: 54
        }
      },
      "149": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 61
        }
      },
      "150": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 41
        }
      },
      "151": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 370,
          column: 15
        }
      },
      "152": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 43
        }
      },
      "153": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 107
        }
      },
      "154": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 24
        }
      },
      "155": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 29
        }
      },
      "156": {
        start: {
          line: 385,
          column: 22
        },
        end: {
          line: 396,
          column: 5
        }
      },
      "157": {
        start: {
          line: 397,
          column: 26
        },
        end: {
          line: 408,
          column: 5
        }
      },
      "158": {
        start: {
          line: 409,
          column: 42
        },
        end: {
          line: 412,
          column: 10
        }
      },
      "159": {
        start: {
          line: 413,
          column: 22
        },
        end: {
          line: 413,
          column: 41
        }
      },
      "160": {
        start: {
          line: 414,
          column: 38
        },
        end: {
          line: 418,
          column: 11
        }
      },
      "161": {
        start: {
          line: 414,
          column: 66
        },
        end: {
          line: 418,
          column: 9
        }
      },
      "162": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 427,
          column: 10
        }
      },
      "163": {
        start: {
          line: 433,
          column: 22
        },
        end: {
          line: 433,
          column: 86
        }
      },
      "164": {
        start: {
          line: 434,
          column: 23
        },
        end: {
          line: 434,
          column: 25
        }
      },
      "165": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 437,
          column: 9
        }
      },
      "166": {
        start: {
          line: 435,
          column: 21
        },
        end: {
          line: 435,
          column: 22
        }
      },
      "167": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 436,
          column: 79
        }
      },
      "168": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 438,
          column: 24
        }
      },
      "169": {
        start: {
          line: 444,
          column: 24
        },
        end: {
          line: 450,
          column: 9
        }
      },
      "170": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 498,
          column: 9
        }
      },
      "171": {
        start: {
          line: 452,
          column: 21
        },
        end: {
          line: 452,
          column: 22
        }
      },
      "172": {
        start: {
          line: 453,
          column: 33
        },
        end: {
          line: 453,
          column: 43
        }
      },
      "173": {
        start: {
          line: 454,
          column: 30
        },
        end: {
          line: 454,
          column: 35
        }
      },
      "174": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 497,
          column: 13
        }
      },
      "175": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 461,
          column: 17
        }
      },
      "176": {
        start: {
          line: 460,
          column: 20
        },
        end: {
          line: 460,
          column: 63
        }
      },
      "177": {
        start: {
          line: 463,
          column: 35
        },
        end: {
          line: 463,
          column: 63
        }
      },
      "178": {
        start: {
          line: 464,
          column: 16
        },
        end: {
          line: 466,
          column: 17
        }
      },
      "179": {
        start: {
          line: 465,
          column: 20
        },
        end: {
          line: 465,
          column: 60
        }
      },
      "180": {
        start: {
          line: 468,
          column: 16
        },
        end: {
          line: 470,
          column: 17
        }
      },
      "181": {
        start: {
          line: 469,
          column: 20
        },
        end: {
          line: 469,
          column: 74
        }
      },
      "182": {
        start: {
          line: 472,
          column: 16
        },
        end: {
          line: 474,
          column: 17
        }
      },
      "183": {
        start: {
          line: 473,
          column: 20
        },
        end: {
          line: 473,
          column: 101
        }
      },
      "184": {
        start: {
          line: 476,
          column: 33
        },
        end: {
          line: 476,
          column: 64
        }
      },
      "185": {
        start: {
          line: 477,
          column: 16
        },
        end: {
          line: 479,
          column: 17
        }
      },
      "186": {
        start: {
          line: 478,
          column: 20
        },
        end: {
          line: 478,
          column: 64
        }
      },
      "187": {
        start: {
          line: 481,
          column: 33
        },
        end: {
          line: 481,
          column: 72
        }
      },
      "188": {
        start: {
          line: 482,
          column: 16
        },
        end: {
          line: 482,
          column: 47
        }
      },
      "189": {
        start: {
          line: 483,
          column: 16
        },
        end: {
          line: 483,
          column: 39
        }
      },
      "190": {
        start: {
          line: 486,
          column: 37
        },
        end: {
          line: 486,
          column: 102
        }
      },
      "191": {
        start: {
          line: 487,
          column: 16
        },
        end: {
          line: 491,
          column: 19
        }
      },
      "192": {
        start: {
          line: 492,
          column: 16
        },
        end: {
          line: 492,
          column: 37
        }
      },
      "193": {
        start: {
          line: 493,
          column: 16
        },
        end: {
          line: 496,
          column: 19
        }
      },
      "194": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 499,
          column: 132
        }
      },
      "195": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 500,
          column: 23
        }
      },
      "196": {
        start: {
          line: 503,
          column: 0
        },
        end: {
          line: 503,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 31
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 60
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 93
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 42
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 129
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 37
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 165
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 238,
            column: 42
          },
          end: {
            line: 238,
            column: 43
          }
        },
        loc: {
          start: {
            line: 238,
            column: 55
          },
          end: {
            line: 241,
            column: 9
          }
        },
        line: 238
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 253,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        },
        loc: {
          start: {
            line: 253,
            column: 43
          },
          end: {
            line: 312,
            column: 5
          }
        },
        line: 253
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 316,
            column: 4
          },
          end: {
            line: 316,
            column: 5
          }
        },
        loc: {
          start: {
            line: 316,
            column: 37
          },
          end: {
            line: 344,
            column: 5
          }
        },
        line: 316
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 348,
            column: 4
          },
          end: {
            line: 348,
            column: 5
          }
        },
        loc: {
          start: {
            line: 348,
            column: 41
          },
          end: {
            line: 380,
            column: 5
          }
        },
        line: 348
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 384,
            column: 4
          },
          end: {
            line: 384,
            column: 5
          }
        },
        loc: {
          start: {
            line: 384,
            column: 29
          },
          end: {
            line: 428,
            column: 5
          }
        },
        line: 384
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 414,
            column: 58
          },
          end: {
            line: 414,
            column: 59
          }
        },
        loc: {
          start: {
            line: 414,
            column: 66
          },
          end: {
            line: 418,
            column: 9
          }
        },
        line: 414
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 432,
            column: 4
          },
          end: {
            line: 432,
            column: 5
          }
        },
        loc: {
          start: {
            line: 432,
            column: 32
          },
          end: {
            line: 439,
            column: 5
          }
        },
        line: 432
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 443,
            column: 4
          },
          end: {
            line: 443,
            column: 5
          }
        },
        loc: {
          start: {
            line: 443,
            column: 39
          },
          end: {
            line: 501,
            column: 5
          }
        },
        line: 443
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 41,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 41,
            column: 39
          }
        }, {
          start: {
            line: 41,
            column: 43
          },
          end: {
            line: 41,
            column: 75
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "7": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "8": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "9": {
        loc: {
          start: {
            line: 165,
            column: 24
          },
          end: {
            line: 165,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 165,
            column: 33
          },
          end: {
            line: 165,
            column: 35
          }
        }],
        line: 165
      },
      "10": {
        loc: {
          start: {
            line: 166,
            column: 16
          },
          end: {
            line: 166,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 166,
            column: 23
          },
          end: {
            line: 166,
            column: 24
          }
        }],
        line: 166
      },
      "11": {
        loc: {
          start: {
            line: 166,
            column: 26
          },
          end: {
            line: 166,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 166,
            column: 34
          },
          end: {
            line: 166,
            column: 36
          }
        }],
        line: 166
      },
      "12": {
        loc: {
          start: {
            line: 166,
            column: 84
          },
          end: {
            line: 166,
            column: 105
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 166,
            column: 93
          },
          end: {
            line: 166,
            column: 105
          }
        }],
        line: 166
      },
      "13": {
        loc: {
          start: {
            line: 166,
            column: 107
          },
          end: {
            line: 166,
            column: 125
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 166,
            column: 119
          },
          end: {
            line: 166,
            column: 125
          }
        }],
        line: 166
      },
      "14": {
        loc: {
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "15": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "16": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "17": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "18": {
        loc: {
          start: {
            line: 198,
            column: 28
          },
          end: {
            line: 198,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 198,
            column: 57
          },
          end: {
            line: 198,
            column: 97
          }
        }, {
          start: {
            line: 198,
            column: 100
          },
          end: {
            line: 198,
            column: 102
          }
        }],
        line: 198
      },
      "19": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "20": {
        loc: {
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 271,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 271,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "21": {
        loc: {
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 264,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 264,
            column: 30
          }
        }, {
          start: {
            line: 264,
            column: 34
          },
          end: {
            line: 264,
            column: 47
          }
        }],
        line: 264
      },
      "22": {
        loc: {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 267,
            column: 63
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 267,
            column: 63
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "23": {
        loc: {
          start: {
            line: 268,
            column: 16
          },
          end: {
            line: 269,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 16
          },
          end: {
            line: 269,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "24": {
        loc: {
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "25": {
        loc: {
          start: {
            line: 277,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "26": {
        loc: {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 283,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 283,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "27": {
        loc: {
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 285,
            column: 73
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 285,
            column: 73
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "28": {
        loc: {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 287,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 287,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "29": {
        loc: {
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 289,
            column: 65
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 289,
            column: 65
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "30": {
        loc: {
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 291,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 291,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "31": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 294,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 294,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "32": {
        loc: {
          start: {
            line: 323,
            column: 12
          },
          end: {
            line: 325,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 12
          },
          end: {
            line: 325,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "33": {
        loc: {
          start: {
            line: 355,
            column: 12
          },
          end: {
            line: 357,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 12
          },
          end: {
            line: 357,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "34": {
        loc: {
          start: {
            line: 415,
            column: 26
          },
          end: {
            line: 415,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 415,
            column: 26
          },
          end: {
            line: 415,
            column: 43
          }
        }, {
          start: {
            line: 415,
            column: 47
          },
          end: {
            line: 415,
            column: 49
          }
        }],
        line: 415
      },
      "35": {
        loc: {
          start: {
            line: 425,
            column: 27
          },
          end: {
            line: 425,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 425,
            column: 27
          },
          end: {
            line: 425,
            column: 55
          }
        }, {
          start: {
            line: 425,
            column: 59
          },
          end: {
            line: 425,
            column: 60
          }
        }],
        line: 425
      },
      "36": {
        loc: {
          start: {
            line: 457,
            column: 16
          },
          end: {
            line: 461,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 16
          },
          end: {
            line: 461,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 457
      },
      "37": {
        loc: {
          start: {
            line: 457,
            column: 20
          },
          end: {
            line: 459,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 457,
            column: 20
          },
          end: {
            line: 457,
            column: 39
          }
        }, {
          start: {
            line: 457,
            column: 43
          },
          end: {
            line: 457,
            column: 66
          }
        }, {
          start: {
            line: 457,
            column: 70
          },
          end: {
            line: 457,
            column: 92
          }
        }, {
          start: {
            line: 458,
            column: 20
          },
          end: {
            line: 458,
            column: 46
          }
        }, {
          start: {
            line: 458,
            column: 50
          },
          end: {
            line: 458,
            column: 72
          }
        }, {
          start: {
            line: 458,
            column: 76
          },
          end: {
            line: 458,
            column: 98
          }
        }, {
          start: {
            line: 459,
            column: 20
          },
          end: {
            line: 459,
            column: 44
          }
        }],
        line: 457
      },
      "38": {
        loc: {
          start: {
            line: 464,
            column: 16
          },
          end: {
            line: 466,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 464,
            column: 16
          },
          end: {
            line: 466,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 464
      },
      "39": {
        loc: {
          start: {
            line: 468,
            column: 16
          },
          end: {
            line: 470,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 468,
            column: 16
          },
          end: {
            line: 470,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 468
      },
      "40": {
        loc: {
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 474,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 474,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "41": {
        loc: {
          start: {
            line: 477,
            column: 16
          },
          end: {
            line: 479,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 477,
            column: 16
          },
          end: {
            line: 479,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 477
      },
      "42": {
        loc: {
          start: {
            line: 486,
            column: 37
          },
          end: {
            line: 486,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 486,
            column: 62
          },
          end: {
            line: 486,
            column: 75
          }
        }, {
          start: {
            line: 486,
            column: 78
          },
          end: {
            line: 486,
            column: 102
          }
        }],
        line: 486
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0],
      "11": [0],
      "12": [0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0, 0, 0, 0, 0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/hr/employeeService.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/services/hr/employeeService.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\nimport { UserModel } from '../../models/auth/User';\nimport { EmployeeModel } from '../../models/hr/Employee';\nimport { DepartmentModel } from '../../models/hr/Department';\nimport { emailService } from '../email/emailService';\nimport { redisService } from '../redis/redisService';\nimport logger from '../../utils/logger';\n\nexport interface CreateEmployeeData {\n  email: string;\n  firstName: string;\n  lastName: string;\n  departmentId: string;\n  position: string;\n  employmentType: 'regular' | 'contractual' | 'jo';\n  hireDate: Date;\n  baseSalary: number;\n  password?: string;\n}\n\nexport interface UpdateEmployeeData {\n  firstName?: string;\n  lastName?: string;\n  departmentId?: string;\n  position?: string;\n  employmentType?: 'regular' | 'contractual' | 'jo';\n  hireDate?: string;\n  baseSalary?: number;\n  status?: 'active' | 'inactive' | 'terminated' | 'on_leave';\n}\n\nexport interface EmployeeWithUser {\n  id: string;\n  userId: string;\n  employeeId: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  departmentId: string | null;\n  departmentName: string | null;\n  position: string;\n  employmentType: string;\n  hireDate: Date;\n  baseSalary: number;\n  status: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface EmployeeListParams {\n  page?: number | undefined;\n  limit?: number | undefined;\n  search?: string | undefined;\n  departmentId?: string | undefined;\n  status?: string | undefined;\n  employmentType?: string | undefined;\n  sortBy?: string | undefined;\n  sortOrder?: 'asc' | 'desc' | undefined;\n}\n\nexport class EmployeeService {\n  private userModel: UserModel;\n  private employeeModel: EmployeeModel;\n  private departmentModel: DepartmentModel;\n  constructor() {\n    this.userModel = new UserModel();\n    this.employeeModel = new EmployeeModel();\n    this.departmentModel = new DepartmentModel();\n  }\n\n  /**\n   * Create a new employee with user account\n   */\n  async createEmployee(data: CreateEmployeeData): Promise<EmployeeWithUser> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Check if email already exists\n      const existingUser = await this.userModel.findByEmail(data.email);\n      if (existingUser) {\n        throw new Error('Email already exists');\n      }\n\n      // Verify department exists\n      const department = await this.departmentModel.findById(data.departmentId);\n      if (!department) {\n        throw new Error('Department not found');\n      }\n\n      // Create user account\n      const userData = {\n        email: data.email,\n        password: data.password || this.generateTemporaryPassword(),\n        first_name: data.firstName,\n        last_name: data.lastName,\n        role: 'employee' as const\n      };\n\n      const user = await this.userModel.createUser(userData);\n\n      // Create employee record\n      const employeeData = {\n        user_id: user.id,\n        department_id: data.departmentId,\n        position: data.position,\n        employment_type: data.employmentType,\n        hire_date: data.hireDate,\n        base_salary: data.baseSalary\n      };\n\n      const employee = await this.employeeModel.createEmployee(employeeData);\n\n      // Generate password setup token\n      const setupToken = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n      const setupTokenKey = `setup_token:${setupToken}`;\n      \n      // Store setup token in cache with user ID as value (expires in 24 hours)\n      await redisService.setCache(setupTokenKey, user.id, 24 * 60 * 60);\n\n      await client.query('COMMIT');\n\n      // Send password setup email\n      const emailSent = await emailService.sendEmployeePasswordSetupEmail(\n        data.email,\n        data.firstName,\n        data.lastName,\n        employee.employee_id,\n        setupToken\n      );\n\n      if (!emailSent) {\n        logger.warn('Failed to send password setup email', {\n          employeeId: employee.id,\n          email: data.email\n        });\n      }\n\n      // Get complete employee data with user info\n      const completeEmployee = await this.getEmployeeWithUser(employee.id);\n\n      logger.info(`Employee created successfully: ${employee.employee_id}`, {\n        employeeId: employee.id,\n        userId: user.id,\n        email: data.email,\n        emailSent\n      });\n\n      return completeEmployee;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to create employee', { error: (error as Error).message, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get employee with user information using a specific client\n   */\n  private async getEmployeeWithUserWithClient(client: any, employeeId: string): Promise<EmployeeWithUser> {\n    const query = `\n      SELECT \n        e.id,\n        e.user_id as \"userId\",\n        e.employee_id as \"employeeId\",\n        u.email,\n        u.first_name as \"firstName\",\n        u.last_name as \"lastName\",\n        e.department_id as \"departmentId\",\n        d.name as \"departmentName\",\n        e.position,\n        e.employment_type as \"employmentType\",\n        e.hire_date as \"hireDate\",\n        e.base_salary as \"baseSalary\",\n        e.status,\n        u.is_active as \"isActive\",\n        e.created_at as \"createdAt\",\n        e.updated_at as \"updatedAt\"\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.id = $1\n    `;\n\n    const result = await client.query(query, [employeeId]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('Employee not found');\n    }\n\n    const employee = result.rows[0];\n    // Convert numeric fields to numbers\n    employee.baseSalary = parseFloat(employee.baseSalary);\n    \n    return employee;\n  }\n\n  /**\n   * Get employee with user information\n   */\n  async getEmployeeWithUser(employeeId: string): Promise<EmployeeWithUser> {\n    const query = `\n      SELECT \n        e.id,\n        e.user_id as \"userId\",\n        e.employee_id as \"employeeId\",\n        u.email,\n        u.first_name as \"firstName\",\n        u.last_name as \"lastName\",\n        e.department_id as \"departmentId\",\n        d.name as \"departmentName\",\n        e.position,\n        e.employment_type as \"employmentType\",\n        e.hire_date as \"hireDate\",\n        e.base_salary as \"baseSalary\",\n        e.status,\n        u.is_active as \"isActive\",\n        e.created_at as \"createdAt\",\n        e.updated_at as \"updatedAt\"\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.id = $1\n    `;\n\n    const result = await getPool().query(query, [employeeId]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('Employee not found');\n    }\n\n    const employee = result.rows[0];\n    // Convert numeric fields to numbers\n    employee.baseSalary = parseFloat(employee.baseSalary);\n    \n    return employee;\n  }\n\n  /**\n   * List employees with filtering and pagination\n   */\n  async listEmployees(params: EmployeeListParams = {}): Promise<{\n    employees: EmployeeWithUser[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      search,\n      departmentId,\n      status,\n      employmentType,\n      sortBy = 'created_at',\n      sortOrder = 'desc'\n    } = params;\n\n    const offset = (page - 1) * limit;\n\n    // Build WHERE clause\n    const whereConditions: string[] = [];\n    const queryParams: any[] = [];\n    let paramIndex = 1;\n\n    if (search) {\n      whereConditions.push(`(\n        u.first_name ILIKE $${paramIndex} OR \n        u.last_name ILIKE $${paramIndex} OR \n        u.email ILIKE $${paramIndex} OR \n        e.employee_id ILIKE $${paramIndex} OR \n        e.position ILIKE $${paramIndex}\n      )`);\n      queryParams.push(`%${search}%`);\n      paramIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`e.department_id = $${paramIndex}`);\n      queryParams.push(departmentId);\n      paramIndex++;\n    }\n\n    if (status) {\n      whereConditions.push(`e.status = $${paramIndex}`);\n      queryParams.push(status);\n      paramIndex++;\n    }\n\n    if (employmentType) {\n      whereConditions.push(`e.employment_type = $${paramIndex}`);\n      queryParams.push(employmentType);\n      paramIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n    `;\n\n    const countResult = await getPool().query(countQuery, queryParams);\n    const total = parseInt(countResult.rows[0].total);\n\n    // Data query\n    const dataQuery = `\n      SELECT \n        e.id,\n        e.user_id as \"userId\",\n        e.employee_id as \"employeeId\",\n        u.email,\n        u.first_name as \"firstName\",\n        u.last_name as \"lastName\",\n        e.department_id as \"departmentId\",\n        d.name as \"departmentName\",\n        e.position,\n        e.employment_type as \"employmentType\",\n        e.hire_date as \"hireDate\",\n        e.base_salary as \"baseSalary\",\n        e.status,\n        u.is_active as \"isActive\",\n        e.created_at as \"createdAt\",\n        e.updated_at as \"updatedAt\"\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n      ORDER BY e.${sortBy} ${sortOrder.toUpperCase()}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    queryParams.push(limit, offset);\n    const result = await getPool().query(dataQuery, queryParams);\n\n    // Convert numeric fields to numbers for each employee\n    const employees = result.rows.map(employee => ({\n      ...employee,\n      baseSalary: parseFloat(employee.baseSalary)\n    }));\n\n    return {\n      employees,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  /**\n   * Update employee information\n   */\n  async updateEmployee(employeeId: string, data: UpdateEmployeeData): Promise<EmployeeWithUser> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get current employee\n      const currentEmployee = await this.getEmployeeWithUser(employeeId);\n      if (!currentEmployee) {\n        throw new Error('Employee not found');\n      }\n\n      // Update user information if provided\n      if (data.firstName || data.lastName) {\n        const userUpdateData: any = {};\n        if (data.firstName) userUpdateData.first_name = data.firstName;\n        if (data.lastName) userUpdateData.last_name = data.lastName;\n\n        await this.userModel.updateUser(currentEmployee.userId, userUpdateData);\n      }\n\n      // Update employee information\n      const employeeUpdateData: any = {};\n      if (data.departmentId) {\n        // Verify department exists\n        const department = await this.departmentModel.findById(data.departmentId);\n        if (!department) {\n          throw new Error('Department not found');\n        }\n        employeeUpdateData.department_id = data.departmentId;\n      }\n      if (data.position) employeeUpdateData.position = data.position;\n      if (data.employmentType) employeeUpdateData.employment_type = data.employmentType;\n      if (data.hireDate) employeeUpdateData.hire_date = data.hireDate;\n      if (data.baseSalary !== undefined) employeeUpdateData.base_salary = data.baseSalary;\n      if (data.status) employeeUpdateData.status = data.status;\n\n      if (Object.keys(employeeUpdateData).length > 0) {\n        await this.employeeModel.updateEmployee(employeeId, employeeUpdateData);\n      }\n\n      await client.query('COMMIT');\n\n      // Get updated employee data using the same client to ensure we see the committed changes\n      const updatedEmployee = await this.getEmployeeWithUserWithClient(client, employeeId);\n\n      logger.info(`Employee updated successfully: ${currentEmployee.employeeId}`, {\n        employeeId,\n        updates: { ...data }\n      });\n\n      return updatedEmployee;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to update employee', { error: (error as Error).message, employeeId, data });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Delete employee (soft delete by deactivating user)\n   */\n  async deleteEmployee(employeeId: string): Promise<void> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get employee\n      const employee = await this.getEmployeeWithUser(employeeId);\n      if (!employee) {\n        throw new Error('Employee not found');\n      }\n\n      // Deactivate user account\n      await this.userModel.updateUser(employee.userId, { is_active: false });\n\n      // Update employee status to inactive\n      await this.employeeModel.updateEmployee(employeeId, { status: 'inactive' });\n\n      await client.query('COMMIT');\n\n      logger.info(`Employee deleted successfully: ${employee.employeeId}`, {\n        employeeId,\n        userId: employee.userId\n      });\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to delete employee', { error: (error as Error).message, employeeId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Hard delete employee (permanently remove from database)\n   */\n  async hardDeleteEmployee(employeeId: string): Promise<void> {\n    const pool = getPool();\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get employee\n      const employee = await this.getEmployeeWithUser(employeeId);\n      if (!employee) {\n        throw new Error('Employee not found');\n      }\n\n      // Check if employee has any related records that would prevent deletion\n      // For now, we'll allow hard delete but this could be extended to check for:\n      // - Active ID cards\n      // - Time corrections\n      // - Leave requests\n      // - Other related records\n\n      // Hard delete user account first (this will cascade delete the employee due to FK constraint)\n      await this.userModel.deleteUser(employee.userId);\n\n      await client.query('COMMIT');\n\n      logger.info(`Employee hard deleted successfully: ${employee.employeeId}`, {\n        employeeId,\n        userId: employee.userId\n      });\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Failed to hard delete employee', { error: (error as Error).message, employeeId });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get employee statistics\n   */\n  async getEmployeeStats(): Promise<{\n    totalEmployees: number;\n    activeEmployees: number;\n    inactiveEmployees: number;\n    terminatedEmployees: number;\n    onLeaveEmployees: number;\n    averageSalary: number;\n    employeesByDepartment: Array<{\n      departmentId: string;\n      departmentName: string;\n      count: number;\n    }>;\n  }> {\n    const query = `\n      SELECT \n        COUNT(*) as total,\n        COUNT(*) FILTER (WHERE e.status = 'active') as active,\n        COUNT(*) FILTER (WHERE e.status = 'inactive') as inactive,\n        COUNT(*) FILTER (WHERE e.status = 'terminated') as terminated,\n        COUNT(*) FILTER (WHERE e.status = 'on_leave') as on_leave,\n        AVG(e.base_salary) as avg_salary\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      WHERE u.is_active = true\n    `;\n\n    const deptQuery = `\n      SELECT \n        d.id as department_id,\n        COALESCE(d.name, 'Unassigned') as department_name,\n        COUNT(*) as count\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE u.is_active = true AND e.status = 'active'\n      GROUP BY d.id, d.name\n      ORDER BY count DESC\n    `;\n\n    const [statsResult, deptResult] = await Promise.all([\n      getPool().query(query),\n      getPool().query(deptQuery)\n    ]);\n\n    const stats = statsResult.rows[0];\n    const employeesByDepartment = deptResult.rows.map(row => ({\n      departmentId: row.department_id || '',\n      departmentName: row.department_name,\n      count: parseInt(row.count)\n    }));\n\n    return {\n      totalEmployees: parseInt(stats.total),\n      activeEmployees: parseInt(stats.active),\n      inactiveEmployees: parseInt(stats.inactive),\n      terminatedEmployees: parseInt(stats.terminated),\n      onLeaveEmployees: parseInt(stats.on_leave),\n      averageSalary: parseFloat(stats.avg_salary) || 0,\n      employeesByDepartment\n    };\n  }\n\n  /**\n   * Generate temporary password for new employees\n   */\n  private generateTemporaryPassword(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let password = '';\n    for (let i = 0; i < 8; i++) {\n      password += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return password;\n  }\n\n  /**\n   * Create multiple employees from CSV data\n   */\n  async createBulkEmployees(csvData: CreateEmployeeData[]): Promise<{\n    success: EmployeeWithUser[];\n    errors: Array<{ row: number; data: CreateEmployeeData; error: string }>;\n    totalProcessed: number;\n    successCount: number;\n    errorCount: number;\n  }> {\n    const results = {\n      success: [] as EmployeeWithUser[],\n      errors: [] as Array<{ row: number; data: CreateEmployeeData; error: string }>,\n      totalProcessed: csvData.length,\n      successCount: 0,\n      errorCount: 0\n    };\n\n    // Process each employee sequentially to handle individual errors\n    for (let i = 0; i < csvData.length; i++) {\n      const employeeData = csvData[i];\n      const rowNumber = i + 1; // 1-based row numbering for user feedback\n\n      try {\n        // Validate required fields\n        if (!employeeData.email || !employeeData.firstName || !employeeData.lastName || \n            !employeeData.departmentId || !employeeData.position || !employeeData.hireDate || \n            !employeeData.baseSalary) {\n          throw new Error('Missing required fields');\n        }\n\n        // Validate email format\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(employeeData.email)) {\n          throw new Error('Invalid email format');\n        }\n\n        // Validate salary is positive\n        if (employeeData.baseSalary <= 0) {\n          throw new Error('Base salary must be greater than 0');\n        }\n\n        // Validate employment type\n        if (!['regular', 'contractual', 'jo'].includes(employeeData.employmentType)) {\n          throw new Error('Invalid employment type. Must be: regular, contractual, or jo');\n        }\n\n        // Validate hire date\n        const hireDate = new Date(employeeData.hireDate);\n        if (isNaN(hireDate.getTime())) {\n          throw new Error('Invalid hire date format');\n        }\n\n        // Create the employee using existing logic\n        const employee = await this.createEmployee(employeeData);\n        results.success.push(employee);\n        results.successCount++;\n\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n        results.errors.push({\n          row: rowNumber,\n          data: employeeData,\n          error: errorMessage\n        });\n        results.errorCount++;\n        \n        logger.error(`Bulk employee creation failed for row ${rowNumber}:`, {\n          error: errorMessage,\n          data: employeeData\n        });\n      }\n    }\n\n    logger.info(`Bulk employee creation completed: ${results.successCount} successful, ${results.errorCount} failed`);\n    return results;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b83ebace9cdaa37a5052aa86f04f7ef45febb7ae"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_m996mb16v = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_m996mb16v();
var __importDefault =
/* istanbul ignore next */
(cov_m996mb16v().s[0]++,
/* istanbul ignore next */
(cov_m996mb16v().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_m996mb16v().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_m996mb16v().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_m996mb16v().f[0]++;
  cov_m996mb16v().s[1]++;
  return /* istanbul ignore next */(cov_m996mb16v().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_m996mb16v().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_m996mb16v().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_m996mb16v().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_m996mb16v().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_m996mb16v().s[3]++;
exports.EmployeeService = void 0;
const database_1 =
/* istanbul ignore next */
(cov_m996mb16v().s[4]++, require("../../config/database"));
const User_1 =
/* istanbul ignore next */
(cov_m996mb16v().s[5]++, require("../../models/auth/User"));
const Employee_1 =
/* istanbul ignore next */
(cov_m996mb16v().s[6]++, require("../../models/hr/Employee"));
const Department_1 =
/* istanbul ignore next */
(cov_m996mb16v().s[7]++, require("../../models/hr/Department"));
const emailService_1 =
/* istanbul ignore next */
(cov_m996mb16v().s[8]++, require("../email/emailService"));
const redisService_1 =
/* istanbul ignore next */
(cov_m996mb16v().s[9]++, require("../redis/redisService"));
const logger_1 =
/* istanbul ignore next */
(cov_m996mb16v().s[10]++, __importDefault(require("../../utils/logger")));
class EmployeeService {
  constructor() {
    /* istanbul ignore next */
    cov_m996mb16v().f[1]++;
    cov_m996mb16v().s[11]++;
    this.userModel = new User_1.UserModel();
    /* istanbul ignore next */
    cov_m996mb16v().s[12]++;
    this.employeeModel = new Employee_1.EmployeeModel();
    /* istanbul ignore next */
    cov_m996mb16v().s[13]++;
    this.departmentModel = new Department_1.DepartmentModel();
  }
  /**
   * Create a new employee with user account
   */
  async createEmployee(data) {
    /* istanbul ignore next */
    cov_m996mb16v().f[2]++;
    const pool =
    /* istanbul ignore next */
    (cov_m996mb16v().s[14]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_m996mb16v().s[15]++, await pool.connect());
    /* istanbul ignore next */
    cov_m996mb16v().s[16]++;
    try {
      /* istanbul ignore next */
      cov_m996mb16v().s[17]++;
      await client.query('BEGIN');
      // Check if email already exists
      const existingUser =
      /* istanbul ignore next */
      (cov_m996mb16v().s[18]++, await this.userModel.findByEmail(data.email));
      /* istanbul ignore next */
      cov_m996mb16v().s[19]++;
      if (existingUser) {
        /* istanbul ignore next */
        cov_m996mb16v().b[3][0]++;
        cov_m996mb16v().s[20]++;
        throw new Error('Email already exists');
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[3][1]++;
      }
      // Verify department exists
      const department =
      /* istanbul ignore next */
      (cov_m996mb16v().s[21]++, await this.departmentModel.findById(data.departmentId));
      /* istanbul ignore next */
      cov_m996mb16v().s[22]++;
      if (!department) {
        /* istanbul ignore next */
        cov_m996mb16v().b[4][0]++;
        cov_m996mb16v().s[23]++;
        throw new Error('Department not found');
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[4][1]++;
      }
      // Create user account
      const userData =
      /* istanbul ignore next */
      (cov_m996mb16v().s[24]++, {
        email: data.email,
        password:
        /* istanbul ignore next */
        (cov_m996mb16v().b[5][0]++, data.password) ||
        /* istanbul ignore next */
        (cov_m996mb16v().b[5][1]++, this.generateTemporaryPassword()),
        first_name: data.firstName,
        last_name: data.lastName,
        role: 'employee'
      });
      const user =
      /* istanbul ignore next */
      (cov_m996mb16v().s[25]++, await this.userModel.createUser(userData));
      // Create employee record
      const employeeData =
      /* istanbul ignore next */
      (cov_m996mb16v().s[26]++, {
        user_id: user.id,
        department_id: data.departmentId,
        position: data.position,
        employment_type: data.employmentType,
        hire_date: data.hireDate,
        base_salary: data.baseSalary
      });
      const employee =
      /* istanbul ignore next */
      (cov_m996mb16v().s[27]++, await this.employeeModel.createEmployee(employeeData));
      // Generate password setup token
      const setupToken =
      /* istanbul ignore next */
      (cov_m996mb16v().s[28]++, Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15));
      const setupTokenKey =
      /* istanbul ignore next */
      (cov_m996mb16v().s[29]++, `setup_token:${setupToken}`);
      // Store setup token in cache with user ID as value (expires in 24 hours)
      /* istanbul ignore next */
      cov_m996mb16v().s[30]++;
      await redisService_1.redisService.setCache(setupTokenKey, user.id, 24 * 60 * 60);
      /* istanbul ignore next */
      cov_m996mb16v().s[31]++;
      await client.query('COMMIT');
      // Send password setup email
      const emailSent =
      /* istanbul ignore next */
      (cov_m996mb16v().s[32]++, await emailService_1.emailService.sendEmployeePasswordSetupEmail(data.email, data.firstName, data.lastName, employee.employee_id, setupToken));
      /* istanbul ignore next */
      cov_m996mb16v().s[33]++;
      if (!emailSent) {
        /* istanbul ignore next */
        cov_m996mb16v().b[6][0]++;
        cov_m996mb16v().s[34]++;
        logger_1.default.warn('Failed to send password setup email', {
          employeeId: employee.id,
          email: data.email
        });
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[6][1]++;
      }
      // Get complete employee data with user info
      const completeEmployee =
      /* istanbul ignore next */
      (cov_m996mb16v().s[35]++, await this.getEmployeeWithUser(employee.id));
      /* istanbul ignore next */
      cov_m996mb16v().s[36]++;
      logger_1.default.info(`Employee created successfully: ${employee.employee_id}`, {
        employeeId: employee.id,
        userId: user.id,
        email: data.email,
        emailSent
      });
      /* istanbul ignore next */
      cov_m996mb16v().s[37]++;
      return completeEmployee;
    } catch (error) {
      /* istanbul ignore next */
      cov_m996mb16v().s[38]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_m996mb16v().s[39]++;
      logger_1.default.error('Failed to create employee', {
        error: error.message,
        data
      });
      /* istanbul ignore next */
      cov_m996mb16v().s[40]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_m996mb16v().s[41]++;
      client.release();
    }
  }
  /**
   * Get employee with user information using a specific client
   */
  async getEmployeeWithUserWithClient(client, employeeId) {
    /* istanbul ignore next */
    cov_m996mb16v().f[3]++;
    const query =
    /* istanbul ignore next */
    (cov_m996mb16v().s[42]++, `
      SELECT 
        e.id,
        e.user_id as "userId",
        e.employee_id as "employeeId",
        u.email,
        u.first_name as "firstName",
        u.last_name as "lastName",
        e.department_id as "departmentId",
        d.name as "departmentName",
        e.position,
        e.employment_type as "employmentType",
        e.hire_date as "hireDate",
        e.base_salary as "baseSalary",
        e.status,
        u.is_active as "isActive",
        e.created_at as "createdAt",
        e.updated_at as "updatedAt"
      FROM employees e
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      WHERE e.id = $1
    `);
    const result =
    /* istanbul ignore next */
    (cov_m996mb16v().s[43]++, await client.query(query, [employeeId]));
    /* istanbul ignore next */
    cov_m996mb16v().s[44]++;
    if (result.rows.length === 0) {
      /* istanbul ignore next */
      cov_m996mb16v().b[7][0]++;
      cov_m996mb16v().s[45]++;
      throw new Error('Employee not found');
    } else
    /* istanbul ignore next */
    {
      cov_m996mb16v().b[7][1]++;
    }
    const employee =
    /* istanbul ignore next */
    (cov_m996mb16v().s[46]++, result.rows[0]);
    // Convert numeric fields to numbers
    /* istanbul ignore next */
    cov_m996mb16v().s[47]++;
    employee.baseSalary = parseFloat(employee.baseSalary);
    /* istanbul ignore next */
    cov_m996mb16v().s[48]++;
    return employee;
  }
  /**
   * Get employee with user information
   */
  async getEmployeeWithUser(employeeId) {
    /* istanbul ignore next */
    cov_m996mb16v().f[4]++;
    const query =
    /* istanbul ignore next */
    (cov_m996mb16v().s[49]++, `
      SELECT 
        e.id,
        e.user_id as "userId",
        e.employee_id as "employeeId",
        u.email,
        u.first_name as "firstName",
        u.last_name as "lastName",
        e.department_id as "departmentId",
        d.name as "departmentName",
        e.position,
        e.employment_type as "employmentType",
        e.hire_date as "hireDate",
        e.base_salary as "baseSalary",
        e.status,
        u.is_active as "isActive",
        e.created_at as "createdAt",
        e.updated_at as "updatedAt"
      FROM employees e
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      WHERE e.id = $1
    `);
    const result =
    /* istanbul ignore next */
    (cov_m996mb16v().s[50]++, await (0, database_1.getPool)().query(query, [employeeId]));
    /* istanbul ignore next */
    cov_m996mb16v().s[51]++;
    if (result.rows.length === 0) {
      /* istanbul ignore next */
      cov_m996mb16v().b[8][0]++;
      cov_m996mb16v().s[52]++;
      throw new Error('Employee not found');
    } else
    /* istanbul ignore next */
    {
      cov_m996mb16v().b[8][1]++;
    }
    const employee =
    /* istanbul ignore next */
    (cov_m996mb16v().s[53]++, result.rows[0]);
    // Convert numeric fields to numbers
    /* istanbul ignore next */
    cov_m996mb16v().s[54]++;
    employee.baseSalary = parseFloat(employee.baseSalary);
    /* istanbul ignore next */
    cov_m996mb16v().s[55]++;
    return employee;
  }
  /**
   * List employees with filtering and pagination
   */
  async listEmployees(params =
  /* istanbul ignore next */
  (cov_m996mb16v().b[9][0]++, {})) {
    /* istanbul ignore next */
    cov_m996mb16v().f[5]++;
    const {
      page =
      /* istanbul ignore next */
      (cov_m996mb16v().b[10][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_m996mb16v().b[11][0]++, 20),
      search,
      departmentId,
      status,
      employmentType,
      sortBy =
      /* istanbul ignore next */
      (cov_m996mb16v().b[12][0]++, 'created_at'),
      sortOrder =
      /* istanbul ignore next */
      (cov_m996mb16v().b[13][0]++, 'desc')
    } =
    /* istanbul ignore next */
    (cov_m996mb16v().s[56]++, params);
    const offset =
    /* istanbul ignore next */
    (cov_m996mb16v().s[57]++, (page - 1) * limit);
    // Build WHERE clause
    const whereConditions =
    /* istanbul ignore next */
    (cov_m996mb16v().s[58]++, []);
    const queryParams =
    /* istanbul ignore next */
    (cov_m996mb16v().s[59]++, []);
    let paramIndex =
    /* istanbul ignore next */
    (cov_m996mb16v().s[60]++, 1);
    /* istanbul ignore next */
    cov_m996mb16v().s[61]++;
    if (search) {
      /* istanbul ignore next */
      cov_m996mb16v().b[14][0]++;
      cov_m996mb16v().s[62]++;
      whereConditions.push(`(
        u.first_name ILIKE $${paramIndex} OR 
        u.last_name ILIKE $${paramIndex} OR 
        u.email ILIKE $${paramIndex} OR 
        e.employee_id ILIKE $${paramIndex} OR 
        e.position ILIKE $${paramIndex}
      )`);
      /* istanbul ignore next */
      cov_m996mb16v().s[63]++;
      queryParams.push(`%${search}%`);
      /* istanbul ignore next */
      cov_m996mb16v().s[64]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_m996mb16v().b[14][1]++;
    }
    cov_m996mb16v().s[65]++;
    if (departmentId) {
      /* istanbul ignore next */
      cov_m996mb16v().b[15][0]++;
      cov_m996mb16v().s[66]++;
      whereConditions.push(`e.department_id = $${paramIndex}`);
      /* istanbul ignore next */
      cov_m996mb16v().s[67]++;
      queryParams.push(departmentId);
      /* istanbul ignore next */
      cov_m996mb16v().s[68]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_m996mb16v().b[15][1]++;
    }
    cov_m996mb16v().s[69]++;
    if (status) {
      /* istanbul ignore next */
      cov_m996mb16v().b[16][0]++;
      cov_m996mb16v().s[70]++;
      whereConditions.push(`e.status = $${paramIndex}`);
      /* istanbul ignore next */
      cov_m996mb16v().s[71]++;
      queryParams.push(status);
      /* istanbul ignore next */
      cov_m996mb16v().s[72]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_m996mb16v().b[16][1]++;
    }
    cov_m996mb16v().s[73]++;
    if (employmentType) {
      /* istanbul ignore next */
      cov_m996mb16v().b[17][0]++;
      cov_m996mb16v().s[74]++;
      whereConditions.push(`e.employment_type = $${paramIndex}`);
      /* istanbul ignore next */
      cov_m996mb16v().s[75]++;
      queryParams.push(employmentType);
      /* istanbul ignore next */
      cov_m996mb16v().s[76]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_m996mb16v().b[17][1]++;
    }
    const whereClause =
    /* istanbul ignore next */
    (cov_m996mb16v().s[77]++, whereConditions.length > 0 ?
    /* istanbul ignore next */
    (cov_m996mb16v().b[18][0]++, `WHERE ${whereConditions.join(' AND ')}`) :
    /* istanbul ignore next */
    (cov_m996mb16v().b[18][1]++, ''));
    // Count query
    const countQuery =
    /* istanbul ignore next */
    (cov_m996mb16v().s[78]++, `
      SELECT COUNT(*) as total
      FROM employees e
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      ${whereClause}
    `);
    const countResult =
    /* istanbul ignore next */
    (cov_m996mb16v().s[79]++, await (0, database_1.getPool)().query(countQuery, queryParams));
    const total =
    /* istanbul ignore next */
    (cov_m996mb16v().s[80]++, parseInt(countResult.rows[0].total));
    // Data query
    const dataQuery =
    /* istanbul ignore next */
    (cov_m996mb16v().s[81]++, `
      SELECT 
        e.id,
        e.user_id as "userId",
        e.employee_id as "employeeId",
        u.email,
        u.first_name as "firstName",
        u.last_name as "lastName",
        e.department_id as "departmentId",
        d.name as "departmentName",
        e.position,
        e.employment_type as "employmentType",
        e.hire_date as "hireDate",
        e.base_salary as "baseSalary",
        e.status,
        u.is_active as "isActive",
        e.created_at as "createdAt",
        e.updated_at as "updatedAt"
      FROM employees e
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      ${whereClause}
      ORDER BY e.${sortBy} ${sortOrder.toUpperCase()}
      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
    `);
    /* istanbul ignore next */
    cov_m996mb16v().s[82]++;
    queryParams.push(limit, offset);
    const result =
    /* istanbul ignore next */
    (cov_m996mb16v().s[83]++, await (0, database_1.getPool)().query(dataQuery, queryParams));
    // Convert numeric fields to numbers for each employee
    const employees =
    /* istanbul ignore next */
    (cov_m996mb16v().s[84]++, result.rows.map(employee => {
      /* istanbul ignore next */
      cov_m996mb16v().f[6]++;
      cov_m996mb16v().s[85]++;
      return {
        ...employee,
        baseSalary: parseFloat(employee.baseSalary)
      };
    }));
    /* istanbul ignore next */
    cov_m996mb16v().s[86]++;
    return {
      employees,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit)
    };
  }
  /**
   * Update employee information
   */
  async updateEmployee(employeeId, data) {
    /* istanbul ignore next */
    cov_m996mb16v().f[7]++;
    const pool =
    /* istanbul ignore next */
    (cov_m996mb16v().s[87]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_m996mb16v().s[88]++, await pool.connect());
    /* istanbul ignore next */
    cov_m996mb16v().s[89]++;
    try {
      /* istanbul ignore next */
      cov_m996mb16v().s[90]++;
      await client.query('BEGIN');
      // Get current employee
      const currentEmployee =
      /* istanbul ignore next */
      (cov_m996mb16v().s[91]++, await this.getEmployeeWithUser(employeeId));
      /* istanbul ignore next */
      cov_m996mb16v().s[92]++;
      if (!currentEmployee) {
        /* istanbul ignore next */
        cov_m996mb16v().b[19][0]++;
        cov_m996mb16v().s[93]++;
        throw new Error('Employee not found');
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[19][1]++;
      }
      // Update user information if provided
      cov_m996mb16v().s[94]++;
      if (
      /* istanbul ignore next */
      (cov_m996mb16v().b[21][0]++, data.firstName) ||
      /* istanbul ignore next */
      (cov_m996mb16v().b[21][1]++, data.lastName)) {
        /* istanbul ignore next */
        cov_m996mb16v().b[20][0]++;
        const userUpdateData =
        /* istanbul ignore next */
        (cov_m996mb16v().s[95]++, {});
        /* istanbul ignore next */
        cov_m996mb16v().s[96]++;
        if (data.firstName) {
          /* istanbul ignore next */
          cov_m996mb16v().b[22][0]++;
          cov_m996mb16v().s[97]++;
          userUpdateData.first_name = data.firstName;
        } else
        /* istanbul ignore next */
        {
          cov_m996mb16v().b[22][1]++;
        }
        cov_m996mb16v().s[98]++;
        if (data.lastName) {
          /* istanbul ignore next */
          cov_m996mb16v().b[23][0]++;
          cov_m996mb16v().s[99]++;
          userUpdateData.last_name = data.lastName;
        } else
        /* istanbul ignore next */
        {
          cov_m996mb16v().b[23][1]++;
        }
        cov_m996mb16v().s[100]++;
        await this.userModel.updateUser(currentEmployee.userId, userUpdateData);
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[20][1]++;
      }
      // Update employee information
      const employeeUpdateData =
      /* istanbul ignore next */
      (cov_m996mb16v().s[101]++, {});
      /* istanbul ignore next */
      cov_m996mb16v().s[102]++;
      if (data.departmentId) {
        /* istanbul ignore next */
        cov_m996mb16v().b[24][0]++;
        // Verify department exists
        const department =
        /* istanbul ignore next */
        (cov_m996mb16v().s[103]++, await this.departmentModel.findById(data.departmentId));
        /* istanbul ignore next */
        cov_m996mb16v().s[104]++;
        if (!department) {
          /* istanbul ignore next */
          cov_m996mb16v().b[25][0]++;
          cov_m996mb16v().s[105]++;
          throw new Error('Department not found');
        } else
        /* istanbul ignore next */
        {
          cov_m996mb16v().b[25][1]++;
        }
        cov_m996mb16v().s[106]++;
        employeeUpdateData.department_id = data.departmentId;
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[24][1]++;
      }
      cov_m996mb16v().s[107]++;
      if (data.position) {
        /* istanbul ignore next */
        cov_m996mb16v().b[26][0]++;
        cov_m996mb16v().s[108]++;
        employeeUpdateData.position = data.position;
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[26][1]++;
      }
      cov_m996mb16v().s[109]++;
      if (data.employmentType) {
        /* istanbul ignore next */
        cov_m996mb16v().b[27][0]++;
        cov_m996mb16v().s[110]++;
        employeeUpdateData.employment_type = data.employmentType;
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[27][1]++;
      }
      cov_m996mb16v().s[111]++;
      if (data.hireDate) {
        /* istanbul ignore next */
        cov_m996mb16v().b[28][0]++;
        cov_m996mb16v().s[112]++;
        employeeUpdateData.hire_date = data.hireDate;
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[28][1]++;
      }
      cov_m996mb16v().s[113]++;
      if (data.baseSalary !== undefined) {
        /* istanbul ignore next */
        cov_m996mb16v().b[29][0]++;
        cov_m996mb16v().s[114]++;
        employeeUpdateData.base_salary = data.baseSalary;
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[29][1]++;
      }
      cov_m996mb16v().s[115]++;
      if (data.status) {
        /* istanbul ignore next */
        cov_m996mb16v().b[30][0]++;
        cov_m996mb16v().s[116]++;
        employeeUpdateData.status = data.status;
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[30][1]++;
      }
      cov_m996mb16v().s[117]++;
      if (Object.keys(employeeUpdateData).length > 0) {
        /* istanbul ignore next */
        cov_m996mb16v().b[31][0]++;
        cov_m996mb16v().s[118]++;
        await this.employeeModel.updateEmployee(employeeId, employeeUpdateData);
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[31][1]++;
      }
      cov_m996mb16v().s[119]++;
      await client.query('COMMIT');
      // Get updated employee data using the same client to ensure we see the committed changes
      const updatedEmployee =
      /* istanbul ignore next */
      (cov_m996mb16v().s[120]++, await this.getEmployeeWithUserWithClient(client, employeeId));
      /* istanbul ignore next */
      cov_m996mb16v().s[121]++;
      logger_1.default.info(`Employee updated successfully: ${currentEmployee.employeeId}`, {
        employeeId,
        updates: {
          ...data
        }
      });
      /* istanbul ignore next */
      cov_m996mb16v().s[122]++;
      return updatedEmployee;
    } catch (error) {
      /* istanbul ignore next */
      cov_m996mb16v().s[123]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_m996mb16v().s[124]++;
      logger_1.default.error('Failed to update employee', {
        error: error.message,
        employeeId,
        data
      });
      /* istanbul ignore next */
      cov_m996mb16v().s[125]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_m996mb16v().s[126]++;
      client.release();
    }
  }
  /**
   * Delete employee (soft delete by deactivating user)
   */
  async deleteEmployee(employeeId) {
    /* istanbul ignore next */
    cov_m996mb16v().f[8]++;
    const pool =
    /* istanbul ignore next */
    (cov_m996mb16v().s[127]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_m996mb16v().s[128]++, await pool.connect());
    /* istanbul ignore next */
    cov_m996mb16v().s[129]++;
    try {
      /* istanbul ignore next */
      cov_m996mb16v().s[130]++;
      await client.query('BEGIN');
      // Get employee
      const employee =
      /* istanbul ignore next */
      (cov_m996mb16v().s[131]++, await this.getEmployeeWithUser(employeeId));
      /* istanbul ignore next */
      cov_m996mb16v().s[132]++;
      if (!employee) {
        /* istanbul ignore next */
        cov_m996mb16v().b[32][0]++;
        cov_m996mb16v().s[133]++;
        throw new Error('Employee not found');
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[32][1]++;
      }
      // Deactivate user account
      cov_m996mb16v().s[134]++;
      await this.userModel.updateUser(employee.userId, {
        is_active: false
      });
      // Update employee status to inactive
      /* istanbul ignore next */
      cov_m996mb16v().s[135]++;
      await this.employeeModel.updateEmployee(employeeId, {
        status: 'inactive'
      });
      /* istanbul ignore next */
      cov_m996mb16v().s[136]++;
      await client.query('COMMIT');
      /* istanbul ignore next */
      cov_m996mb16v().s[137]++;
      logger_1.default.info(`Employee deleted successfully: ${employee.employeeId}`, {
        employeeId,
        userId: employee.userId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_m996mb16v().s[138]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_m996mb16v().s[139]++;
      logger_1.default.error('Failed to delete employee', {
        error: error.message,
        employeeId
      });
      /* istanbul ignore next */
      cov_m996mb16v().s[140]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_m996mb16v().s[141]++;
      client.release();
    }
  }
  /**
   * Hard delete employee (permanently remove from database)
   */
  async hardDeleteEmployee(employeeId) {
    /* istanbul ignore next */
    cov_m996mb16v().f[9]++;
    const pool =
    /* istanbul ignore next */
    (cov_m996mb16v().s[142]++, (0, database_1.getPool)());
    const client =
    /* istanbul ignore next */
    (cov_m996mb16v().s[143]++, await pool.connect());
    /* istanbul ignore next */
    cov_m996mb16v().s[144]++;
    try {
      /* istanbul ignore next */
      cov_m996mb16v().s[145]++;
      await client.query('BEGIN');
      // Get employee
      const employee =
      /* istanbul ignore next */
      (cov_m996mb16v().s[146]++, await this.getEmployeeWithUser(employeeId));
      /* istanbul ignore next */
      cov_m996mb16v().s[147]++;
      if (!employee) {
        /* istanbul ignore next */
        cov_m996mb16v().b[33][0]++;
        cov_m996mb16v().s[148]++;
        throw new Error('Employee not found');
      } else
      /* istanbul ignore next */
      {
        cov_m996mb16v().b[33][1]++;
      }
      // Check if employee has any related records that would prevent deletion
      // For now, we'll allow hard delete but this could be extended to check for:
      // - Active ID cards
      // - Time corrections
      // - Leave requests
      // - Other related records
      // Hard delete user account first (this will cascade delete the employee due to FK constraint)
      cov_m996mb16v().s[149]++;
      await this.userModel.deleteUser(employee.userId);
      /* istanbul ignore next */
      cov_m996mb16v().s[150]++;
      await client.query('COMMIT');
      /* istanbul ignore next */
      cov_m996mb16v().s[151]++;
      logger_1.default.info(`Employee hard deleted successfully: ${employee.employeeId}`, {
        employeeId,
        userId: employee.userId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_m996mb16v().s[152]++;
      await client.query('ROLLBACK');
      /* istanbul ignore next */
      cov_m996mb16v().s[153]++;
      logger_1.default.error('Failed to hard delete employee', {
        error: error.message,
        employeeId
      });
      /* istanbul ignore next */
      cov_m996mb16v().s[154]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_m996mb16v().s[155]++;
      client.release();
    }
  }
  /**
   * Get employee statistics
   */
  async getEmployeeStats() {
    /* istanbul ignore next */
    cov_m996mb16v().f[10]++;
    const query =
    /* istanbul ignore next */
    (cov_m996mb16v().s[156]++, `
      SELECT 
        COUNT(*) as total,
        COUNT(*) FILTER (WHERE e.status = 'active') as active,
        COUNT(*) FILTER (WHERE e.status = 'inactive') as inactive,
        COUNT(*) FILTER (WHERE e.status = 'terminated') as terminated,
        COUNT(*) FILTER (WHERE e.status = 'on_leave') as on_leave,
        AVG(e.base_salary) as avg_salary
      FROM employees e
      JOIN users u ON e.user_id = u.id
      WHERE u.is_active = true
    `);
    const deptQuery =
    /* istanbul ignore next */
    (cov_m996mb16v().s[157]++, `
      SELECT 
        d.id as department_id,
        COALESCE(d.name, 'Unassigned') as department_name,
        COUNT(*) as count
      FROM employees e
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      WHERE u.is_active = true AND e.status = 'active'
      GROUP BY d.id, d.name
      ORDER BY count DESC
    `);
    const [statsResult, deptResult] =
    /* istanbul ignore next */
    (cov_m996mb16v().s[158]++, await Promise.all([(0, database_1.getPool)().query(query), (0, database_1.getPool)().query(deptQuery)]));
    const stats =
    /* istanbul ignore next */
    (cov_m996mb16v().s[159]++, statsResult.rows[0]);
    const employeesByDepartment =
    /* istanbul ignore next */
    (cov_m996mb16v().s[160]++, deptResult.rows.map(row => {
      /* istanbul ignore next */
      cov_m996mb16v().f[11]++;
      cov_m996mb16v().s[161]++;
      return {
        departmentId:
        /* istanbul ignore next */
        (cov_m996mb16v().b[34][0]++, row.department_id) ||
        /* istanbul ignore next */
        (cov_m996mb16v().b[34][1]++, ''),
        departmentName: row.department_name,
        count: parseInt(row.count)
      };
    }));
    /* istanbul ignore next */
    cov_m996mb16v().s[162]++;
    return {
      totalEmployees: parseInt(stats.total),
      activeEmployees: parseInt(stats.active),
      inactiveEmployees: parseInt(stats.inactive),
      terminatedEmployees: parseInt(stats.terminated),
      onLeaveEmployees: parseInt(stats.on_leave),
      averageSalary:
      /* istanbul ignore next */
      (cov_m996mb16v().b[35][0]++, parseFloat(stats.avg_salary)) ||
      /* istanbul ignore next */
      (cov_m996mb16v().b[35][1]++, 0),
      employeesByDepartment
    };
  }
  /**
   * Generate temporary password for new employees
   */
  generateTemporaryPassword() {
    /* istanbul ignore next */
    cov_m996mb16v().f[12]++;
    const chars =
    /* istanbul ignore next */
    (cov_m996mb16v().s[163]++, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');
    let password =
    /* istanbul ignore next */
    (cov_m996mb16v().s[164]++, '');
    /* istanbul ignore next */
    cov_m996mb16v().s[165]++;
    for (let i =
    /* istanbul ignore next */
    (cov_m996mb16v().s[166]++, 0); i < 8; i++) {
      /* istanbul ignore next */
      cov_m996mb16v().s[167]++;
      password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    /* istanbul ignore next */
    cov_m996mb16v().s[168]++;
    return password;
  }
  /**
   * Create multiple employees from CSV data
   */
  async createBulkEmployees(csvData) {
    /* istanbul ignore next */
    cov_m996mb16v().f[13]++;
    const results =
    /* istanbul ignore next */
    (cov_m996mb16v().s[169]++, {
      success: [],
      errors: [],
      totalProcessed: csvData.length,
      successCount: 0,
      errorCount: 0
    });
    // Process each employee sequentially to handle individual errors
    /* istanbul ignore next */
    cov_m996mb16v().s[170]++;
    for (let i =
    /* istanbul ignore next */
    (cov_m996mb16v().s[171]++, 0); i < csvData.length; i++) {
      const employeeData =
      /* istanbul ignore next */
      (cov_m996mb16v().s[172]++, csvData[i]);
      const rowNumber =
      /* istanbul ignore next */
      (cov_m996mb16v().s[173]++, i + 1); // 1-based row numbering for user feedback
      /* istanbul ignore next */
      cov_m996mb16v().s[174]++;
      try {
        /* istanbul ignore next */
        cov_m996mb16v().s[175]++;
        // Validate required fields
        if (
        /* istanbul ignore next */
        (cov_m996mb16v().b[37][0]++, !employeeData.email) ||
        /* istanbul ignore next */
        (cov_m996mb16v().b[37][1]++, !employeeData.firstName) ||
        /* istanbul ignore next */
        (cov_m996mb16v().b[37][2]++, !employeeData.lastName) ||
        /* istanbul ignore next */
        (cov_m996mb16v().b[37][3]++, !employeeData.departmentId) ||
        /* istanbul ignore next */
        (cov_m996mb16v().b[37][4]++, !employeeData.position) ||
        /* istanbul ignore next */
        (cov_m996mb16v().b[37][5]++, !employeeData.hireDate) ||
        /* istanbul ignore next */
        (cov_m996mb16v().b[37][6]++, !employeeData.baseSalary)) {
          /* istanbul ignore next */
          cov_m996mb16v().b[36][0]++;
          cov_m996mb16v().s[176]++;
          throw new Error('Missing required fields');
        } else
        /* istanbul ignore next */
        {
          cov_m996mb16v().b[36][1]++;
        }
        // Validate email format
        const emailRegex =
        /* istanbul ignore next */
        (cov_m996mb16v().s[177]++, /^[^\s@]+@[^\s@]+\.[^\s@]+$/);
        /* istanbul ignore next */
        cov_m996mb16v().s[178]++;
        if (!emailRegex.test(employeeData.email)) {
          /* istanbul ignore next */
          cov_m996mb16v().b[38][0]++;
          cov_m996mb16v().s[179]++;
          throw new Error('Invalid email format');
        } else
        /* istanbul ignore next */
        {
          cov_m996mb16v().b[38][1]++;
        }
        // Validate salary is positive
        cov_m996mb16v().s[180]++;
        if (employeeData.baseSalary <= 0) {
          /* istanbul ignore next */
          cov_m996mb16v().b[39][0]++;
          cov_m996mb16v().s[181]++;
          throw new Error('Base salary must be greater than 0');
        } else
        /* istanbul ignore next */
        {
          cov_m996mb16v().b[39][1]++;
        }
        // Validate employment type
        cov_m996mb16v().s[182]++;
        if (!['regular', 'contractual', 'jo'].includes(employeeData.employmentType)) {
          /* istanbul ignore next */
          cov_m996mb16v().b[40][0]++;
          cov_m996mb16v().s[183]++;
          throw new Error('Invalid employment type. Must be: regular, contractual, or jo');
        } else
        /* istanbul ignore next */
        {
          cov_m996mb16v().b[40][1]++;
        }
        // Validate hire date
        const hireDate =
        /* istanbul ignore next */
        (cov_m996mb16v().s[184]++, new Date(employeeData.hireDate));
        /* istanbul ignore next */
        cov_m996mb16v().s[185]++;
        if (isNaN(hireDate.getTime())) {
          /* istanbul ignore next */
          cov_m996mb16v().b[41][0]++;
          cov_m996mb16v().s[186]++;
          throw new Error('Invalid hire date format');
        } else
        /* istanbul ignore next */
        {
          cov_m996mb16v().b[41][1]++;
        }
        // Create the employee using existing logic
        const employee =
        /* istanbul ignore next */
        (cov_m996mb16v().s[187]++, await this.createEmployee(employeeData));
        /* istanbul ignore next */
        cov_m996mb16v().s[188]++;
        results.success.push(employee);
        /* istanbul ignore next */
        cov_m996mb16v().s[189]++;
        results.successCount++;
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_m996mb16v().s[190]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_m996mb16v().b[42][0]++, error.message) :
        /* istanbul ignore next */
        (cov_m996mb16v().b[42][1]++, 'Unknown error occurred'));
        /* istanbul ignore next */
        cov_m996mb16v().s[191]++;
        results.errors.push({
          row: rowNumber,
          data: employeeData,
          error: errorMessage
        });
        /* istanbul ignore next */
        cov_m996mb16v().s[192]++;
        results.errorCount++;
        /* istanbul ignore next */
        cov_m996mb16v().s[193]++;
        logger_1.default.error(`Bulk employee creation failed for row ${rowNumber}:`, {
          error: errorMessage,
          data: employeeData
        });
      }
    }
    /* istanbul ignore next */
    cov_m996mb16v().s[194]++;
    logger_1.default.info(`Bulk employee creation completed: ${results.successCount} successful, ${results.errorCount} failed`);
    /* istanbul ignore next */
    cov_m996mb16v().s[195]++;
    return results;
  }
}
/* istanbul ignore next */
cov_m996mb16v().s[196]++;
exports.EmployeeService = EmployeeService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,