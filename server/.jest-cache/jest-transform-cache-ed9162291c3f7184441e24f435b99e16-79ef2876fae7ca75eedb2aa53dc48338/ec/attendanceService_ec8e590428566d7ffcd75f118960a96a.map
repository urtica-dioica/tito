{"version":3,"names":["AttendanceRecord_1","cov_27ag4lckmc","s","require","AttendanceSession_1","Employee_1","database_1","logger_1","__importDefault","timeValidation_1","attendanceHoursCalculator_1","AttendanceService","clockIn","data","f","employeeId","qrCodeHash","selfieImagePath","timestamp","b","Date","employee","employeeModel","findById","Error","status","today","setHours","existingRecord","attendanceRecordModel","findByEmployeeAndDate","existingSessions","attendanceSessionModel","getSessionsByAttendanceRecord","id","hasClockIn","some","session","sessionType","attendanceRecord","createAttendanceRecord","date","overallStatus","sessionData","attendanceRecordId","createAttendanceSession","updateAttendanceRecord","summary","getAttendanceSummary","default","info","employeeCode","employee_id","sessionId","clockOut","hasClockOut","totalHours","calculateDailyHours","findByIdWithDetails","normalizedDate","employeeName","user","first_name","last_name","trim","departmentName","department","name","sessions","clockInTime","clockOutTime","clockInSession","find","clockOutSession","getEmployeeAttendanceHistory","startDate","endDate","page","limit","result","listAttendanceRecords","sortBy","sortOrder","records","record","push","total","totalPages","getEmployeeAttendanceStats","stats","sessionStats","getEmployeeSessionStats","totalDays","Math","ceil","getTime","averageHoursPerDay","presentDays","lateDays","absentDays","partialDays","round","getDepartmentAttendanceSummary","departmentId","query","getPool","rows","length","row","totalEmployees","parseInt","total_employees","presentEmployees","present_employees","lateEmployees","late_employees","absentEmployees","absent_employees","partialEmployees","partial_employees","attendanceRate","department_name","defaultHoursCalculator","calculateFromSessions","morningHours","afternoonHours","effectiveMorningStart","effectiveAfternoonStart","getDetailedHoursCalculation","config","getConfig","getCurrentAttendanceStatus","isClockedIn","lastClockIn","lastClockOut","todayHours","todayStatus","clockInSessions","filter","clockOutSessions","verifyQRCode","isValid","employee_code","employee_name","getAttendanceRecords","validateAttendanceAction","map","validation","canPerformAttendanceAction","canPerform","reason","nextExpectedSession","sessionDisplayInfo","getSessionDisplayInfo","error","message","recordTimeBasedAttendance","existingSession","getNextExpectedSession","nextSession","getNextSessionType","displayInfo","exports","attendanceService"],"sources":["/home/kim/tito/server/src/services/attendance/attendanceService.ts"],"sourcesContent":["import { attendanceRecordModel, AttendanceRecord } from '../../models/attendance/AttendanceRecord';\nimport { attendanceSessionModel, AttendanceSession, CreateAttendanceSessionData } from '../../models/attendance/AttendanceSession';\nimport { employeeModel } from '../../models/hr/Employee';\nimport { getPool } from '../../config/database';\nimport logger from '../../utils/logger';\nimport { \n  getNextSessionType, \n  canPerformAttendanceAction,\n  SessionType,\n  getSessionDisplayInfo \n} from '../../utils/timeValidation';\nimport { defaultHoursCalculator } from '../../utils/attendanceHoursCalculator';\n\nexport interface ClockInData {\n  employeeId: string;\n  qrCodeHash: string;\n  selfieImagePath?: string;\n  timestamp?: Date | undefined;\n}\n\nexport interface ClockOutData {\n  employeeId: string;\n  qrCodeHash: string;\n  selfieImagePath?: string;\n  timestamp?: Date | undefined;\n}\n\nexport interface TimeBasedAttendanceData {\n  employeeId: string;\n  sessionType: SessionType;\n  qrCodeHash: string;\n  selfieImagePath?: string;\n  timestamp?: Date;\n}\n\nexport interface AttendanceValidationResult {\n  canPerform: boolean;\n  reason?: string;\n  nextExpectedSession?: SessionType;\n  sessionDisplayInfo?: ReturnType<typeof getSessionDisplayInfo>;\n}\n\nexport interface AttendanceSummary {\n  employeeId: string;\n  employeeCode: string;\n  employeeName: string;\n  departmentName: string | null;\n  date: Date;\n  overallStatus: string;\n  sessions: AttendanceSession[];\n  totalHours: number;\n  clockInTime: Date | null;\n  clockOutTime: Date | null;\n}\n\nexport interface AttendanceStats {\n  totalDays: number;\n  presentDays: number;\n  lateDays: number;\n  absentDays: number;\n  partialDays: number;\n  totalHours: number;\n  averageHoursPerDay: number;\n}\n\nexport class AttendanceService {\n  /**\n   * Clock in an employee\n   */\n  async clockIn(data: ClockInData): Promise<AttendanceSummary> {\n    const { employeeId, qrCodeHash, selfieImagePath, timestamp = new Date() } = data;\n\n    // Verify employee exists and is active\n    const employee = await employeeModel.findById(employeeId);\n    if (!employee) {\n      throw new Error('Employee not found');\n    }\n\n    if (employee.status !== 'active') {\n      throw new Error('Employee is not active');\n    }\n\n    // Get today's date\n    const today = new Date(timestamp);\n    today.setHours(0, 0, 0, 0);\n\n    // Check if employee already clocked in today\n    const existingRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, today);\n    if (existingRecord) {\n      const existingSessions = await attendanceSessionModel.getSessionsByAttendanceRecord(existingRecord.id);\n      const hasClockIn = existingSessions.some(session => session.sessionType === 'clock_in');\n      \n      if (hasClockIn) {\n        throw new Error('Employee has already clocked in today');\n      }\n    }\n\n    // Create or get attendance record for today\n    let attendanceRecord: AttendanceRecord;\n    if (existingRecord) {\n      attendanceRecord = existingRecord;\n    } else {\n      attendanceRecord = await attendanceRecordModel.createAttendanceRecord({\n        employeeId,\n        date: today,\n        overallStatus: 'present'\n      });\n    }\n\n    // Create clock in session\n    const sessionData: CreateAttendanceSessionData = {\n      attendanceRecordId: attendanceRecord.id,\n      sessionType: 'clock_in',\n      timestamp,\n      qrCodeHash,\n      ...(selfieImagePath && { selfieImagePath })\n    };\n\n    const session = await attendanceSessionModel.createAttendanceSession(sessionData);\n\n    // Update overall status to present\n    await attendanceRecordModel.updateAttendanceRecord(attendanceRecord.id, {\n      overallStatus: 'present'\n    });\n\n    // Get updated attendance summary\n    const summary = await this.getAttendanceSummary(employeeId, today);\n\n    logger.info('Employee clocked in successfully', {\n      employeeId,\n      employeeCode: employee.employee_id,\n      timestamp,\n      attendanceRecordId: attendanceRecord.id,\n      sessionId: session.id\n    });\n\n    return summary;\n  }\n\n  /**\n   * Clock out an employee\n   */\n  async clockOut(data: ClockOutData): Promise<AttendanceSummary> {\n    const { employeeId, qrCodeHash, selfieImagePath, timestamp = new Date() } = data;\n\n    // Verify employee exists and is active\n    const employee = await employeeModel.findById(employeeId);\n    if (!employee) {\n      throw new Error('Employee not found');\n    }\n\n    if (employee.status !== 'active') {\n      throw new Error('Employee is not active');\n    }\n\n    // Get today's date\n    const today = new Date(timestamp);\n    today.setHours(0, 0, 0, 0);\n\n    // Get today's attendance record\n    const attendanceRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, today);\n    if (!attendanceRecord) {\n      throw new Error('No attendance record found for today. Please clock in first.');\n    }\n\n    // Check if employee already clocked out today\n    const existingSessions = await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id);\n    const hasClockOut = existingSessions.some(session => session.sessionType === 'clock_out');\n    \n    if (hasClockOut) {\n      throw new Error('Employee has already clocked out today');\n    }\n\n    // Check if employee has clocked in today\n    const hasClockIn = existingSessions.some(session => session.sessionType === 'clock_in');\n    if (!hasClockIn) {\n      throw new Error('Employee must clock in before clocking out');\n    }\n\n    // Create clock out session\n    const sessionData: CreateAttendanceSessionData = {\n      attendanceRecordId: attendanceRecord.id,\n      sessionType: 'clock_out',\n      timestamp,\n      qrCodeHash,\n      ...(selfieImagePath && { selfieImagePath })\n    };\n\n    const session = await attendanceSessionModel.createAttendanceSession(sessionData);\n\n    // Calculate total hours for the day\n    const totalHours = await this.calculateDailyHours(attendanceRecord.id);\n\n    // Update overall status based on hours worked\n    let overallStatus: 'present' | 'late' | 'absent' | 'partial' = 'present';\n    if (totalHours < 4) {\n      overallStatus = 'partial';\n    } else if (totalHours < 8) {\n      overallStatus = 'late';\n    }\n\n    await attendanceRecordModel.updateAttendanceRecord(attendanceRecord.id, {\n      overallStatus\n    });\n\n    // Get updated attendance summary\n    const summary = await this.getAttendanceSummary(employeeId, today);\n\n    logger.info('Employee clocked out successfully', {\n      employeeId,\n      employeeCode: employee.employee_id,\n      timestamp,\n      totalHours,\n      overallStatus,\n      attendanceRecordId: attendanceRecord.id,\n      sessionId: session.id\n    });\n\n    return summary;\n  }\n\n  /**\n   * Get attendance summary for an employee on a specific date\n   */\n  async getAttendanceSummary(employeeId: string, date: Date): Promise<AttendanceSummary> {\n    const employee = await employeeModel.findByIdWithDetails(employeeId);\n    if (!employee) {\n      throw new Error('Employee not found');\n    }\n\n    const normalizedDate = new Date(date);\n    normalizedDate.setHours(0, 0, 0, 0);\n\n    const attendanceRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, normalizedDate);\n    if (!attendanceRecord) {\n      return {\n        employeeId,\n        employeeCode: employee.employee_id,\n        employeeName: `${employee.user?.first_name || ''} ${employee.user?.last_name || ''}`.trim(),\n        departmentName: employee.department?.name || null,\n        date: normalizedDate,\n        overallStatus: 'absent',\n        sessions: [],\n        totalHours: 0,\n        clockInTime: null,\n        clockOutTime: null\n      };\n    }\n\n    const sessions = await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id);\n    const totalHours = await this.calculateDailyHours(attendanceRecord.id);\n\n    const clockInSession = sessions.find(s => s.sessionType === 'clock_in');\n    const clockOutSession = sessions.find(s => s.sessionType === 'clock_out');\n\n    return {\n      employeeId,\n      employeeCode: employee.employee_id,\n      employeeName: `${employee.user?.first_name || ''} ${employee.user?.last_name || ''}`.trim(),\n      departmentName: employee.department?.name || null,\n      date: normalizedDate,\n      overallStatus: attendanceRecord.overallStatus,\n      sessions,\n      totalHours,\n      clockInTime: clockInSession?.timestamp || null,\n      clockOutTime: clockOutSession?.timestamp || null\n    };\n  }\n\n  /**\n   * Get attendance history for an employee\n   */\n  async getEmployeeAttendanceHistory(\n    employeeId: string, \n    startDate: Date, \n    endDate: Date,\n    page: number = 1,\n    limit: number = 20\n  ): Promise<{\n    records: AttendanceSummary[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const result = await attendanceRecordModel.listAttendanceRecords({\n      employeeId,\n      startDate,\n      endDate,\n      page,\n      limit,\n      sortBy: 'date',\n      sortOrder: 'desc'\n    });\n\n    const records: AttendanceSummary[] = [];\n    for (const record of result.records) {\n      const summary = await this.getAttendanceSummary(record.employeeId, record.date);\n      records.push(summary);\n    }\n\n    return {\n      records,\n      total: result.total,\n      page: result.page,\n      limit: result.limit,\n      totalPages: result.totalPages\n    };\n  }\n\n  /**\n   * Get attendance statistics for an employee\n   */\n  async getEmployeeAttendanceStats(employeeId: string, startDate: Date, endDate: Date): Promise<AttendanceStats> {\n    const stats = await attendanceRecordModel.getEmployeeAttendanceStats(employeeId, startDate, endDate);\n    const sessionStats = await attendanceSessionModel.getEmployeeSessionStats(employeeId, startDate, endDate);\n\n    const totalDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    const averageHoursPerDay = totalDays > 0 ? sessionStats.totalHours / totalDays : 0;\n\n    return {\n      totalDays: stats.totalDays,\n      presentDays: stats.presentDays,\n      lateDays: stats.lateDays,\n      absentDays: stats.absentDays,\n      partialDays: stats.partialDays,\n      totalHours: sessionStats.totalHours,\n      averageHoursPerDay: Math.round(averageHoursPerDay * 100) / 100\n    };\n  }\n\n  /**\n   * Get department attendance summary\n   */\n  async getDepartmentAttendanceSummary(departmentId: string, date: Date): Promise<{\n    departmentName: string;\n    totalEmployees: number;\n    presentEmployees: number;\n    lateEmployees: number;\n    absentEmployees: number;\n    partialEmployees: number;\n    attendanceRate: number;\n  }> {\n    const query = `\n      SELECT \n        d.name as department_name,\n        COUNT(DISTINCT e.id) as total_employees,\n        COUNT(DISTINCT ar.id) FILTER (WHERE ar.overall_status = 'present') as present_employees,\n        COUNT(DISTINCT ar.id) FILTER (WHERE ar.overall_status = 'late') as late_employees,\n        COUNT(DISTINCT ar.id) FILTER (WHERE ar.overall_status = 'absent') as absent_employees,\n        COUNT(DISTINCT ar.id) FILTER (WHERE ar.overall_status = 'partial') as partial_employees\n      FROM departments d\n      JOIN employees e ON d.id = e.department_id\n      LEFT JOIN attendance_records ar ON e.id = ar.employee_id AND ar.date = $2\n      WHERE d.id = $1 AND e.status = 'active'\n      GROUP BY d.id, d.name\n    `;\n\n    const result = await getPool().query(query, [departmentId, date]);\n    \n    if (result.rows.length === 0) {\n      throw new Error('Department not found');\n    }\n\n    const row = result.rows[0];\n    const totalEmployees = parseInt(row.total_employees) || 0;\n    const presentEmployees = parseInt(row.present_employees) || 0;\n    const lateEmployees = parseInt(row.late_employees) || 0;\n    const absentEmployees = parseInt(row.absent_employees) || 0;\n    const partialEmployees = parseInt(row.partial_employees) || 0;\n    \n    const attendanceRate = totalEmployees > 0 ? ((presentEmployees + lateEmployees + partialEmployees) / totalEmployees) * 100 : 0;\n\n    return {\n      departmentName: row.department_name,\n      totalEmployees,\n      presentEmployees,\n      lateEmployees,\n      absentEmployees,\n      partialEmployees,\n      attendanceRate: Math.round(attendanceRate * 100) / 100\n    };\n  }\n\n  /**\n   * Calculate daily hours for an attendance record using the new mathematical formulation\n   */\n  private async calculateDailyHours(attendanceRecordId: string): Promise<number> {\n    const sessions = await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecordId);\n    \n    // Use the new hours calculator\n    const result = defaultHoursCalculator.calculateFromSessions(sessions);\n    \n    logger.info('Calculated daily hours', {\n      attendanceRecordId,\n      morningHours: result.morningHours,\n      afternoonHours: result.afternoonHours,\n      totalHours: result.totalHours,\n      effectiveMorningStart: result.effectiveMorningStart,\n      effectiveAfternoonStart: result.effectiveAfternoonStart\n    });\n\n    return result.totalHours;\n  }\n\n  /**\n   * Get detailed hours calculation for an attendance record\n   */\n  async getDetailedHoursCalculation(attendanceRecordId: string): Promise<{\n    morningHours: number;\n    afternoonHours: number;\n    totalHours: number;\n    effectiveMorningStart: number | null;\n    effectiveAfternoonStart: number | null;\n    effectiveMorningEnd: number | null;\n    effectiveAfternoonEnd: number | null;\n    config: any;\n  }> {\n    const sessions = await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecordId);\n    const result = defaultHoursCalculator.calculateFromSessions(sessions);\n    const config = defaultHoursCalculator.getConfig();\n\n    return {\n      ...result,\n      config\n    };\n  }\n\n  /**\n   * Get current attendance status for an employee\n   */\n  async getCurrentAttendanceStatus(employeeId: string): Promise<{\n    isClockedIn: boolean;\n    lastClockIn: Date | null;\n    lastClockOut: Date | null;\n    todayHours: number;\n    todayStatus: string;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const attendanceRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, today);\n    \n    if (!attendanceRecord) {\n      return {\n        isClockedIn: false,\n        lastClockIn: null,\n        lastClockOut: null,\n        todayHours: 0,\n        todayStatus: 'absent'\n      };\n    }\n\n    const sessions = await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id);\n    const todayHours = await this.calculateDailyHours(attendanceRecord.id);\n\n    const clockInSessions = sessions.filter(s => s.sessionType === 'clock_in');\n    const clockOutSessions = sessions.filter(s => s.sessionType === 'clock_out');\n\n    const lastClockIn = clockInSessions.length > 0 ? (clockInSessions[clockInSessions.length - 1]?.timestamp || null) : null;\n    const lastClockOut = clockOutSessions.length > 0 ? (clockOutSessions[clockOutSessions.length - 1]?.timestamp || null) : null;\n\n    const isClockedIn = clockInSessions.length > clockOutSessions.length;\n\n    return {\n      isClockedIn,\n      lastClockIn,\n      lastClockOut,\n      todayHours,\n      todayStatus: attendanceRecord.overallStatus\n    };\n  }\n\n  /**\n   * Verify QR code for attendance\n   */\n  async verifyQRCode(qrCodeHash: string): Promise<{\n    isValid: boolean;\n    employeeId?: string;\n    employeeCode?: string;\n    employeeName?: string;\n    departmentName?: string | null;\n  }> {\n    const query = `\n      SELECT \n        e.id as employee_id,\n        e.employee_id as employee_code,\n        CONCAT(u.first_name, ' ', u.last_name) as employee_name,\n        d.name as department_name\n      FROM employees e\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      JOIN id_cards ic ON e.id = ic.employee_id\n      WHERE ic.qr_code_hash = $1 \n        AND ic.is_active = true \n        AND ic.expiry_date > CURRENT_DATE\n        AND e.status = 'active'\n    `;\n\n    const result = await getPool().query(query, [qrCodeHash]);\n    \n    if (result.rows.length === 0) {\n      return { isValid: false };\n    }\n\n    const row = result.rows[0];\n    return {\n      isValid: true,\n      employeeId: row.employee_id,\n      employeeCode: row.employee_code,\n      employeeName: row.employee_name,\n      departmentName: row.department_name\n    };\n  }\n\n  /**\n   * Get attendance records for a date range\n   */\n  async getAttendanceRecords(\n    startDate: Date,\n    endDate: Date,\n    departmentId?: string,\n    page: number = 1,\n    limit: number = 20\n  ): Promise<{\n    records: AttendanceSummary[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const result = await attendanceRecordModel.listAttendanceRecords({\n      startDate,\n      endDate,\n      departmentId,\n      page,\n      limit,\n      sortBy: 'date',\n      sortOrder: 'desc'\n    });\n\n    const records: AttendanceSummary[] = [];\n    for (const record of result.records) {\n      const summary = await this.getAttendanceSummary(record.employeeId, record.date);\n      records.push(summary);\n    }\n\n    return {\n      records,\n      total: result.total,\n      page: result.page,\n      limit: result.limit,\n      totalPages: result.totalPages\n    };\n  }\n\n  /**\n   * Validate if employee can perform attendance action\n   */\n  async validateAttendanceAction(\n    employeeId: string, \n    sessionType: SessionType, \n    timestamp: Date = new Date()\n  ): Promise<AttendanceValidationResult> {\n    try {\n      // Get today's attendance record and sessions\n      const today = new Date(timestamp);\n      today.setHours(0, 0, 0, 0);\n      \n      const attendanceRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, today);\n      const existingSessions = attendanceRecord \n        ? await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id)\n        : [];\n\n      // Convert sessions to the format expected by validation functions\n      const sessionData = existingSessions.map(session => ({\n        sessionType: session.sessionType as SessionType,\n        timestamp: session.timestamp\n      }));\n\n      // Use utility function to validate\n      const validation = canPerformAttendanceAction(sessionType, sessionData, timestamp);\n      \n      return {\n        canPerform: validation.canPerform,\n        reason: validation.reason,\n        nextExpectedSession: validation.nextExpectedSession,\n        sessionDisplayInfo: getSessionDisplayInfo(sessionType)\n      };\n    } catch (error) {\n      logger.error('Error validating attendance action', {\n        error: (error as Error).message,\n        employeeId,\n        sessionType,\n        timestamp\n      });\n      \n      return {\n        canPerform: false,\n        reason: 'Error validating attendance action'\n      };\n    }\n  }\n\n  /**\n   * Record time-based attendance (morning_in, morning_out, afternoon_in, afternoon_out)\n   */\n  async recordTimeBasedAttendance(data: TimeBasedAttendanceData): Promise<AttendanceSummary> {\n    const { employeeId, sessionType, qrCodeHash, selfieImagePath, timestamp = new Date() } = data;\n\n    // Verify employee exists and is active\n    const employee = await employeeModel.findById(employeeId);\n    if (!employee) {\n      throw new Error('Employee not found');\n    }\n\n    if (employee.status !== 'active') {\n      throw new Error('Employee is not active');\n    }\n\n    // Validate attendance action\n    const validation = await this.validateAttendanceAction(employeeId, sessionType, timestamp);\n    if (!validation.canPerform) {\n      throw new Error(validation.reason || 'Invalid attendance action');\n    }\n\n    // Get today's date\n    const today = new Date(timestamp);\n    today.setHours(0, 0, 0, 0);\n\n    // Create or get attendance record for today\n    let attendanceRecord: AttendanceRecord;\n    const existingRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, today);\n    \n    if (existingRecord) {\n      attendanceRecord = existingRecord;\n    } else {\n      attendanceRecord = await attendanceRecordModel.createAttendanceRecord({\n        employeeId,\n        date: today,\n        overallStatus: 'present'\n      });\n    }\n\n    // Check if session already exists\n    // Note: sessionType from timeValidation is different from database sessionType\n    // For now, we'll create new sessions instead of updating existing ones\n    const existingSession = null;\n\n    let session: AttendanceSession;\n\n    if (existingSession) {\n      // Update existing session - this branch is currently disabled due to type mismatch\n      // TODO: Implement proper session update logic when database schema supports time-based sessions\n      throw new Error('Session update not implemented for time-based attendance');\n    } else {\n      // Create new session\n      const sessionData: CreateAttendanceSessionData = {\n        attendanceRecordId: attendanceRecord.id,\n        sessionType: sessionType,\n        timestamp,\n        qrCodeHash,\n        ...(selfieImagePath && { selfieImagePath })\n      };\n\n      session = await attendanceSessionModel.createAttendanceSession(sessionData);\n    }\n\n    // Update overall status based on completed sessions\n    const totalHours = await this.calculateDailyHours(attendanceRecord.id);\n    let overallStatus: 'present' | 'late' | 'absent' | 'partial' = 'present';\n    \n    if (totalHours < 4) {\n      overallStatus = 'partial';\n    } else if (totalHours < 8) {\n      overallStatus = 'late';\n    }\n\n    await attendanceRecordModel.updateAttendanceRecord(attendanceRecord.id, {\n      overallStatus\n    });\n\n    // Get updated attendance summary\n    const summary = await this.getAttendanceSummary(employeeId, today);\n\n    logger.info('Time-based attendance recorded successfully', {\n      employeeId,\n      sessionType,\n      timestamp,\n      sessionId: session.id\n    });\n\n    return summary;\n  }\n\n  /**\n   * Get next expected session for employee\n   */\n  async getNextExpectedSession(employeeId: string, date: Date = new Date()): Promise<{\n    sessionType: SessionType | null;\n    displayInfo: ReturnType<typeof getSessionDisplayInfo> | null;\n    canPerform: boolean;\n    reason?: string;\n  }> {\n    try {\n      const today = new Date(date);\n      today.setHours(0, 0, 0, 0);\n      \n      const attendanceRecord = await attendanceRecordModel.findByEmployeeAndDate(employeeId, today);\n      const existingSessions = attendanceRecord \n        ? await attendanceSessionModel.getSessionsByAttendanceRecord(attendanceRecord.id)\n        : [];\n\n      const sessionData = existingSessions.map(session => ({\n        sessionType: session.sessionType as SessionType,\n        timestamp: session.timestamp\n      }));\n\n      const nextSession = getNextSessionType(sessionData, date);\n      \n      if (nextSession) {\n        const validation = await this.validateAttendanceAction(employeeId, nextSession, date);\n        return {\n          sessionType: nextSession,\n          displayInfo: getSessionDisplayInfo(nextSession),\n          canPerform: validation.canPerform,\n          reason: validation.reason\n        };\n      }\n\n      return {\n        sessionType: null,\n        displayInfo: null,\n        canPerform: false,\n        reason: 'No valid session available at this time'\n      };\n    } catch (error) {\n      logger.error('Error getting next expected session', {\n        error: (error as Error).message,\n        employeeId,\n        date\n      });\n      \n      return {\n        sessionType: null,\n        displayInfo: null,\n        canPerform: false,\n        reason: 'Error determining next session'\n      };\n    }\n  }\n}\n\nexport const attendanceService = new AttendanceService();"],"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","ignoreList":[]}