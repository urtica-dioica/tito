{"file":"/home/kim/tito/server/tests/unit/services/authService.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/unit/services/authService.test.ts"],"sourcesContent":["import { AuthService } from '../../../src/services/auth/authService';\nimport { TestHelpers } from '../../utils/testHelpers';\nimport { initializeTestConnections } from '../../setup';\n\ndescribe('AuthService', () => {\n  let authService: AuthService;\n  let testHelpers: TestHelpers;\n  let createdUserIds: string[] = [];\n\n  beforeAll(async () => {\n    const { testDbPool } = await initializeTestConnections();\n    authService = new AuthService();\n    testHelpers = new TestHelpers(testDbPool);\n  });\n\n  afterEach(async () => {\n    // Clean up created users after each test\n    for (const userId of createdUserIds) {\n      try {\n        await testHelpers.deleteUser(userId);\n      } catch (error) {\n        // Ignore cleanup errors\n      }\n    }\n    createdUserIds = [];\n  });\n\n  describe('login', () => {\n    it('should successfully login with valid credentials', async () => {\n      // Arrange\n      const user = await testHelpers.createTestUser({\n        password: 'password123'\n      });\n      createdUserIds.push(user.id);\n\n      // Act\n      const result = await authService.login({ email: user.email, password: 'password123' });\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.data).toHaveProperty('accessToken');\n      expect(result.data).toHaveProperty('refreshToken');\n      expect(result.data.user.email).toBe(user.email);\n      expect(result.data.user.id).toBe(user.id);\n    });\n\n    it('should fail login with invalid email', async () => {\n      // Act\n      const result = await authService.login({ email: 'nonexistent@example.com', password: 'password123' });\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.message).toContain('Invalid credentials');\n    });\n\n    it('should fail login with invalid password', async () => {\n      // Arrange\n      const user = await testHelpers.createTestUser({\n        password: 'password123'\n      });\n      createdUserIds.push(user.id);\n\n      // Act\n      const result = await authService.login({ email: user.email, password: 'wrongpassword' });\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.message).toContain('Invalid credentials');\n    });\n\n    it('should fail login with inactive user', async () => {\n      // Arrange\n      const user = await testHelpers.createTestUser({\n        password: 'password123',\n        isActive: false\n      });\n      createdUserIds.push(user.id);\n\n      // Act\n      const result = await authService.login({ email: user.email, password: 'password123' });\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.message).toContain('Account is deactivated');\n    });\n  });\n\n  describe('refreshToken', () => {\n    it('should successfully refresh token with valid refresh token', async () => {\n      // Arrange\n      const user = await testHelpers.createTestUser();\n      createdUserIds.push(user.id);\n      const refreshToken = testHelpers.generateRefreshToken(user);\n\n      // Act\n      const result = await authService.refreshToken(refreshToken);\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.data).toHaveProperty('accessToken');\n      expect(result.data).toHaveProperty('refreshToken');\n    });\n\n    it('should fail refresh with invalid token', async () => {\n      // Act\n      const result = await authService.refreshToken('invalid-token');\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.message).toContain('Token refresh failed');\n    });\n\n    it('should fail refresh with expired token', async () => {\n      // Arrange\n      const user = await testHelpers.createTestUser();\n      createdUserIds.push(user.id);\n      const expiredToken = testHelpers.generateRefreshToken(user);\n      \n      // Mock expired token by modifying the payload\n      const decoded = JSON.parse(Buffer.from(expiredToken.split('.')[1], 'base64').toString());\n      decoded.exp = Math.floor(Date.now() / 1000) - 3600; // 1 hour ago\n      const expiredTokenString = Buffer.from(JSON.stringify(decoded)).toString('base64');\n      const mockExpiredToken = expiredToken.split('.')[0] + '.' + expiredTokenString + '.' + expiredToken.split('.')[2];\n\n      // Act\n      const result = await authService.refreshToken(mockExpiredToken);\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.message).toContain('Token refresh failed');\n    });\n  });\n\n  describe('logout', () => {\n    it('should successfully logout user', async () => {\n      // Arrange\n      const user = await testHelpers.createTestUser();\n      createdUserIds.push(user.id);\n      const accessToken = testHelpers.generateAccessToken(user);\n\n      // Act\n      const result = await authService.logout(accessToken);\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.message).toContain('Logout successful');\n    });\n\n    it('should handle logout with invalid token', async () => {\n      // Act\n      const result = await authService.logout('invalid-token');\n\n      // Assert\n      expect(result.success).toBe(true); // Logout should succeed even with invalid token\n      expect(result.message).toContain('Logout successful');\n    });\n  });\n\n  describe('validateToken', () => {\n    it('should validate valid access token', async () => {\n      // Arrange\n      const user = await testHelpers.createTestUser();\n      createdUserIds.push(user.id);\n      const accessToken = testHelpers.generateAccessToken(user);\n\n      // Act\n      const result = await authService.validateToken(accessToken);\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.data).toHaveProperty('user');\n      expect(result.data.user).toHaveProperty('userId');\n      expect(result.data.user).toHaveProperty('email');\n    });\n\n    it('should reject invalid token', async () => {\n      // Act\n      const result = await authService.validateToken('invalid-token');\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.message).toContain('Invalid token');\n    });\n\n    it('should reject expired token', async () => {\n      // Arrange\n      const user = await testHelpers.createTestUser();\n      createdUserIds.push(user.id);\n      const expiredToken = testHelpers.generateAccessToken(user);\n      \n      // Mock expired token\n      const decoded = JSON.parse(Buffer.from(expiredToken.split('.')[1], 'base64').toString());\n      decoded.exp = Math.floor(Date.now() / 1000) - 3600; // 1 hour ago\n      const expiredTokenString = Buffer.from(JSON.stringify(decoded)).toString('base64');\n      const mockExpiredToken = expiredToken.split('.')[0] + '.' + expiredTokenString + '.' + expiredToken.split('.')[2];\n\n      // Act\n      const result = await authService.validateToken(mockExpiredToken);\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.message).toContain('Invalid token');\n    });\n  });\n});"],"version":3}