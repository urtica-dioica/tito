f210a9cac47e95a5bfbd34df35e50749
"use strict";

/* istanbul ignore next */
function cov_2gaf8ggrof() {
  var path = "/home/kim/tito/server/src/models/leave/Leave.ts";
  var hash = "7088445da1601b25f2a19612c37764f0e7e59bf0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/models/leave/Leave.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 49
        }
      },
      "2": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 51
        }
      },
      "3": {
        start: {
          line: 10,
          column: 22
        },
        end: {
          line: 24,
          column: 5
        }
      },
      "4": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 30,
          column: 10
        }
      },
      "5": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 30
        }
      },
      "6": {
        start: {
          line: 37,
          column: 22
        },
        end: {
          line: 51,
          column: 5
        }
      },
      "7": {
        start: {
          line: 52,
          column: 23
        },
        end: {
          line: 52,
          column: 73
        }
      },
      "8": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 62
        }
      },
      "9": {
        start: {
          line: 59,
          column: 22
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "10": {
        start: {
          line: 82,
          column: 23
        },
        end: {
          line: 82,
          column: 73
        }
      },
      "11": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 62
        }
      },
      "12": {
        start: {
          line: 89,
          column: 29
        },
        end: {
          line: 89,
          column: 31
        }
      },
      "13": {
        start: {
          line: 90,
          column: 29
        },
        end: {
          line: 90,
          column: 31
        }
      },
      "14": {
        start: {
          line: 91,
          column: 25
        },
        end: {
          line: 91,
          column: 26
        }
      },
      "15": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "16": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 57
        }
      },
      "17": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 43
        }
      },
      "18": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 25
        }
      },
      "19": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "20": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 62
        }
      },
      "21": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 47
        }
      },
      "22": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 25
        }
      },
      "23": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "24": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 37
        }
      },
      "25": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 60
        }
      },
      "26": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 30
        }
      },
      "27": {
        start: {
          line: 108,
          column: 22
        },
        end: {
          line: 123,
          column: 5
        }
      },
      "28": {
        start: {
          line: 124,
          column: 23
        },
        end: {
          line: 124,
          column: 81
        }
      },
      "29": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 62
        }
      },
      "30": {
        start: {
          line: 131,
          column: 157
        },
        end: {
          line: 131,
          column: 163
        }
      },
      "31": {
        start: {
          line: 133,
          column: 35
        },
        end: {
          line: 133,
          column: 87
        }
      },
      "32": {
        start: {
          line: 134,
          column: 28
        },
        end: {
          line: 134,
          column: 87
        }
      },
      "33": {
        start: {
          line: 136,
          column: 31
        },
        end: {
          line: 136,
          column: 115
        }
      },
      "34": {
        start: {
          line: 137,
          column: 23
        },
        end: {
          line: 137,
          column: 41
        }
      },
      "35": {
        start: {
          line: 138,
          column: 32
        },
        end: {
          line: 138,
          column: 34
        }
      },
      "36": {
        start: {
          line: 139,
          column: 28
        },
        end: {
          line: 139,
          column: 30
        }
      },
      "37": {
        start: {
          line: 140,
          column: 25
        },
        end: {
          line: 140,
          column: 26
        }
      },
      "38": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "39": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 67
        }
      },
      "40": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 41
        }
      },
      "41": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 25
        }
      },
      "42": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "43": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 69
        }
      },
      "44": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 43
        }
      },
      "45": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 25
        }
      },
      "46": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "47": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 66
        }
      },
      "48": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 40
        }
      },
      "49": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 25
        }
      },
      "50": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "51": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 62
        }
      },
      "52": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 37
        }
      },
      "53": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 25
        }
      },
      "54": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "55": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 67
        }
      },
      "56": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 40
        }
      },
      "57": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 25
        }
      },
      "58": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "59": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 65
        }
      },
      "60": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 38
        }
      },
      "61": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 25
        }
      },
      "62": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "63": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 137
        }
      },
      "64": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 44
        }
      },
      "65": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 25
        }
      },
      "66": {
        start: {
          line: 177,
          column: 28
        },
        end: {
          line: 177,
          column: 102
        }
      },
      "67": {
        start: {
          line: 179,
          column: 27
        },
        end: {
          line: 186,
          column: 5
        }
      },
      "68": {
        start: {
          line: 187,
          column: 28
        },
        end: {
          line: 187,
          column: 90
        }
      },
      "69": {
        start: {
          line: 188,
          column: 22
        },
        end: {
          line: 188,
          column: 57
        }
      },
      "70": {
        start: {
          line: 190,
          column: 26
        },
        end: {
          line: 214,
          column: 5
        }
      },
      "71": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 40
        }
      },
      "72": {
        start: {
          line: 216,
          column: 23
        },
        end: {
          line: 216,
          column: 84
        }
      },
      "73": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 223,
          column: 10
        }
      },
      "74": {
        start: {
          line: 229,
          column: 22
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "75": {
        start: {
          line: 254,
          column: 23
        },
        end: {
          line: 254,
          column: 91
        }
      },
      "76": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 27
        }
      },
      "77": {
        start: {
          line: 261,
          column: 32
        },
        end: {
          line: 261,
          column: 34
        }
      },
      "78": {
        start: {
          line: 262,
          column: 28
        },
        end: {
          line: 262,
          column: 30
        }
      },
      "79": {
        start: {
          line: 263,
          column: 25
        },
        end: {
          line: 263,
          column: 26
        }
      },
      "80": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "81": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 65
        }
      },
      "82": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 41
        }
      },
      "83": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 25
        }
      },
      "84": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "85": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 115
        }
      },
      "86": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 43
        }
      },
      "87": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 25
        }
      },
      "88": {
        start: {
          line: 274,
          column: 28
        },
        end: {
          line: 274,
          column: 102
        }
      },
      "89": {
        start: {
          line: 275,
          column: 22
        },
        end: {
          line: 285,
          column: 5
        }
      },
      "90": {
        start: {
          line: 286,
          column: 23
        },
        end: {
          line: 286,
          column: 80
        }
      },
      "91": {
        start: {
          line: 287,
          column: 22
        },
        end: {
          line: 287,
          column: 36
        }
      },
      "92": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 295,
          column: 10
        }
      },
      "93": {
        start: {
          line: 301,
          column: 32
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "94": {
        start: {
          line: 306,
          column: 28
        },
        end: {
          line: 306,
          column: 60
        }
      },
      "95": {
        start: {
          line: 307,
          column: 25
        },
        end: {
          line: 307,
          column: 26
        }
      },
      "96": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "97": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 57
        }
      },
      "98": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 40
        }
      },
      "99": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 25
        }
      },
      "100": {
        start: {
          line: 313,
          column: 22
        },
        end: {
          line: 327,
          column: 5
        }
      },
      "101": {
        start: {
          line: 328,
          column: 23
        },
        end: {
          line: 328,
          column: 80
        }
      },
      "102": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 27
        }
      },
      "103": {
        start: {
          line: 335,
          column: 22
        },
        end: {
          line: 335,
          column: 56
        }
      },
      "104": {
        start: {
          line: 336,
          column: 23
        },
        end: {
          line: 336,
          column: 73
        }
      },
      "105": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 337,
          column: 61
        }
      },
      "106": {
        start: {
          line: 343,
          column: 22
        },
        end: {
          line: 343,
          column: 60
        }
      },
      "107": {
        start: {
          line: 344,
          column: 23
        },
        end: {
          line: 344,
          column: 67
        }
      },
      "108": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 345,
          column: 46
        }
      },
      "109": {
        start: {
          line: 348,
          column: 0
        },
        end: {
          line: 348,
          column: 32
        }
      },
      "110": {
        start: {
          line: 349,
          column: 0
        },
        end: {
          line: 349,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 23
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 36
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 34
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 58
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 32
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 88
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 34
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 130
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        },
        loc: {
          start: {
            line: 228,
            column: 68
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 228
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        loc: {
          start: {
            line: 260,
            column: 50
          },
          end: {
            line: 296,
            column: 5
          }
        },
        line: 260
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 300,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        },
        loc: {
          start: {
            line: 300,
            column: 76
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 300
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        loc: {
          start: {
            line: 334,
            column: 26
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 334
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 342,
            column: 4
          },
          end: {
            line: 342,
            column: 5
          }
        },
        loc: {
          start: {
            line: 342,
            column: 26
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 342
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 53,
            column: 15
          },
          end: {
            line: 53,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 40
          },
          end: {
            line: 53,
            column: 54
          }
        }, {
          start: {
            line: 53,
            column: 57
          },
          end: {
            line: 53,
            column: 61
          }
        }],
        line: 53
      },
      "1": {
        loc: {
          start: {
            line: 83,
            column: 15
          },
          end: {
            line: 83,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 40
          },
          end: {
            line: 83,
            column: 54
          }
        }, {
          start: {
            line: 83,
            column: 57
          },
          end: {
            line: 83,
            column: 61
          }
        }],
        line: 83
      },
      "2": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "3": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "4": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "5": {
        loc: {
          start: {
            line: 125,
            column: 15
          },
          end: {
            line: 125,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 125,
            column: 40
          },
          end: {
            line: 125,
            column: 54
          }
        }, {
          start: {
            line: 125,
            column: 57
          },
          end: {
            line: 125,
            column: 61
          }
        }],
        line: 125
      },
      "6": {
        loc: {
          start: {
            line: 130,
            column: 21
          },
          end: {
            line: 130,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 130,
            column: 30
          },
          end: {
            line: 130,
            column: 32
          }
        }],
        line: 130
      },
      "7": {
        loc: {
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 131,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 131,
            column: 23
          },
          end: {
            line: 131,
            column: 24
          }
        }],
        line: 131
      },
      "8": {
        loc: {
          start: {
            line: 131,
            column: 26
          },
          end: {
            line: 131,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 131,
            column: 34
          },
          end: {
            line: 131,
            column: 36
          }
        }],
        line: 131
      },
      "9": {
        loc: {
          start: {
            line: 131,
            column: 111
          },
          end: {
            line: 131,
            column: 132
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 131,
            column: 120
          },
          end: {
            line: 131,
            column: 132
          }
        }],
        line: 131
      },
      "10": {
        loc: {
          start: {
            line: 131,
            column: 134
          },
          end: {
            line: 131,
            column: 152
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 131,
            column: 146
          },
          end: {
            line: 131,
            column: 152
          }
        }],
        line: 131
      },
      "11": {
        loc: {
          start: {
            line: 134,
            column: 28
          },
          end: {
            line: 134,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 134,
            column: 66
          },
          end: {
            line: 134,
            column: 72
          }
        }, {
          start: {
            line: 134,
            column: 75
          },
          end: {
            line: 134,
            column: 87
          }
        }],
        line: 134
      },
      "12": {
        loc: {
          start: {
            line: 136,
            column: 31
          },
          end: {
            line: 136,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 83
          },
          end: {
            line: 136,
            column: 106
          }
        }, {
          start: {
            line: 136,
            column: 109
          },
          end: {
            line: 136,
            column: 115
          }
        }],
        line: 136
      },
      "13": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "14": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "15": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "16": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "17": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "18": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "19": {
        loc: {
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "20": {
        loc: {
          start: {
            line: 177,
            column: 28
          },
          end: {
            line: 177,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 177,
            column: 57
          },
          end: {
            line: 177,
            column: 97
          }
        }, {
          start: {
            line: 177,
            column: 100
          },
          end: {
            line: 177,
            column: 102
          }
        }],
        line: 177
      },
      "21": {
        loc: {
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "22": {
        loc: {
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 269
      },
      "23": {
        loc: {
          start: {
            line: 274,
            column: 28
          },
          end: {
            line: 274,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 274,
            column: 57
          },
          end: {
            line: 274,
            column: 97
          }
        }, {
          start: {
            line: 274,
            column: 100
          },
          end: {
            line: 274,
            column: 102
          }
        }],
        line: 274
      },
      "24": {
        loc: {
          start: {
            line: 289,
            column: 27
          },
          end: {
            line: 289,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 289,
            column: 27
          },
          end: {
            line: 289,
            column: 57
          }
        }, {
          start: {
            line: 289,
            column: 61
          },
          end: {
            line: 289,
            column: 62
          }
        }],
        line: 289
      },
      "25": {
        loc: {
          start: {
            line: 290,
            column: 29
          },
          end: {
            line: 290,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 290,
            column: 29
          },
          end: {
            line: 290,
            column: 61
          }
        }, {
          start: {
            line: 290,
            column: 65
          },
          end: {
            line: 290,
            column: 66
          }
        }],
        line: 290
      },
      "26": {
        loc: {
          start: {
            line: 291,
            column: 30
          },
          end: {
            line: 291,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 291,
            column: 30
          },
          end: {
            line: 291,
            column: 63
          }
        }, {
          start: {
            line: 291,
            column: 67
          },
          end: {
            line: 291,
            column: 68
          }
        }],
        line: 291
      },
      "27": {
        loc: {
          start: {
            line: 292,
            column: 30
          },
          end: {
            line: 292,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 30
          },
          end: {
            line: 292,
            column: 63
          }
        }, {
          start: {
            line: 292,
            column: 67
          },
          end: {
            line: 292,
            column: 68
          }
        }],
        line: 292
      },
      "28": {
        loc: {
          start: {
            line: 293,
            column: 23
          },
          end: {
            line: 293,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 23
          },
          end: {
            line: 293,
            column: 51
          }
        }, {
          start: {
            line: 293,
            column: 55
          },
          end: {
            line: 293,
            column: 56
          }
        }],
        line: 293
      },
      "29": {
        loc: {
          start: {
            line: 294,
            column: 26
          },
          end: {
            line: 294,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 294,
            column: 26
          },
          end: {
            line: 294,
            column: 57
          }
        }, {
          start: {
            line: 294,
            column: 61
          },
          end: {
            line: 294,
            column: 62
          }
        }],
        line: 294
      },
      "30": {
        loc: {
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "31": {
        loc: {
          start: {
            line: 337,
            column: 15
          },
          end: {
            line: 337,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 337,
            column: 33
          },
          end: {
            line: 337,
            column: 52
          }
        }, {
          start: {
            line: 337,
            column: 55
          },
          end: {
            line: 337,
            column: 60
          }
        }],
        line: 337
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/models/leave/Leave.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/models/leave/Leave.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\n\nexport interface Leave {\n  id: string;\n  employeeId: string;\n  leaveType: 'vacation' | 'sick' | 'maternity' | 'other';\n  startDate: Date;\n  endDate: Date;\n  totalDays: number;\n  reason: string | null;\n  status: 'pending' | 'approved' | 'rejected';\n  approvedBy: string | null;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface LeaveWithDetails extends Leave {\n  employeeCode: string;\n  employeeName: string;\n  departmentName: string | null;\n  approverName: string | null;\n}\n\nexport interface CreateLeaveData {\n  employeeId: string;\n  leaveType: 'vacation' | 'sick' | 'maternity' | 'other';\n  startDate: Date;\n  endDate: Date;\n  totalDays: number;\n  reason?: string;\n}\n\nexport interface UpdateLeaveData {\n  status?: 'pending' | 'approved' | 'rejected';\n  approvedBy?: string;\n}\n\nexport interface LeaveListParams {\n  page?: number | undefined;\n  limit?: number | undefined;\n  employeeId?: string | undefined;\n  departmentId?: string | undefined;\n  leaveType?: 'vacation' | 'sick' | 'maternity' | 'other' | undefined;\n  status?: 'pending' | 'approved' | 'rejected' | undefined;\n  startDate?: Date | undefined;\n  endDate?: Date | undefined;\n  search?: string | undefined;\n  sortBy?: string | undefined;\n  sortOrder?: 'asc' | 'desc' | undefined;\n}\n\nexport class LeaveModel {\n  /**\n   * Create a new leave request\n   */\n  async createLeave(data: CreateLeaveData): Promise<Leave> {\n    const query = `\n      INSERT INTO leaves (employee_id, leave_type, start_date, end_date)\n      VALUES ($1, $2, $3, $4)\n      RETURNING \n        id,\n        employee_id as \"employeeId\",\n        leave_type as \"leaveType\",\n        start_date as \"startDate\",\n        end_date as \"endDate\",\n        (end_date - start_date + 1) as \"totalDays\",\n        status,\n        approver_id as \"approvedBy\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n    `;\n\n    const result = await getPool().query(query, [\n      data.employeeId,\n      data.leaveType,\n      data.startDate,\n      data.endDate,\n    ]);\n\n    return result.rows[0];\n  }\n\n  /**\n   * Get leave request by ID\n   */\n  async findById(id: string): Promise<Leave | null> {\n    const query = `\n      SELECT \n        id,\n        employee_id as \"employeeId\",\n        leave_type as \"leaveType\",\n        start_date as \"startDate\",\n        end_date as \"endDate\",\n        (end_date - start_date + 1) as \"totalDays\",\n        status,\n        approver_id as \"approvedBy\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM leaves\n      WHERE id = $1\n    `;\n\n    const result = await getPool().query(query, [id]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Get leave request with details\n   */\n  async findByIdWithDetails(id: string): Promise<LeaveWithDetails | null> {\n    const query = `\n      SELECT \n        l.id,\n        l.employee_id as \"employeeId\",\n        l.leave_type as \"leaveType\",\n        l.start_date as \"startDate\",\n        l.end_date as \"endDate\",\n        (l.end_date - l.start_date + 1) as \"totalDays\",\n        l.status,\n        l.approver_id as \"approvedBy\",\n        l.created_at as \"createdAt\",\n        l.updated_at as \"updatedAt\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\",\n        CONCAT(approver.first_name, ' ', approver.last_name) as \"approverName\"\n      FROM leaves l\n      JOIN employees e ON l.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n              LEFT JOIN users approver ON l.approver_id = approver.id\n      WHERE l.id = $1\n    `;\n\n    const result = await getPool().query(query, [id]);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * Update leave request\n   */\n  async updateLeave(id: string, data: UpdateLeaveData): Promise<Leave | null> {\n    const updateFields: string[] = [];\n    const updateValues: any[] = [];\n    let paramIndex = 1;\n\n    if (data.status !== undefined) {\n      updateFields.push(`status = $${paramIndex}`);\n      updateValues.push(data.status);\n      paramIndex++;\n    }\n\n    if (data.approvedBy !== undefined) {\n              updateFields.push(`approver_id = $${paramIndex}`);\n      updateValues.push(data.approvedBy);\n      paramIndex++;\n    }\n\n    // Note: leaves table doesn't have approved_at column, only approver_id\n\n    if (updateFields.length === 0) {\n      return this.findById(id);\n    }\n\n    updateFields.push(`updated_at = CURRENT_TIMESTAMP`);\n    updateValues.push(id);\n\n    const query = `\n      UPDATE leaves \n      SET ${updateFields.join(', ')}\n      WHERE id = $${paramIndex}\n      RETURNING \n        id,\n        employee_id as \"employeeId\",\n        leave_type as \"leaveType\",\n        start_date as \"startDate\",\n        end_date as \"endDate\",\n        (end_date - start_date + 1) as \"totalDays\",\n        status,\n        approver_id as \"approvedBy\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n    `;\n\n    const result = await getPool().query(query, updateValues);\n    return result.rows.length > 0 ? result.rows[0] : null;\n  }\n\n  /**\n   * List leave requests with filtering and pagination\n   */\n  async listLeaves(params: LeaveListParams = {}): Promise<{\n    leaves: LeaveWithDetails[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      employeeId,\n      departmentId,\n      leaveType,\n      status,\n      startDate,\n      endDate,\n      search,\n      sortBy = 'created_at',\n      sortOrder = 'desc'\n    } = params;\n\n    // Validate sortBy parameter to prevent SQL injection\n    const allowedSortColumns = ['created_at', 'updated_at', 'start_date', 'status'];\n    const validSortBy = allowedSortColumns.includes(sortBy) ? sortBy : 'created_at';\n    \n    // Validate sortOrder parameter\n    const validSortOrder = ['asc', 'desc'].includes(sortOrder.toLowerCase()) ? sortOrder.toUpperCase() : 'DESC';\n\n    const offset = (page - 1) * limit;\n    const whereConditions: string[] = [];\n    const queryParams: any[] = [];\n    let paramIndex = 1;\n\n    // Build WHERE conditions\n    if (employeeId) {\n      whereConditions.push(`l.employee_id = $${paramIndex}`);\n      queryParams.push(employeeId);\n      paramIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`e.department_id = $${paramIndex}`);\n      queryParams.push(departmentId);\n      paramIndex++;\n    }\n\n    if (leaveType) {\n      whereConditions.push(`l.leave_type = $${paramIndex}`);\n      queryParams.push(leaveType);\n      paramIndex++;\n    }\n\n    if (status) {\n      whereConditions.push(`l.status = $${paramIndex}`);\n      queryParams.push(status);\n      paramIndex++;\n    }\n\n    if (startDate) {\n      whereConditions.push(`l.start_date >= $${paramIndex}`);\n      queryParams.push(startDate);\n      paramIndex++;\n    }\n\n    if (endDate) {\n      whereConditions.push(`l.end_date <= $${paramIndex}`);\n      queryParams.push(endDate);\n      paramIndex++;\n    }\n\n    if (search) {\n      whereConditions.push(`(CONCAT(u.first_name, ' ', u.last_name) ILIKE $${paramIndex} OR e.employee_id ILIKE $${paramIndex} )`);\n      queryParams.push(`%${search}%`);\n      paramIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM leaves l\n      JOIN employees e ON l.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n    `;\n\n    const countResult = await getPool().query(countQuery, queryParams);\n    const total = parseInt(countResult.rows[0].total);\n\n    // Data query\n    const dataQuery = `\n      SELECT \n        l.id,\n        l.employee_id as \"employeeId\",\n        l.leave_type as \"leaveType\",\n        l.start_date as \"startDate\",\n        l.end_date as \"endDate\",\n        (l.end_date - l.start_date + 1) as \"totalDays\",\n        l.status,\n        l.approver_id as \"approvedBy\",\n        l.created_at as \"createdAt\",\n        l.updated_at as \"updatedAt\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\",\n        CONCAT(approver.first_name, ' ', approver.last_name) as \"approverName\"\n      FROM leaves l\n      JOIN employees e ON l.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      LEFT JOIN departments d ON e.department_id = d.id\n              LEFT JOIN users approver ON l.approver_id = approver.id\n      ${whereClause}\n      ORDER BY l.${validSortBy} ${validSortOrder}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    queryParams.push(limit, offset);\n    const result = await getPool().query(dataQuery, queryParams);\n\n    return {\n      leaves: result.rows,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit)\n    };\n  }\n\n  /**\n   * Get pending requests for a department head\n   */\n  async getPendingRequestsForDepartmentHead(departmentHeadUserId: string): Promise<LeaveWithDetails[]> {\n    const query = `\n      SELECT \n        l.id,\n        l.employee_id as \"employeeId\",\n        l.leave_type as \"leaveType\",\n        l.start_date as \"startDate\",\n        l.end_date as \"endDate\",\n        (l.end_date - l.start_date + 1) as \"totalDays\",\n        l.status,\n        l.approver_id as \"approvedBy\",\n        l.created_at as \"createdAt\",\n        l.updated_at as \"updatedAt\",\n        e.employee_id as \"employeeCode\",\n        CONCAT(u.first_name, ' ', u.last_name) as \"employeeName\",\n        d.name as \"departmentName\",\n        CONCAT(approver.first_name, ' ', approver.last_name) as \"approverName\"\n      FROM leaves l\n      JOIN employees e ON l.employee_id = e.id\n      JOIN users u ON e.user_id = u.id\n      JOIN departments d ON e.department_id = d.id\n              LEFT JOIN users approver ON l.approver_id = approver.id\n      WHERE d.department_head_user_id = $1\n        AND l.status = 'pending'\n      ORDER BY l.created_at ASC\n    `;\n\n    const result = await getPool().query(query, [departmentHeadUserId]);\n    return result.rows;\n  }\n\n  /**\n   * Get leave request statistics\n   */\n  async getLeaveStats(employeeId?: string, departmentId?: string): Promise<{\n    totalRequests: number;\n    pendingRequests: number;\n    approvedRequests: number;\n    rejectedRequests: number;\n    totalDays: number;\n    approvedDays: number;\n  }> {\n    const whereConditions: string[] = [];\n    const queryParams: any[] = [];\n    let paramIndex = 1;\n\n    if (employeeId) {\n      whereConditions.push(`employee_id = $${paramIndex}`);\n      queryParams.push(employeeId);\n      paramIndex++;\n    }\n\n    if (departmentId) {\n      whereConditions.push(`employee_id IN (SELECT id FROM employees WHERE department_id = $${paramIndex})`);\n      queryParams.push(departmentId);\n      paramIndex++;\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    const query = `\n      SELECT \n        COUNT(*) as total_requests,\n        COUNT(*) FILTER (WHERE status = 'pending') as pending_requests,\n        COUNT(*) FILTER (WHERE status = 'approved') as approved_requests,\n        COUNT(*) FILTER (WHERE status = 'rejected') as rejected_requests,\n        COALESCE(SUM(end_date - start_date + 1), 0) as total_days,\n        COALESCE(SUM(end_date - start_date + 1) FILTER (WHERE status = 'approved'), 0) as approved_days\n      FROM leaves\n      ${whereClause}\n    `;\n\n    const result = await getPool().query(query, queryParams);\n    const stats = result.rows[0];\n\n    return {\n      totalRequests: parseInt(stats.total_requests) || 0,\n      pendingRequests: parseInt(stats.pending_requests) || 0,\n      approvedRequests: parseInt(stats.approved_requests) || 0,\n      rejectedRequests: parseInt(stats.rejected_requests) || 0,\n      totalDays: parseFloat(stats.total_days) || 0,\n      approvedDays: parseFloat(stats.approved_days) || 0\n    };\n  }\n\n  /**\n   * Check for overlapping leave requests\n   */\n  async checkOverlappingLeaves(employeeId: string, startDate: Date, endDate: Date, excludeId?: string): Promise<Leave[]> {\n    const whereConditions = [\n      'employee_id = $1',\n      'status = \\'approved\\'',\n      '((start_date <= $2 AND end_date >= $2) OR (start_date <= $3 AND end_date >= $3) OR (start_date >= $2 AND end_date <= $3))'\n    ];\n    \n    const queryParams: any[] = [employeeId, startDate, endDate];\n    let paramIndex = 4;\n\n    if (excludeId) {\n      whereConditions.push(`id != $${paramIndex}`);\n      queryParams.push(excludeId);\n      paramIndex++;\n    }\n\n    const query = `\n      SELECT \n        id,\n        employee_id as \"employeeId\",\n        leave_type as \"leaveType\",\n        start_date as \"startDate\",\n        end_date as \"endDate\",\n        (end_date - start_date + 1) as \"totalDays\",\n        status,\n        approver_id as \"approvedBy\",\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM leaves\n      WHERE ${whereConditions.join(' AND ')}\n    `;\n\n    const result = await getPool().query(query, queryParams);\n    return result.rows;\n  }\n\n  /**\n   * Delete leave request\n   */\n  async deleteLeave(id: string): Promise<boolean> {\n    const query = 'DELETE FROM leaves WHERE id = $1';\n    const result = await getPool().query(query, [id]);\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  /**\n   * Get leave request count\n   */\n  async getLeaveCount(): Promise<number> {\n    const query = 'SELECT COUNT(*) as count FROM leaves';\n    const result = await getPool().query(query);\n    return parseInt(result.rows[0].count);\n  }\n}\n\nexport const leaveModel = new LeaveModel();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7088445da1601b25f2a19612c37764f0e7e59bf0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2gaf8ggrof = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2gaf8ggrof();
cov_2gaf8ggrof().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2gaf8ggrof().s[1]++;
exports.leaveModel = exports.LeaveModel = void 0;
const database_1 =
/* istanbul ignore next */
(cov_2gaf8ggrof().s[2]++, require("../../config/database"));
class LeaveModel {
  /**
   * Create a new leave request
   */
  async createLeave(data) {
    /* istanbul ignore next */
    cov_2gaf8ggrof().f[0]++;
    const query =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[3]++, `
      INSERT INTO leaves (employee_id, leave_type, start_date, end_date)
      VALUES ($1, $2, $3, $4)
      RETURNING 
        id,
        employee_id as "employeeId",
        leave_type as "leaveType",
        start_date as "startDate",
        end_date as "endDate",
        (end_date - start_date + 1) as "totalDays",
        status,
        approver_id as "approvedBy",
        created_at as "createdAt",
        updated_at as "updatedAt"
    `);
    const result =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[4]++, await (0, database_1.getPool)().query(query, [data.employeeId, data.leaveType, data.startDate, data.endDate]));
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[5]++;
    return result.rows[0];
  }
  /**
   * Get leave request by ID
   */
  async findById(id) {
    /* istanbul ignore next */
    cov_2gaf8ggrof().f[1]++;
    const query =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[6]++, `
      SELECT 
        id,
        employee_id as "employeeId",
        leave_type as "leaveType",
        start_date as "startDate",
        end_date as "endDate",
        (end_date - start_date + 1) as "totalDays",
        status,
        approver_id as "approvedBy",
        created_at as "createdAt",
        updated_at as "updatedAt"
      FROM leaves
      WHERE id = $1
    `);
    const result =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[7]++, await (0, database_1.getPool)().query(query, [id]));
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[8]++;
    return result.rows.length > 0 ?
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[0][0]++, result.rows[0]) :
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[0][1]++, null);
  }
  /**
   * Get leave request with details
   */
  async findByIdWithDetails(id) {
    /* istanbul ignore next */
    cov_2gaf8ggrof().f[2]++;
    const query =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[9]++, `
      SELECT 
        l.id,
        l.employee_id as "employeeId",
        l.leave_type as "leaveType",
        l.start_date as "startDate",
        l.end_date as "endDate",
        (l.end_date - l.start_date + 1) as "totalDays",
        l.status,
        l.approver_id as "approvedBy",
        l.created_at as "createdAt",
        l.updated_at as "updatedAt",
        e.employee_id as "employeeCode",
        CONCAT(u.first_name, ' ', u.last_name) as "employeeName",
        d.name as "departmentName",
        CONCAT(approver.first_name, ' ', approver.last_name) as "approverName"
      FROM leaves l
      JOIN employees e ON l.employee_id = e.id
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
              LEFT JOIN users approver ON l.approver_id = approver.id
      WHERE l.id = $1
    `);
    const result =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[10]++, await (0, database_1.getPool)().query(query, [id]));
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[11]++;
    return result.rows.length > 0 ?
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[1][0]++, result.rows[0]) :
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[1][1]++, null);
  }
  /**
   * Update leave request
   */
  async updateLeave(id, data) {
    /* istanbul ignore next */
    cov_2gaf8ggrof().f[3]++;
    const updateFields =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[12]++, []);
    const updateValues =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[13]++, []);
    let paramIndex =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[14]++, 1);
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[15]++;
    if (data.status !== undefined) {
      /* istanbul ignore next */
      cov_2gaf8ggrof().b[2][0]++;
      cov_2gaf8ggrof().s[16]++;
      updateFields.push(`status = $${paramIndex}`);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[17]++;
      updateValues.push(data.status);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[18]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_2gaf8ggrof().b[2][1]++;
    }
    cov_2gaf8ggrof().s[19]++;
    if (data.approvedBy !== undefined) {
      /* istanbul ignore next */
      cov_2gaf8ggrof().b[3][0]++;
      cov_2gaf8ggrof().s[20]++;
      updateFields.push(`approver_id = $${paramIndex}`);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[21]++;
      updateValues.push(data.approvedBy);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[22]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_2gaf8ggrof().b[3][1]++;
    }
    // Note: leaves table doesn't have approved_at column, only approver_id
    cov_2gaf8ggrof().s[23]++;
    if (updateFields.length === 0) {
      /* istanbul ignore next */
      cov_2gaf8ggrof().b[4][0]++;
      cov_2gaf8ggrof().s[24]++;
      return this.findById(id);
    } else
    /* istanbul ignore next */
    {
      cov_2gaf8ggrof().b[4][1]++;
    }
    cov_2gaf8ggrof().s[25]++;
    updateFields.push(`updated_at = CURRENT_TIMESTAMP`);
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[26]++;
    updateValues.push(id);
    const query =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[27]++, `
      UPDATE leaves 
      SET ${updateFields.join(', ')}
      WHERE id = $${paramIndex}
      RETURNING 
        id,
        employee_id as "employeeId",
        leave_type as "leaveType",
        start_date as "startDate",
        end_date as "endDate",
        (end_date - start_date + 1) as "totalDays",
        status,
        approver_id as "approvedBy",
        created_at as "createdAt",
        updated_at as "updatedAt"
    `);
    const result =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[28]++, await (0, database_1.getPool)().query(query, updateValues));
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[29]++;
    return result.rows.length > 0 ?
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[5][0]++, result.rows[0]) :
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[5][1]++, null);
  }
  /**
   * List leave requests with filtering and pagination
   */
  async listLeaves(params =
  /* istanbul ignore next */
  (cov_2gaf8ggrof().b[6][0]++, {})) {
    /* istanbul ignore next */
    cov_2gaf8ggrof().f[4]++;
    const {
      page =
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[7][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[8][0]++, 20),
      employeeId,
      departmentId,
      leaveType,
      status,
      startDate,
      endDate,
      search,
      sortBy =
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[9][0]++, 'created_at'),
      sortOrder =
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[10][0]++, 'desc')
    } =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[30]++, params);
    // Validate sortBy parameter to prevent SQL injection
    const allowedSortColumns =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[31]++, ['created_at', 'updated_at', 'start_date', 'status']);
    const validSortBy =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[32]++, allowedSortColumns.includes(sortBy) ?
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[11][0]++, sortBy) :
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[11][1]++, 'created_at'));
    // Validate sortOrder parameter
    const validSortOrder =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[33]++, ['asc', 'desc'].includes(sortOrder.toLowerCase()) ?
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[12][0]++, sortOrder.toUpperCase()) :
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[12][1]++, 'DESC'));
    const offset =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[34]++, (page - 1) * limit);
    const whereConditions =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[35]++, []);
    const queryParams =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[36]++, []);
    let paramIndex =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[37]++, 1);
    // Build WHERE conditions
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[38]++;
    if (employeeId) {
      /* istanbul ignore next */
      cov_2gaf8ggrof().b[13][0]++;
      cov_2gaf8ggrof().s[39]++;
      whereConditions.push(`l.employee_id = $${paramIndex}`);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[40]++;
      queryParams.push(employeeId);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[41]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_2gaf8ggrof().b[13][1]++;
    }
    cov_2gaf8ggrof().s[42]++;
    if (departmentId) {
      /* istanbul ignore next */
      cov_2gaf8ggrof().b[14][0]++;
      cov_2gaf8ggrof().s[43]++;
      whereConditions.push(`e.department_id = $${paramIndex}`);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[44]++;
      queryParams.push(departmentId);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[45]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_2gaf8ggrof().b[14][1]++;
    }
    cov_2gaf8ggrof().s[46]++;
    if (leaveType) {
      /* istanbul ignore next */
      cov_2gaf8ggrof().b[15][0]++;
      cov_2gaf8ggrof().s[47]++;
      whereConditions.push(`l.leave_type = $${paramIndex}`);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[48]++;
      queryParams.push(leaveType);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[49]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_2gaf8ggrof().b[15][1]++;
    }
    cov_2gaf8ggrof().s[50]++;
    if (status) {
      /* istanbul ignore next */
      cov_2gaf8ggrof().b[16][0]++;
      cov_2gaf8ggrof().s[51]++;
      whereConditions.push(`l.status = $${paramIndex}`);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[52]++;
      queryParams.push(status);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[53]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_2gaf8ggrof().b[16][1]++;
    }
    cov_2gaf8ggrof().s[54]++;
    if (startDate) {
      /* istanbul ignore next */
      cov_2gaf8ggrof().b[17][0]++;
      cov_2gaf8ggrof().s[55]++;
      whereConditions.push(`l.start_date >= $${paramIndex}`);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[56]++;
      queryParams.push(startDate);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[57]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_2gaf8ggrof().b[17][1]++;
    }
    cov_2gaf8ggrof().s[58]++;
    if (endDate) {
      /* istanbul ignore next */
      cov_2gaf8ggrof().b[18][0]++;
      cov_2gaf8ggrof().s[59]++;
      whereConditions.push(`l.end_date <= $${paramIndex}`);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[60]++;
      queryParams.push(endDate);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[61]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_2gaf8ggrof().b[18][1]++;
    }
    cov_2gaf8ggrof().s[62]++;
    if (search) {
      /* istanbul ignore next */
      cov_2gaf8ggrof().b[19][0]++;
      cov_2gaf8ggrof().s[63]++;
      whereConditions.push(`(CONCAT(u.first_name, ' ', u.last_name) ILIKE $${paramIndex} OR e.employee_id ILIKE $${paramIndex} )`);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[64]++;
      queryParams.push(`%${search}%`);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[65]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_2gaf8ggrof().b[19][1]++;
    }
    const whereClause =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[66]++, whereConditions.length > 0 ?
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[20][0]++, `WHERE ${whereConditions.join(' AND ')}`) :
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[20][1]++, ''));
    // Count query
    const countQuery =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[67]++, `
      SELECT COUNT(*) as total
      FROM leaves l
      JOIN employees e ON l.employee_id = e.id
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
      ${whereClause}
    `);
    const countResult =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[68]++, await (0, database_1.getPool)().query(countQuery, queryParams));
    const total =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[69]++, parseInt(countResult.rows[0].total));
    // Data query
    const dataQuery =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[70]++, `
      SELECT 
        l.id,
        l.employee_id as "employeeId",
        l.leave_type as "leaveType",
        l.start_date as "startDate",
        l.end_date as "endDate",
        (l.end_date - l.start_date + 1) as "totalDays",
        l.status,
        l.approver_id as "approvedBy",
        l.created_at as "createdAt",
        l.updated_at as "updatedAt",
        e.employee_id as "employeeCode",
        CONCAT(u.first_name, ' ', u.last_name) as "employeeName",
        d.name as "departmentName",
        CONCAT(approver.first_name, ' ', approver.last_name) as "approverName"
      FROM leaves l
      JOIN employees e ON l.employee_id = e.id
      JOIN users u ON e.user_id = u.id
      LEFT JOIN departments d ON e.department_id = d.id
              LEFT JOIN users approver ON l.approver_id = approver.id
      ${whereClause}
      ORDER BY l.${validSortBy} ${validSortOrder}
      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
    `);
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[71]++;
    queryParams.push(limit, offset);
    const result =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[72]++, await (0, database_1.getPool)().query(dataQuery, queryParams));
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[73]++;
    return {
      leaves: result.rows,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit)
    };
  }
  /**
   * Get pending requests for a department head
   */
  async getPendingRequestsForDepartmentHead(departmentHeadUserId) {
    /* istanbul ignore next */
    cov_2gaf8ggrof().f[5]++;
    const query =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[74]++, `
      SELECT 
        l.id,
        l.employee_id as "employeeId",
        l.leave_type as "leaveType",
        l.start_date as "startDate",
        l.end_date as "endDate",
        (l.end_date - l.start_date + 1) as "totalDays",
        l.status,
        l.approver_id as "approvedBy",
        l.created_at as "createdAt",
        l.updated_at as "updatedAt",
        e.employee_id as "employeeCode",
        CONCAT(u.first_name, ' ', u.last_name) as "employeeName",
        d.name as "departmentName",
        CONCAT(approver.first_name, ' ', approver.last_name) as "approverName"
      FROM leaves l
      JOIN employees e ON l.employee_id = e.id
      JOIN users u ON e.user_id = u.id
      JOIN departments d ON e.department_id = d.id
              LEFT JOIN users approver ON l.approver_id = approver.id
      WHERE d.department_head_user_id = $1
        AND l.status = 'pending'
      ORDER BY l.created_at ASC
    `);
    const result =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[75]++, await (0, database_1.getPool)().query(query, [departmentHeadUserId]));
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[76]++;
    return result.rows;
  }
  /**
   * Get leave request statistics
   */
  async getLeaveStats(employeeId, departmentId) {
    /* istanbul ignore next */
    cov_2gaf8ggrof().f[6]++;
    const whereConditions =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[77]++, []);
    const queryParams =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[78]++, []);
    let paramIndex =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[79]++, 1);
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[80]++;
    if (employeeId) {
      /* istanbul ignore next */
      cov_2gaf8ggrof().b[21][0]++;
      cov_2gaf8ggrof().s[81]++;
      whereConditions.push(`employee_id = $${paramIndex}`);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[82]++;
      queryParams.push(employeeId);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[83]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_2gaf8ggrof().b[21][1]++;
    }
    cov_2gaf8ggrof().s[84]++;
    if (departmentId) {
      /* istanbul ignore next */
      cov_2gaf8ggrof().b[22][0]++;
      cov_2gaf8ggrof().s[85]++;
      whereConditions.push(`employee_id IN (SELECT id FROM employees WHERE department_id = $${paramIndex})`);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[86]++;
      queryParams.push(departmentId);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[87]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_2gaf8ggrof().b[22][1]++;
    }
    const whereClause =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[88]++, whereConditions.length > 0 ?
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[23][0]++, `WHERE ${whereConditions.join(' AND ')}`) :
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[23][1]++, ''));
    const query =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[89]++, `
      SELECT 
        COUNT(*) as total_requests,
        COUNT(*) FILTER (WHERE status = 'pending') as pending_requests,
        COUNT(*) FILTER (WHERE status = 'approved') as approved_requests,
        COUNT(*) FILTER (WHERE status = 'rejected') as rejected_requests,
        COALESCE(SUM(end_date - start_date + 1), 0) as total_days,
        COALESCE(SUM(end_date - start_date + 1) FILTER (WHERE status = 'approved'), 0) as approved_days
      FROM leaves
      ${whereClause}
    `);
    const result =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[90]++, await (0, database_1.getPool)().query(query, queryParams));
    const stats =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[91]++, result.rows[0]);
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[92]++;
    return {
      totalRequests:
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[24][0]++, parseInt(stats.total_requests)) ||
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[24][1]++, 0),
      pendingRequests:
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[25][0]++, parseInt(stats.pending_requests)) ||
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[25][1]++, 0),
      approvedRequests:
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[26][0]++, parseInt(stats.approved_requests)) ||
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[26][1]++, 0),
      rejectedRequests:
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[27][0]++, parseInt(stats.rejected_requests)) ||
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[27][1]++, 0),
      totalDays:
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[28][0]++, parseFloat(stats.total_days)) ||
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[28][1]++, 0),
      approvedDays:
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[29][0]++, parseFloat(stats.approved_days)) ||
      /* istanbul ignore next */
      (cov_2gaf8ggrof().b[29][1]++, 0)
    };
  }
  /**
   * Check for overlapping leave requests
   */
  async checkOverlappingLeaves(employeeId, startDate, endDate, excludeId) {
    /* istanbul ignore next */
    cov_2gaf8ggrof().f[7]++;
    const whereConditions =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[93]++, ['employee_id = $1', 'status = \'approved\'', '((start_date <= $2 AND end_date >= $2) OR (start_date <= $3 AND end_date >= $3) OR (start_date >= $2 AND end_date <= $3))']);
    const queryParams =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[94]++, [employeeId, startDate, endDate]);
    let paramIndex =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[95]++, 4);
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[96]++;
    if (excludeId) {
      /* istanbul ignore next */
      cov_2gaf8ggrof().b[30][0]++;
      cov_2gaf8ggrof().s[97]++;
      whereConditions.push(`id != $${paramIndex}`);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[98]++;
      queryParams.push(excludeId);
      /* istanbul ignore next */
      cov_2gaf8ggrof().s[99]++;
      paramIndex++;
    } else
    /* istanbul ignore next */
    {
      cov_2gaf8ggrof().b[30][1]++;
    }
    const query =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[100]++, `
      SELECT 
        id,
        employee_id as "employeeId",
        leave_type as "leaveType",
        start_date as "startDate",
        end_date as "endDate",
        (end_date - start_date + 1) as "totalDays",
        status,
        approver_id as "approvedBy",
        created_at as "createdAt",
        updated_at as "updatedAt"
      FROM leaves
      WHERE ${whereConditions.join(' AND ')}
    `);
    const result =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[101]++, await (0, database_1.getPool)().query(query, queryParams));
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[102]++;
    return result.rows;
  }
  /**
   * Delete leave request
   */
  async deleteLeave(id) {
    /* istanbul ignore next */
    cov_2gaf8ggrof().f[8]++;
    const query =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[103]++, 'DELETE FROM leaves WHERE id = $1');
    const result =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[104]++, await (0, database_1.getPool)().query(query, [id]));
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[105]++;
    return result.rowCount ?
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[31][0]++, result.rowCount > 0) :
    /* istanbul ignore next */
    (cov_2gaf8ggrof().b[31][1]++, false);
  }
  /**
   * Get leave request count
   */
  async getLeaveCount() {
    /* istanbul ignore next */
    cov_2gaf8ggrof().f[9]++;
    const query =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[106]++, 'SELECT COUNT(*) as count FROM leaves');
    const result =
    /* istanbul ignore next */
    (cov_2gaf8ggrof().s[107]++, await (0, database_1.getPool)().query(query));
    /* istanbul ignore next */
    cov_2gaf8ggrof().s[108]++;
    return parseInt(result.rows[0].count);
  }
}
/* istanbul ignore next */
cov_2gaf8ggrof().s[109]++;
exports.LeaveModel = LeaveModel;
/* istanbul ignore next */
cov_2gaf8ggrof().s[110]++;
exports.leaveModel = new LeaveModel();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,