{"file":"/home/kim/tito/server/tests/utils/mockDatabaseService.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/utils/mockDatabaseService.ts"],"sourcesContent":["/**\n * Mock Database Service for Testing\n * \n * This mock service provides the same interface as the real database service\n * but stores data in memory instead of connecting to PostgreSQL.\n */\n\nexport interface MockQueryResult {\n  rows: any[];\n  rowCount: number;\n}\n\nexport interface MockDatabaseData {\n  [tableName: string]: {\n    [id: string]: any;\n  };\n}\n\nexport class MockDatabaseService {\n  private data: MockDatabaseData = {};\n  private sequenceCounters: { [sequenceName: string]: number } = {};\n\n  constructor() {\n    this.initializeSequences();\n  }\n\n  private initializeSequences(): void {\n    // Initialize sequence counters\n    this.sequenceCounters = {\n      users_id_seq: 1,\n      departments_id_seq: 1,\n      employees_id_seq: 1,\n      attendance_records_id_seq: 1,\n      attendance_sessions_id_seq: 1,\n      time_correction_requests_id_seq: 1,\n      overtime_requests_id_seq: 1,\n      leaves_id_seq: 1,\n      leave_balances_id_seq: 1,\n      payroll_periods_id_seq: 1,\n      payroll_records_id_seq: 1,\n      payroll_deductions_id_seq: 1,\n      deduction_types_id_seq: 1,\n      payroll_approvals_id_seq: 1,\n      system_settings_id_seq: 1,\n      id_cards_id_seq: 1\n    };\n\n    // Initialize table data\n    this.data = {\n      users: {},\n      departments: {},\n      employees: {},\n      attendance_records: {},\n      attendance_sessions: {},\n      time_correction_requests: {},\n      overtime_requests: {},\n      leaves: {},\n      leave_balances: {},\n      payroll_periods: {},\n      payroll_records: {},\n      payroll_deductions: {},\n      deduction_types: {},\n      payroll_approvals: {},\n      system_settings: {},\n      id_cards: {}\n    };\n  }\n\n  async query(query: string, values: any[] = []): Promise<MockQueryResult> {\n    const normalizedQuery = query.trim().toLowerCase();\n    \n    // Handle INSERT queries\n    if (normalizedQuery.startsWith('insert into')) {\n      return this.handleInsert(query, values);\n    }\n    \n    // Handle SELECT queries\n    if (normalizedQuery.startsWith('select')) {\n      return this.handleSelect(query, values);\n    }\n    \n    // Handle UPDATE queries\n    if (normalizedQuery.startsWith('update')) {\n      return this.handleUpdate(query, values);\n    }\n    \n    // Handle DELETE queries\n    if (normalizedQuery.startsWith('delete')) {\n      return this.handleDelete(query, values);\n    }\n    \n    // Handle ALTER SEQUENCE queries\n    if (normalizedQuery.startsWith('alter sequence')) {\n      return this.handleAlterSequence(query, values);\n    }\n    \n    // Handle SET queries\n    if (normalizedQuery.startsWith('set')) {\n      return { rows: [], rowCount: 0 };\n    }\n    \n    // Default response for other queries\n    return { rows: [], rowCount: 0 };\n  }\n\n  private handleInsert(query: string, values: any[]): MockQueryResult {\n    // Extract table name from INSERT query\n    const tableMatch = query.match(/insert into\\s+(\\w+)/i);\n    if (!tableMatch) {\n      return { rows: [], rowCount: 0 };\n    }\n    \n    const tableName = tableMatch[1];\n    \n    // Generate ID if not provided\n    const id = this.generateId(tableName);\n    \n    // Create row data\n    const row: any = { id };\n    \n    // Map values to columns (simplified - assumes values are in order)\n    const columnMatch = query.match(/insert into\\s+\\w+\\s*\\(([^)]+)\\)/i);\n    if (columnMatch) {\n      const columns = columnMatch[1].split(',').map(col => col.trim());\n      columns.forEach((column, index) => {\n        if (values[index] !== undefined) {\n          row[column] = values[index];\n        }\n      });\n    }\n    \n    // Store in mock data\n    this.data[tableName][id] = row;\n    \n    // Return the inserted row\n    return { rows: [row], rowCount: 1 };\n  }\n\n  private handleSelect(query: string, values: any[]): MockQueryResult {\n    // Extract table name from SELECT query\n    const tableMatch = query.match(/from\\s+(\\w+)/i);\n    if (!tableMatch) {\n      return { rows: [], rowCount: 0 };\n    }\n    \n    const tableName = tableMatch[1];\n    const tableData = this.data[tableName] || {};\n    \n    // Simple WHERE clause handling\n    let rows = Object.values(tableData);\n    \n    // Handle WHERE id = $1\n    if (query.includes('where id = $1') && values[0]) {\n      rows = rows.filter(row => row.id === values[0]);\n    }\n    \n    // Handle WHERE email = $1\n    if (query.includes('where email = $1') && values[0]) {\n      rows = rows.filter(row => row.email === values[0]);\n    }\n    \n    // Handle ORDER BY\n    if (query.includes('order by')) {\n      if (query.includes('order by first_name, last_name')) {\n        rows.sort((a, b) => {\n          const nameA = `${a.first_name || ''} ${a.last_name || ''}`.trim();\n          const nameB = `${b.first_name || ''} ${b.last_name || ''}`.trim();\n          return nameA.localeCompare(nameB);\n        });\n      }\n    }\n    \n    // Handle LIMIT\n    if (query.includes('limit')) {\n      const limitMatch = query.match(/limit\\s+(\\d+)/i);\n      if (limitMatch) {\n        const limit = parseInt(limitMatch[1]);\n        rows = rows.slice(0, limit);\n      }\n    }\n    \n    return { rows, rowCount: rows.length };\n  }\n\n  private handleUpdate(query: string, values: any[]): MockQueryResult {\n    // Extract table name from UPDATE query\n    const tableMatch = query.match(/update\\s+(\\w+)/i);\n    if (!tableMatch) {\n      return { rows: [], rowCount: 0 };\n    }\n    \n    const tableName = tableMatch[1];\n    const tableData = this.data[tableName] || {};\n    \n    // Handle WHERE id = $1\n    if (query.includes('where id = $1') && values[0]) {\n      const id = values[0];\n      if (tableData[id]) {\n        // Update the row (simplified - assumes SET clause is at the end)\n        const setMatch = query.match(/set\\s+(.+?)\\s+where/i);\n        if (setMatch) {\n          const setClause = setMatch[1];\n          const updates = setClause.split(',').map(update => update.trim());\n          updates.forEach(update => {\n            const [column, value] = update.split('=').map(part => part.trim());\n            if (value.startsWith('$')) {\n              const paramIndex = parseInt(value.substring(1)) - 1;\n              if (values[paramIndex] !== undefined) {\n                tableData[id][column] = values[paramIndex];\n              }\n            }\n          });\n        }\n        return { rows: [tableData[id]], rowCount: 1 };\n      }\n    }\n    \n    return { rows: [], rowCount: 0 };\n  }\n\n  private handleDelete(query: string, values: any[]): MockQueryResult {\n    // Extract table name from DELETE query\n    const tableMatch = query.match(/delete from\\s+(\\w+)/i);\n    if (!tableMatch) {\n      return { rows: [], rowCount: 0 };\n    }\n    \n    const tableName = tableMatch[1];\n    const tableData = this.data[tableName] || {};\n    \n    // Handle WHERE id = $1\n    if (query.includes('where id = $1') && values[0]) {\n      const id = values[0];\n      if (tableData[id]) {\n        delete tableData[id];\n        return { rows: [], rowCount: 1 };\n      }\n    }\n    \n    // Handle DELETE FROM table (no WHERE clause)\n    if (!query.includes('where')) {\n      const rowCount = Object.keys(tableData).length;\n      this.data[tableName] = {};\n      return { rows: [], rowCount };\n    }\n    \n    return { rows: [], rowCount: 0 };\n  }\n\n  private handleAlterSequence(query: string, _values: any[]): MockQueryResult {\n    // Extract sequence name from ALTER SEQUENCE query\n    const sequenceMatch = query.match(/alter sequence\\s+(\\w+)/i);\n    if (sequenceMatch) {\n      const sequenceName = sequenceMatch[1];\n      this.sequenceCounters[sequenceName] = 1;\n    }\n    \n    return { rows: [], rowCount: 0 };\n  }\n\n  private generateId(_tableName: string): string {\n    // Generate a UUID-like ID\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 15);\n    return `${timestamp}-${random}`;\n  }\n\n  // Test utilities\n  getData(): MockDatabaseData {\n    return { ...this.data };\n  }\n\n  clearData(): void {\n    this.initializeSequences();\n  }\n\n  setData(tableName: string, data: any): void {\n    this.data[tableName] = { ...data };\n  }\n\n  getTableData(tableName: string): any {\n    return { ...this.data[tableName] };\n  }\n}\n\n// Singleton instance for tests\nexport const mockDatabaseService = new MockDatabaseService();\n\n// Export for use in tests\nexport default mockDatabaseService;\n"],"version":3}