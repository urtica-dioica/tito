9ea6625b8b949c2fb54837855e26ae42
"use strict";

/* istanbul ignore next */
function cov_1pjh8gmull() {
  var path = "/home/kim/tito/server/src/controllers/scheduler/schedulerController.ts";
  var hash = "8c1f7886c5a854db59f2361a943cbd70e60608ce";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/controllers/scheduler/schedulerController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 67
        }
      },
      "2": {
        start: {
          line: 4,
          column: 27
        },
        end: {
          line: 4,
          column: 79
        }
      },
      "3": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "4": {
        start: {
          line: 11,
          column: 27
        },
        end: {
          line: 11,
          column: 74
        }
      },
      "5": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 18,
          column: 15
        }
      },
      "6": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 27,
          column: 15
        }
      },
      "7": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "8": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 56
        }
      },
      "9": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 42,
          column: 15
        }
      },
      "10": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "11": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "12": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 55
        }
      },
      "13": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "14": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "15": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "16": {
        start: {
          line: 83,
          column: 33
        },
        end: {
          line: 83,
          column: 97
        }
      },
      "17": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "18": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 99,
          column: 15
        }
      },
      "19": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "20": {
        start: {
          line: 107,
          column: 40
        },
        end: {
          line: 107,
          column: 48
        }
      },
      "21": {
        start: {
          line: 108,
          column: 33
        },
        end: {
          line: 108,
          column: 119
        }
      },
      "22": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 115,
          column: 15
        }
      },
      "23": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "24": {
        start: {
          line: 128,
          column: 0
        },
        end: {
          line: 128,
          column: 50
        }
      },
      "25": {
        start: {
          line: 129,
          column: 0
        },
        end: {
          line: 129,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 26
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 25
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 57
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 41
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 81
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 43
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 105
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 23
          },
          end: {
            line: 24,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 48
          },
          end: {
            line: 24,
            column: 61
          }
        }, {
          start: {
            line: 24,
            column: 64
          },
          end: {
            line: 24,
            column: 79
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 23
          },
          end: {
            line: 48,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 48
          },
          end: {
            line: 48,
            column: 61
          }
        }, {
          start: {
            line: 48,
            column: 64
          },
          end: {
            line: 48,
            column: 79
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 72,
            column: 23
          },
          end: {
            line: 72,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 48
          },
          end: {
            line: 72,
            column: 61
          }
        }, {
          start: {
            line: 72,
            column: 64
          },
          end: {
            line: 72,
            column: 79
          }
        }],
        line: 72
      },
      "3": {
        loc: {
          start: {
            line: 96,
            column: 23
          },
          end: {
            line: 96,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 48
          },
          end: {
            line: 96,
            column: 61
          }
        }, {
          start: {
            line: 96,
            column: 64
          },
          end: {
            line: 96,
            column: 79
          }
        }],
        line: 96
      },
      "4": {
        loc: {
          start: {
            line: 107,
            column: 20
          },
          end: {
            line: 107,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 107,
            column: 33
          },
          end: {
            line: 107,
            column: 35
          }
        }],
        line: 107
      },
      "5": {
        loc: {
          start: {
            line: 121,
            column: 23
          },
          end: {
            line: 121,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 48
          },
          end: {
            line: 121,
            column: 61
          }
        }, {
          start: {
            line: 121,
            column: 64
          },
          end: {
            line: 121,
            column: 79
          }
        }],
        line: 121
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/controllers/scheduler/schedulerController.ts",
      mappings: "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",
      names: [],
      sources: ["/home/kim/tito/server/src/controllers/scheduler/schedulerController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\nimport { schedulerService } from '../../services/scheduler/schedulerService';\nimport { ApiResponse } from '../../utils/types/express';\n\nexport class SchedulerController {\n  /**\n   * Get scheduler status\n   */\n  async getStatus(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const status = schedulerService.getStatus();\n\n      res.status(200).json({\n        success: true,\n        message: 'Scheduler status retrieved successfully',\n        data: status,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get scheduler status',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  /**\n   * Start scheduler service\n   */\n  async start(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      schedulerService.start();\n\n      res.status(200).json({\n        success: true,\n        message: 'Scheduler service started successfully',\n        data: { status: 'started' },\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to start scheduler service',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  /**\n   * Stop scheduler service\n   */\n  async stop(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      schedulerService.stop();\n\n      res.status(200).json({\n        success: true,\n        message: 'Scheduler service stopped successfully',\n        data: { status: 'stopped' },\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to stop scheduler service',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  /**\n   * Manually trigger selfie cleanup\n   */\n  async triggerSelfieCleanup(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const deletedCount = await schedulerService.triggerSelfieCleanup();\n\n      res.status(200).json({\n        success: true,\n        message: 'Selfie cleanup triggered successfully',\n        data: { deletedCount },\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to trigger selfie cleanup',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  /**\n   * Manually trigger audit log cleanup\n   */\n  async triggerAuditLogCleanup(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { daysToKeep = 90 } = req.body;\n      const deletedCount = await schedulerService.triggerAuditLogCleanup(parseInt(daysToKeep));\n\n      res.status(200).json({\n        success: true,\n        message: 'Audit log cleanup triggered successfully',\n        data: { deletedCount },\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to trigger audit log cleanup',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n}\n\nexport const schedulerController = new SchedulerController();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8c1f7886c5a854db59f2361a943cbd70e60608ce"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1pjh8gmull = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1pjh8gmull();
cov_1pjh8gmull().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1pjh8gmull().s[1]++;
exports.schedulerController = exports.SchedulerController = void 0;
const schedulerService_1 =
/* istanbul ignore next */
(cov_1pjh8gmull().s[2]++, require("../../services/scheduler/schedulerService"));
class SchedulerController {
  /**
   * Get scheduler status
   */
  async getStatus(req, res) {
    /* istanbul ignore next */
    cov_1pjh8gmull().f[0]++;
    cov_1pjh8gmull().s[3]++;
    try {
      const status =
      /* istanbul ignore next */
      (cov_1pjh8gmull().s[4]++, schedulerService_1.schedulerService.getStatus());
      /* istanbul ignore next */
      cov_1pjh8gmull().s[5]++;
      res.status(200).json({
        success: true,
        message: 'Scheduler status retrieved successfully',
        data: status,
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1pjh8gmull().s[6]++;
      res.status(500).json({
        success: false,
        message: 'Failed to get scheduler status',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1pjh8gmull().b[0][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1pjh8gmull().b[0][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  /**
   * Start scheduler service
   */
  async start(req, res) {
    /* istanbul ignore next */
    cov_1pjh8gmull().f[1]++;
    cov_1pjh8gmull().s[7]++;
    try {
      /* istanbul ignore next */
      cov_1pjh8gmull().s[8]++;
      schedulerService_1.schedulerService.start();
      /* istanbul ignore next */
      cov_1pjh8gmull().s[9]++;
      res.status(200).json({
        success: true,
        message: 'Scheduler service started successfully',
        data: {
          status: 'started'
        },
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1pjh8gmull().s[10]++;
      res.status(500).json({
        success: false,
        message: 'Failed to start scheduler service',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1pjh8gmull().b[1][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1pjh8gmull().b[1][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  /**
   * Stop scheduler service
   */
  async stop(req, res) {
    /* istanbul ignore next */
    cov_1pjh8gmull().f[2]++;
    cov_1pjh8gmull().s[11]++;
    try {
      /* istanbul ignore next */
      cov_1pjh8gmull().s[12]++;
      schedulerService_1.schedulerService.stop();
      /* istanbul ignore next */
      cov_1pjh8gmull().s[13]++;
      res.status(200).json({
        success: true,
        message: 'Scheduler service stopped successfully',
        data: {
          status: 'stopped'
        },
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1pjh8gmull().s[14]++;
      res.status(500).json({
        success: false,
        message: 'Failed to stop scheduler service',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1pjh8gmull().b[2][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1pjh8gmull().b[2][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  /**
   * Manually trigger selfie cleanup
   */
  async triggerSelfieCleanup(req, res) {
    /* istanbul ignore next */
    cov_1pjh8gmull().f[3]++;
    cov_1pjh8gmull().s[15]++;
    try {
      const deletedCount =
      /* istanbul ignore next */
      (cov_1pjh8gmull().s[16]++, await schedulerService_1.schedulerService.triggerSelfieCleanup());
      /* istanbul ignore next */
      cov_1pjh8gmull().s[17]++;
      res.status(200).json({
        success: true,
        message: 'Selfie cleanup triggered successfully',
        data: {
          deletedCount
        },
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1pjh8gmull().s[18]++;
      res.status(500).json({
        success: false,
        message: 'Failed to trigger selfie cleanup',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1pjh8gmull().b[3][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1pjh8gmull().b[3][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
  /**
   * Manually trigger audit log cleanup
   */
  async triggerAuditLogCleanup(req, res) {
    /* istanbul ignore next */
    cov_1pjh8gmull().f[4]++;
    cov_1pjh8gmull().s[19]++;
    try {
      const {
        daysToKeep =
        /* istanbul ignore next */
        (cov_1pjh8gmull().b[4][0]++, 90)
      } =
      /* istanbul ignore next */
      (cov_1pjh8gmull().s[20]++, req.body);
      const deletedCount =
      /* istanbul ignore next */
      (cov_1pjh8gmull().s[21]++, await schedulerService_1.schedulerService.triggerAuditLogCleanup(parseInt(daysToKeep)));
      /* istanbul ignore next */
      cov_1pjh8gmull().s[22]++;
      res.status(200).json({
        success: true,
        message: 'Audit log cleanup triggered successfully',
        data: {
          deletedCount
        },
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1pjh8gmull().s[23]++;
      res.status(500).json({
        success: false,
        message: 'Failed to trigger audit log cleanup',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1pjh8gmull().b[5][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1pjh8gmull().b[5][1]++, 'Unknown error'),
        timestamp: new Date().toISOString(),
        requestId: req.requestId
      });
    }
  }
}
/* istanbul ignore next */
cov_1pjh8gmull().s[24]++;
exports.SchedulerController = SchedulerController;
/* istanbul ignore next */
cov_1pjh8gmull().s[25]++;
exports.schedulerController = new SchedulerController();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,