{"version":3,"names":["schedulerService_1","cov_1pjh8gmull","s","require","SchedulerController","getStatus","req","res","f","status","schedulerService","json","success","message","data","timestamp","Date","toISOString","requestId","error","Error","b","start","stop","triggerSelfieCleanup","deletedCount","triggerAuditLogCleanup","daysToKeep","body","parseInt","exports","schedulerController"],"sources":["/home/kim/tito/server/src/controllers/scheduler/schedulerController.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { schedulerService } from '../../services/scheduler/schedulerService';\nimport { ApiResponse } from '../../utils/types/express';\n\nexport class SchedulerController {\n  /**\n   * Get scheduler status\n   */\n  async getStatus(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const status = schedulerService.getStatus();\n\n      res.status(200).json({\n        success: true,\n        message: 'Scheduler status retrieved successfully',\n        data: status,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get scheduler status',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  /**\n   * Start scheduler service\n   */\n  async start(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      schedulerService.start();\n\n      res.status(200).json({\n        success: true,\n        message: 'Scheduler service started successfully',\n        data: { status: 'started' },\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to start scheduler service',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  /**\n   * Stop scheduler service\n   */\n  async stop(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      schedulerService.stop();\n\n      res.status(200).json({\n        success: true,\n        message: 'Scheduler service stopped successfully',\n        data: { status: 'stopped' },\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to stop scheduler service',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  /**\n   * Manually trigger selfie cleanup\n   */\n  async triggerSelfieCleanup(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const deletedCount = await schedulerService.triggerSelfieCleanup();\n\n      res.status(200).json({\n        success: true,\n        message: 'Selfie cleanup triggered successfully',\n        data: { deletedCount },\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to trigger selfie cleanup',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n\n  /**\n   * Manually trigger audit log cleanup\n   */\n  async triggerAuditLogCleanup(req: Request, res: Response<ApiResponse>): Promise<void> {\n    try {\n      const { daysToKeep = 90 } = req.body;\n      const deletedCount = await schedulerService.triggerAuditLogCleanup(parseInt(daysToKeep));\n\n      res.status(200).json({\n        success: true,\n        message: 'Audit log cleanup triggered successfully',\n        data: { deletedCount },\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to trigger audit log cleanup',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId\n      });\n    }\n  }\n}\n\nexport const schedulerController = new SchedulerController();\n"],"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","ignoreList":[]}