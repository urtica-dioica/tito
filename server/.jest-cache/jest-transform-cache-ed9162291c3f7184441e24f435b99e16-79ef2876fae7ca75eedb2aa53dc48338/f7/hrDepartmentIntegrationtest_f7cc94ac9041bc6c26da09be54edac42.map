{"file":"/home/kim/tito/server/tests/integration/hrDepartmentIntegration.test.ts","mappings":"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","names":[],"sources":["/home/kim/tito/server/tests/integration/hrDepartmentIntegration.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterEach } from '@jest/globals';\nimport { DepartmentService } from '../../src/services/hr/departmentService';\nimport { TestHelpers } from '../utils/testHelpers';\nimport { initializeTestConnections } from '../setup';\n\n// Create service instances\nconst departmentService = new DepartmentService();\n\ndescribe('HR-Department Integration', () => {\n  let testHelpers: TestHelpers;\n  let createdUserIds: string[] = [];\n  let createdEmployeeIds: string[] = [];\n  let createdDepartmentIds: string[] = [];\n\n  beforeAll(async () => {\n    const { testDbPool } = await initializeTestConnections();\n    testHelpers = new TestHelpers(testDbPool);\n  });\n\n  afterEach(async () => {\n    // Clean up created data after each test\n    for (const employeeId of createdEmployeeIds) { \n      await testHelpers.deleteEmployee(employeeId).catch(() => {}); \n    }\n    for (const userId of createdUserIds) { \n      await testHelpers.deleteUser(userId).catch(() => {}); \n    }\n    for (const departmentId of createdDepartmentIds) { \n      await testHelpers.deleteDepartment(departmentId).catch(() => {}); \n    }\n    createdEmployeeIds = [];\n    createdUserIds = [];\n    createdDepartmentIds = [];\n  });\n\n  describe('Department Management Workflow', () => {\n    it('should handle complete department management workflow', async () => {\n      // 1. Create department\n      const department = await testHelpers.createTestDepartment({\n        name: 'Engineering',\n        description: 'Software Engineering Department'\n      });\n      createdDepartmentIds.push(department.id);\n\n      // 2. Test department retrieval\n      const departments = await departmentService.listDepartments();\n      expect(departments).toHaveProperty('departments');\n      expect(departments).toHaveProperty('total');\n      expect(Array.isArray(departments.departments)).toBe(true);\n      expect(typeof departments.total).toBe('number');\n\n      // 3. Test specific department retrieval\n      const specificDepartment = await departmentService.getDepartmentWithHead(department.id);\n      expect(specificDepartment).toHaveProperty('id');\n      expect(specificDepartment?.id).toBe(department.id);\n      expect(specificDepartment?.name).toBe('Engineering');\n\n      // 4. Create department head user\n      const departmentHead = await testHelpers.createTestUser({\n        email: 'depthead@example.com',\n        password: 'DeptHeadPassword123!',\n        role: 'department_head'\n      });\n      createdUserIds.push(departmentHead.id);\n\n      // 5. Create department head employee\n      const departmentHeadEmployee = await testHelpers.createTestEmployee({\n        userId: departmentHead.id,\n        departmentId: department.id,\n        employmentType: 'regular',\n        baseSalary: 80000\n      });\n      createdEmployeeIds.push(departmentHeadEmployee.id);\n\n      // 6. Test department operations\n      const departmentStats = await departmentService.getDepartmentStats();\n      expect(departmentStats).toHaveProperty('total');\n      expect(departmentStats).toHaveProperty('active');\n      expect(typeof departmentStats.total).toBe('number');\n    });\n\n    it('should handle department hierarchy management', async () => {\n      // 1. Create parent department\n      const parentDepartment = await testHelpers.createTestDepartment({\n        name: 'Technology',\n        description: 'Technology Division'\n      });\n      createdDepartmentIds.push(parentDepartment.id);\n\n      // 2. Create child departments\n      const childDepartments = [];\n      for (let i = 0; i < 2; i++) {\n        const childDept = await testHelpers.createTestDepartment({\n          name: `SubDepartment${i + 1}`,\n          description: `Sub Department ${i + 1} under Technology`\n        });\n        childDepartments.push(childDept);\n        createdDepartmentIds.push(childDept.id);\n      }\n\n      // 3. Test department listing\n      const allDepartments = await departmentService.listDepartments();\n      expect(allDepartments.departments.length).toBeGreaterThanOrEqual(3);\n\n      // 4. Create employees in different departments\n      const employees = [];\n      for (let i = 0; i < 3; i++) {\n        const user = await testHelpers.createTestUser({\n          email: `employee${i}@example.com`,\n          password: 'EmployeePassword123!',\n          role: 'employee'\n        });\n        createdUserIds.push(user.id);\n\n        const employee = await testHelpers.createTestEmployee({\n          userId: user.id,\n          departmentId: i === 0 ? parentDepartment.id : childDepartments[i - 1].id,\n          employmentType: 'regular',\n          baseSalary: 50000 + (i * 10000)\n        });\n        employees.push(employee);\n        createdEmployeeIds.push(employee.id);\n      }\n\n      // 5. Test department statistics with multiple departments\n      const departmentStats = await departmentService.getDepartmentStats();\n      expect(departmentStats.total).toBeGreaterThanOrEqual(3);\n    });\n  });\n\n  describe('Department Operations Integration', () => {\n    it('should handle department operations correctly', async () => {\n      // 1. Create department\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n\n      // 2. Test department retrieval\n      const departments = await departmentService.listDepartments();\n      expect(departments).toHaveProperty('departments');\n      expect(departments).toHaveProperty('total');\n      expect(Array.isArray(departments.departments)).toBe(true);\n\n      // 3. Test specific department retrieval\n      const specificDepartment = await departmentService.getDepartmentWithHead(department.id);\n      expect(specificDepartment).toHaveProperty('id');\n      expect(specificDepartment?.id).toBe(department.id);\n    });\n  });\n\n  describe('Service Integration Patterns', () => {\n    it('should handle concurrent department operations', async () => {\n      // 1. Create test data\n      const department = await testHelpers.createTestDepartment();\n      createdDepartmentIds.push(department.id);\n\n      // 2. Perform concurrent operations\n      const promises = [\n        departmentService.listDepartments(),\n        departmentService.getDepartmentWithHead(department.id),\n        departmentService.listDepartments()\n      ];\n\n      const results = await Promise.all(promises);\n\n      // 3. Verify all operations completed successfully\n      expect(results).toHaveLength(3);\n      results.forEach((result: any) => {\n        expect(result).toBeDefined();\n      });\n\n      // 4. Verify specific result types\n      expect(results[0]).toHaveProperty('departments');\n      expect(results[1]).toHaveProperty('id');\n      expect(results[2]).toHaveProperty('departments');\n    });\n\n    it('should handle error scenarios gracefully', async () => {\n      // Test with non-existent department\n      await expect(\n        departmentService.getDepartmentWithHead('non-existent-id')\n      ).rejects.toThrow('Department not found');\n\n      // Test department stats with no data\n      const departmentStats = await departmentService.getDepartmentStats();\n      expect(departmentStats).toHaveProperty('total');\n      expect(departmentStats).toHaveProperty('active');\n      expect(typeof departmentStats.total).toBe('number');\n    });\n\n    it('should maintain data consistency', async () => {\n      // 1. Create department\n      const department = await testHelpers.createTestDepartment({\n        name: 'Consistency Test Department'\n      });\n      createdDepartmentIds.push(department.id);\n\n      // 2. Verify data consistency\n      const departmentData = await departmentService.getDepartmentWithHead(department.id);\n      expect(departmentData?.id).toBe(department.id);\n      expect(departmentData?.name).toBe('Consistency Test Department');\n\n      // 3. Verify statistics consistency\n      const departmentStats = await departmentService.getDepartmentStats();\n      expect(departmentStats.total).toBeGreaterThanOrEqual(1);\n    });\n  });\n});\n"],"version":3}