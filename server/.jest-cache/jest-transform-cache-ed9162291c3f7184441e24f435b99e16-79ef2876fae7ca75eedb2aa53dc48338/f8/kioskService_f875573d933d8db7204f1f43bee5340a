7a86221ac9416e619c0937116ea56ebe
"use strict";

/* istanbul ignore next */
function cov_2sefjesn() {
  var path = "/home/kim/tito/server/src/services/kiosk/kioskService.ts";
  var hash = "3197a2ab476e56c24a000d8e1eb167ccc2e3e63e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/kim/tito/server/src/services/kiosk/kioskService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 19
        },
        end: {
          line: 3,
          column: 51
        }
      },
      "2": {
        start: {
          line: 4,
          column: 28
        },
        end: {
          line: 4,
          column: 70
        }
      },
      "3": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "4": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 18,
          column: 13
        }
      },
      "5": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 48
        }
      },
      "6": {
        start: {
          line: 17,
          column: 16
        },
        end: {
          line: 17,
          column: 58
        }
      },
      "7": {
        start: {
          line: 20,
          column: 31
        },
        end: {
          line: 20,
          column: 48
        }
      },
      "8": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 23,
          column: 13
        }
      },
      "9": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 68
        }
      },
      "10": {
        start: {
          line: 25,
          column: 26
        },
        end: {
          line: 45,
          column: 7
        }
      },
      "11": {
        start: {
          line: 46,
          column: 27
        },
        end: {
          line: 46,
          column: 85
        }
      },
      "12": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "13": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 66
        }
      },
      "14": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 34
        }
      },
      "15": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 68
        }
      },
      "16": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 24
        }
      },
      "17": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "18": {
        start: {
          line: 62,
          column: 74
        },
        end: {
          line: 62,
          column: 78
        }
      },
      "19": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 125
        }
      },
      "20": {
        start: {
          line: 65,
          column: 26
        },
        end: {
          line: 65,
          column: 64
        }
      },
      "21": {
        start: {
          line: 66,
          column: 42
        },
        end: {
          line: 71,
          column: 7
        }
      },
      "22": {
        start: {
          line: 72,
          column: 43
        },
        end: {
          line: 72,
          column: 124
        }
      },
      "23": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "24": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 71
        }
      },
      "25": {
        start: {
          line: 80,
          column: 44
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "26": {
        start: {
          line: 84,
          column: 39
        },
        end: {
          line: 84,
          column: 118
        }
      },
      "27": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 63
        }
      },
      "28": {
        start: {
          line: 87,
          column: 24
        },
        end: {
          line: 87,
          column: 34
        }
      },
      "29": {
        start: {
          line: 89,
          column: 41
        },
        end: {
          line: 98,
          column: 7
        }
      },
      "30": {
        start: {
          line: 99,
          column: 36
        },
        end: {
          line: 99,
          column: 116
        }
      },
      "31": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "32": {
        start: {
          line: 103,
          column: 32
        },
        end: {
          line: 103,
          column: 55
        }
      },
      "33": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 157,
          column: 17
        }
      },
      "34": {
        start: {
          line: 106,
          column: 40
        },
        end: {
          line: 119,
          column: 11
        }
      },
      "35": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 127,
          column: 23
        }
      },
      "36": {
        start: {
          line: 129,
          column: 21
        },
        end: {
          line: 157,
          column: 17
        }
      },
      "37": {
        start: {
          line: 131,
          column: 40
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "38": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 152,
          column: 23
        }
      },
      "39": {
        start: {
          line: 156,
          column: 20
        },
        end: {
          line: 156,
          column: 133
        }
      },
      "40": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 129
        }
      },
      "41": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 81
        }
      },
      "42": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 34
        }
      },
      "43": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 64
        }
      },
      "44": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 24
        }
      },
      "45": {
        start: {
          line: 175,
          column: 24
        },
        end: {
          line: 175,
          column: 76
        }
      },
      "46": {
        start: {
          line: 176,
          column: 25
        },
        end: {
          line: 176,
          column: 78
        }
      },
      "47": {
        start: {
          line: 177,
          column: 28
        },
        end: {
          line: 197,
          column: 5
        }
      },
      "48": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 207,
          column: 11
        }
      },
      "49": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "50": {
        start: {
          line: 214,
          column: 26
        },
        end: {
          line: 229,
          column: 7
        }
      },
      "51": {
        start: {
          line: 230,
          column: 27
        },
        end: {
          line: 230,
          column: 85
        }
      },
      "52": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 66
        }
      },
      "53": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 67
        }
      },
      "54": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 24
        }
      },
      "55": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "56": {
        start: {
          line: 243,
          column: 26
        },
        end: {
          line: 258,
          column: 7
        }
      },
      "57": {
        start: {
          line: 259,
          column: 27
        },
        end: {
          line: 259,
          column: 92
        }
      },
      "58": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 31
        }
      },
      "59": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 70
        }
      },
      "60": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 24
        }
      },
      "61": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "62": {
        start: {
          line: 272,
          column: 81
        },
        end: {
          line: 272,
          column: 85
        }
      },
      "63": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 141
        }
      },
      "64": {
        start: {
          line: 275,
          column: 35
        },
        end: {
          line: 281,
          column: 13
        }
      },
      "65": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 98
        }
      },
      "66": {
        start: {
          line: 284,
          column: 26
        },
        end: {
          line: 284,
          column: 36
        }
      },
      "67": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 39
        }
      },
      "68": {
        start: {
          line: 286,
          column: 26
        },
        end: {
          line: 308,
          column: 7
        }
      },
      "69": {
        start: {
          line: 309,
          column: 27
        },
        end: {
          line: 309,
          column: 127
        }
      },
      "70": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 312,
          column: 13
        }
      },
      "71": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 311,
          column: 82
        }
      },
      "72": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 90
        }
      },
      "73": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 34
        }
      },
      "74": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 75
        }
      },
      "75": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 24
        }
      },
      "76": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 331,
          column: 9
        }
      },
      "77": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 98
        }
      },
      "78": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 73
        }
      },
      "79": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 24
        }
      },
      "80": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 343,
          column: 9
        }
      },
      "81": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 113
        }
      },
      "82": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 72
        }
      },
      "83": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 24
        }
      },
      "84": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "85": {
        start: {
          line: 350,
          column: 26
        },
        end: {
          line: 350,
          column: 36
        }
      },
      "86": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 39
        }
      },
      "87": {
        start: {
          line: 353,
          column: 29
        },
        end: {
          line: 353,
          column: 76
        }
      },
      "88": {
        start: {
          line: 354,
          column: 34
        },
        end: {
          line: 358,
          column: 14
        }
      },
      "89": {
        start: {
          line: 355,
          column: 36
        },
        end: {
          line: 355,
          column: 63
        }
      },
      "90": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 356,
          column: 49
        }
      },
      "91": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 357,
          column: 65
        }
      },
      "92": {
        start: {
          line: 360,
          column: 32
        },
        end: {
          line: 360,
          column: 77
        }
      },
      "93": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 366,
          column: 14
        }
      },
      "94": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 76
        }
      },
      "95": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 24
        }
      },
      "96": {
        start: {
          line: 374,
          column: 0
        },
        end: {
          line: 374,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 41
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 33
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 60
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 109
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 174
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 40
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 212
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 241,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        },
        loc: {
          start: {
            line: 241,
            column: 55
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 241
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 42
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 270
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 324,
            column: 4
          },
          end: {
            line: 324,
            column: 5
          }
        },
        loc: {
          start: {
            line: 324,
            column: 45
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 324
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 336,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        },
        loc: {
          start: {
            line: 336,
            column: 60
          },
          end: {
            line: 344,
            column: 5
          }
        },
        line: 336
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 348,
            column: 4
          },
          end: {
            line: 348,
            column: 5
          }
        },
        loc: {
          start: {
            line: 348,
            column: 48
          },
          end: {
            line: 372,
            column: 5
          }
        },
        line: 348
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 354,
            column: 50
          },
          end: {
            line: 354,
            column: 51
          }
        },
        loc: {
          start: {
            line: 354,
            column: 61
          },
          end: {
            line: 358,
            column: 13
          }
        },
        line: 354
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "2": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }, {
          start: {
            line: 78,
            column: 17
          },
          end: {
            line: 86,
            column: 13
          }
        }],
        line: 75
      },
      "3": {
        loc: {
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        }, {
          start: {
            line: 159,
            column: 17
          },
          end: {
            line: 162,
            column: 13
          }
        }],
        line: 101
      },
      "4": {
        loc: {
          start: {
            line: 104,
            column: 16
          },
          end: {
            line: 157,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 16
          },
          end: {
            line: 157,
            column: 17
          }
        }, {
          start: {
            line: 129,
            column: 21
          },
          end: {
            line: 157,
            column: 17
          }
        }],
        line: 104
      },
      "5": {
        loc: {
          start: {
            line: 104,
            column: 20
          },
          end: {
            line: 104,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 20
          },
          end: {
            line: 104,
            column: 40
          }
        }, {
          start: {
            line: 104,
            column: 44
          },
          end: {
            line: 104,
            column: 60
          }
        }, {
          start: {
            line: 104,
            column: 64
          },
          end: {
            line: 104,
            column: 82
          }
        }],
        line: 104
      },
      "6": {
        loc: {
          start: {
            line: 125,
            column: 24
          },
          end: {
            line: 125,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 125,
            column: 24
          },
          end: {
            line: 125,
            column: 33
          }
        }, {
          start: {
            line: 125,
            column: 37
          },
          end: {
            line: 125,
            column: 41
          }
        }],
        line: 125
      },
      "7": {
        loc: {
          start: {
            line: 129,
            column: 21
          },
          end: {
            line: 157,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 21
          },
          end: {
            line: 157,
            column: 17
          }
        }, {
          start: {
            line: 154,
            column: 21
          },
          end: {
            line: 157,
            column: 17
          }
        }],
        line: 129
      },
      "8": {
        loc: {
          start: {
            line: 129,
            column: 25
          },
          end: {
            line: 129,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 25
          },
          end: {
            line: 129,
            column: 44
          }
        }, {
          start: {
            line: 129,
            column: 48
          },
          end: {
            line: 129,
            column: 65
          }
        }],
        line: 129
      },
      "9": {
        loc: {
          start: {
            line: 150,
            column: 24
          },
          end: {
            line: 150,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 24
          },
          end: {
            line: 150,
            column: 33
          }
        }, {
          start: {
            line: 150,
            column: 37
          },
          end: {
            line: 150,
            column: 41
          }
        }],
        line: 150
      },
      "10": {
        loc: {
          start: {
            line: 175,
            column: 24
          },
          end: {
            line: 175,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 175,
            column: 46
          },
          end: {
            line: 175,
            column: 69
          }
        }, {
          start: {
            line: 175,
            column: 72
          },
          end: {
            line: 175,
            column: 76
          }
        }],
        line: 175
      },
      "11": {
        loc: {
          start: {
            line: 176,
            column: 25
          },
          end: {
            line: 176,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 48
          },
          end: {
            line: 176,
            column: 71
          }
        }, {
          start: {
            line: 176,
            column: 74
          },
          end: {
            line: 176,
            column: 78
          }
        }],
        line: 176
      },
      "12": {
        loc: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 21
          }
        }, {
          start: {
            line: 203,
            column: 25
          },
          end: {
            line: 203,
            column: 29
          }
        }],
        line: 203
      },
      "13": {
        loc: {
          start: {
            line: 231,
            column: 19
          },
          end: {
            line: 231,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 231,
            column: 44
          },
          end: {
            line: 231,
            column: 58
          }
        }, {
          start: {
            line: 231,
            column: 61
          },
          end: {
            line: 231,
            column: 65
          }
        }],
        line: 231
      },
      "14": {
        loc: {
          start: {
            line: 241,
            column: 43
          },
          end: {
            line: 241,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 241,
            column: 51
          },
          end: {
            line: 241,
            column: 53
          }
        }],
        line: 241
      },
      "15": {
        loc: {
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0, 0]
    },
    inputSourceMap: {
      file: "/home/kim/tito/server/src/services/kiosk/kioskService.ts",
      mappings: ";;AAAA,oDAAgD;AAChD,uEAA6F;AAgD7F,MAAM,YAAY;IAChB;;OAEG;IACH,KAAK,CAAC,kBAAkB,CAAC,UAAkB;QACzC,IAAI,CAAC;YACH,0CAA0C;YAC1C,IAAI,MAAM,CAAC;YACX,IAAI,CAAC;gBACH,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAClC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;YAC5C,CAAC;YAED,mCAAmC;YACnC,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;YACrC,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACtD,CAAC;YAED,gCAAgC;YAChC,MAAM,KAAK,GAAG;;;;;;;;;;;;;;;;;;;;OAoBb,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YAE1D,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC7B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;YACpD,CAAC;YAED,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACxD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB,CAAC,IAA0B;QAC/C,IAAI,CAAC;YACH,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;YACnE,OAAO,CAAC,GAAG,CAAC,4CAA4C,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC;YAEjH,mDAAmD;YACnD,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,oBAAoB;YAE1E,MAAM,qBAAqB,GAAG;;;;;OAK7B,CAAC;YAEF,MAAM,sBAAsB,GAAG,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;YAEjG,kEAAkE;YAClE,IAAI,kBAAkB,CAAC;YACvB,IAAI,sBAAsB,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC3C,kBAAkB,GAAG,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACzD,CAAC;iBAAM,CAAC;gBACN,sBAAsB;gBACtB,MAAM,mBAAmB,GAAG;;;SAG3B,CAAC;gBACF,MAAM,cAAc,GAAG,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;gBACvF,kBAAkB,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACjD,CAAC;YAED,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YAEvB,4DAA4D;YAC5D,MAAM,oBAAoB,GAAG;;;;;;;;;OAS5B,CAAC;YAEF,MAAM,eAAe,GAAG,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,oBAAoB,EAAE,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;YAEzF,IAAI,MAAM,CAAC;YAEX,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACpC,0BAA0B;gBAC1B,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAExC,IAAI,IAAI,KAAK,WAAW,IAAI,OAAO,CAAC,QAAQ,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;oBACnE,sCAAsC;oBACtC,MAAM,WAAW,GAAG;;;;;;;;;;;;;WAanB,CAAC;oBAEF,MAAM,GAAG,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,WAAW,EAAE;wBAC1C,GAAG,CAAC,WAAW,EAAE;wBACjB,OAAO,CAAC,EAAE;wBACV,UAAU;wBACV,QAAQ;wBACR,SAAS,IAAI,IAAI;wBACjB,UAAU;qBACX,CAAC,CAAC;gBACL,CAAC;qBAAM,IAAI,IAAI,KAAK,UAAU,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;oBACpD,wCAAwC;oBACxC,MAAM,WAAW,GAAG;;;;;;;;;;;;;WAanB,CAAC;oBAEF,MAAM,GAAG,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,WAAW,EAAE;wBAC1C,GAAG,CAAC,WAAW,EAAE;wBACjB,OAAO,CAAC,EAAE;wBACV,UAAU;wBACV,QAAQ;wBACR,SAAS,IAAI,IAAI;wBACjB,UAAU;qBACX,CAAC,CAAC;gBACL,CAAC;qBAAM,CAAC;oBACN,sDAAsD;oBACtD,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;gBACnH,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,qBAAqB;gBACrB,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YACnH,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,uCAAuC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACrE,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,gBAAgB,CAC5B,kBAA0B,EAC1B,IAAY,EACZ,SAAe,EACf,QAAgB,EAChB,SAA6B,EAC7B,UAAkB,EAClB,UAAkB;QAElB,MAAM,OAAO,GAAG,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QACrE,MAAM,QAAQ,GAAG,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QAEvE,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;KAoBnB,CAAC;QAEF,OAAO,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,WAAW,EAAE;YACxC,kBAAkB;YAClB,IAAI;YACJ,OAAO;YACP,QAAQ;YACR,SAAS,IAAI,IAAI;YACjB,UAAU;YACV,QAAQ;YACR,UAAU;SACX,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,iBAAiB,CAAC,UAAkB;QACxC,IAAI,CAAC;YACH,MAAM,KAAK,GAAG;;;;;;;;;;;;;;;OAeb,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YAE1D,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACxD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CAAC,UAAkB,EAAE,QAAgB,EAAE;QAC/D,IAAI,CAAC;YACH,MAAM,KAAK,GAAG;;;;;;;;;;;;;;;OAeb,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;YAEjE,OAAO,MAAM,CAAC,IAAI,CAAC;QACrB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YAC1D,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,yBAAyB,CAAC,IAAmC;QACjE,IAAI,CAAC;YACH,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;YAC1E,OAAO,CAAC,GAAG,CAAC,qDAAqD,EAAE,EAAE,UAAU,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC;YAEjI,6DAA6D;YAC7D,MAAM,cAAc,GAA4B;gBAC9C,UAAU;gBACV,WAAW;gBACX,UAAU,EAAE,UAAU;gBACtB,eAAe,EAAE,SAAS,EAAE,wCAAwC;gBACpE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,0DAA0D;aACjF,CAAC;YAEF,MAAM,qCAAiB,CAAC,yBAAyB,CAAC,cAAc,CAAC,CAAC;YAElE,iDAAiD;YACjD,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;YACzB,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAE3B,MAAM,KAAK,GAAG;;;;;;;;;;;;;;;;;;;;;;OAsBb,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,IAAA,kBAAO,GAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC;YAEpG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC7B,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;YACpE,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,gDAAgD,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9E,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,wCAAwC,EAAE,KAAK,CAAC,CAAC;YAC/D,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,sBAAsB,CAAC,UAAkB;QAM7C,IAAI,CAAC;YACH,OAAO,MAAM,qCAAiB,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QACpE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;YAC7D,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,wBAAwB,CAAC,UAAkB,EAAE,WAAwB;QAMzE,IAAI,CAAC;YACH,OAAO,MAAM,qCAAiB,CAAC,wBAAwB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACnF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAC5D,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,yBAAyB,CAAC,UAAkB;QAMhD,IAAI,CAAC;YACH,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;YACzB,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAE3B,uBAAuB;YACvB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YACjE,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;gBAC9C,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBAChD,WAAW,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjC,OAAO,WAAW,CAAC,OAAO,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC;YACnD,CAAC,CAAC,CAAC;YAEH,4BAA4B;YAC5B,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;YAElE,OAAO;gBACL,QAAQ,EAAE,aAAa;gBACvB,mBAAmB,EAAE,WAAW,CAAC,WAAW;gBAC5C,cAAc,EAAE,WAAW,CAAC,UAAU;gBACtC,MAAM,EAAE,WAAW,CAAC,MAAM;aAC3B,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;YAChE,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;CACF;AAED,kBAAe,IAAI,YAAY,EAAE,CAAC",
      names: [],
      sources: ["/home/kim/tito/server/src/services/kiosk/kioskService.ts"],
      sourcesContent: ["import { getPool } from '../../config/database';\nimport { attendanceService, TimeBasedAttendanceData } from '../attendance/attendanceService';\nimport { SessionType, getSessionDisplayInfo } from '../../utils/timeValidation';\n\ninterface KioskEmployee {\n  id: string;\n  employeeId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  departmentId: string;\n  departmentName: string;\n  position: string;\n  employmentType: 'regular' | 'contractual' | 'jo';\n  hireDate: string;\n  baseSalary: number;\n  status: 'active' | 'inactive' | 'terminated' | 'on_leave';\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface KioskAttendanceRecord {\n  id: string;\n  employeeId: string;\n  type: 'clock_in' | 'clock_out';\n  sessionType: SessionType;\n  timestamp: string;\n  location: string;\n  selfieUrl?: string;\n  qrCodeScanned: boolean;\n  qrCodeData?: string;\n}\n\ninterface RecordAttendanceData {\n  employeeId: string;\n  type: 'clock_in' | 'clock_out';\n  location: string;\n  qrCodeData: string;\n  selfieUrl?: string;\n}\n\ninterface TimeBasedRecordAttendanceData {\n  employeeId: string;\n  sessionType: SessionType;\n  location: string;\n  qrCodeData: string;\n  selfieUrl?: string;\n}\n\nclass KioskService {\n  /**\n   * Verify employee by QR code data\n   */\n  async verifyEmployeeByQR(qrCodeData: string): Promise<KioskEmployee> {\n    try {\n      // Parse QR code data (assuming it's JSON)\n      let qrData;\n      try {\n        qrData = JSON.parse(qrCodeData);\n      } catch (error) {\n        throw new Error('Invalid QR code format');\n      }\n\n      // Extract employee ID from QR code\n      const employeeId = qrData.employeeId;\n      if (!employeeId) {\n        throw new Error('Employee ID not found in QR code');\n      }\n\n      // Query employee by employee ID\n      const query = `\n        SELECT \n          e.id,\n          e.employee_id as \"employeeId\",\n          u.first_name as \"firstName\",\n          u.last_name as \"lastName\",\n          u.email,\n          e.department_id as \"departmentId\",\n          d.name as \"departmentName\",\n          e.position,\n          e.employment_type as \"employmentType\",\n          e.hire_date as \"hireDate\",\n          e.base_salary as \"baseSalary\",\n          e.status,\n          e.created_at as \"createdAt\",\n          e.updated_at as \"updatedAt\"\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        WHERE e.employee_id = $1 AND e.status = 'active'\n      `;\n\n      const result = await getPool().query(query, [employeeId]);\n      \n      if (result.rows.length === 0) {\n        throw new Error('Employee not found or inactive');\n      }\n\n      return result.rows[0];\n    } catch (error) {\n      console.error('Error verifying employee by QR:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Record attendance\n   */\n  async recordAttendance(data: RecordAttendanceData): Promise<KioskAttendanceRecord> {\n    try {\n      const { employeeId, type, location, qrCodeData, selfieUrl } = data;\n      console.log('KioskService.recordAttendance called with:', { employeeId, type, location, qrCodeData, selfieUrl });\n\n      // First, ensure attendance record exists for today\n      const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\n      \n      const attendanceRecordQuery = `\n        INSERT INTO attendance_records (employee_id, date, overall_status)\n        VALUES ($1, $2, 'present')\n        ON CONFLICT (employee_id, date) DO NOTHING\n        RETURNING id\n      `;\n\n      const attendanceRecordResult = await getPool().query(attendanceRecordQuery, [employeeId, today]);\n      \n      // Get the attendance record ID (either newly created or existing)\n      let attendanceRecordId;\n      if (attendanceRecordResult.rows.length > 0) {\n        attendanceRecordId = attendanceRecordResult.rows[0].id;\n      } else {\n        // Get existing record\n        const existingRecordQuery = `\n          SELECT id FROM attendance_records \n          WHERE employee_id = $1 AND date = $2\n        `;\n        const existingResult = await getPool().query(existingRecordQuery, [employeeId, today]);\n        attendanceRecordId = existingResult.rows[0].id;\n      }\n\n      const now = new Date();\n\n      // Check if there's an existing incomplete session for today\n      const existingSessionQuery = `\n        SELECT s.id, s.session_type, s.clock_in, s.clock_out\n        FROM attendance_sessions s\n        JOIN attendance_records ar ON s.attendance_record_id = ar.id\n        WHERE ar.employee_id = $1 \n          AND ar.date = $2\n          AND (s.clock_in IS NULL OR s.clock_out IS NULL)\n        ORDER BY s.created_at DESC\n        LIMIT 1\n      `;\n      \n      const existingSession = await getPool().query(existingSessionQuery, [employeeId, today]);\n      \n      let result;\n      \n      if (existingSession.rows.length > 0) {\n        // Update existing session\n        const session = existingSession.rows[0];\n        \n        if (type === 'clock_out' && session.clock_in && !session.clock_out) {\n          // Complete the session with clock_out\n          const updateQuery = `\n            UPDATE attendance_sessions \n            SET clock_out = $1, selfie_image_url = $5, updated_at = NOW()\n            WHERE id = $2\n            RETURNING \n              id,\n              $3 as \"employeeId\",\n              'clock_out' as \"type\",\n              $1 as \"timestamp\",\n              $4 as \"location\",\n              $5 as \"selfieUrl\",\n              $6 as \"qrCodeData\",\n              true as \"qrCodeScanned\"\n          `;\n          \n          result = await getPool().query(updateQuery, [\n            now.toISOString(),\n            session.id,\n            employeeId,\n            location,\n            selfieUrl || null,\n            qrCodeData\n          ]);\n        } else if (type === 'clock_in' && !session.clock_in) {\n          // Update existing session with clock_in\n          const updateQuery = `\n            UPDATE attendance_sessions \n            SET clock_in = $1, selfie_image_url = $5, updated_at = NOW()\n            WHERE id = $2\n            RETURNING \n              id,\n              $3 as \"employeeId\",\n              'clock_in' as \"type\",\n              $1 as \"timestamp\",\n              $4 as \"location\",\n              $5 as \"selfieUrl\",\n              $6 as \"qrCodeData\",\n              true as \"qrCodeScanned\"\n          `;\n          \n          result = await getPool().query(updateQuery, [\n            now.toISOString(),\n            session.id,\n            employeeId,\n            location,\n            selfieUrl || null,\n            qrCodeData\n          ]);\n        } else {\n          // Create new session if existing one can't be updated\n          result = await this.createNewSession(attendanceRecordId, type, now, location, selfieUrl, employeeId, qrCodeData);\n        }\n      } else {\n        // Create new session\n        result = await this.createNewSession(attendanceRecordId, type, now, location, selfieUrl, employeeId, qrCodeData);\n      }\n\n      console.log('KioskService.recordAttendance result:', result.rows[0]);\n      return result.rows[0];\n    } catch (error) {\n      console.error('Error recording attendance:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new attendance session\n   */\n  private async createNewSession(\n    attendanceRecordId: string, \n    type: string, \n    timestamp: Date, \n    location: string, \n    selfieUrl: string | undefined, \n    employeeId: string, \n    qrCodeData: string\n  ) {\n    const clockIn = type === 'clock_in' ? timestamp.toISOString() : null;\n    const clockOut = type === 'clock_out' ? timestamp.toISOString() : null;\n\n    const insertQuery = `\n      INSERT INTO attendance_sessions (\n        attendance_record_id,\n        session_type,\n        clock_in,\n        clock_out,\n        status,\n        selfie_image_path,\n        selfie_image_url,\n        created_at\n      ) VALUES ($1, $2, $3, $4, 'present', $5, $5, NOW())\n      RETURNING \n        id,\n        $6 as \"employeeId\",\n        $2 as \"type\",\n        COALESCE($3, $4) as \"timestamp\",\n        $7 as \"location\",\n        $5 as \"selfieUrl\",\n        $8 as \"qrCodeData\",\n        true as \"qrCodeScanned\"\n    `;\n\n    return await getPool().query(insertQuery, [\n      attendanceRecordId,\n      type,\n      clockIn,\n      clockOut,\n      selfieUrl || null,\n      employeeId,\n      location,\n      qrCodeData\n    ]);\n  }\n\n  /**\n   * Get last attendance record for employee\n   */\n  async getLastAttendance(employeeId: string): Promise<KioskAttendanceRecord | null> {\n    try {\n      const query = `\n        SELECT \n          s.id,\n          ar.employee_id as \"employeeId\",\n          s.session_type as \"type\",\n          COALESCE(s.clock_in, s.clock_out) as \"timestamp\",\n          'Office' as \"location\",\n          s.selfie_image_path as \"selfieUrl\",\n          'QR_CODE_DATA' as \"qrCodeData\",\n          true as \"qrCodeScanned\"\n        FROM attendance_sessions s\n        JOIN attendance_records ar ON s.attendance_record_id = ar.id\n        WHERE ar.employee_id = $1\n        ORDER BY s.created_at DESC\n        LIMIT 1\n      `;\n\n      const result = await getPool().query(query, [employeeId]);\n      \n      return result.rows.length > 0 ? result.rows[0] : null;\n    } catch (error) {\n      console.error('Error getting last attendance:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get attendance history for employee\n   */\n  async getAttendanceHistory(employeeId: string, limit: number = 10): Promise<KioskAttendanceRecord[]> {\n    try {\n      const query = `\n        SELECT \n          s.id,\n          ar.employee_id as \"employeeId\",\n          s.session_type as \"type\",\n          COALESCE(s.clock_in, s.clock_out) as \"timestamp\",\n          'Office' as \"location\",\n          s.selfie_image_path as \"selfieUrl\",\n          'QR_CODE_DATA' as \"qrCodeData\",\n          true as \"qrCodeScanned\"\n        FROM attendance_sessions s\n        JOIN attendance_records ar ON s.attendance_record_id = ar.id\n        WHERE ar.employee_id = $1\n        ORDER BY s.created_at DESC\n        LIMIT $2\n      `;\n\n      const result = await getPool().query(query, [employeeId, limit]);\n      \n      return result.rows;\n    } catch (error) {\n      console.error('Error getting attendance history:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Record time-based attendance using the new session system\n   */\n  async recordTimeBasedAttendance(data: TimeBasedRecordAttendanceData): Promise<KioskAttendanceRecord> {\n    try {\n      const { employeeId, sessionType, location, qrCodeData, selfieUrl } = data;\n      console.log('KioskService.recordTimeBasedAttendance called with:', { employeeId, sessionType, location, qrCodeData, selfieUrl });\n\n      // Use the attendance service to record time-based attendance\n      const attendanceData: TimeBasedAttendanceData = {\n        employeeId,\n        sessionType,\n        qrCodeHash: qrCodeData,\n        selfieImagePath: selfieUrl, // This is now the file path from Multer\n        timestamp: new Date() // This will be converted to UTC in the attendance service\n      };\n\n      await attendanceService.recordTimeBasedAttendance(attendanceData);\n      \n      // Find the session that was just created/updated\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const query = `\n        SELECT \n          s.id,\n          ar.employee_id as \"employeeId\",\n          s.session_type as \"sessionType\",\n          COALESCE(s.clock_in, s.clock_out) as \"timestamp\",\n          $1 as \"location\",\n          s.selfie_image_path as \"selfieUrl\",\n          $2 as \"qrCodeData\",\n          true as \"qrCodeScanned\",\n          CASE \n            WHEN s.session_type IN ('morning_in', 'afternoon_in') THEN 'clock_in'\n            WHEN s.session_type IN ('morning_out', 'afternoon_out') THEN 'clock_out'\n            ELSE 'clock_in'\n          END as \"type\"\n        FROM attendance_sessions s\n        JOIN attendance_records ar ON s.attendance_record_id = ar.id\n        WHERE ar.employee_id = $3\n          AND ar.date = $4\n          AND s.session_type = $5\n        ORDER BY s.created_at DESC\n        LIMIT 1\n      `;\n\n      const result = await getPool().query(query, [location, qrCodeData, employeeId, today, sessionType]);\n      \n      if (result.rows.length === 0) {\n        throw new Error('Failed to retrieve recorded attendance session');\n      }\n\n      console.log('KioskService.recordTimeBasedAttendance result:', result.rows[0]);\n      return result.rows[0];\n    } catch (error) {\n      console.error('Error recording time-based attendance:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get next expected session for employee\n   */\n  async getNextExpectedSession(employeeId: string): Promise<{\n    sessionType: SessionType | null;\n    displayInfo: ReturnType<typeof getSessionDisplayInfo> | null;\n    canPerform: boolean;\n    reason?: string;\n  }> {\n    try {\n      return await attendanceService.getNextExpectedSession(employeeId);\n    } catch (error) {\n      console.error('Error getting next expected session:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate attendance action for employee\n   */\n  async validateAttendanceAction(employeeId: string, sessionType: SessionType): Promise<{\n    canPerform: boolean;\n    reason?: string;\n    nextExpectedSession?: SessionType;\n    sessionDisplayInfo?: ReturnType<typeof getSessionDisplayInfo>;\n  }> {\n    try {\n      return await attendanceService.validateAttendanceAction(employeeId, sessionType);\n    } catch (error) {\n      console.error('Error validating attendance action:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get today's attendance summary for employee\n   */\n  async getTodayAttendanceSummary(employeeId: string): Promise<{\n    sessions: KioskAttendanceRecord[];\n    nextExpectedSession: SessionType | null;\n    canPerformNext: boolean;\n    reason?: string;\n  }> {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      // Get today's sessions\n      const sessions = await this.getAttendanceHistory(employeeId, 10);\n      const todaySessions = sessions.filter(session => {\n        const sessionDate = new Date(session.timestamp);\n        sessionDate.setHours(0, 0, 0, 0);\n        return sessionDate.getTime() === today.getTime();\n      });\n\n      // Get next expected session\n      const nextSession = await this.getNextExpectedSession(employeeId);\n\n      return {\n        sessions: todaySessions,\n        nextExpectedSession: nextSession.sessionType,\n        canPerformNext: nextSession.canPerform,\n        reason: nextSession.reason\n      };\n    } catch (error) {\n      console.error('Error getting today attendance summary:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new KioskService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3197a2ab476e56c24a000d8e1eb167ccc2e3e63e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2sefjesn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2sefjesn();
cov_2sefjesn().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const database_1 =
/* istanbul ignore next */
(cov_2sefjesn().s[1]++, require("../../config/database"));
const attendanceService_1 =
/* istanbul ignore next */
(cov_2sefjesn().s[2]++, require("../attendance/attendanceService"));
class KioskService {
  /**
   * Verify employee by QR code data
   */
  async verifyEmployeeByQR(qrCodeData) {
    /* istanbul ignore next */
    cov_2sefjesn().f[0]++;
    cov_2sefjesn().s[3]++;
    try {
      // Parse QR code data (assuming it's JSON)
      let qrData;
      /* istanbul ignore next */
      cov_2sefjesn().s[4]++;
      try {
        /* istanbul ignore next */
        cov_2sefjesn().s[5]++;
        qrData = JSON.parse(qrCodeData);
      } catch (error) {
        /* istanbul ignore next */
        cov_2sefjesn().s[6]++;
        throw new Error('Invalid QR code format');
      }
      // Extract employee ID from QR code
      const employeeId =
      /* istanbul ignore next */
      (cov_2sefjesn().s[7]++, qrData.employeeId);
      /* istanbul ignore next */
      cov_2sefjesn().s[8]++;
      if (!employeeId) {
        /* istanbul ignore next */
        cov_2sefjesn().b[0][0]++;
        cov_2sefjesn().s[9]++;
        throw new Error('Employee ID not found in QR code');
      } else
      /* istanbul ignore next */
      {
        cov_2sefjesn().b[0][1]++;
      }
      // Query employee by employee ID
      const query =
      /* istanbul ignore next */
      (cov_2sefjesn().s[10]++, `
        SELECT 
          e.id,
          e.employee_id as "employeeId",
          u.first_name as "firstName",
          u.last_name as "lastName",
          u.email,
          e.department_id as "departmentId",
          d.name as "departmentName",
          e.position,
          e.employment_type as "employmentType",
          e.hire_date as "hireDate",
          e.base_salary as "baseSalary",
          e.status,
          e.created_at as "createdAt",
          e.updated_at as "updatedAt"
        FROM employees e
        JOIN users u ON e.user_id = u.id
        LEFT JOIN departments d ON e.department_id = d.id
        WHERE e.employee_id = $1 AND e.status = 'active'
      `);
      const result =
      /* istanbul ignore next */
      (cov_2sefjesn().s[11]++, await (0, database_1.getPool)().query(query, [employeeId]));
      /* istanbul ignore next */
      cov_2sefjesn().s[12]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_2sefjesn().b[1][0]++;
        cov_2sefjesn().s[13]++;
        throw new Error('Employee not found or inactive');
      } else
      /* istanbul ignore next */
      {
        cov_2sefjesn().b[1][1]++;
      }
      cov_2sefjesn().s[14]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_2sefjesn().s[15]++;
      console.error('Error verifying employee by QR:', error);
      /* istanbul ignore next */
      cov_2sefjesn().s[16]++;
      throw error;
    }
  }
  /**
   * Record attendance
   */
  async recordAttendance(data) {
    /* istanbul ignore next */
    cov_2sefjesn().f[1]++;
    cov_2sefjesn().s[17]++;
    try {
      const {
        employeeId,
        type,
        location,
        qrCodeData,
        selfieUrl
      } =
      /* istanbul ignore next */
      (cov_2sefjesn().s[18]++, data);
      /* istanbul ignore next */
      cov_2sefjesn().s[19]++;
      console.log('KioskService.recordAttendance called with:', {
        employeeId,
        type,
        location,
        qrCodeData,
        selfieUrl
      });
      // First, ensure attendance record exists for today
      const today =
      /* istanbul ignore next */
      (cov_2sefjesn().s[20]++, new Date().toISOString().split('T')[0]); // YYYY-MM-DD format
      const attendanceRecordQuery =
      /* istanbul ignore next */
      (cov_2sefjesn().s[21]++, `
        INSERT INTO attendance_records (employee_id, date, overall_status)
        VALUES ($1, $2, 'present')
        ON CONFLICT (employee_id, date) DO NOTHING
        RETURNING id
      `);
      const attendanceRecordResult =
      /* istanbul ignore next */
      (cov_2sefjesn().s[22]++, await (0, database_1.getPool)().query(attendanceRecordQuery, [employeeId, today]));
      // Get the attendance record ID (either newly created or existing)
      let attendanceRecordId;
      /* istanbul ignore next */
      cov_2sefjesn().s[23]++;
      if (attendanceRecordResult.rows.length > 0) {
        /* istanbul ignore next */
        cov_2sefjesn().b[2][0]++;
        cov_2sefjesn().s[24]++;
        attendanceRecordId = attendanceRecordResult.rows[0].id;
      } else {
        /* istanbul ignore next */
        cov_2sefjesn().b[2][1]++;
        // Get existing record
        const existingRecordQuery =
        /* istanbul ignore next */
        (cov_2sefjesn().s[25]++, `
          SELECT id FROM attendance_records 
          WHERE employee_id = $1 AND date = $2
        `);
        const existingResult =
        /* istanbul ignore next */
        (cov_2sefjesn().s[26]++, await (0, database_1.getPool)().query(existingRecordQuery, [employeeId, today]));
        /* istanbul ignore next */
        cov_2sefjesn().s[27]++;
        attendanceRecordId = existingResult.rows[0].id;
      }
      const now =
      /* istanbul ignore next */
      (cov_2sefjesn().s[28]++, new Date());
      // Check if there's an existing incomplete session for today
      const existingSessionQuery =
      /* istanbul ignore next */
      (cov_2sefjesn().s[29]++, `
        SELECT s.id, s.session_type, s.clock_in, s.clock_out
        FROM attendance_sessions s
        JOIN attendance_records ar ON s.attendance_record_id = ar.id
        WHERE ar.employee_id = $1 
          AND ar.date = $2
          AND (s.clock_in IS NULL OR s.clock_out IS NULL)
        ORDER BY s.created_at DESC
        LIMIT 1
      `);
      const existingSession =
      /* istanbul ignore next */
      (cov_2sefjesn().s[30]++, await (0, database_1.getPool)().query(existingSessionQuery, [employeeId, today]));
      let result;
      /* istanbul ignore next */
      cov_2sefjesn().s[31]++;
      if (existingSession.rows.length > 0) {
        /* istanbul ignore next */
        cov_2sefjesn().b[3][0]++;
        // Update existing session
        const session =
        /* istanbul ignore next */
        (cov_2sefjesn().s[32]++, existingSession.rows[0]);
        /* istanbul ignore next */
        cov_2sefjesn().s[33]++;
        if (
        /* istanbul ignore next */
        (cov_2sefjesn().b[5][0]++, type === 'clock_out') &&
        /* istanbul ignore next */
        (cov_2sefjesn().b[5][1]++, session.clock_in) &&
        /* istanbul ignore next */
        (cov_2sefjesn().b[5][2]++, !session.clock_out)) {
          /* istanbul ignore next */
          cov_2sefjesn().b[4][0]++;
          // Complete the session with clock_out
          const updateQuery =
          /* istanbul ignore next */
          (cov_2sefjesn().s[34]++, `
            UPDATE attendance_sessions 
            SET clock_out = $1, selfie_image_url = $5, updated_at = NOW()
            WHERE id = $2
            RETURNING 
              id,
              $3 as "employeeId",
              'clock_out' as "type",
              $1 as "timestamp",
              $4 as "location",
              $5 as "selfieUrl",
              $6 as "qrCodeData",
              true as "qrCodeScanned"
          `);
          /* istanbul ignore next */
          cov_2sefjesn().s[35]++;
          result = await (0, database_1.getPool)().query(updateQuery, [now.toISOString(), session.id, employeeId, location,
          /* istanbul ignore next */
          (cov_2sefjesn().b[6][0]++, selfieUrl) ||
          /* istanbul ignore next */
          (cov_2sefjesn().b[6][1]++, null), qrCodeData]);
        } else {
          /* istanbul ignore next */
          cov_2sefjesn().b[4][1]++;
          cov_2sefjesn().s[36]++;
          if (
          /* istanbul ignore next */
          (cov_2sefjesn().b[8][0]++, type === 'clock_in') &&
          /* istanbul ignore next */
          (cov_2sefjesn().b[8][1]++, !session.clock_in)) {
            /* istanbul ignore next */
            cov_2sefjesn().b[7][0]++;
            // Update existing session with clock_in
            const updateQuery =
            /* istanbul ignore next */
            (cov_2sefjesn().s[37]++, `
            UPDATE attendance_sessions 
            SET clock_in = $1, selfie_image_url = $5, updated_at = NOW()
            WHERE id = $2
            RETURNING 
              id,
              $3 as "employeeId",
              'clock_in' as "type",
              $1 as "timestamp",
              $4 as "location",
              $5 as "selfieUrl",
              $6 as "qrCodeData",
              true as "qrCodeScanned"
          `);
            /* istanbul ignore next */
            cov_2sefjesn().s[38]++;
            result = await (0, database_1.getPool)().query(updateQuery, [now.toISOString(), session.id, employeeId, location,
            /* istanbul ignore next */
            (cov_2sefjesn().b[9][0]++, selfieUrl) ||
            /* istanbul ignore next */
            (cov_2sefjesn().b[9][1]++, null), qrCodeData]);
          } else {
            /* istanbul ignore next */
            cov_2sefjesn().b[7][1]++;
            cov_2sefjesn().s[39]++;
            // Create new session if existing one can't be updated
            result = await this.createNewSession(attendanceRecordId, type, now, location, selfieUrl, employeeId, qrCodeData);
          }
        }
      } else {
        /* istanbul ignore next */
        cov_2sefjesn().b[3][1]++;
        cov_2sefjesn().s[40]++;
        // Create new session
        result = await this.createNewSession(attendanceRecordId, type, now, location, selfieUrl, employeeId, qrCodeData);
      }
      /* istanbul ignore next */
      cov_2sefjesn().s[41]++;
      console.log('KioskService.recordAttendance result:', result.rows[0]);
      /* istanbul ignore next */
      cov_2sefjesn().s[42]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_2sefjesn().s[43]++;
      console.error('Error recording attendance:', error);
      /* istanbul ignore next */
      cov_2sefjesn().s[44]++;
      throw error;
    }
  }
  /**
   * Create a new attendance session
   */
  async createNewSession(attendanceRecordId, type, timestamp, location, selfieUrl, employeeId, qrCodeData) {
    /* istanbul ignore next */
    cov_2sefjesn().f[2]++;
    const clockIn =
    /* istanbul ignore next */
    (cov_2sefjesn().s[45]++, type === 'clock_in' ?
    /* istanbul ignore next */
    (cov_2sefjesn().b[10][0]++, timestamp.toISOString()) :
    /* istanbul ignore next */
    (cov_2sefjesn().b[10][1]++, null));
    const clockOut =
    /* istanbul ignore next */
    (cov_2sefjesn().s[46]++, type === 'clock_out' ?
    /* istanbul ignore next */
    (cov_2sefjesn().b[11][0]++, timestamp.toISOString()) :
    /* istanbul ignore next */
    (cov_2sefjesn().b[11][1]++, null));
    const insertQuery =
    /* istanbul ignore next */
    (cov_2sefjesn().s[47]++, `
      INSERT INTO attendance_sessions (
        attendance_record_id,
        session_type,
        clock_in,
        clock_out,
        status,
        selfie_image_path,
        selfie_image_url,
        created_at
      ) VALUES ($1, $2, $3, $4, 'present', $5, $5, NOW())
      RETURNING 
        id,
        $6 as "employeeId",
        $2 as "type",
        COALESCE($3, $4) as "timestamp",
        $7 as "location",
        $5 as "selfieUrl",
        $8 as "qrCodeData",
        true as "qrCodeScanned"
    `);
    /* istanbul ignore next */
    cov_2sefjesn().s[48]++;
    return await (0, database_1.getPool)().query(insertQuery, [attendanceRecordId, type, clockIn, clockOut,
    /* istanbul ignore next */
    (cov_2sefjesn().b[12][0]++, selfieUrl) ||
    /* istanbul ignore next */
    (cov_2sefjesn().b[12][1]++, null), employeeId, location, qrCodeData]);
  }
  /**
   * Get last attendance record for employee
   */
  async getLastAttendance(employeeId) {
    /* istanbul ignore next */
    cov_2sefjesn().f[3]++;
    cov_2sefjesn().s[49]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2sefjesn().s[50]++, `
        SELECT 
          s.id,
          ar.employee_id as "employeeId",
          s.session_type as "type",
          COALESCE(s.clock_in, s.clock_out) as "timestamp",
          'Office' as "location",
          s.selfie_image_path as "selfieUrl",
          'QR_CODE_DATA' as "qrCodeData",
          true as "qrCodeScanned"
        FROM attendance_sessions s
        JOIN attendance_records ar ON s.attendance_record_id = ar.id
        WHERE ar.employee_id = $1
        ORDER BY s.created_at DESC
        LIMIT 1
      `);
      const result =
      /* istanbul ignore next */
      (cov_2sefjesn().s[51]++, await (0, database_1.getPool)().query(query, [employeeId]));
      /* istanbul ignore next */
      cov_2sefjesn().s[52]++;
      return result.rows.length > 0 ?
      /* istanbul ignore next */
      (cov_2sefjesn().b[13][0]++, result.rows[0]) :
      /* istanbul ignore next */
      (cov_2sefjesn().b[13][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_2sefjesn().s[53]++;
      console.error('Error getting last attendance:', error);
      /* istanbul ignore next */
      cov_2sefjesn().s[54]++;
      throw error;
    }
  }
  /**
   * Get attendance history for employee
   */
  async getAttendanceHistory(employeeId, limit =
  /* istanbul ignore next */
  (cov_2sefjesn().b[14][0]++, 10)) {
    /* istanbul ignore next */
    cov_2sefjesn().f[4]++;
    cov_2sefjesn().s[55]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_2sefjesn().s[56]++, `
        SELECT 
          s.id,
          ar.employee_id as "employeeId",
          s.session_type as "type",
          COALESCE(s.clock_in, s.clock_out) as "timestamp",
          'Office' as "location",
          s.selfie_image_path as "selfieUrl",
          'QR_CODE_DATA' as "qrCodeData",
          true as "qrCodeScanned"
        FROM attendance_sessions s
        JOIN attendance_records ar ON s.attendance_record_id = ar.id
        WHERE ar.employee_id = $1
        ORDER BY s.created_at DESC
        LIMIT $2
      `);
      const result =
      /* istanbul ignore next */
      (cov_2sefjesn().s[57]++, await (0, database_1.getPool)().query(query, [employeeId, limit]));
      /* istanbul ignore next */
      cov_2sefjesn().s[58]++;
      return result.rows;
    } catch (error) {
      /* istanbul ignore next */
      cov_2sefjesn().s[59]++;
      console.error('Error getting attendance history:', error);
      /* istanbul ignore next */
      cov_2sefjesn().s[60]++;
      throw error;
    }
  }
  /**
   * Record time-based attendance using the new session system
   */
  async recordTimeBasedAttendance(data) {
    /* istanbul ignore next */
    cov_2sefjesn().f[5]++;
    cov_2sefjesn().s[61]++;
    try {
      const {
        employeeId,
        sessionType,
        location,
        qrCodeData,
        selfieUrl
      } =
      /* istanbul ignore next */
      (cov_2sefjesn().s[62]++, data);
      /* istanbul ignore next */
      cov_2sefjesn().s[63]++;
      console.log('KioskService.recordTimeBasedAttendance called with:', {
        employeeId,
        sessionType,
        location,
        qrCodeData,
        selfieUrl
      });
      // Use the attendance service to record time-based attendance
      const attendanceData =
      /* istanbul ignore next */
      (cov_2sefjesn().s[64]++, {
        employeeId,
        sessionType,
        qrCodeHash: qrCodeData,
        selfieImagePath: selfieUrl,
        // This is now the file path from Multer
        timestamp: new Date() // This will be converted to UTC in the attendance service
      });
      /* istanbul ignore next */
      cov_2sefjesn().s[65]++;
      await attendanceService_1.attendanceService.recordTimeBasedAttendance(attendanceData);
      // Find the session that was just created/updated
      const today =
      /* istanbul ignore next */
      (cov_2sefjesn().s[66]++, new Date());
      /* istanbul ignore next */
      cov_2sefjesn().s[67]++;
      today.setHours(0, 0, 0, 0);
      const query =
      /* istanbul ignore next */
      (cov_2sefjesn().s[68]++, `
        SELECT 
          s.id,
          ar.employee_id as "employeeId",
          s.session_type as "sessionType",
          COALESCE(s.clock_in, s.clock_out) as "timestamp",
          $1 as "location",
          s.selfie_image_path as "selfieUrl",
          $2 as "qrCodeData",
          true as "qrCodeScanned",
          CASE 
            WHEN s.session_type IN ('morning_in', 'afternoon_in') THEN 'clock_in'
            WHEN s.session_type IN ('morning_out', 'afternoon_out') THEN 'clock_out'
            ELSE 'clock_in'
          END as "type"
        FROM attendance_sessions s
        JOIN attendance_records ar ON s.attendance_record_id = ar.id
        WHERE ar.employee_id = $3
          AND ar.date = $4
          AND s.session_type = $5
        ORDER BY s.created_at DESC
        LIMIT 1
      `);
      const result =
      /* istanbul ignore next */
      (cov_2sefjesn().s[69]++, await (0, database_1.getPool)().query(query, [location, qrCodeData, employeeId, today, sessionType]));
      /* istanbul ignore next */
      cov_2sefjesn().s[70]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_2sefjesn().b[15][0]++;
        cov_2sefjesn().s[71]++;
        throw new Error('Failed to retrieve recorded attendance session');
      } else
      /* istanbul ignore next */
      {
        cov_2sefjesn().b[15][1]++;
      }
      cov_2sefjesn().s[72]++;
      console.log('KioskService.recordTimeBasedAttendance result:', result.rows[0]);
      /* istanbul ignore next */
      cov_2sefjesn().s[73]++;
      return result.rows[0];
    } catch (error) {
      /* istanbul ignore next */
      cov_2sefjesn().s[74]++;
      console.error('Error recording time-based attendance:', error);
      /* istanbul ignore next */
      cov_2sefjesn().s[75]++;
      throw error;
    }
  }
  /**
   * Get next expected session for employee
   */
  async getNextExpectedSession(employeeId) {
    /* istanbul ignore next */
    cov_2sefjesn().f[6]++;
    cov_2sefjesn().s[76]++;
    try {
      /* istanbul ignore next */
      cov_2sefjesn().s[77]++;
      return await attendanceService_1.attendanceService.getNextExpectedSession(employeeId);
    } catch (error) {
      /* istanbul ignore next */
      cov_2sefjesn().s[78]++;
      console.error('Error getting next expected session:', error);
      /* istanbul ignore next */
      cov_2sefjesn().s[79]++;
      throw error;
    }
  }
  /**
   * Validate attendance action for employee
   */
  async validateAttendanceAction(employeeId, sessionType) {
    /* istanbul ignore next */
    cov_2sefjesn().f[7]++;
    cov_2sefjesn().s[80]++;
    try {
      /* istanbul ignore next */
      cov_2sefjesn().s[81]++;
      return await attendanceService_1.attendanceService.validateAttendanceAction(employeeId, sessionType);
    } catch (error) {
      /* istanbul ignore next */
      cov_2sefjesn().s[82]++;
      console.error('Error validating attendance action:', error);
      /* istanbul ignore next */
      cov_2sefjesn().s[83]++;
      throw error;
    }
  }
  /**
   * Get today's attendance summary for employee
   */
  async getTodayAttendanceSummary(employeeId) {
    /* istanbul ignore next */
    cov_2sefjesn().f[8]++;
    cov_2sefjesn().s[84]++;
    try {
      const today =
      /* istanbul ignore next */
      (cov_2sefjesn().s[85]++, new Date());
      /* istanbul ignore next */
      cov_2sefjesn().s[86]++;
      today.setHours(0, 0, 0, 0);
      // Get today's sessions
      const sessions =
      /* istanbul ignore next */
      (cov_2sefjesn().s[87]++, await this.getAttendanceHistory(employeeId, 10));
      const todaySessions =
      /* istanbul ignore next */
      (cov_2sefjesn().s[88]++, sessions.filter(session => {
        /* istanbul ignore next */
        cov_2sefjesn().f[9]++;
        const sessionDate =
        /* istanbul ignore next */
        (cov_2sefjesn().s[89]++, new Date(session.timestamp));
        /* istanbul ignore next */
        cov_2sefjesn().s[90]++;
        sessionDate.setHours(0, 0, 0, 0);
        /* istanbul ignore next */
        cov_2sefjesn().s[91]++;
        return sessionDate.getTime() === today.getTime();
      }));
      // Get next expected session
      const nextSession =
      /* istanbul ignore next */
      (cov_2sefjesn().s[92]++, await this.getNextExpectedSession(employeeId));
      /* istanbul ignore next */
      cov_2sefjesn().s[93]++;
      return {
        sessions: todaySessions,
        nextExpectedSession: nextSession.sessionType,
        canPerformNext: nextSession.canPerform,
        reason: nextSession.reason
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2sefjesn().s[94]++;
      console.error('Error getting today attendance summary:', error);
      /* istanbul ignore next */
      cov_2sefjesn().s[95]++;
      throw error;
    }
  }
}
/* istanbul ignore next */
cov_2sefjesn().s[96]++;
exports.default = new KioskService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,