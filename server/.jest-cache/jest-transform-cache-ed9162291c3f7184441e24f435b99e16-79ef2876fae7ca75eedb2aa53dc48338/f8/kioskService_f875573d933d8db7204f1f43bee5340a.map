{"version":3,"names":["cov_2sefjesn","actualCoverage","s","database_1","require","attendanceService_1","KioskService","verifyEmployeeByQR","qrCodeData","f","qrData","JSON","parse","error","Error","employeeId","b","query","result","getPool","rows","length","console","recordAttendance","data","type","location","selfieUrl","log","today","Date","toISOString","split","attendanceRecordQuery","attendanceRecordResult","attendanceRecordId","id","existingRecordQuery","existingResult","now","existingSessionQuery","existingSession","session","clock_in","clock_out","updateQuery","createNewSession","timestamp","clockIn","clockOut","insertQuery","getLastAttendance","getAttendanceHistory","limit","recordTimeBasedAttendance","sessionType","attendanceData","qrCodeHash","selfieImagePath","attendanceService","setHours","getNextExpectedSession","validateAttendanceAction","getTodayAttendanceSummary","sessions","todaySessions","filter","sessionDate","getTime","nextSession","nextExpectedSession","canPerformNext","canPerform","reason","exports","default"],"sources":["/home/kim/tito/server/src/services/kiosk/kioskService.ts"],"sourcesContent":["import { getPool } from '../../config/database';\nimport { attendanceService, TimeBasedAttendanceData } from '../attendance/attendanceService';\nimport { SessionType, getSessionDisplayInfo } from '../../utils/timeValidation';\n\ninterface KioskEmployee {\n  id: string;\n  employeeId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  departmentId: string;\n  departmentName: string;\n  position: string;\n  employmentType: 'regular' | 'contractual' | 'jo';\n  hireDate: string;\n  baseSalary: number;\n  status: 'active' | 'inactive' | 'terminated' | 'on_leave';\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface KioskAttendanceRecord {\n  id: string;\n  employeeId: string;\n  type: 'clock_in' | 'clock_out';\n  sessionType: SessionType;\n  timestamp: string;\n  location: string;\n  selfieUrl?: string;\n  qrCodeScanned: boolean;\n  qrCodeData?: string;\n}\n\ninterface RecordAttendanceData {\n  employeeId: string;\n  type: 'clock_in' | 'clock_out';\n  location: string;\n  qrCodeData: string;\n  selfieUrl?: string;\n}\n\ninterface TimeBasedRecordAttendanceData {\n  employeeId: string;\n  sessionType: SessionType;\n  location: string;\n  qrCodeData: string;\n  selfieUrl?: string;\n}\n\nclass KioskService {\n  /**\n   * Verify employee by QR code data\n   */\n  async verifyEmployeeByQR(qrCodeData: string): Promise<KioskEmployee> {\n    try {\n      // Parse QR code data (assuming it's JSON)\n      let qrData;\n      try {\n        qrData = JSON.parse(qrCodeData);\n      } catch (error) {\n        throw new Error('Invalid QR code format');\n      }\n\n      // Extract employee ID from QR code\n      const employeeId = qrData.employeeId;\n      if (!employeeId) {\n        throw new Error('Employee ID not found in QR code');\n      }\n\n      // Query employee by employee ID\n      const query = `\n        SELECT \n          e.id,\n          e.employee_id as \"employeeId\",\n          u.first_name as \"firstName\",\n          u.last_name as \"lastName\",\n          u.email,\n          e.department_id as \"departmentId\",\n          d.name as \"departmentName\",\n          e.position,\n          e.employment_type as \"employmentType\",\n          e.hire_date as \"hireDate\",\n          e.base_salary as \"baseSalary\",\n          e.status,\n          e.created_at as \"createdAt\",\n          e.updated_at as \"updatedAt\"\n        FROM employees e\n        JOIN users u ON e.user_id = u.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        WHERE e.employee_id = $1 AND e.status = 'active'\n      `;\n\n      const result = await getPool().query(query, [employeeId]);\n      \n      if (result.rows.length === 0) {\n        throw new Error('Employee not found or inactive');\n      }\n\n      return result.rows[0];\n    } catch (error) {\n      console.error('Error verifying employee by QR:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Record attendance\n   */\n  async recordAttendance(data: RecordAttendanceData): Promise<KioskAttendanceRecord> {\n    try {\n      const { employeeId, type, location, qrCodeData, selfieUrl } = data;\n      console.log('KioskService.recordAttendance called with:', { employeeId, type, location, qrCodeData, selfieUrl });\n\n      // First, ensure attendance record exists for today\n      const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\n      \n      const attendanceRecordQuery = `\n        INSERT INTO attendance_records (employee_id, date, overall_status)\n        VALUES ($1, $2, 'present')\n        ON CONFLICT (employee_id, date) DO NOTHING\n        RETURNING id\n      `;\n\n      const attendanceRecordResult = await getPool().query(attendanceRecordQuery, [employeeId, today]);\n      \n      // Get the attendance record ID (either newly created or existing)\n      let attendanceRecordId;\n      if (attendanceRecordResult.rows.length > 0) {\n        attendanceRecordId = attendanceRecordResult.rows[0].id;\n      } else {\n        // Get existing record\n        const existingRecordQuery = `\n          SELECT id FROM attendance_records \n          WHERE employee_id = $1 AND date = $2\n        `;\n        const existingResult = await getPool().query(existingRecordQuery, [employeeId, today]);\n        attendanceRecordId = existingResult.rows[0].id;\n      }\n\n      const now = new Date();\n\n      // Check if there's an existing incomplete session for today\n      const existingSessionQuery = `\n        SELECT s.id, s.session_type, s.clock_in, s.clock_out\n        FROM attendance_sessions s\n        JOIN attendance_records ar ON s.attendance_record_id = ar.id\n        WHERE ar.employee_id = $1 \n          AND ar.date = $2\n          AND (s.clock_in IS NULL OR s.clock_out IS NULL)\n        ORDER BY s.created_at DESC\n        LIMIT 1\n      `;\n      \n      const existingSession = await getPool().query(existingSessionQuery, [employeeId, today]);\n      \n      let result;\n      \n      if (existingSession.rows.length > 0) {\n        // Update existing session\n        const session = existingSession.rows[0];\n        \n        if (type === 'clock_out' && session.clock_in && !session.clock_out) {\n          // Complete the session with clock_out\n          const updateQuery = `\n            UPDATE attendance_sessions \n            SET clock_out = $1, selfie_image_url = $5, updated_at = NOW()\n            WHERE id = $2\n            RETURNING \n              id,\n              $3 as \"employeeId\",\n              'clock_out' as \"type\",\n              $1 as \"timestamp\",\n              $4 as \"location\",\n              $5 as \"selfieUrl\",\n              $6 as \"qrCodeData\",\n              true as \"qrCodeScanned\"\n          `;\n          \n          result = await getPool().query(updateQuery, [\n            now.toISOString(),\n            session.id,\n            employeeId,\n            location,\n            selfieUrl || null,\n            qrCodeData\n          ]);\n        } else if (type === 'clock_in' && !session.clock_in) {\n          // Update existing session with clock_in\n          const updateQuery = `\n            UPDATE attendance_sessions \n            SET clock_in = $1, selfie_image_url = $5, updated_at = NOW()\n            WHERE id = $2\n            RETURNING \n              id,\n              $3 as \"employeeId\",\n              'clock_in' as \"type\",\n              $1 as \"timestamp\",\n              $4 as \"location\",\n              $5 as \"selfieUrl\",\n              $6 as \"qrCodeData\",\n              true as \"qrCodeScanned\"\n          `;\n          \n          result = await getPool().query(updateQuery, [\n            now.toISOString(),\n            session.id,\n            employeeId,\n            location,\n            selfieUrl || null,\n            qrCodeData\n          ]);\n        } else {\n          // Create new session if existing one can't be updated\n          result = await this.createNewSession(attendanceRecordId, type, now, location, selfieUrl, employeeId, qrCodeData);\n        }\n      } else {\n        // Create new session\n        result = await this.createNewSession(attendanceRecordId, type, now, location, selfieUrl, employeeId, qrCodeData);\n      }\n\n      console.log('KioskService.recordAttendance result:', result.rows[0]);\n      return result.rows[0];\n    } catch (error) {\n      console.error('Error recording attendance:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new attendance session\n   */\n  private async createNewSession(\n    attendanceRecordId: string, \n    type: string, \n    timestamp: Date, \n    location: string, \n    selfieUrl: string | undefined, \n    employeeId: string, \n    qrCodeData: string\n  ) {\n    const clockIn = type === 'clock_in' ? timestamp.toISOString() : null;\n    const clockOut = type === 'clock_out' ? timestamp.toISOString() : null;\n\n    const insertQuery = `\n      INSERT INTO attendance_sessions (\n        attendance_record_id,\n        session_type,\n        clock_in,\n        clock_out,\n        status,\n        selfie_image_path,\n        selfie_image_url,\n        created_at\n      ) VALUES ($1, $2, $3, $4, 'present', $5, $5, NOW())\n      RETURNING \n        id,\n        $6 as \"employeeId\",\n        $2 as \"type\",\n        COALESCE($3, $4) as \"timestamp\",\n        $7 as \"location\",\n        $5 as \"selfieUrl\",\n        $8 as \"qrCodeData\",\n        true as \"qrCodeScanned\"\n    `;\n\n    return await getPool().query(insertQuery, [\n      attendanceRecordId,\n      type,\n      clockIn,\n      clockOut,\n      selfieUrl || null,\n      employeeId,\n      location,\n      qrCodeData\n    ]);\n  }\n\n  /**\n   * Get last attendance record for employee\n   */\n  async getLastAttendance(employeeId: string): Promise<KioskAttendanceRecord | null> {\n    try {\n      const query = `\n        SELECT \n          s.id,\n          ar.employee_id as \"employeeId\",\n          s.session_type as \"type\",\n          COALESCE(s.clock_in, s.clock_out) as \"timestamp\",\n          'Office' as \"location\",\n          s.selfie_image_path as \"selfieUrl\",\n          'QR_CODE_DATA' as \"qrCodeData\",\n          true as \"qrCodeScanned\"\n        FROM attendance_sessions s\n        JOIN attendance_records ar ON s.attendance_record_id = ar.id\n        WHERE ar.employee_id = $1\n        ORDER BY s.created_at DESC\n        LIMIT 1\n      `;\n\n      const result = await getPool().query(query, [employeeId]);\n      \n      return result.rows.length > 0 ? result.rows[0] : null;\n    } catch (error) {\n      console.error('Error getting last attendance:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get attendance history for employee\n   */\n  async getAttendanceHistory(employeeId: string, limit: number = 10): Promise<KioskAttendanceRecord[]> {\n    try {\n      const query = `\n        SELECT \n          s.id,\n          ar.employee_id as \"employeeId\",\n          s.session_type as \"type\",\n          COALESCE(s.clock_in, s.clock_out) as \"timestamp\",\n          'Office' as \"location\",\n          s.selfie_image_path as \"selfieUrl\",\n          'QR_CODE_DATA' as \"qrCodeData\",\n          true as \"qrCodeScanned\"\n        FROM attendance_sessions s\n        JOIN attendance_records ar ON s.attendance_record_id = ar.id\n        WHERE ar.employee_id = $1\n        ORDER BY s.created_at DESC\n        LIMIT $2\n      `;\n\n      const result = await getPool().query(query, [employeeId, limit]);\n      \n      return result.rows;\n    } catch (error) {\n      console.error('Error getting attendance history:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Record time-based attendance using the new session system\n   */\n  async recordTimeBasedAttendance(data: TimeBasedRecordAttendanceData): Promise<KioskAttendanceRecord> {\n    try {\n      const { employeeId, sessionType, location, qrCodeData, selfieUrl } = data;\n      console.log('KioskService.recordTimeBasedAttendance called with:', { employeeId, sessionType, location, qrCodeData, selfieUrl });\n\n      // Use the attendance service to record time-based attendance\n      const attendanceData: TimeBasedAttendanceData = {\n        employeeId,\n        sessionType,\n        qrCodeHash: qrCodeData,\n        selfieImagePath: selfieUrl, // This is now the file path from Multer\n        timestamp: new Date() // This will be converted to UTC in the attendance service\n      };\n\n      await attendanceService.recordTimeBasedAttendance(attendanceData);\n      \n      // Find the session that was just created/updated\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const query = `\n        SELECT \n          s.id,\n          ar.employee_id as \"employeeId\",\n          s.session_type as \"sessionType\",\n          COALESCE(s.clock_in, s.clock_out) as \"timestamp\",\n          $1 as \"location\",\n          s.selfie_image_path as \"selfieUrl\",\n          $2 as \"qrCodeData\",\n          true as \"qrCodeScanned\",\n          CASE \n            WHEN s.session_type IN ('morning_in', 'afternoon_in') THEN 'clock_in'\n            WHEN s.session_type IN ('morning_out', 'afternoon_out') THEN 'clock_out'\n            ELSE 'clock_in'\n          END as \"type\"\n        FROM attendance_sessions s\n        JOIN attendance_records ar ON s.attendance_record_id = ar.id\n        WHERE ar.employee_id = $3\n          AND ar.date = $4\n          AND s.session_type = $5\n        ORDER BY s.created_at DESC\n        LIMIT 1\n      `;\n\n      const result = await getPool().query(query, [location, qrCodeData, employeeId, today, sessionType]);\n      \n      if (result.rows.length === 0) {\n        throw new Error('Failed to retrieve recorded attendance session');\n      }\n\n      console.log('KioskService.recordTimeBasedAttendance result:', result.rows[0]);\n      return result.rows[0];\n    } catch (error) {\n      console.error('Error recording time-based attendance:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get next expected session for employee\n   */\n  async getNextExpectedSession(employeeId: string): Promise<{\n    sessionType: SessionType | null;\n    displayInfo: ReturnType<typeof getSessionDisplayInfo> | null;\n    canPerform: boolean;\n    reason?: string;\n  }> {\n    try {\n      return await attendanceService.getNextExpectedSession(employeeId);\n    } catch (error) {\n      console.error('Error getting next expected session:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate attendance action for employee\n   */\n  async validateAttendanceAction(employeeId: string, sessionType: SessionType): Promise<{\n    canPerform: boolean;\n    reason?: string;\n    nextExpectedSession?: SessionType;\n    sessionDisplayInfo?: ReturnType<typeof getSessionDisplayInfo>;\n  }> {\n    try {\n      return await attendanceService.validateAttendanceAction(employeeId, sessionType);\n    } catch (error) {\n      console.error('Error validating attendance action:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get today's attendance summary for employee\n   */\n  async getTodayAttendanceSummary(employeeId: string): Promise<{\n    sessions: KioskAttendanceRecord[];\n    nextExpectedSession: SessionType | null;\n    canPerformNext: boolean;\n    reason?: string;\n  }> {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      // Get today's sessions\n      const sessions = await this.getAttendanceHistory(employeeId, 10);\n      const todaySessions = sessions.filter(session => {\n        const sessionDate = new Date(session.timestamp);\n        sessionDate.setHours(0, 0, 0, 0);\n        return sessionDate.getTime() === today.getTime();\n      });\n\n      // Get next expected session\n      const nextSession = await this.getNextExpectedSession(employeeId);\n\n      return {\n        sessions: todaySessions,\n        nextExpectedSession: nextSession.sessionType,\n        canPerformNext: nextSession.canPerform,\n        reason: nextSession.reason\n      };\n    } catch (error) {\n      console.error('Error getting today attendance summary:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new KioskService();\n"],"mappingscAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,YAAA;AAAAA,YAAA,GAAAE,CAAA;;;;AA3DR,MAAAC,UAAA;AAAA;AAAA,CAAAH,YAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAC,mBAAA;AAAA;AAAA,CAAAL,YAAA,GAAAE,CAAA,OAAAE,OAAA;AAgDA,MAAME,YAAY;EAChB;;;EAGA,MAAMC,kBAAkBA,CAACC,UAAkB;IAAA;IAAAR,YAAA,GAAAS,CAAA;IAAAT,YAAA,GAAAE,CAAA;IACzC,IAAI;MACF;MACA,IAAIQ,MAAM;MAAC;MAAAV,YAAA,GAAAE,CAAA;MACX,IAAI;QAAA;QAAAF,YAAA,GAAAE,CAAA;QACFQ,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC;MACjC,CAAC,CAAC,OAAOK,KAAK,EAAE;QAAA;QAAAb,YAAA,GAAAE,CAAA;QACd,MAAM,IAAIY,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MAEA;MACA,MAAMC,UAAU;MAAA;MAAA,CAAAf,YAAA,GAAAE,CAAA,OAAGQ,MAAM,CAACK,UAAU;MAAC;MAAAf,YAAA,GAAAE,CAAA;MACrC,IAAI,CAACa,UAAU,EAAE;QAAA;QAAAf,YAAA,GAAAgB,CAAA;QAAAhB,YAAA,GAAAE,CAAA;QACf,MAAM,IAAIY,KAAK,CAAC,kCAAkC,CAAC;MACrD,CAAC;MAAA;MAAA;QAAAd,YAAA,GAAAgB,CAAA;MAAA;MAED;MACA,MAAMC,KAAK;MAAA;MAAA,CAAAjB,YAAA,GAAAE,CAAA,QAAG;;;;;;;;;;;;;;;;;;;;OAoBb;MAED,MAAMgB,MAAM;MAAA;MAAA,CAAAlB,YAAA,GAAAE,CAAA,QAAG,MAAM,IAAAC,UAAA,CAAAgB,OAAO,GAAE,CAACF,KAAK,CAACA,KAAK,EAAE,CAACF,UAAU,CAAC,CAAC;MAAC;MAAAf,YAAA,GAAAE,CAAA;MAE1D,IAAIgB,MAAM,CAACE,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;QAAA;QAAArB,YAAA,GAAAgB,CAAA;QAAAhB,YAAA,GAAAE,CAAA;QAC5B,MAAM,IAAIY,KAAK,CAAC,gCAAgC,CAAC;MACnD,CAAC;MAAA;MAAA;QAAAd,YAAA,GAAAgB,CAAA;MAAA;MAAAhB,YAAA,GAAAE,CAAA;MAED,OAAOgB,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOP,KAAK,EAAE;MAAA;MAAAb,YAAA,GAAAE,CAAA;MACdoB,OAAO,CAACT,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MAAC;MAAAb,YAAA,GAAAE,CAAA;MACxD,MAAMW,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMU,gBAAgBA,CAACC,IAA0B;IAAA;IAAAxB,YAAA,GAAAS,CAAA;IAAAT,YAAA,GAAAE,CAAA;IAC/C,IAAI;MACF,MAAM;QAAEa,UAAU;QAAEU,IAAI;QAAEC,QAAQ;QAAElB,UAAU;QAAEmB;MAAS,CAAE;MAAA;MAAA,CAAA3B,YAAA,GAAAE,CAAA,QAAGsB,IAAI;MAAC;MAAAxB,YAAA,GAAAE,CAAA;MACnEoB,OAAO,CAACM,GAAG,CAAC,4CAA4C,EAAE;QAAEb,UAAU;QAAEU,IAAI;QAAEC,QAAQ;QAAElB,UAAU;QAAEmB;MAAS,CAAE,CAAC;MAEhH;MACA,MAAME,KAAK;MAAA;MAAA,CAAA7B,YAAA,GAAAE,CAAA,QAAG,IAAI4B,IAAI,EAAE,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC;MAEtD,MAAMC,qBAAqB;MAAA;MAAA,CAAAjC,YAAA,GAAAE,CAAA,QAAG;;;;;OAK7B;MAED,MAAMgC,sBAAsB;MAAA;MAAA,CAAAlC,YAAA,GAAAE,CAAA,QAAG,MAAM,IAAAC,UAAA,CAAAgB,OAAO,GAAE,CAACF,KAAK,CAACgB,qBAAqB,EAAE,CAAClB,UAAU,EAAEc,KAAK,CAAC,CAAC;MAEhG;MACA,IAAIM,kBAAkB;MAAC;MAAAnC,YAAA,GAAAE,CAAA;MACvB,IAAIgC,sBAAsB,CAACd,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QAAA;QAAArB,YAAA,GAAAgB,CAAA;QAAAhB,YAAA,GAAAE,CAAA;QAC1CiC,kBAAkB,GAAGD,sBAAsB,CAACd,IAAI,CAAC,CAAC,CAAC,CAACgB,EAAE;MACxD,CAAC,MAAM;QAAA;QAAApC,YAAA,GAAAgB,CAAA;QACL;QACA,MAAMqB,mBAAmB;QAAA;QAAA,CAAArC,YAAA,GAAAE,CAAA,QAAG;;;SAG3B;QACD,MAAMoC,cAAc;QAAA;QAAA,CAAAtC,YAAA,GAAAE,CAAA,QAAG,MAAM,IAAAC,UAAA,CAAAgB,OAAO,GAAE,CAACF,KAAK,CAACoB,mBAAmB,EAAE,CAACtB,UAAU,EAAEc,KAAK,CAAC,CAAC;QAAC;QAAA7B,YAAA,GAAAE,CAAA;QACvFiC,kBAAkB,GAAGG,cAAc,CAAClB,IAAI,CAAC,CAAC,CAAC,CAACgB,EAAE;MAChD;MAEA,MAAMG,GAAG;MAAA;MAAA,CAAAvC,YAAA,GAAAE,CAAA,QAAG,IAAI4B,IAAI,EAAE;MAEtB;MACA,MAAMU,oBAAoB;MAAA;MAAA,CAAAxC,YAAA,GAAAE,CAAA,QAAG;;;;;;;;;OAS5B;MAED,MAAMuC,eAAe;MAAA;MAAA,CAAAzC,YAAA,GAAAE,CAAA,QAAG,MAAM,IAAAC,UAAA,CAAAgB,OAAO,GAAE,CAACF,KAAK,CAACuB,oBAAoB,EAAE,CAACzB,UAAU,EAAEc,KAAK,CAAC,CAAC;MAExF,IAAIX,MAAM;MAAC;MAAAlB,YAAA,GAAAE,CAAA;MAEX,IAAIuC,eAAe,CAACrB,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QAAA;QAAArB,YAAA,GAAAgB,CAAA;QACnC;QACA,MAAM0B,OAAO;QAAA;QAAA,CAAA1C,YAAA,GAAAE,CAAA,QAAGuC,eAAe,CAACrB,IAAI,CAAC,CAAC,CAAC;QAAC;QAAApB,YAAA,GAAAE,CAAA;QAExC;QAAI;QAAA,CAAAF,YAAA,GAAAgB,CAAA,UAAAS,IAAI,KAAK,WAAW;QAAA;QAAA,CAAAzB,YAAA,GAAAgB,CAAA,UAAI0B,OAAO,CAACC,QAAQ;QAAA;QAAA,CAAA3C,YAAA,GAAAgB,CAAA,UAAI,CAAC0B,OAAO,CAACE,SAAS,GAAE;UAAA;UAAA5C,YAAA,GAAAgB,CAAA;UAClE;UACA,MAAM6B,WAAW;UAAA;UAAA,CAAA7C,YAAA,GAAAE,CAAA,QAAG;;;;;;;;;;;;;WAanB;UAAC;UAAAF,YAAA,GAAAE,CAAA;UAEFgB,MAAM,GAAG,MAAM,IAAAf,UAAA,CAAAgB,OAAO,GAAE,CAACF,KAAK,CAAC4B,WAAW,EAAE,CAC1CN,GAAG,CAACR,WAAW,EAAE,EACjBW,OAAO,CAACN,EAAE,EACVrB,UAAU,EACVW,QAAQ;UACR;UAAA,CAAA1B,YAAA,GAAAgB,CAAA,UAAAW,SAAS;UAAA;UAAA,CAAA3B,YAAA,GAAAgB,CAAA,UAAI,IAAI,GACjBR,UAAU,CACX,CAAC;QACJ,CAAC,MAAM;UAAA;UAAAR,YAAA,GAAAgB,CAAA;UAAAhB,YAAA,GAAAE,CAAA;UAAA;UAAI;UAAA,CAAAF,YAAA,GAAAgB,CAAA,UAAAS,IAAI,KAAK,UAAU;UAAA;UAAA,CAAAzB,YAAA,GAAAgB,CAAA,UAAI,CAAC0B,OAAO,CAACC,QAAQ,GAAE;YAAA;YAAA3C,YAAA,GAAAgB,CAAA;YACnD;YACA,MAAM6B,WAAW;YAAA;YAAA,CAAA7C,YAAA,GAAAE,CAAA,QAAG;;;;;;;;;;;;;WAanB;YAAC;YAAAF,YAAA,GAAAE,CAAA;YAEFgB,MAAM,GAAG,MAAM,IAAAf,UAAA,CAAAgB,OAAO,GAAE,CAACF,KAAK,CAAC4B,WAAW,EAAE,CAC1CN,GAAG,CAACR,WAAW,EAAE,EACjBW,OAAO,CAACN,EAAE,EACVrB,UAAU,EACVW,QAAQ;YACR;YAAA,CAAA1B,YAAA,GAAAgB,CAAA,UAAAW,SAAS;YAAA;YAAA,CAAA3B,YAAA,GAAAgB,CAAA,UAAI,IAAI,GACjBR,UAAU,CACX,CAAC;UACJ,CAAC,MAAM;YAAA;YAAAR,YAAA,GAAAgB,CAAA;YAAAhB,YAAA,GAAAE,CAAA;YACL;YACAgB,MAAM,GAAG,MAAM,IAAI,CAAC4B,gBAAgB,CAACX,kBAAkB,EAAEV,IAAI,EAAEc,GAAG,EAAEb,QAAQ,EAAEC,SAAS,EAAEZ,UAAU,EAAEP,UAAU,CAAC;UAClH;QAAA;MACF,CAAC,MAAM;QAAA;QAAAR,YAAA,GAAAgB,CAAA;QAAAhB,YAAA,GAAAE,CAAA;QACL;QACAgB,MAAM,GAAG,MAAM,IAAI,CAAC4B,gBAAgB,CAACX,kBAAkB,EAAEV,IAAI,EAAEc,GAAG,EAAEb,QAAQ,EAAEC,SAAS,EAAEZ,UAAU,EAAEP,UAAU,CAAC;MAClH;MAAC;MAAAR,YAAA,GAAAE,CAAA;MAEDoB,OAAO,CAACM,GAAG,CAAC,uCAAuC,EAAEV,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;MAAC;MAAApB,YAAA,GAAAE,CAAA;MACrE,OAAOgB,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOP,KAAK,EAAE;MAAA;MAAAb,YAAA,GAAAE,CAAA;MACdoB,OAAO,CAACT,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MAAC;MAAAb,YAAA,GAAAE,CAAA;MACpD,MAAMW,KAAK;IACb;EACF;EAEA;;;EAGQ,MAAMiC,gBAAgBA,CAC5BX,kBAA0B,EAC1BV,IAAY,EACZsB,SAAe,EACfrB,QAAgB,EAChBC,SAA6B,EAC7BZ,UAAkB,EAClBP,UAAkB;IAAA;IAAAR,YAAA,GAAAS,CAAA;IAElB,MAAMuC,OAAO;IAAA;IAAA,CAAAhD,YAAA,GAAAE,CAAA,QAAGuB,IAAI,KAAK,UAAU;IAAA;IAAA,CAAAzB,YAAA,GAAAgB,CAAA,WAAG+B,SAAS,CAAChB,WAAW,EAAE;IAAA;IAAA,CAAA/B,YAAA,GAAAgB,CAAA,WAAG,IAAI;IACpE,MAAMiC,QAAQ;IAAA;IAAA,CAAAjD,YAAA,GAAAE,CAAA,QAAGuB,IAAI,KAAK,WAAW;IAAA;IAAA,CAAAzB,YAAA,GAAAgB,CAAA,WAAG+B,SAAS,CAAChB,WAAW,EAAE;IAAA;IAAA,CAAA/B,YAAA,GAAAgB,CAAA,WAAG,IAAI;IAEtE,MAAMkC,WAAW;IAAA;IAAA,CAAAlD,YAAA,GAAAE,CAAA,QAAG;;;;;;;;;;;;;;;;;;;;KAoBnB;IAAC;IAAAF,YAAA,GAAAE,CAAA;IAEF,OAAO,MAAM,IAAAC,UAAA,CAAAgB,OAAO,GAAE,CAACF,KAAK,CAACiC,WAAW,EAAE,CACxCf,kBAAkB,EAClBV,IAAI,EACJuB,OAAO,EACPC,QAAQ;IACR;IAAA,CAAAjD,YAAA,GAAAgB,CAAA,WAAAW,SAAS;IAAA;IAAA,CAAA3B,YAAA,GAAAgB,CAAA,WAAI,IAAI,GACjBD,UAAU,EACVW,QAAQ,EACRlB,UAAU,CACX,CAAC;EACJ;EAEA;;;EAGA,MAAM2C,iBAAiBA,CAACpC,UAAkB;IAAA;IAAAf,YAAA,GAAAS,CAAA;IAAAT,YAAA,GAAAE,CAAA;IACxC,IAAI;MACF,MAAMe,KAAK;MAAA;MAAA,CAAAjB,YAAA,GAAAE,CAAA,QAAG;;;;;;;;;;;;;;;OAeb;MAED,MAAMgB,MAAM;MAAA;MAAA,CAAAlB,YAAA,GAAAE,CAAA,QAAG,MAAM,IAAAC,UAAA,CAAAgB,OAAO,GAAE,CAACF,KAAK,CAACA,KAAK,EAAE,CAACF,UAAU,CAAC,CAAC;MAAC;MAAAf,YAAA,GAAAE,CAAA;MAE1D,OAAOgB,MAAM,CAACE,IAAI,CAACC,MAAM,GAAG,CAAC;MAAA;MAAA,CAAArB,YAAA,GAAAgB,CAAA,WAAGE,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;MAAA;MAAA,CAAApB,YAAA,GAAAgB,CAAA,WAAG,IAAI;IACvD,CAAC,CAAC,OAAOH,KAAK,EAAE;MAAA;MAAAb,YAAA,GAAAE,CAAA;MACdoB,OAAO,CAACT,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MAAC;MAAAb,YAAA,GAAAE,CAAA;MACvD,MAAMW,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMuC,oBAAoBA,CAACrC,UAAkB,EAAEsC,KAAA;EAAA;EAAA,CAAArD,YAAA,GAAAgB,CAAA,WAAgB,EAAE;IAAA;IAAAhB,YAAA,GAAAS,CAAA;IAAAT,YAAA,GAAAE,CAAA;IAC/D,IAAI;MACF,MAAMe,KAAK;MAAA;MAAA,CAAAjB,YAAA,GAAAE,CAAA,QAAG;;;;;;;;;;;;;;;OAeb;MAED,MAAMgB,MAAM;MAAA;MAAA,CAAAlB,YAAA,GAAAE,CAAA,QAAG,MAAM,IAAAC,UAAA,CAAAgB,OAAO,GAAE,CAACF,KAAK,CAACA,KAAK,EAAE,CAACF,UAAU,EAAEsC,KAAK,CAAC,CAAC;MAAC;MAAArD,YAAA,GAAAE,CAAA;MAEjE,OAAOgB,MAAM,CAACE,IAAI;IACpB,CAAC,CAAC,OAAOP,KAAK,EAAE;MAAA;MAAAb,YAAA,GAAAE,CAAA;MACdoB,OAAO,CAACT,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAAC;MAAAb,YAAA,GAAAE,CAAA;MAC1D,MAAMW,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMyC,yBAAyBA,CAAC9B,IAAmC;IAAA;IAAAxB,YAAA,GAAAS,CAAA;IAAAT,YAAA,GAAAE,CAAA;IACjE,IAAI;MACF,MAAM;QAAEa,UAAU;QAAEwC,WAAW;QAAE7B,QAAQ;QAAElB,UAAU;QAAEmB;MAAS,CAAE;MAAA;MAAA,CAAA3B,YAAA,GAAAE,CAAA,QAAGsB,IAAI;MAAC;MAAAxB,YAAA,GAAAE,CAAA;MAC1EoB,OAAO,CAACM,GAAG,CAAC,qDAAqD,EAAE;QAAEb,UAAU;QAAEwC,WAAW;QAAE7B,QAAQ;QAAElB,UAAU;QAAEmB;MAAS,CAAE,CAAC;MAEhI;MACA,MAAM6B,cAAc;MAAA;MAAA,CAAAxD,YAAA,GAAAE,CAAA,QAA4B;QAC9Ca,UAAU;QACVwC,WAAW;QACXE,UAAU,EAAEjD,UAAU;QACtBkD,eAAe,EAAE/B,SAAS;QAAE;QAC5BoB,SAAS,EAAE,IAAIjB,IAAI,EAAE,CAAC;OACvB;MAAC;MAAA9B,YAAA,GAAAE,CAAA;MAEF,MAAMG,mBAAA,CAAAsD,iBAAiB,CAACL,yBAAyB,CAACE,cAAc,CAAC;MAEjE;MACA,MAAM3B,KAAK;MAAA;MAAA,CAAA7B,YAAA,GAAAE,CAAA,QAAG,IAAI4B,IAAI,EAAE;MAAC;MAAA9B,YAAA,GAAAE,CAAA;MACzB2B,KAAK,CAAC+B,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAE1B,MAAM3C,KAAK;MAAA;MAAA,CAAAjB,YAAA,GAAAE,CAAA,QAAG;;;;;;;;;;;;;;;;;;;;;;OAsBb;MAED,MAAMgB,MAAM;MAAA;MAAA,CAAAlB,YAAA,GAAAE,CAAA,QAAG,MAAM,IAAAC,UAAA,CAAAgB,OAAO,GAAE,CAACF,KAAK,CAACA,KAAK,EAAE,CAACS,QAAQ,EAAElB,UAAU,EAAEO,UAAU,EAAEc,KAAK,EAAE0B,WAAW,CAAC,CAAC;MAAC;MAAAvD,YAAA,GAAAE,CAAA;MAEpG,IAAIgB,MAAM,CAACE,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;QAAA;QAAArB,YAAA,GAAAgB,CAAA;QAAAhB,YAAA,GAAAE,CAAA;QAC5B,MAAM,IAAIY,KAAK,CAAC,gDAAgD,CAAC;MACnE,CAAC;MAAA;MAAA;QAAAd,YAAA,GAAAgB,CAAA;MAAA;MAAAhB,YAAA,GAAAE,CAAA;MAEDoB,OAAO,CAACM,GAAG,CAAC,gDAAgD,EAAEV,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;MAAC;MAAApB,YAAA,GAAAE,CAAA;MAC9E,OAAOgB,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOP,KAAK,EAAE;MAAA;MAAAb,YAAA,GAAAE,CAAA;MACdoB,OAAO,CAACT,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAAC;MAAAb,YAAA,GAAAE,CAAA;MAC/D,MAAMW,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMgD,sBAAsBA,CAAC9C,UAAkB;IAAA;IAAAf,YAAA,GAAAS,CAAA;IAAAT,YAAA,GAAAE,CAAA;IAM7C,IAAI;MAAA;MAAAF,YAAA,GAAAE,CAAA;MACF,OAAO,MAAMG,mBAAA,CAAAsD,iBAAiB,CAACE,sBAAsB,CAAC9C,UAAU,CAAC;IACnE,CAAC,CAAC,OAAOF,KAAK,EAAE;MAAA;MAAAb,YAAA,GAAAE,CAAA;MACdoB,OAAO,CAACT,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAAC;MAAAb,YAAA,GAAAE,CAAA;MAC7D,MAAMW,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMiD,wBAAwBA,CAAC/C,UAAkB,EAAEwC,WAAwB;IAAA;IAAAvD,YAAA,GAAAS,CAAA;IAAAT,YAAA,GAAAE,CAAA;IAMzE,IAAI;MAAA;MAAAF,YAAA,GAAAE,CAAA;MACF,OAAO,MAAMG,mBAAA,CAAAsD,iBAAiB,CAACG,wBAAwB,CAAC/C,UAAU,EAAEwC,WAAW,CAAC;IAClF,CAAC,CAAC,OAAO1C,KAAK,EAAE;MAAA;MAAAb,YAAA,GAAAE,CAAA;MACdoB,OAAO,CAACT,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAAC;MAAAb,YAAA,GAAAE,CAAA;MAC5D,MAAMW,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMkD,yBAAyBA,CAAChD,UAAkB;IAAA;IAAAf,YAAA,GAAAS,CAAA;IAAAT,YAAA,GAAAE,CAAA;IAMhD,IAAI;MACF,MAAM2B,KAAK;MAAA;MAAA,CAAA7B,YAAA,GAAAE,CAAA,QAAG,IAAI4B,IAAI,EAAE;MAAC;MAAA9B,YAAA,GAAAE,CAAA;MACzB2B,KAAK,CAAC+B,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAE1B;MACA,MAAMI,QAAQ;MAAA;MAAA,CAAAhE,YAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACkD,oBAAoB,CAACrC,UAAU,EAAE,EAAE,CAAC;MAChE,MAAMkD,aAAa;MAAA;MAAA,CAAAjE,YAAA,GAAAE,CAAA,QAAG8D,QAAQ,CAACE,MAAM,CAACxB,OAAO,IAAG;QAAA;QAAA1C,YAAA,GAAAS,CAAA;QAC9C,MAAM0D,WAAW;QAAA;QAAA,CAAAnE,YAAA,GAAAE,CAAA,QAAG,IAAI4B,IAAI,CAACY,OAAO,CAACK,SAAS,CAAC;QAAC;QAAA/C,YAAA,GAAAE,CAAA;QAChDiE,WAAW,CAACP,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAAC;QAAA5D,YAAA,GAAAE,CAAA;QACjC,OAAOiE,WAAW,CAACC,OAAO,EAAE,KAAKvC,KAAK,CAACuC,OAAO,EAAE;MAClD,CAAC,CAAC;MAEF;MACA,MAAMC,WAAW;MAAA;MAAA,CAAArE,YAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAAC2D,sBAAsB,CAAC9C,UAAU,CAAC;MAAC;MAAAf,YAAA,GAAAE,CAAA;MAElE,OAAO;QACL8D,QAAQ,EAAEC,aAAa;QACvBK,mBAAmB,EAAED,WAAW,CAACd,WAAW;QAC5CgB,cAAc,EAAEF,WAAW,CAACG,UAAU;QACtCC,MAAM,EAAEJ,WAAW,CAACI;OACrB;IACH,CAAC,CAAC,OAAO5D,KAAK,EAAE;MAAA;MAAAb,YAAA,GAAAE,CAAA;MACdoB,OAAO,CAACT,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAAC;MAAAb,YAAA,GAAAE,CAAA;MAChE,MAAMW,KAAK;IACb;EACF;;AACD;AAAAb,YAAA,GAAAE,CAAA;AAEDwE,OAAA,CAAAC,OAAA,GAAe,IAAIrE,YAAY,EAAE","ignoreList":[]}