3d5760db80b0a09f45eee46c1fe042a9
"use strict";
/**
 * Business Process End-to-End Tests
 *
 * Comprehensive testing of complete business processes including:
 * - Employee onboarding process
 * - Payroll processing process
 * - Leave management process
 * - Attendance management process
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock axios for testing
const axios = {
    create: () => ({
        get: jest.fn(),
        post: jest.fn(),
        put: jest.fn(),
        delete: jest.fn(),
        patch: jest.fn(),
        interceptors: {
            request: { use: jest.fn() },
            response: { use: jest.fn() }
        }
    })
};
describe('Business Process End-to-End Tests', () => {
    // let e2eSuite: E2ETestSuite;
    let config;
    let hrToken;
    let employeeToken;
    beforeAll(async () => {
        config = {
            baseURL: process.env.TEST_BASE_URL || 'http://localhost:3000',
            timeout: 30000,
            maxRetries: 3,
            testUsers: {
                hr: {
                    username: 'hr1',
                    password: 'HR123!',
                    role: 'hr'
                },
                departmentHead: {
                    username: 'depthead1',
                    password: 'DeptHead123!',
                    role: 'department_head'
                },
                employee: {
                    username: 'employee1',
                    password: 'Employee123!',
                    role: 'employee'
                }
            },
            testData: {
                department: {
                    name: 'Test Department E2E',
                    description: 'Test department for E2E testing'
                },
                employee: {
                    name: 'Test Employee E2E',
                    email: 'testemployee@example.com',
                    position: 'Test Position'
                },
                payroll: {
                    period: '2024-01',
                    amount: 50000
                }
            }
        };
        // e2eSuite = new E2ETestSuite(config);
        // Get authentication tokens
        try {
            const hrLoginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                username: config.testUsers.hr.username,
                password: config.testUsers.hr.password
            }, {
                timeout: 10000,
                validateStatus: () => true
            });
            if (hrLoginResponse.status === 200) {
                hrToken = hrLoginResponse.data.token;
            }
            const employeeLoginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                username: config.testUsers.employee.username,
                password: config.testUsers.employee.password
            }, {
                timeout: 10000,
                validateStatus: () => true
            });
            if (employeeLoginResponse.status === 200) {
                employeeToken = employeeLoginResponse.data.token;
            }
        }
        catch (error) {
            console.warn('Could not obtain test tokens, some tests may be skipped');
        }
    });
    describe('Employee Onboarding Process', () => {
        it('should complete full employee onboarding process', async () => {
            const startTime = Date.now();
            let departmentId;
            let employeeId;
            let userId;
            try {
                // Step 1: Create Department (if not exists)
                console.log('🏢 Step 1: Create Department');
                const departmentResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/departments`, {
                    name: `E2E Department ${Date.now()}`,
                    description: 'Department for E2E onboarding test'
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(departmentResponse.status).toBe(201);
                departmentId = departmentResponse.data.id;
                console.log('✅ Department created successfully');
                // Step 2: Create User Account
                console.log('👤 Step 2: Create User Account');
                const userResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/users`, {
                    username: `e2euser${Date.now()}`,
                    email: `e2euser${Date.now()}@example.com`,
                    password: 'E2ETest123!',
                    role: 'employee'
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(userResponse.status).toBe(201);
                userId = userResponse.data.id;
                console.log('✅ User account created successfully');
                // Step 3: Create Employee Record
                console.log('👥 Step 3: Create Employee Record');
                const employeeResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/employees`, {
                    user_id: userId,
                    name: `E2E Employee ${Date.now()}`,
                    email: `e2eemployee${Date.now()}@example.com`,
                    position: 'E2E Test Position',
                    department_id: departmentId,
                    hire_date: new Date().toISOString().split('T')[0],
                    base_salary: 50000
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(employeeResponse.status).toBe(201);
                employeeId = employeeResponse.data.id;
                console.log('✅ Employee record created successfully');
                // Step 4: Generate Employee ID Card
                console.log('🆔 Step 4: Generate Employee ID Card');
                const idCardResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/employees/${employeeId}/id-card`, {}, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(idCardResponse.status).toBe(201);
                console.log('✅ Employee ID card generated successfully');
                // Step 5: Initialize Leave Balance
                console.log('📊 Step 5: Initialize Leave Balance');
                const leaveBalanceResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/employees/${employeeId}/leave-balance`, {
                    vacation_days: 15,
                    sick_days: 10
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(leaveBalanceResponse.status).toBe(201);
                console.log('✅ Leave balance initialized successfully');
                // Step 6: Set Up Employee Benefits
                console.log('💰 Step 6: Set Up Employee Benefits');
                const benefitsResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/employees/${employeeId}/benefits`, {
                    transportation_allowance: 5000,
                    meal_allowance: 3000
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(benefitsResponse.status).toBe(201);
                console.log('✅ Employee benefits set up successfully');
                // Step 7: Verify Employee Can Access System
                console.log('🔐 Step 7: Verify Employee Can Access System');
                const employeeLoginResponse = await axios.create().post(`${config.baseURL}/api/v1/auth/login`, {
                    username: `e2euser${Date.now()}`,
                    password: 'E2ETest123!'
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(employeeLoginResponse.status).toBe(200);
                console.log('✅ Employee can access system successfully');
                const endTime = Date.now();
                const duration = endTime - startTime;
                console.log(`🎉 Employee onboarding process completed successfully in ${duration}ms`);
            }
            catch (error) {
                console.error('❌ Employee onboarding process failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 120000);
        it('should handle onboarding process error scenarios', async () => {
            try {
                // Try to create employee without department
                const invalidEmployeeResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/employees`, {
                    name: 'Test Employee',
                    email: 'test@example.com',
                    position: 'Test Position',
                    department_id: 99999 // Non-existent department
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(invalidEmployeeResponse.status).toBe(400);
                console.log('✅ Employee creation without valid department properly rejected');
                // Try to create employee with duplicate email
                const duplicateEmailResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/employees`, {
                    name: 'Test Employee 2',
                    email: 'test@example.com', // Duplicate email
                    position: 'Test Position 2',
                    department_id: 1
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(duplicateEmailResponse.status).toBe(400);
                console.log('✅ Employee creation with duplicate email properly rejected');
            }
            catch (error) {
                console.error('❌ Employee onboarding error scenario test failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 30000);
    });
    describe('Payroll Processing Process', () => {
        it('should complete full payroll processing process', async () => {
            const startTime = Date.now();
            let payrollPeriodId;
            let payrollId;
            try {
                // Step 1: Create Payroll Period
                console.log('📅 Step 1: Create Payroll Period');
                const periodResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/payroll/periods`, {
                    name: `E2E Payroll Period ${Date.now()}`,
                    start_date: '2024-01-01',
                    end_date: '2024-01-31',
                    status: 'draft'
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(periodResponse.status).toBe(201);
                payrollPeriodId = periodResponse.data.id;
                console.log('✅ Payroll period created successfully');
                // Step 2: Generate Payroll for All Employees
                console.log('💰 Step 2: Generate Payroll for All Employees');
                const generateResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/payroll/generate`, {
                    period_id: payrollPeriodId,
                    employee_ids: [] // Empty array means all employees
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(generateResponse.status).toBe(201);
                payrollId = generateResponse.data.id;
                console.log('✅ Payroll generated successfully');
                // Step 3: Review Payroll Records
                console.log('📊 Step 3: Review Payroll Records');
                const reviewResponse = await axios.create().get(`${config.baseURL}/api/v1/hr/payroll/${payrollId}/records`, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(reviewResponse.status).toBe(200);
                expect(Array.isArray(reviewResponse.data)).toBe(true);
                console.log('✅ Payroll records reviewed successfully');
                // Step 4: Approve Payroll
                console.log('✅ Step 4: Approve Payroll');
                const approveResponse = await axios.create().put(`${config.baseURL}/api/v1/hr/payroll/${payrollId}/approve`, {}, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(approveResponse.status).toBe(200);
                console.log('✅ Payroll approved successfully');
                // Step 5: Generate Payroll Report
                console.log('📄 Step 5: Generate Payroll Report');
                const reportResponse = await axios.create().get(`${config.baseURL}/api/v1/hr/payroll/${payrollId}/report`, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(reportResponse.status).toBe(200);
                console.log('✅ Payroll report generated successfully');
                // Step 6: Verify Employee Can View Paystub
                console.log('👤 Step 6: Verify Employee Can View Paystub');
                const paystubResponse = await axios.create().get(`${config.baseURL}/api/v1/employee/paystubs`, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(paystubResponse.status).toBe(200);
                expect(Array.isArray(paystubResponse.data)).toBe(true);
                console.log('✅ Employee can view paystub successfully');
                const endTime = Date.now();
                const duration = endTime - startTime;
                console.log(`🎉 Payroll processing process completed successfully in ${duration}ms`);
            }
            catch (error) {
                console.error('❌ Payroll processing process failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 120000);
        it('should handle payroll processing error scenarios', async () => {
            try {
                // Try to generate payroll for non-existent period
                const invalidPeriodResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/payroll/generate`, {
                    period_id: 99999, // Non-existent period
                    employee_ids: []
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(invalidPeriodResponse.status).toBe(400);
                console.log('✅ Payroll generation for invalid period properly rejected');
                // Try to approve non-existent payroll
                const invalidApproveResponse = await axios.create().put(`${config.baseURL}/api/v1/hr/payroll/99999/approve`, {}, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(invalidApproveResponse.status).toBe(404);
                console.log('✅ Approval of non-existent payroll properly rejected');
            }
            catch (error) {
                console.error('❌ Payroll processing error scenario test failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 30000);
    });
    describe('Leave Management Process', () => {
        it('should complete full leave management process', async () => {
            const startTime = Date.now();
            let leaveId;
            try {
                // Step 1: Employee Submits Leave Request
                console.log('📋 Step 1: Employee Submits Leave Request');
                const submitResponse = await axios.create().post(`${config.baseURL}/api/v1/employee/leaves`, {
                    type: 'vacation',
                    start_date: '2024-02-01',
                    end_date: '2024-02-05',
                    reason: 'Family vacation'
                }, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(submitResponse.status).toBe(201);
                leaveId = submitResponse.data.id;
                console.log('✅ Leave request submitted successfully');
                // Step 2: Department Head Reviews Leave Request
                console.log('👥 Step 2: Department Head Reviews Leave Request');
                const deptHeadToken = await this.getDepartmentHeadToken();
                const reviewResponse = await axios.create().get(`${config.baseURL}/api/v1/department-head/leaves/pending`, {
                    headers: { 'Authorization': `Bearer ${deptHeadToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(reviewResponse.status).toBe(200);
                expect(Array.isArray(reviewResponse.data)).toBe(true);
                console.log('✅ Leave request reviewed by department head successfully');
                // Step 3: Department Head Approves Leave Request
                console.log('✅ Step 3: Department Head Approves Leave Request');
                const approveResponse = await axios.create().put(`${config.baseURL}/api/v1/department-head/leaves/${leaveId}/approve`, {
                    comments: 'Approved for family vacation'
                }, {
                    headers: { 'Authorization': `Bearer ${deptHeadToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(approveResponse.status).toBe(200);
                console.log('✅ Leave request approved successfully');
                // Step 4: Employee Views Approved Leave
                console.log('👤 Step 4: Employee Views Approved Leave');
                const viewLeaveResponse = await axios.create().get(`${config.baseURL}/api/v1/employee/leaves/${leaveId}`, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(viewLeaveResponse.status).toBe(200);
                expect(viewLeaveResponse.data.status).toBe('approved');
                console.log('✅ Employee can view approved leave successfully');
                // Step 5: Update Leave Balance
                console.log('📊 Step 5: Update Leave Balance');
                const balanceResponse = await axios.create().get(`${config.baseURL}/api/v1/employee/leave-balance`, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(balanceResponse.status).toBe(200);
                expect(balanceResponse.data).toBeDefined();
                console.log('✅ Leave balance updated successfully');
                // Step 6: HR Views Leave Report
                console.log('📄 Step 6: HR Views Leave Report');
                const reportResponse = await axios.create().get(`${config.baseURL}/api/v1/hr/leaves/report`, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(reportResponse.status).toBe(200);
                console.log('✅ HR can view leave report successfully');
                const endTime = Date.now();
                const duration = endTime - startTime;
                console.log(`🎉 Leave management process completed successfully in ${duration}ms`);
            }
            catch (error) {
                console.error('❌ Leave management process failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 120000);
        it('should handle leave management error scenarios', async () => {
            try {
                // Try to submit leave request with invalid dates
                const invalidDateResponse = await axios.create().post(`${config.baseURL}/api/v1/employee/leaves`, {
                    type: 'vacation',
                    start_date: '2024-02-05', // End date before start date
                    end_date: '2024-02-01',
                    reason: 'Invalid date range'
                }, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(invalidDateResponse.status).toBe(400);
                console.log('✅ Leave request with invalid dates properly rejected');
                // Try to approve non-existent leave request
                const invalidApproveResponse = await axios.create().put(`${config.baseURL}/api/v1/department-head/leaves/99999/approve`, {
                    comments: 'Test approval'
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(invalidApproveResponse.status).toBe(404);
                console.log('✅ Approval of non-existent leave request properly rejected');
            }
            catch (error) {
                console.error('❌ Leave management error scenario test failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 30000);
    });
    describe('Attendance Management Process', () => {
        it('should complete full attendance management process', async () => {
            const startTime = Date.now();
            try {
                // Step 1: Employee Clocks In via Kiosk
                console.log('⏰ Step 1: Employee Clocks In via Kiosk');
                const clockInResponse = await axios.create().post(`${config.baseURL}/api/v1/kiosk/clock-in`, {
                    employee_id: 1,
                    selfie_image: 'base64-encoded-image-data'
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(clockInResponse.status).toBe(200);
                expect(clockInResponse.data.attendance).toBeDefined();
                console.log('✅ Employee clocked in successfully');
                // Step 2: Employee Clocks Out via Kiosk
                console.log('⏰ Step 2: Employee Clocks Out via Kiosk');
                const clockOutResponse = await axios.create().post(`${config.baseURL}/api/v1/kiosk/clock-out`, {
                    employee_id: 1,
                    selfie_image: 'base64-encoded-image-data'
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(clockOutResponse.status).toBe(200);
                expect(clockOutResponse.data.attendance).toBeDefined();
                console.log('✅ Employee clocked out successfully');
                // Step 3: Employee Views Attendance History
                console.log('📊 Step 3: Employee Views Attendance History');
                const historyResponse = await axios.create().get(`${config.baseURL}/api/v1/employee/attendance`, {
                    headers: { 'Authorization': `Bearer ${employeeToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(historyResponse.status).toBe(200);
                expect(Array.isArray(historyResponse.data)).toBe(true);
                console.log('✅ Employee attendance history viewed successfully');
                // Step 4: Department Head Views Department Attendance
                console.log('👥 Step 4: Department Head Views Department Attendance');
                const deptHeadToken = await this.getDepartmentHeadToken();
                const deptAttendanceResponse = await axios.create().get(`${config.baseURL}/api/v1/department-head/attendance/summary`, {
                    headers: { 'Authorization': `Bearer ${deptHeadToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(deptAttendanceResponse.status).toBe(200);
                console.log('✅ Department attendance summary viewed successfully');
                // Step 5: HR Views Attendance Reports
                console.log('📄 Step 5: HR Views Attendance Reports');
                const hrReportResponse = await axios.create().get(`${config.baseURL}/api/v1/hr/attendance/report`, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(hrReportResponse.status).toBe(200);
                console.log('✅ HR attendance report viewed successfully');
                // Step 6: Process Attendance for Payroll
                console.log('💰 Step 6: Process Attendance for Payroll');
                const processResponse = await axios.create().post(`${config.baseURL}/api/v1/hr/attendance/process`, {
                    date: new Date().toISOString().split('T')[0]
                }, {
                    headers: { 'Authorization': `Bearer ${hrToken}` },
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect(processResponse.status).toBe(200);
                console.log('✅ Attendance processed for payroll successfully');
                const endTime = Date.now();
                const duration = endTime - startTime;
                console.log(`🎉 Attendance management process completed successfully in ${duration}ms`);
            }
            catch (error) {
                console.error('❌ Attendance management process failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 120000);
        it('should handle attendance management error scenarios', async () => {
            try {
                // Try to clock in for non-existent employee
                const invalidClockInResponse = await axios.create().post(`${config.baseURL}/api/v1/kiosk/clock-in`, {
                    employee_id: 99999, // Non-existent employee
                    selfie_image: 'base64-encoded-image-data'
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect([400, 404]).toContain(invalidClockInResponse.status);
                console.log('✅ Clock in for non-existent employee properly rejected');
                // Try to clock out without clocking in first
                const invalidClockOutResponse = await axios.create().post(`${config.baseURL}/api/v1/kiosk/clock-out`, {
                    employee_id: 1,
                    selfie_image: 'base64-encoded-image-data'
                }, {
                    timeout: 10000,
                    validateStatus: () => true
                });
                expect([400, 404]).toContain(invalidClockOutResponse.status);
                console.log('✅ Clock out without clock in properly rejected');
            }
            catch (error) {
                console.error('❌ Attendance management error scenario test failed:', error instanceof Error ? error.message : String(error));
                throw error;
            }
        }, 30000);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,