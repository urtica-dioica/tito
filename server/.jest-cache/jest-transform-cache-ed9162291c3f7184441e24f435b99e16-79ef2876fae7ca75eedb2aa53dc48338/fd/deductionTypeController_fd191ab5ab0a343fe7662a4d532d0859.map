{"version":3,"names":["cov_1y0lsreoeg","actualCoverage","DeductionType_1","s","require","express_1","logger_1","__importDefault","DeductionTypeController","createDeductionType","req","res","f","requestId","getRequestId","name","description","percentage","fixed_amount","is_active","body","b","status","json","success","message","deductionType","deductionTypeModel","create","data","error","default","getDeductionTypes","page","limit","query","params","parseInt","undefined","result","findAll","records","pagination","total","pages","Math","ceil","getActiveDeductionTypes","_req","deductionTypes","findActive","getDeductionType","id","findById","updateDeductionType","updateData","update","deleteDeductionType","deleted","delete","activateDeductionType","activate","deactivateDeductionType","deactivate","exports","deductionTypeController"],"sources":["/home/kim/tito/server/src/controllers/payroll/deductionTypeController.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { deductionTypeModel } from '../../models/payroll/DeductionType';\nimport { getRequestId } from '../../utils/types/express';\nimport logger from '../../utils/logger';\n\nexport class DeductionTypeController {\n  /**\n   * @route POST /api/v1/payroll/deduction-types\n   * @desc Create a new deduction type\n   * @access HR Admin\n   */\n  async createDeductionType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { name, description, percentage, fixed_amount, is_active } = req.body;\n\n      if (!name) {\n        res.status(400).json({\n          success: false,\n          message: 'Deduction type name is required',\n          requestId\n        });\n        return;\n      }\n\n      if (!percentage && !fixed_amount) {\n        res.status(400).json({\n          success: false,\n          message: 'Either percentage or fixed amount must be provided',\n          requestId\n        });\n        return;\n      }\n\n      if (percentage && fixed_amount) {\n        res.status(400).json({\n          success: false,\n          message: 'Cannot specify both percentage and fixed amount',\n          requestId\n        });\n        return;\n      }\n\n      const deductionType = await deductionTypeModel.create({\n        name,\n        description,\n        percentage,\n        fixed_amount,\n        is_active\n      });\n\n      res.status(201).json({\n        success: true,\n        message: 'Deduction type created successfully',\n        data: deductionType,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error creating deduction type', { \n        error: (error as Error).message, \n        requestId,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to create deduction type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/deduction-types\n   * @desc Get all deduction types\n   * @access HR Admin\n   */\n  async getDeductionTypes(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { page, limit, is_active } = req.query;\n\n      const params = {\n        page: page ? parseInt(page as string) : undefined,\n        limit: limit ? parseInt(limit as string) : undefined,\n        is_active: is_active ? is_active === 'true' : undefined\n      };\n\n      const result = await deductionTypeModel.findAll(params);\n\n      res.json({\n        success: true,\n        message: 'Deduction types retrieved successfully',\n        data: result.records,\n        pagination: {\n          page: parseInt(page as string) || 1,\n          limit: parseInt(limit as string) || 10,\n          total: result.total,\n          pages: Math.ceil(result.total / (parseInt(limit as string) || 10))\n        },\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting deduction types', { \n        error: (error as Error).message, \n        requestId,\n        query: req.query\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get deduction types',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/deduction-types/active\n   * @desc Get active deduction types\n   * @access HR Admin\n   */\n  async getActiveDeductionTypes(_req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(_req);\n    \n    try {\n      const deductionTypes = await deductionTypeModel.findActive();\n\n      res.json({\n        success: true,\n        message: 'Active deduction types retrieved successfully',\n        data: deductionTypes,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting active deduction types', { \n        error: (error as Error).message, \n        requestId\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get active deduction types',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route GET /api/v1/payroll/deduction-types/:id\n   * @desc Get deduction type by ID\n   * @access HR Admin\n   */\n  async getDeductionType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const deductionType = await deductionTypeModel.findById(id);\n\n      if (!deductionType) {\n        res.status(404).json({\n          success: false,\n          message: 'Deduction type not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Deduction type retrieved successfully',\n        data: deductionType,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error getting deduction type', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to get deduction type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route PUT /api/v1/payroll/deduction-types/:id\n   * @desc Update deduction type\n   * @access HR Admin\n   */\n  async updateDeductionType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n\n      const deductionType = await deductionTypeModel.update(id, updateData);\n\n      if (!deductionType) {\n        res.status(404).json({\n          success: false,\n          message: 'Deduction type not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Deduction type updated successfully',\n        data: deductionType,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error updating deduction type', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params,\n        body: req.body\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to update deduction type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route DELETE /api/v1/payroll/deduction-types/:id\n   * @desc Delete deduction type\n   * @access HR Admin\n   */\n  async deleteDeductionType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const deleted = await deductionTypeModel.delete(id);\n\n      if (!deleted) {\n        res.status(404).json({\n          success: false,\n          message: 'Deduction type not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Deduction type deleted successfully',\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error deleting deduction type', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete deduction type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/deduction-types/:id/activate\n   * @desc Activate deduction type\n   * @access HR Admin\n   */\n  async activateDeductionType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const deductionType = await deductionTypeModel.activate(id);\n\n      if (!deductionType) {\n        res.status(404).json({\n          success: false,\n          message: 'Deduction type not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Deduction type activated successfully',\n        data: deductionType,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error activating deduction type', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to activate deduction type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * @route POST /api/v1/payroll/deduction-types/:id/deactivate\n   * @desc Deactivate deduction type\n   * @access HR Admin\n   */\n  async deactivateDeductionType(req: Request, res: Response): Promise<void> {\n    const requestId = getRequestId(req);\n    \n    try {\n      const { id } = req.params;\n\n      const deductionType = await deductionTypeModel.deactivate(id);\n\n      if (!deductionType) {\n        res.status(404).json({\n          success: false,\n          message: 'Deduction type not found',\n          requestId\n        });\n        return;\n      }\n\n      res.json({\n        success: true,\n        message: 'Deduction type deactivated successfully',\n        data: deductionType,\n        requestId\n      });\n    } catch (error) {\n      logger.error('Error deactivating deduction type', { \n        error: (error as Error).message, \n        requestId,\n        params: req.params\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to deactivate deduction type',\n        error: (error as Error).message,\n        requestId\n      });\n    }\n  }\n}\n\nexport const deductionTypeController = new DeductionTypeController();"],"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","ignoreList":[]}